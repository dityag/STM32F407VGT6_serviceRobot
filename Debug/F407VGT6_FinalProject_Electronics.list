
F407VGT6_FinalProject_Electronics.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e00  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08006f90  08006f90  00016f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070c4  080070c4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080070c4  080070c4  000170c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070cc  080070cc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070cc  080070cc  000170cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070d0  080070d0  000170d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080070d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004484  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200044f8  200044f8  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ee67  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000434c  00000000  00000000  0003ef0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001968  00000000  00000000  00043258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017c8  00000000  00000000  00044bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025d38  00000000  00000000  00046388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f3da  00000000  00000000  0006c0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6a81  00000000  00000000  0008b49a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00171f1b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006da0  00000000  00000000  00171f6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006f78 	.word	0x08006f78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006f78 	.word	0x08006f78

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004da:	463b      	mov	r3, r7
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	605a      	str	r2, [r3, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004e6:	4b21      	ldr	r3, [pc, #132]	; (800056c <MX_ADC1_Init+0x98>)
 80004e8:	4a21      	ldr	r2, [pc, #132]	; (8000570 <MX_ADC1_Init+0x9c>)
 80004ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004ec:	4b1f      	ldr	r3, [pc, #124]	; (800056c <MX_ADC1_Init+0x98>)
 80004ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80004f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004f4:	4b1d      	ldr	r3, [pc, #116]	; (800056c <MX_ADC1_Init+0x98>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80004fa:	4b1c      	ldr	r3, [pc, #112]	; (800056c <MX_ADC1_Init+0x98>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000500:	4b1a      	ldr	r3, [pc, #104]	; (800056c <MX_ADC1_Init+0x98>)
 8000502:	2200      	movs	r2, #0
 8000504:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000506:	4b19      	ldr	r3, [pc, #100]	; (800056c <MX_ADC1_Init+0x98>)
 8000508:	2200      	movs	r2, #0
 800050a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800050e:	4b17      	ldr	r3, [pc, #92]	; (800056c <MX_ADC1_Init+0x98>)
 8000510:	2200      	movs	r2, #0
 8000512:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000514:	4b15      	ldr	r3, [pc, #84]	; (800056c <MX_ADC1_Init+0x98>)
 8000516:	4a17      	ldr	r2, [pc, #92]	; (8000574 <MX_ADC1_Init+0xa0>)
 8000518:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800051a:	4b14      	ldr	r3, [pc, #80]	; (800056c <MX_ADC1_Init+0x98>)
 800051c:	2200      	movs	r2, #0
 800051e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000520:	4b12      	ldr	r3, [pc, #72]	; (800056c <MX_ADC1_Init+0x98>)
 8000522:	2201      	movs	r2, #1
 8000524:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000526:	4b11      	ldr	r3, [pc, #68]	; (800056c <MX_ADC1_Init+0x98>)
 8000528:	2200      	movs	r2, #0
 800052a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800052e:	4b0f      	ldr	r3, [pc, #60]	; (800056c <MX_ADC1_Init+0x98>)
 8000530:	2201      	movs	r2, #1
 8000532:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000534:	480d      	ldr	r0, [pc, #52]	; (800056c <MX_ADC1_Init+0x98>)
 8000536:	f001 fcab 	bl	8001e90 <HAL_ADC_Init>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000540:	f000 fcec 	bl	8000f1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000544:	230b      	movs	r3, #11
 8000546:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000548:	2301      	movs	r3, #1
 800054a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800054c:	2300      	movs	r3, #0
 800054e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000550:	463b      	mov	r3, r7
 8000552:	4619      	mov	r1, r3
 8000554:	4805      	ldr	r0, [pc, #20]	; (800056c <MX_ADC1_Init+0x98>)
 8000556:	f001 fcdf 	bl	8001f18 <HAL_ADC_ConfigChannel>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000560:	f000 fcdc 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000564:	bf00      	nop
 8000566:	3710      	adds	r7, #16
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	20000090 	.word	0x20000090
 8000570:	40012000 	.word	0x40012000
 8000574:	0f000001 	.word	0x0f000001

08000578 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08a      	sub	sp, #40	; 0x28
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000580:	f107 0314 	add.w	r3, r7, #20
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a17      	ldr	r2, [pc, #92]	; (80005f4 <HAL_ADC_MspInit+0x7c>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d127      	bne.n	80005ea <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	613b      	str	r3, [r7, #16]
 800059e:	4b16      	ldr	r3, [pc, #88]	; (80005f8 <HAL_ADC_MspInit+0x80>)
 80005a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005a2:	4a15      	ldr	r2, [pc, #84]	; (80005f8 <HAL_ADC_MspInit+0x80>)
 80005a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005a8:	6453      	str	r3, [r2, #68]	; 0x44
 80005aa:	4b13      	ldr	r3, [pc, #76]	; (80005f8 <HAL_ADC_MspInit+0x80>)
 80005ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005b2:	613b      	str	r3, [r7, #16]
 80005b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	60fb      	str	r3, [r7, #12]
 80005ba:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <HAL_ADC_MspInit+0x80>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a0e      	ldr	r2, [pc, #56]	; (80005f8 <HAL_ADC_MspInit+0x80>)
 80005c0:	f043 0304 	orr.w	r3, r3, #4
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <HAL_ADC_MspInit+0x80>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0304 	and.w	r3, r3, #4
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80005d2:	2306      	movs	r3, #6
 80005d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005d6:	2303      	movs	r3, #3
 80005d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005da:	2300      	movs	r3, #0
 80005dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005de:	f107 0314 	add.w	r3, r7, #20
 80005e2:	4619      	mov	r1, r3
 80005e4:	4805      	ldr	r0, [pc, #20]	; (80005fc <HAL_ADC_MspInit+0x84>)
 80005e6:	f002 f893 	bl	8002710 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005ea:	bf00      	nop
 80005ec:	3728      	adds	r7, #40	; 0x28
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40012000 	.word	0x40012000
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40020800 	.word	0x40020800

08000600 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000604:	4b16      	ldr	r3, [pc, #88]	; (8000660 <MX_CAN1_Init+0x60>)
 8000606:	4a17      	ldr	r2, [pc, #92]	; (8000664 <MX_CAN1_Init+0x64>)
 8000608:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800060a:	4b15      	ldr	r3, [pc, #84]	; (8000660 <MX_CAN1_Init+0x60>)
 800060c:	2210      	movs	r2, #16
 800060e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000610:	4b13      	ldr	r3, [pc, #76]	; (8000660 <MX_CAN1_Init+0x60>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000616:	4b12      	ldr	r3, [pc, #72]	; (8000660 <MX_CAN1_Init+0x60>)
 8000618:	2200      	movs	r2, #0
 800061a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800061c:	4b10      	ldr	r3, [pc, #64]	; (8000660 <MX_CAN1_Init+0x60>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000622:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <MX_CAN1_Init+0x60>)
 8000624:	2200      	movs	r2, #0
 8000626:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000628:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <MX_CAN1_Init+0x60>)
 800062a:	2200      	movs	r2, #0
 800062c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800062e:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <MX_CAN1_Init+0x60>)
 8000630:	2200      	movs	r2, #0
 8000632:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000634:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <MX_CAN1_Init+0x60>)
 8000636:	2200      	movs	r2, #0
 8000638:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <MX_CAN1_Init+0x60>)
 800063c:	2200      	movs	r2, #0
 800063e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000640:	4b07      	ldr	r3, [pc, #28]	; (8000660 <MX_CAN1_Init+0x60>)
 8000642:	2200      	movs	r2, #0
 8000644:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <MX_CAN1_Init+0x60>)
 8000648:	2200      	movs	r2, #0
 800064a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <MX_CAN1_Init+0x60>)
 800064e:	f001 fe81 	bl	8002354 <HAL_CAN_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000658:	f000 fc60 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	200000d8 	.word	0x200000d8
 8000664:	40006400 	.word	0x40006400

08000668 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08a      	sub	sp, #40	; 0x28
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a19      	ldr	r2, [pc, #100]	; (80006ec <HAL_CAN_MspInit+0x84>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d12b      	bne.n	80006e2 <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	613b      	str	r3, [r7, #16]
 800068e:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <HAL_CAN_MspInit+0x88>)
 8000690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000692:	4a17      	ldr	r2, [pc, #92]	; (80006f0 <HAL_CAN_MspInit+0x88>)
 8000694:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000698:	6413      	str	r3, [r2, #64]	; 0x40
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <HAL_CAN_MspInit+0x88>)
 800069c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <HAL_CAN_MspInit+0x88>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a10      	ldr	r2, [pc, #64]	; (80006f0 <HAL_CAN_MspInit+0x88>)
 80006b0:	f043 0308 	orr.w	r3, r3, #8
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <HAL_CAN_MspInit+0x88>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0308 	and.w	r3, r3, #8
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80006c2:	2303      	movs	r3, #3
 80006c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c6:	2302      	movs	r3, #2
 80006c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ce:	2303      	movs	r3, #3
 80006d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80006d2:	2309      	movs	r3, #9
 80006d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	4619      	mov	r1, r3
 80006dc:	4805      	ldr	r0, [pc, #20]	; (80006f4 <HAL_CAN_MspInit+0x8c>)
 80006de:	f002 f817 	bl	8002710 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80006e2:	bf00      	nop
 80006e4:	3728      	adds	r7, #40	; 0x28
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40006400 	.word	0x40006400
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40020c00 	.word	0x40020c00

080006f8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	4a07      	ldr	r2, [pc, #28]	; (8000724 <vApplicationGetIdleTaskMemory+0x2c>)
 8000708:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	4a06      	ldr	r2, [pc, #24]	; (8000728 <vApplicationGetIdleTaskMemory+0x30>)
 800070e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2280      	movs	r2, #128	; 0x80
 8000714:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000716:	bf00      	nop
 8000718:	3714      	adds	r7, #20
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	20000118 	.word	0x20000118
 8000728:	200001cc 	.word	0x200001cc

0800072c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800072c:	b5b0      	push	{r4, r5, r7, lr}
 800072e:	b0a6      	sub	sp, #152	; 0x98
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of Mutex01 */
  osMutexDef(Mutex01);
 8000732:	2300      	movs	r3, #0
 8000734:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000738:	2300      	movs	r3, #0
 800073a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  Mutex01Handle = osMutexCreate(osMutex(Mutex01));
 800073e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000742:	4618      	mov	r0, r3
 8000744:	f004 fbff 	bl	8004f46 <osMutexCreate>
 8000748:	4603      	mov	r3, r0
 800074a:	4a31      	ldr	r2, [pc, #196]	; (8000810 <MX_FREERTOS_Init+0xe4>)
 800074c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task01 */
  osThreadDef(Task01, StartTask01, osPriorityNormal, 0, 1024);
 800074e:	4b31      	ldr	r3, [pc, #196]	; (8000814 <MX_FREERTOS_Init+0xe8>)
 8000750:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000754:	461d      	mov	r5, r3
 8000756:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000758:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800075a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800075e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task01Handle = osThreadCreate(osThread(Task01), NULL);
 8000762:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000766:	2100      	movs	r1, #0
 8000768:	4618      	mov	r0, r3
 800076a:	f004 fb8c 	bl	8004e86 <osThreadCreate>
 800076e:	4603      	mov	r3, r0
 8000770:	4a29      	ldr	r2, [pc, #164]	; (8000818 <MX_FREERTOS_Init+0xec>)
 8000772:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task02 */
  osThreadDef(Task02, StartTask02, osPriorityNormal, 0, 128);
 8000774:	4b29      	ldr	r3, [pc, #164]	; (800081c <MX_FREERTOS_Init+0xf0>)
 8000776:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800077a:	461d      	mov	r5, r3
 800077c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800077e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000780:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000784:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task02Handle = osThreadCreate(osThread(Task02), NULL);
 8000788:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f004 fb79 	bl	8004e86 <osThreadCreate>
 8000794:	4603      	mov	r3, r0
 8000796:	4a22      	ldr	r2, [pc, #136]	; (8000820 <MX_FREERTOS_Init+0xf4>)
 8000798:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task03 */
  osThreadDef(Task03, StartTask03, osPriorityNormal, 0, 128);
 800079a:	4b22      	ldr	r3, [pc, #136]	; (8000824 <MX_FREERTOS_Init+0xf8>)
 800079c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80007a0:	461d      	mov	r5, r3
 80007a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task03Handle = osThreadCreate(osThread(Task03), NULL);
 80007ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80007b2:	2100      	movs	r1, #0
 80007b4:	4618      	mov	r0, r3
 80007b6:	f004 fb66 	bl	8004e86 <osThreadCreate>
 80007ba:	4603      	mov	r3, r0
 80007bc:	4a1a      	ldr	r2, [pc, #104]	; (8000828 <MX_FREERTOS_Init+0xfc>)
 80007be:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task04 */
  osThreadDef(Task04, StartTask04, osPriorityNormal, 0, 128);
 80007c0:	4b1a      	ldr	r3, [pc, #104]	; (800082c <MX_FREERTOS_Init+0x100>)
 80007c2:	f107 0420 	add.w	r4, r7, #32
 80007c6:	461d      	mov	r5, r3
 80007c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task04Handle = osThreadCreate(osThread(Task04), NULL);
 80007d4:	f107 0320 	add.w	r3, r7, #32
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f004 fb53 	bl	8004e86 <osThreadCreate>
 80007e0:	4603      	mov	r3, r0
 80007e2:	4a13      	ldr	r2, [pc, #76]	; (8000830 <MX_FREERTOS_Init+0x104>)
 80007e4:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task05 */
  osThreadDef(Task05, StartTask05, osPriorityNormal, 0, 128);
 80007e6:	4b13      	ldr	r3, [pc, #76]	; (8000834 <MX_FREERTOS_Init+0x108>)
 80007e8:	1d3c      	adds	r4, r7, #4
 80007ea:	461d      	mov	r5, r3
 80007ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task05Handle = osThreadCreate(osThread(Task05), NULL);
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	2100      	movs	r1, #0
 80007fc:	4618      	mov	r0, r3
 80007fe:	f004 fb42 	bl	8004e86 <osThreadCreate>
 8000802:	4603      	mov	r3, r0
 8000804:	4a0c      	ldr	r2, [pc, #48]	; (8000838 <MX_FREERTOS_Init+0x10c>)
 8000806:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000808:	bf00      	nop
 800080a:	3798      	adds	r7, #152	; 0x98
 800080c:	46bd      	mov	sp, r7
 800080e:	bdb0      	pop	{r4, r5, r7, pc}
 8000810:	20000114 	.word	0x20000114
 8000814:	08006fb8 	.word	0x08006fb8
 8000818:	20000100 	.word	0x20000100
 800081c:	08006fd4 	.word	0x08006fd4
 8000820:	20000104 	.word	0x20000104
 8000824:	08006ff0 	.word	0x08006ff0
 8000828:	20000108 	.word	0x20000108
 800082c:	0800700c 	.word	0x0800700c
 8000830:	2000010c 	.word	0x2000010c
 8000834:	08007028 	.word	0x08007028
 8000838:	20000110 	.word	0x20000110

0800083c <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void const * argument)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask01 */
  /* Infinite loop */
  for(;;)
  {
	if (x == 1){
 8000844:	4b21      	ldr	r3, [pc, #132]	; (80008cc <StartTask01+0x90>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2b01      	cmp	r3, #1
 800084a:	d112      	bne.n	8000872 <StartTask01+0x36>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800084c:	2201      	movs	r2, #1
 800084e:	2102      	movs	r1, #2
 8000850:	481f      	ldr	r0, [pc, #124]	; (80008d0 <StartTask01+0x94>)
 8000852:	f002 f8f9 	bl	8002a48 <HAL_GPIO_WritePin>
	osDelay(1000);
 8000856:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800085a:	f004 fb60 	bl	8004f1e <osDelay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	2102      	movs	r1, #2
 8000862:	481b      	ldr	r0, [pc, #108]	; (80008d0 <StartTask01+0x94>)
 8000864:	f002 f8f0 	bl	8002a48 <HAL_GPIO_WritePin>
	osDelay(1000);
 8000868:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800086c:	f004 fb57 	bl	8004f1e <osDelay>
 8000870:	e028      	b.n	80008c4 <StartTask01+0x88>
	}
	else if (x == 2){
 8000872:	4b16      	ldr	r3, [pc, #88]	; (80008cc <StartTask01+0x90>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	2b02      	cmp	r3, #2
 8000878:	d112      	bne.n	80008a0 <StartTask01+0x64>
	HAL_GPIO_WritePin(GPIOD, LED2_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	2140      	movs	r1, #64	; 0x40
 800087e:	4815      	ldr	r0, [pc, #84]	; (80008d4 <StartTask01+0x98>)
 8000880:	f002 f8e2 	bl	8002a48 <HAL_GPIO_WritePin>
	osDelay(500);
 8000884:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000888:	f004 fb49 	bl	8004f1e <osDelay>
	HAL_GPIO_WritePin(GPIOD, LED2_Pin, GPIO_PIN_SET);
 800088c:	2201      	movs	r2, #1
 800088e:	2140      	movs	r1, #64	; 0x40
 8000890:	4810      	ldr	r0, [pc, #64]	; (80008d4 <StartTask01+0x98>)
 8000892:	f002 f8d9 	bl	8002a48 <HAL_GPIO_WritePin>
	osDelay(500);
 8000896:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800089a:	f004 fb40 	bl	8004f1e <osDelay>
 800089e:	e011      	b.n	80008c4 <StartTask01+0x88>
	}
	else {
	HAL_GPIO_WritePin(GPIOE, LED1_Pin, GPIO_PIN_SET);
 80008a0:	2201      	movs	r2, #1
 80008a2:	2101      	movs	r1, #1
 80008a4:	480c      	ldr	r0, [pc, #48]	; (80008d8 <StartTask01+0x9c>)
 80008a6:	f002 f8cf 	bl	8002a48 <HAL_GPIO_WritePin>
	osDelay(500);
 80008aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008ae:	f004 fb36 	bl	8004f1e <osDelay>
	HAL_GPIO_WritePin(GPIOE, LED1_Pin, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2101      	movs	r1, #1
 80008b6:	4808      	ldr	r0, [pc, #32]	; (80008d8 <StartTask01+0x9c>)
 80008b8:	f002 f8c6 	bl	8002a48 <HAL_GPIO_WritePin>
	osDelay(500);
 80008bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008c0:	f004 fb2d 	bl	8004f1e <osDelay>
	}
    osDelay(1);
 80008c4:	2001      	movs	r0, #1
 80008c6:	f004 fb2a 	bl	8004f1e <osDelay>
	if (x == 1){
 80008ca:	e7bb      	b.n	8000844 <StartTask01+0x8>
 80008cc:	20000474 	.word	0x20000474
 80008d0:	40020000 	.word	0x40020000
 80008d4:	40020c00 	.word	0x40020c00
 80008d8:	40021000 	.word	0x40021000

080008dc <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	if(direction == 0){
 80008e4:	4b20      	ldr	r3, [pc, #128]	; (8000968 <StartTask02+0x8c>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d110      	bne.n	800090e <StartTask02+0x32>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2180      	movs	r1, #128	; 0x80
 80008f0:	481e      	ldr	r0, [pc, #120]	; (800096c <StartTask02+0x90>)
 80008f2:	f002 f8a9 	bl	8002a48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008fc:	481b      	ldr	r0, [pc, #108]	; (800096c <StartTask02+0x90>)
 80008fe:	f002 f8a3 	bl	8002a48 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
 8000902:	4b1b      	ldr	r3, [pc, #108]	; (8000970 <StartTask02+0x94>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <StartTask02+0x98>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	635a      	str	r2, [r3, #52]	; 0x34
 800090c:	e028      	b.n	8000960 <StartTask02+0x84>
	}

	else if(direction == 1){
 800090e:	4b16      	ldr	r3, [pc, #88]	; (8000968 <StartTask02+0x8c>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	2b01      	cmp	r3, #1
 8000914:	d110      	bne.n	8000938 <StartTask02+0x5c>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 8000916:	2201      	movs	r2, #1
 8000918:	2180      	movs	r1, #128	; 0x80
 800091a:	4814      	ldr	r0, [pc, #80]	; (800096c <StartTask02+0x90>)
 800091c:	f002 f894 	bl	8002a48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8000920:	2200      	movs	r2, #0
 8000922:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000926:	4811      	ldr	r0, [pc, #68]	; (800096c <StartTask02+0x90>)
 8000928:	f002 f88e 	bl	8002a48 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
 800092c:	4b10      	ldr	r3, [pc, #64]	; (8000970 <StartTask02+0x94>)
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	4b10      	ldr	r3, [pc, #64]	; (8000974 <StartTask02+0x98>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	635a      	str	r2, [r3, #52]	; 0x34
 8000936:	e013      	b.n	8000960 <StartTask02+0x84>
	}

	else if(direction == 2){
 8000938:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <StartTask02+0x8c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2b02      	cmp	r3, #2
 800093e:	d10f      	bne.n	8000960 <StartTask02+0x84>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	2180      	movs	r1, #128	; 0x80
 8000944:	4809      	ldr	r0, [pc, #36]	; (800096c <StartTask02+0x90>)
 8000946:	f002 f87f 	bl	8002a48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 800094a:	2201      	movs	r2, #1
 800094c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000950:	4806      	ldr	r0, [pc, #24]	; (800096c <StartTask02+0x90>)
 8000952:	f002 f879 	bl	8002a48 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <StartTask02+0x94>)
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <StartTask02+0x98>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	635a      	str	r2, [r3, #52]	; 0x34
	}
    osDelay(1);
 8000960:	2001      	movs	r0, #1
 8000962:	f004 fadc 	bl	8004f1e <osDelay>
	if(direction == 0){
 8000966:	e7bd      	b.n	80008e4 <StartTask02+0x8>
 8000968:	20000478 	.word	0x20000478
 800096c:	40021000 	.word	0x40021000
 8000970:	2000047c 	.word	0x2000047c
 8000974:	20000520 	.word	0x20000520

08000978 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000980:	2001      	movs	r0, #1
 8000982:	f004 facc 	bl	8004f1e <osDelay>
 8000986:	e7fb      	b.n	8000980 <StartTask03+0x8>

08000988 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000990:	2001      	movs	r0, #1
 8000992:	f004 fac4 	bl	8004f1e <osDelay>
 8000996:	e7fb      	b.n	8000990 <StartTask04+0x8>

08000998 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void const * argument)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009a0:	2001      	movs	r0, #1
 80009a2:	f004 fabc 	bl	8004f1e <osDelay>
 80009a6:	e7fb      	b.n	80009a0 <StartTask05+0x8>

080009a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08c      	sub	sp, #48	; 0x30
 80009ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
 80009bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	61bb      	str	r3, [r7, #24]
 80009c2:	4b6f      	ldr	r3, [pc, #444]	; (8000b80 <MX_GPIO_Init+0x1d8>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a6e      	ldr	r2, [pc, #440]	; (8000b80 <MX_GPIO_Init+0x1d8>)
 80009c8:	f043 0310 	orr.w	r3, r3, #16
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b6c      	ldr	r3, [pc, #432]	; (8000b80 <MX_GPIO_Init+0x1d8>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0310 	and.w	r3, r3, #16
 80009d6:	61bb      	str	r3, [r7, #24]
 80009d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]
 80009de:	4b68      	ldr	r3, [pc, #416]	; (8000b80 <MX_GPIO_Init+0x1d8>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a67      	ldr	r2, [pc, #412]	; (8000b80 <MX_GPIO_Init+0x1d8>)
 80009e4:	f043 0304 	orr.w	r3, r3, #4
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b65      	ldr	r3, [pc, #404]	; (8000b80 <MX_GPIO_Init+0x1d8>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0304 	and.w	r3, r3, #4
 80009f2:	617b      	str	r3, [r7, #20]
 80009f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]
 80009fa:	4b61      	ldr	r3, [pc, #388]	; (8000b80 <MX_GPIO_Init+0x1d8>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a60      	ldr	r2, [pc, #384]	; (8000b80 <MX_GPIO_Init+0x1d8>)
 8000a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b5e      	ldr	r3, [pc, #376]	; (8000b80 <MX_GPIO_Init+0x1d8>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	4b5a      	ldr	r3, [pc, #360]	; (8000b80 <MX_GPIO_Init+0x1d8>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a59      	ldr	r2, [pc, #356]	; (8000b80 <MX_GPIO_Init+0x1d8>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b57      	ldr	r3, [pc, #348]	; (8000b80 <MX_GPIO_Init+0x1d8>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	4b53      	ldr	r3, [pc, #332]	; (8000b80 <MX_GPIO_Init+0x1d8>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a52      	ldr	r2, [pc, #328]	; (8000b80 <MX_GPIO_Init+0x1d8>)
 8000a38:	f043 0302 	orr.w	r3, r3, #2
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b50      	ldr	r3, [pc, #320]	; (8000b80 <MX_GPIO_Init+0x1d8>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0302 	and.w	r3, r3, #2
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	4b4c      	ldr	r3, [pc, #304]	; (8000b80 <MX_GPIO_Init+0x1d8>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a4b      	ldr	r2, [pc, #300]	; (8000b80 <MX_GPIO_Init+0x1d8>)
 8000a54:	f043 0308 	orr.w	r3, r3, #8
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b49      	ldr	r3, [pc, #292]	; (8000b80 <MX_GPIO_Init+0x1d8>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0308 	and.w	r3, r3, #8
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 8000a66:	2200      	movs	r2, #0
 8000a68:	f241 5189 	movw	r1, #5513	; 0x1589
 8000a6c:	4845      	ldr	r0, [pc, #276]	; (8000b84 <MX_GPIO_Init+0x1dc>)
 8000a6e:	f001 ffeb 	bl	8002a48 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a72:	2201      	movs	r2, #1
 8000a74:	2101      	movs	r1, #1
 8000a76:	4844      	ldr	r0, [pc, #272]	; (8000b88 <MX_GPIO_Init+0x1e0>)
 8000a78:	f001 ffe6 	bl	8002a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2102      	movs	r1, #2
 8000a80:	4842      	ldr	r0, [pc, #264]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 8000a82:	f001 ffe1 	bl	8002a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000a86:	2200      	movs	r2, #0
 8000a88:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 8000a8c:	483e      	ldr	r0, [pc, #248]	; (8000b88 <MX_GPIO_Init+0x1e0>)
 8000a8e:	f001 ffdb 	bl	8002a48 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10|GPIO_PIN_11|Audio_RST_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	f44f 6145 	mov.w	r1, #3152	; 0xc50
 8000a98:	483d      	ldr	r0, [pc, #244]	; (8000b90 <MX_GPIO_Init+0x1e8>)
 8000a9a:	f001 ffd5 	bl	8002a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE7 PE8 PE10
                           PE12 PEPin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 8000a9e:	f241 5389 	movw	r3, #5513	; 0x1589
 8000aa2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	2300      	movs	r3, #0
 8000aae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ab0:	f107 031c 	add.w	r3, r7, #28
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4833      	ldr	r0, [pc, #204]	; (8000b84 <MX_GPIO_Init+0x1dc>)
 8000ab8:	f001 fe2a 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PC4 PC5 PC6
                           PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000abc:	f240 33f1 	movw	r3, #1009	; 0x3f1
 8000ac0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2300      	movs	r3, #0
 8000acc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ace:	f107 031c 	add.w	r3, r7, #28
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	482c      	ldr	r0, [pc, #176]	; (8000b88 <MX_GPIO_Init+0x1e0>)
 8000ad6:	f001 fe1b 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ada:	2301      	movs	r3, #1
 8000adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ade:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ae2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ae8:	f107 031c 	add.w	r3, r7, #28
 8000aec:	4619      	mov	r1, r3
 8000aee:	4827      	ldr	r0, [pc, #156]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 8000af0:	f001 fe0e 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000af4:	2302      	movs	r3, #2
 8000af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af8:	2301      	movs	r3, #1
 8000afa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000b04:	f107 031c 	add.w	r3, r7, #28
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4820      	ldr	r0, [pc, #128]	; (8000b8c <MX_GPIO_Init+0x1e4>)
 8000b0c:	f001 fe00 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b10:	2304      	movs	r3, #4
 8000b12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b14:	2300      	movs	r3, #0
 8000b16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1c:	f107 031c 	add.w	r3, r7, #28
 8000b20:	4619      	mov	r1, r3
 8000b22:	481c      	ldr	r0, [pc, #112]	; (8000b94 <MX_GPIO_Init+0x1ec>)
 8000b24:	f001 fdf4 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PDPin PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|Audio_RST_Pin|LED2_Pin;
 8000b28:	f44f 6345 	mov.w	r3, #3152	; 0xc50
 8000b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4813      	ldr	r0, [pc, #76]	; (8000b90 <MX_GPIO_Init+0x1e8>)
 8000b42:	f001 fde5 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b46:	2320      	movs	r3, #32
 8000b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 031c 	add.w	r3, r7, #28
 8000b56:	4619      	mov	r1, r3
 8000b58:	480d      	ldr	r0, [pc, #52]	; (8000b90 <MX_GPIO_Init+0x1e8>)
 8000b5a:	f001 fdd9 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b62:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b6c:	f107 031c 	add.w	r3, r7, #28
 8000b70:	4619      	mov	r1, r3
 8000b72:	4804      	ldr	r0, [pc, #16]	; (8000b84 <MX_GPIO_Init+0x1dc>)
 8000b74:	f001 fdcc 	bl	8002710 <HAL_GPIO_Init>

}
 8000b78:	bf00      	nop
 8000b7a:	3730      	adds	r7, #48	; 0x30
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40021000 	.word	0x40021000
 8000b88:	40020800 	.word	0x40020800
 8000b8c:	40020000 	.word	0x40020000
 8000b90:	40020c00 	.word	0x40020c00
 8000b94:	40020400 	.word	0x40020400

08000b98 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <MX_I2C1_Init+0x50>)
 8000b9e:	4a13      	ldr	r2, [pc, #76]	; (8000bec <MX_I2C1_Init+0x54>)
 8000ba0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ba2:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <MX_I2C1_Init+0x50>)
 8000ba4:	4a12      	ldr	r2, [pc, #72]	; (8000bf0 <MX_I2C1_Init+0x58>)
 8000ba6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <MX_I2C1_Init+0x50>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <MX_I2C1_Init+0x50>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <MX_I2C1_Init+0x50>)
 8000bb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <MX_I2C1_Init+0x50>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <MX_I2C1_Init+0x50>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bc8:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <MX_I2C1_Init+0x50>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bce:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <MX_I2C1_Init+0x50>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bd4:	4804      	ldr	r0, [pc, #16]	; (8000be8 <MX_I2C1_Init+0x50>)
 8000bd6:	f001 ff51 	bl	8002a7c <HAL_I2C_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000be0:	f000 f99c 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	200003cc 	.word	0x200003cc
 8000bec:	40005400 	.word	0x40005400
 8000bf0:	000186a0 	.word	0x000186a0

08000bf4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <MX_I2C2_Init+0x50>)
 8000bfa:	4a13      	ldr	r2, [pc, #76]	; (8000c48 <MX_I2C2_Init+0x54>)
 8000bfc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000bfe:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <MX_I2C2_Init+0x50>)
 8000c00:	4a12      	ldr	r2, [pc, #72]	; (8000c4c <MX_I2C2_Init+0x58>)
 8000c02:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c04:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <MX_I2C2_Init+0x50>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <MX_I2C2_Init+0x50>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c10:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <MX_I2C2_Init+0x50>)
 8000c12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c16:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c18:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <MX_I2C2_Init+0x50>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000c1e:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <MX_I2C2_Init+0x50>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c24:	4b07      	ldr	r3, [pc, #28]	; (8000c44 <MX_I2C2_Init+0x50>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <MX_I2C2_Init+0x50>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c30:	4804      	ldr	r0, [pc, #16]	; (8000c44 <MX_I2C2_Init+0x50>)
 8000c32:	f001 ff23 	bl	8002a7c <HAL_I2C_Init>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000c3c:	f000 f96e 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000420 	.word	0x20000420
 8000c48:	40005800 	.word	0x40005800
 8000c4c:	000186a0 	.word	0x000186a0

08000c50 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08c      	sub	sp, #48	; 0x30
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a33      	ldr	r2, [pc, #204]	; (8000d3c <HAL_I2C_MspInit+0xec>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d12d      	bne.n	8000cce <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	61bb      	str	r3, [r7, #24]
 8000c76:	4b32      	ldr	r3, [pc, #200]	; (8000d40 <HAL_I2C_MspInit+0xf0>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a31      	ldr	r2, [pc, #196]	; (8000d40 <HAL_I2C_MspInit+0xf0>)
 8000c7c:	f043 0302 	orr.w	r3, r3, #2
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b2f      	ldr	r3, [pc, #188]	; (8000d40 <HAL_I2C_MspInit+0xf0>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	61bb      	str	r3, [r7, #24]
 8000c8c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c94:	2312      	movs	r3, #18
 8000c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ca0:	2304      	movs	r3, #4
 8000ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca4:	f107 031c 	add.w	r3, r7, #28
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4826      	ldr	r0, [pc, #152]	; (8000d44 <HAL_I2C_MspInit+0xf4>)
 8000cac:	f001 fd30 	bl	8002710 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	4b22      	ldr	r3, [pc, #136]	; (8000d40 <HAL_I2C_MspInit+0xf0>)
 8000cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb8:	4a21      	ldr	r2, [pc, #132]	; (8000d40 <HAL_I2C_MspInit+0xf0>)
 8000cba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cbe:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc0:	4b1f      	ldr	r3, [pc, #124]	; (8000d40 <HAL_I2C_MspInit+0xf0>)
 8000cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cc8:	617b      	str	r3, [r7, #20]
 8000cca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000ccc:	e031      	b.n	8000d32 <HAL_I2C_MspInit+0xe2>
  else if(i2cHandle->Instance==I2C2)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a1d      	ldr	r2, [pc, #116]	; (8000d48 <HAL_I2C_MspInit+0xf8>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d12c      	bne.n	8000d32 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd8:	2300      	movs	r3, #0
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <HAL_I2C_MspInit+0xf0>)
 8000cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce0:	4a17      	ldr	r2, [pc, #92]	; (8000d40 <HAL_I2C_MspInit+0xf0>)
 8000ce2:	f043 0302 	orr.w	r3, r3, #2
 8000ce6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce8:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <HAL_I2C_MspInit+0xf0>)
 8000cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cec:	f003 0302 	and.w	r3, r3, #2
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000cf4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cfa:	2312      	movs	r3, #18
 8000cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d02:	2303      	movs	r3, #3
 8000d04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d06:	2304      	movs	r3, #4
 8000d08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0a:	f107 031c 	add.w	r3, r7, #28
 8000d0e:	4619      	mov	r1, r3
 8000d10:	480c      	ldr	r0, [pc, #48]	; (8000d44 <HAL_I2C_MspInit+0xf4>)
 8000d12:	f001 fcfd 	bl	8002710 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <HAL_I2C_MspInit+0xf0>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	4a08      	ldr	r2, [pc, #32]	; (8000d40 <HAL_I2C_MspInit+0xf0>)
 8000d20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d24:	6413      	str	r3, [r2, #64]	; 0x40
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <HAL_I2C_MspInit+0xf0>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
}
 8000d32:	bf00      	nop
 8000d34:	3730      	adds	r7, #48	; 0x30
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40005400 	.word	0x40005400
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40020400 	.word	0x40020400
 8000d48:	40005800 	.word	0x40005800

08000d4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d50:	f001 f85c 	bl	8001e0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d54:	f000 f866 	bl	8000e24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d58:	f7ff fe26 	bl	80009a8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d5c:	f7ff ff1c 	bl	8000b98 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000d60:	f000 fa64 	bl	800122c <MX_TIM1_Init>
  MX_TIM9_Init();
 8000d64:	f000 fc42 	bl	80015ec <MX_TIM9_Init>
  MX_TIM4_Init();
 8000d68:	f000 fba8 	bl	80014bc <MX_TIM4_Init>
  MX_TIM3_Init();
 8000d6c:	f000 fb24 	bl	80013b8 <MX_TIM3_Init>
  MX_UART4_Init();
 8000d70:	f000 fe72 	bl	8001a58 <MX_UART4_Init>
  MX_UART5_Init();
 8000d74:	f000 fe9a 	bl	8001aac <MX_UART5_Init>
  MX_USART3_UART_Init();
 8000d78:	f000 feec 	bl	8001b54 <MX_USART3_UART_Init>
  MX_CAN1_Init();
 8000d7c:	f7ff fc40 	bl	8000600 <MX_CAN1_Init>
  MX_I2C2_Init();
 8000d80:	f7ff ff38 	bl	8000bf4 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000d84:	f000 f8d0 	bl	8000f28 <MX_SPI1_Init>
  MX_TIM12_Init();
 8000d88:	f000 fc9e 	bl	80016c8 <MX_TIM12_Init>
  MX_ADC1_Init();
 8000d8c:	f7ff fba2 	bl	80004d4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000d90:	f000 feb6 	bl	8001b00 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //============ACTUATOR MOTOR============
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);//TL
 8000d94:	2100      	movs	r1, #0
 8000d96:	481e      	ldr	r0, [pc, #120]	; (8000e10 <main+0xc4>)
 8000d98:	f002 fe20 	bl	80039dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);//TR
 8000d9c:	2104      	movs	r1, #4
 8000d9e:	481c      	ldr	r0, [pc, #112]	; (8000e10 <main+0xc4>)
 8000da0:	f002 fe1c 	bl	80039dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);//BL
 8000da4:	2108      	movs	r1, #8
 8000da6:	481a      	ldr	r0, [pc, #104]	; (8000e10 <main+0xc4>)
 8000da8:	f002 fe18 	bl	80039dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);//BR
 8000dac:	210c      	movs	r1, #12
 8000dae:	4818      	ldr	r0, [pc, #96]	; (8000e10 <main+0xc4>)
 8000db0:	f002 fe14 	bl	80039dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);//ML
 8000db4:	2100      	movs	r1, #0
 8000db6:	4817      	ldr	r0, [pc, #92]	; (8000e14 <main+0xc8>)
 8000db8:	f002 fe10 	bl	80039dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);//MR
 8000dbc:	2104      	movs	r1, #4
 8000dbe:	4815      	ldr	r0, [pc, #84]	; (8000e14 <main+0xc8>)
 8000dc0:	f002 fe0c 	bl	80039dc <HAL_TIM_PWM_Start>

  //============ACTUATOR SERVO============
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);//TL
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4814      	ldr	r0, [pc, #80]	; (8000e18 <main+0xcc>)
 8000dc8:	f002 fe08 	bl	80039dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);//TR
 8000dcc:	2104      	movs	r1, #4
 8000dce:	4812      	ldr	r0, [pc, #72]	; (8000e18 <main+0xcc>)
 8000dd0:	f002 fe04 	bl	80039dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);//BL
 8000dd4:	2108      	movs	r1, #8
 8000dd6:	4810      	ldr	r0, [pc, #64]	; (8000e18 <main+0xcc>)
 8000dd8:	f002 fe00 	bl	80039dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);//BR
 8000ddc:	210c      	movs	r1, #12
 8000dde:	480e      	ldr	r0, [pc, #56]	; (8000e18 <main+0xcc>)
 8000de0:	f002 fdfc 	bl	80039dc <HAL_TIM_PWM_Start>

  //============EXTERNAL PWM============
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000de4:	2100      	movs	r1, #0
 8000de6:	480d      	ldr	r0, [pc, #52]	; (8000e1c <main+0xd0>)
 8000de8:	f002 fdf8 	bl	80039dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000dec:	2104      	movs	r1, #4
 8000dee:	480b      	ldr	r0, [pc, #44]	; (8000e1c <main+0xd0>)
 8000df0:	f002 fdf4 	bl	80039dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8000df4:	2100      	movs	r1, #0
 8000df6:	480a      	ldr	r0, [pc, #40]	; (8000e20 <main+0xd4>)
 8000df8:	f002 fdf0 	bl	80039dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 8000dfc:	2104      	movs	r1, #4
 8000dfe:	4808      	ldr	r0, [pc, #32]	; (8000e20 <main+0xd4>)
 8000e00:	f002 fdec 	bl	80039dc <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000e04:	f7ff fc92 	bl	800072c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000e08:	f004 f836 	bl	8004e78 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <main+0xc0>
 8000e0e:	bf00      	nop
 8000e10:	20000520 	.word	0x20000520
 8000e14:	200005f8 	.word	0x200005f8
 8000e18:	200005b0 	.word	0x200005b0
 8000e1c:	20000568 	.word	0x20000568
 8000e20:	20000640 	.word	0x20000640

08000e24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b094      	sub	sp, #80	; 0x50
 8000e28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e2a:	f107 0320 	add.w	r3, r7, #32
 8000e2e:	2230      	movs	r2, #48	; 0x30
 8000e30:	2100      	movs	r1, #0
 8000e32:	4618      	mov	r0, r3
 8000e34:	f005 ffd6 	bl	8006de4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e38:	f107 030c 	add.w	r3, r7, #12
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	4b28      	ldr	r3, [pc, #160]	; (8000ef0 <SystemClock_Config+0xcc>)
 8000e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e50:	4a27      	ldr	r2, [pc, #156]	; (8000ef0 <SystemClock_Config+0xcc>)
 8000e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e56:	6413      	str	r3, [r2, #64]	; 0x40
 8000e58:	4b25      	ldr	r3, [pc, #148]	; (8000ef0 <SystemClock_Config+0xcc>)
 8000e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e60:	60bb      	str	r3, [r7, #8]
 8000e62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e64:	2300      	movs	r3, #0
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	4b22      	ldr	r3, [pc, #136]	; (8000ef4 <SystemClock_Config+0xd0>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a21      	ldr	r2, [pc, #132]	; (8000ef4 <SystemClock_Config+0xd0>)
 8000e6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e72:	6013      	str	r3, [r2, #0]
 8000e74:	4b1f      	ldr	r3, [pc, #124]	; (8000ef4 <SystemClock_Config+0xd0>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e7c:	607b      	str	r3, [r7, #4]
 8000e7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e80:	2301      	movs	r3, #1
 8000e82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e94:	2308      	movs	r3, #8
 8000e96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e98:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e9c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ea2:	2307      	movs	r3, #7
 8000ea4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ea6:	f107 0320 	add.w	r3, r7, #32
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f001 ff2a 	bl	8002d04 <HAL_RCC_OscConfig>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000eb6:	f000 f831 	bl	8000f1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eba:	230f      	movs	r3, #15
 8000ebc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ec6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000eca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ecc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ed0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ed2:	f107 030c 	add.w	r3, r7, #12
 8000ed6:	2105      	movs	r1, #5
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f002 f98b 	bl	80031f4 <HAL_RCC_ClockConfig>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000ee4:	f000 f81a 	bl	8000f1c <Error_Handler>
  }
}
 8000ee8:	bf00      	nop
 8000eea:	3750      	adds	r7, #80	; 0x50
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40007000 	.word	0x40007000

08000ef8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d101      	bne.n	8000f0e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f0a:	f000 ffa1 	bl	8001e50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40001000 	.word	0x40001000

08000f1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f20:	b672      	cpsid	i
}
 8000f22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <Error_Handler+0x8>
	...

08000f28 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000f2c:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <MX_SPI1_Init+0x64>)
 8000f2e:	4a18      	ldr	r2, [pc, #96]	; (8000f90 <MX_SPI1_Init+0x68>)
 8000f30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f32:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <MX_SPI1_Init+0x64>)
 8000f34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f3a:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <MX_SPI1_Init+0x64>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <MX_SPI1_Init+0x64>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f46:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <MX_SPI1_Init+0x64>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <MX_SPI1_Init+0x64>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <MX_SPI1_Init+0x64>)
 8000f54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f58:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <MX_SPI1_Init+0x64>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f60:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <MX_SPI1_Init+0x64>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f66:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <MX_SPI1_Init+0x64>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f6c:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <MX_SPI1_Init+0x64>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <MX_SPI1_Init+0x64>)
 8000f74:	220a      	movs	r2, #10
 8000f76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f78:	4804      	ldr	r0, [pc, #16]	; (8000f8c <MX_SPI1_Init+0x64>)
 8000f7a:	f002 fb8d 	bl	8003698 <HAL_SPI_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f84:	f7ff ffca 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000480 	.word	0x20000480
 8000f90:	40013000 	.word	0x40013000

08000f94 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	; 0x28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a28      	ldr	r2, [pc, #160]	; (8001054 <HAL_SPI_MspInit+0xc0>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d149      	bne.n	800104a <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	4b27      	ldr	r3, [pc, #156]	; (8001058 <HAL_SPI_MspInit+0xc4>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	4a26      	ldr	r2, [pc, #152]	; (8001058 <HAL_SPI_MspInit+0xc4>)
 8000fc0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc6:	4b24      	ldr	r3, [pc, #144]	; (8001058 <HAL_SPI_MspInit+0xc4>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	4b20      	ldr	r3, [pc, #128]	; (8001058 <HAL_SPI_MspInit+0xc4>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a1f      	ldr	r2, [pc, #124]	; (8001058 <HAL_SPI_MspInit+0xc4>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b1d      	ldr	r3, [pc, #116]	; (8001058 <HAL_SPI_MspInit+0xc4>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	4b19      	ldr	r3, [pc, #100]	; (8001058 <HAL_SPI_MspInit+0xc4>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a18      	ldr	r2, [pc, #96]	; (8001058 <HAL_SPI_MspInit+0xc4>)
 8000ff8:	f043 0302 	orr.w	r3, r3, #2
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b16      	ldr	r3, [pc, #88]	; (8001058 <HAL_SPI_MspInit+0xc4>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800100a:	2330      	movs	r3, #48	; 0x30
 800100c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100e:	2302      	movs	r3, #2
 8001010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001016:	2303      	movs	r3, #3
 8001018:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800101a:	2305      	movs	r3, #5
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	4619      	mov	r1, r3
 8001024:	480d      	ldr	r0, [pc, #52]	; (800105c <HAL_SPI_MspInit+0xc8>)
 8001026:	f001 fb73 	bl	8002710 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800102a:	2330      	movs	r3, #48	; 0x30
 800102c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102e:	2302      	movs	r3, #2
 8001030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001036:	2303      	movs	r3, #3
 8001038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800103a:	2305      	movs	r3, #5
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	4619      	mov	r1, r3
 8001044:	4806      	ldr	r0, [pc, #24]	; (8001060 <HAL_SPI_MspInit+0xcc>)
 8001046:	f001 fb63 	bl	8002710 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800104a:	bf00      	nop
 800104c:	3728      	adds	r7, #40	; 0x28
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40013000 	.word	0x40013000
 8001058:	40023800 	.word	0x40023800
 800105c:	40020000 	.word	0x40020000
 8001060:	40020400 	.word	0x40020400

08001064 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <HAL_MspInit+0x54>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001072:	4a11      	ldr	r2, [pc, #68]	; (80010b8 <HAL_MspInit+0x54>)
 8001074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001078:	6453      	str	r3, [r2, #68]	; 0x44
 800107a:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <HAL_MspInit+0x54>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	603b      	str	r3, [r7, #0]
 800108a:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <HAL_MspInit+0x54>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	4a0a      	ldr	r2, [pc, #40]	; (80010b8 <HAL_MspInit+0x54>)
 8001090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001094:	6413      	str	r3, [r2, #64]	; 0x40
 8001096:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <HAL_MspInit+0x54>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109e:	603b      	str	r3, [r7, #0]
 80010a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010a2:	2200      	movs	r2, #0
 80010a4:	210f      	movs	r1, #15
 80010a6:	f06f 0001 	mvn.w	r0, #1
 80010aa:	f001 fb07 	bl	80026bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40023800 	.word	0x40023800

080010bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08e      	sub	sp, #56	; 0x38
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80010c4:	2300      	movs	r3, #0
 80010c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80010c8:	2300      	movs	r3, #0
 80010ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80010cc:	2300      	movs	r3, #0
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	4b33      	ldr	r3, [pc, #204]	; (80011a0 <HAL_InitTick+0xe4>)
 80010d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d4:	4a32      	ldr	r2, [pc, #200]	; (80011a0 <HAL_InitTick+0xe4>)
 80010d6:	f043 0310 	orr.w	r3, r3, #16
 80010da:	6413      	str	r3, [r2, #64]	; 0x40
 80010dc:	4b30      	ldr	r3, [pc, #192]	; (80011a0 <HAL_InitTick+0xe4>)
 80010de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e0:	f003 0310 	and.w	r3, r3, #16
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010e8:	f107 0210 	add.w	r2, r7, #16
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	4611      	mov	r1, r2
 80010f2:	4618      	mov	r0, r3
 80010f4:	f002 fa9e 	bl	8003634 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80010f8:	6a3b      	ldr	r3, [r7, #32]
 80010fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80010fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d103      	bne.n	800110a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001102:	f002 fa6f 	bl	80035e4 <HAL_RCC_GetPCLK1Freq>
 8001106:	6378      	str	r0, [r7, #52]	; 0x34
 8001108:	e004      	b.n	8001114 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800110a:	f002 fa6b 	bl	80035e4 <HAL_RCC_GetPCLK1Freq>
 800110e:	4603      	mov	r3, r0
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001116:	4a23      	ldr	r2, [pc, #140]	; (80011a4 <HAL_InitTick+0xe8>)
 8001118:	fba2 2303 	umull	r2, r3, r2, r3
 800111c:	0c9b      	lsrs	r3, r3, #18
 800111e:	3b01      	subs	r3, #1
 8001120:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001122:	4b21      	ldr	r3, [pc, #132]	; (80011a8 <HAL_InitTick+0xec>)
 8001124:	4a21      	ldr	r2, [pc, #132]	; (80011ac <HAL_InitTick+0xf0>)
 8001126:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001128:	4b1f      	ldr	r3, [pc, #124]	; (80011a8 <HAL_InitTick+0xec>)
 800112a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800112e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001130:	4a1d      	ldr	r2, [pc, #116]	; (80011a8 <HAL_InitTick+0xec>)
 8001132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001134:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001136:	4b1c      	ldr	r3, [pc, #112]	; (80011a8 <HAL_InitTick+0xec>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113c:	4b1a      	ldr	r3, [pc, #104]	; (80011a8 <HAL_InitTick+0xec>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001142:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <HAL_InitTick+0xec>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001148:	4817      	ldr	r0, [pc, #92]	; (80011a8 <HAL_InitTick+0xec>)
 800114a:	f002 fb2e 	bl	80037aa <HAL_TIM_Base_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001154:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001158:	2b00      	cmp	r3, #0
 800115a:	d11b      	bne.n	8001194 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800115c:	4812      	ldr	r0, [pc, #72]	; (80011a8 <HAL_InitTick+0xec>)
 800115e:	f002 fb73 	bl	8003848 <HAL_TIM_Base_Start_IT>
 8001162:	4603      	mov	r3, r0
 8001164:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001168:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800116c:	2b00      	cmp	r3, #0
 800116e:	d111      	bne.n	8001194 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001170:	2036      	movs	r0, #54	; 0x36
 8001172:	f001 fabf 	bl	80026f4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2b0f      	cmp	r3, #15
 800117a:	d808      	bhi.n	800118e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800117c:	2200      	movs	r2, #0
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	2036      	movs	r0, #54	; 0x36
 8001182:	f001 fa9b 	bl	80026bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001186:	4a0a      	ldr	r2, [pc, #40]	; (80011b0 <HAL_InitTick+0xf4>)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6013      	str	r3, [r2, #0]
 800118c:	e002      	b.n	8001194 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001194:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001198:	4618      	mov	r0, r3
 800119a:	3738      	adds	r7, #56	; 0x38
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40023800 	.word	0x40023800
 80011a4:	431bde83 	.word	0x431bde83
 80011a8:	200004d8 	.word	0x200004d8
 80011ac:	40001000 	.word	0x40001000
 80011b0:	20000004 	.word	0x20000004

080011b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011b8:	e7fe      	b.n	80011b8 <NMI_Handler+0x4>

080011ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011be:	e7fe      	b.n	80011be <HardFault_Handler+0x4>

080011c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <MemManage_Handler+0x4>

080011c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ca:	e7fe      	b.n	80011ca <BusFault_Handler+0x4>

080011cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <UsageFault_Handler+0x4>

080011d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011e4:	4802      	ldr	r0, [pc, #8]	; (80011f0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80011e6:	f002 fcc1 	bl	8003b6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000520 	.word	0x20000520

080011f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80011f8:	4802      	ldr	r0, [pc, #8]	; (8001204 <TIM6_DAC_IRQHandler+0x10>)
 80011fa:	f002 fcb7 	bl	8003b6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	200004d8 	.word	0x200004d8

08001208 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <SystemInit+0x20>)
 800120e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001212:	4a05      	ldr	r2, [pc, #20]	; (8001228 <SystemInit+0x20>)
 8001214:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001218:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <MX_TIM1_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b096      	sub	sp, #88	; 0x58
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001232:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001240:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800124a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]
 8001258:	611a      	str	r2, [r3, #16]
 800125a:	615a      	str	r2, [r3, #20]
 800125c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	2220      	movs	r2, #32
 8001262:	2100      	movs	r1, #0
 8001264:	4618      	mov	r0, r3
 8001266:	f005 fdbd 	bl	8006de4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800126a:	4b51      	ldr	r3, [pc, #324]	; (80013b0 <MX_TIM1_Init+0x184>)
 800126c:	4a51      	ldr	r2, [pc, #324]	; (80013b4 <MX_TIM1_Init+0x188>)
 800126e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4-1;
 8001270:	4b4f      	ldr	r3, [pc, #316]	; (80013b0 <MX_TIM1_Init+0x184>)
 8001272:	2203      	movs	r2, #3
 8001274:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001276:	4b4e      	ldr	r3, [pc, #312]	; (80013b0 <MX_TIM1_Init+0x184>)
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800127c:	4b4c      	ldr	r3, [pc, #304]	; (80013b0 <MX_TIM1_Init+0x184>)
 800127e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001282:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001284:	4b4a      	ldr	r3, [pc, #296]	; (80013b0 <MX_TIM1_Init+0x184>)
 8001286:	2200      	movs	r2, #0
 8001288:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800128a:	4b49      	ldr	r3, [pc, #292]	; (80013b0 <MX_TIM1_Init+0x184>)
 800128c:	2200      	movs	r2, #0
 800128e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001290:	4b47      	ldr	r3, [pc, #284]	; (80013b0 <MX_TIM1_Init+0x184>)
 8001292:	2200      	movs	r2, #0
 8001294:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001296:	4846      	ldr	r0, [pc, #280]	; (80013b0 <MX_TIM1_Init+0x184>)
 8001298:	f002 fa87 	bl	80037aa <HAL_TIM_Base_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80012a2:	f7ff fe3b 	bl	8000f1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012aa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012b0:	4619      	mov	r1, r3
 80012b2:	483f      	ldr	r0, [pc, #252]	; (80013b0 <MX_TIM1_Init+0x184>)
 80012b4:	f002 fe24 	bl	8003f00 <HAL_TIM_ConfigClockSource>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80012be:	f7ff fe2d 	bl	8000f1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012c2:	483b      	ldr	r0, [pc, #236]	; (80013b0 <MX_TIM1_Init+0x184>)
 80012c4:	f002 fb30 	bl	8003928 <HAL_TIM_PWM_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80012ce:	f7ff fe25 	bl	8000f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d2:	2300      	movs	r3, #0
 80012d4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d6:	2300      	movs	r3, #0
 80012d8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012de:	4619      	mov	r1, r3
 80012e0:	4833      	ldr	r0, [pc, #204]	; (80013b0 <MX_TIM1_Init+0x184>)
 80012e2:	f003 fa0d 	bl	8004700 <HAL_TIMEx_MasterConfigSynchronization>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80012ec:	f7ff fe16 	bl	8000f1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012f0:	2360      	movs	r3, #96	; 0x60
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1500;
 80012f4:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80012f8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012fa:	2300      	movs	r3, #0
 80012fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012fe:	2300      	movs	r3, #0
 8001300:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001302:	2300      	movs	r3, #0
 8001304:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001306:	2300      	movs	r3, #0
 8001308:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800130a:	2300      	movs	r3, #0
 800130c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800130e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001312:	2200      	movs	r2, #0
 8001314:	4619      	mov	r1, r3
 8001316:	4826      	ldr	r0, [pc, #152]	; (80013b0 <MX_TIM1_Init+0x184>)
 8001318:	f002 fd30 	bl	8003d7c <HAL_TIM_PWM_ConfigChannel>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001322:	f7ff fdfb 	bl	8000f1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800132a:	2204      	movs	r2, #4
 800132c:	4619      	mov	r1, r3
 800132e:	4820      	ldr	r0, [pc, #128]	; (80013b0 <MX_TIM1_Init+0x184>)
 8001330:	f002 fd24 	bl	8003d7c <HAL_TIM_PWM_ConfigChannel>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 800133a:	f7ff fdef 	bl	8000f1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800133e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001342:	2208      	movs	r2, #8
 8001344:	4619      	mov	r1, r3
 8001346:	481a      	ldr	r0, [pc, #104]	; (80013b0 <MX_TIM1_Init+0x184>)
 8001348:	f002 fd18 	bl	8003d7c <HAL_TIM_PWM_ConfigChannel>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001352:	f7ff fde3 	bl	8000f1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135a:	220c      	movs	r2, #12
 800135c:	4619      	mov	r1, r3
 800135e:	4814      	ldr	r0, [pc, #80]	; (80013b0 <MX_TIM1_Init+0x184>)
 8001360:	f002 fd0c 	bl	8003d7c <HAL_TIM_PWM_ConfigChannel>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800136a:	f7ff fdd7 	bl	8000f1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800136e:	2300      	movs	r3, #0
 8001370:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001372:	2300      	movs	r3, #0
 8001374:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001382:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001386:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001388:	2300      	movs	r3, #0
 800138a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	4619      	mov	r1, r3
 8001390:	4807      	ldr	r0, [pc, #28]	; (80013b0 <MX_TIM1_Init+0x184>)
 8001392:	f003 fa31 	bl	80047f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 800139c:	f7ff fdbe 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013a0:	4803      	ldr	r0, [pc, #12]	; (80013b0 <MX_TIM1_Init+0x184>)
 80013a2:	f000 fa7f 	bl	80018a4 <HAL_TIM_MspPostInit>

}
 80013a6:	bf00      	nop
 80013a8:	3758      	adds	r7, #88	; 0x58
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000520 	.word	0x20000520
 80013b4:	40010000 	.word	0x40010000

080013b8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08e      	sub	sp, #56	; 0x38
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013cc:	f107 0320 	add.w	r3, r7, #32
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
 80013e4:	615a      	str	r2, [r3, #20]
 80013e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013e8:	4b32      	ldr	r3, [pc, #200]	; (80014b4 <MX_TIM3_Init+0xfc>)
 80013ea:	4a33      	ldr	r2, [pc, #204]	; (80014b8 <MX_TIM3_Init+0x100>)
 80013ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 80013ee:	4b31      	ldr	r3, [pc, #196]	; (80014b4 <MX_TIM3_Init+0xfc>)
 80013f0:	2253      	movs	r2, #83	; 0x53
 80013f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f4:	4b2f      	ldr	r3, [pc, #188]	; (80014b4 <MX_TIM3_Init+0xfc>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 80013fa:	4b2e      	ldr	r3, [pc, #184]	; (80014b4 <MX_TIM3_Init+0xfc>)
 80013fc:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001400:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001402:	4b2c      	ldr	r3, [pc, #176]	; (80014b4 <MX_TIM3_Init+0xfc>)
 8001404:	2200      	movs	r2, #0
 8001406:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001408:	4b2a      	ldr	r3, [pc, #168]	; (80014b4 <MX_TIM3_Init+0xfc>)
 800140a:	2200      	movs	r2, #0
 800140c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800140e:	4829      	ldr	r0, [pc, #164]	; (80014b4 <MX_TIM3_Init+0xfc>)
 8001410:	f002 f9cb 	bl	80037aa <HAL_TIM_Base_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800141a:	f7ff fd7f 	bl	8000f1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800141e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001422:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001424:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001428:	4619      	mov	r1, r3
 800142a:	4822      	ldr	r0, [pc, #136]	; (80014b4 <MX_TIM3_Init+0xfc>)
 800142c:	f002 fd68 	bl	8003f00 <HAL_TIM_ConfigClockSource>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001436:	f7ff fd71 	bl	8000f1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800143a:	481e      	ldr	r0, [pc, #120]	; (80014b4 <MX_TIM3_Init+0xfc>)
 800143c:	f002 fa74 	bl	8003928 <HAL_TIM_PWM_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001446:	f7ff fd69 	bl	8000f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800144a:	2300      	movs	r3, #0
 800144c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800144e:	2300      	movs	r3, #0
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001452:	f107 0320 	add.w	r3, r7, #32
 8001456:	4619      	mov	r1, r3
 8001458:	4816      	ldr	r0, [pc, #88]	; (80014b4 <MX_TIM3_Init+0xfc>)
 800145a:	f003 f951 	bl	8004700 <HAL_TIMEx_MasterConfigSynchronization>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001464:	f7ff fd5a 	bl	8000f1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001468:	2360      	movs	r3, #96	; 0x60
 800146a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001470:	2300      	movs	r3, #0
 8001472:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	2200      	movs	r2, #0
 800147c:	4619      	mov	r1, r3
 800147e:	480d      	ldr	r0, [pc, #52]	; (80014b4 <MX_TIM3_Init+0xfc>)
 8001480:	f002 fc7c 	bl	8003d7c <HAL_TIM_PWM_ConfigChannel>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800148a:	f7ff fd47 	bl	8000f1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	2204      	movs	r2, #4
 8001492:	4619      	mov	r1, r3
 8001494:	4807      	ldr	r0, [pc, #28]	; (80014b4 <MX_TIM3_Init+0xfc>)
 8001496:	f002 fc71 	bl	8003d7c <HAL_TIM_PWM_ConfigChannel>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80014a0:	f7ff fd3c 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014a4:	4803      	ldr	r0, [pc, #12]	; (80014b4 <MX_TIM3_Init+0xfc>)
 80014a6:	f000 f9fd 	bl	80018a4 <HAL_TIM_MspPostInit>

}
 80014aa:	bf00      	nop
 80014ac:	3738      	adds	r7, #56	; 0x38
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000568 	.word	0x20000568
 80014b8:	40000400 	.word	0x40000400

080014bc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08e      	sub	sp, #56	; 0x38
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d0:	f107 0320 	add.w	r3, r7, #32
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
 80014e8:	615a      	str	r2, [r3, #20]
 80014ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80014ec:	4b3d      	ldr	r3, [pc, #244]	; (80015e4 <MX_TIM4_Init+0x128>)
 80014ee:	4a3e      	ldr	r2, [pc, #248]	; (80015e8 <MX_TIM4_Init+0x12c>)
 80014f0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 80014f2:	4b3c      	ldr	r3, [pc, #240]	; (80015e4 <MX_TIM4_Init+0x128>)
 80014f4:	2253      	movs	r2, #83	; 0x53
 80014f6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f8:	4b3a      	ldr	r3, [pc, #232]	; (80015e4 <MX_TIM4_Init+0x128>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 80014fe:	4b39      	ldr	r3, [pc, #228]	; (80015e4 <MX_TIM4_Init+0x128>)
 8001500:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001504:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001506:	4b37      	ldr	r3, [pc, #220]	; (80015e4 <MX_TIM4_Init+0x128>)
 8001508:	2200      	movs	r2, #0
 800150a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800150c:	4b35      	ldr	r3, [pc, #212]	; (80015e4 <MX_TIM4_Init+0x128>)
 800150e:	2200      	movs	r2, #0
 8001510:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001512:	4834      	ldr	r0, [pc, #208]	; (80015e4 <MX_TIM4_Init+0x128>)
 8001514:	f002 f949 	bl	80037aa <HAL_TIM_Base_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800151e:	f7ff fcfd 	bl	8000f1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001522:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001526:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001528:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800152c:	4619      	mov	r1, r3
 800152e:	482d      	ldr	r0, [pc, #180]	; (80015e4 <MX_TIM4_Init+0x128>)
 8001530:	f002 fce6 	bl	8003f00 <HAL_TIM_ConfigClockSource>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800153a:	f7ff fcef 	bl	8000f1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800153e:	4829      	ldr	r0, [pc, #164]	; (80015e4 <MX_TIM4_Init+0x128>)
 8001540:	f002 f9f2 	bl	8003928 <HAL_TIM_PWM_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800154a:	f7ff fce7 	bl	8000f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800154e:	2300      	movs	r3, #0
 8001550:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001552:	2300      	movs	r3, #0
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001556:	f107 0320 	add.w	r3, r7, #32
 800155a:	4619      	mov	r1, r3
 800155c:	4821      	ldr	r0, [pc, #132]	; (80015e4 <MX_TIM4_Init+0x128>)
 800155e:	f003 f8cf 	bl	8004700 <HAL_TIMEx_MasterConfigSynchronization>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001568:	f7ff fcd8 	bl	8000f1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800156c:	2360      	movs	r3, #96	; 0x60
 800156e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	2200      	movs	r2, #0
 8001580:	4619      	mov	r1, r3
 8001582:	4818      	ldr	r0, [pc, #96]	; (80015e4 <MX_TIM4_Init+0x128>)
 8001584:	f002 fbfa 	bl	8003d7c <HAL_TIM_PWM_ConfigChannel>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800158e:	f7ff fcc5 	bl	8000f1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	2204      	movs	r2, #4
 8001596:	4619      	mov	r1, r3
 8001598:	4812      	ldr	r0, [pc, #72]	; (80015e4 <MX_TIM4_Init+0x128>)
 800159a:	f002 fbef 	bl	8003d7c <HAL_TIM_PWM_ConfigChannel>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80015a4:	f7ff fcba 	bl	8000f1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015a8:	1d3b      	adds	r3, r7, #4
 80015aa:	2208      	movs	r2, #8
 80015ac:	4619      	mov	r1, r3
 80015ae:	480d      	ldr	r0, [pc, #52]	; (80015e4 <MX_TIM4_Init+0x128>)
 80015b0:	f002 fbe4 	bl	8003d7c <HAL_TIM_PWM_ConfigChannel>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 80015ba:	f7ff fcaf 	bl	8000f1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	220c      	movs	r2, #12
 80015c2:	4619      	mov	r1, r3
 80015c4:	4807      	ldr	r0, [pc, #28]	; (80015e4 <MX_TIM4_Init+0x128>)
 80015c6:	f002 fbd9 	bl	8003d7c <HAL_TIM_PWM_ConfigChannel>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 80015d0:	f7ff fca4 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80015d4:	4803      	ldr	r0, [pc, #12]	; (80015e4 <MX_TIM4_Init+0x128>)
 80015d6:	f000 f965 	bl	80018a4 <HAL_TIM_MspPostInit>

}
 80015da:	bf00      	nop
 80015dc:	3738      	adds	r7, #56	; 0x38
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	200005b0 	.word	0x200005b0
 80015e8:	40000800 	.word	0x40000800

080015ec <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08c      	sub	sp, #48	; 0x30
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015f2:	f107 0320 	add.w	r3, r7, #32
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001600:	1d3b      	adds	r3, r7, #4
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
 800160c:	611a      	str	r2, [r3, #16]
 800160e:	615a      	str	r2, [r3, #20]
 8001610:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001612:	4b2b      	ldr	r3, [pc, #172]	; (80016c0 <MX_TIM9_Init+0xd4>)
 8001614:	4a2b      	ldr	r2, [pc, #172]	; (80016c4 <MX_TIM9_Init+0xd8>)
 8001616:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 168-1;
 8001618:	4b29      	ldr	r3, [pc, #164]	; (80016c0 <MX_TIM9_Init+0xd4>)
 800161a:	22a7      	movs	r2, #167	; 0xa7
 800161c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800161e:	4b28      	ldr	r3, [pc, #160]	; (80016c0 <MX_TIM9_Init+0xd4>)
 8001620:	2200      	movs	r2, #0
 8001622:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 20000-1;
 8001624:	4b26      	ldr	r3, [pc, #152]	; (80016c0 <MX_TIM9_Init+0xd4>)
 8001626:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800162a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800162c:	4b24      	ldr	r3, [pc, #144]	; (80016c0 <MX_TIM9_Init+0xd4>)
 800162e:	2200      	movs	r2, #0
 8001630:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001632:	4b23      	ldr	r3, [pc, #140]	; (80016c0 <MX_TIM9_Init+0xd4>)
 8001634:	2200      	movs	r2, #0
 8001636:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001638:	4821      	ldr	r0, [pc, #132]	; (80016c0 <MX_TIM9_Init+0xd4>)
 800163a:	f002 f8b6 	bl	80037aa <HAL_TIM_Base_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8001644:	f7ff fc6a 	bl	8000f1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001648:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800164c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800164e:	f107 0320 	add.w	r3, r7, #32
 8001652:	4619      	mov	r1, r3
 8001654:	481a      	ldr	r0, [pc, #104]	; (80016c0 <MX_TIM9_Init+0xd4>)
 8001656:	f002 fc53 	bl	8003f00 <HAL_TIM_ConfigClockSource>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8001660:	f7ff fc5c 	bl	8000f1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001664:	4816      	ldr	r0, [pc, #88]	; (80016c0 <MX_TIM9_Init+0xd4>)
 8001666:	f002 f95f 	bl	8003928 <HAL_TIM_PWM_Init>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8001670:	f7ff fc54 	bl	8000f1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001674:	2360      	movs	r3, #96	; 0x60
 8001676:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8001678:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800167c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001686:	1d3b      	adds	r3, r7, #4
 8001688:	2200      	movs	r2, #0
 800168a:	4619      	mov	r1, r3
 800168c:	480c      	ldr	r0, [pc, #48]	; (80016c0 <MX_TIM9_Init+0xd4>)
 800168e:	f002 fb75 	bl	8003d7c <HAL_TIM_PWM_ConfigChannel>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 8001698:	f7ff fc40 	bl	8000f1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	2204      	movs	r2, #4
 80016a0:	4619      	mov	r1, r3
 80016a2:	4807      	ldr	r0, [pc, #28]	; (80016c0 <MX_TIM9_Init+0xd4>)
 80016a4:	f002 fb6a 	bl	8003d7c <HAL_TIM_PWM_ConfigChannel>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM9_Init+0xc6>
  {
    Error_Handler();
 80016ae:	f7ff fc35 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80016b2:	4803      	ldr	r0, [pc, #12]	; (80016c0 <MX_TIM9_Init+0xd4>)
 80016b4:	f000 f8f6 	bl	80018a4 <HAL_TIM_MspPostInit>

}
 80016b8:	bf00      	nop
 80016ba:	3730      	adds	r7, #48	; 0x30
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	200005f8 	.word	0x200005f8
 80016c4:	40014000 	.word	0x40014000

080016c8 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08c      	sub	sp, #48	; 0x30
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ce:	f107 0320 	add.w	r3, r7, #32
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	609a      	str	r2, [r3, #8]
 80016da:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016dc:	1d3b      	adds	r3, r7, #4
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]
 80016e6:	60da      	str	r2, [r3, #12]
 80016e8:	611a      	str	r2, [r3, #16]
 80016ea:	615a      	str	r2, [r3, #20]
 80016ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80016ee:	4b2b      	ldr	r3, [pc, #172]	; (800179c <MX_TIM12_Init+0xd4>)
 80016f0:	4a2b      	ldr	r2, [pc, #172]	; (80017a0 <MX_TIM12_Init+0xd8>)
 80016f2:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 84-1;
 80016f4:	4b29      	ldr	r3, [pc, #164]	; (800179c <MX_TIM12_Init+0xd4>)
 80016f6:	2253      	movs	r2, #83	; 0x53
 80016f8:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016fa:	4b28      	ldr	r3, [pc, #160]	; (800179c <MX_TIM12_Init+0xd4>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 20000-1;
 8001700:	4b26      	ldr	r3, [pc, #152]	; (800179c <MX_TIM12_Init+0xd4>)
 8001702:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001706:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001708:	4b24      	ldr	r3, [pc, #144]	; (800179c <MX_TIM12_Init+0xd4>)
 800170a:	2200      	movs	r2, #0
 800170c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800170e:	4b23      	ldr	r3, [pc, #140]	; (800179c <MX_TIM12_Init+0xd4>)
 8001710:	2200      	movs	r2, #0
 8001712:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001714:	4821      	ldr	r0, [pc, #132]	; (800179c <MX_TIM12_Init+0xd4>)
 8001716:	f002 f848 	bl	80037aa <HAL_TIM_Base_Init>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8001720:	f7ff fbfc 	bl	8000f1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001724:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001728:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800172a:	f107 0320 	add.w	r3, r7, #32
 800172e:	4619      	mov	r1, r3
 8001730:	481a      	ldr	r0, [pc, #104]	; (800179c <MX_TIM12_Init+0xd4>)
 8001732:	f002 fbe5 	bl	8003f00 <HAL_TIM_ConfigClockSource>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 800173c:	f7ff fbee 	bl	8000f1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001740:	4816      	ldr	r0, [pc, #88]	; (800179c <MX_TIM12_Init+0xd4>)
 8001742:	f002 f8f1 	bl	8003928 <HAL_TIM_PWM_Init>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 800174c:	f7ff fbe6 	bl	8000f1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001750:	2360      	movs	r3, #96	; 0x60
 8001752:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001754:	2300      	movs	r3, #0
 8001756:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001758:	2300      	movs	r3, #0
 800175a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	2200      	movs	r2, #0
 8001764:	4619      	mov	r1, r3
 8001766:	480d      	ldr	r0, [pc, #52]	; (800179c <MX_TIM12_Init+0xd4>)
 8001768:	f002 fb08 	bl	8003d7c <HAL_TIM_PWM_ConfigChannel>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8001772:	f7ff fbd3 	bl	8000f1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	2204      	movs	r2, #4
 800177a:	4619      	mov	r1, r3
 800177c:	4807      	ldr	r0, [pc, #28]	; (800179c <MX_TIM12_Init+0xd4>)
 800177e:	f002 fafd 	bl	8003d7c <HAL_TIM_PWM_ConfigChannel>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 8001788:	f7ff fbc8 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800178c:	4803      	ldr	r0, [pc, #12]	; (800179c <MX_TIM12_Init+0xd4>)
 800178e:	f000 f889 	bl	80018a4 <HAL_TIM_MspPostInit>

}
 8001792:	bf00      	nop
 8001794:	3730      	adds	r7, #48	; 0x30
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000640 	.word	0x20000640
 80017a0:	40001800 	.word	0x40001800

080017a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b088      	sub	sp, #32
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a36      	ldr	r2, [pc, #216]	; (800188c <HAL_TIM_Base_MspInit+0xe8>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d116      	bne.n	80017e4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	61fb      	str	r3, [r7, #28]
 80017ba:	4b35      	ldr	r3, [pc, #212]	; (8001890 <HAL_TIM_Base_MspInit+0xec>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	4a34      	ldr	r2, [pc, #208]	; (8001890 <HAL_TIM_Base_MspInit+0xec>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6453      	str	r3, [r2, #68]	; 0x44
 80017c6:	4b32      	ldr	r3, [pc, #200]	; (8001890 <HAL_TIM_Base_MspInit+0xec>)
 80017c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	61fb      	str	r3, [r7, #28]
 80017d0:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2105      	movs	r1, #5
 80017d6:	201a      	movs	r0, #26
 80017d8:	f000 ff70 	bl	80026bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80017dc:	201a      	movs	r0, #26
 80017de:	f000 ff89 	bl	80026f4 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 80017e2:	e04e      	b.n	8001882 <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM3)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a2a      	ldr	r2, [pc, #168]	; (8001894 <HAL_TIM_Base_MspInit+0xf0>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d10e      	bne.n	800180c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	61bb      	str	r3, [r7, #24]
 80017f2:	4b27      	ldr	r3, [pc, #156]	; (8001890 <HAL_TIM_Base_MspInit+0xec>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	4a26      	ldr	r2, [pc, #152]	; (8001890 <HAL_TIM_Base_MspInit+0xec>)
 80017f8:	f043 0302 	orr.w	r3, r3, #2
 80017fc:	6413      	str	r3, [r2, #64]	; 0x40
 80017fe:	4b24      	ldr	r3, [pc, #144]	; (8001890 <HAL_TIM_Base_MspInit+0xec>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	61bb      	str	r3, [r7, #24]
 8001808:	69bb      	ldr	r3, [r7, #24]
}
 800180a:	e03a      	b.n	8001882 <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM4)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a21      	ldr	r2, [pc, #132]	; (8001898 <HAL_TIM_Base_MspInit+0xf4>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d10e      	bne.n	8001834 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]
 800181a:	4b1d      	ldr	r3, [pc, #116]	; (8001890 <HAL_TIM_Base_MspInit+0xec>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	4a1c      	ldr	r2, [pc, #112]	; (8001890 <HAL_TIM_Base_MspInit+0xec>)
 8001820:	f043 0304 	orr.w	r3, r3, #4
 8001824:	6413      	str	r3, [r2, #64]	; 0x40
 8001826:	4b1a      	ldr	r3, [pc, #104]	; (8001890 <HAL_TIM_Base_MspInit+0xec>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	f003 0304 	and.w	r3, r3, #4
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	697b      	ldr	r3, [r7, #20]
}
 8001832:	e026      	b.n	8001882 <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM9)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a18      	ldr	r2, [pc, #96]	; (800189c <HAL_TIM_Base_MspInit+0xf8>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d10e      	bne.n	800185c <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	4b13      	ldr	r3, [pc, #76]	; (8001890 <HAL_TIM_Base_MspInit+0xec>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001846:	4a12      	ldr	r2, [pc, #72]	; (8001890 <HAL_TIM_Base_MspInit+0xec>)
 8001848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800184c:	6453      	str	r3, [r2, #68]	; 0x44
 800184e:	4b10      	ldr	r3, [pc, #64]	; (8001890 <HAL_TIM_Base_MspInit+0xec>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001856:	613b      	str	r3, [r7, #16]
 8001858:	693b      	ldr	r3, [r7, #16]
}
 800185a:	e012      	b.n	8001882 <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM12)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a0f      	ldr	r2, [pc, #60]	; (80018a0 <HAL_TIM_Base_MspInit+0xfc>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d10d      	bne.n	8001882 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	4b09      	ldr	r3, [pc, #36]	; (8001890 <HAL_TIM_Base_MspInit+0xec>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	4a08      	ldr	r2, [pc, #32]	; (8001890 <HAL_TIM_Base_MspInit+0xec>)
 8001870:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001874:	6413      	str	r3, [r2, #64]	; 0x40
 8001876:	4b06      	ldr	r3, [pc, #24]	; (8001890 <HAL_TIM_Base_MspInit+0xec>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
}
 8001882:	bf00      	nop
 8001884:	3720      	adds	r7, #32
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40010000 	.word	0x40010000
 8001890:	40023800 	.word	0x40023800
 8001894:	40000400 	.word	0x40000400
 8001898:	40000800 	.word	0x40000800
 800189c:	40014000 	.word	0x40014000
 80018a0:	40001800 	.word	0x40001800

080018a4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08c      	sub	sp, #48	; 0x30
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 031c 	add.w	r3, r7, #28
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a5b      	ldr	r2, [pc, #364]	; (8001a30 <HAL_TIM_MspPostInit+0x18c>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d11f      	bne.n	8001906 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	61bb      	str	r3, [r7, #24]
 80018ca:	4b5a      	ldr	r3, [pc, #360]	; (8001a34 <HAL_TIM_MspPostInit+0x190>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a59      	ldr	r2, [pc, #356]	; (8001a34 <HAL_TIM_MspPostInit+0x190>)
 80018d0:	f043 0310 	orr.w	r3, r3, #16
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b57      	ldr	r3, [pc, #348]	; (8001a34 <HAL_TIM_MspPostInit+0x190>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0310 	and.w	r3, r3, #16
 80018de:	61bb      	str	r3, [r7, #24]
 80018e0:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80018e2:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80018e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e8:	2302      	movs	r3, #2
 80018ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f0:	2300      	movs	r3, #0
 80018f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018f4:	2301      	movs	r3, #1
 80018f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018f8:	f107 031c 	add.w	r3, r7, #28
 80018fc:	4619      	mov	r1, r3
 80018fe:	484e      	ldr	r0, [pc, #312]	; (8001a38 <HAL_TIM_MspPostInit+0x194>)
 8001900:	f000 ff06 	bl	8002710 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001904:	e090      	b.n	8001a28 <HAL_TIM_MspPostInit+0x184>
  else if(timHandle->Instance==TIM3)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a4c      	ldr	r2, [pc, #304]	; (8001a3c <HAL_TIM_MspPostInit+0x198>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d11e      	bne.n	800194e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	4b47      	ldr	r3, [pc, #284]	; (8001a34 <HAL_TIM_MspPostInit+0x190>)
 8001916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001918:	4a46      	ldr	r2, [pc, #280]	; (8001a34 <HAL_TIM_MspPostInit+0x190>)
 800191a:	f043 0301 	orr.w	r3, r3, #1
 800191e:	6313      	str	r3, [r2, #48]	; 0x30
 8001920:	4b44      	ldr	r3, [pc, #272]	; (8001a34 <HAL_TIM_MspPostInit+0x190>)
 8001922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	617b      	str	r3, [r7, #20]
 800192a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800192c:	23c0      	movs	r3, #192	; 0xc0
 800192e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001930:	2302      	movs	r3, #2
 8001932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001938:	2300      	movs	r3, #0
 800193a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800193c:	2302      	movs	r3, #2
 800193e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001940:	f107 031c 	add.w	r3, r7, #28
 8001944:	4619      	mov	r1, r3
 8001946:	483e      	ldr	r0, [pc, #248]	; (8001a40 <HAL_TIM_MspPostInit+0x19c>)
 8001948:	f000 fee2 	bl	8002710 <HAL_GPIO_Init>
}
 800194c:	e06c      	b.n	8001a28 <HAL_TIM_MspPostInit+0x184>
  else if(timHandle->Instance==TIM4)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a3c      	ldr	r2, [pc, #240]	; (8001a44 <HAL_TIM_MspPostInit+0x1a0>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d11f      	bne.n	8001998 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001958:	2300      	movs	r3, #0
 800195a:	613b      	str	r3, [r7, #16]
 800195c:	4b35      	ldr	r3, [pc, #212]	; (8001a34 <HAL_TIM_MspPostInit+0x190>)
 800195e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001960:	4a34      	ldr	r2, [pc, #208]	; (8001a34 <HAL_TIM_MspPostInit+0x190>)
 8001962:	f043 0308 	orr.w	r3, r3, #8
 8001966:	6313      	str	r3, [r2, #48]	; 0x30
 8001968:	4b32      	ldr	r3, [pc, #200]	; (8001a34 <HAL_TIM_MspPostInit+0x190>)
 800196a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196c:	f003 0308 	and.w	r3, r3, #8
 8001970:	613b      	str	r3, [r7, #16]
 8001972:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001974:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197a:	2302      	movs	r3, #2
 800197c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001982:	2300      	movs	r3, #0
 8001984:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001986:	2302      	movs	r3, #2
 8001988:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800198a:	f107 031c 	add.w	r3, r7, #28
 800198e:	4619      	mov	r1, r3
 8001990:	482d      	ldr	r0, [pc, #180]	; (8001a48 <HAL_TIM_MspPostInit+0x1a4>)
 8001992:	f000 febd 	bl	8002710 <HAL_GPIO_Init>
}
 8001996:	e047      	b.n	8001a28 <HAL_TIM_MspPostInit+0x184>
  else if(timHandle->Instance==TIM9)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a2b      	ldr	r2, [pc, #172]	; (8001a4c <HAL_TIM_MspPostInit+0x1a8>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d11e      	bne.n	80019e0 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	4b23      	ldr	r3, [pc, #140]	; (8001a34 <HAL_TIM_MspPostInit+0x190>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	4a22      	ldr	r2, [pc, #136]	; (8001a34 <HAL_TIM_MspPostInit+0x190>)
 80019ac:	f043 0310 	orr.w	r3, r3, #16
 80019b0:	6313      	str	r3, [r2, #48]	; 0x30
 80019b2:	4b20      	ldr	r3, [pc, #128]	; (8001a34 <HAL_TIM_MspPostInit+0x190>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	f003 0310 	and.w	r3, r3, #16
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80019be:	2360      	movs	r3, #96	; 0x60
 80019c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c2:	2302      	movs	r3, #2
 80019c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ca:	2300      	movs	r3, #0
 80019cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80019ce:	2303      	movs	r3, #3
 80019d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019d2:	f107 031c 	add.w	r3, r7, #28
 80019d6:	4619      	mov	r1, r3
 80019d8:	4817      	ldr	r0, [pc, #92]	; (8001a38 <HAL_TIM_MspPostInit+0x194>)
 80019da:	f000 fe99 	bl	8002710 <HAL_GPIO_Init>
}
 80019de:	e023      	b.n	8001a28 <HAL_TIM_MspPostInit+0x184>
  else if(timHandle->Instance==TIM12)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a1a      	ldr	r2, [pc, #104]	; (8001a50 <HAL_TIM_MspPostInit+0x1ac>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d11e      	bne.n	8001a28 <HAL_TIM_MspPostInit+0x184>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <HAL_TIM_MspPostInit+0x190>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	4a10      	ldr	r2, [pc, #64]	; (8001a34 <HAL_TIM_MspPostInit+0x190>)
 80019f4:	f043 0302 	orr.w	r3, r3, #2
 80019f8:	6313      	str	r3, [r2, #48]	; 0x30
 80019fa:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <HAL_TIM_MspPostInit+0x190>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	60bb      	str	r3, [r7, #8]
 8001a04:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001a06:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a14:	2300      	movs	r3, #0
 8001a16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001a18:	2309      	movs	r3, #9
 8001a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1c:	f107 031c 	add.w	r3, r7, #28
 8001a20:	4619      	mov	r1, r3
 8001a22:	480c      	ldr	r0, [pc, #48]	; (8001a54 <HAL_TIM_MspPostInit+0x1b0>)
 8001a24:	f000 fe74 	bl	8002710 <HAL_GPIO_Init>
}
 8001a28:	bf00      	nop
 8001a2a:	3730      	adds	r7, #48	; 0x30
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40010000 	.word	0x40010000
 8001a34:	40023800 	.word	0x40023800
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	40000400 	.word	0x40000400
 8001a40:	40020000 	.word	0x40020000
 8001a44:	40000800 	.word	0x40000800
 8001a48:	40020c00 	.word	0x40020c00
 8001a4c:	40014000 	.word	0x40014000
 8001a50:	40001800 	.word	0x40001800
 8001a54:	40020400 	.word	0x40020400

08001a58 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001a5c:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <MX_UART4_Init+0x4c>)
 8001a5e:	4a12      	ldr	r2, [pc, #72]	; (8001aa8 <MX_UART4_Init+0x50>)
 8001a60:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001a62:	4b10      	ldr	r3, [pc, #64]	; (8001aa4 <MX_UART4_Init+0x4c>)
 8001a64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a68:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <MX_UART4_Init+0x4c>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <MX_UART4_Init+0x4c>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001a76:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <MX_UART4_Init+0x4c>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001a7c:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <MX_UART4_Init+0x4c>)
 8001a7e:	220c      	movs	r2, #12
 8001a80:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a82:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <MX_UART4_Init+0x4c>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a88:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <MX_UART4_Init+0x4c>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001a8e:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <MX_UART4_Init+0x4c>)
 8001a90:	f002 ff18 	bl	80048c4 <HAL_UART_Init>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001a9a:	f7ff fa3f 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000688 	.word	0x20000688
 8001aa8:	40004c00 	.word	0x40004c00

08001aac <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001ab0:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <MX_UART5_Init+0x4c>)
 8001ab2:	4a12      	ldr	r2, [pc, #72]	; (8001afc <MX_UART5_Init+0x50>)
 8001ab4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001ab6:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <MX_UART5_Init+0x4c>)
 8001ab8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001abc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001abe:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <MX_UART5_Init+0x4c>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <MX_UART5_Init+0x4c>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001aca:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <MX_UART5_Init+0x4c>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001ad0:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <MX_UART5_Init+0x4c>)
 8001ad2:	220c      	movs	r2, #12
 8001ad4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ad6:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <MX_UART5_Init+0x4c>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001adc:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <MX_UART5_Init+0x4c>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001ae2:	4805      	ldr	r0, [pc, #20]	; (8001af8 <MX_UART5_Init+0x4c>)
 8001ae4:	f002 feee 	bl	80048c4 <HAL_UART_Init>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001aee:	f7ff fa15 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	200006cc 	.word	0x200006cc
 8001afc:	40005000 	.word	0x40005000

08001b00 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b04:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <MX_USART2_UART_Init+0x4c>)
 8001b06:	4a12      	ldr	r2, [pc, #72]	; (8001b50 <MX_USART2_UART_Init+0x50>)
 8001b08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b0a:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <MX_USART2_UART_Init+0x4c>)
 8001b0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b12:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <MX_USART2_UART_Init+0x4c>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <MX_USART2_UART_Init+0x4c>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b1e:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <MX_USART2_UART_Init+0x4c>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b24:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <MX_USART2_UART_Init+0x4c>)
 8001b26:	220c      	movs	r2, #12
 8001b28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b2a:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <MX_USART2_UART_Init+0x4c>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b30:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <MX_USART2_UART_Init+0x4c>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b36:	4805      	ldr	r0, [pc, #20]	; (8001b4c <MX_USART2_UART_Init+0x4c>)
 8001b38:	f002 fec4 	bl	80048c4 <HAL_UART_Init>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b42:	f7ff f9eb 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000710 	.word	0x20000710
 8001b50:	40004400 	.word	0x40004400

08001b54 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b58:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <MX_USART3_UART_Init+0x4c>)
 8001b5a:	4a12      	ldr	r2, [pc, #72]	; (8001ba4 <MX_USART3_UART_Init+0x50>)
 8001b5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b5e:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <MX_USART3_UART_Init+0x4c>)
 8001b60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b66:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <MX_USART3_UART_Init+0x4c>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <MX_USART3_UART_Init+0x4c>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b72:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <MX_USART3_UART_Init+0x4c>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b78:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <MX_USART3_UART_Init+0x4c>)
 8001b7a:	220c      	movs	r2, #12
 8001b7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b7e:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <MX_USART3_UART_Init+0x4c>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b84:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <MX_USART3_UART_Init+0x4c>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b8a:	4805      	ldr	r0, [pc, #20]	; (8001ba0 <MX_USART3_UART_Init+0x4c>)
 8001b8c:	f002 fe9a 	bl	80048c4 <HAL_UART_Init>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001b96:	f7ff f9c1 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000754 	.word	0x20000754
 8001ba4:	40004800 	.word	0x40004800

08001ba8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b090      	sub	sp, #64	; 0x40
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
 8001bbe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a74      	ldr	r2, [pc, #464]	; (8001d98 <HAL_UART_MspInit+0x1f0>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d12d      	bne.n	8001c26 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bce:	4b73      	ldr	r3, [pc, #460]	; (8001d9c <HAL_UART_MspInit+0x1f4>)
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	4a72      	ldr	r2, [pc, #456]	; (8001d9c <HAL_UART_MspInit+0x1f4>)
 8001bd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bda:	4b70      	ldr	r3, [pc, #448]	; (8001d9c <HAL_UART_MspInit+0x1f4>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001be2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001be4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
 8001bea:	4b6c      	ldr	r3, [pc, #432]	; (8001d9c <HAL_UART_MspInit+0x1f4>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	4a6b      	ldr	r2, [pc, #428]	; (8001d9c <HAL_UART_MspInit+0x1f4>)
 8001bf0:	f043 0304 	orr.w	r3, r3, #4
 8001bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf6:	4b69      	ldr	r3, [pc, #420]	; (8001d9c <HAL_UART_MspInit+0x1f4>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	f003 0304 	and.w	r3, r3, #4
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8001c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c02:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c10:	2303      	movs	r3, #3
 8001c12:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001c14:	2308      	movs	r3, #8
 8001c16:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4860      	ldr	r0, [pc, #384]	; (8001da0 <HAL_UART_MspInit+0x1f8>)
 8001c20:	f000 fd76 	bl	8002710 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001c24:	e0b4      	b.n	8001d90 <HAL_UART_MspInit+0x1e8>
  else if(uartHandle->Instance==UART5)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a5e      	ldr	r2, [pc, #376]	; (8001da4 <HAL_UART_MspInit+0x1fc>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d14b      	bne.n	8001cc8 <HAL_UART_MspInit+0x120>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001c30:	2300      	movs	r3, #0
 8001c32:	623b      	str	r3, [r7, #32]
 8001c34:	4b59      	ldr	r3, [pc, #356]	; (8001d9c <HAL_UART_MspInit+0x1f4>)
 8001c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c38:	4a58      	ldr	r2, [pc, #352]	; (8001d9c <HAL_UART_MspInit+0x1f4>)
 8001c3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c3e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c40:	4b56      	ldr	r3, [pc, #344]	; (8001d9c <HAL_UART_MspInit+0x1f4>)
 8001c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c48:	623b      	str	r3, [r7, #32]
 8001c4a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	61fb      	str	r3, [r7, #28]
 8001c50:	4b52      	ldr	r3, [pc, #328]	; (8001d9c <HAL_UART_MspInit+0x1f4>)
 8001c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c54:	4a51      	ldr	r2, [pc, #324]	; (8001d9c <HAL_UART_MspInit+0x1f4>)
 8001c56:	f043 0304 	orr.w	r3, r3, #4
 8001c5a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5c:	4b4f      	ldr	r3, [pc, #316]	; (8001d9c <HAL_UART_MspInit+0x1f4>)
 8001c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	61fb      	str	r3, [r7, #28]
 8001c66:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c68:	2300      	movs	r3, #0
 8001c6a:	61bb      	str	r3, [r7, #24]
 8001c6c:	4b4b      	ldr	r3, [pc, #300]	; (8001d9c <HAL_UART_MspInit+0x1f4>)
 8001c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c70:	4a4a      	ldr	r2, [pc, #296]	; (8001d9c <HAL_UART_MspInit+0x1f4>)
 8001c72:	f043 0308 	orr.w	r3, r3, #8
 8001c76:	6313      	str	r3, [r2, #48]	; 0x30
 8001c78:	4b48      	ldr	r3, [pc, #288]	; (8001d9c <HAL_UART_MspInit+0x1f4>)
 8001c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7c:	f003 0308 	and.w	r3, r3, #8
 8001c80:	61bb      	str	r3, [r7, #24]
 8001c82:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c92:	2303      	movs	r3, #3
 8001c94:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001c96:	2308      	movs	r3, #8
 8001c98:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	483f      	ldr	r0, [pc, #252]	; (8001da0 <HAL_UART_MspInit+0x1f8>)
 8001ca2:	f000 fd35 	bl	8002710 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ca6:	2304      	movs	r3, #4
 8001ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001caa:	2302      	movs	r3, #2
 8001cac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001cb6:	2308      	movs	r3, #8
 8001cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4839      	ldr	r0, [pc, #228]	; (8001da8 <HAL_UART_MspInit+0x200>)
 8001cc2:	f000 fd25 	bl	8002710 <HAL_GPIO_Init>
}
 8001cc6:	e063      	b.n	8001d90 <HAL_UART_MspInit+0x1e8>
  else if(uartHandle->Instance==USART2)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a37      	ldr	r2, [pc, #220]	; (8001dac <HAL_UART_MspInit+0x204>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d12c      	bne.n	8001d2c <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	4b31      	ldr	r3, [pc, #196]	; (8001d9c <HAL_UART_MspInit+0x1f4>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	4a30      	ldr	r2, [pc, #192]	; (8001d9c <HAL_UART_MspInit+0x1f4>)
 8001cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce2:	4b2e      	ldr	r3, [pc, #184]	; (8001d9c <HAL_UART_MspInit+0x1f4>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	613b      	str	r3, [r7, #16]
 8001cf2:	4b2a      	ldr	r3, [pc, #168]	; (8001d9c <HAL_UART_MspInit+0x1f4>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	4a29      	ldr	r2, [pc, #164]	; (8001d9c <HAL_UART_MspInit+0x1f4>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfe:	4b27      	ldr	r3, [pc, #156]	; (8001d9c <HAL_UART_MspInit+0x1f4>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	613b      	str	r3, [r7, #16]
 8001d08:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d0a:	230c      	movs	r3, #12
 8001d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d16:	2303      	movs	r3, #3
 8001d18:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d1a:	2307      	movs	r3, #7
 8001d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d22:	4619      	mov	r1, r3
 8001d24:	4822      	ldr	r0, [pc, #136]	; (8001db0 <HAL_UART_MspInit+0x208>)
 8001d26:	f000 fcf3 	bl	8002710 <HAL_GPIO_Init>
}
 8001d2a:	e031      	b.n	8001d90 <HAL_UART_MspInit+0x1e8>
  else if(uartHandle->Instance==USART3)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a20      	ldr	r2, [pc, #128]	; (8001db4 <HAL_UART_MspInit+0x20c>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d12c      	bne.n	8001d90 <HAL_UART_MspInit+0x1e8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	4b18      	ldr	r3, [pc, #96]	; (8001d9c <HAL_UART_MspInit+0x1f4>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	4a17      	ldr	r2, [pc, #92]	; (8001d9c <HAL_UART_MspInit+0x1f4>)
 8001d40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d44:	6413      	str	r3, [r2, #64]	; 0x40
 8001d46:	4b15      	ldr	r3, [pc, #84]	; (8001d9c <HAL_UART_MspInit+0x1f4>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <HAL_UART_MspInit+0x1f4>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	4a10      	ldr	r2, [pc, #64]	; (8001d9c <HAL_UART_MspInit+0x1f4>)
 8001d5c:	f043 0308 	orr.w	r3, r3, #8
 8001d60:	6313      	str	r3, [r2, #48]	; 0x30
 8001d62:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <HAL_UART_MspInit+0x1f4>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	60bb      	str	r3, [r7, #8]
 8001d6c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d74:	2302      	movs	r3, #2
 8001d76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d80:	2307      	movs	r3, #7
 8001d82:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4807      	ldr	r0, [pc, #28]	; (8001da8 <HAL_UART_MspInit+0x200>)
 8001d8c:	f000 fcc0 	bl	8002710 <HAL_GPIO_Init>
}
 8001d90:	bf00      	nop
 8001d92:	3740      	adds	r7, #64	; 0x40
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40004c00 	.word	0x40004c00
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	40020800 	.word	0x40020800
 8001da4:	40005000 	.word	0x40005000
 8001da8:	40020c00 	.word	0x40020c00
 8001dac:	40004400 	.word	0x40004400
 8001db0:	40020000 	.word	0x40020000
 8001db4:	40004800 	.word	0x40004800

08001db8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001db8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001df0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dbc:	480d      	ldr	r0, [pc, #52]	; (8001df4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001dbe:	490e      	ldr	r1, [pc, #56]	; (8001df8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001dc0:	4a0e      	ldr	r2, [pc, #56]	; (8001dfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dc4:	e002      	b.n	8001dcc <LoopCopyDataInit>

08001dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dca:	3304      	adds	r3, #4

08001dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dd0:	d3f9      	bcc.n	8001dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dd2:	4a0b      	ldr	r2, [pc, #44]	; (8001e00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001dd4:	4c0b      	ldr	r4, [pc, #44]	; (8001e04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd8:	e001      	b.n	8001dde <LoopFillZerobss>

08001dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ddc:	3204      	adds	r2, #4

08001dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001de0:	d3fb      	bcc.n	8001dda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001de2:	f7ff fa11 	bl	8001208 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001de6:	f004 ffc9 	bl	8006d7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dea:	f7fe ffaf 	bl	8000d4c <main>
  bx  lr    
 8001dee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001df0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001df4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001df8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001dfc:	080070d4 	.word	0x080070d4
  ldr r2, =_sbss
 8001e00:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001e04:	200044f8 	.word	0x200044f8

08001e08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e08:	e7fe      	b.n	8001e08 <ADC_IRQHandler>
	...

08001e0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e10:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <HAL_Init+0x40>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a0d      	ldr	r2, [pc, #52]	; (8001e4c <HAL_Init+0x40>)
 8001e16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <HAL_Init+0x40>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a0a      	ldr	r2, [pc, #40]	; (8001e4c <HAL_Init+0x40>)
 8001e22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e28:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <HAL_Init+0x40>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a07      	ldr	r2, [pc, #28]	; (8001e4c <HAL_Init+0x40>)
 8001e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e34:	2003      	movs	r0, #3
 8001e36:	f000 fc36 	bl	80026a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e3a:	200f      	movs	r0, #15
 8001e3c:	f7ff f93e 	bl	80010bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e40:	f7ff f910 	bl	8001064 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40023c00 	.word	0x40023c00

08001e50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e54:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <HAL_IncTick+0x20>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <HAL_IncTick+0x24>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4413      	add	r3, r2
 8001e60:	4a04      	ldr	r2, [pc, #16]	; (8001e74 <HAL_IncTick+0x24>)
 8001e62:	6013      	str	r3, [r2, #0]
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	20000008 	.word	0x20000008
 8001e74:	20000798 	.word	0x20000798

08001e78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e7c:	4b03      	ldr	r3, [pc, #12]	; (8001e8c <HAL_GetTick+0x14>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	20000798 	.word	0x20000798

08001e90 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e033      	b.n	8001f0e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d109      	bne.n	8001ec2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7fe fb62 	bl	8000578 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	f003 0310 	and.w	r3, r3, #16
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d118      	bne.n	8001f00 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ed6:	f023 0302 	bic.w	r3, r3, #2
 8001eda:	f043 0202 	orr.w	r2, r3, #2
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f93a 	bl	800215c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	f023 0303 	bic.w	r3, r3, #3
 8001ef6:	f043 0201 	orr.w	r2, r3, #1
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	641a      	str	r2, [r3, #64]	; 0x40
 8001efe:	e001      	b.n	8001f04 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
	...

08001f18 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d101      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x1c>
 8001f30:	2302      	movs	r3, #2
 8001f32:	e105      	b.n	8002140 <HAL_ADC_ConfigChannel+0x228>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2b09      	cmp	r3, #9
 8001f42:	d925      	bls.n	8001f90 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68d9      	ldr	r1, [r3, #12]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	461a      	mov	r2, r3
 8001f52:	4613      	mov	r3, r2
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	4413      	add	r3, r2
 8001f58:	3b1e      	subs	r3, #30
 8001f5a:	2207      	movs	r2, #7
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	43da      	mvns	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	400a      	ands	r2, r1
 8001f68:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68d9      	ldr	r1, [r3, #12]
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	4403      	add	r3, r0
 8001f82:	3b1e      	subs	r3, #30
 8001f84:	409a      	lsls	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	60da      	str	r2, [r3, #12]
 8001f8e:	e022      	b.n	8001fd6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6919      	ldr	r1, [r3, #16]
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	4413      	add	r3, r2
 8001fa4:	2207      	movs	r2, #7
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43da      	mvns	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	400a      	ands	r2, r1
 8001fb2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6919      	ldr	r1, [r3, #16]
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	4403      	add	r3, r0
 8001fcc:	409a      	lsls	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b06      	cmp	r3, #6
 8001fdc:	d824      	bhi.n	8002028 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	3b05      	subs	r3, #5
 8001ff0:	221f      	movs	r2, #31
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43da      	mvns	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	400a      	ands	r2, r1
 8001ffe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	b29b      	uxth	r3, r3
 800200c:	4618      	mov	r0, r3
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685a      	ldr	r2, [r3, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	3b05      	subs	r3, #5
 800201a:	fa00 f203 	lsl.w	r2, r0, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	430a      	orrs	r2, r1
 8002024:	635a      	str	r2, [r3, #52]	; 0x34
 8002026:	e04c      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b0c      	cmp	r3, #12
 800202e:	d824      	bhi.n	800207a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685a      	ldr	r2, [r3, #4]
 800203a:	4613      	mov	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	3b23      	subs	r3, #35	; 0x23
 8002042:	221f      	movs	r2, #31
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	43da      	mvns	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	400a      	ands	r2, r1
 8002050:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	b29b      	uxth	r3, r3
 800205e:	4618      	mov	r0, r3
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685a      	ldr	r2, [r3, #4]
 8002064:	4613      	mov	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	3b23      	subs	r3, #35	; 0x23
 800206c:	fa00 f203 	lsl.w	r2, r0, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	430a      	orrs	r2, r1
 8002076:	631a      	str	r2, [r3, #48]	; 0x30
 8002078:	e023      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	4613      	mov	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4413      	add	r3, r2
 800208a:	3b41      	subs	r3, #65	; 0x41
 800208c:	221f      	movs	r2, #31
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43da      	mvns	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	400a      	ands	r2, r1
 800209a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	4618      	mov	r0, r3
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	4613      	mov	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	3b41      	subs	r3, #65	; 0x41
 80020b6:	fa00 f203 	lsl.w	r2, r0, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	430a      	orrs	r2, r1
 80020c0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020c2:	4b22      	ldr	r3, [pc, #136]	; (800214c <HAL_ADC_ConfigChannel+0x234>)
 80020c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a21      	ldr	r2, [pc, #132]	; (8002150 <HAL_ADC_ConfigChannel+0x238>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d109      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x1cc>
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b12      	cmp	r3, #18
 80020d6:	d105      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a19      	ldr	r2, [pc, #100]	; (8002150 <HAL_ADC_ConfigChannel+0x238>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d123      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x21e>
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2b10      	cmp	r3, #16
 80020f4:	d003      	beq.n	80020fe <HAL_ADC_ConfigChannel+0x1e6>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2b11      	cmp	r3, #17
 80020fc:	d11b      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2b10      	cmp	r3, #16
 8002110:	d111      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002112:	4b10      	ldr	r3, [pc, #64]	; (8002154 <HAL_ADC_ConfigChannel+0x23c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a10      	ldr	r2, [pc, #64]	; (8002158 <HAL_ADC_ConfigChannel+0x240>)
 8002118:	fba2 2303 	umull	r2, r3, r2, r3
 800211c:	0c9a      	lsrs	r2, r3, #18
 800211e:	4613      	mov	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002128:	e002      	b.n	8002130 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	3b01      	subs	r3, #1
 800212e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f9      	bne.n	800212a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	40012300 	.word	0x40012300
 8002150:	40012000 	.word	0x40012000
 8002154:	20000000 	.word	0x20000000
 8002158:	431bde83 	.word	0x431bde83

0800215c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002164:	4b79      	ldr	r3, [pc, #484]	; (800234c <ADC_Init+0x1f0>)
 8002166:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	431a      	orrs	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002190:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6859      	ldr	r1, [r3, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	021a      	lsls	r2, r3, #8
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	430a      	orrs	r2, r1
 80021a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80021b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6859      	ldr	r1, [r3, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	430a      	orrs	r2, r1
 80021c6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689a      	ldr	r2, [r3, #8]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6899      	ldr	r1, [r3, #8]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68da      	ldr	r2, [r3, #12]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ee:	4a58      	ldr	r2, [pc, #352]	; (8002350 <ADC_Init+0x1f4>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d022      	beq.n	800223a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002202:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6899      	ldr	r1, [r3, #8]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	430a      	orrs	r2, r1
 8002214:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002224:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6899      	ldr	r1, [r3, #8]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	e00f      	b.n	800225a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002248:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002258:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 0202 	bic.w	r2, r2, #2
 8002268:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6899      	ldr	r1, [r3, #8]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	7e1b      	ldrb	r3, [r3, #24]
 8002274:	005a      	lsls	r2, r3, #1
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	430a      	orrs	r2, r1
 800227c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d01b      	beq.n	80022c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	685a      	ldr	r2, [r3, #4]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002296:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80022a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6859      	ldr	r1, [r3, #4]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b2:	3b01      	subs	r3, #1
 80022b4:	035a      	lsls	r2, r3, #13
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	e007      	b.n	80022d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80022de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	3b01      	subs	r3, #1
 80022ec:	051a      	lsls	r2, r3, #20
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	430a      	orrs	r2, r1
 80022f4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002304:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6899      	ldr	r1, [r3, #8]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002312:	025a      	lsls	r2, r3, #9
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	430a      	orrs	r2, r1
 800231a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	689a      	ldr	r2, [r3, #8]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800232a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6899      	ldr	r1, [r3, #8]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	029a      	lsls	r2, r3, #10
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	430a      	orrs	r2, r1
 800233e:	609a      	str	r2, [r3, #8]
}
 8002340:	bf00      	nop
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	40012300 	.word	0x40012300
 8002350:	0f000001 	.word	0x0f000001

08002354 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e0ed      	b.n	8002542 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 3020 	ldrb.w	r3, [r3, #32]
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d102      	bne.n	8002378 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7fe f978 	bl	8000668 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f042 0201 	orr.w	r2, r2, #1
 8002386:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002388:	f7ff fd76 	bl	8001e78 <HAL_GetTick>
 800238c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800238e:	e012      	b.n	80023b6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002390:	f7ff fd72 	bl	8001e78 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b0a      	cmp	r3, #10
 800239c:	d90b      	bls.n	80023b6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2205      	movs	r2, #5
 80023ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e0c5      	b.n	8002542 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0e5      	beq.n	8002390 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 0202 	bic.w	r2, r2, #2
 80023d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023d4:	f7ff fd50 	bl	8001e78 <HAL_GetTick>
 80023d8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023da:	e012      	b.n	8002402 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023dc:	f7ff fd4c 	bl	8001e78 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b0a      	cmp	r3, #10
 80023e8:	d90b      	bls.n	8002402 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2205      	movs	r2, #5
 80023fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e09f      	b.n	8002542 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1e5      	bne.n	80023dc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	7e1b      	ldrb	r3, [r3, #24]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d108      	bne.n	800242a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	e007      	b.n	800243a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002438:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	7e5b      	ldrb	r3, [r3, #25]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d108      	bne.n	8002454 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	e007      	b.n	8002464 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002462:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	7e9b      	ldrb	r3, [r3, #26]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d108      	bne.n	800247e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 0220 	orr.w	r2, r2, #32
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	e007      	b.n	800248e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f022 0220 	bic.w	r2, r2, #32
 800248c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	7edb      	ldrb	r3, [r3, #27]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d108      	bne.n	80024a8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 0210 	bic.w	r2, r2, #16
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	e007      	b.n	80024b8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0210 	orr.w	r2, r2, #16
 80024b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	7f1b      	ldrb	r3, [r3, #28]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d108      	bne.n	80024d2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0208 	orr.w	r2, r2, #8
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	e007      	b.n	80024e2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 0208 	bic.w	r2, r2, #8
 80024e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	7f5b      	ldrb	r3, [r3, #29]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d108      	bne.n	80024fc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f042 0204 	orr.w	r2, r2, #4
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	e007      	b.n	800250c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 0204 	bic.w	r2, r2, #4
 800250a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	431a      	orrs	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	ea42 0103 	orr.w	r1, r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	1e5a      	subs	r2, r3, #1
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	430a      	orrs	r2, r1
 8002530:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
	...

0800254c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800255c:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <__NVIC_SetPriorityGrouping+0x44>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002568:	4013      	ands	r3, r2
 800256a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002574:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800257c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800257e:	4a04      	ldr	r2, [pc, #16]	; (8002590 <__NVIC_SetPriorityGrouping+0x44>)
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	60d3      	str	r3, [r2, #12]
}
 8002584:	bf00      	nop
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	e000ed00 	.word	0xe000ed00

08002594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002598:	4b04      	ldr	r3, [pc, #16]	; (80025ac <__NVIC_GetPriorityGrouping+0x18>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	0a1b      	lsrs	r3, r3, #8
 800259e:	f003 0307 	and.w	r3, r3, #7
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	e000ed00 	.word	0xe000ed00

080025b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	db0b      	blt.n	80025da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025c2:	79fb      	ldrb	r3, [r7, #7]
 80025c4:	f003 021f 	and.w	r2, r3, #31
 80025c8:	4907      	ldr	r1, [pc, #28]	; (80025e8 <__NVIC_EnableIRQ+0x38>)
 80025ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ce:	095b      	lsrs	r3, r3, #5
 80025d0:	2001      	movs	r0, #1
 80025d2:	fa00 f202 	lsl.w	r2, r0, r2
 80025d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	e000e100 	.word	0xe000e100

080025ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	6039      	str	r1, [r7, #0]
 80025f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	db0a      	blt.n	8002616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	b2da      	uxtb	r2, r3
 8002604:	490c      	ldr	r1, [pc, #48]	; (8002638 <__NVIC_SetPriority+0x4c>)
 8002606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260a:	0112      	lsls	r2, r2, #4
 800260c:	b2d2      	uxtb	r2, r2
 800260e:	440b      	add	r3, r1
 8002610:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002614:	e00a      	b.n	800262c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	b2da      	uxtb	r2, r3
 800261a:	4908      	ldr	r1, [pc, #32]	; (800263c <__NVIC_SetPriority+0x50>)
 800261c:	79fb      	ldrb	r3, [r7, #7]
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	3b04      	subs	r3, #4
 8002624:	0112      	lsls	r2, r2, #4
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	440b      	add	r3, r1
 800262a:	761a      	strb	r2, [r3, #24]
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	e000e100 	.word	0xe000e100
 800263c:	e000ed00 	.word	0xe000ed00

08002640 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002640:	b480      	push	{r7}
 8002642:	b089      	sub	sp, #36	; 0x24
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	f1c3 0307 	rsb	r3, r3, #7
 800265a:	2b04      	cmp	r3, #4
 800265c:	bf28      	it	cs
 800265e:	2304      	movcs	r3, #4
 8002660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	3304      	adds	r3, #4
 8002666:	2b06      	cmp	r3, #6
 8002668:	d902      	bls.n	8002670 <NVIC_EncodePriority+0x30>
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	3b03      	subs	r3, #3
 800266e:	e000      	b.n	8002672 <NVIC_EncodePriority+0x32>
 8002670:	2300      	movs	r3, #0
 8002672:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002674:	f04f 32ff 	mov.w	r2, #4294967295
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43da      	mvns	r2, r3
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	401a      	ands	r2, r3
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002688:	f04f 31ff 	mov.w	r1, #4294967295
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	fa01 f303 	lsl.w	r3, r1, r3
 8002692:	43d9      	mvns	r1, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002698:	4313      	orrs	r3, r2
         );
}
 800269a:	4618      	mov	r0, r3
 800269c:	3724      	adds	r7, #36	; 0x24
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b082      	sub	sp, #8
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7ff ff4c 	bl	800254c <__NVIC_SetPriorityGrouping>
}
 80026b4:	bf00      	nop
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4603      	mov	r3, r0
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
 80026c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026ce:	f7ff ff61 	bl	8002594 <__NVIC_GetPriorityGrouping>
 80026d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	68b9      	ldr	r1, [r7, #8]
 80026d8:	6978      	ldr	r0, [r7, #20]
 80026da:	f7ff ffb1 	bl	8002640 <NVIC_EncodePriority>
 80026de:	4602      	mov	r2, r0
 80026e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026e4:	4611      	mov	r1, r2
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff ff80 	bl	80025ec <__NVIC_SetPriority>
}
 80026ec:	bf00      	nop
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff ff54 	bl	80025b0 <__NVIC_EnableIRQ>
}
 8002708:	bf00      	nop
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002710:	b480      	push	{r7}
 8002712:	b089      	sub	sp, #36	; 0x24
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800271a:	2300      	movs	r3, #0
 800271c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800271e:	2300      	movs	r3, #0
 8002720:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002722:	2300      	movs	r3, #0
 8002724:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002726:	2300      	movs	r3, #0
 8002728:	61fb      	str	r3, [r7, #28]
 800272a:	e16b      	b.n	8002a04 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800272c:	2201      	movs	r2, #1
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	4013      	ands	r3, r2
 800273e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	429a      	cmp	r2, r3
 8002746:	f040 815a 	bne.w	80029fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f003 0303 	and.w	r3, r3, #3
 8002752:	2b01      	cmp	r3, #1
 8002754:	d005      	beq.n	8002762 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800275e:	2b02      	cmp	r3, #2
 8002760:	d130      	bne.n	80027c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	2203      	movs	r2, #3
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43db      	mvns	r3, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4013      	ands	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	68da      	ldr	r2, [r3, #12]
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4313      	orrs	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002798:	2201      	movs	r2, #1
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	43db      	mvns	r3, r3
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	4013      	ands	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	091b      	lsrs	r3, r3, #4
 80027ae:	f003 0201 	and.w	r2, r3, #1
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f003 0303 	and.w	r3, r3, #3
 80027cc:	2b03      	cmp	r3, #3
 80027ce:	d017      	beq.n	8002800 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	2203      	movs	r2, #3
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	43db      	mvns	r3, r3
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4013      	ands	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f003 0303 	and.w	r3, r3, #3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d123      	bne.n	8002854 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	08da      	lsrs	r2, r3, #3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3208      	adds	r2, #8
 8002814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002818:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	220f      	movs	r2, #15
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	43db      	mvns	r3, r3
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4013      	ands	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	691a      	ldr	r2, [r3, #16]
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	4313      	orrs	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	08da      	lsrs	r2, r3, #3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	3208      	adds	r2, #8
 800284e:	69b9      	ldr	r1, [r7, #24]
 8002850:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	2203      	movs	r2, #3
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	43db      	mvns	r3, r3
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	4013      	ands	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f003 0203 	and.w	r2, r3, #3
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4313      	orrs	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 80b4 	beq.w	80029fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002896:	2300      	movs	r3, #0
 8002898:	60fb      	str	r3, [r7, #12]
 800289a:	4b60      	ldr	r3, [pc, #384]	; (8002a1c <HAL_GPIO_Init+0x30c>)
 800289c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289e:	4a5f      	ldr	r2, [pc, #380]	; (8002a1c <HAL_GPIO_Init+0x30c>)
 80028a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028a4:	6453      	str	r3, [r2, #68]	; 0x44
 80028a6:	4b5d      	ldr	r3, [pc, #372]	; (8002a1c <HAL_GPIO_Init+0x30c>)
 80028a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028b2:	4a5b      	ldr	r2, [pc, #364]	; (8002a20 <HAL_GPIO_Init+0x310>)
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	089b      	lsrs	r3, r3, #2
 80028b8:	3302      	adds	r3, #2
 80028ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	f003 0303 	and.w	r3, r3, #3
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	220f      	movs	r2, #15
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	43db      	mvns	r3, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4013      	ands	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a52      	ldr	r2, [pc, #328]	; (8002a24 <HAL_GPIO_Init+0x314>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d02b      	beq.n	8002936 <HAL_GPIO_Init+0x226>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a51      	ldr	r2, [pc, #324]	; (8002a28 <HAL_GPIO_Init+0x318>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d025      	beq.n	8002932 <HAL_GPIO_Init+0x222>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a50      	ldr	r2, [pc, #320]	; (8002a2c <HAL_GPIO_Init+0x31c>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d01f      	beq.n	800292e <HAL_GPIO_Init+0x21e>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a4f      	ldr	r2, [pc, #316]	; (8002a30 <HAL_GPIO_Init+0x320>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d019      	beq.n	800292a <HAL_GPIO_Init+0x21a>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a4e      	ldr	r2, [pc, #312]	; (8002a34 <HAL_GPIO_Init+0x324>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d013      	beq.n	8002926 <HAL_GPIO_Init+0x216>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a4d      	ldr	r2, [pc, #308]	; (8002a38 <HAL_GPIO_Init+0x328>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d00d      	beq.n	8002922 <HAL_GPIO_Init+0x212>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a4c      	ldr	r2, [pc, #304]	; (8002a3c <HAL_GPIO_Init+0x32c>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d007      	beq.n	800291e <HAL_GPIO_Init+0x20e>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a4b      	ldr	r2, [pc, #300]	; (8002a40 <HAL_GPIO_Init+0x330>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d101      	bne.n	800291a <HAL_GPIO_Init+0x20a>
 8002916:	2307      	movs	r3, #7
 8002918:	e00e      	b.n	8002938 <HAL_GPIO_Init+0x228>
 800291a:	2308      	movs	r3, #8
 800291c:	e00c      	b.n	8002938 <HAL_GPIO_Init+0x228>
 800291e:	2306      	movs	r3, #6
 8002920:	e00a      	b.n	8002938 <HAL_GPIO_Init+0x228>
 8002922:	2305      	movs	r3, #5
 8002924:	e008      	b.n	8002938 <HAL_GPIO_Init+0x228>
 8002926:	2304      	movs	r3, #4
 8002928:	e006      	b.n	8002938 <HAL_GPIO_Init+0x228>
 800292a:	2303      	movs	r3, #3
 800292c:	e004      	b.n	8002938 <HAL_GPIO_Init+0x228>
 800292e:	2302      	movs	r3, #2
 8002930:	e002      	b.n	8002938 <HAL_GPIO_Init+0x228>
 8002932:	2301      	movs	r3, #1
 8002934:	e000      	b.n	8002938 <HAL_GPIO_Init+0x228>
 8002936:	2300      	movs	r3, #0
 8002938:	69fa      	ldr	r2, [r7, #28]
 800293a:	f002 0203 	and.w	r2, r2, #3
 800293e:	0092      	lsls	r2, r2, #2
 8002940:	4093      	lsls	r3, r2
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4313      	orrs	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002948:	4935      	ldr	r1, [pc, #212]	; (8002a20 <HAL_GPIO_Init+0x310>)
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	089b      	lsrs	r3, r3, #2
 800294e:	3302      	adds	r3, #2
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002956:	4b3b      	ldr	r3, [pc, #236]	; (8002a44 <HAL_GPIO_Init+0x334>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	43db      	mvns	r3, r3
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4013      	ands	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	4313      	orrs	r3, r2
 8002978:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800297a:	4a32      	ldr	r2, [pc, #200]	; (8002a44 <HAL_GPIO_Init+0x334>)
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002980:	4b30      	ldr	r3, [pc, #192]	; (8002a44 <HAL_GPIO_Init+0x334>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	43db      	mvns	r3, r3
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	4013      	ands	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d003      	beq.n	80029a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029a4:	4a27      	ldr	r2, [pc, #156]	; (8002a44 <HAL_GPIO_Init+0x334>)
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029aa:	4b26      	ldr	r3, [pc, #152]	; (8002a44 <HAL_GPIO_Init+0x334>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	43db      	mvns	r3, r3
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	4013      	ands	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029ce:	4a1d      	ldr	r2, [pc, #116]	; (8002a44 <HAL_GPIO_Init+0x334>)
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029d4:	4b1b      	ldr	r3, [pc, #108]	; (8002a44 <HAL_GPIO_Init+0x334>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	43db      	mvns	r3, r3
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	4013      	ands	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d003      	beq.n	80029f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029f8:	4a12      	ldr	r2, [pc, #72]	; (8002a44 <HAL_GPIO_Init+0x334>)
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	3301      	adds	r3, #1
 8002a02:	61fb      	str	r3, [r7, #28]
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	2b0f      	cmp	r3, #15
 8002a08:	f67f ae90 	bls.w	800272c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a0c:	bf00      	nop
 8002a0e:	bf00      	nop
 8002a10:	3724      	adds	r7, #36	; 0x24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	40013800 	.word	0x40013800
 8002a24:	40020000 	.word	0x40020000
 8002a28:	40020400 	.word	0x40020400
 8002a2c:	40020800 	.word	0x40020800
 8002a30:	40020c00 	.word	0x40020c00
 8002a34:	40021000 	.word	0x40021000
 8002a38:	40021400 	.word	0x40021400
 8002a3c:	40021800 	.word	0x40021800
 8002a40:	40021c00 	.word	0x40021c00
 8002a44:	40013c00 	.word	0x40013c00

08002a48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	460b      	mov	r3, r1
 8002a52:	807b      	strh	r3, [r7, #2]
 8002a54:	4613      	mov	r3, r2
 8002a56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a58:	787b      	ldrb	r3, [r7, #1]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a5e:	887a      	ldrh	r2, [r7, #2]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a64:	e003      	b.n	8002a6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a66:	887b      	ldrh	r3, [r7, #2]
 8002a68:	041a      	lsls	r2, r3, #16
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	619a      	str	r2, [r3, #24]
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
	...

08002a7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e12b      	b.n	8002ce6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d106      	bne.n	8002aa8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7fe f8d4 	bl	8000c50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2224      	movs	r2, #36	; 0x24
 8002aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f022 0201 	bic.w	r2, r2, #1
 8002abe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ace:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ade:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ae0:	f000 fd80 	bl	80035e4 <HAL_RCC_GetPCLK1Freq>
 8002ae4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	4a81      	ldr	r2, [pc, #516]	; (8002cf0 <HAL_I2C_Init+0x274>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d807      	bhi.n	8002b00 <HAL_I2C_Init+0x84>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	4a80      	ldr	r2, [pc, #512]	; (8002cf4 <HAL_I2C_Init+0x278>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	bf94      	ite	ls
 8002af8:	2301      	movls	r3, #1
 8002afa:	2300      	movhi	r3, #0
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	e006      	b.n	8002b0e <HAL_I2C_Init+0x92>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	4a7d      	ldr	r2, [pc, #500]	; (8002cf8 <HAL_I2C_Init+0x27c>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	bf94      	ite	ls
 8002b08:	2301      	movls	r3, #1
 8002b0a:	2300      	movhi	r3, #0
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e0e7      	b.n	8002ce6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	4a78      	ldr	r2, [pc, #480]	; (8002cfc <HAL_I2C_Init+0x280>)
 8002b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1e:	0c9b      	lsrs	r3, r3, #18
 8002b20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	430a      	orrs	r2, r1
 8002b34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	4a6a      	ldr	r2, [pc, #424]	; (8002cf0 <HAL_I2C_Init+0x274>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d802      	bhi.n	8002b50 <HAL_I2C_Init+0xd4>
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	e009      	b.n	8002b64 <HAL_I2C_Init+0xe8>
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b56:	fb02 f303 	mul.w	r3, r2, r3
 8002b5a:	4a69      	ldr	r2, [pc, #420]	; (8002d00 <HAL_I2C_Init+0x284>)
 8002b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b60:	099b      	lsrs	r3, r3, #6
 8002b62:	3301      	adds	r3, #1
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6812      	ldr	r2, [r2, #0]
 8002b68:	430b      	orrs	r3, r1
 8002b6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	495c      	ldr	r1, [pc, #368]	; (8002cf0 <HAL_I2C_Init+0x274>)
 8002b80:	428b      	cmp	r3, r1
 8002b82:	d819      	bhi.n	8002bb8 <HAL_I2C_Init+0x13c>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	1e59      	subs	r1, r3, #1
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b92:	1c59      	adds	r1, r3, #1
 8002b94:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b98:	400b      	ands	r3, r1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00a      	beq.n	8002bb4 <HAL_I2C_Init+0x138>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	1e59      	subs	r1, r3, #1
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bac:	3301      	adds	r3, #1
 8002bae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bb2:	e051      	b.n	8002c58 <HAL_I2C_Init+0x1dc>
 8002bb4:	2304      	movs	r3, #4
 8002bb6:	e04f      	b.n	8002c58 <HAL_I2C_Init+0x1dc>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d111      	bne.n	8002be4 <HAL_I2C_Init+0x168>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	1e58      	subs	r0, r3, #1
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6859      	ldr	r1, [r3, #4]
 8002bc8:	460b      	mov	r3, r1
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	440b      	add	r3, r1
 8002bce:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	bf0c      	ite	eq
 8002bdc:	2301      	moveq	r3, #1
 8002bde:	2300      	movne	r3, #0
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	e012      	b.n	8002c0a <HAL_I2C_Init+0x18e>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	1e58      	subs	r0, r3, #1
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6859      	ldr	r1, [r3, #4]
 8002bec:	460b      	mov	r3, r1
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	0099      	lsls	r1, r3, #2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	bf0c      	ite	eq
 8002c04:	2301      	moveq	r3, #1
 8002c06:	2300      	movne	r3, #0
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <HAL_I2C_Init+0x196>
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e022      	b.n	8002c58 <HAL_I2C_Init+0x1dc>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10e      	bne.n	8002c38 <HAL_I2C_Init+0x1bc>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	1e58      	subs	r0, r3, #1
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6859      	ldr	r1, [r3, #4]
 8002c22:	460b      	mov	r3, r1
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	440b      	add	r3, r1
 8002c28:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c36:	e00f      	b.n	8002c58 <HAL_I2C_Init+0x1dc>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	1e58      	subs	r0, r3, #1
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6859      	ldr	r1, [r3, #4]
 8002c40:	460b      	mov	r3, r1
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	0099      	lsls	r1, r3, #2
 8002c48:	440b      	add	r3, r1
 8002c4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c4e:	3301      	adds	r3, #1
 8002c50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	6809      	ldr	r1, [r1, #0]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69da      	ldr	r2, [r3, #28]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6911      	ldr	r1, [r2, #16]
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	68d2      	ldr	r2, [r2, #12]
 8002c92:	4311      	orrs	r1, r2
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6812      	ldr	r2, [r2, #0]
 8002c98:	430b      	orrs	r3, r1
 8002c9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	695a      	ldr	r2, [r3, #20]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f042 0201 	orr.w	r2, r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2220      	movs	r2, #32
 8002cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	000186a0 	.word	0x000186a0
 8002cf4:	001e847f 	.word	0x001e847f
 8002cf8:	003d08ff 	.word	0x003d08ff
 8002cfc:	431bde83 	.word	0x431bde83
 8002d00:	10624dd3 	.word	0x10624dd3

08002d04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e267      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d075      	beq.n	8002e0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d22:	4b88      	ldr	r3, [pc, #544]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 030c 	and.w	r3, r3, #12
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d00c      	beq.n	8002d48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d2e:	4b85      	ldr	r3, [pc, #532]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d36:	2b08      	cmp	r3, #8
 8002d38:	d112      	bne.n	8002d60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d3a:	4b82      	ldr	r3, [pc, #520]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d46:	d10b      	bne.n	8002d60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d48:	4b7e      	ldr	r3, [pc, #504]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d05b      	beq.n	8002e0c <HAL_RCC_OscConfig+0x108>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d157      	bne.n	8002e0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e242      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d68:	d106      	bne.n	8002d78 <HAL_RCC_OscConfig+0x74>
 8002d6a:	4b76      	ldr	r3, [pc, #472]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a75      	ldr	r2, [pc, #468]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d74:	6013      	str	r3, [r2, #0]
 8002d76:	e01d      	b.n	8002db4 <HAL_RCC_OscConfig+0xb0>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d80:	d10c      	bne.n	8002d9c <HAL_RCC_OscConfig+0x98>
 8002d82:	4b70      	ldr	r3, [pc, #448]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a6f      	ldr	r2, [pc, #444]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d8c:	6013      	str	r3, [r2, #0]
 8002d8e:	4b6d      	ldr	r3, [pc, #436]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a6c      	ldr	r2, [pc, #432]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d98:	6013      	str	r3, [r2, #0]
 8002d9a:	e00b      	b.n	8002db4 <HAL_RCC_OscConfig+0xb0>
 8002d9c:	4b69      	ldr	r3, [pc, #420]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a68      	ldr	r2, [pc, #416]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002da6:	6013      	str	r3, [r2, #0]
 8002da8:	4b66      	ldr	r3, [pc, #408]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a65      	ldr	r2, [pc, #404]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002dae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002db2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d013      	beq.n	8002de4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dbc:	f7ff f85c 	bl	8001e78 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dc4:	f7ff f858 	bl	8001e78 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b64      	cmp	r3, #100	; 0x64
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e207      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd6:	4b5b      	ldr	r3, [pc, #364]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0f0      	beq.n	8002dc4 <HAL_RCC_OscConfig+0xc0>
 8002de2:	e014      	b.n	8002e0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de4:	f7ff f848 	bl	8001e78 <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dec:	f7ff f844 	bl	8001e78 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b64      	cmp	r3, #100	; 0x64
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e1f3      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dfe:	4b51      	ldr	r3, [pc, #324]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1f0      	bne.n	8002dec <HAL_RCC_OscConfig+0xe8>
 8002e0a:	e000      	b.n	8002e0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d063      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e1a:	4b4a      	ldr	r3, [pc, #296]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f003 030c 	and.w	r3, r3, #12
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00b      	beq.n	8002e3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e26:	4b47      	ldr	r3, [pc, #284]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e2e:	2b08      	cmp	r3, #8
 8002e30:	d11c      	bne.n	8002e6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e32:	4b44      	ldr	r3, [pc, #272]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d116      	bne.n	8002e6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e3e:	4b41      	ldr	r3, [pc, #260]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d005      	beq.n	8002e56 <HAL_RCC_OscConfig+0x152>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d001      	beq.n	8002e56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e1c7      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e56:	4b3b      	ldr	r3, [pc, #236]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	4937      	ldr	r1, [pc, #220]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e6a:	e03a      	b.n	8002ee2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d020      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e74:	4b34      	ldr	r3, [pc, #208]	; (8002f48 <HAL_RCC_OscConfig+0x244>)
 8002e76:	2201      	movs	r2, #1
 8002e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e7a:	f7fe fffd 	bl	8001e78 <HAL_GetTick>
 8002e7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e80:	e008      	b.n	8002e94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e82:	f7fe fff9 	bl	8001e78 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e1a8      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e94:	4b2b      	ldr	r3, [pc, #172]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0f0      	beq.n	8002e82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea0:	4b28      	ldr	r3, [pc, #160]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	4925      	ldr	r1, [pc, #148]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	600b      	str	r3, [r1, #0]
 8002eb4:	e015      	b.n	8002ee2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eb6:	4b24      	ldr	r3, [pc, #144]	; (8002f48 <HAL_RCC_OscConfig+0x244>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ebc:	f7fe ffdc 	bl	8001e78 <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ec4:	f7fe ffd8 	bl	8001e78 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e187      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ed6:	4b1b      	ldr	r3, [pc, #108]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1f0      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0308 	and.w	r3, r3, #8
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d036      	beq.n	8002f5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d016      	beq.n	8002f24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ef6:	4b15      	ldr	r3, [pc, #84]	; (8002f4c <HAL_RCC_OscConfig+0x248>)
 8002ef8:	2201      	movs	r2, #1
 8002efa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002efc:	f7fe ffbc 	bl	8001e78 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f04:	f7fe ffb8 	bl	8001e78 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e167      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f16:	4b0b      	ldr	r3, [pc, #44]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002f18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0f0      	beq.n	8002f04 <HAL_RCC_OscConfig+0x200>
 8002f22:	e01b      	b.n	8002f5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f24:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <HAL_RCC_OscConfig+0x248>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2a:	f7fe ffa5 	bl	8001e78 <HAL_GetTick>
 8002f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f30:	e00e      	b.n	8002f50 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f32:	f7fe ffa1 	bl	8001e78 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d907      	bls.n	8002f50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e150      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
 8002f44:	40023800 	.word	0x40023800
 8002f48:	42470000 	.word	0x42470000
 8002f4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f50:	4b88      	ldr	r3, [pc, #544]	; (8003174 <HAL_RCC_OscConfig+0x470>)
 8002f52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1ea      	bne.n	8002f32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0304 	and.w	r3, r3, #4
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f000 8097 	beq.w	8003098 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f6e:	4b81      	ldr	r3, [pc, #516]	; (8003174 <HAL_RCC_OscConfig+0x470>)
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10f      	bne.n	8002f9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60bb      	str	r3, [r7, #8]
 8002f7e:	4b7d      	ldr	r3, [pc, #500]	; (8003174 <HAL_RCC_OscConfig+0x470>)
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	4a7c      	ldr	r2, [pc, #496]	; (8003174 <HAL_RCC_OscConfig+0x470>)
 8002f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f88:	6413      	str	r3, [r2, #64]	; 0x40
 8002f8a:	4b7a      	ldr	r3, [pc, #488]	; (8003174 <HAL_RCC_OscConfig+0x470>)
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f92:	60bb      	str	r3, [r7, #8]
 8002f94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f96:	2301      	movs	r3, #1
 8002f98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f9a:	4b77      	ldr	r3, [pc, #476]	; (8003178 <HAL_RCC_OscConfig+0x474>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d118      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fa6:	4b74      	ldr	r3, [pc, #464]	; (8003178 <HAL_RCC_OscConfig+0x474>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a73      	ldr	r2, [pc, #460]	; (8003178 <HAL_RCC_OscConfig+0x474>)
 8002fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fb2:	f7fe ff61 	bl	8001e78 <HAL_GetTick>
 8002fb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb8:	e008      	b.n	8002fcc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fba:	f7fe ff5d 	bl	8001e78 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e10c      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fcc:	4b6a      	ldr	r3, [pc, #424]	; (8003178 <HAL_RCC_OscConfig+0x474>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d0f0      	beq.n	8002fba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d106      	bne.n	8002fee <HAL_RCC_OscConfig+0x2ea>
 8002fe0:	4b64      	ldr	r3, [pc, #400]	; (8003174 <HAL_RCC_OscConfig+0x470>)
 8002fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe4:	4a63      	ldr	r2, [pc, #396]	; (8003174 <HAL_RCC_OscConfig+0x470>)
 8002fe6:	f043 0301 	orr.w	r3, r3, #1
 8002fea:	6713      	str	r3, [r2, #112]	; 0x70
 8002fec:	e01c      	b.n	8003028 <HAL_RCC_OscConfig+0x324>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	2b05      	cmp	r3, #5
 8002ff4:	d10c      	bne.n	8003010 <HAL_RCC_OscConfig+0x30c>
 8002ff6:	4b5f      	ldr	r3, [pc, #380]	; (8003174 <HAL_RCC_OscConfig+0x470>)
 8002ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffa:	4a5e      	ldr	r2, [pc, #376]	; (8003174 <HAL_RCC_OscConfig+0x470>)
 8002ffc:	f043 0304 	orr.w	r3, r3, #4
 8003000:	6713      	str	r3, [r2, #112]	; 0x70
 8003002:	4b5c      	ldr	r3, [pc, #368]	; (8003174 <HAL_RCC_OscConfig+0x470>)
 8003004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003006:	4a5b      	ldr	r2, [pc, #364]	; (8003174 <HAL_RCC_OscConfig+0x470>)
 8003008:	f043 0301 	orr.w	r3, r3, #1
 800300c:	6713      	str	r3, [r2, #112]	; 0x70
 800300e:	e00b      	b.n	8003028 <HAL_RCC_OscConfig+0x324>
 8003010:	4b58      	ldr	r3, [pc, #352]	; (8003174 <HAL_RCC_OscConfig+0x470>)
 8003012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003014:	4a57      	ldr	r2, [pc, #348]	; (8003174 <HAL_RCC_OscConfig+0x470>)
 8003016:	f023 0301 	bic.w	r3, r3, #1
 800301a:	6713      	str	r3, [r2, #112]	; 0x70
 800301c:	4b55      	ldr	r3, [pc, #340]	; (8003174 <HAL_RCC_OscConfig+0x470>)
 800301e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003020:	4a54      	ldr	r2, [pc, #336]	; (8003174 <HAL_RCC_OscConfig+0x470>)
 8003022:	f023 0304 	bic.w	r3, r3, #4
 8003026:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d015      	beq.n	800305c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003030:	f7fe ff22 	bl	8001e78 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003036:	e00a      	b.n	800304e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003038:	f7fe ff1e 	bl	8001e78 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	f241 3288 	movw	r2, #5000	; 0x1388
 8003046:	4293      	cmp	r3, r2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e0cb      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800304e:	4b49      	ldr	r3, [pc, #292]	; (8003174 <HAL_RCC_OscConfig+0x470>)
 8003050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d0ee      	beq.n	8003038 <HAL_RCC_OscConfig+0x334>
 800305a:	e014      	b.n	8003086 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800305c:	f7fe ff0c 	bl	8001e78 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003062:	e00a      	b.n	800307a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003064:	f7fe ff08 	bl	8001e78 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003072:	4293      	cmp	r3, r2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e0b5      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800307a:	4b3e      	ldr	r3, [pc, #248]	; (8003174 <HAL_RCC_OscConfig+0x470>)
 800307c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1ee      	bne.n	8003064 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003086:	7dfb      	ldrb	r3, [r7, #23]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d105      	bne.n	8003098 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800308c:	4b39      	ldr	r3, [pc, #228]	; (8003174 <HAL_RCC_OscConfig+0x470>)
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	4a38      	ldr	r2, [pc, #224]	; (8003174 <HAL_RCC_OscConfig+0x470>)
 8003092:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003096:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 80a1 	beq.w	80031e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030a2:	4b34      	ldr	r3, [pc, #208]	; (8003174 <HAL_RCC_OscConfig+0x470>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 030c 	and.w	r3, r3, #12
 80030aa:	2b08      	cmp	r3, #8
 80030ac:	d05c      	beq.n	8003168 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d141      	bne.n	800313a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030b6:	4b31      	ldr	r3, [pc, #196]	; (800317c <HAL_RCC_OscConfig+0x478>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030bc:	f7fe fedc 	bl	8001e78 <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030c4:	f7fe fed8 	bl	8001e78 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e087      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030d6:	4b27      	ldr	r3, [pc, #156]	; (8003174 <HAL_RCC_OscConfig+0x470>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1f0      	bne.n	80030c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	69da      	ldr	r2, [r3, #28]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f0:	019b      	lsls	r3, r3, #6
 80030f2:	431a      	orrs	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f8:	085b      	lsrs	r3, r3, #1
 80030fa:	3b01      	subs	r3, #1
 80030fc:	041b      	lsls	r3, r3, #16
 80030fe:	431a      	orrs	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003104:	061b      	lsls	r3, r3, #24
 8003106:	491b      	ldr	r1, [pc, #108]	; (8003174 <HAL_RCC_OscConfig+0x470>)
 8003108:	4313      	orrs	r3, r2
 800310a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800310c:	4b1b      	ldr	r3, [pc, #108]	; (800317c <HAL_RCC_OscConfig+0x478>)
 800310e:	2201      	movs	r2, #1
 8003110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003112:	f7fe feb1 	bl	8001e78 <HAL_GetTick>
 8003116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003118:	e008      	b.n	800312c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800311a:	f7fe fead 	bl	8001e78 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e05c      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800312c:	4b11      	ldr	r3, [pc, #68]	; (8003174 <HAL_RCC_OscConfig+0x470>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d0f0      	beq.n	800311a <HAL_RCC_OscConfig+0x416>
 8003138:	e054      	b.n	80031e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800313a:	4b10      	ldr	r3, [pc, #64]	; (800317c <HAL_RCC_OscConfig+0x478>)
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003140:	f7fe fe9a 	bl	8001e78 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003148:	f7fe fe96 	bl	8001e78 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e045      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800315a:	4b06      	ldr	r3, [pc, #24]	; (8003174 <HAL_RCC_OscConfig+0x470>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1f0      	bne.n	8003148 <HAL_RCC_OscConfig+0x444>
 8003166:	e03d      	b.n	80031e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d107      	bne.n	8003180 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e038      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
 8003174:	40023800 	.word	0x40023800
 8003178:	40007000 	.word	0x40007000
 800317c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003180:	4b1b      	ldr	r3, [pc, #108]	; (80031f0 <HAL_RCC_OscConfig+0x4ec>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d028      	beq.n	80031e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003198:	429a      	cmp	r2, r3
 800319a:	d121      	bne.n	80031e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d11a      	bne.n	80031e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031b0:	4013      	ands	r3, r2
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d111      	bne.n	80031e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c6:	085b      	lsrs	r3, r3, #1
 80031c8:	3b01      	subs	r3, #1
 80031ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d107      	bne.n	80031e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031dc:	429a      	cmp	r2, r3
 80031de:	d001      	beq.n	80031e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e000      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3718      	adds	r7, #24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	40023800 	.word	0x40023800

080031f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d101      	bne.n	8003208 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e0cc      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003208:	4b68      	ldr	r3, [pc, #416]	; (80033ac <HAL_RCC_ClockConfig+0x1b8>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	429a      	cmp	r2, r3
 8003214:	d90c      	bls.n	8003230 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003216:	4b65      	ldr	r3, [pc, #404]	; (80033ac <HAL_RCC_ClockConfig+0x1b8>)
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800321e:	4b63      	ldr	r3, [pc, #396]	; (80033ac <HAL_RCC_ClockConfig+0x1b8>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0307 	and.w	r3, r3, #7
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	429a      	cmp	r2, r3
 800322a:	d001      	beq.n	8003230 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e0b8      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d020      	beq.n	800327e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	2b00      	cmp	r3, #0
 8003246:	d005      	beq.n	8003254 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003248:	4b59      	ldr	r3, [pc, #356]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	4a58      	ldr	r2, [pc, #352]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003252:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0308 	and.w	r3, r3, #8
 800325c:	2b00      	cmp	r3, #0
 800325e:	d005      	beq.n	800326c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003260:	4b53      	ldr	r3, [pc, #332]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	4a52      	ldr	r2, [pc, #328]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800326a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800326c:	4b50      	ldr	r3, [pc, #320]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	494d      	ldr	r1, [pc, #308]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 800327a:	4313      	orrs	r3, r2
 800327c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d044      	beq.n	8003314 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d107      	bne.n	80032a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003292:	4b47      	ldr	r3, [pc, #284]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d119      	bne.n	80032d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e07f      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d003      	beq.n	80032b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ae:	2b03      	cmp	r3, #3
 80032b0:	d107      	bne.n	80032c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032b2:	4b3f      	ldr	r3, [pc, #252]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d109      	bne.n	80032d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e06f      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c2:	4b3b      	ldr	r3, [pc, #236]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e067      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032d2:	4b37      	ldr	r3, [pc, #220]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f023 0203 	bic.w	r2, r3, #3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	4934      	ldr	r1, [pc, #208]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032e4:	f7fe fdc8 	bl	8001e78 <HAL_GetTick>
 80032e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ea:	e00a      	b.n	8003302 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ec:	f7fe fdc4 	bl	8001e78 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e04f      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003302:	4b2b      	ldr	r3, [pc, #172]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 020c 	and.w	r2, r3, #12
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	429a      	cmp	r2, r3
 8003312:	d1eb      	bne.n	80032ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003314:	4b25      	ldr	r3, [pc, #148]	; (80033ac <HAL_RCC_ClockConfig+0x1b8>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	429a      	cmp	r2, r3
 8003320:	d20c      	bcs.n	800333c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003322:	4b22      	ldr	r3, [pc, #136]	; (80033ac <HAL_RCC_ClockConfig+0x1b8>)
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800332a:	4b20      	ldr	r3, [pc, #128]	; (80033ac <HAL_RCC_ClockConfig+0x1b8>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0307 	and.w	r3, r3, #7
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	429a      	cmp	r2, r3
 8003336:	d001      	beq.n	800333c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e032      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d008      	beq.n	800335a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003348:	4b19      	ldr	r3, [pc, #100]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	4916      	ldr	r1, [pc, #88]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003356:	4313      	orrs	r3, r2
 8003358:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0308 	and.w	r3, r3, #8
 8003362:	2b00      	cmp	r3, #0
 8003364:	d009      	beq.n	800337a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003366:	4b12      	ldr	r3, [pc, #72]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	490e      	ldr	r1, [pc, #56]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003376:	4313      	orrs	r3, r2
 8003378:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800337a:	f000 f821 	bl	80033c0 <HAL_RCC_GetSysClockFreq>
 800337e:	4602      	mov	r2, r0
 8003380:	4b0b      	ldr	r3, [pc, #44]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	091b      	lsrs	r3, r3, #4
 8003386:	f003 030f 	and.w	r3, r3, #15
 800338a:	490a      	ldr	r1, [pc, #40]	; (80033b4 <HAL_RCC_ClockConfig+0x1c0>)
 800338c:	5ccb      	ldrb	r3, [r1, r3]
 800338e:	fa22 f303 	lsr.w	r3, r2, r3
 8003392:	4a09      	ldr	r2, [pc, #36]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003396:	4b09      	ldr	r3, [pc, #36]	; (80033bc <HAL_RCC_ClockConfig+0x1c8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4618      	mov	r0, r3
 800339c:	f7fd fe8e 	bl	80010bc <HAL_InitTick>

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	40023c00 	.word	0x40023c00
 80033b0:	40023800 	.word	0x40023800
 80033b4:	0800704c 	.word	0x0800704c
 80033b8:	20000000 	.word	0x20000000
 80033bc:	20000004 	.word	0x20000004

080033c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033c4:	b094      	sub	sp, #80	; 0x50
 80033c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033c8:	2300      	movs	r3, #0
 80033ca:	647b      	str	r3, [r7, #68]	; 0x44
 80033cc:	2300      	movs	r3, #0
 80033ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033d0:	2300      	movs	r3, #0
 80033d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033d8:	4b79      	ldr	r3, [pc, #484]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 030c 	and.w	r3, r3, #12
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d00d      	beq.n	8003400 <HAL_RCC_GetSysClockFreq+0x40>
 80033e4:	2b08      	cmp	r3, #8
 80033e6:	f200 80e1 	bhi.w	80035ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d002      	beq.n	80033f4 <HAL_RCC_GetSysClockFreq+0x34>
 80033ee:	2b04      	cmp	r3, #4
 80033f0:	d003      	beq.n	80033fa <HAL_RCC_GetSysClockFreq+0x3a>
 80033f2:	e0db      	b.n	80035ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033f4:	4b73      	ldr	r3, [pc, #460]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80033f6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80033f8:	e0db      	b.n	80035b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033fa:	4b73      	ldr	r3, [pc, #460]	; (80035c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80033fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033fe:	e0d8      	b.n	80035b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003400:	4b6f      	ldr	r3, [pc, #444]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003408:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800340a:	4b6d      	ldr	r3, [pc, #436]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d063      	beq.n	80034de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003416:	4b6a      	ldr	r3, [pc, #424]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	099b      	lsrs	r3, r3, #6
 800341c:	2200      	movs	r2, #0
 800341e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003420:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003428:	633b      	str	r3, [r7, #48]	; 0x30
 800342a:	2300      	movs	r3, #0
 800342c:	637b      	str	r3, [r7, #52]	; 0x34
 800342e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003432:	4622      	mov	r2, r4
 8003434:	462b      	mov	r3, r5
 8003436:	f04f 0000 	mov.w	r0, #0
 800343a:	f04f 0100 	mov.w	r1, #0
 800343e:	0159      	lsls	r1, r3, #5
 8003440:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003444:	0150      	lsls	r0, r2, #5
 8003446:	4602      	mov	r2, r0
 8003448:	460b      	mov	r3, r1
 800344a:	4621      	mov	r1, r4
 800344c:	1a51      	subs	r1, r2, r1
 800344e:	6139      	str	r1, [r7, #16]
 8003450:	4629      	mov	r1, r5
 8003452:	eb63 0301 	sbc.w	r3, r3, r1
 8003456:	617b      	str	r3, [r7, #20]
 8003458:	f04f 0200 	mov.w	r2, #0
 800345c:	f04f 0300 	mov.w	r3, #0
 8003460:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003464:	4659      	mov	r1, fp
 8003466:	018b      	lsls	r3, r1, #6
 8003468:	4651      	mov	r1, sl
 800346a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800346e:	4651      	mov	r1, sl
 8003470:	018a      	lsls	r2, r1, #6
 8003472:	4651      	mov	r1, sl
 8003474:	ebb2 0801 	subs.w	r8, r2, r1
 8003478:	4659      	mov	r1, fp
 800347a:	eb63 0901 	sbc.w	r9, r3, r1
 800347e:	f04f 0200 	mov.w	r2, #0
 8003482:	f04f 0300 	mov.w	r3, #0
 8003486:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800348a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800348e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003492:	4690      	mov	r8, r2
 8003494:	4699      	mov	r9, r3
 8003496:	4623      	mov	r3, r4
 8003498:	eb18 0303 	adds.w	r3, r8, r3
 800349c:	60bb      	str	r3, [r7, #8]
 800349e:	462b      	mov	r3, r5
 80034a0:	eb49 0303 	adc.w	r3, r9, r3
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	f04f 0200 	mov.w	r2, #0
 80034aa:	f04f 0300 	mov.w	r3, #0
 80034ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034b2:	4629      	mov	r1, r5
 80034b4:	024b      	lsls	r3, r1, #9
 80034b6:	4621      	mov	r1, r4
 80034b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034bc:	4621      	mov	r1, r4
 80034be:	024a      	lsls	r2, r1, #9
 80034c0:	4610      	mov	r0, r2
 80034c2:	4619      	mov	r1, r3
 80034c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034c6:	2200      	movs	r2, #0
 80034c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80034ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034d0:	f7fc fe7e 	bl	80001d0 <__aeabi_uldivmod>
 80034d4:	4602      	mov	r2, r0
 80034d6:	460b      	mov	r3, r1
 80034d8:	4613      	mov	r3, r2
 80034da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034dc:	e058      	b.n	8003590 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034de:	4b38      	ldr	r3, [pc, #224]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	099b      	lsrs	r3, r3, #6
 80034e4:	2200      	movs	r2, #0
 80034e6:	4618      	mov	r0, r3
 80034e8:	4611      	mov	r1, r2
 80034ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034ee:	623b      	str	r3, [r7, #32]
 80034f0:	2300      	movs	r3, #0
 80034f2:	627b      	str	r3, [r7, #36]	; 0x24
 80034f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034f8:	4642      	mov	r2, r8
 80034fa:	464b      	mov	r3, r9
 80034fc:	f04f 0000 	mov.w	r0, #0
 8003500:	f04f 0100 	mov.w	r1, #0
 8003504:	0159      	lsls	r1, r3, #5
 8003506:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800350a:	0150      	lsls	r0, r2, #5
 800350c:	4602      	mov	r2, r0
 800350e:	460b      	mov	r3, r1
 8003510:	4641      	mov	r1, r8
 8003512:	ebb2 0a01 	subs.w	sl, r2, r1
 8003516:	4649      	mov	r1, r9
 8003518:	eb63 0b01 	sbc.w	fp, r3, r1
 800351c:	f04f 0200 	mov.w	r2, #0
 8003520:	f04f 0300 	mov.w	r3, #0
 8003524:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003528:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800352c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003530:	ebb2 040a 	subs.w	r4, r2, sl
 8003534:	eb63 050b 	sbc.w	r5, r3, fp
 8003538:	f04f 0200 	mov.w	r2, #0
 800353c:	f04f 0300 	mov.w	r3, #0
 8003540:	00eb      	lsls	r3, r5, #3
 8003542:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003546:	00e2      	lsls	r2, r4, #3
 8003548:	4614      	mov	r4, r2
 800354a:	461d      	mov	r5, r3
 800354c:	4643      	mov	r3, r8
 800354e:	18e3      	adds	r3, r4, r3
 8003550:	603b      	str	r3, [r7, #0]
 8003552:	464b      	mov	r3, r9
 8003554:	eb45 0303 	adc.w	r3, r5, r3
 8003558:	607b      	str	r3, [r7, #4]
 800355a:	f04f 0200 	mov.w	r2, #0
 800355e:	f04f 0300 	mov.w	r3, #0
 8003562:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003566:	4629      	mov	r1, r5
 8003568:	028b      	lsls	r3, r1, #10
 800356a:	4621      	mov	r1, r4
 800356c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003570:	4621      	mov	r1, r4
 8003572:	028a      	lsls	r2, r1, #10
 8003574:	4610      	mov	r0, r2
 8003576:	4619      	mov	r1, r3
 8003578:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800357a:	2200      	movs	r2, #0
 800357c:	61bb      	str	r3, [r7, #24]
 800357e:	61fa      	str	r2, [r7, #28]
 8003580:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003584:	f7fc fe24 	bl	80001d0 <__aeabi_uldivmod>
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	4613      	mov	r3, r2
 800358e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003590:	4b0b      	ldr	r3, [pc, #44]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	0c1b      	lsrs	r3, r3, #16
 8003596:	f003 0303 	and.w	r3, r3, #3
 800359a:	3301      	adds	r3, #1
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80035a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035aa:	e002      	b.n	80035b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035ac:	4b05      	ldr	r3, [pc, #20]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80035ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3750      	adds	r7, #80	; 0x50
 80035b8:	46bd      	mov	sp, r7
 80035ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035be:	bf00      	nop
 80035c0:	40023800 	.word	0x40023800
 80035c4:	00f42400 	.word	0x00f42400
 80035c8:	007a1200 	.word	0x007a1200

080035cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035d0:	4b03      	ldr	r3, [pc, #12]	; (80035e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80035d2:	681b      	ldr	r3, [r3, #0]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	20000000 	.word	0x20000000

080035e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035e8:	f7ff fff0 	bl	80035cc <HAL_RCC_GetHCLKFreq>
 80035ec:	4602      	mov	r2, r0
 80035ee:	4b05      	ldr	r3, [pc, #20]	; (8003604 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	0a9b      	lsrs	r3, r3, #10
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	4903      	ldr	r1, [pc, #12]	; (8003608 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035fa:	5ccb      	ldrb	r3, [r1, r3]
 80035fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003600:	4618      	mov	r0, r3
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40023800 	.word	0x40023800
 8003608:	0800705c 	.word	0x0800705c

0800360c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003610:	f7ff ffdc 	bl	80035cc <HAL_RCC_GetHCLKFreq>
 8003614:	4602      	mov	r2, r0
 8003616:	4b05      	ldr	r3, [pc, #20]	; (800362c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	0b5b      	lsrs	r3, r3, #13
 800361c:	f003 0307 	and.w	r3, r3, #7
 8003620:	4903      	ldr	r1, [pc, #12]	; (8003630 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003622:	5ccb      	ldrb	r3, [r1, r3]
 8003624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003628:	4618      	mov	r0, r3
 800362a:	bd80      	pop	{r7, pc}
 800362c:	40023800 	.word	0x40023800
 8003630:	0800705c 	.word	0x0800705c

08003634 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	220f      	movs	r2, #15
 8003642:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003644:	4b12      	ldr	r3, [pc, #72]	; (8003690 <HAL_RCC_GetClockConfig+0x5c>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f003 0203 	and.w	r2, r3, #3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003650:	4b0f      	ldr	r3, [pc, #60]	; (8003690 <HAL_RCC_GetClockConfig+0x5c>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800365c:	4b0c      	ldr	r3, [pc, #48]	; (8003690 <HAL_RCC_GetClockConfig+0x5c>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003668:	4b09      	ldr	r3, [pc, #36]	; (8003690 <HAL_RCC_GetClockConfig+0x5c>)
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	08db      	lsrs	r3, r3, #3
 800366e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003676:	4b07      	ldr	r3, [pc, #28]	; (8003694 <HAL_RCC_GetClockConfig+0x60>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0207 	and.w	r2, r3, #7
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	601a      	str	r2, [r3, #0]
}
 8003682:	bf00      	nop
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	40023800 	.word	0x40023800
 8003694:	40023c00 	.word	0x40023c00

08003698 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e07b      	b.n	80037a2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d108      	bne.n	80036c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036ba:	d009      	beq.n	80036d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	61da      	str	r2, [r3, #28]
 80036c2:	e005      	b.n	80036d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d106      	bne.n	80036f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7fd fc52 	bl	8000f94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2202      	movs	r2, #2
 80036f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003706:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003718:	431a      	orrs	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003722:	431a      	orrs	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	431a      	orrs	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	431a      	orrs	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003740:	431a      	orrs	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a1b      	ldr	r3, [r3, #32]
 8003750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003754:	ea42 0103 	orr.w	r1, r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	430a      	orrs	r2, r1
 8003766:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	0c1b      	lsrs	r3, r3, #16
 800376e:	f003 0104 	and.w	r1, r3, #4
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003776:	f003 0210 	and.w	r2, r3, #16
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	430a      	orrs	r2, r1
 8003780:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	69da      	ldr	r2, [r3, #28]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003790:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3708      	adds	r7, #8
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b082      	sub	sp, #8
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e041      	b.n	8003840 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d106      	bne.n	80037d6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f7fd ffe7 	bl	80017a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2202      	movs	r2, #2
 80037da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	3304      	adds	r3, #4
 80037e6:	4619      	mov	r1, r3
 80037e8:	4610      	mov	r0, r2
 80037ea:	f000 fc79 	bl	80040e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3708      	adds	r7, #8
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b01      	cmp	r3, #1
 800385a:	d001      	beq.n	8003860 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e04e      	b.n	80038fe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2202      	movs	r2, #2
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68da      	ldr	r2, [r3, #12]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f042 0201 	orr.w	r2, r2, #1
 8003876:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a23      	ldr	r2, [pc, #140]	; (800390c <HAL_TIM_Base_Start_IT+0xc4>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d022      	beq.n	80038c8 <HAL_TIM_Base_Start_IT+0x80>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800388a:	d01d      	beq.n	80038c8 <HAL_TIM_Base_Start_IT+0x80>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a1f      	ldr	r2, [pc, #124]	; (8003910 <HAL_TIM_Base_Start_IT+0xc8>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d018      	beq.n	80038c8 <HAL_TIM_Base_Start_IT+0x80>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a1e      	ldr	r2, [pc, #120]	; (8003914 <HAL_TIM_Base_Start_IT+0xcc>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d013      	beq.n	80038c8 <HAL_TIM_Base_Start_IT+0x80>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a1c      	ldr	r2, [pc, #112]	; (8003918 <HAL_TIM_Base_Start_IT+0xd0>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d00e      	beq.n	80038c8 <HAL_TIM_Base_Start_IT+0x80>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a1b      	ldr	r2, [pc, #108]	; (800391c <HAL_TIM_Base_Start_IT+0xd4>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d009      	beq.n	80038c8 <HAL_TIM_Base_Start_IT+0x80>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a19      	ldr	r2, [pc, #100]	; (8003920 <HAL_TIM_Base_Start_IT+0xd8>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d004      	beq.n	80038c8 <HAL_TIM_Base_Start_IT+0x80>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a18      	ldr	r2, [pc, #96]	; (8003924 <HAL_TIM_Base_Start_IT+0xdc>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d111      	bne.n	80038ec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 0307 	and.w	r3, r3, #7
 80038d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2b06      	cmp	r3, #6
 80038d8:	d010      	beq.n	80038fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f042 0201 	orr.w	r2, r2, #1
 80038e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038ea:	e007      	b.n	80038fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 0201 	orr.w	r2, r2, #1
 80038fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3714      	adds	r7, #20
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	40010000 	.word	0x40010000
 8003910:	40000400 	.word	0x40000400
 8003914:	40000800 	.word	0x40000800
 8003918:	40000c00 	.word	0x40000c00
 800391c:	40010400 	.word	0x40010400
 8003920:	40014000 	.word	0x40014000
 8003924:	40001800 	.word	0x40001800

08003928 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e041      	b.n	80039be <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d106      	bne.n	8003954 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f839 	bl	80039c6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2202      	movs	r2, #2
 8003958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	3304      	adds	r3, #4
 8003964:	4619      	mov	r1, r3
 8003966:	4610      	mov	r0, r2
 8003968:	f000 fbba 	bl	80040e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80039c6:	b480      	push	{r7}
 80039c8:	b083      	sub	sp, #12
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80039ce:	bf00      	nop
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
	...

080039dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d109      	bne.n	8003a00 <HAL_TIM_PWM_Start+0x24>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	bf14      	ite	ne
 80039f8:	2301      	movne	r3, #1
 80039fa:	2300      	moveq	r3, #0
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	e022      	b.n	8003a46 <HAL_TIM_PWM_Start+0x6a>
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	d109      	bne.n	8003a1a <HAL_TIM_PWM_Start+0x3e>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	bf14      	ite	ne
 8003a12:	2301      	movne	r3, #1
 8003a14:	2300      	moveq	r3, #0
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	e015      	b.n	8003a46 <HAL_TIM_PWM_Start+0x6a>
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	2b08      	cmp	r3, #8
 8003a1e:	d109      	bne.n	8003a34 <HAL_TIM_PWM_Start+0x58>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	bf14      	ite	ne
 8003a2c:	2301      	movne	r3, #1
 8003a2e:	2300      	moveq	r3, #0
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	e008      	b.n	8003a46 <HAL_TIM_PWM_Start+0x6a>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	bf14      	ite	ne
 8003a40:	2301      	movne	r3, #1
 8003a42:	2300      	moveq	r3, #0
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e07c      	b.n	8003b48 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d104      	bne.n	8003a5e <HAL_TIM_PWM_Start+0x82>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2202      	movs	r2, #2
 8003a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a5c:	e013      	b.n	8003a86 <HAL_TIM_PWM_Start+0xaa>
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2b04      	cmp	r3, #4
 8003a62:	d104      	bne.n	8003a6e <HAL_TIM_PWM_Start+0x92>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2202      	movs	r2, #2
 8003a68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a6c:	e00b      	b.n	8003a86 <HAL_TIM_PWM_Start+0xaa>
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	2b08      	cmp	r3, #8
 8003a72:	d104      	bne.n	8003a7e <HAL_TIM_PWM_Start+0xa2>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2202      	movs	r2, #2
 8003a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a7c:	e003      	b.n	8003a86 <HAL_TIM_PWM_Start+0xaa>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2202      	movs	r2, #2
 8003a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	6839      	ldr	r1, [r7, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f000 fe10 	bl	80046b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a2d      	ldr	r2, [pc, #180]	; (8003b50 <HAL_TIM_PWM_Start+0x174>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d004      	beq.n	8003aa8 <HAL_TIM_PWM_Start+0xcc>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a2c      	ldr	r2, [pc, #176]	; (8003b54 <HAL_TIM_PWM_Start+0x178>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d101      	bne.n	8003aac <HAL_TIM_PWM_Start+0xd0>
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e000      	b.n	8003aae <HAL_TIM_PWM_Start+0xd2>
 8003aac:	2300      	movs	r3, #0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d007      	beq.n	8003ac2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ac0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a22      	ldr	r2, [pc, #136]	; (8003b50 <HAL_TIM_PWM_Start+0x174>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d022      	beq.n	8003b12 <HAL_TIM_PWM_Start+0x136>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ad4:	d01d      	beq.n	8003b12 <HAL_TIM_PWM_Start+0x136>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a1f      	ldr	r2, [pc, #124]	; (8003b58 <HAL_TIM_PWM_Start+0x17c>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d018      	beq.n	8003b12 <HAL_TIM_PWM_Start+0x136>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a1d      	ldr	r2, [pc, #116]	; (8003b5c <HAL_TIM_PWM_Start+0x180>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d013      	beq.n	8003b12 <HAL_TIM_PWM_Start+0x136>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a1c      	ldr	r2, [pc, #112]	; (8003b60 <HAL_TIM_PWM_Start+0x184>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d00e      	beq.n	8003b12 <HAL_TIM_PWM_Start+0x136>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a16      	ldr	r2, [pc, #88]	; (8003b54 <HAL_TIM_PWM_Start+0x178>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d009      	beq.n	8003b12 <HAL_TIM_PWM_Start+0x136>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a18      	ldr	r2, [pc, #96]	; (8003b64 <HAL_TIM_PWM_Start+0x188>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d004      	beq.n	8003b12 <HAL_TIM_PWM_Start+0x136>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a16      	ldr	r2, [pc, #88]	; (8003b68 <HAL_TIM_PWM_Start+0x18c>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d111      	bne.n	8003b36 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f003 0307 	and.w	r3, r3, #7
 8003b1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2b06      	cmp	r3, #6
 8003b22:	d010      	beq.n	8003b46 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f042 0201 	orr.w	r2, r2, #1
 8003b32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b34:	e007      	b.n	8003b46 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f042 0201 	orr.w	r2, r2, #1
 8003b44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	40010000 	.word	0x40010000
 8003b54:	40010400 	.word	0x40010400
 8003b58:	40000400 	.word	0x40000400
 8003b5c:	40000800 	.word	0x40000800
 8003b60:	40000c00 	.word	0x40000c00
 8003b64:	40014000 	.word	0x40014000
 8003b68:	40001800 	.word	0x40001800

08003b6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d122      	bne.n	8003bc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d11b      	bne.n	8003bc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f06f 0202 	mvn.w	r2, #2
 8003b98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	f003 0303 	and.w	r3, r3, #3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 fa77 	bl	80040a2 <HAL_TIM_IC_CaptureCallback>
 8003bb4:	e005      	b.n	8003bc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 fa69 	bl	800408e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 fa7a 	bl	80040b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	f003 0304 	and.w	r3, r3, #4
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	d122      	bne.n	8003c1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b04      	cmp	r3, #4
 8003be2:	d11b      	bne.n	8003c1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f06f 0204 	mvn.w	r2, #4
 8003bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 fa4d 	bl	80040a2 <HAL_TIM_IC_CaptureCallback>
 8003c08:	e005      	b.n	8003c16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 fa3f 	bl	800408e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 fa50 	bl	80040b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	f003 0308 	and.w	r3, r3, #8
 8003c26:	2b08      	cmp	r3, #8
 8003c28:	d122      	bne.n	8003c70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	f003 0308 	and.w	r3, r3, #8
 8003c34:	2b08      	cmp	r3, #8
 8003c36:	d11b      	bne.n	8003c70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f06f 0208 	mvn.w	r2, #8
 8003c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2204      	movs	r2, #4
 8003c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	69db      	ldr	r3, [r3, #28]
 8003c4e:	f003 0303 	and.w	r3, r3, #3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d003      	beq.n	8003c5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 fa23 	bl	80040a2 <HAL_TIM_IC_CaptureCallback>
 8003c5c:	e005      	b.n	8003c6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 fa15 	bl	800408e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 fa26 	bl	80040b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	f003 0310 	and.w	r3, r3, #16
 8003c7a:	2b10      	cmp	r3, #16
 8003c7c:	d122      	bne.n	8003cc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f003 0310 	and.w	r3, r3, #16
 8003c88:	2b10      	cmp	r3, #16
 8003c8a:	d11b      	bne.n	8003cc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f06f 0210 	mvn.w	r2, #16
 8003c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2208      	movs	r2, #8
 8003c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	69db      	ldr	r3, [r3, #28]
 8003ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 f9f9 	bl	80040a2 <HAL_TIM_IC_CaptureCallback>
 8003cb0:	e005      	b.n	8003cbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f9eb 	bl	800408e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 f9fc 	bl	80040b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d10e      	bne.n	8003cf0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d107      	bne.n	8003cf0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f06f 0201 	mvn.w	r2, #1
 8003ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7fd f904 	bl	8000ef8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cfa:	2b80      	cmp	r3, #128	; 0x80
 8003cfc:	d10e      	bne.n	8003d1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d08:	2b80      	cmp	r3, #128	; 0x80
 8003d0a:	d107      	bne.n	8003d1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 fdca 	bl	80048b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d26:	2b40      	cmp	r3, #64	; 0x40
 8003d28:	d10e      	bne.n	8003d48 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d34:	2b40      	cmp	r3, #64	; 0x40
 8003d36:	d107      	bne.n	8003d48 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 f9c1 	bl	80040ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	f003 0320 	and.w	r3, r3, #32
 8003d52:	2b20      	cmp	r3, #32
 8003d54:	d10e      	bne.n	8003d74 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	f003 0320 	and.w	r3, r3, #32
 8003d60:	2b20      	cmp	r3, #32
 8003d62:	d107      	bne.n	8003d74 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f06f 0220 	mvn.w	r2, #32
 8003d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 fd94 	bl	800489c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d74:	bf00      	nop
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d101      	bne.n	8003d9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d96:	2302      	movs	r3, #2
 8003d98:	e0ae      	b.n	8003ef8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2b0c      	cmp	r3, #12
 8003da6:	f200 809f 	bhi.w	8003ee8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003daa:	a201      	add	r2, pc, #4	; (adr r2, 8003db0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db0:	08003de5 	.word	0x08003de5
 8003db4:	08003ee9 	.word	0x08003ee9
 8003db8:	08003ee9 	.word	0x08003ee9
 8003dbc:	08003ee9 	.word	0x08003ee9
 8003dc0:	08003e25 	.word	0x08003e25
 8003dc4:	08003ee9 	.word	0x08003ee9
 8003dc8:	08003ee9 	.word	0x08003ee9
 8003dcc:	08003ee9 	.word	0x08003ee9
 8003dd0:	08003e67 	.word	0x08003e67
 8003dd4:	08003ee9 	.word	0x08003ee9
 8003dd8:	08003ee9 	.word	0x08003ee9
 8003ddc:	08003ee9 	.word	0x08003ee9
 8003de0:	08003ea7 	.word	0x08003ea7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68b9      	ldr	r1, [r7, #8]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 fa18 	bl	8004220 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	699a      	ldr	r2, [r3, #24]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f042 0208 	orr.w	r2, r2, #8
 8003dfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	699a      	ldr	r2, [r3, #24]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 0204 	bic.w	r2, r2, #4
 8003e0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6999      	ldr	r1, [r3, #24]
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	691a      	ldr	r2, [r3, #16]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	619a      	str	r2, [r3, #24]
      break;
 8003e22:	e064      	b.n	8003eee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68b9      	ldr	r1, [r7, #8]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f000 fa68 	bl	8004300 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	699a      	ldr	r2, [r3, #24]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	699a      	ldr	r2, [r3, #24]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6999      	ldr	r1, [r3, #24]
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	021a      	lsls	r2, r3, #8
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	430a      	orrs	r2, r1
 8003e62:	619a      	str	r2, [r3, #24]
      break;
 8003e64:	e043      	b.n	8003eee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68b9      	ldr	r1, [r7, #8]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f000 fabd 	bl	80043ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	69da      	ldr	r2, [r3, #28]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f042 0208 	orr.w	r2, r2, #8
 8003e80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	69da      	ldr	r2, [r3, #28]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 0204 	bic.w	r2, r2, #4
 8003e90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	69d9      	ldr	r1, [r3, #28]
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	691a      	ldr	r2, [r3, #16]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	61da      	str	r2, [r3, #28]
      break;
 8003ea4:	e023      	b.n	8003eee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68b9      	ldr	r1, [r7, #8]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f000 fb11 	bl	80044d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	69da      	ldr	r2, [r3, #28]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ec0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	69da      	ldr	r2, [r3, #28]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ed0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	69d9      	ldr	r1, [r3, #28]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	021a      	lsls	r2, r3, #8
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	61da      	str	r2, [r3, #28]
      break;
 8003ee6:	e002      	b.n	8003eee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	75fb      	strb	r3, [r7, #23]
      break;
 8003eec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3718      	adds	r7, #24
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d101      	bne.n	8003f1c <HAL_TIM_ConfigClockSource+0x1c>
 8003f18:	2302      	movs	r3, #2
 8003f1a:	e0b4      	b.n	8004086 <HAL_TIM_ConfigClockSource+0x186>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2202      	movs	r2, #2
 8003f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f54:	d03e      	beq.n	8003fd4 <HAL_TIM_ConfigClockSource+0xd4>
 8003f56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f5a:	f200 8087 	bhi.w	800406c <HAL_TIM_ConfigClockSource+0x16c>
 8003f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f62:	f000 8086 	beq.w	8004072 <HAL_TIM_ConfigClockSource+0x172>
 8003f66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f6a:	d87f      	bhi.n	800406c <HAL_TIM_ConfigClockSource+0x16c>
 8003f6c:	2b70      	cmp	r3, #112	; 0x70
 8003f6e:	d01a      	beq.n	8003fa6 <HAL_TIM_ConfigClockSource+0xa6>
 8003f70:	2b70      	cmp	r3, #112	; 0x70
 8003f72:	d87b      	bhi.n	800406c <HAL_TIM_ConfigClockSource+0x16c>
 8003f74:	2b60      	cmp	r3, #96	; 0x60
 8003f76:	d050      	beq.n	800401a <HAL_TIM_ConfigClockSource+0x11a>
 8003f78:	2b60      	cmp	r3, #96	; 0x60
 8003f7a:	d877      	bhi.n	800406c <HAL_TIM_ConfigClockSource+0x16c>
 8003f7c:	2b50      	cmp	r3, #80	; 0x50
 8003f7e:	d03c      	beq.n	8003ffa <HAL_TIM_ConfigClockSource+0xfa>
 8003f80:	2b50      	cmp	r3, #80	; 0x50
 8003f82:	d873      	bhi.n	800406c <HAL_TIM_ConfigClockSource+0x16c>
 8003f84:	2b40      	cmp	r3, #64	; 0x40
 8003f86:	d058      	beq.n	800403a <HAL_TIM_ConfigClockSource+0x13a>
 8003f88:	2b40      	cmp	r3, #64	; 0x40
 8003f8a:	d86f      	bhi.n	800406c <HAL_TIM_ConfigClockSource+0x16c>
 8003f8c:	2b30      	cmp	r3, #48	; 0x30
 8003f8e:	d064      	beq.n	800405a <HAL_TIM_ConfigClockSource+0x15a>
 8003f90:	2b30      	cmp	r3, #48	; 0x30
 8003f92:	d86b      	bhi.n	800406c <HAL_TIM_ConfigClockSource+0x16c>
 8003f94:	2b20      	cmp	r3, #32
 8003f96:	d060      	beq.n	800405a <HAL_TIM_ConfigClockSource+0x15a>
 8003f98:	2b20      	cmp	r3, #32
 8003f9a:	d867      	bhi.n	800406c <HAL_TIM_ConfigClockSource+0x16c>
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d05c      	beq.n	800405a <HAL_TIM_ConfigClockSource+0x15a>
 8003fa0:	2b10      	cmp	r3, #16
 8003fa2:	d05a      	beq.n	800405a <HAL_TIM_ConfigClockSource+0x15a>
 8003fa4:	e062      	b.n	800406c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6818      	ldr	r0, [r3, #0]
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	6899      	ldr	r1, [r3, #8]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	f000 fb5d 	bl	8004674 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003fc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	609a      	str	r2, [r3, #8]
      break;
 8003fd2:	e04f      	b.n	8004074 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6818      	ldr	r0, [r3, #0]
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	6899      	ldr	r1, [r3, #8]
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685a      	ldr	r2, [r3, #4]
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	f000 fb46 	bl	8004674 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689a      	ldr	r2, [r3, #8]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ff6:	609a      	str	r2, [r3, #8]
      break;
 8003ff8:	e03c      	b.n	8004074 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6818      	ldr	r0, [r3, #0]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	6859      	ldr	r1, [r3, #4]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	461a      	mov	r2, r3
 8004008:	f000 faba 	bl	8004580 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2150      	movs	r1, #80	; 0x50
 8004012:	4618      	mov	r0, r3
 8004014:	f000 fb13 	bl	800463e <TIM_ITRx_SetConfig>
      break;
 8004018:	e02c      	b.n	8004074 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6818      	ldr	r0, [r3, #0]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	6859      	ldr	r1, [r3, #4]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	461a      	mov	r2, r3
 8004028:	f000 fad9 	bl	80045de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2160      	movs	r1, #96	; 0x60
 8004032:	4618      	mov	r0, r3
 8004034:	f000 fb03 	bl	800463e <TIM_ITRx_SetConfig>
      break;
 8004038:	e01c      	b.n	8004074 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6818      	ldr	r0, [r3, #0]
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	6859      	ldr	r1, [r3, #4]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	461a      	mov	r2, r3
 8004048:	f000 fa9a 	bl	8004580 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2140      	movs	r1, #64	; 0x40
 8004052:	4618      	mov	r0, r3
 8004054:	f000 faf3 	bl	800463e <TIM_ITRx_SetConfig>
      break;
 8004058:	e00c      	b.n	8004074 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4619      	mov	r1, r3
 8004064:	4610      	mov	r0, r2
 8004066:	f000 faea 	bl	800463e <TIM_ITRx_SetConfig>
      break;
 800406a:	e003      	b.n	8004074 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	73fb      	strb	r3, [r7, #15]
      break;
 8004070:	e000      	b.n	8004074 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004072:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004084:	7bfb      	ldrb	r3, [r7, #15]
}
 8004086:	4618      	mov	r0, r3
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800408e:	b480      	push	{r7}
 8004090:	b083      	sub	sp, #12
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004096:	bf00      	nop
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b083      	sub	sp, #12
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040aa:	bf00      	nop
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b083      	sub	sp, #12
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040be:	bf00      	nop
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b083      	sub	sp, #12
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040d2:	bf00      	nop
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
	...

080040e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a40      	ldr	r2, [pc, #256]	; (80041f4 <TIM_Base_SetConfig+0x114>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d013      	beq.n	8004120 <TIM_Base_SetConfig+0x40>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040fe:	d00f      	beq.n	8004120 <TIM_Base_SetConfig+0x40>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a3d      	ldr	r2, [pc, #244]	; (80041f8 <TIM_Base_SetConfig+0x118>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d00b      	beq.n	8004120 <TIM_Base_SetConfig+0x40>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a3c      	ldr	r2, [pc, #240]	; (80041fc <TIM_Base_SetConfig+0x11c>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d007      	beq.n	8004120 <TIM_Base_SetConfig+0x40>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a3b      	ldr	r2, [pc, #236]	; (8004200 <TIM_Base_SetConfig+0x120>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d003      	beq.n	8004120 <TIM_Base_SetConfig+0x40>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a3a      	ldr	r2, [pc, #232]	; (8004204 <TIM_Base_SetConfig+0x124>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d108      	bne.n	8004132 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004126:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	4313      	orrs	r3, r2
 8004130:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a2f      	ldr	r2, [pc, #188]	; (80041f4 <TIM_Base_SetConfig+0x114>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d02b      	beq.n	8004192 <TIM_Base_SetConfig+0xb2>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004140:	d027      	beq.n	8004192 <TIM_Base_SetConfig+0xb2>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a2c      	ldr	r2, [pc, #176]	; (80041f8 <TIM_Base_SetConfig+0x118>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d023      	beq.n	8004192 <TIM_Base_SetConfig+0xb2>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a2b      	ldr	r2, [pc, #172]	; (80041fc <TIM_Base_SetConfig+0x11c>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d01f      	beq.n	8004192 <TIM_Base_SetConfig+0xb2>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a2a      	ldr	r2, [pc, #168]	; (8004200 <TIM_Base_SetConfig+0x120>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d01b      	beq.n	8004192 <TIM_Base_SetConfig+0xb2>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a29      	ldr	r2, [pc, #164]	; (8004204 <TIM_Base_SetConfig+0x124>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d017      	beq.n	8004192 <TIM_Base_SetConfig+0xb2>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a28      	ldr	r2, [pc, #160]	; (8004208 <TIM_Base_SetConfig+0x128>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d013      	beq.n	8004192 <TIM_Base_SetConfig+0xb2>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a27      	ldr	r2, [pc, #156]	; (800420c <TIM_Base_SetConfig+0x12c>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d00f      	beq.n	8004192 <TIM_Base_SetConfig+0xb2>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a26      	ldr	r2, [pc, #152]	; (8004210 <TIM_Base_SetConfig+0x130>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d00b      	beq.n	8004192 <TIM_Base_SetConfig+0xb2>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a25      	ldr	r2, [pc, #148]	; (8004214 <TIM_Base_SetConfig+0x134>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d007      	beq.n	8004192 <TIM_Base_SetConfig+0xb2>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a24      	ldr	r2, [pc, #144]	; (8004218 <TIM_Base_SetConfig+0x138>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d003      	beq.n	8004192 <TIM_Base_SetConfig+0xb2>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a23      	ldr	r2, [pc, #140]	; (800421c <TIM_Base_SetConfig+0x13c>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d108      	bne.n	80041a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004198:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	689a      	ldr	r2, [r3, #8]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a0a      	ldr	r2, [pc, #40]	; (80041f4 <TIM_Base_SetConfig+0x114>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d003      	beq.n	80041d8 <TIM_Base_SetConfig+0xf8>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a0c      	ldr	r2, [pc, #48]	; (8004204 <TIM_Base_SetConfig+0x124>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d103      	bne.n	80041e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	691a      	ldr	r2, [r3, #16]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	615a      	str	r2, [r3, #20]
}
 80041e6:	bf00      	nop
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	40010000 	.word	0x40010000
 80041f8:	40000400 	.word	0x40000400
 80041fc:	40000800 	.word	0x40000800
 8004200:	40000c00 	.word	0x40000c00
 8004204:	40010400 	.word	0x40010400
 8004208:	40014000 	.word	0x40014000
 800420c:	40014400 	.word	0x40014400
 8004210:	40014800 	.word	0x40014800
 8004214:	40001800 	.word	0x40001800
 8004218:	40001c00 	.word	0x40001c00
 800421c:	40002000 	.word	0x40002000

08004220 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004220:	b480      	push	{r7}
 8004222:	b087      	sub	sp, #28
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	f023 0201 	bic.w	r2, r3, #1
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800424e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f023 0303 	bic.w	r3, r3, #3
 8004256:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	4313      	orrs	r3, r2
 8004260:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	f023 0302 	bic.w	r3, r3, #2
 8004268:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	4313      	orrs	r3, r2
 8004272:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a20      	ldr	r2, [pc, #128]	; (80042f8 <TIM_OC1_SetConfig+0xd8>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d003      	beq.n	8004284 <TIM_OC1_SetConfig+0x64>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a1f      	ldr	r2, [pc, #124]	; (80042fc <TIM_OC1_SetConfig+0xdc>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d10c      	bne.n	800429e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	f023 0308 	bic.w	r3, r3, #8
 800428a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	4313      	orrs	r3, r2
 8004294:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	f023 0304 	bic.w	r3, r3, #4
 800429c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a15      	ldr	r2, [pc, #84]	; (80042f8 <TIM_OC1_SetConfig+0xd8>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d003      	beq.n	80042ae <TIM_OC1_SetConfig+0x8e>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a14      	ldr	r2, [pc, #80]	; (80042fc <TIM_OC1_SetConfig+0xdc>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d111      	bne.n	80042d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	621a      	str	r2, [r3, #32]
}
 80042ec:	bf00      	nop
 80042ee:	371c      	adds	r7, #28
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr
 80042f8:	40010000 	.word	0x40010000
 80042fc:	40010400 	.word	0x40010400

08004300 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004300:	b480      	push	{r7}
 8004302:	b087      	sub	sp, #28
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	f023 0210 	bic.w	r2, r3, #16
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800432e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004336:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	021b      	lsls	r3, r3, #8
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	4313      	orrs	r3, r2
 8004342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	f023 0320 	bic.w	r3, r3, #32
 800434a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	011b      	lsls	r3, r3, #4
 8004352:	697a      	ldr	r2, [r7, #20]
 8004354:	4313      	orrs	r3, r2
 8004356:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a22      	ldr	r2, [pc, #136]	; (80043e4 <TIM_OC2_SetConfig+0xe4>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d003      	beq.n	8004368 <TIM_OC2_SetConfig+0x68>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a21      	ldr	r2, [pc, #132]	; (80043e8 <TIM_OC2_SetConfig+0xe8>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d10d      	bne.n	8004384 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800436e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	011b      	lsls	r3, r3, #4
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	4313      	orrs	r3, r2
 800437a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004382:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a17      	ldr	r2, [pc, #92]	; (80043e4 <TIM_OC2_SetConfig+0xe4>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d003      	beq.n	8004394 <TIM_OC2_SetConfig+0x94>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a16      	ldr	r2, [pc, #88]	; (80043e8 <TIM_OC2_SetConfig+0xe8>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d113      	bne.n	80043bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800439a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	621a      	str	r2, [r3, #32]
}
 80043d6:	bf00      	nop
 80043d8:	371c      	adds	r7, #28
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	40010000 	.word	0x40010000
 80043e8:	40010400 	.word	0x40010400

080043ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b087      	sub	sp, #28
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	69db      	ldr	r3, [r3, #28]
 8004412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800441a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f023 0303 	bic.w	r3, r3, #3
 8004422:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	4313      	orrs	r3, r2
 800442c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004434:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	021b      	lsls	r3, r3, #8
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	4313      	orrs	r3, r2
 8004440:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a21      	ldr	r2, [pc, #132]	; (80044cc <TIM_OC3_SetConfig+0xe0>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d003      	beq.n	8004452 <TIM_OC3_SetConfig+0x66>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a20      	ldr	r2, [pc, #128]	; (80044d0 <TIM_OC3_SetConfig+0xe4>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d10d      	bne.n	800446e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004458:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	021b      	lsls	r3, r3, #8
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	4313      	orrs	r3, r2
 8004464:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800446c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a16      	ldr	r2, [pc, #88]	; (80044cc <TIM_OC3_SetConfig+0xe0>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d003      	beq.n	800447e <TIM_OC3_SetConfig+0x92>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a15      	ldr	r2, [pc, #84]	; (80044d0 <TIM_OC3_SetConfig+0xe4>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d113      	bne.n	80044a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004484:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800448c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	011b      	lsls	r3, r3, #4
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	4313      	orrs	r3, r2
 8004498:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	011b      	lsls	r3, r3, #4
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	697a      	ldr	r2, [r7, #20]
 80044be:	621a      	str	r2, [r3, #32]
}
 80044c0:	bf00      	nop
 80044c2:	371c      	adds	r7, #28
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr
 80044cc:	40010000 	.word	0x40010000
 80044d0:	40010400 	.word	0x40010400

080044d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b087      	sub	sp, #28
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a1b      	ldr	r3, [r3, #32]
 80044ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	69db      	ldr	r3, [r3, #28]
 80044fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800450a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	021b      	lsls	r3, r3, #8
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	4313      	orrs	r3, r2
 8004516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800451e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	031b      	lsls	r3, r3, #12
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	4313      	orrs	r3, r2
 800452a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a12      	ldr	r2, [pc, #72]	; (8004578 <TIM_OC4_SetConfig+0xa4>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d003      	beq.n	800453c <TIM_OC4_SetConfig+0x68>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a11      	ldr	r2, [pc, #68]	; (800457c <TIM_OC4_SetConfig+0xa8>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d109      	bne.n	8004550 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004542:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	019b      	lsls	r3, r3, #6
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	4313      	orrs	r3, r2
 800454e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	621a      	str	r2, [r3, #32]
}
 800456a:	bf00      	nop
 800456c:	371c      	adds	r7, #28
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	40010000 	.word	0x40010000
 800457c:	40010400 	.word	0x40010400

08004580 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004580:	b480      	push	{r7}
 8004582:	b087      	sub	sp, #28
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	f023 0201 	bic.w	r2, r3, #1
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	011b      	lsls	r3, r3, #4
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	f023 030a 	bic.w	r3, r3, #10
 80045bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	621a      	str	r2, [r3, #32]
}
 80045d2:	bf00      	nop
 80045d4:	371c      	adds	r7, #28
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045de:	b480      	push	{r7}
 80045e0:	b087      	sub	sp, #28
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	60f8      	str	r0, [r7, #12]
 80045e6:	60b9      	str	r1, [r7, #8]
 80045e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	f023 0210 	bic.w	r2, r3, #16
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004608:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	031b      	lsls	r3, r3, #12
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	4313      	orrs	r3, r2
 8004612:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800461a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	011b      	lsls	r3, r3, #4
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	4313      	orrs	r3, r2
 8004624:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	621a      	str	r2, [r3, #32]
}
 8004632:	bf00      	nop
 8004634:	371c      	adds	r7, #28
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr

0800463e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800463e:	b480      	push	{r7}
 8004640:	b085      	sub	sp, #20
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
 8004646:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004654:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004656:	683a      	ldr	r2, [r7, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	4313      	orrs	r3, r2
 800465c:	f043 0307 	orr.w	r3, r3, #7
 8004660:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	609a      	str	r2, [r3, #8]
}
 8004668:	bf00      	nop
 800466a:	3714      	adds	r7, #20
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004674:	b480      	push	{r7}
 8004676:	b087      	sub	sp, #28
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
 8004680:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800468e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	021a      	lsls	r2, r3, #8
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	431a      	orrs	r2, r3
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	4313      	orrs	r3, r2
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	4313      	orrs	r3, r2
 80046a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	609a      	str	r2, [r3, #8]
}
 80046a8:	bf00      	nop
 80046aa:	371c      	adds	r7, #28
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b087      	sub	sp, #28
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	f003 031f 	and.w	r3, r3, #31
 80046c6:	2201      	movs	r2, #1
 80046c8:	fa02 f303 	lsl.w	r3, r2, r3
 80046cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6a1a      	ldr	r2, [r3, #32]
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	43db      	mvns	r3, r3
 80046d6:	401a      	ands	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6a1a      	ldr	r2, [r3, #32]
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	f003 031f 	and.w	r3, r3, #31
 80046e6:	6879      	ldr	r1, [r7, #4]
 80046e8:	fa01 f303 	lsl.w	r3, r1, r3
 80046ec:	431a      	orrs	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	621a      	str	r2, [r3, #32]
}
 80046f2:	bf00      	nop
 80046f4:	371c      	adds	r7, #28
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
	...

08004700 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004710:	2b01      	cmp	r3, #1
 8004712:	d101      	bne.n	8004718 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004714:	2302      	movs	r3, #2
 8004716:	e05a      	b.n	80047ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2202      	movs	r2, #2
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800473e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	4313      	orrs	r3, r2
 8004748:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a21      	ldr	r2, [pc, #132]	; (80047dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d022      	beq.n	80047a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004764:	d01d      	beq.n	80047a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a1d      	ldr	r2, [pc, #116]	; (80047e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d018      	beq.n	80047a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a1b      	ldr	r2, [pc, #108]	; (80047e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d013      	beq.n	80047a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a1a      	ldr	r2, [pc, #104]	; (80047e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d00e      	beq.n	80047a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a18      	ldr	r2, [pc, #96]	; (80047ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d009      	beq.n	80047a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a17      	ldr	r2, [pc, #92]	; (80047f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d004      	beq.n	80047a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a15      	ldr	r2, [pc, #84]	; (80047f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d10c      	bne.n	80047bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3714      	adds	r7, #20
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	40010000 	.word	0x40010000
 80047e0:	40000400 	.word	0x40000400
 80047e4:	40000800 	.word	0x40000800
 80047e8:	40000c00 	.word	0x40000c00
 80047ec:	40010400 	.word	0x40010400
 80047f0:	40014000 	.word	0x40014000
 80047f4:	40001800 	.word	0x40001800

080047f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004802:	2300      	movs	r3, #0
 8004804:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800480c:	2b01      	cmp	r3, #1
 800480e:	d101      	bne.n	8004814 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004810:	2302      	movs	r3, #2
 8004812:	e03d      	b.n	8004890 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	4313      	orrs	r3, r2
 8004828:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	4313      	orrs	r3, r2
 8004836:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	4313      	orrs	r3, r2
 8004844:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4313      	orrs	r3, r2
 8004852:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	4313      	orrs	r3, r2
 8004860:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	695b      	ldr	r3, [r3, #20]
 800486c:	4313      	orrs	r3, r2
 800486e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	4313      	orrs	r3, r2
 800487c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3714      	adds	r7, #20
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e03f      	b.n	8004956 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d106      	bne.n	80048f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7fd f95c 	bl	8001ba8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2224      	movs	r2, #36	; 0x24
 80048f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68da      	ldr	r2, [r3, #12]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004906:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 f829 	bl	8004960 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	691a      	ldr	r2, [r3, #16]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800491c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	695a      	ldr	r2, [r3, #20]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800492c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68da      	ldr	r2, [r3, #12]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800493c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2220      	movs	r2, #32
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2220      	movs	r2, #32
 8004950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3708      	adds	r7, #8
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
	...

08004960 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004964:	b0c0      	sub	sp, #256	; 0x100
 8004966:	af00      	add	r7, sp, #0
 8004968:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800496c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800497c:	68d9      	ldr	r1, [r3, #12]
 800497e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	ea40 0301 	orr.w	r3, r0, r1
 8004988:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800498a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800498e:	689a      	ldr	r2, [r3, #8]
 8004990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	431a      	orrs	r2, r3
 8004998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	431a      	orrs	r2, r3
 80049a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80049ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80049b8:	f021 010c 	bic.w	r1, r1, #12
 80049bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80049c6:	430b      	orrs	r3, r1
 80049c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80049d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049da:	6999      	ldr	r1, [r3, #24]
 80049dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	ea40 0301 	orr.w	r3, r0, r1
 80049e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	4b8f      	ldr	r3, [pc, #572]	; (8004c2c <UART_SetConfig+0x2cc>)
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d005      	beq.n	8004a00 <UART_SetConfig+0xa0>
 80049f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	4b8d      	ldr	r3, [pc, #564]	; (8004c30 <UART_SetConfig+0x2d0>)
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d104      	bne.n	8004a0a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a00:	f7fe fe04 	bl	800360c <HAL_RCC_GetPCLK2Freq>
 8004a04:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004a08:	e003      	b.n	8004a12 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a0a:	f7fe fdeb 	bl	80035e4 <HAL_RCC_GetPCLK1Freq>
 8004a0e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a16:	69db      	ldr	r3, [r3, #28]
 8004a18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a1c:	f040 810c 	bne.w	8004c38 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a24:	2200      	movs	r2, #0
 8004a26:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a2a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004a2e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004a32:	4622      	mov	r2, r4
 8004a34:	462b      	mov	r3, r5
 8004a36:	1891      	adds	r1, r2, r2
 8004a38:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a3a:	415b      	adcs	r3, r3
 8004a3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a42:	4621      	mov	r1, r4
 8004a44:	eb12 0801 	adds.w	r8, r2, r1
 8004a48:	4629      	mov	r1, r5
 8004a4a:	eb43 0901 	adc.w	r9, r3, r1
 8004a4e:	f04f 0200 	mov.w	r2, #0
 8004a52:	f04f 0300 	mov.w	r3, #0
 8004a56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a62:	4690      	mov	r8, r2
 8004a64:	4699      	mov	r9, r3
 8004a66:	4623      	mov	r3, r4
 8004a68:	eb18 0303 	adds.w	r3, r8, r3
 8004a6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a70:	462b      	mov	r3, r5
 8004a72:	eb49 0303 	adc.w	r3, r9, r3
 8004a76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a86:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004a8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a8e:	460b      	mov	r3, r1
 8004a90:	18db      	adds	r3, r3, r3
 8004a92:	653b      	str	r3, [r7, #80]	; 0x50
 8004a94:	4613      	mov	r3, r2
 8004a96:	eb42 0303 	adc.w	r3, r2, r3
 8004a9a:	657b      	str	r3, [r7, #84]	; 0x54
 8004a9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004aa0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004aa4:	f7fb fb94 	bl	80001d0 <__aeabi_uldivmod>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	460b      	mov	r3, r1
 8004aac:	4b61      	ldr	r3, [pc, #388]	; (8004c34 <UART_SetConfig+0x2d4>)
 8004aae:	fba3 2302 	umull	r2, r3, r3, r2
 8004ab2:	095b      	lsrs	r3, r3, #5
 8004ab4:	011c      	lsls	r4, r3, #4
 8004ab6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004aba:	2200      	movs	r2, #0
 8004abc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ac0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004ac4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004ac8:	4642      	mov	r2, r8
 8004aca:	464b      	mov	r3, r9
 8004acc:	1891      	adds	r1, r2, r2
 8004ace:	64b9      	str	r1, [r7, #72]	; 0x48
 8004ad0:	415b      	adcs	r3, r3
 8004ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ad4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004ad8:	4641      	mov	r1, r8
 8004ada:	eb12 0a01 	adds.w	sl, r2, r1
 8004ade:	4649      	mov	r1, r9
 8004ae0:	eb43 0b01 	adc.w	fp, r3, r1
 8004ae4:	f04f 0200 	mov.w	r2, #0
 8004ae8:	f04f 0300 	mov.w	r3, #0
 8004aec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004af0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004af4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004af8:	4692      	mov	sl, r2
 8004afa:	469b      	mov	fp, r3
 8004afc:	4643      	mov	r3, r8
 8004afe:	eb1a 0303 	adds.w	r3, sl, r3
 8004b02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b06:	464b      	mov	r3, r9
 8004b08:	eb4b 0303 	adc.w	r3, fp, r3
 8004b0c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b1c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004b20:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004b24:	460b      	mov	r3, r1
 8004b26:	18db      	adds	r3, r3, r3
 8004b28:	643b      	str	r3, [r7, #64]	; 0x40
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	eb42 0303 	adc.w	r3, r2, r3
 8004b30:	647b      	str	r3, [r7, #68]	; 0x44
 8004b32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b36:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004b3a:	f7fb fb49 	bl	80001d0 <__aeabi_uldivmod>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	460b      	mov	r3, r1
 8004b42:	4611      	mov	r1, r2
 8004b44:	4b3b      	ldr	r3, [pc, #236]	; (8004c34 <UART_SetConfig+0x2d4>)
 8004b46:	fba3 2301 	umull	r2, r3, r3, r1
 8004b4a:	095b      	lsrs	r3, r3, #5
 8004b4c:	2264      	movs	r2, #100	; 0x64
 8004b4e:	fb02 f303 	mul.w	r3, r2, r3
 8004b52:	1acb      	subs	r3, r1, r3
 8004b54:	00db      	lsls	r3, r3, #3
 8004b56:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004b5a:	4b36      	ldr	r3, [pc, #216]	; (8004c34 <UART_SetConfig+0x2d4>)
 8004b5c:	fba3 2302 	umull	r2, r3, r3, r2
 8004b60:	095b      	lsrs	r3, r3, #5
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b68:	441c      	add	r4, r3
 8004b6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b74:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004b78:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004b7c:	4642      	mov	r2, r8
 8004b7e:	464b      	mov	r3, r9
 8004b80:	1891      	adds	r1, r2, r2
 8004b82:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b84:	415b      	adcs	r3, r3
 8004b86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b8c:	4641      	mov	r1, r8
 8004b8e:	1851      	adds	r1, r2, r1
 8004b90:	6339      	str	r1, [r7, #48]	; 0x30
 8004b92:	4649      	mov	r1, r9
 8004b94:	414b      	adcs	r3, r1
 8004b96:	637b      	str	r3, [r7, #52]	; 0x34
 8004b98:	f04f 0200 	mov.w	r2, #0
 8004b9c:	f04f 0300 	mov.w	r3, #0
 8004ba0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004ba4:	4659      	mov	r1, fp
 8004ba6:	00cb      	lsls	r3, r1, #3
 8004ba8:	4651      	mov	r1, sl
 8004baa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bae:	4651      	mov	r1, sl
 8004bb0:	00ca      	lsls	r2, r1, #3
 8004bb2:	4610      	mov	r0, r2
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	4642      	mov	r2, r8
 8004bba:	189b      	adds	r3, r3, r2
 8004bbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004bc0:	464b      	mov	r3, r9
 8004bc2:	460a      	mov	r2, r1
 8004bc4:	eb42 0303 	adc.w	r3, r2, r3
 8004bc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004bd8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004bdc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004be0:	460b      	mov	r3, r1
 8004be2:	18db      	adds	r3, r3, r3
 8004be4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004be6:	4613      	mov	r3, r2
 8004be8:	eb42 0303 	adc.w	r3, r2, r3
 8004bec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004bf2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004bf6:	f7fb faeb 	bl	80001d0 <__aeabi_uldivmod>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	4b0d      	ldr	r3, [pc, #52]	; (8004c34 <UART_SetConfig+0x2d4>)
 8004c00:	fba3 1302 	umull	r1, r3, r3, r2
 8004c04:	095b      	lsrs	r3, r3, #5
 8004c06:	2164      	movs	r1, #100	; 0x64
 8004c08:	fb01 f303 	mul.w	r3, r1, r3
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	3332      	adds	r3, #50	; 0x32
 8004c12:	4a08      	ldr	r2, [pc, #32]	; (8004c34 <UART_SetConfig+0x2d4>)
 8004c14:	fba2 2303 	umull	r2, r3, r2, r3
 8004c18:	095b      	lsrs	r3, r3, #5
 8004c1a:	f003 0207 	and.w	r2, r3, #7
 8004c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4422      	add	r2, r4
 8004c26:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c28:	e105      	b.n	8004e36 <UART_SetConfig+0x4d6>
 8004c2a:	bf00      	nop
 8004c2c:	40011000 	.word	0x40011000
 8004c30:	40011400 	.word	0x40011400
 8004c34:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c42:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004c46:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004c4a:	4642      	mov	r2, r8
 8004c4c:	464b      	mov	r3, r9
 8004c4e:	1891      	adds	r1, r2, r2
 8004c50:	6239      	str	r1, [r7, #32]
 8004c52:	415b      	adcs	r3, r3
 8004c54:	627b      	str	r3, [r7, #36]	; 0x24
 8004c56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c5a:	4641      	mov	r1, r8
 8004c5c:	1854      	adds	r4, r2, r1
 8004c5e:	4649      	mov	r1, r9
 8004c60:	eb43 0501 	adc.w	r5, r3, r1
 8004c64:	f04f 0200 	mov.w	r2, #0
 8004c68:	f04f 0300 	mov.w	r3, #0
 8004c6c:	00eb      	lsls	r3, r5, #3
 8004c6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c72:	00e2      	lsls	r2, r4, #3
 8004c74:	4614      	mov	r4, r2
 8004c76:	461d      	mov	r5, r3
 8004c78:	4643      	mov	r3, r8
 8004c7a:	18e3      	adds	r3, r4, r3
 8004c7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c80:	464b      	mov	r3, r9
 8004c82:	eb45 0303 	adc.w	r3, r5, r3
 8004c86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c96:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c9a:	f04f 0200 	mov.w	r2, #0
 8004c9e:	f04f 0300 	mov.w	r3, #0
 8004ca2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004ca6:	4629      	mov	r1, r5
 8004ca8:	008b      	lsls	r3, r1, #2
 8004caa:	4621      	mov	r1, r4
 8004cac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cb0:	4621      	mov	r1, r4
 8004cb2:	008a      	lsls	r2, r1, #2
 8004cb4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004cb8:	f7fb fa8a 	bl	80001d0 <__aeabi_uldivmod>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	4b60      	ldr	r3, [pc, #384]	; (8004e44 <UART_SetConfig+0x4e4>)
 8004cc2:	fba3 2302 	umull	r2, r3, r3, r2
 8004cc6:	095b      	lsrs	r3, r3, #5
 8004cc8:	011c      	lsls	r4, r3, #4
 8004cca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004cd4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004cd8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004cdc:	4642      	mov	r2, r8
 8004cde:	464b      	mov	r3, r9
 8004ce0:	1891      	adds	r1, r2, r2
 8004ce2:	61b9      	str	r1, [r7, #24]
 8004ce4:	415b      	adcs	r3, r3
 8004ce6:	61fb      	str	r3, [r7, #28]
 8004ce8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cec:	4641      	mov	r1, r8
 8004cee:	1851      	adds	r1, r2, r1
 8004cf0:	6139      	str	r1, [r7, #16]
 8004cf2:	4649      	mov	r1, r9
 8004cf4:	414b      	adcs	r3, r1
 8004cf6:	617b      	str	r3, [r7, #20]
 8004cf8:	f04f 0200 	mov.w	r2, #0
 8004cfc:	f04f 0300 	mov.w	r3, #0
 8004d00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d04:	4659      	mov	r1, fp
 8004d06:	00cb      	lsls	r3, r1, #3
 8004d08:	4651      	mov	r1, sl
 8004d0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d0e:	4651      	mov	r1, sl
 8004d10:	00ca      	lsls	r2, r1, #3
 8004d12:	4610      	mov	r0, r2
 8004d14:	4619      	mov	r1, r3
 8004d16:	4603      	mov	r3, r0
 8004d18:	4642      	mov	r2, r8
 8004d1a:	189b      	adds	r3, r3, r2
 8004d1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d20:	464b      	mov	r3, r9
 8004d22:	460a      	mov	r2, r1
 8004d24:	eb42 0303 	adc.w	r3, r2, r3
 8004d28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d36:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004d38:	f04f 0200 	mov.w	r2, #0
 8004d3c:	f04f 0300 	mov.w	r3, #0
 8004d40:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004d44:	4649      	mov	r1, r9
 8004d46:	008b      	lsls	r3, r1, #2
 8004d48:	4641      	mov	r1, r8
 8004d4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d4e:	4641      	mov	r1, r8
 8004d50:	008a      	lsls	r2, r1, #2
 8004d52:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004d56:	f7fb fa3b 	bl	80001d0 <__aeabi_uldivmod>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	4b39      	ldr	r3, [pc, #228]	; (8004e44 <UART_SetConfig+0x4e4>)
 8004d60:	fba3 1302 	umull	r1, r3, r3, r2
 8004d64:	095b      	lsrs	r3, r3, #5
 8004d66:	2164      	movs	r1, #100	; 0x64
 8004d68:	fb01 f303 	mul.w	r3, r1, r3
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	011b      	lsls	r3, r3, #4
 8004d70:	3332      	adds	r3, #50	; 0x32
 8004d72:	4a34      	ldr	r2, [pc, #208]	; (8004e44 <UART_SetConfig+0x4e4>)
 8004d74:	fba2 2303 	umull	r2, r3, r2, r3
 8004d78:	095b      	lsrs	r3, r3, #5
 8004d7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d7e:	441c      	add	r4, r3
 8004d80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d84:	2200      	movs	r2, #0
 8004d86:	673b      	str	r3, [r7, #112]	; 0x70
 8004d88:	677a      	str	r2, [r7, #116]	; 0x74
 8004d8a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004d8e:	4642      	mov	r2, r8
 8004d90:	464b      	mov	r3, r9
 8004d92:	1891      	adds	r1, r2, r2
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	415b      	adcs	r3, r3
 8004d98:	60fb      	str	r3, [r7, #12]
 8004d9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d9e:	4641      	mov	r1, r8
 8004da0:	1851      	adds	r1, r2, r1
 8004da2:	6039      	str	r1, [r7, #0]
 8004da4:	4649      	mov	r1, r9
 8004da6:	414b      	adcs	r3, r1
 8004da8:	607b      	str	r3, [r7, #4]
 8004daa:	f04f 0200 	mov.w	r2, #0
 8004dae:	f04f 0300 	mov.w	r3, #0
 8004db2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004db6:	4659      	mov	r1, fp
 8004db8:	00cb      	lsls	r3, r1, #3
 8004dba:	4651      	mov	r1, sl
 8004dbc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dc0:	4651      	mov	r1, sl
 8004dc2:	00ca      	lsls	r2, r1, #3
 8004dc4:	4610      	mov	r0, r2
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	4603      	mov	r3, r0
 8004dca:	4642      	mov	r2, r8
 8004dcc:	189b      	adds	r3, r3, r2
 8004dce:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dd0:	464b      	mov	r3, r9
 8004dd2:	460a      	mov	r2, r1
 8004dd4:	eb42 0303 	adc.w	r3, r2, r3
 8004dd8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	663b      	str	r3, [r7, #96]	; 0x60
 8004de4:	667a      	str	r2, [r7, #100]	; 0x64
 8004de6:	f04f 0200 	mov.w	r2, #0
 8004dea:	f04f 0300 	mov.w	r3, #0
 8004dee:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004df2:	4649      	mov	r1, r9
 8004df4:	008b      	lsls	r3, r1, #2
 8004df6:	4641      	mov	r1, r8
 8004df8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dfc:	4641      	mov	r1, r8
 8004dfe:	008a      	lsls	r2, r1, #2
 8004e00:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004e04:	f7fb f9e4 	bl	80001d0 <__aeabi_uldivmod>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	4b0d      	ldr	r3, [pc, #52]	; (8004e44 <UART_SetConfig+0x4e4>)
 8004e0e:	fba3 1302 	umull	r1, r3, r3, r2
 8004e12:	095b      	lsrs	r3, r3, #5
 8004e14:	2164      	movs	r1, #100	; 0x64
 8004e16:	fb01 f303 	mul.w	r3, r1, r3
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	011b      	lsls	r3, r3, #4
 8004e1e:	3332      	adds	r3, #50	; 0x32
 8004e20:	4a08      	ldr	r2, [pc, #32]	; (8004e44 <UART_SetConfig+0x4e4>)
 8004e22:	fba2 2303 	umull	r2, r3, r2, r3
 8004e26:	095b      	lsrs	r3, r3, #5
 8004e28:	f003 020f 	and.w	r2, r3, #15
 8004e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4422      	add	r2, r4
 8004e34:	609a      	str	r2, [r3, #8]
}
 8004e36:	bf00      	nop
 8004e38:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e42:	bf00      	nop
 8004e44:	51eb851f 	.word	0x51eb851f

08004e48 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	4603      	mov	r3, r0
 8004e50:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004e52:	2300      	movs	r3, #0
 8004e54:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e5a:	2b84      	cmp	r3, #132	; 0x84
 8004e5c:	d005      	beq.n	8004e6a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004e5e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	4413      	add	r3, r2
 8004e66:	3303      	adds	r3, #3
 8004e68:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3714      	adds	r7, #20
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004e7c:	f000 fe66 	bl	8005b4c <vTaskStartScheduler>
  
  return osOK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004e86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e88:	b089      	sub	sp, #36	; 0x24
 8004e8a:	af04      	add	r7, sp, #16
 8004e8c:	6078      	str	r0, [r7, #4]
 8004e8e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	695b      	ldr	r3, [r3, #20]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d020      	beq.n	8004eda <osThreadCreate+0x54>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d01c      	beq.n	8004eda <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685c      	ldr	r4, [r3, #4]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681d      	ldr	r5, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	691e      	ldr	r6, [r3, #16]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7ff ffc8 	bl	8004e48 <makeFreeRtosPriority>
 8004eb8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ec2:	9202      	str	r2, [sp, #8]
 8004ec4:	9301      	str	r3, [sp, #4]
 8004ec6:	9100      	str	r1, [sp, #0]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	4632      	mov	r2, r6
 8004ecc:	4629      	mov	r1, r5
 8004ece:	4620      	mov	r0, r4
 8004ed0:	f000 fc5e 	bl	8005790 <xTaskCreateStatic>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	60fb      	str	r3, [r7, #12]
 8004ed8:	e01c      	b.n	8004f14 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685c      	ldr	r4, [r3, #4]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ee6:	b29e      	uxth	r6, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f7ff ffaa 	bl	8004e48 <makeFreeRtosPriority>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	f107 030c 	add.w	r3, r7, #12
 8004efa:	9301      	str	r3, [sp, #4]
 8004efc:	9200      	str	r2, [sp, #0]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	4632      	mov	r2, r6
 8004f02:	4629      	mov	r1, r5
 8004f04:	4620      	mov	r0, r4
 8004f06:	f000 fca0 	bl	800584a <xTaskCreate>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d001      	beq.n	8004f14 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004f10:	2300      	movs	r3, #0
 8004f12:	e000      	b.n	8004f16 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004f14:	68fb      	ldr	r3, [r7, #12]
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3714      	adds	r7, #20
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f1e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b084      	sub	sp, #16
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d001      	beq.n	8004f34 <osDelay+0x16>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	e000      	b.n	8004f36 <osDelay+0x18>
 8004f34:	2301      	movs	r3, #1
 8004f36:	4618      	mov	r0, r3
 8004f38:	f000 fdd4 	bl	8005ae4 <vTaskDelay>
  
  return osOK;
 8004f3c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b082      	sub	sp, #8
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d007      	beq.n	8004f66 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	2001      	movs	r0, #1
 8004f5e:	f000 fa2a 	bl	80053b6 <xQueueCreateMutexStatic>
 8004f62:	4603      	mov	r3, r0
 8004f64:	e003      	b.n	8004f6e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8004f66:	2001      	movs	r0, #1
 8004f68:	f000 fa0d 	bl	8005386 <xQueueCreateMutex>
 8004f6c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3708      	adds	r7, #8
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f76:	b480      	push	{r7}
 8004f78:	b083      	sub	sp, #12
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f103 0208 	add.w	r2, r3, #8
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f8e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f103 0208 	add.w	r2, r3, #8
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f103 0208 	add.w	r2, r3, #8
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004faa:	bf00      	nop
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b083      	sub	sp, #12
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	689a      	ldr	r2, [r3, #8]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	683a      	ldr	r2, [r7, #0]
 8004ff4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	1c5a      	adds	r2, r3, #1
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	601a      	str	r2, [r3, #0]
}
 800500c:	bf00      	nop
 800500e:	3714      	adds	r7, #20
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800502e:	d103      	bne.n	8005038 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	60fb      	str	r3, [r7, #12]
 8005036:	e00c      	b.n	8005052 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	3308      	adds	r3, #8
 800503c:	60fb      	str	r3, [r7, #12]
 800503e:	e002      	b.n	8005046 <vListInsert+0x2e>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	60fb      	str	r3, [r7, #12]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68ba      	ldr	r2, [r7, #8]
 800504e:	429a      	cmp	r2, r3
 8005050:	d2f6      	bcs.n	8005040 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	685a      	ldr	r2, [r3, #4]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	683a      	ldr	r2, [r7, #0]
 8005060:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	1c5a      	adds	r2, r3, #1
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	601a      	str	r2, [r3, #0]
}
 800507e:	bf00      	nop
 8005080:	3714      	adds	r7, #20
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr

0800508a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800508a:	b480      	push	{r7}
 800508c:	b085      	sub	sp, #20
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	6892      	ldr	r2, [r2, #8]
 80050a0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	6852      	ldr	r2, [r2, #4]
 80050aa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d103      	bne.n	80050be <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	689a      	ldr	r2, [r3, #8]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	1e5a      	subs	r2, r3, #1
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3714      	adds	r7, #20
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
	...

080050e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d10a      	bne.n	800510a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80050f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f8:	f383 8811 	msr	BASEPRI, r3
 80050fc:	f3bf 8f6f 	isb	sy
 8005100:	f3bf 8f4f 	dsb	sy
 8005104:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005106:	bf00      	nop
 8005108:	e7fe      	b.n	8005108 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800510a:	f001 fb6b 	bl	80067e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005116:	68f9      	ldr	r1, [r7, #12]
 8005118:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800511a:	fb01 f303 	mul.w	r3, r1, r3
 800511e:	441a      	add	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800513a:	3b01      	subs	r3, #1
 800513c:	68f9      	ldr	r1, [r7, #12]
 800513e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005140:	fb01 f303 	mul.w	r3, r1, r3
 8005144:	441a      	add	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	22ff      	movs	r2, #255	; 0xff
 800514e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	22ff      	movs	r2, #255	; 0xff
 8005156:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d114      	bne.n	800518a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d01a      	beq.n	800519e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	3310      	adds	r3, #16
 800516c:	4618      	mov	r0, r3
 800516e:	f000 ff3f 	bl	8005ff0 <xTaskRemoveFromEventList>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d012      	beq.n	800519e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005178:	4b0c      	ldr	r3, [pc, #48]	; (80051ac <xQueueGenericReset+0xcc>)
 800517a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800517e:	601a      	str	r2, [r3, #0]
 8005180:	f3bf 8f4f 	dsb	sy
 8005184:	f3bf 8f6f 	isb	sy
 8005188:	e009      	b.n	800519e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	3310      	adds	r3, #16
 800518e:	4618      	mov	r0, r3
 8005190:	f7ff fef1 	bl	8004f76 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	3324      	adds	r3, #36	; 0x24
 8005198:	4618      	mov	r0, r3
 800519a:	f7ff feec 	bl	8004f76 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800519e:	f001 fb51 	bl	8006844 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80051a2:	2301      	movs	r3, #1
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3710      	adds	r7, #16
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	e000ed04 	.word	0xe000ed04

080051b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b08e      	sub	sp, #56	; 0x38
 80051b4:	af02      	add	r7, sp, #8
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]
 80051bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10a      	bne.n	80051da <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80051c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c8:	f383 8811 	msr	BASEPRI, r3
 80051cc:	f3bf 8f6f 	isb	sy
 80051d0:	f3bf 8f4f 	dsb	sy
 80051d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80051d6:	bf00      	nop
 80051d8:	e7fe      	b.n	80051d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d10a      	bne.n	80051f6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80051e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e4:	f383 8811 	msr	BASEPRI, r3
 80051e8:	f3bf 8f6f 	isb	sy
 80051ec:	f3bf 8f4f 	dsb	sy
 80051f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80051f2:	bf00      	nop
 80051f4:	e7fe      	b.n	80051f4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d002      	beq.n	8005202 <xQueueGenericCreateStatic+0x52>
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d001      	beq.n	8005206 <xQueueGenericCreateStatic+0x56>
 8005202:	2301      	movs	r3, #1
 8005204:	e000      	b.n	8005208 <xQueueGenericCreateStatic+0x58>
 8005206:	2300      	movs	r3, #0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d10a      	bne.n	8005222 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800520c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005210:	f383 8811 	msr	BASEPRI, r3
 8005214:	f3bf 8f6f 	isb	sy
 8005218:	f3bf 8f4f 	dsb	sy
 800521c:	623b      	str	r3, [r7, #32]
}
 800521e:	bf00      	nop
 8005220:	e7fe      	b.n	8005220 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d102      	bne.n	800522e <xQueueGenericCreateStatic+0x7e>
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d101      	bne.n	8005232 <xQueueGenericCreateStatic+0x82>
 800522e:	2301      	movs	r3, #1
 8005230:	e000      	b.n	8005234 <xQueueGenericCreateStatic+0x84>
 8005232:	2300      	movs	r3, #0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d10a      	bne.n	800524e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523c:	f383 8811 	msr	BASEPRI, r3
 8005240:	f3bf 8f6f 	isb	sy
 8005244:	f3bf 8f4f 	dsb	sy
 8005248:	61fb      	str	r3, [r7, #28]
}
 800524a:	bf00      	nop
 800524c:	e7fe      	b.n	800524c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800524e:	2348      	movs	r3, #72	; 0x48
 8005250:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	2b48      	cmp	r3, #72	; 0x48
 8005256:	d00a      	beq.n	800526e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525c:	f383 8811 	msr	BASEPRI, r3
 8005260:	f3bf 8f6f 	isb	sy
 8005264:	f3bf 8f4f 	dsb	sy
 8005268:	61bb      	str	r3, [r7, #24]
}
 800526a:	bf00      	nop
 800526c:	e7fe      	b.n	800526c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800526e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00d      	beq.n	8005296 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800527a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800527c:	2201      	movs	r2, #1
 800527e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005282:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005288:	9300      	str	r3, [sp, #0]
 800528a:	4613      	mov	r3, r2
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	68b9      	ldr	r1, [r7, #8]
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f000 f83f 	bl	8005314 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005298:	4618      	mov	r0, r3
 800529a:	3730      	adds	r7, #48	; 0x30
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b08a      	sub	sp, #40	; 0x28
 80052a4:	af02      	add	r7, sp, #8
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	4613      	mov	r3, r2
 80052ac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d10a      	bne.n	80052ca <xQueueGenericCreate+0x2a>
	__asm volatile
 80052b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b8:	f383 8811 	msr	BASEPRI, r3
 80052bc:	f3bf 8f6f 	isb	sy
 80052c0:	f3bf 8f4f 	dsb	sy
 80052c4:	613b      	str	r3, [r7, #16]
}
 80052c6:	bf00      	nop
 80052c8:	e7fe      	b.n	80052c8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	68ba      	ldr	r2, [r7, #8]
 80052ce:	fb02 f303 	mul.w	r3, r2, r3
 80052d2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	3348      	adds	r3, #72	; 0x48
 80052d8:	4618      	mov	r0, r3
 80052da:	f001 fb65 	bl	80069a8 <pvPortMalloc>
 80052de:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d011      	beq.n	800530a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	3348      	adds	r3, #72	; 0x48
 80052ee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80052f8:	79fa      	ldrb	r2, [r7, #7]
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	4613      	mov	r3, r2
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	68b9      	ldr	r1, [r7, #8]
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f000 f805 	bl	8005314 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800530a:	69bb      	ldr	r3, [r7, #24]
	}
 800530c:	4618      	mov	r0, r3
 800530e:	3720      	adds	r7, #32
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
 8005320:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d103      	bne.n	8005330 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	e002      	b.n	8005336 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005342:	2101      	movs	r1, #1
 8005344:	69b8      	ldr	r0, [r7, #24]
 8005346:	f7ff fecb 	bl	80050e0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800534a:	bf00      	nop
 800534c:	3710      	adds	r7, #16
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005352:	b580      	push	{r7, lr}
 8005354:	b082      	sub	sp, #8
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00e      	beq.n	800537e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005372:	2300      	movs	r3, #0
 8005374:	2200      	movs	r2, #0
 8005376:	2100      	movs	r1, #0
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 f837 	bl	80053ec <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800537e:	bf00      	nop
 8005380:	3708      	adds	r7, #8
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005386:	b580      	push	{r7, lr}
 8005388:	b086      	sub	sp, #24
 800538a:	af00      	add	r7, sp, #0
 800538c:	4603      	mov	r3, r0
 800538e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005390:	2301      	movs	r3, #1
 8005392:	617b      	str	r3, [r7, #20]
 8005394:	2300      	movs	r3, #0
 8005396:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005398:	79fb      	ldrb	r3, [r7, #7]
 800539a:	461a      	mov	r2, r3
 800539c:	6939      	ldr	r1, [r7, #16]
 800539e:	6978      	ldr	r0, [r7, #20]
 80053a0:	f7ff ff7e 	bl	80052a0 <xQueueGenericCreate>
 80053a4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f7ff ffd3 	bl	8005352 <prvInitialiseMutex>

		return xNewQueue;
 80053ac:	68fb      	ldr	r3, [r7, #12]
	}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3718      	adds	r7, #24
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b088      	sub	sp, #32
 80053ba:	af02      	add	r7, sp, #8
 80053bc:	4603      	mov	r3, r0
 80053be:	6039      	str	r1, [r7, #0]
 80053c0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80053c2:	2301      	movs	r3, #1
 80053c4:	617b      	str	r3, [r7, #20]
 80053c6:	2300      	movs	r3, #0
 80053c8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80053ca:	79fb      	ldrb	r3, [r7, #7]
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	2200      	movs	r2, #0
 80053d2:	6939      	ldr	r1, [r7, #16]
 80053d4:	6978      	ldr	r0, [r7, #20]
 80053d6:	f7ff feeb 	bl	80051b0 <xQueueGenericCreateStatic>
 80053da:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	f7ff ffb8 	bl	8005352 <prvInitialiseMutex>

		return xNewQueue;
 80053e2:	68fb      	ldr	r3, [r7, #12]
	}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3718      	adds	r7, #24
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b08e      	sub	sp, #56	; 0x38
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
 80053f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80053fa:	2300      	movs	r3, #0
 80053fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10a      	bne.n	800541e <xQueueGenericSend+0x32>
	__asm volatile
 8005408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540c:	f383 8811 	msr	BASEPRI, r3
 8005410:	f3bf 8f6f 	isb	sy
 8005414:	f3bf 8f4f 	dsb	sy
 8005418:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800541a:	bf00      	nop
 800541c:	e7fe      	b.n	800541c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d103      	bne.n	800542c <xQueueGenericSend+0x40>
 8005424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005428:	2b00      	cmp	r3, #0
 800542a:	d101      	bne.n	8005430 <xQueueGenericSend+0x44>
 800542c:	2301      	movs	r3, #1
 800542e:	e000      	b.n	8005432 <xQueueGenericSend+0x46>
 8005430:	2300      	movs	r3, #0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d10a      	bne.n	800544c <xQueueGenericSend+0x60>
	__asm volatile
 8005436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800543a:	f383 8811 	msr	BASEPRI, r3
 800543e:	f3bf 8f6f 	isb	sy
 8005442:	f3bf 8f4f 	dsb	sy
 8005446:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005448:	bf00      	nop
 800544a:	e7fe      	b.n	800544a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	2b02      	cmp	r3, #2
 8005450:	d103      	bne.n	800545a <xQueueGenericSend+0x6e>
 8005452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005456:	2b01      	cmp	r3, #1
 8005458:	d101      	bne.n	800545e <xQueueGenericSend+0x72>
 800545a:	2301      	movs	r3, #1
 800545c:	e000      	b.n	8005460 <xQueueGenericSend+0x74>
 800545e:	2300      	movs	r3, #0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d10a      	bne.n	800547a <xQueueGenericSend+0x8e>
	__asm volatile
 8005464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005468:	f383 8811 	msr	BASEPRI, r3
 800546c:	f3bf 8f6f 	isb	sy
 8005470:	f3bf 8f4f 	dsb	sy
 8005474:	623b      	str	r3, [r7, #32]
}
 8005476:	bf00      	nop
 8005478:	e7fe      	b.n	8005478 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800547a:	f000 ff79 	bl	8006370 <xTaskGetSchedulerState>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d102      	bne.n	800548a <xQueueGenericSend+0x9e>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d101      	bne.n	800548e <xQueueGenericSend+0xa2>
 800548a:	2301      	movs	r3, #1
 800548c:	e000      	b.n	8005490 <xQueueGenericSend+0xa4>
 800548e:	2300      	movs	r3, #0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d10a      	bne.n	80054aa <xQueueGenericSend+0xbe>
	__asm volatile
 8005494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005498:	f383 8811 	msr	BASEPRI, r3
 800549c:	f3bf 8f6f 	isb	sy
 80054a0:	f3bf 8f4f 	dsb	sy
 80054a4:	61fb      	str	r3, [r7, #28]
}
 80054a6:	bf00      	nop
 80054a8:	e7fe      	b.n	80054a8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80054aa:	f001 f99b 	bl	80067e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80054ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d302      	bcc.n	80054c0 <xQueueGenericSend+0xd4>
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d129      	bne.n	8005514 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80054c0:	683a      	ldr	r2, [r7, #0]
 80054c2:	68b9      	ldr	r1, [r7, #8]
 80054c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054c6:	f000 f88f 	bl	80055e8 <prvCopyDataToQueue>
 80054ca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d010      	beq.n	80054f6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d6:	3324      	adds	r3, #36	; 0x24
 80054d8:	4618      	mov	r0, r3
 80054da:	f000 fd89 	bl	8005ff0 <xTaskRemoveFromEventList>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d013      	beq.n	800550c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80054e4:	4b3f      	ldr	r3, [pc, #252]	; (80055e4 <xQueueGenericSend+0x1f8>)
 80054e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054ea:	601a      	str	r2, [r3, #0]
 80054ec:	f3bf 8f4f 	dsb	sy
 80054f0:	f3bf 8f6f 	isb	sy
 80054f4:	e00a      	b.n	800550c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80054f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d007      	beq.n	800550c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80054fc:	4b39      	ldr	r3, [pc, #228]	; (80055e4 <xQueueGenericSend+0x1f8>)
 80054fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005502:	601a      	str	r2, [r3, #0]
 8005504:	f3bf 8f4f 	dsb	sy
 8005508:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800550c:	f001 f99a 	bl	8006844 <vPortExitCritical>
				return pdPASS;
 8005510:	2301      	movs	r3, #1
 8005512:	e063      	b.n	80055dc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d103      	bne.n	8005522 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800551a:	f001 f993 	bl	8006844 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800551e:	2300      	movs	r3, #0
 8005520:	e05c      	b.n	80055dc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005524:	2b00      	cmp	r3, #0
 8005526:	d106      	bne.n	8005536 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005528:	f107 0314 	add.w	r3, r7, #20
 800552c:	4618      	mov	r0, r3
 800552e:	f000 fdc1 	bl	80060b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005532:	2301      	movs	r3, #1
 8005534:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005536:	f001 f985 	bl	8006844 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800553a:	f000 fb71 	bl	8005c20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800553e:	f001 f951 	bl	80067e4 <vPortEnterCritical>
 8005542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005544:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005548:	b25b      	sxtb	r3, r3
 800554a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800554e:	d103      	bne.n	8005558 <xQueueGenericSend+0x16c>
 8005550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005552:	2200      	movs	r2, #0
 8005554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800555e:	b25b      	sxtb	r3, r3
 8005560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005564:	d103      	bne.n	800556e <xQueueGenericSend+0x182>
 8005566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005568:	2200      	movs	r2, #0
 800556a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800556e:	f001 f969 	bl	8006844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005572:	1d3a      	adds	r2, r7, #4
 8005574:	f107 0314 	add.w	r3, r7, #20
 8005578:	4611      	mov	r1, r2
 800557a:	4618      	mov	r0, r3
 800557c:	f000 fdb0 	bl	80060e0 <xTaskCheckForTimeOut>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d124      	bne.n	80055d0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005586:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005588:	f000 f8ea 	bl	8005760 <prvIsQueueFull>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d018      	beq.n	80055c4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005594:	3310      	adds	r3, #16
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	4611      	mov	r1, r2
 800559a:	4618      	mov	r0, r3
 800559c:	f000 fd04 	bl	8005fa8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80055a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055a2:	f000 f88b 	bl	80056bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80055a6:	f000 fb49 	bl	8005c3c <xTaskResumeAll>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f47f af7c 	bne.w	80054aa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80055b2:	4b0c      	ldr	r3, [pc, #48]	; (80055e4 <xQueueGenericSend+0x1f8>)
 80055b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055b8:	601a      	str	r2, [r3, #0]
 80055ba:	f3bf 8f4f 	dsb	sy
 80055be:	f3bf 8f6f 	isb	sy
 80055c2:	e772      	b.n	80054aa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80055c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055c6:	f000 f879 	bl	80056bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80055ca:	f000 fb37 	bl	8005c3c <xTaskResumeAll>
 80055ce:	e76c      	b.n	80054aa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80055d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055d2:	f000 f873 	bl	80056bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80055d6:	f000 fb31 	bl	8005c3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80055da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3738      	adds	r7, #56	; 0x38
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	e000ed04 	.word	0xe000ed04

080055e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b086      	sub	sp, #24
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80055f4:	2300      	movs	r3, #0
 80055f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005602:	2b00      	cmp	r3, #0
 8005604:	d10d      	bne.n	8005622 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d14d      	bne.n	80056aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	4618      	mov	r0, r3
 8005614:	f000 feca 	bl	80063ac <xTaskPriorityDisinherit>
 8005618:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	609a      	str	r2, [r3, #8]
 8005620:	e043      	b.n	80056aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d119      	bne.n	800565c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6858      	ldr	r0, [r3, #4]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005630:	461a      	mov	r2, r3
 8005632:	68b9      	ldr	r1, [r7, #8]
 8005634:	f001 fbc8 	bl	8006dc8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	685a      	ldr	r2, [r3, #4]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005640:	441a      	add	r2, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	685a      	ldr	r2, [r3, #4]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	429a      	cmp	r2, r3
 8005650:	d32b      	bcc.n	80056aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	605a      	str	r2, [r3, #4]
 800565a:	e026      	b.n	80056aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	68d8      	ldr	r0, [r3, #12]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005664:	461a      	mov	r2, r3
 8005666:	68b9      	ldr	r1, [r7, #8]
 8005668:	f001 fbae 	bl	8006dc8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	68da      	ldr	r2, [r3, #12]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005674:	425b      	negs	r3, r3
 8005676:	441a      	add	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	68da      	ldr	r2, [r3, #12]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	429a      	cmp	r2, r3
 8005686:	d207      	bcs.n	8005698 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	689a      	ldr	r2, [r3, #8]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005690:	425b      	negs	r3, r3
 8005692:	441a      	add	r2, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b02      	cmp	r3, #2
 800569c:	d105      	bne.n	80056aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d002      	beq.n	80056aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	3b01      	subs	r3, #1
 80056a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	1c5a      	adds	r2, r3, #1
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80056b2:	697b      	ldr	r3, [r7, #20]
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3718      	adds	r7, #24
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80056c4:	f001 f88e 	bl	80067e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056d0:	e011      	b.n	80056f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d012      	beq.n	8005700 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	3324      	adds	r3, #36	; 0x24
 80056de:	4618      	mov	r0, r3
 80056e0:	f000 fc86 	bl	8005ff0 <xTaskRemoveFromEventList>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d001      	beq.n	80056ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80056ea:	f000 fd5b 	bl	80061a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80056ee:	7bfb      	ldrb	r3, [r7, #15]
 80056f0:	3b01      	subs	r3, #1
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	dce9      	bgt.n	80056d2 <prvUnlockQueue+0x16>
 80056fe:	e000      	b.n	8005702 <prvUnlockQueue+0x46>
					break;
 8005700:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	22ff      	movs	r2, #255	; 0xff
 8005706:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800570a:	f001 f89b 	bl	8006844 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800570e:	f001 f869 	bl	80067e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005718:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800571a:	e011      	b.n	8005740 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d012      	beq.n	800574a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	3310      	adds	r3, #16
 8005728:	4618      	mov	r0, r3
 800572a:	f000 fc61 	bl	8005ff0 <xTaskRemoveFromEventList>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d001      	beq.n	8005738 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005734:	f000 fd36 	bl	80061a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005738:	7bbb      	ldrb	r3, [r7, #14]
 800573a:	3b01      	subs	r3, #1
 800573c:	b2db      	uxtb	r3, r3
 800573e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005740:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005744:	2b00      	cmp	r3, #0
 8005746:	dce9      	bgt.n	800571c <prvUnlockQueue+0x60>
 8005748:	e000      	b.n	800574c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800574a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	22ff      	movs	r2, #255	; 0xff
 8005750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005754:	f001 f876 	bl	8006844 <vPortExitCritical>
}
 8005758:	bf00      	nop
 800575a:	3710      	adds	r7, #16
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005768:	f001 f83c 	bl	80067e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005774:	429a      	cmp	r2, r3
 8005776:	d102      	bne.n	800577e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005778:	2301      	movs	r3, #1
 800577a:	60fb      	str	r3, [r7, #12]
 800577c:	e001      	b.n	8005782 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800577e:	2300      	movs	r3, #0
 8005780:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005782:	f001 f85f 	bl	8006844 <vPortExitCritical>

	return xReturn;
 8005786:	68fb      	ldr	r3, [r7, #12]
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005790:	b580      	push	{r7, lr}
 8005792:	b08e      	sub	sp, #56	; 0x38
 8005794:	af04      	add	r7, sp, #16
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]
 800579c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800579e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d10a      	bne.n	80057ba <xTaskCreateStatic+0x2a>
	__asm volatile
 80057a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a8:	f383 8811 	msr	BASEPRI, r3
 80057ac:	f3bf 8f6f 	isb	sy
 80057b0:	f3bf 8f4f 	dsb	sy
 80057b4:	623b      	str	r3, [r7, #32]
}
 80057b6:	bf00      	nop
 80057b8:	e7fe      	b.n	80057b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80057ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10a      	bne.n	80057d6 <xTaskCreateStatic+0x46>
	__asm volatile
 80057c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c4:	f383 8811 	msr	BASEPRI, r3
 80057c8:	f3bf 8f6f 	isb	sy
 80057cc:	f3bf 8f4f 	dsb	sy
 80057d0:	61fb      	str	r3, [r7, #28]
}
 80057d2:	bf00      	nop
 80057d4:	e7fe      	b.n	80057d4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80057d6:	23b4      	movs	r3, #180	; 0xb4
 80057d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	2bb4      	cmp	r3, #180	; 0xb4
 80057de:	d00a      	beq.n	80057f6 <xTaskCreateStatic+0x66>
	__asm volatile
 80057e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e4:	f383 8811 	msr	BASEPRI, r3
 80057e8:	f3bf 8f6f 	isb	sy
 80057ec:	f3bf 8f4f 	dsb	sy
 80057f0:	61bb      	str	r3, [r7, #24]
}
 80057f2:	bf00      	nop
 80057f4:	e7fe      	b.n	80057f4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80057f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80057f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d01e      	beq.n	800583c <xTaskCreateStatic+0xac>
 80057fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005800:	2b00      	cmp	r3, #0
 8005802:	d01b      	beq.n	800583c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005806:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800580c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800580e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005810:	2202      	movs	r2, #2
 8005812:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005816:	2300      	movs	r3, #0
 8005818:	9303      	str	r3, [sp, #12]
 800581a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581c:	9302      	str	r3, [sp, #8]
 800581e:	f107 0314 	add.w	r3, r7, #20
 8005822:	9301      	str	r3, [sp, #4]
 8005824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005826:	9300      	str	r3, [sp, #0]
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	68b9      	ldr	r1, [r7, #8]
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	f000 f850 	bl	80058d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005834:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005836:	f000 f8eb 	bl	8005a10 <prvAddNewTaskToReadyList>
 800583a:	e001      	b.n	8005840 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800583c:	2300      	movs	r3, #0
 800583e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005840:	697b      	ldr	r3, [r7, #20]
	}
 8005842:	4618      	mov	r0, r3
 8005844:	3728      	adds	r7, #40	; 0x28
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800584a:	b580      	push	{r7, lr}
 800584c:	b08c      	sub	sp, #48	; 0x30
 800584e:	af04      	add	r7, sp, #16
 8005850:	60f8      	str	r0, [r7, #12]
 8005852:	60b9      	str	r1, [r7, #8]
 8005854:	603b      	str	r3, [r7, #0]
 8005856:	4613      	mov	r3, r2
 8005858:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800585a:	88fb      	ldrh	r3, [r7, #6]
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	4618      	mov	r0, r3
 8005860:	f001 f8a2 	bl	80069a8 <pvPortMalloc>
 8005864:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00e      	beq.n	800588a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800586c:	20b4      	movs	r0, #180	; 0xb4
 800586e:	f001 f89b 	bl	80069a8 <pvPortMalloc>
 8005872:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d003      	beq.n	8005882 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	631a      	str	r2, [r3, #48]	; 0x30
 8005880:	e005      	b.n	800588e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005882:	6978      	ldr	r0, [r7, #20]
 8005884:	f001 f95c 	bl	8006b40 <vPortFree>
 8005888:	e001      	b.n	800588e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800588a:	2300      	movs	r3, #0
 800588c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d017      	beq.n	80058c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800589c:	88fa      	ldrh	r2, [r7, #6]
 800589e:	2300      	movs	r3, #0
 80058a0:	9303      	str	r3, [sp, #12]
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	9302      	str	r3, [sp, #8]
 80058a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a8:	9301      	str	r3, [sp, #4]
 80058aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ac:	9300      	str	r3, [sp, #0]
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	68b9      	ldr	r1, [r7, #8]
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	f000 f80e 	bl	80058d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058b8:	69f8      	ldr	r0, [r7, #28]
 80058ba:	f000 f8a9 	bl	8005a10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80058be:	2301      	movs	r3, #1
 80058c0:	61bb      	str	r3, [r7, #24]
 80058c2:	e002      	b.n	80058ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80058c4:	f04f 33ff 	mov.w	r3, #4294967295
 80058c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80058ca:	69bb      	ldr	r3, [r7, #24]
	}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3720      	adds	r7, #32
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b088      	sub	sp, #32
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
 80058e0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80058e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80058ec:	3b01      	subs	r3, #1
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	4413      	add	r3, r2
 80058f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	f023 0307 	bic.w	r3, r3, #7
 80058fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	f003 0307 	and.w	r3, r3, #7
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00a      	beq.n	800591c <prvInitialiseNewTask+0x48>
	__asm volatile
 8005906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590a:	f383 8811 	msr	BASEPRI, r3
 800590e:	f3bf 8f6f 	isb	sy
 8005912:	f3bf 8f4f 	dsb	sy
 8005916:	617b      	str	r3, [r7, #20]
}
 8005918:	bf00      	nop
 800591a:	e7fe      	b.n	800591a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d01f      	beq.n	8005962 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005922:	2300      	movs	r3, #0
 8005924:	61fb      	str	r3, [r7, #28]
 8005926:	e012      	b.n	800594e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	4413      	add	r3, r2
 800592e:	7819      	ldrb	r1, [r3, #0]
 8005930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	4413      	add	r3, r2
 8005936:	3334      	adds	r3, #52	; 0x34
 8005938:	460a      	mov	r2, r1
 800593a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800593c:	68ba      	ldr	r2, [r7, #8]
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	4413      	add	r3, r2
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d006      	beq.n	8005956 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	3301      	adds	r3, #1
 800594c:	61fb      	str	r3, [r7, #28]
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	2b0f      	cmp	r3, #15
 8005952:	d9e9      	bls.n	8005928 <prvInitialiseNewTask+0x54>
 8005954:	e000      	b.n	8005958 <prvInitialiseNewTask+0x84>
			{
				break;
 8005956:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595a:	2200      	movs	r2, #0
 800595c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005960:	e003      	b.n	800596a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005964:	2200      	movs	r2, #0
 8005966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800596a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596c:	2b06      	cmp	r3, #6
 800596e:	d901      	bls.n	8005974 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005970:	2306      	movs	r3, #6
 8005972:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005976:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005978:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800597a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800597e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005982:	2200      	movs	r2, #0
 8005984:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005988:	3304      	adds	r3, #4
 800598a:	4618      	mov	r0, r3
 800598c:	f7ff fb13 	bl	8004fb6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005992:	3318      	adds	r3, #24
 8005994:	4618      	mov	r0, r3
 8005996:	f7ff fb0e 	bl	8004fb6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800599a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800599e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a2:	f1c3 0207 	rsb	r2, r3, #7
 80059a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80059aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80059b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b2:	2200      	movs	r2, #0
 80059b4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80059b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80059c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c2:	334c      	adds	r3, #76	; 0x4c
 80059c4:	2260      	movs	r2, #96	; 0x60
 80059c6:	2100      	movs	r1, #0
 80059c8:	4618      	mov	r0, r3
 80059ca:	f001 fa0b 	bl	8006de4 <memset>
 80059ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d0:	4a0c      	ldr	r2, [pc, #48]	; (8005a04 <prvInitialiseNewTask+0x130>)
 80059d2:	651a      	str	r2, [r3, #80]	; 0x50
 80059d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d6:	4a0c      	ldr	r2, [pc, #48]	; (8005a08 <prvInitialiseNewTask+0x134>)
 80059d8:	655a      	str	r2, [r3, #84]	; 0x54
 80059da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059dc:	4a0b      	ldr	r2, [pc, #44]	; (8005a0c <prvInitialiseNewTask+0x138>)
 80059de:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80059e0:	683a      	ldr	r2, [r7, #0]
 80059e2:	68f9      	ldr	r1, [r7, #12]
 80059e4:	69b8      	ldr	r0, [r7, #24]
 80059e6:	f000 fdcd 	bl	8006584 <pxPortInitialiseStack>
 80059ea:	4602      	mov	r2, r0
 80059ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80059f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d002      	beq.n	80059fc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80059f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059fc:	bf00      	nop
 80059fe:	3720      	adds	r7, #32
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	08007084 	.word	0x08007084
 8005a08:	080070a4 	.word	0x080070a4
 8005a0c:	08007064 	.word	0x08007064

08005a10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005a18:	f000 fee4 	bl	80067e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005a1c:	4b2a      	ldr	r3, [pc, #168]	; (8005ac8 <prvAddNewTaskToReadyList+0xb8>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	3301      	adds	r3, #1
 8005a22:	4a29      	ldr	r2, [pc, #164]	; (8005ac8 <prvAddNewTaskToReadyList+0xb8>)
 8005a24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005a26:	4b29      	ldr	r3, [pc, #164]	; (8005acc <prvAddNewTaskToReadyList+0xbc>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d109      	bne.n	8005a42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005a2e:	4a27      	ldr	r2, [pc, #156]	; (8005acc <prvAddNewTaskToReadyList+0xbc>)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005a34:	4b24      	ldr	r3, [pc, #144]	; (8005ac8 <prvAddNewTaskToReadyList+0xb8>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d110      	bne.n	8005a5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005a3c:	f000 fbd6 	bl	80061ec <prvInitialiseTaskLists>
 8005a40:	e00d      	b.n	8005a5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005a42:	4b23      	ldr	r3, [pc, #140]	; (8005ad0 <prvAddNewTaskToReadyList+0xc0>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d109      	bne.n	8005a5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a4a:	4b20      	ldr	r3, [pc, #128]	; (8005acc <prvAddNewTaskToReadyList+0xbc>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d802      	bhi.n	8005a5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005a58:	4a1c      	ldr	r2, [pc, #112]	; (8005acc <prvAddNewTaskToReadyList+0xbc>)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005a5e:	4b1d      	ldr	r3, [pc, #116]	; (8005ad4 <prvAddNewTaskToReadyList+0xc4>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	3301      	adds	r3, #1
 8005a64:	4a1b      	ldr	r2, [pc, #108]	; (8005ad4 <prvAddNewTaskToReadyList+0xc4>)
 8005a66:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	409a      	lsls	r2, r3
 8005a70:	4b19      	ldr	r3, [pc, #100]	; (8005ad8 <prvAddNewTaskToReadyList+0xc8>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	4a18      	ldr	r2, [pc, #96]	; (8005ad8 <prvAddNewTaskToReadyList+0xc8>)
 8005a78:	6013      	str	r3, [r2, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a7e:	4613      	mov	r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	4413      	add	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4a15      	ldr	r2, [pc, #84]	; (8005adc <prvAddNewTaskToReadyList+0xcc>)
 8005a88:	441a      	add	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	3304      	adds	r3, #4
 8005a8e:	4619      	mov	r1, r3
 8005a90:	4610      	mov	r0, r2
 8005a92:	f7ff fa9d 	bl	8004fd0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a96:	f000 fed5 	bl	8006844 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a9a:	4b0d      	ldr	r3, [pc, #52]	; (8005ad0 <prvAddNewTaskToReadyList+0xc0>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00e      	beq.n	8005ac0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005aa2:	4b0a      	ldr	r3, [pc, #40]	; (8005acc <prvAddNewTaskToReadyList+0xbc>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d207      	bcs.n	8005ac0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005ab0:	4b0b      	ldr	r3, [pc, #44]	; (8005ae0 <prvAddNewTaskToReadyList+0xd0>)
 8005ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ab6:	601a      	str	r2, [r3, #0]
 8005ab8:	f3bf 8f4f 	dsb	sy
 8005abc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ac0:	bf00      	nop
 8005ac2:	3708      	adds	r7, #8
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	2000089c 	.word	0x2000089c
 8005acc:	2000079c 	.word	0x2000079c
 8005ad0:	200008a8 	.word	0x200008a8
 8005ad4:	200008b8 	.word	0x200008b8
 8005ad8:	200008a4 	.word	0x200008a4
 8005adc:	200007a0 	.word	0x200007a0
 8005ae0:	e000ed04 	.word	0xe000ed04

08005ae4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005aec:	2300      	movs	r3, #0
 8005aee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d017      	beq.n	8005b26 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005af6:	4b13      	ldr	r3, [pc, #76]	; (8005b44 <vTaskDelay+0x60>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00a      	beq.n	8005b14 <vTaskDelay+0x30>
	__asm volatile
 8005afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b02:	f383 8811 	msr	BASEPRI, r3
 8005b06:	f3bf 8f6f 	isb	sy
 8005b0a:	f3bf 8f4f 	dsb	sy
 8005b0e:	60bb      	str	r3, [r7, #8]
}
 8005b10:	bf00      	nop
 8005b12:	e7fe      	b.n	8005b12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005b14:	f000 f884 	bl	8005c20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005b18:	2100      	movs	r1, #0
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 fccc 	bl	80064b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005b20:	f000 f88c 	bl	8005c3c <xTaskResumeAll>
 8005b24:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d107      	bne.n	8005b3c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005b2c:	4b06      	ldr	r3, [pc, #24]	; (8005b48 <vTaskDelay+0x64>)
 8005b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b32:	601a      	str	r2, [r3, #0]
 8005b34:	f3bf 8f4f 	dsb	sy
 8005b38:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b3c:	bf00      	nop
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	200008c4 	.word	0x200008c4
 8005b48:	e000ed04 	.word	0xe000ed04

08005b4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b08a      	sub	sp, #40	; 0x28
 8005b50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b52:	2300      	movs	r3, #0
 8005b54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b56:	2300      	movs	r3, #0
 8005b58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005b5a:	463a      	mov	r2, r7
 8005b5c:	1d39      	adds	r1, r7, #4
 8005b5e:	f107 0308 	add.w	r3, r7, #8
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7fa fdc8 	bl	80006f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005b68:	6839      	ldr	r1, [r7, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	9202      	str	r2, [sp, #8]
 8005b70:	9301      	str	r3, [sp, #4]
 8005b72:	2300      	movs	r3, #0
 8005b74:	9300      	str	r3, [sp, #0]
 8005b76:	2300      	movs	r3, #0
 8005b78:	460a      	mov	r2, r1
 8005b7a:	4921      	ldr	r1, [pc, #132]	; (8005c00 <vTaskStartScheduler+0xb4>)
 8005b7c:	4821      	ldr	r0, [pc, #132]	; (8005c04 <vTaskStartScheduler+0xb8>)
 8005b7e:	f7ff fe07 	bl	8005790 <xTaskCreateStatic>
 8005b82:	4603      	mov	r3, r0
 8005b84:	4a20      	ldr	r2, [pc, #128]	; (8005c08 <vTaskStartScheduler+0xbc>)
 8005b86:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005b88:	4b1f      	ldr	r3, [pc, #124]	; (8005c08 <vTaskStartScheduler+0xbc>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d002      	beq.n	8005b96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005b90:	2301      	movs	r3, #1
 8005b92:	617b      	str	r3, [r7, #20]
 8005b94:	e001      	b.n	8005b9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005b96:	2300      	movs	r3, #0
 8005b98:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d11b      	bne.n	8005bd8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba4:	f383 8811 	msr	BASEPRI, r3
 8005ba8:	f3bf 8f6f 	isb	sy
 8005bac:	f3bf 8f4f 	dsb	sy
 8005bb0:	613b      	str	r3, [r7, #16]
}
 8005bb2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005bb4:	4b15      	ldr	r3, [pc, #84]	; (8005c0c <vTaskStartScheduler+0xc0>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	334c      	adds	r3, #76	; 0x4c
 8005bba:	4a15      	ldr	r2, [pc, #84]	; (8005c10 <vTaskStartScheduler+0xc4>)
 8005bbc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005bbe:	4b15      	ldr	r3, [pc, #84]	; (8005c14 <vTaskStartScheduler+0xc8>)
 8005bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8005bc4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005bc6:	4b14      	ldr	r3, [pc, #80]	; (8005c18 <vTaskStartScheduler+0xcc>)
 8005bc8:	2201      	movs	r2, #1
 8005bca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005bcc:	4b13      	ldr	r3, [pc, #76]	; (8005c1c <vTaskStartScheduler+0xd0>)
 8005bce:	2200      	movs	r2, #0
 8005bd0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005bd2:	f000 fd65 	bl	80066a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005bd6:	e00e      	b.n	8005bf6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bde:	d10a      	bne.n	8005bf6 <vTaskStartScheduler+0xaa>
	__asm volatile
 8005be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be4:	f383 8811 	msr	BASEPRI, r3
 8005be8:	f3bf 8f6f 	isb	sy
 8005bec:	f3bf 8f4f 	dsb	sy
 8005bf0:	60fb      	str	r3, [r7, #12]
}
 8005bf2:	bf00      	nop
 8005bf4:	e7fe      	b.n	8005bf4 <vTaskStartScheduler+0xa8>
}
 8005bf6:	bf00      	nop
 8005bf8:	3718      	adds	r7, #24
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	08007044 	.word	0x08007044
 8005c04:	080061bd 	.word	0x080061bd
 8005c08:	200008c0 	.word	0x200008c0
 8005c0c:	2000079c 	.word	0x2000079c
 8005c10:	20000010 	.word	0x20000010
 8005c14:	200008bc 	.word	0x200008bc
 8005c18:	200008a8 	.word	0x200008a8
 8005c1c:	200008a0 	.word	0x200008a0

08005c20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005c20:	b480      	push	{r7}
 8005c22:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005c24:	4b04      	ldr	r3, [pc, #16]	; (8005c38 <vTaskSuspendAll+0x18>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	3301      	adds	r3, #1
 8005c2a:	4a03      	ldr	r2, [pc, #12]	; (8005c38 <vTaskSuspendAll+0x18>)
 8005c2c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005c2e:	bf00      	nop
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr
 8005c38:	200008c4 	.word	0x200008c4

08005c3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005c42:	2300      	movs	r3, #0
 8005c44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005c46:	2300      	movs	r3, #0
 8005c48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005c4a:	4b41      	ldr	r3, [pc, #260]	; (8005d50 <xTaskResumeAll+0x114>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d10a      	bne.n	8005c68 <xTaskResumeAll+0x2c>
	__asm volatile
 8005c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c56:	f383 8811 	msr	BASEPRI, r3
 8005c5a:	f3bf 8f6f 	isb	sy
 8005c5e:	f3bf 8f4f 	dsb	sy
 8005c62:	603b      	str	r3, [r7, #0]
}
 8005c64:	bf00      	nop
 8005c66:	e7fe      	b.n	8005c66 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005c68:	f000 fdbc 	bl	80067e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005c6c:	4b38      	ldr	r3, [pc, #224]	; (8005d50 <xTaskResumeAll+0x114>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	3b01      	subs	r3, #1
 8005c72:	4a37      	ldr	r2, [pc, #220]	; (8005d50 <xTaskResumeAll+0x114>)
 8005c74:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c76:	4b36      	ldr	r3, [pc, #216]	; (8005d50 <xTaskResumeAll+0x114>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d161      	bne.n	8005d42 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c7e:	4b35      	ldr	r3, [pc, #212]	; (8005d54 <xTaskResumeAll+0x118>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d05d      	beq.n	8005d42 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c86:	e02e      	b.n	8005ce6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c88:	4b33      	ldr	r3, [pc, #204]	; (8005d58 <xTaskResumeAll+0x11c>)
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	3318      	adds	r3, #24
 8005c94:	4618      	mov	r0, r3
 8005c96:	f7ff f9f8 	bl	800508a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	3304      	adds	r3, #4
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7ff f9f3 	bl	800508a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca8:	2201      	movs	r2, #1
 8005caa:	409a      	lsls	r2, r3
 8005cac:	4b2b      	ldr	r3, [pc, #172]	; (8005d5c <xTaskResumeAll+0x120>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	4a2a      	ldr	r2, [pc, #168]	; (8005d5c <xTaskResumeAll+0x120>)
 8005cb4:	6013      	str	r3, [r2, #0]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cba:	4613      	mov	r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4413      	add	r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4a27      	ldr	r2, [pc, #156]	; (8005d60 <xTaskResumeAll+0x124>)
 8005cc4:	441a      	add	r2, r3
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	3304      	adds	r3, #4
 8005cca:	4619      	mov	r1, r3
 8005ccc:	4610      	mov	r0, r2
 8005cce:	f7ff f97f 	bl	8004fd0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd6:	4b23      	ldr	r3, [pc, #140]	; (8005d64 <xTaskResumeAll+0x128>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d302      	bcc.n	8005ce6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005ce0:	4b21      	ldr	r3, [pc, #132]	; (8005d68 <xTaskResumeAll+0x12c>)
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ce6:	4b1c      	ldr	r3, [pc, #112]	; (8005d58 <xTaskResumeAll+0x11c>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1cc      	bne.n	8005c88 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d001      	beq.n	8005cf8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005cf4:	f000 fb1c 	bl	8006330 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005cf8:	4b1c      	ldr	r3, [pc, #112]	; (8005d6c <xTaskResumeAll+0x130>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d010      	beq.n	8005d26 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005d04:	f000 f836 	bl	8005d74 <xTaskIncrementTick>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d002      	beq.n	8005d14 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005d0e:	4b16      	ldr	r3, [pc, #88]	; (8005d68 <xTaskResumeAll+0x12c>)
 8005d10:	2201      	movs	r2, #1
 8005d12:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	3b01      	subs	r3, #1
 8005d18:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d1f1      	bne.n	8005d04 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005d20:	4b12      	ldr	r3, [pc, #72]	; (8005d6c <xTaskResumeAll+0x130>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005d26:	4b10      	ldr	r3, [pc, #64]	; (8005d68 <xTaskResumeAll+0x12c>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d009      	beq.n	8005d42 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005d32:	4b0f      	ldr	r3, [pc, #60]	; (8005d70 <xTaskResumeAll+0x134>)
 8005d34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d38:	601a      	str	r2, [r3, #0]
 8005d3a:	f3bf 8f4f 	dsb	sy
 8005d3e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d42:	f000 fd7f 	bl	8006844 <vPortExitCritical>

	return xAlreadyYielded;
 8005d46:	68bb      	ldr	r3, [r7, #8]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	200008c4 	.word	0x200008c4
 8005d54:	2000089c 	.word	0x2000089c
 8005d58:	2000085c 	.word	0x2000085c
 8005d5c:	200008a4 	.word	0x200008a4
 8005d60:	200007a0 	.word	0x200007a0
 8005d64:	2000079c 	.word	0x2000079c
 8005d68:	200008b0 	.word	0x200008b0
 8005d6c:	200008ac 	.word	0x200008ac
 8005d70:	e000ed04 	.word	0xe000ed04

08005d74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b086      	sub	sp, #24
 8005d78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d7e:	4b4e      	ldr	r3, [pc, #312]	; (8005eb8 <xTaskIncrementTick+0x144>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	f040 808e 	bne.w	8005ea4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d88:	4b4c      	ldr	r3, [pc, #304]	; (8005ebc <xTaskIncrementTick+0x148>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005d90:	4a4a      	ldr	r2, [pc, #296]	; (8005ebc <xTaskIncrementTick+0x148>)
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d120      	bne.n	8005dde <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005d9c:	4b48      	ldr	r3, [pc, #288]	; (8005ec0 <xTaskIncrementTick+0x14c>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00a      	beq.n	8005dbc <xTaskIncrementTick+0x48>
	__asm volatile
 8005da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005daa:	f383 8811 	msr	BASEPRI, r3
 8005dae:	f3bf 8f6f 	isb	sy
 8005db2:	f3bf 8f4f 	dsb	sy
 8005db6:	603b      	str	r3, [r7, #0]
}
 8005db8:	bf00      	nop
 8005dba:	e7fe      	b.n	8005dba <xTaskIncrementTick+0x46>
 8005dbc:	4b40      	ldr	r3, [pc, #256]	; (8005ec0 <xTaskIncrementTick+0x14c>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	60fb      	str	r3, [r7, #12]
 8005dc2:	4b40      	ldr	r3, [pc, #256]	; (8005ec4 <xTaskIncrementTick+0x150>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a3e      	ldr	r2, [pc, #248]	; (8005ec0 <xTaskIncrementTick+0x14c>)
 8005dc8:	6013      	str	r3, [r2, #0]
 8005dca:	4a3e      	ldr	r2, [pc, #248]	; (8005ec4 <xTaskIncrementTick+0x150>)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6013      	str	r3, [r2, #0]
 8005dd0:	4b3d      	ldr	r3, [pc, #244]	; (8005ec8 <xTaskIncrementTick+0x154>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	4a3c      	ldr	r2, [pc, #240]	; (8005ec8 <xTaskIncrementTick+0x154>)
 8005dd8:	6013      	str	r3, [r2, #0]
 8005dda:	f000 faa9 	bl	8006330 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005dde:	4b3b      	ldr	r3, [pc, #236]	; (8005ecc <xTaskIncrementTick+0x158>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d348      	bcc.n	8005e7a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005de8:	4b35      	ldr	r3, [pc, #212]	; (8005ec0 <xTaskIncrementTick+0x14c>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d104      	bne.n	8005dfc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005df2:	4b36      	ldr	r3, [pc, #216]	; (8005ecc <xTaskIncrementTick+0x158>)
 8005df4:	f04f 32ff 	mov.w	r2, #4294967295
 8005df8:	601a      	str	r2, [r3, #0]
					break;
 8005dfa:	e03e      	b.n	8005e7a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dfc:	4b30      	ldr	r3, [pc, #192]	; (8005ec0 <xTaskIncrementTick+0x14c>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d203      	bcs.n	8005e1c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005e14:	4a2d      	ldr	r2, [pc, #180]	; (8005ecc <xTaskIncrementTick+0x158>)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005e1a:	e02e      	b.n	8005e7a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	3304      	adds	r3, #4
 8005e20:	4618      	mov	r0, r3
 8005e22:	f7ff f932 	bl	800508a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d004      	beq.n	8005e38 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	3318      	adds	r3, #24
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7ff f929 	bl	800508a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	409a      	lsls	r2, r3
 8005e40:	4b23      	ldr	r3, [pc, #140]	; (8005ed0 <xTaskIncrementTick+0x15c>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	4a22      	ldr	r2, [pc, #136]	; (8005ed0 <xTaskIncrementTick+0x15c>)
 8005e48:	6013      	str	r3, [r2, #0]
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e4e:	4613      	mov	r3, r2
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	4413      	add	r3, r2
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	4a1f      	ldr	r2, [pc, #124]	; (8005ed4 <xTaskIncrementTick+0x160>)
 8005e58:	441a      	add	r2, r3
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	3304      	adds	r3, #4
 8005e5e:	4619      	mov	r1, r3
 8005e60:	4610      	mov	r0, r2
 8005e62:	f7ff f8b5 	bl	8004fd0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e6a:	4b1b      	ldr	r3, [pc, #108]	; (8005ed8 <xTaskIncrementTick+0x164>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d3b9      	bcc.n	8005de8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005e74:	2301      	movs	r3, #1
 8005e76:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e78:	e7b6      	b.n	8005de8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e7a:	4b17      	ldr	r3, [pc, #92]	; (8005ed8 <xTaskIncrementTick+0x164>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e80:	4914      	ldr	r1, [pc, #80]	; (8005ed4 <xTaskIncrementTick+0x160>)
 8005e82:	4613      	mov	r3, r2
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	4413      	add	r3, r2
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	440b      	add	r3, r1
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d901      	bls.n	8005e96 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005e92:	2301      	movs	r3, #1
 8005e94:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005e96:	4b11      	ldr	r3, [pc, #68]	; (8005edc <xTaskIncrementTick+0x168>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d007      	beq.n	8005eae <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	617b      	str	r3, [r7, #20]
 8005ea2:	e004      	b.n	8005eae <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005ea4:	4b0e      	ldr	r3, [pc, #56]	; (8005ee0 <xTaskIncrementTick+0x16c>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	4a0d      	ldr	r2, [pc, #52]	; (8005ee0 <xTaskIncrementTick+0x16c>)
 8005eac:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005eae:	697b      	ldr	r3, [r7, #20]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3718      	adds	r7, #24
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	200008c4 	.word	0x200008c4
 8005ebc:	200008a0 	.word	0x200008a0
 8005ec0:	20000854 	.word	0x20000854
 8005ec4:	20000858 	.word	0x20000858
 8005ec8:	200008b4 	.word	0x200008b4
 8005ecc:	200008bc 	.word	0x200008bc
 8005ed0:	200008a4 	.word	0x200008a4
 8005ed4:	200007a0 	.word	0x200007a0
 8005ed8:	2000079c 	.word	0x2000079c
 8005edc:	200008b0 	.word	0x200008b0
 8005ee0:	200008ac 	.word	0x200008ac

08005ee4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b087      	sub	sp, #28
 8005ee8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005eea:	4b29      	ldr	r3, [pc, #164]	; (8005f90 <vTaskSwitchContext+0xac>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005ef2:	4b28      	ldr	r3, [pc, #160]	; (8005f94 <vTaskSwitchContext+0xb0>)
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005ef8:	e044      	b.n	8005f84 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005efa:	4b26      	ldr	r3, [pc, #152]	; (8005f94 <vTaskSwitchContext+0xb0>)
 8005efc:	2200      	movs	r2, #0
 8005efe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f00:	4b25      	ldr	r3, [pc, #148]	; (8005f98 <vTaskSwitchContext+0xb4>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	fab3 f383 	clz	r3, r3
 8005f0c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005f0e:	7afb      	ldrb	r3, [r7, #11]
 8005f10:	f1c3 031f 	rsb	r3, r3, #31
 8005f14:	617b      	str	r3, [r7, #20]
 8005f16:	4921      	ldr	r1, [pc, #132]	; (8005f9c <vTaskSwitchContext+0xb8>)
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4413      	add	r3, r2
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	440b      	add	r3, r1
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d10a      	bne.n	8005f40 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2e:	f383 8811 	msr	BASEPRI, r3
 8005f32:	f3bf 8f6f 	isb	sy
 8005f36:	f3bf 8f4f 	dsb	sy
 8005f3a:	607b      	str	r3, [r7, #4]
}
 8005f3c:	bf00      	nop
 8005f3e:	e7fe      	b.n	8005f3e <vTaskSwitchContext+0x5a>
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	4613      	mov	r3, r2
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	4413      	add	r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	4a14      	ldr	r2, [pc, #80]	; (8005f9c <vTaskSwitchContext+0xb8>)
 8005f4c:	4413      	add	r3, r2
 8005f4e:	613b      	str	r3, [r7, #16]
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	685a      	ldr	r2, [r3, #4]
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	605a      	str	r2, [r3, #4]
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	3308      	adds	r3, #8
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d104      	bne.n	8005f70 <vTaskSwitchContext+0x8c>
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	685a      	ldr	r2, [r3, #4]
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	605a      	str	r2, [r3, #4]
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	4a0a      	ldr	r2, [pc, #40]	; (8005fa0 <vTaskSwitchContext+0xbc>)
 8005f78:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005f7a:	4b09      	ldr	r3, [pc, #36]	; (8005fa0 <vTaskSwitchContext+0xbc>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	334c      	adds	r3, #76	; 0x4c
 8005f80:	4a08      	ldr	r2, [pc, #32]	; (8005fa4 <vTaskSwitchContext+0xc0>)
 8005f82:	6013      	str	r3, [r2, #0]
}
 8005f84:	bf00      	nop
 8005f86:	371c      	adds	r7, #28
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr
 8005f90:	200008c4 	.word	0x200008c4
 8005f94:	200008b0 	.word	0x200008b0
 8005f98:	200008a4 	.word	0x200008a4
 8005f9c:	200007a0 	.word	0x200007a0
 8005fa0:	2000079c 	.word	0x2000079c
 8005fa4:	20000010 	.word	0x20000010

08005fa8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d10a      	bne.n	8005fce <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbc:	f383 8811 	msr	BASEPRI, r3
 8005fc0:	f3bf 8f6f 	isb	sy
 8005fc4:	f3bf 8f4f 	dsb	sy
 8005fc8:	60fb      	str	r3, [r7, #12]
}
 8005fca:	bf00      	nop
 8005fcc:	e7fe      	b.n	8005fcc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005fce:	4b07      	ldr	r3, [pc, #28]	; (8005fec <vTaskPlaceOnEventList+0x44>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	3318      	adds	r3, #24
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f7ff f81e 	bl	8005018 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005fdc:	2101      	movs	r1, #1
 8005fde:	6838      	ldr	r0, [r7, #0]
 8005fe0:	f000 fa6a 	bl	80064b8 <prvAddCurrentTaskToDelayedList>
}
 8005fe4:	bf00      	nop
 8005fe6:	3710      	adds	r7, #16
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	2000079c 	.word	0x2000079c

08005ff0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b086      	sub	sp, #24
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d10a      	bne.n	800601c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600a:	f383 8811 	msr	BASEPRI, r3
 800600e:	f3bf 8f6f 	isb	sy
 8006012:	f3bf 8f4f 	dsb	sy
 8006016:	60fb      	str	r3, [r7, #12]
}
 8006018:	bf00      	nop
 800601a:	e7fe      	b.n	800601a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	3318      	adds	r3, #24
 8006020:	4618      	mov	r0, r3
 8006022:	f7ff f832 	bl	800508a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006026:	4b1d      	ldr	r3, [pc, #116]	; (800609c <xTaskRemoveFromEventList+0xac>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d11c      	bne.n	8006068 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	3304      	adds	r3, #4
 8006032:	4618      	mov	r0, r3
 8006034:	f7ff f829 	bl	800508a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603c:	2201      	movs	r2, #1
 800603e:	409a      	lsls	r2, r3
 8006040:	4b17      	ldr	r3, [pc, #92]	; (80060a0 <xTaskRemoveFromEventList+0xb0>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4313      	orrs	r3, r2
 8006046:	4a16      	ldr	r2, [pc, #88]	; (80060a0 <xTaskRemoveFromEventList+0xb0>)
 8006048:	6013      	str	r3, [r2, #0]
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800604e:	4613      	mov	r3, r2
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	4413      	add	r3, r2
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	4a13      	ldr	r2, [pc, #76]	; (80060a4 <xTaskRemoveFromEventList+0xb4>)
 8006058:	441a      	add	r2, r3
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	3304      	adds	r3, #4
 800605e:	4619      	mov	r1, r3
 8006060:	4610      	mov	r0, r2
 8006062:	f7fe ffb5 	bl	8004fd0 <vListInsertEnd>
 8006066:	e005      	b.n	8006074 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	3318      	adds	r3, #24
 800606c:	4619      	mov	r1, r3
 800606e:	480e      	ldr	r0, [pc, #56]	; (80060a8 <xTaskRemoveFromEventList+0xb8>)
 8006070:	f7fe ffae 	bl	8004fd0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006078:	4b0c      	ldr	r3, [pc, #48]	; (80060ac <xTaskRemoveFromEventList+0xbc>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800607e:	429a      	cmp	r2, r3
 8006080:	d905      	bls.n	800608e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006082:	2301      	movs	r3, #1
 8006084:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006086:	4b0a      	ldr	r3, [pc, #40]	; (80060b0 <xTaskRemoveFromEventList+0xc0>)
 8006088:	2201      	movs	r2, #1
 800608a:	601a      	str	r2, [r3, #0]
 800608c:	e001      	b.n	8006092 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800608e:	2300      	movs	r3, #0
 8006090:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006092:	697b      	ldr	r3, [r7, #20]
}
 8006094:	4618      	mov	r0, r3
 8006096:	3718      	adds	r7, #24
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	200008c4 	.word	0x200008c4
 80060a0:	200008a4 	.word	0x200008a4
 80060a4:	200007a0 	.word	0x200007a0
 80060a8:	2000085c 	.word	0x2000085c
 80060ac:	2000079c 	.word	0x2000079c
 80060b0:	200008b0 	.word	0x200008b0

080060b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80060bc:	4b06      	ldr	r3, [pc, #24]	; (80060d8 <vTaskInternalSetTimeOutState+0x24>)
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80060c4:	4b05      	ldr	r3, [pc, #20]	; (80060dc <vTaskInternalSetTimeOutState+0x28>)
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	605a      	str	r2, [r3, #4]
}
 80060cc:	bf00      	nop
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr
 80060d8:	200008b4 	.word	0x200008b4
 80060dc:	200008a0 	.word	0x200008a0

080060e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b088      	sub	sp, #32
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d10a      	bne.n	8006106 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80060f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f4:	f383 8811 	msr	BASEPRI, r3
 80060f8:	f3bf 8f6f 	isb	sy
 80060fc:	f3bf 8f4f 	dsb	sy
 8006100:	613b      	str	r3, [r7, #16]
}
 8006102:	bf00      	nop
 8006104:	e7fe      	b.n	8006104 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d10a      	bne.n	8006122 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800610c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006110:	f383 8811 	msr	BASEPRI, r3
 8006114:	f3bf 8f6f 	isb	sy
 8006118:	f3bf 8f4f 	dsb	sy
 800611c:	60fb      	str	r3, [r7, #12]
}
 800611e:	bf00      	nop
 8006120:	e7fe      	b.n	8006120 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006122:	f000 fb5f 	bl	80067e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006126:	4b1d      	ldr	r3, [pc, #116]	; (800619c <xTaskCheckForTimeOut+0xbc>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	69ba      	ldr	r2, [r7, #24]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800613e:	d102      	bne.n	8006146 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006140:	2300      	movs	r3, #0
 8006142:	61fb      	str	r3, [r7, #28]
 8006144:	e023      	b.n	800618e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	4b15      	ldr	r3, [pc, #84]	; (80061a0 <xTaskCheckForTimeOut+0xc0>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	429a      	cmp	r2, r3
 8006150:	d007      	beq.n	8006162 <xTaskCheckForTimeOut+0x82>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	69ba      	ldr	r2, [r7, #24]
 8006158:	429a      	cmp	r2, r3
 800615a:	d302      	bcc.n	8006162 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800615c:	2301      	movs	r3, #1
 800615e:	61fb      	str	r3, [r7, #28]
 8006160:	e015      	b.n	800618e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	429a      	cmp	r2, r3
 800616a:	d20b      	bcs.n	8006184 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	1ad2      	subs	r2, r2, r3
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f7ff ff9b 	bl	80060b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800617e:	2300      	movs	r3, #0
 8006180:	61fb      	str	r3, [r7, #28]
 8006182:	e004      	b.n	800618e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	2200      	movs	r2, #0
 8006188:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800618a:	2301      	movs	r3, #1
 800618c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800618e:	f000 fb59 	bl	8006844 <vPortExitCritical>

	return xReturn;
 8006192:	69fb      	ldr	r3, [r7, #28]
}
 8006194:	4618      	mov	r0, r3
 8006196:	3720      	adds	r7, #32
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	200008a0 	.word	0x200008a0
 80061a0:	200008b4 	.word	0x200008b4

080061a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80061a4:	b480      	push	{r7}
 80061a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80061a8:	4b03      	ldr	r3, [pc, #12]	; (80061b8 <vTaskMissedYield+0x14>)
 80061aa:	2201      	movs	r2, #1
 80061ac:	601a      	str	r2, [r3, #0]
}
 80061ae:	bf00      	nop
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr
 80061b8:	200008b0 	.word	0x200008b0

080061bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80061c4:	f000 f852 	bl	800626c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80061c8:	4b06      	ldr	r3, [pc, #24]	; (80061e4 <prvIdleTask+0x28>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d9f9      	bls.n	80061c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80061d0:	4b05      	ldr	r3, [pc, #20]	; (80061e8 <prvIdleTask+0x2c>)
 80061d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061d6:	601a      	str	r2, [r3, #0]
 80061d8:	f3bf 8f4f 	dsb	sy
 80061dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80061e0:	e7f0      	b.n	80061c4 <prvIdleTask+0x8>
 80061e2:	bf00      	nop
 80061e4:	200007a0 	.word	0x200007a0
 80061e8:	e000ed04 	.word	0xe000ed04

080061ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061f2:	2300      	movs	r3, #0
 80061f4:	607b      	str	r3, [r7, #4]
 80061f6:	e00c      	b.n	8006212 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	4613      	mov	r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	4413      	add	r3, r2
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	4a12      	ldr	r2, [pc, #72]	; (800624c <prvInitialiseTaskLists+0x60>)
 8006204:	4413      	add	r3, r2
 8006206:	4618      	mov	r0, r3
 8006208:	f7fe feb5 	bl	8004f76 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	3301      	adds	r3, #1
 8006210:	607b      	str	r3, [r7, #4]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2b06      	cmp	r3, #6
 8006216:	d9ef      	bls.n	80061f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006218:	480d      	ldr	r0, [pc, #52]	; (8006250 <prvInitialiseTaskLists+0x64>)
 800621a:	f7fe feac 	bl	8004f76 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800621e:	480d      	ldr	r0, [pc, #52]	; (8006254 <prvInitialiseTaskLists+0x68>)
 8006220:	f7fe fea9 	bl	8004f76 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006224:	480c      	ldr	r0, [pc, #48]	; (8006258 <prvInitialiseTaskLists+0x6c>)
 8006226:	f7fe fea6 	bl	8004f76 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800622a:	480c      	ldr	r0, [pc, #48]	; (800625c <prvInitialiseTaskLists+0x70>)
 800622c:	f7fe fea3 	bl	8004f76 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006230:	480b      	ldr	r0, [pc, #44]	; (8006260 <prvInitialiseTaskLists+0x74>)
 8006232:	f7fe fea0 	bl	8004f76 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006236:	4b0b      	ldr	r3, [pc, #44]	; (8006264 <prvInitialiseTaskLists+0x78>)
 8006238:	4a05      	ldr	r2, [pc, #20]	; (8006250 <prvInitialiseTaskLists+0x64>)
 800623a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800623c:	4b0a      	ldr	r3, [pc, #40]	; (8006268 <prvInitialiseTaskLists+0x7c>)
 800623e:	4a05      	ldr	r2, [pc, #20]	; (8006254 <prvInitialiseTaskLists+0x68>)
 8006240:	601a      	str	r2, [r3, #0]
}
 8006242:	bf00      	nop
 8006244:	3708      	adds	r7, #8
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	200007a0 	.word	0x200007a0
 8006250:	2000082c 	.word	0x2000082c
 8006254:	20000840 	.word	0x20000840
 8006258:	2000085c 	.word	0x2000085c
 800625c:	20000870 	.word	0x20000870
 8006260:	20000888 	.word	0x20000888
 8006264:	20000854 	.word	0x20000854
 8006268:	20000858 	.word	0x20000858

0800626c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006272:	e019      	b.n	80062a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006274:	f000 fab6 	bl	80067e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006278:	4b10      	ldr	r3, [pc, #64]	; (80062bc <prvCheckTasksWaitingTermination+0x50>)
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	3304      	adds	r3, #4
 8006284:	4618      	mov	r0, r3
 8006286:	f7fe ff00 	bl	800508a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800628a:	4b0d      	ldr	r3, [pc, #52]	; (80062c0 <prvCheckTasksWaitingTermination+0x54>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	3b01      	subs	r3, #1
 8006290:	4a0b      	ldr	r2, [pc, #44]	; (80062c0 <prvCheckTasksWaitingTermination+0x54>)
 8006292:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006294:	4b0b      	ldr	r3, [pc, #44]	; (80062c4 <prvCheckTasksWaitingTermination+0x58>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	3b01      	subs	r3, #1
 800629a:	4a0a      	ldr	r2, [pc, #40]	; (80062c4 <prvCheckTasksWaitingTermination+0x58>)
 800629c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800629e:	f000 fad1 	bl	8006844 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f810 	bl	80062c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062a8:	4b06      	ldr	r3, [pc, #24]	; (80062c4 <prvCheckTasksWaitingTermination+0x58>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d1e1      	bne.n	8006274 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80062b0:	bf00      	nop
 80062b2:	bf00      	nop
 80062b4:	3708      	adds	r7, #8
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	20000870 	.word	0x20000870
 80062c0:	2000089c 	.word	0x2000089c
 80062c4:	20000884 	.word	0x20000884

080062c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	334c      	adds	r3, #76	; 0x4c
 80062d4:	4618      	mov	r0, r3
 80062d6:	f000 fd9b 	bl	8006e10 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d108      	bne.n	80062f6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e8:	4618      	mov	r0, r3
 80062ea:	f000 fc29 	bl	8006b40 <vPortFree>
				vPortFree( pxTCB );
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 fc26 	bl	8006b40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80062f4:	e018      	b.n	8006328 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d103      	bne.n	8006308 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 fc1d 	bl	8006b40 <vPortFree>
	}
 8006306:	e00f      	b.n	8006328 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800630e:	2b02      	cmp	r3, #2
 8006310:	d00a      	beq.n	8006328 <prvDeleteTCB+0x60>
	__asm volatile
 8006312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006316:	f383 8811 	msr	BASEPRI, r3
 800631a:	f3bf 8f6f 	isb	sy
 800631e:	f3bf 8f4f 	dsb	sy
 8006322:	60fb      	str	r3, [r7, #12]
}
 8006324:	bf00      	nop
 8006326:	e7fe      	b.n	8006326 <prvDeleteTCB+0x5e>
	}
 8006328:	bf00      	nop
 800632a:	3710      	adds	r7, #16
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006336:	4b0c      	ldr	r3, [pc, #48]	; (8006368 <prvResetNextTaskUnblockTime+0x38>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d104      	bne.n	800634a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006340:	4b0a      	ldr	r3, [pc, #40]	; (800636c <prvResetNextTaskUnblockTime+0x3c>)
 8006342:	f04f 32ff 	mov.w	r2, #4294967295
 8006346:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006348:	e008      	b.n	800635c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800634a:	4b07      	ldr	r3, [pc, #28]	; (8006368 <prvResetNextTaskUnblockTime+0x38>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	4a04      	ldr	r2, [pc, #16]	; (800636c <prvResetNextTaskUnblockTime+0x3c>)
 800635a:	6013      	str	r3, [r2, #0]
}
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr
 8006368:	20000854 	.word	0x20000854
 800636c:	200008bc 	.word	0x200008bc

08006370 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006376:	4b0b      	ldr	r3, [pc, #44]	; (80063a4 <xTaskGetSchedulerState+0x34>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d102      	bne.n	8006384 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800637e:	2301      	movs	r3, #1
 8006380:	607b      	str	r3, [r7, #4]
 8006382:	e008      	b.n	8006396 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006384:	4b08      	ldr	r3, [pc, #32]	; (80063a8 <xTaskGetSchedulerState+0x38>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d102      	bne.n	8006392 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800638c:	2302      	movs	r3, #2
 800638e:	607b      	str	r3, [r7, #4]
 8006390:	e001      	b.n	8006396 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006392:	2300      	movs	r3, #0
 8006394:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006396:	687b      	ldr	r3, [r7, #4]
	}
 8006398:	4618      	mov	r0, r3
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr
 80063a4:	200008a8 	.word	0x200008a8
 80063a8:	200008c4 	.word	0x200008c4

080063ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b086      	sub	sp, #24
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80063b8:	2300      	movs	r3, #0
 80063ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d06e      	beq.n	80064a0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80063c2:	4b3a      	ldr	r3, [pc, #232]	; (80064ac <xTaskPriorityDisinherit+0x100>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	693a      	ldr	r2, [r7, #16]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d00a      	beq.n	80063e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80063cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d0:	f383 8811 	msr	BASEPRI, r3
 80063d4:	f3bf 8f6f 	isb	sy
 80063d8:	f3bf 8f4f 	dsb	sy
 80063dc:	60fb      	str	r3, [r7, #12]
}
 80063de:	bf00      	nop
 80063e0:	e7fe      	b.n	80063e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d10a      	bne.n	8006400 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80063ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ee:	f383 8811 	msr	BASEPRI, r3
 80063f2:	f3bf 8f6f 	isb	sy
 80063f6:	f3bf 8f4f 	dsb	sy
 80063fa:	60bb      	str	r3, [r7, #8]
}
 80063fc:	bf00      	nop
 80063fe:	e7fe      	b.n	80063fe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006404:	1e5a      	subs	r2, r3, #1
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006412:	429a      	cmp	r2, r3
 8006414:	d044      	beq.n	80064a0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800641a:	2b00      	cmp	r3, #0
 800641c:	d140      	bne.n	80064a0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	3304      	adds	r3, #4
 8006422:	4618      	mov	r0, r3
 8006424:	f7fe fe31 	bl	800508a <uxListRemove>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d115      	bne.n	800645a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006432:	491f      	ldr	r1, [pc, #124]	; (80064b0 <xTaskPriorityDisinherit+0x104>)
 8006434:	4613      	mov	r3, r2
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	4413      	add	r3, r2
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	440b      	add	r3, r1
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d10a      	bne.n	800645a <xTaskPriorityDisinherit+0xae>
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006448:	2201      	movs	r2, #1
 800644a:	fa02 f303 	lsl.w	r3, r2, r3
 800644e:	43da      	mvns	r2, r3
 8006450:	4b18      	ldr	r3, [pc, #96]	; (80064b4 <xTaskPriorityDisinherit+0x108>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4013      	ands	r3, r2
 8006456:	4a17      	ldr	r2, [pc, #92]	; (80064b4 <xTaskPriorityDisinherit+0x108>)
 8006458:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006466:	f1c3 0207 	rsb	r2, r3, #7
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006472:	2201      	movs	r2, #1
 8006474:	409a      	lsls	r2, r3
 8006476:	4b0f      	ldr	r3, [pc, #60]	; (80064b4 <xTaskPriorityDisinherit+0x108>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4313      	orrs	r3, r2
 800647c:	4a0d      	ldr	r2, [pc, #52]	; (80064b4 <xTaskPriorityDisinherit+0x108>)
 800647e:	6013      	str	r3, [r2, #0]
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006484:	4613      	mov	r3, r2
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	4413      	add	r3, r2
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	4a08      	ldr	r2, [pc, #32]	; (80064b0 <xTaskPriorityDisinherit+0x104>)
 800648e:	441a      	add	r2, r3
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	3304      	adds	r3, #4
 8006494:	4619      	mov	r1, r3
 8006496:	4610      	mov	r0, r2
 8006498:	f7fe fd9a 	bl	8004fd0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800649c:	2301      	movs	r3, #1
 800649e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80064a0:	697b      	ldr	r3, [r7, #20]
	}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3718      	adds	r7, #24
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	2000079c 	.word	0x2000079c
 80064b0:	200007a0 	.word	0x200007a0
 80064b4:	200008a4 	.word	0x200008a4

080064b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80064c2:	4b29      	ldr	r3, [pc, #164]	; (8006568 <prvAddCurrentTaskToDelayedList+0xb0>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064c8:	4b28      	ldr	r3, [pc, #160]	; (800656c <prvAddCurrentTaskToDelayedList+0xb4>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	3304      	adds	r3, #4
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7fe fddb 	bl	800508a <uxListRemove>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d10b      	bne.n	80064f2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80064da:	4b24      	ldr	r3, [pc, #144]	; (800656c <prvAddCurrentTaskToDelayedList+0xb4>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e0:	2201      	movs	r2, #1
 80064e2:	fa02 f303 	lsl.w	r3, r2, r3
 80064e6:	43da      	mvns	r2, r3
 80064e8:	4b21      	ldr	r3, [pc, #132]	; (8006570 <prvAddCurrentTaskToDelayedList+0xb8>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4013      	ands	r3, r2
 80064ee:	4a20      	ldr	r2, [pc, #128]	; (8006570 <prvAddCurrentTaskToDelayedList+0xb8>)
 80064f0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f8:	d10a      	bne.n	8006510 <prvAddCurrentTaskToDelayedList+0x58>
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d007      	beq.n	8006510 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006500:	4b1a      	ldr	r3, [pc, #104]	; (800656c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	3304      	adds	r3, #4
 8006506:	4619      	mov	r1, r3
 8006508:	481a      	ldr	r0, [pc, #104]	; (8006574 <prvAddCurrentTaskToDelayedList+0xbc>)
 800650a:	f7fe fd61 	bl	8004fd0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800650e:	e026      	b.n	800655e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4413      	add	r3, r2
 8006516:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006518:	4b14      	ldr	r3, [pc, #80]	; (800656c <prvAddCurrentTaskToDelayedList+0xb4>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68ba      	ldr	r2, [r7, #8]
 800651e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006520:	68ba      	ldr	r2, [r7, #8]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	429a      	cmp	r2, r3
 8006526:	d209      	bcs.n	800653c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006528:	4b13      	ldr	r3, [pc, #76]	; (8006578 <prvAddCurrentTaskToDelayedList+0xc0>)
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	4b0f      	ldr	r3, [pc, #60]	; (800656c <prvAddCurrentTaskToDelayedList+0xb4>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	3304      	adds	r3, #4
 8006532:	4619      	mov	r1, r3
 8006534:	4610      	mov	r0, r2
 8006536:	f7fe fd6f 	bl	8005018 <vListInsert>
}
 800653a:	e010      	b.n	800655e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800653c:	4b0f      	ldr	r3, [pc, #60]	; (800657c <prvAddCurrentTaskToDelayedList+0xc4>)
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	4b0a      	ldr	r3, [pc, #40]	; (800656c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	3304      	adds	r3, #4
 8006546:	4619      	mov	r1, r3
 8006548:	4610      	mov	r0, r2
 800654a:	f7fe fd65 	bl	8005018 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800654e:	4b0c      	ldr	r3, [pc, #48]	; (8006580 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68ba      	ldr	r2, [r7, #8]
 8006554:	429a      	cmp	r2, r3
 8006556:	d202      	bcs.n	800655e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006558:	4a09      	ldr	r2, [pc, #36]	; (8006580 <prvAddCurrentTaskToDelayedList+0xc8>)
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	6013      	str	r3, [r2, #0]
}
 800655e:	bf00      	nop
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	200008a0 	.word	0x200008a0
 800656c:	2000079c 	.word	0x2000079c
 8006570:	200008a4 	.word	0x200008a4
 8006574:	20000888 	.word	0x20000888
 8006578:	20000858 	.word	0x20000858
 800657c:	20000854 	.word	0x20000854
 8006580:	200008bc 	.word	0x200008bc

08006584 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	3b04      	subs	r3, #4
 8006594:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800659c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	3b04      	subs	r3, #4
 80065a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	f023 0201 	bic.w	r2, r3, #1
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	3b04      	subs	r3, #4
 80065b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80065b4:	4a0c      	ldr	r2, [pc, #48]	; (80065e8 <pxPortInitialiseStack+0x64>)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	3b14      	subs	r3, #20
 80065be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	3b04      	subs	r3, #4
 80065ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f06f 0202 	mvn.w	r2, #2
 80065d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	3b20      	subs	r3, #32
 80065d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80065da:	68fb      	ldr	r3, [r7, #12]
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3714      	adds	r7, #20
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr
 80065e8:	080065ed 	.word	0x080065ed

080065ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80065ec:	b480      	push	{r7}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80065f2:	2300      	movs	r3, #0
 80065f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80065f6:	4b12      	ldr	r3, [pc, #72]	; (8006640 <prvTaskExitError+0x54>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065fe:	d00a      	beq.n	8006616 <prvTaskExitError+0x2a>
	__asm volatile
 8006600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006604:	f383 8811 	msr	BASEPRI, r3
 8006608:	f3bf 8f6f 	isb	sy
 800660c:	f3bf 8f4f 	dsb	sy
 8006610:	60fb      	str	r3, [r7, #12]
}
 8006612:	bf00      	nop
 8006614:	e7fe      	b.n	8006614 <prvTaskExitError+0x28>
	__asm volatile
 8006616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661a:	f383 8811 	msr	BASEPRI, r3
 800661e:	f3bf 8f6f 	isb	sy
 8006622:	f3bf 8f4f 	dsb	sy
 8006626:	60bb      	str	r3, [r7, #8]
}
 8006628:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800662a:	bf00      	nop
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d0fc      	beq.n	800662c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006632:	bf00      	nop
 8006634:	bf00      	nop
 8006636:	3714      	adds	r7, #20
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr
 8006640:	2000000c 	.word	0x2000000c
	...

08006650 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006650:	4b07      	ldr	r3, [pc, #28]	; (8006670 <pxCurrentTCBConst2>)
 8006652:	6819      	ldr	r1, [r3, #0]
 8006654:	6808      	ldr	r0, [r1, #0]
 8006656:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800665a:	f380 8809 	msr	PSP, r0
 800665e:	f3bf 8f6f 	isb	sy
 8006662:	f04f 0000 	mov.w	r0, #0
 8006666:	f380 8811 	msr	BASEPRI, r0
 800666a:	4770      	bx	lr
 800666c:	f3af 8000 	nop.w

08006670 <pxCurrentTCBConst2>:
 8006670:	2000079c 	.word	0x2000079c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006674:	bf00      	nop
 8006676:	bf00      	nop

08006678 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006678:	4808      	ldr	r0, [pc, #32]	; (800669c <prvPortStartFirstTask+0x24>)
 800667a:	6800      	ldr	r0, [r0, #0]
 800667c:	6800      	ldr	r0, [r0, #0]
 800667e:	f380 8808 	msr	MSP, r0
 8006682:	f04f 0000 	mov.w	r0, #0
 8006686:	f380 8814 	msr	CONTROL, r0
 800668a:	b662      	cpsie	i
 800668c:	b661      	cpsie	f
 800668e:	f3bf 8f4f 	dsb	sy
 8006692:	f3bf 8f6f 	isb	sy
 8006696:	df00      	svc	0
 8006698:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800669a:	bf00      	nop
 800669c:	e000ed08 	.word	0xe000ed08

080066a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b086      	sub	sp, #24
 80066a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80066a6:	4b46      	ldr	r3, [pc, #280]	; (80067c0 <xPortStartScheduler+0x120>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a46      	ldr	r2, [pc, #280]	; (80067c4 <xPortStartScheduler+0x124>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d10a      	bne.n	80066c6 <xPortStartScheduler+0x26>
	__asm volatile
 80066b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b4:	f383 8811 	msr	BASEPRI, r3
 80066b8:	f3bf 8f6f 	isb	sy
 80066bc:	f3bf 8f4f 	dsb	sy
 80066c0:	613b      	str	r3, [r7, #16]
}
 80066c2:	bf00      	nop
 80066c4:	e7fe      	b.n	80066c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80066c6:	4b3e      	ldr	r3, [pc, #248]	; (80067c0 <xPortStartScheduler+0x120>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a3f      	ldr	r2, [pc, #252]	; (80067c8 <xPortStartScheduler+0x128>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d10a      	bne.n	80066e6 <xPortStartScheduler+0x46>
	__asm volatile
 80066d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d4:	f383 8811 	msr	BASEPRI, r3
 80066d8:	f3bf 8f6f 	isb	sy
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	60fb      	str	r3, [r7, #12]
}
 80066e2:	bf00      	nop
 80066e4:	e7fe      	b.n	80066e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80066e6:	4b39      	ldr	r3, [pc, #228]	; (80067cc <xPortStartScheduler+0x12c>)
 80066e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	22ff      	movs	r2, #255	; 0xff
 80066f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006700:	78fb      	ldrb	r3, [r7, #3]
 8006702:	b2db      	uxtb	r3, r3
 8006704:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006708:	b2da      	uxtb	r2, r3
 800670a:	4b31      	ldr	r3, [pc, #196]	; (80067d0 <xPortStartScheduler+0x130>)
 800670c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800670e:	4b31      	ldr	r3, [pc, #196]	; (80067d4 <xPortStartScheduler+0x134>)
 8006710:	2207      	movs	r2, #7
 8006712:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006714:	e009      	b.n	800672a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006716:	4b2f      	ldr	r3, [pc, #188]	; (80067d4 <xPortStartScheduler+0x134>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	3b01      	subs	r3, #1
 800671c:	4a2d      	ldr	r2, [pc, #180]	; (80067d4 <xPortStartScheduler+0x134>)
 800671e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006720:	78fb      	ldrb	r3, [r7, #3]
 8006722:	b2db      	uxtb	r3, r3
 8006724:	005b      	lsls	r3, r3, #1
 8006726:	b2db      	uxtb	r3, r3
 8006728:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800672a:	78fb      	ldrb	r3, [r7, #3]
 800672c:	b2db      	uxtb	r3, r3
 800672e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006732:	2b80      	cmp	r3, #128	; 0x80
 8006734:	d0ef      	beq.n	8006716 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006736:	4b27      	ldr	r3, [pc, #156]	; (80067d4 <xPortStartScheduler+0x134>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f1c3 0307 	rsb	r3, r3, #7
 800673e:	2b04      	cmp	r3, #4
 8006740:	d00a      	beq.n	8006758 <xPortStartScheduler+0xb8>
	__asm volatile
 8006742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006746:	f383 8811 	msr	BASEPRI, r3
 800674a:	f3bf 8f6f 	isb	sy
 800674e:	f3bf 8f4f 	dsb	sy
 8006752:	60bb      	str	r3, [r7, #8]
}
 8006754:	bf00      	nop
 8006756:	e7fe      	b.n	8006756 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006758:	4b1e      	ldr	r3, [pc, #120]	; (80067d4 <xPortStartScheduler+0x134>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	021b      	lsls	r3, r3, #8
 800675e:	4a1d      	ldr	r2, [pc, #116]	; (80067d4 <xPortStartScheduler+0x134>)
 8006760:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006762:	4b1c      	ldr	r3, [pc, #112]	; (80067d4 <xPortStartScheduler+0x134>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800676a:	4a1a      	ldr	r2, [pc, #104]	; (80067d4 <xPortStartScheduler+0x134>)
 800676c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	b2da      	uxtb	r2, r3
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006776:	4b18      	ldr	r3, [pc, #96]	; (80067d8 <xPortStartScheduler+0x138>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a17      	ldr	r2, [pc, #92]	; (80067d8 <xPortStartScheduler+0x138>)
 800677c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006780:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006782:	4b15      	ldr	r3, [pc, #84]	; (80067d8 <xPortStartScheduler+0x138>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a14      	ldr	r2, [pc, #80]	; (80067d8 <xPortStartScheduler+0x138>)
 8006788:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800678c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800678e:	f000 f8dd 	bl	800694c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006792:	4b12      	ldr	r3, [pc, #72]	; (80067dc <xPortStartScheduler+0x13c>)
 8006794:	2200      	movs	r2, #0
 8006796:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006798:	f000 f8fc 	bl	8006994 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800679c:	4b10      	ldr	r3, [pc, #64]	; (80067e0 <xPortStartScheduler+0x140>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a0f      	ldr	r2, [pc, #60]	; (80067e0 <xPortStartScheduler+0x140>)
 80067a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80067a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80067a8:	f7ff ff66 	bl	8006678 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80067ac:	f7ff fb9a 	bl	8005ee4 <vTaskSwitchContext>
	prvTaskExitError();
 80067b0:	f7ff ff1c 	bl	80065ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80067b4:	2300      	movs	r3, #0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3718      	adds	r7, #24
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	e000ed00 	.word	0xe000ed00
 80067c4:	410fc271 	.word	0x410fc271
 80067c8:	410fc270 	.word	0x410fc270
 80067cc:	e000e400 	.word	0xe000e400
 80067d0:	200008c8 	.word	0x200008c8
 80067d4:	200008cc 	.word	0x200008cc
 80067d8:	e000ed20 	.word	0xe000ed20
 80067dc:	2000000c 	.word	0x2000000c
 80067e0:	e000ef34 	.word	0xe000ef34

080067e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
	__asm volatile
 80067ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ee:	f383 8811 	msr	BASEPRI, r3
 80067f2:	f3bf 8f6f 	isb	sy
 80067f6:	f3bf 8f4f 	dsb	sy
 80067fa:	607b      	str	r3, [r7, #4]
}
 80067fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80067fe:	4b0f      	ldr	r3, [pc, #60]	; (800683c <vPortEnterCritical+0x58>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	3301      	adds	r3, #1
 8006804:	4a0d      	ldr	r2, [pc, #52]	; (800683c <vPortEnterCritical+0x58>)
 8006806:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006808:	4b0c      	ldr	r3, [pc, #48]	; (800683c <vPortEnterCritical+0x58>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2b01      	cmp	r3, #1
 800680e:	d10f      	bne.n	8006830 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006810:	4b0b      	ldr	r3, [pc, #44]	; (8006840 <vPortEnterCritical+0x5c>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	b2db      	uxtb	r3, r3
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00a      	beq.n	8006830 <vPortEnterCritical+0x4c>
	__asm volatile
 800681a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681e:	f383 8811 	msr	BASEPRI, r3
 8006822:	f3bf 8f6f 	isb	sy
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	603b      	str	r3, [r7, #0]
}
 800682c:	bf00      	nop
 800682e:	e7fe      	b.n	800682e <vPortEnterCritical+0x4a>
	}
}
 8006830:	bf00      	nop
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr
 800683c:	2000000c 	.word	0x2000000c
 8006840:	e000ed04 	.word	0xe000ed04

08006844 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800684a:	4b12      	ldr	r3, [pc, #72]	; (8006894 <vPortExitCritical+0x50>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d10a      	bne.n	8006868 <vPortExitCritical+0x24>
	__asm volatile
 8006852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006856:	f383 8811 	msr	BASEPRI, r3
 800685a:	f3bf 8f6f 	isb	sy
 800685e:	f3bf 8f4f 	dsb	sy
 8006862:	607b      	str	r3, [r7, #4]
}
 8006864:	bf00      	nop
 8006866:	e7fe      	b.n	8006866 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006868:	4b0a      	ldr	r3, [pc, #40]	; (8006894 <vPortExitCritical+0x50>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	3b01      	subs	r3, #1
 800686e:	4a09      	ldr	r2, [pc, #36]	; (8006894 <vPortExitCritical+0x50>)
 8006870:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006872:	4b08      	ldr	r3, [pc, #32]	; (8006894 <vPortExitCritical+0x50>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d105      	bne.n	8006886 <vPortExitCritical+0x42>
 800687a:	2300      	movs	r3, #0
 800687c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006884:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006886:	bf00      	nop
 8006888:	370c      	adds	r7, #12
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	2000000c 	.word	0x2000000c
	...

080068a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80068a0:	f3ef 8009 	mrs	r0, PSP
 80068a4:	f3bf 8f6f 	isb	sy
 80068a8:	4b15      	ldr	r3, [pc, #84]	; (8006900 <pxCurrentTCBConst>)
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	f01e 0f10 	tst.w	lr, #16
 80068b0:	bf08      	it	eq
 80068b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80068b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ba:	6010      	str	r0, [r2, #0]
 80068bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80068c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80068c4:	f380 8811 	msr	BASEPRI, r0
 80068c8:	f3bf 8f4f 	dsb	sy
 80068cc:	f3bf 8f6f 	isb	sy
 80068d0:	f7ff fb08 	bl	8005ee4 <vTaskSwitchContext>
 80068d4:	f04f 0000 	mov.w	r0, #0
 80068d8:	f380 8811 	msr	BASEPRI, r0
 80068dc:	bc09      	pop	{r0, r3}
 80068de:	6819      	ldr	r1, [r3, #0]
 80068e0:	6808      	ldr	r0, [r1, #0]
 80068e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068e6:	f01e 0f10 	tst.w	lr, #16
 80068ea:	bf08      	it	eq
 80068ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80068f0:	f380 8809 	msr	PSP, r0
 80068f4:	f3bf 8f6f 	isb	sy
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop
 80068fc:	f3af 8000 	nop.w

08006900 <pxCurrentTCBConst>:
 8006900:	2000079c 	.word	0x2000079c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006904:	bf00      	nop
 8006906:	bf00      	nop

08006908 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
	__asm volatile
 800690e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006912:	f383 8811 	msr	BASEPRI, r3
 8006916:	f3bf 8f6f 	isb	sy
 800691a:	f3bf 8f4f 	dsb	sy
 800691e:	607b      	str	r3, [r7, #4]
}
 8006920:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006922:	f7ff fa27 	bl	8005d74 <xTaskIncrementTick>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d003      	beq.n	8006934 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800692c:	4b06      	ldr	r3, [pc, #24]	; (8006948 <SysTick_Handler+0x40>)
 800692e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006932:	601a      	str	r2, [r3, #0]
 8006934:	2300      	movs	r3, #0
 8006936:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	f383 8811 	msr	BASEPRI, r3
}
 800693e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006940:	bf00      	nop
 8006942:	3708      	adds	r7, #8
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	e000ed04 	.word	0xe000ed04

0800694c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800694c:	b480      	push	{r7}
 800694e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006950:	4b0b      	ldr	r3, [pc, #44]	; (8006980 <vPortSetupTimerInterrupt+0x34>)
 8006952:	2200      	movs	r2, #0
 8006954:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006956:	4b0b      	ldr	r3, [pc, #44]	; (8006984 <vPortSetupTimerInterrupt+0x38>)
 8006958:	2200      	movs	r2, #0
 800695a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800695c:	4b0a      	ldr	r3, [pc, #40]	; (8006988 <vPortSetupTimerInterrupt+0x3c>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a0a      	ldr	r2, [pc, #40]	; (800698c <vPortSetupTimerInterrupt+0x40>)
 8006962:	fba2 2303 	umull	r2, r3, r2, r3
 8006966:	099b      	lsrs	r3, r3, #6
 8006968:	4a09      	ldr	r2, [pc, #36]	; (8006990 <vPortSetupTimerInterrupt+0x44>)
 800696a:	3b01      	subs	r3, #1
 800696c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800696e:	4b04      	ldr	r3, [pc, #16]	; (8006980 <vPortSetupTimerInterrupt+0x34>)
 8006970:	2207      	movs	r2, #7
 8006972:	601a      	str	r2, [r3, #0]
}
 8006974:	bf00      	nop
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	e000e010 	.word	0xe000e010
 8006984:	e000e018 	.word	0xe000e018
 8006988:	20000000 	.word	0x20000000
 800698c:	10624dd3 	.word	0x10624dd3
 8006990:	e000e014 	.word	0xe000e014

08006994 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006994:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80069a4 <vPortEnableVFP+0x10>
 8006998:	6801      	ldr	r1, [r0, #0]
 800699a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800699e:	6001      	str	r1, [r0, #0]
 80069a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80069a2:	bf00      	nop
 80069a4:	e000ed88 	.word	0xe000ed88

080069a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b08a      	sub	sp, #40	; 0x28
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80069b0:	2300      	movs	r3, #0
 80069b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80069b4:	f7ff f934 	bl	8005c20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80069b8:	4b5b      	ldr	r3, [pc, #364]	; (8006b28 <pvPortMalloc+0x180>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d101      	bne.n	80069c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80069c0:	f000 f920 	bl	8006c04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80069c4:	4b59      	ldr	r3, [pc, #356]	; (8006b2c <pvPortMalloc+0x184>)
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4013      	ands	r3, r2
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	f040 8093 	bne.w	8006af8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d01d      	beq.n	8006a14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80069d8:	2208      	movs	r2, #8
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4413      	add	r3, r2
 80069de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f003 0307 	and.w	r3, r3, #7
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d014      	beq.n	8006a14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f023 0307 	bic.w	r3, r3, #7
 80069f0:	3308      	adds	r3, #8
 80069f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f003 0307 	and.w	r3, r3, #7
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00a      	beq.n	8006a14 <pvPortMalloc+0x6c>
	__asm volatile
 80069fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a02:	f383 8811 	msr	BASEPRI, r3
 8006a06:	f3bf 8f6f 	isb	sy
 8006a0a:	f3bf 8f4f 	dsb	sy
 8006a0e:	617b      	str	r3, [r7, #20]
}
 8006a10:	bf00      	nop
 8006a12:	e7fe      	b.n	8006a12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d06e      	beq.n	8006af8 <pvPortMalloc+0x150>
 8006a1a:	4b45      	ldr	r3, [pc, #276]	; (8006b30 <pvPortMalloc+0x188>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d869      	bhi.n	8006af8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006a24:	4b43      	ldr	r3, [pc, #268]	; (8006b34 <pvPortMalloc+0x18c>)
 8006a26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006a28:	4b42      	ldr	r3, [pc, #264]	; (8006b34 <pvPortMalloc+0x18c>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a2e:	e004      	b.n	8006a3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d903      	bls.n	8006a4c <pvPortMalloc+0xa4>
 8006a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d1f1      	bne.n	8006a30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006a4c:	4b36      	ldr	r3, [pc, #216]	; (8006b28 <pvPortMalloc+0x180>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d050      	beq.n	8006af8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a56:	6a3b      	ldr	r3, [r7, #32]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2208      	movs	r2, #8
 8006a5c:	4413      	add	r3, r2
 8006a5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	6a3b      	ldr	r3, [r7, #32]
 8006a66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6a:	685a      	ldr	r2, [r3, #4]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	1ad2      	subs	r2, r2, r3
 8006a70:	2308      	movs	r3, #8
 8006a72:	005b      	lsls	r3, r3, #1
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d91f      	bls.n	8006ab8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	f003 0307 	and.w	r3, r3, #7
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00a      	beq.n	8006aa0 <pvPortMalloc+0xf8>
	__asm volatile
 8006a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a8e:	f383 8811 	msr	BASEPRI, r3
 8006a92:	f3bf 8f6f 	isb	sy
 8006a96:	f3bf 8f4f 	dsb	sy
 8006a9a:	613b      	str	r3, [r7, #16]
}
 8006a9c:	bf00      	nop
 8006a9e:	e7fe      	b.n	8006a9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa2:	685a      	ldr	r2, [r3, #4]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	1ad2      	subs	r2, r2, r3
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ab2:	69b8      	ldr	r0, [r7, #24]
 8006ab4:	f000 f908 	bl	8006cc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ab8:	4b1d      	ldr	r3, [pc, #116]	; (8006b30 <pvPortMalloc+0x188>)
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	4a1b      	ldr	r2, [pc, #108]	; (8006b30 <pvPortMalloc+0x188>)
 8006ac4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006ac6:	4b1a      	ldr	r3, [pc, #104]	; (8006b30 <pvPortMalloc+0x188>)
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	4b1b      	ldr	r3, [pc, #108]	; (8006b38 <pvPortMalloc+0x190>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d203      	bcs.n	8006ada <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006ad2:	4b17      	ldr	r3, [pc, #92]	; (8006b30 <pvPortMalloc+0x188>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a18      	ldr	r2, [pc, #96]	; (8006b38 <pvPortMalloc+0x190>)
 8006ad8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006adc:	685a      	ldr	r2, [r3, #4]
 8006ade:	4b13      	ldr	r3, [pc, #76]	; (8006b2c <pvPortMalloc+0x184>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	431a      	orrs	r2, r3
 8006ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aea:	2200      	movs	r2, #0
 8006aec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006aee:	4b13      	ldr	r3, [pc, #76]	; (8006b3c <pvPortMalloc+0x194>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	3301      	adds	r3, #1
 8006af4:	4a11      	ldr	r2, [pc, #68]	; (8006b3c <pvPortMalloc+0x194>)
 8006af6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006af8:	f7ff f8a0 	bl	8005c3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	f003 0307 	and.w	r3, r3, #7
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00a      	beq.n	8006b1c <pvPortMalloc+0x174>
	__asm volatile
 8006b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b0a:	f383 8811 	msr	BASEPRI, r3
 8006b0e:	f3bf 8f6f 	isb	sy
 8006b12:	f3bf 8f4f 	dsb	sy
 8006b16:	60fb      	str	r3, [r7, #12]
}
 8006b18:	bf00      	nop
 8006b1a:	e7fe      	b.n	8006b1a <pvPortMalloc+0x172>
	return pvReturn;
 8006b1c:	69fb      	ldr	r3, [r7, #28]
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3728      	adds	r7, #40	; 0x28
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	200044d8 	.word	0x200044d8
 8006b2c:	200044ec 	.word	0x200044ec
 8006b30:	200044dc 	.word	0x200044dc
 8006b34:	200044d0 	.word	0x200044d0
 8006b38:	200044e0 	.word	0x200044e0
 8006b3c:	200044e4 	.word	0x200044e4

08006b40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b086      	sub	sp, #24
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d04d      	beq.n	8006bee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006b52:	2308      	movs	r3, #8
 8006b54:	425b      	negs	r3, r3
 8006b56:	697a      	ldr	r2, [r7, #20]
 8006b58:	4413      	add	r3, r2
 8006b5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	685a      	ldr	r2, [r3, #4]
 8006b64:	4b24      	ldr	r3, [pc, #144]	; (8006bf8 <vPortFree+0xb8>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4013      	ands	r3, r2
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d10a      	bne.n	8006b84 <vPortFree+0x44>
	__asm volatile
 8006b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b72:	f383 8811 	msr	BASEPRI, r3
 8006b76:	f3bf 8f6f 	isb	sy
 8006b7a:	f3bf 8f4f 	dsb	sy
 8006b7e:	60fb      	str	r3, [r7, #12]
}
 8006b80:	bf00      	nop
 8006b82:	e7fe      	b.n	8006b82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d00a      	beq.n	8006ba2 <vPortFree+0x62>
	__asm volatile
 8006b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b90:	f383 8811 	msr	BASEPRI, r3
 8006b94:	f3bf 8f6f 	isb	sy
 8006b98:	f3bf 8f4f 	dsb	sy
 8006b9c:	60bb      	str	r3, [r7, #8]
}
 8006b9e:	bf00      	nop
 8006ba0:	e7fe      	b.n	8006ba0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	685a      	ldr	r2, [r3, #4]
 8006ba6:	4b14      	ldr	r3, [pc, #80]	; (8006bf8 <vPortFree+0xb8>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4013      	ands	r3, r2
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d01e      	beq.n	8006bee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d11a      	bne.n	8006bee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	685a      	ldr	r2, [r3, #4]
 8006bbc:	4b0e      	ldr	r3, [pc, #56]	; (8006bf8 <vPortFree+0xb8>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	43db      	mvns	r3, r3
 8006bc2:	401a      	ands	r2, r3
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006bc8:	f7ff f82a 	bl	8005c20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	685a      	ldr	r2, [r3, #4]
 8006bd0:	4b0a      	ldr	r3, [pc, #40]	; (8006bfc <vPortFree+0xbc>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	4a09      	ldr	r2, [pc, #36]	; (8006bfc <vPortFree+0xbc>)
 8006bd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006bda:	6938      	ldr	r0, [r7, #16]
 8006bdc:	f000 f874 	bl	8006cc8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006be0:	4b07      	ldr	r3, [pc, #28]	; (8006c00 <vPortFree+0xc0>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	3301      	adds	r3, #1
 8006be6:	4a06      	ldr	r2, [pc, #24]	; (8006c00 <vPortFree+0xc0>)
 8006be8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006bea:	f7ff f827 	bl	8005c3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006bee:	bf00      	nop
 8006bf0:	3718      	adds	r7, #24
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	200044ec 	.word	0x200044ec
 8006bfc:	200044dc 	.word	0x200044dc
 8006c00:	200044e8 	.word	0x200044e8

08006c04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006c04:	b480      	push	{r7}
 8006c06:	b085      	sub	sp, #20
 8006c08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006c0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006c0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006c10:	4b27      	ldr	r3, [pc, #156]	; (8006cb0 <prvHeapInit+0xac>)
 8006c12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f003 0307 	and.w	r3, r3, #7
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00c      	beq.n	8006c38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	3307      	adds	r3, #7
 8006c22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f023 0307 	bic.w	r3, r3, #7
 8006c2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006c2c:	68ba      	ldr	r2, [r7, #8]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	4a1f      	ldr	r2, [pc, #124]	; (8006cb0 <prvHeapInit+0xac>)
 8006c34:	4413      	add	r3, r2
 8006c36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006c3c:	4a1d      	ldr	r2, [pc, #116]	; (8006cb4 <prvHeapInit+0xb0>)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006c42:	4b1c      	ldr	r3, [pc, #112]	; (8006cb4 <prvHeapInit+0xb0>)
 8006c44:	2200      	movs	r2, #0
 8006c46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	68ba      	ldr	r2, [r7, #8]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006c50:	2208      	movs	r2, #8
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	1a9b      	subs	r3, r3, r2
 8006c56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f023 0307 	bic.w	r3, r3, #7
 8006c5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	4a15      	ldr	r2, [pc, #84]	; (8006cb8 <prvHeapInit+0xb4>)
 8006c64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006c66:	4b14      	ldr	r3, [pc, #80]	; (8006cb8 <prvHeapInit+0xb4>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c6e:	4b12      	ldr	r3, [pc, #72]	; (8006cb8 <prvHeapInit+0xb4>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2200      	movs	r2, #0
 8006c74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	1ad2      	subs	r2, r2, r3
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c84:	4b0c      	ldr	r3, [pc, #48]	; (8006cb8 <prvHeapInit+0xb4>)
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	4a0a      	ldr	r2, [pc, #40]	; (8006cbc <prvHeapInit+0xb8>)
 8006c92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	4a09      	ldr	r2, [pc, #36]	; (8006cc0 <prvHeapInit+0xbc>)
 8006c9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c9c:	4b09      	ldr	r3, [pc, #36]	; (8006cc4 <prvHeapInit+0xc0>)
 8006c9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006ca2:	601a      	str	r2, [r3, #0]
}
 8006ca4:	bf00      	nop
 8006ca6:	3714      	adds	r7, #20
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr
 8006cb0:	200008d0 	.word	0x200008d0
 8006cb4:	200044d0 	.word	0x200044d0
 8006cb8:	200044d8 	.word	0x200044d8
 8006cbc:	200044e0 	.word	0x200044e0
 8006cc0:	200044dc 	.word	0x200044dc
 8006cc4:	200044ec 	.word	0x200044ec

08006cc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006cd0:	4b28      	ldr	r3, [pc, #160]	; (8006d74 <prvInsertBlockIntoFreeList+0xac>)
 8006cd2:	60fb      	str	r3, [r7, #12]
 8006cd4:	e002      	b.n	8006cdc <prvInsertBlockIntoFreeList+0x14>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	60fb      	str	r3, [r7, #12]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d8f7      	bhi.n	8006cd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	68ba      	ldr	r2, [r7, #8]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d108      	bne.n	8006d0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	685a      	ldr	r2, [r3, #4]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	441a      	add	r2, r3
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	68ba      	ldr	r2, [r7, #8]
 8006d14:	441a      	add	r2, r3
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d118      	bne.n	8006d50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	4b15      	ldr	r3, [pc, #84]	; (8006d78 <prvInsertBlockIntoFreeList+0xb0>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d00d      	beq.n	8006d46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685a      	ldr	r2, [r3, #4]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	441a      	add	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	601a      	str	r2, [r3, #0]
 8006d44:	e008      	b.n	8006d58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d46:	4b0c      	ldr	r3, [pc, #48]	; (8006d78 <prvInsertBlockIntoFreeList+0xb0>)
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	601a      	str	r2, [r3, #0]
 8006d4e:	e003      	b.n	8006d58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d002      	beq.n	8006d66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d66:	bf00      	nop
 8006d68:	3714      	adds	r7, #20
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop
 8006d74:	200044d0 	.word	0x200044d0
 8006d78:	200044d8 	.word	0x200044d8

08006d7c <__libc_init_array>:
 8006d7c:	b570      	push	{r4, r5, r6, lr}
 8006d7e:	4d0d      	ldr	r5, [pc, #52]	; (8006db4 <__libc_init_array+0x38>)
 8006d80:	4c0d      	ldr	r4, [pc, #52]	; (8006db8 <__libc_init_array+0x3c>)
 8006d82:	1b64      	subs	r4, r4, r5
 8006d84:	10a4      	asrs	r4, r4, #2
 8006d86:	2600      	movs	r6, #0
 8006d88:	42a6      	cmp	r6, r4
 8006d8a:	d109      	bne.n	8006da0 <__libc_init_array+0x24>
 8006d8c:	4d0b      	ldr	r5, [pc, #44]	; (8006dbc <__libc_init_array+0x40>)
 8006d8e:	4c0c      	ldr	r4, [pc, #48]	; (8006dc0 <__libc_init_array+0x44>)
 8006d90:	f000 f8f2 	bl	8006f78 <_init>
 8006d94:	1b64      	subs	r4, r4, r5
 8006d96:	10a4      	asrs	r4, r4, #2
 8006d98:	2600      	movs	r6, #0
 8006d9a:	42a6      	cmp	r6, r4
 8006d9c:	d105      	bne.n	8006daa <__libc_init_array+0x2e>
 8006d9e:	bd70      	pop	{r4, r5, r6, pc}
 8006da0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006da4:	4798      	blx	r3
 8006da6:	3601      	adds	r6, #1
 8006da8:	e7ee      	b.n	8006d88 <__libc_init_array+0xc>
 8006daa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dae:	4798      	blx	r3
 8006db0:	3601      	adds	r6, #1
 8006db2:	e7f2      	b.n	8006d9a <__libc_init_array+0x1e>
 8006db4:	080070cc 	.word	0x080070cc
 8006db8:	080070cc 	.word	0x080070cc
 8006dbc:	080070cc 	.word	0x080070cc
 8006dc0:	080070d0 	.word	0x080070d0

08006dc4 <__retarget_lock_acquire_recursive>:
 8006dc4:	4770      	bx	lr

08006dc6 <__retarget_lock_release_recursive>:
 8006dc6:	4770      	bx	lr

08006dc8 <memcpy>:
 8006dc8:	440a      	add	r2, r1
 8006dca:	4291      	cmp	r1, r2
 8006dcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006dd0:	d100      	bne.n	8006dd4 <memcpy+0xc>
 8006dd2:	4770      	bx	lr
 8006dd4:	b510      	push	{r4, lr}
 8006dd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006dda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006dde:	4291      	cmp	r1, r2
 8006de0:	d1f9      	bne.n	8006dd6 <memcpy+0xe>
 8006de2:	bd10      	pop	{r4, pc}

08006de4 <memset>:
 8006de4:	4402      	add	r2, r0
 8006de6:	4603      	mov	r3, r0
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d100      	bne.n	8006dee <memset+0xa>
 8006dec:	4770      	bx	lr
 8006dee:	f803 1b01 	strb.w	r1, [r3], #1
 8006df2:	e7f9      	b.n	8006de8 <memset+0x4>

08006df4 <cleanup_glue>:
 8006df4:	b538      	push	{r3, r4, r5, lr}
 8006df6:	460c      	mov	r4, r1
 8006df8:	6809      	ldr	r1, [r1, #0]
 8006dfa:	4605      	mov	r5, r0
 8006dfc:	b109      	cbz	r1, 8006e02 <cleanup_glue+0xe>
 8006dfe:	f7ff fff9 	bl	8006df4 <cleanup_glue>
 8006e02:	4621      	mov	r1, r4
 8006e04:	4628      	mov	r0, r5
 8006e06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e0a:	f000 b869 	b.w	8006ee0 <_free_r>
	...

08006e10 <_reclaim_reent>:
 8006e10:	4b2c      	ldr	r3, [pc, #176]	; (8006ec4 <_reclaim_reent+0xb4>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4283      	cmp	r3, r0
 8006e16:	b570      	push	{r4, r5, r6, lr}
 8006e18:	4604      	mov	r4, r0
 8006e1a:	d051      	beq.n	8006ec0 <_reclaim_reent+0xb0>
 8006e1c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006e1e:	b143      	cbz	r3, 8006e32 <_reclaim_reent+0x22>
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d14a      	bne.n	8006ebc <_reclaim_reent+0xac>
 8006e26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e28:	6819      	ldr	r1, [r3, #0]
 8006e2a:	b111      	cbz	r1, 8006e32 <_reclaim_reent+0x22>
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	f000 f857 	bl	8006ee0 <_free_r>
 8006e32:	6961      	ldr	r1, [r4, #20]
 8006e34:	b111      	cbz	r1, 8006e3c <_reclaim_reent+0x2c>
 8006e36:	4620      	mov	r0, r4
 8006e38:	f000 f852 	bl	8006ee0 <_free_r>
 8006e3c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006e3e:	b111      	cbz	r1, 8006e46 <_reclaim_reent+0x36>
 8006e40:	4620      	mov	r0, r4
 8006e42:	f000 f84d 	bl	8006ee0 <_free_r>
 8006e46:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006e48:	b111      	cbz	r1, 8006e50 <_reclaim_reent+0x40>
 8006e4a:	4620      	mov	r0, r4
 8006e4c:	f000 f848 	bl	8006ee0 <_free_r>
 8006e50:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006e52:	b111      	cbz	r1, 8006e5a <_reclaim_reent+0x4a>
 8006e54:	4620      	mov	r0, r4
 8006e56:	f000 f843 	bl	8006ee0 <_free_r>
 8006e5a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006e5c:	b111      	cbz	r1, 8006e64 <_reclaim_reent+0x54>
 8006e5e:	4620      	mov	r0, r4
 8006e60:	f000 f83e 	bl	8006ee0 <_free_r>
 8006e64:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006e66:	b111      	cbz	r1, 8006e6e <_reclaim_reent+0x5e>
 8006e68:	4620      	mov	r0, r4
 8006e6a:	f000 f839 	bl	8006ee0 <_free_r>
 8006e6e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006e70:	b111      	cbz	r1, 8006e78 <_reclaim_reent+0x68>
 8006e72:	4620      	mov	r0, r4
 8006e74:	f000 f834 	bl	8006ee0 <_free_r>
 8006e78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e7a:	b111      	cbz	r1, 8006e82 <_reclaim_reent+0x72>
 8006e7c:	4620      	mov	r0, r4
 8006e7e:	f000 f82f 	bl	8006ee0 <_free_r>
 8006e82:	69a3      	ldr	r3, [r4, #24]
 8006e84:	b1e3      	cbz	r3, 8006ec0 <_reclaim_reent+0xb0>
 8006e86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006e88:	4620      	mov	r0, r4
 8006e8a:	4798      	blx	r3
 8006e8c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006e8e:	b1b9      	cbz	r1, 8006ec0 <_reclaim_reent+0xb0>
 8006e90:	4620      	mov	r0, r4
 8006e92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006e96:	f7ff bfad 	b.w	8006df4 <cleanup_glue>
 8006e9a:	5949      	ldr	r1, [r1, r5]
 8006e9c:	b941      	cbnz	r1, 8006eb0 <_reclaim_reent+0xa0>
 8006e9e:	3504      	adds	r5, #4
 8006ea0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ea2:	2d80      	cmp	r5, #128	; 0x80
 8006ea4:	68d9      	ldr	r1, [r3, #12]
 8006ea6:	d1f8      	bne.n	8006e9a <_reclaim_reent+0x8a>
 8006ea8:	4620      	mov	r0, r4
 8006eaa:	f000 f819 	bl	8006ee0 <_free_r>
 8006eae:	e7ba      	b.n	8006e26 <_reclaim_reent+0x16>
 8006eb0:	680e      	ldr	r6, [r1, #0]
 8006eb2:	4620      	mov	r0, r4
 8006eb4:	f000 f814 	bl	8006ee0 <_free_r>
 8006eb8:	4631      	mov	r1, r6
 8006eba:	e7ef      	b.n	8006e9c <_reclaim_reent+0x8c>
 8006ebc:	2500      	movs	r5, #0
 8006ebe:	e7ef      	b.n	8006ea0 <_reclaim_reent+0x90>
 8006ec0:	bd70      	pop	{r4, r5, r6, pc}
 8006ec2:	bf00      	nop
 8006ec4:	20000010 	.word	0x20000010

08006ec8 <__malloc_lock>:
 8006ec8:	4801      	ldr	r0, [pc, #4]	; (8006ed0 <__malloc_lock+0x8>)
 8006eca:	f7ff bf7b 	b.w	8006dc4 <__retarget_lock_acquire_recursive>
 8006ece:	bf00      	nop
 8006ed0:	200044f0 	.word	0x200044f0

08006ed4 <__malloc_unlock>:
 8006ed4:	4801      	ldr	r0, [pc, #4]	; (8006edc <__malloc_unlock+0x8>)
 8006ed6:	f7ff bf76 	b.w	8006dc6 <__retarget_lock_release_recursive>
 8006eda:	bf00      	nop
 8006edc:	200044f0 	.word	0x200044f0

08006ee0 <_free_r>:
 8006ee0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ee2:	2900      	cmp	r1, #0
 8006ee4:	d044      	beq.n	8006f70 <_free_r+0x90>
 8006ee6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006eea:	9001      	str	r0, [sp, #4]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	f1a1 0404 	sub.w	r4, r1, #4
 8006ef2:	bfb8      	it	lt
 8006ef4:	18e4      	addlt	r4, r4, r3
 8006ef6:	f7ff ffe7 	bl	8006ec8 <__malloc_lock>
 8006efa:	4a1e      	ldr	r2, [pc, #120]	; (8006f74 <_free_r+0x94>)
 8006efc:	9801      	ldr	r0, [sp, #4]
 8006efe:	6813      	ldr	r3, [r2, #0]
 8006f00:	b933      	cbnz	r3, 8006f10 <_free_r+0x30>
 8006f02:	6063      	str	r3, [r4, #4]
 8006f04:	6014      	str	r4, [r2, #0]
 8006f06:	b003      	add	sp, #12
 8006f08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f0c:	f7ff bfe2 	b.w	8006ed4 <__malloc_unlock>
 8006f10:	42a3      	cmp	r3, r4
 8006f12:	d908      	bls.n	8006f26 <_free_r+0x46>
 8006f14:	6825      	ldr	r5, [r4, #0]
 8006f16:	1961      	adds	r1, r4, r5
 8006f18:	428b      	cmp	r3, r1
 8006f1a:	bf01      	itttt	eq
 8006f1c:	6819      	ldreq	r1, [r3, #0]
 8006f1e:	685b      	ldreq	r3, [r3, #4]
 8006f20:	1949      	addeq	r1, r1, r5
 8006f22:	6021      	streq	r1, [r4, #0]
 8006f24:	e7ed      	b.n	8006f02 <_free_r+0x22>
 8006f26:	461a      	mov	r2, r3
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	b10b      	cbz	r3, 8006f30 <_free_r+0x50>
 8006f2c:	42a3      	cmp	r3, r4
 8006f2e:	d9fa      	bls.n	8006f26 <_free_r+0x46>
 8006f30:	6811      	ldr	r1, [r2, #0]
 8006f32:	1855      	adds	r5, r2, r1
 8006f34:	42a5      	cmp	r5, r4
 8006f36:	d10b      	bne.n	8006f50 <_free_r+0x70>
 8006f38:	6824      	ldr	r4, [r4, #0]
 8006f3a:	4421      	add	r1, r4
 8006f3c:	1854      	adds	r4, r2, r1
 8006f3e:	42a3      	cmp	r3, r4
 8006f40:	6011      	str	r1, [r2, #0]
 8006f42:	d1e0      	bne.n	8006f06 <_free_r+0x26>
 8006f44:	681c      	ldr	r4, [r3, #0]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	6053      	str	r3, [r2, #4]
 8006f4a:	4421      	add	r1, r4
 8006f4c:	6011      	str	r1, [r2, #0]
 8006f4e:	e7da      	b.n	8006f06 <_free_r+0x26>
 8006f50:	d902      	bls.n	8006f58 <_free_r+0x78>
 8006f52:	230c      	movs	r3, #12
 8006f54:	6003      	str	r3, [r0, #0]
 8006f56:	e7d6      	b.n	8006f06 <_free_r+0x26>
 8006f58:	6825      	ldr	r5, [r4, #0]
 8006f5a:	1961      	adds	r1, r4, r5
 8006f5c:	428b      	cmp	r3, r1
 8006f5e:	bf04      	itt	eq
 8006f60:	6819      	ldreq	r1, [r3, #0]
 8006f62:	685b      	ldreq	r3, [r3, #4]
 8006f64:	6063      	str	r3, [r4, #4]
 8006f66:	bf04      	itt	eq
 8006f68:	1949      	addeq	r1, r1, r5
 8006f6a:	6021      	streq	r1, [r4, #0]
 8006f6c:	6054      	str	r4, [r2, #4]
 8006f6e:	e7ca      	b.n	8006f06 <_free_r+0x26>
 8006f70:	b003      	add	sp, #12
 8006f72:	bd30      	pop	{r4, r5, pc}
 8006f74:	200044f4 	.word	0x200044f4

08006f78 <_init>:
 8006f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f7a:	bf00      	nop
 8006f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f7e:	bc08      	pop	{r3}
 8006f80:	469e      	mov	lr, r3
 8006f82:	4770      	bx	lr

08006f84 <_fini>:
 8006f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f86:	bf00      	nop
 8006f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f8a:	bc08      	pop	{r3}
 8006f8c:	469e      	mov	lr, r3
 8006f8e:	4770      	bx	lr
