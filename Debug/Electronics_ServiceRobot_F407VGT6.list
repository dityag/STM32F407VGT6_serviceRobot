
Electronics_ServiceRobot_F407VGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e90  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08009020  08009020  00019020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800915c  0800915c  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800915c  0800915c  0001915c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009164  08009164  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009164  08009164  00019164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009168  08009168  00019168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800916c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          000046c8  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004750  20004750  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020bac  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004854  00000000  00000000  00040c64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ac0  00000000  00000000  000454b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000018f0  00000000  00000000  00046f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000271bd  00000000  00000000  00048868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021c7d  00000000  00000000  0006fa25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e895d  00000000  00000000  000916a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00179fff  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000073ac  00000000  00000000  0017a050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009008 	.word	0x08009008

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08009008 	.word	0x08009008

080001d0 <__aeabi_dmul>:
 80001d0:	b570      	push	{r4, r5, r6, lr}
 80001d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001de:	bf1d      	ittte	ne
 80001e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001e4:	ea94 0f0c 	teqne	r4, ip
 80001e8:	ea95 0f0c 	teqne	r5, ip
 80001ec:	f000 f8de 	bleq	80003ac <__aeabi_dmul+0x1dc>
 80001f0:	442c      	add	r4, r5
 80001f2:	ea81 0603 	eor.w	r6, r1, r3
 80001f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000202:	bf18      	it	ne
 8000204:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000208:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800020c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000210:	d038      	beq.n	8000284 <__aeabi_dmul+0xb4>
 8000212:	fba0 ce02 	umull	ip, lr, r0, r2
 8000216:	f04f 0500 	mov.w	r5, #0
 800021a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800021e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000222:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000226:	f04f 0600 	mov.w	r6, #0
 800022a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800022e:	f09c 0f00 	teq	ip, #0
 8000232:	bf18      	it	ne
 8000234:	f04e 0e01 	orrne.w	lr, lr, #1
 8000238:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800023c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000240:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000244:	d204      	bcs.n	8000250 <__aeabi_dmul+0x80>
 8000246:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800024a:	416d      	adcs	r5, r5
 800024c:	eb46 0606 	adc.w	r6, r6, r6
 8000250:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000254:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000258:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800025c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000260:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000264:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000268:	bf88      	it	hi
 800026a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800026e:	d81e      	bhi.n	80002ae <__aeabi_dmul+0xde>
 8000270:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000274:	bf08      	it	eq
 8000276:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800027a:	f150 0000 	adcs.w	r0, r0, #0
 800027e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000288:	ea46 0101 	orr.w	r1, r6, r1
 800028c:	ea40 0002 	orr.w	r0, r0, r2
 8000290:	ea81 0103 	eor.w	r1, r1, r3
 8000294:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000298:	bfc2      	ittt	gt
 800029a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800029e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002a2:	bd70      	popgt	{r4, r5, r6, pc}
 80002a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a8:	f04f 0e00 	mov.w	lr, #0
 80002ac:	3c01      	subs	r4, #1
 80002ae:	f300 80ab 	bgt.w	8000408 <__aeabi_dmul+0x238>
 80002b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002b6:	bfde      	ittt	le
 80002b8:	2000      	movle	r0, #0
 80002ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002be:	bd70      	pople	{r4, r5, r6, pc}
 80002c0:	f1c4 0400 	rsb	r4, r4, #0
 80002c4:	3c20      	subs	r4, #32
 80002c6:	da35      	bge.n	8000334 <__aeabi_dmul+0x164>
 80002c8:	340c      	adds	r4, #12
 80002ca:	dc1b      	bgt.n	8000304 <__aeabi_dmul+0x134>
 80002cc:	f104 0414 	add.w	r4, r4, #20
 80002d0:	f1c4 0520 	rsb	r5, r4, #32
 80002d4:	fa00 f305 	lsl.w	r3, r0, r5
 80002d8:	fa20 f004 	lsr.w	r0, r0, r4
 80002dc:	fa01 f205 	lsl.w	r2, r1, r5
 80002e0:	ea40 0002 	orr.w	r0, r0, r2
 80002e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f0:	fa21 f604 	lsr.w	r6, r1, r4
 80002f4:	eb42 0106 	adc.w	r1, r2, r6
 80002f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002fc:	bf08      	it	eq
 80002fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	f1c4 040c 	rsb	r4, r4, #12
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f304 	lsl.w	r3, r0, r4
 8000310:	fa20 f005 	lsr.w	r0, r0, r5
 8000314:	fa01 f204 	lsl.w	r2, r1, r4
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000320:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000324:	f141 0100 	adc.w	r1, r1, #0
 8000328:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800032c:	bf08      	it	eq
 800032e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f1c4 0520 	rsb	r5, r4, #32
 8000338:	fa00 f205 	lsl.w	r2, r0, r5
 800033c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000340:	fa20 f304 	lsr.w	r3, r0, r4
 8000344:	fa01 f205 	lsl.w	r2, r1, r5
 8000348:	ea43 0302 	orr.w	r3, r3, r2
 800034c:	fa21 f004 	lsr.w	r0, r1, r4
 8000350:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000354:	fa21 f204 	lsr.w	r2, r1, r4
 8000358:	ea20 0002 	bic.w	r0, r0, r2
 800035c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f094 0f00 	teq	r4, #0
 8000370:	d10f      	bne.n	8000392 <__aeabi_dmul+0x1c2>
 8000372:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000376:	0040      	lsls	r0, r0, #1
 8000378:	eb41 0101 	adc.w	r1, r1, r1
 800037c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000380:	bf08      	it	eq
 8000382:	3c01      	subeq	r4, #1
 8000384:	d0f7      	beq.n	8000376 <__aeabi_dmul+0x1a6>
 8000386:	ea41 0106 	orr.w	r1, r1, r6
 800038a:	f095 0f00 	teq	r5, #0
 800038e:	bf18      	it	ne
 8000390:	4770      	bxne	lr
 8000392:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000396:	0052      	lsls	r2, r2, #1
 8000398:	eb43 0303 	adc.w	r3, r3, r3
 800039c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a0:	bf08      	it	eq
 80003a2:	3d01      	subeq	r5, #1
 80003a4:	d0f7      	beq.n	8000396 <__aeabi_dmul+0x1c6>
 80003a6:	ea43 0306 	orr.w	r3, r3, r6
 80003aa:	4770      	bx	lr
 80003ac:	ea94 0f0c 	teq	r4, ip
 80003b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003b4:	bf18      	it	ne
 80003b6:	ea95 0f0c 	teqne	r5, ip
 80003ba:	d00c      	beq.n	80003d6 <__aeabi_dmul+0x206>
 80003bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c0:	bf18      	it	ne
 80003c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003c6:	d1d1      	bne.n	800036c <__aeabi_dmul+0x19c>
 80003c8:	ea81 0103 	eor.w	r1, r1, r3
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd70      	pop	{r4, r5, r6, pc}
 80003d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003da:	bf06      	itte	eq
 80003dc:	4610      	moveq	r0, r2
 80003de:	4619      	moveq	r1, r3
 80003e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e4:	d019      	beq.n	800041a <__aeabi_dmul+0x24a>
 80003e6:	ea94 0f0c 	teq	r4, ip
 80003ea:	d102      	bne.n	80003f2 <__aeabi_dmul+0x222>
 80003ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f0:	d113      	bne.n	800041a <__aeabi_dmul+0x24a>
 80003f2:	ea95 0f0c 	teq	r5, ip
 80003f6:	d105      	bne.n	8000404 <__aeabi_dmul+0x234>
 80003f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003fc:	bf1c      	itt	ne
 80003fe:	4610      	movne	r0, r2
 8000400:	4619      	movne	r1, r3
 8000402:	d10a      	bne.n	800041a <__aeabi_dmul+0x24a>
 8000404:	ea81 0103 	eor.w	r1, r1, r3
 8000408:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800040c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000410:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000414:	f04f 0000 	mov.w	r0, #0
 8000418:	bd70      	pop	{r4, r5, r6, pc}
 800041a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800041e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000422:	bd70      	pop	{r4, r5, r6, pc}

08000424 <__aeabi_drsub>:
 8000424:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000428:	e002      	b.n	8000430 <__adddf3>
 800042a:	bf00      	nop

0800042c <__aeabi_dsub>:
 800042c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000430 <__adddf3>:
 8000430:	b530      	push	{r4, r5, lr}
 8000432:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000436:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800043a:	ea94 0f05 	teq	r4, r5
 800043e:	bf08      	it	eq
 8000440:	ea90 0f02 	teqeq	r0, r2
 8000444:	bf1f      	itttt	ne
 8000446:	ea54 0c00 	orrsne.w	ip, r4, r0
 800044a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800044e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000452:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000456:	f000 80e2 	beq.w	800061e <__adddf3+0x1ee>
 800045a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800045e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000462:	bfb8      	it	lt
 8000464:	426d      	neglt	r5, r5
 8000466:	dd0c      	ble.n	8000482 <__adddf3+0x52>
 8000468:	442c      	add	r4, r5
 800046a:	ea80 0202 	eor.w	r2, r0, r2
 800046e:	ea81 0303 	eor.w	r3, r1, r3
 8000472:	ea82 0000 	eor.w	r0, r2, r0
 8000476:	ea83 0101 	eor.w	r1, r3, r1
 800047a:	ea80 0202 	eor.w	r2, r0, r2
 800047e:	ea81 0303 	eor.w	r3, r1, r3
 8000482:	2d36      	cmp	r5, #54	; 0x36
 8000484:	bf88      	it	hi
 8000486:	bd30      	pophi	{r4, r5, pc}
 8000488:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800048c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000490:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000494:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000498:	d002      	beq.n	80004a0 <__adddf3+0x70>
 800049a:	4240      	negs	r0, r0
 800049c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004ac:	d002      	beq.n	80004b4 <__adddf3+0x84>
 80004ae:	4252      	negs	r2, r2
 80004b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004b4:	ea94 0f05 	teq	r4, r5
 80004b8:	f000 80a7 	beq.w	800060a <__adddf3+0x1da>
 80004bc:	f1a4 0401 	sub.w	r4, r4, #1
 80004c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004c4:	db0d      	blt.n	80004e2 <__adddf3+0xb2>
 80004c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004ca:	fa22 f205 	lsr.w	r2, r2, r5
 80004ce:	1880      	adds	r0, r0, r2
 80004d0:	f141 0100 	adc.w	r1, r1, #0
 80004d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d8:	1880      	adds	r0, r0, r2
 80004da:	fa43 f305 	asr.w	r3, r3, r5
 80004de:	4159      	adcs	r1, r3
 80004e0:	e00e      	b.n	8000500 <__adddf3+0xd0>
 80004e2:	f1a5 0520 	sub.w	r5, r5, #32
 80004e6:	f10e 0e20 	add.w	lr, lr, #32
 80004ea:	2a01      	cmp	r2, #1
 80004ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f0:	bf28      	it	cs
 80004f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004f6:	fa43 f305 	asr.w	r3, r3, r5
 80004fa:	18c0      	adds	r0, r0, r3
 80004fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	d507      	bpl.n	8000516 <__adddf3+0xe6>
 8000506:	f04f 0e00 	mov.w	lr, #0
 800050a:	f1dc 0c00 	rsbs	ip, ip, #0
 800050e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000512:	eb6e 0101 	sbc.w	r1, lr, r1
 8000516:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800051a:	d31b      	bcc.n	8000554 <__adddf3+0x124>
 800051c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000520:	d30c      	bcc.n	800053c <__adddf3+0x10c>
 8000522:	0849      	lsrs	r1, r1, #1
 8000524:	ea5f 0030 	movs.w	r0, r0, rrx
 8000528:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800052c:	f104 0401 	add.w	r4, r4, #1
 8000530:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000534:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000538:	f080 809a 	bcs.w	8000670 <__adddf3+0x240>
 800053c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000540:	bf08      	it	eq
 8000542:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000546:	f150 0000 	adcs.w	r0, r0, #0
 800054a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800054e:	ea41 0105 	orr.w	r1, r1, r5
 8000552:	bd30      	pop	{r4, r5, pc}
 8000554:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000558:	4140      	adcs	r0, r0
 800055a:	eb41 0101 	adc.w	r1, r1, r1
 800055e:	3c01      	subs	r4, #1
 8000560:	bf28      	it	cs
 8000562:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000566:	d2e9      	bcs.n	800053c <__adddf3+0x10c>
 8000568:	f091 0f00 	teq	r1, #0
 800056c:	bf04      	itt	eq
 800056e:	4601      	moveq	r1, r0
 8000570:	2000      	moveq	r0, #0
 8000572:	fab1 f381 	clz	r3, r1
 8000576:	bf08      	it	eq
 8000578:	3320      	addeq	r3, #32
 800057a:	f1a3 030b 	sub.w	r3, r3, #11
 800057e:	f1b3 0220 	subs.w	r2, r3, #32
 8000582:	da0c      	bge.n	800059e <__adddf3+0x16e>
 8000584:	320c      	adds	r2, #12
 8000586:	dd08      	ble.n	800059a <__adddf3+0x16a>
 8000588:	f102 0c14 	add.w	ip, r2, #20
 800058c:	f1c2 020c 	rsb	r2, r2, #12
 8000590:	fa01 f00c 	lsl.w	r0, r1, ip
 8000594:	fa21 f102 	lsr.w	r1, r1, r2
 8000598:	e00c      	b.n	80005b4 <__adddf3+0x184>
 800059a:	f102 0214 	add.w	r2, r2, #20
 800059e:	bfd8      	it	le
 80005a0:	f1c2 0c20 	rsble	ip, r2, #32
 80005a4:	fa01 f102 	lsl.w	r1, r1, r2
 80005a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005ac:	bfdc      	itt	le
 80005ae:	ea41 010c 	orrle.w	r1, r1, ip
 80005b2:	4090      	lslle	r0, r2
 80005b4:	1ae4      	subs	r4, r4, r3
 80005b6:	bfa2      	ittt	ge
 80005b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005bc:	4329      	orrge	r1, r5
 80005be:	bd30      	popge	{r4, r5, pc}
 80005c0:	ea6f 0404 	mvn.w	r4, r4
 80005c4:	3c1f      	subs	r4, #31
 80005c6:	da1c      	bge.n	8000602 <__adddf3+0x1d2>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc0e      	bgt.n	80005ea <__adddf3+0x1ba>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0220 	rsb	r2, r4, #32
 80005d4:	fa20 f004 	lsr.w	r0, r0, r4
 80005d8:	fa01 f302 	lsl.w	r3, r1, r2
 80005dc:	ea40 0003 	orr.w	r0, r0, r3
 80005e0:	fa21 f304 	lsr.w	r3, r1, r4
 80005e4:	ea45 0103 	orr.w	r1, r5, r3
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	f1c4 040c 	rsb	r4, r4, #12
 80005ee:	f1c4 0220 	rsb	r2, r4, #32
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 f304 	lsl.w	r3, r1, r4
 80005fa:	ea40 0003 	orr.w	r0, r0, r3
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	fa21 f004 	lsr.w	r0, r1, r4
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	f094 0f00 	teq	r4, #0
 800060e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000612:	bf06      	itte	eq
 8000614:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000618:	3401      	addeq	r4, #1
 800061a:	3d01      	subne	r5, #1
 800061c:	e74e      	b.n	80004bc <__adddf3+0x8c>
 800061e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000622:	bf18      	it	ne
 8000624:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000628:	d029      	beq.n	800067e <__adddf3+0x24e>
 800062a:	ea94 0f05 	teq	r4, r5
 800062e:	bf08      	it	eq
 8000630:	ea90 0f02 	teqeq	r0, r2
 8000634:	d005      	beq.n	8000642 <__adddf3+0x212>
 8000636:	ea54 0c00 	orrs.w	ip, r4, r0
 800063a:	bf04      	itt	eq
 800063c:	4619      	moveq	r1, r3
 800063e:	4610      	moveq	r0, r2
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	ea91 0f03 	teq	r1, r3
 8000646:	bf1e      	ittt	ne
 8000648:	2100      	movne	r1, #0
 800064a:	2000      	movne	r0, #0
 800064c:	bd30      	popne	{r4, r5, pc}
 800064e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000652:	d105      	bne.n	8000660 <__adddf3+0x230>
 8000654:	0040      	lsls	r0, r0, #1
 8000656:	4149      	adcs	r1, r1
 8000658:	bf28      	it	cs
 800065a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800065e:	bd30      	pop	{r4, r5, pc}
 8000660:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000664:	bf3c      	itt	cc
 8000666:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800066a:	bd30      	popcc	{r4, r5, pc}
 800066c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000670:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000674:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000678:	f04f 0000 	mov.w	r0, #0
 800067c:	bd30      	pop	{r4, r5, pc}
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf1a      	itte	ne
 8000684:	4619      	movne	r1, r3
 8000686:	4610      	movne	r0, r2
 8000688:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800068c:	bf1c      	itt	ne
 800068e:	460b      	movne	r3, r1
 8000690:	4602      	movne	r2, r0
 8000692:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000696:	bf06      	itte	eq
 8000698:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800069c:	ea91 0f03 	teqeq	r1, r3
 80006a0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006a4:	bd30      	pop	{r4, r5, pc}
 80006a6:	bf00      	nop

080006a8 <__aeabi_ui2d>:
 80006a8:	f090 0f00 	teq	r0, #0
 80006ac:	bf04      	itt	eq
 80006ae:	2100      	moveq	r1, #0
 80006b0:	4770      	bxeq	lr
 80006b2:	b530      	push	{r4, r5, lr}
 80006b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006bc:	f04f 0500 	mov.w	r5, #0
 80006c0:	f04f 0100 	mov.w	r1, #0
 80006c4:	e750      	b.n	8000568 <__adddf3+0x138>
 80006c6:	bf00      	nop

080006c8 <__aeabi_i2d>:
 80006c8:	f090 0f00 	teq	r0, #0
 80006cc:	bf04      	itt	eq
 80006ce:	2100      	moveq	r1, #0
 80006d0:	4770      	bxeq	lr
 80006d2:	b530      	push	{r4, r5, lr}
 80006d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006dc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e0:	bf48      	it	mi
 80006e2:	4240      	negmi	r0, r0
 80006e4:	f04f 0100 	mov.w	r1, #0
 80006e8:	e73e      	b.n	8000568 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_f2d>:
 80006ec:	0042      	lsls	r2, r0, #1
 80006ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006fa:	bf1f      	itttt	ne
 80006fc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000700:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000704:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000708:	4770      	bxne	lr
 800070a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800070e:	bf08      	it	eq
 8000710:	4770      	bxeq	lr
 8000712:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000716:	bf04      	itt	eq
 8000718:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800071c:	4770      	bxeq	lr
 800071e:	b530      	push	{r4, r5, lr}
 8000720:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000724:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800072c:	e71c      	b.n	8000568 <__adddf3+0x138>
 800072e:	bf00      	nop

08000730 <__aeabi_ul2d>:
 8000730:	ea50 0201 	orrs.w	r2, r0, r1
 8000734:	bf08      	it	eq
 8000736:	4770      	bxeq	lr
 8000738:	b530      	push	{r4, r5, lr}
 800073a:	f04f 0500 	mov.w	r5, #0
 800073e:	e00a      	b.n	8000756 <__aeabi_l2d+0x16>

08000740 <__aeabi_l2d>:
 8000740:	ea50 0201 	orrs.w	r2, r0, r1
 8000744:	bf08      	it	eq
 8000746:	4770      	bxeq	lr
 8000748:	b530      	push	{r4, r5, lr}
 800074a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800074e:	d502      	bpl.n	8000756 <__aeabi_l2d+0x16>
 8000750:	4240      	negs	r0, r0
 8000752:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000756:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800075a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000762:	f43f aed8 	beq.w	8000516 <__adddf3+0xe6>
 8000766:	f04f 0203 	mov.w	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800077e:	f1c2 0320 	rsb	r3, r2, #32
 8000782:	fa00 fc03 	lsl.w	ip, r0, r3
 8000786:	fa20 f002 	lsr.w	r0, r0, r2
 800078a:	fa01 fe03 	lsl.w	lr, r1, r3
 800078e:	ea40 000e 	orr.w	r0, r0, lr
 8000792:	fa21 f102 	lsr.w	r1, r1, r2
 8000796:	4414      	add	r4, r2
 8000798:	e6bd      	b.n	8000516 <__adddf3+0xe6>
 800079a:	bf00      	nop

0800079c <__aeabi_d2iz>:
 800079c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007a4:	d215      	bcs.n	80007d2 <__aeabi_d2iz+0x36>
 80007a6:	d511      	bpl.n	80007cc <__aeabi_d2iz+0x30>
 80007a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007b0:	d912      	bls.n	80007d8 <__aeabi_d2iz+0x3c>
 80007b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80007c2:	fa23 f002 	lsr.w	r0, r3, r2
 80007c6:	bf18      	it	ne
 80007c8:	4240      	negne	r0, r0
 80007ca:	4770      	bx	lr
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	4770      	bx	lr
 80007d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007d6:	d105      	bne.n	80007e4 <__aeabi_d2iz+0x48>
 80007d8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80007dc:	bf08      	it	eq
 80007de:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80007e2:	4770      	bx	lr
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop

080007ec <__aeabi_uldivmod>:
 80007ec:	b953      	cbnz	r3, 8000804 <__aeabi_uldivmod+0x18>
 80007ee:	b94a      	cbnz	r2, 8000804 <__aeabi_uldivmod+0x18>
 80007f0:	2900      	cmp	r1, #0
 80007f2:	bf08      	it	eq
 80007f4:	2800      	cmpeq	r0, #0
 80007f6:	bf1c      	itt	ne
 80007f8:	f04f 31ff 	movne.w	r1, #4294967295
 80007fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000800:	f000 b974 	b.w	8000aec <__aeabi_idiv0>
 8000804:	f1ad 0c08 	sub.w	ip, sp, #8
 8000808:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800080c:	f000 f806 	bl	800081c <__udivmoddi4>
 8000810:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000814:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000818:	b004      	add	sp, #16
 800081a:	4770      	bx	lr

0800081c <__udivmoddi4>:
 800081c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000820:	9d08      	ldr	r5, [sp, #32]
 8000822:	4604      	mov	r4, r0
 8000824:	468e      	mov	lr, r1
 8000826:	2b00      	cmp	r3, #0
 8000828:	d14d      	bne.n	80008c6 <__udivmoddi4+0xaa>
 800082a:	428a      	cmp	r2, r1
 800082c:	4694      	mov	ip, r2
 800082e:	d969      	bls.n	8000904 <__udivmoddi4+0xe8>
 8000830:	fab2 f282 	clz	r2, r2
 8000834:	b152      	cbz	r2, 800084c <__udivmoddi4+0x30>
 8000836:	fa01 f302 	lsl.w	r3, r1, r2
 800083a:	f1c2 0120 	rsb	r1, r2, #32
 800083e:	fa20 f101 	lsr.w	r1, r0, r1
 8000842:	fa0c fc02 	lsl.w	ip, ip, r2
 8000846:	ea41 0e03 	orr.w	lr, r1, r3
 800084a:	4094      	lsls	r4, r2
 800084c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000850:	0c21      	lsrs	r1, r4, #16
 8000852:	fbbe f6f8 	udiv	r6, lr, r8
 8000856:	fa1f f78c 	uxth.w	r7, ip
 800085a:	fb08 e316 	mls	r3, r8, r6, lr
 800085e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000862:	fb06 f107 	mul.w	r1, r6, r7
 8000866:	4299      	cmp	r1, r3
 8000868:	d90a      	bls.n	8000880 <__udivmoddi4+0x64>
 800086a:	eb1c 0303 	adds.w	r3, ip, r3
 800086e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000872:	f080 811f 	bcs.w	8000ab4 <__udivmoddi4+0x298>
 8000876:	4299      	cmp	r1, r3
 8000878:	f240 811c 	bls.w	8000ab4 <__udivmoddi4+0x298>
 800087c:	3e02      	subs	r6, #2
 800087e:	4463      	add	r3, ip
 8000880:	1a5b      	subs	r3, r3, r1
 8000882:	b2a4      	uxth	r4, r4
 8000884:	fbb3 f0f8 	udiv	r0, r3, r8
 8000888:	fb08 3310 	mls	r3, r8, r0, r3
 800088c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000890:	fb00 f707 	mul.w	r7, r0, r7
 8000894:	42a7      	cmp	r7, r4
 8000896:	d90a      	bls.n	80008ae <__udivmoddi4+0x92>
 8000898:	eb1c 0404 	adds.w	r4, ip, r4
 800089c:	f100 33ff 	add.w	r3, r0, #4294967295
 80008a0:	f080 810a 	bcs.w	8000ab8 <__udivmoddi4+0x29c>
 80008a4:	42a7      	cmp	r7, r4
 80008a6:	f240 8107 	bls.w	8000ab8 <__udivmoddi4+0x29c>
 80008aa:	4464      	add	r4, ip
 80008ac:	3802      	subs	r0, #2
 80008ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008b2:	1be4      	subs	r4, r4, r7
 80008b4:	2600      	movs	r6, #0
 80008b6:	b11d      	cbz	r5, 80008c0 <__udivmoddi4+0xa4>
 80008b8:	40d4      	lsrs	r4, r2
 80008ba:	2300      	movs	r3, #0
 80008bc:	e9c5 4300 	strd	r4, r3, [r5]
 80008c0:	4631      	mov	r1, r6
 80008c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008c6:	428b      	cmp	r3, r1
 80008c8:	d909      	bls.n	80008de <__udivmoddi4+0xc2>
 80008ca:	2d00      	cmp	r5, #0
 80008cc:	f000 80ef 	beq.w	8000aae <__udivmoddi4+0x292>
 80008d0:	2600      	movs	r6, #0
 80008d2:	e9c5 0100 	strd	r0, r1, [r5]
 80008d6:	4630      	mov	r0, r6
 80008d8:	4631      	mov	r1, r6
 80008da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008de:	fab3 f683 	clz	r6, r3
 80008e2:	2e00      	cmp	r6, #0
 80008e4:	d14a      	bne.n	800097c <__udivmoddi4+0x160>
 80008e6:	428b      	cmp	r3, r1
 80008e8:	d302      	bcc.n	80008f0 <__udivmoddi4+0xd4>
 80008ea:	4282      	cmp	r2, r0
 80008ec:	f200 80f9 	bhi.w	8000ae2 <__udivmoddi4+0x2c6>
 80008f0:	1a84      	subs	r4, r0, r2
 80008f2:	eb61 0303 	sbc.w	r3, r1, r3
 80008f6:	2001      	movs	r0, #1
 80008f8:	469e      	mov	lr, r3
 80008fa:	2d00      	cmp	r5, #0
 80008fc:	d0e0      	beq.n	80008c0 <__udivmoddi4+0xa4>
 80008fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000902:	e7dd      	b.n	80008c0 <__udivmoddi4+0xa4>
 8000904:	b902      	cbnz	r2, 8000908 <__udivmoddi4+0xec>
 8000906:	deff      	udf	#255	; 0xff
 8000908:	fab2 f282 	clz	r2, r2
 800090c:	2a00      	cmp	r2, #0
 800090e:	f040 8092 	bne.w	8000a36 <__udivmoddi4+0x21a>
 8000912:	eba1 010c 	sub.w	r1, r1, ip
 8000916:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800091a:	fa1f fe8c 	uxth.w	lr, ip
 800091e:	2601      	movs	r6, #1
 8000920:	0c20      	lsrs	r0, r4, #16
 8000922:	fbb1 f3f7 	udiv	r3, r1, r7
 8000926:	fb07 1113 	mls	r1, r7, r3, r1
 800092a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800092e:	fb0e f003 	mul.w	r0, lr, r3
 8000932:	4288      	cmp	r0, r1
 8000934:	d908      	bls.n	8000948 <__udivmoddi4+0x12c>
 8000936:	eb1c 0101 	adds.w	r1, ip, r1
 800093a:	f103 38ff 	add.w	r8, r3, #4294967295
 800093e:	d202      	bcs.n	8000946 <__udivmoddi4+0x12a>
 8000940:	4288      	cmp	r0, r1
 8000942:	f200 80cb 	bhi.w	8000adc <__udivmoddi4+0x2c0>
 8000946:	4643      	mov	r3, r8
 8000948:	1a09      	subs	r1, r1, r0
 800094a:	b2a4      	uxth	r4, r4
 800094c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000950:	fb07 1110 	mls	r1, r7, r0, r1
 8000954:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000958:	fb0e fe00 	mul.w	lr, lr, r0
 800095c:	45a6      	cmp	lr, r4
 800095e:	d908      	bls.n	8000972 <__udivmoddi4+0x156>
 8000960:	eb1c 0404 	adds.w	r4, ip, r4
 8000964:	f100 31ff 	add.w	r1, r0, #4294967295
 8000968:	d202      	bcs.n	8000970 <__udivmoddi4+0x154>
 800096a:	45a6      	cmp	lr, r4
 800096c:	f200 80bb 	bhi.w	8000ae6 <__udivmoddi4+0x2ca>
 8000970:	4608      	mov	r0, r1
 8000972:	eba4 040e 	sub.w	r4, r4, lr
 8000976:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800097a:	e79c      	b.n	80008b6 <__udivmoddi4+0x9a>
 800097c:	f1c6 0720 	rsb	r7, r6, #32
 8000980:	40b3      	lsls	r3, r6
 8000982:	fa22 fc07 	lsr.w	ip, r2, r7
 8000986:	ea4c 0c03 	orr.w	ip, ip, r3
 800098a:	fa20 f407 	lsr.w	r4, r0, r7
 800098e:	fa01 f306 	lsl.w	r3, r1, r6
 8000992:	431c      	orrs	r4, r3
 8000994:	40f9      	lsrs	r1, r7
 8000996:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800099a:	fa00 f306 	lsl.w	r3, r0, r6
 800099e:	fbb1 f8f9 	udiv	r8, r1, r9
 80009a2:	0c20      	lsrs	r0, r4, #16
 80009a4:	fa1f fe8c 	uxth.w	lr, ip
 80009a8:	fb09 1118 	mls	r1, r9, r8, r1
 80009ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009b0:	fb08 f00e 	mul.w	r0, r8, lr
 80009b4:	4288      	cmp	r0, r1
 80009b6:	fa02 f206 	lsl.w	r2, r2, r6
 80009ba:	d90b      	bls.n	80009d4 <__udivmoddi4+0x1b8>
 80009bc:	eb1c 0101 	adds.w	r1, ip, r1
 80009c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80009c4:	f080 8088 	bcs.w	8000ad8 <__udivmoddi4+0x2bc>
 80009c8:	4288      	cmp	r0, r1
 80009ca:	f240 8085 	bls.w	8000ad8 <__udivmoddi4+0x2bc>
 80009ce:	f1a8 0802 	sub.w	r8, r8, #2
 80009d2:	4461      	add	r1, ip
 80009d4:	1a09      	subs	r1, r1, r0
 80009d6:	b2a4      	uxth	r4, r4
 80009d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80009dc:	fb09 1110 	mls	r1, r9, r0, r1
 80009e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80009e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80009e8:	458e      	cmp	lr, r1
 80009ea:	d908      	bls.n	80009fe <__udivmoddi4+0x1e2>
 80009ec:	eb1c 0101 	adds.w	r1, ip, r1
 80009f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80009f4:	d26c      	bcs.n	8000ad0 <__udivmoddi4+0x2b4>
 80009f6:	458e      	cmp	lr, r1
 80009f8:	d96a      	bls.n	8000ad0 <__udivmoddi4+0x2b4>
 80009fa:	3802      	subs	r0, #2
 80009fc:	4461      	add	r1, ip
 80009fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a02:	fba0 9402 	umull	r9, r4, r0, r2
 8000a06:	eba1 010e 	sub.w	r1, r1, lr
 8000a0a:	42a1      	cmp	r1, r4
 8000a0c:	46c8      	mov	r8, r9
 8000a0e:	46a6      	mov	lr, r4
 8000a10:	d356      	bcc.n	8000ac0 <__udivmoddi4+0x2a4>
 8000a12:	d053      	beq.n	8000abc <__udivmoddi4+0x2a0>
 8000a14:	b15d      	cbz	r5, 8000a2e <__udivmoddi4+0x212>
 8000a16:	ebb3 0208 	subs.w	r2, r3, r8
 8000a1a:	eb61 010e 	sbc.w	r1, r1, lr
 8000a1e:	fa01 f707 	lsl.w	r7, r1, r7
 8000a22:	fa22 f306 	lsr.w	r3, r2, r6
 8000a26:	40f1      	lsrs	r1, r6
 8000a28:	431f      	orrs	r7, r3
 8000a2a:	e9c5 7100 	strd	r7, r1, [r5]
 8000a2e:	2600      	movs	r6, #0
 8000a30:	4631      	mov	r1, r6
 8000a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a36:	f1c2 0320 	rsb	r3, r2, #32
 8000a3a:	40d8      	lsrs	r0, r3
 8000a3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a40:	fa21 f303 	lsr.w	r3, r1, r3
 8000a44:	4091      	lsls	r1, r2
 8000a46:	4301      	orrs	r1, r0
 8000a48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a4c:	fa1f fe8c 	uxth.w	lr, ip
 8000a50:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a54:	fb07 3610 	mls	r6, r7, r0, r3
 8000a58:	0c0b      	lsrs	r3, r1, #16
 8000a5a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a5e:	fb00 f60e 	mul.w	r6, r0, lr
 8000a62:	429e      	cmp	r6, r3
 8000a64:	fa04 f402 	lsl.w	r4, r4, r2
 8000a68:	d908      	bls.n	8000a7c <__udivmoddi4+0x260>
 8000a6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a72:	d22f      	bcs.n	8000ad4 <__udivmoddi4+0x2b8>
 8000a74:	429e      	cmp	r6, r3
 8000a76:	d92d      	bls.n	8000ad4 <__udivmoddi4+0x2b8>
 8000a78:	3802      	subs	r0, #2
 8000a7a:	4463      	add	r3, ip
 8000a7c:	1b9b      	subs	r3, r3, r6
 8000a7e:	b289      	uxth	r1, r1
 8000a80:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a84:	fb07 3316 	mls	r3, r7, r6, r3
 8000a88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a8c:	fb06 f30e 	mul.w	r3, r6, lr
 8000a90:	428b      	cmp	r3, r1
 8000a92:	d908      	bls.n	8000aa6 <__udivmoddi4+0x28a>
 8000a94:	eb1c 0101 	adds.w	r1, ip, r1
 8000a98:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a9c:	d216      	bcs.n	8000acc <__udivmoddi4+0x2b0>
 8000a9e:	428b      	cmp	r3, r1
 8000aa0:	d914      	bls.n	8000acc <__udivmoddi4+0x2b0>
 8000aa2:	3e02      	subs	r6, #2
 8000aa4:	4461      	add	r1, ip
 8000aa6:	1ac9      	subs	r1, r1, r3
 8000aa8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000aac:	e738      	b.n	8000920 <__udivmoddi4+0x104>
 8000aae:	462e      	mov	r6, r5
 8000ab0:	4628      	mov	r0, r5
 8000ab2:	e705      	b.n	80008c0 <__udivmoddi4+0xa4>
 8000ab4:	4606      	mov	r6, r0
 8000ab6:	e6e3      	b.n	8000880 <__udivmoddi4+0x64>
 8000ab8:	4618      	mov	r0, r3
 8000aba:	e6f8      	b.n	80008ae <__udivmoddi4+0x92>
 8000abc:	454b      	cmp	r3, r9
 8000abe:	d2a9      	bcs.n	8000a14 <__udivmoddi4+0x1f8>
 8000ac0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ac4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ac8:	3801      	subs	r0, #1
 8000aca:	e7a3      	b.n	8000a14 <__udivmoddi4+0x1f8>
 8000acc:	4646      	mov	r6, r8
 8000ace:	e7ea      	b.n	8000aa6 <__udivmoddi4+0x28a>
 8000ad0:	4620      	mov	r0, r4
 8000ad2:	e794      	b.n	80009fe <__udivmoddi4+0x1e2>
 8000ad4:	4640      	mov	r0, r8
 8000ad6:	e7d1      	b.n	8000a7c <__udivmoddi4+0x260>
 8000ad8:	46d0      	mov	r8, sl
 8000ada:	e77b      	b.n	80009d4 <__udivmoddi4+0x1b8>
 8000adc:	3b02      	subs	r3, #2
 8000ade:	4461      	add	r1, ip
 8000ae0:	e732      	b.n	8000948 <__udivmoddi4+0x12c>
 8000ae2:	4630      	mov	r0, r6
 8000ae4:	e709      	b.n	80008fa <__udivmoddi4+0xde>
 8000ae6:	4464      	add	r4, ip
 8000ae8:	3802      	subs	r0, #2
 8000aea:	e742      	b.n	8000972 <__udivmoddi4+0x156>

08000aec <__aeabi_idiv0>:
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000af6:	463b      	mov	r3, r7
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b02:	4b21      	ldr	r3, [pc, #132]	; (8000b88 <MX_ADC1_Init+0x98>)
 8000b04:	4a21      	ldr	r2, [pc, #132]	; (8000b8c <MX_ADC1_Init+0x9c>)
 8000b06:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b08:	4b1f      	ldr	r3, [pc, #124]	; (8000b88 <MX_ADC1_Init+0x98>)
 8000b0a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b0e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b10:	4b1d      	ldr	r3, [pc, #116]	; (8000b88 <MX_ADC1_Init+0x98>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000b16:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <MX_ADC1_Init+0x98>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b1c:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <MX_ADC1_Init+0x98>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b22:	4b19      	ldr	r3, [pc, #100]	; (8000b88 <MX_ADC1_Init+0x98>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b2a:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <MX_ADC1_Init+0x98>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b30:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <MX_ADC1_Init+0x98>)
 8000b32:	4a17      	ldr	r2, [pc, #92]	; (8000b90 <MX_ADC1_Init+0xa0>)
 8000b34:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b36:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <MX_ADC1_Init+0x98>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <MX_ADC1_Init+0x98>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <MX_ADC1_Init+0x98>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b4a:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <MX_ADC1_Init+0x98>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b50:	480d      	ldr	r0, [pc, #52]	; (8000b88 <MX_ADC1_Init+0x98>)
 8000b52:	f002 fb0b 	bl	800316c <HAL_ADC_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000b5c:	f001 f988 	bl	8001e70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000b60:	230b      	movs	r3, #11
 8000b62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b64:	2301      	movs	r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b6c:	463b      	mov	r3, r7
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4805      	ldr	r0, [pc, #20]	; (8000b88 <MX_ADC1_Init+0x98>)
 8000b72:	f002 fb3f 	bl	80031f4 <HAL_ADC_ConfigChannel>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000b7c:	f001 f978 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b80:	bf00      	nop
 8000b82:	3710      	adds	r7, #16
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	200000a4 	.word	0x200000a4
 8000b8c:	40012000 	.word	0x40012000
 8000b90:	0f000001 	.word	0x0f000001

08000b94 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08a      	sub	sp, #40	; 0x28
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a17      	ldr	r2, [pc, #92]	; (8000c10 <HAL_ADC_MspInit+0x7c>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d127      	bne.n	8000c06 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	4b16      	ldr	r3, [pc, #88]	; (8000c14 <HAL_ADC_MspInit+0x80>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bbe:	4a15      	ldr	r2, [pc, #84]	; (8000c14 <HAL_ADC_MspInit+0x80>)
 8000bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bc6:	4b13      	ldr	r3, [pc, #76]	; (8000c14 <HAL_ADC_MspInit+0x80>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <HAL_ADC_MspInit+0x80>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a0e      	ldr	r2, [pc, #56]	; (8000c14 <HAL_ADC_MspInit+0x80>)
 8000bdc:	f043 0304 	orr.w	r3, r3, #4
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <HAL_ADC_MspInit+0x80>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0304 	and.w	r3, r3, #4
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000bee:	2306      	movs	r3, #6
 8000bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4805      	ldr	r0, [pc, #20]	; (8000c18 <HAL_ADC_MspInit+0x84>)
 8000c02:	f003 fa63 	bl	80040cc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000c06:	bf00      	nop
 8000c08:	3728      	adds	r7, #40	; 0x28
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40012000 	.word	0x40012000
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40020800 	.word	0x40020800

08000c1c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000c20:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <MX_CAN1_Init+0x60>)
 8000c22:	4a17      	ldr	r2, [pc, #92]	; (8000c80 <MX_CAN1_Init+0x64>)
 8000c24:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000c26:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <MX_CAN1_Init+0x60>)
 8000c28:	2210      	movs	r2, #16
 8000c2a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000c2c:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <MX_CAN1_Init+0x60>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c32:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <MX_CAN1_Init+0x60>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000c38:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <MX_CAN1_Init+0x60>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <MX_CAN1_Init+0x60>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000c44:	4b0d      	ldr	r3, [pc, #52]	; (8000c7c <MX_CAN1_Init+0x60>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <MX_CAN1_Init+0x60>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000c50:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <MX_CAN1_Init+0x60>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000c56:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <MX_CAN1_Init+0x60>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000c5c:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <MX_CAN1_Init+0x60>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <MX_CAN1_Init+0x60>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000c68:	4804      	ldr	r0, [pc, #16]	; (8000c7c <MX_CAN1_Init+0x60>)
 8000c6a:	f002 fce1 	bl	8003630 <HAL_CAN_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000c74:	f001 f8fc 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	200000ec 	.word	0x200000ec
 8000c80:	40006400 	.word	0x40006400

08000c84 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	; 0x28
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a19      	ldr	r2, [pc, #100]	; (8000d08 <HAL_CAN_MspInit+0x84>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d12b      	bne.n	8000cfe <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <HAL_CAN_MspInit+0x88>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	4a17      	ldr	r2, [pc, #92]	; (8000d0c <HAL_CAN_MspInit+0x88>)
 8000cb0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb6:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <HAL_CAN_MspInit+0x88>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <HAL_CAN_MspInit+0x88>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a10      	ldr	r2, [pc, #64]	; (8000d0c <HAL_CAN_MspInit+0x88>)
 8000ccc:	f043 0308 	orr.w	r3, r3, #8
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <HAL_CAN_MspInit+0x88>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0308 	and.w	r3, r3, #8
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cea:	2303      	movs	r3, #3
 8000cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000cee:	2309      	movs	r3, #9
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf2:	f107 0314 	add.w	r3, r7, #20
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4805      	ldr	r0, [pc, #20]	; (8000d10 <HAL_CAN_MspInit+0x8c>)
 8000cfa:	f003 f9e7 	bl	80040cc <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000cfe:	bf00      	nop
 8000d00:	3728      	adds	r7, #40	; 0x28
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40006400 	.word	0x40006400
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020c00 	.word	0x40020c00

08000d14 <map>:
extern short int motor_SetPoint[3];
extern float proportional_motor[3], integral_motor[3], derivative_motor[3];
extern float prev_enc[3], error_velo_motor[3], previous_error_velo_motor[3];
extern float outputPWM[3];

long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
 8000d20:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000d22:	68fa      	ldr	r2, [r7, #12]
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	1ad3      	subs	r3, r2, r3
 8000d28:	69b9      	ldr	r1, [r7, #24]
 8000d2a:	683a      	ldr	r2, [r7, #0]
 8000d2c:	1a8a      	subs	r2, r1, r2
 8000d2e:	fb03 f202 	mul.w	r2, r3, r2
 8000d32:	6879      	ldr	r1, [r7, #4]
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	1acb      	subs	r3, r1, r3
 8000d38:	fb92 f2f3 	sdiv	r2, r2, r3
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	4413      	add	r3, r2
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	0000      	movs	r0, r0
	...

08000d50 <motor_VectorKinematic>:

void motor_VectorKinematic(short int vx, short int vy, short int vsudut)
{
 8000d50:	b5b0      	push	{r4, r5, r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	80fb      	strh	r3, [r7, #6]
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	80bb      	strh	r3, [r7, #4]
 8000d5e:	4613      	mov	r3, r2
 8000d60:	807b      	strh	r3, [r7, #2]
	motor_SetPoint[0] = (short int) (((vx*-1) * cosf(0 * M_PI/180)) + ((vy*1.1) * sinf(0 * M_PI/180)) + (vsudut*-0.72));
 8000d62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d66:	425b      	negs	r3, r3
 8000d68:	ee07 3a90 	vmov	s15, r3
 8000d6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d70:	ee17 0a90 	vmov	r0, s15
 8000d74:	f7ff fcba 	bl	80006ec <__aeabi_f2d>
 8000d78:	4604      	mov	r4, r0
 8000d7a:	460d      	mov	r5, r1
 8000d7c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fca1 	bl	80006c8 <__aeabi_i2d>
 8000d86:	a388      	add	r3, pc, #544	; (adr r3, 8000fa8 <motor_VectorKinematic+0x258>)
 8000d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d8c:	f7ff fa20 	bl	80001d0 <__aeabi_dmul>
 8000d90:	4602      	mov	r2, r0
 8000d92:	460b      	mov	r3, r1
 8000d94:	4610      	mov	r0, r2
 8000d96:	4619      	mov	r1, r3
 8000d98:	f04f 0200 	mov.w	r2, #0
 8000d9c:	f04f 0300 	mov.w	r3, #0
 8000da0:	f7ff fa16 	bl	80001d0 <__aeabi_dmul>
 8000da4:	4602      	mov	r2, r0
 8000da6:	460b      	mov	r3, r1
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	f7ff fb40 	bl	8000430 <__adddf3>
 8000db0:	4602      	mov	r2, r0
 8000db2:	460b      	mov	r3, r1
 8000db4:	4614      	mov	r4, r2
 8000db6:	461d      	mov	r5, r3
 8000db8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fc83 	bl	80006c8 <__aeabi_i2d>
 8000dc2:	a37d      	add	r3, pc, #500	; (adr r3, 8000fb8 <motor_VectorKinematic+0x268>)
 8000dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc8:	f7ff fa02 	bl	80001d0 <__aeabi_dmul>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	460b      	mov	r3, r1
 8000dd0:	4620      	mov	r0, r4
 8000dd2:	4629      	mov	r1, r5
 8000dd4:	f7ff fb2c 	bl	8000430 <__adddf3>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4610      	mov	r0, r2
 8000dde:	4619      	mov	r1, r3
 8000de0:	f7ff fcdc 	bl	800079c <__aeabi_d2iz>
 8000de4:	4603      	mov	r3, r0
 8000de6:	b21a      	sxth	r2, r3
 8000de8:	4b77      	ldr	r3, [pc, #476]	; (8000fc8 <motor_VectorKinematic+0x278>)
 8000dea:	801a      	strh	r2, [r3, #0]
	motor_SetPoint[1] = (short int) (((vx*-1) * cosf(240 * M_PI/180)) + ((vy*1.1) * sinf(240 * M_PI/180))*1.2 + (vsudut*-0.72));
 8000dec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000df0:	425b      	negs	r3, r3
 8000df2:	ee07 3a90 	vmov	s15, r3
 8000df6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dfa:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8000fcc <motor_VectorKinematic+0x27c>
 8000dfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e02:	ee17 0a90 	vmov	r0, s15
 8000e06:	f7ff fc71 	bl	80006ec <__aeabi_f2d>
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	460d      	mov	r5, r1
 8000e0e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff fc58 	bl	80006c8 <__aeabi_i2d>
 8000e18:	a363      	add	r3, pc, #396	; (adr r3, 8000fa8 <motor_VectorKinematic+0x258>)
 8000e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e1e:	f7ff f9d7 	bl	80001d0 <__aeabi_dmul>
 8000e22:	4602      	mov	r2, r0
 8000e24:	460b      	mov	r3, r1
 8000e26:	4610      	mov	r0, r2
 8000e28:	4619      	mov	r1, r3
 8000e2a:	a361      	add	r3, pc, #388	; (adr r3, 8000fb0 <motor_VectorKinematic+0x260>)
 8000e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e30:	f7ff f9ce 	bl	80001d0 <__aeabi_dmul>
 8000e34:	4602      	mov	r2, r0
 8000e36:	460b      	mov	r3, r1
 8000e38:	4610      	mov	r0, r2
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000e40:	4b63      	ldr	r3, [pc, #396]	; (8000fd0 <motor_VectorKinematic+0x280>)
 8000e42:	f7ff f9c5 	bl	80001d0 <__aeabi_dmul>
 8000e46:	4602      	mov	r2, r0
 8000e48:	460b      	mov	r3, r1
 8000e4a:	4620      	mov	r0, r4
 8000e4c:	4629      	mov	r1, r5
 8000e4e:	f7ff faef 	bl	8000430 <__adddf3>
 8000e52:	4602      	mov	r2, r0
 8000e54:	460b      	mov	r3, r1
 8000e56:	4614      	mov	r4, r2
 8000e58:	461d      	mov	r5, r3
 8000e5a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff fc32 	bl	80006c8 <__aeabi_i2d>
 8000e64:	a354      	add	r3, pc, #336	; (adr r3, 8000fb8 <motor_VectorKinematic+0x268>)
 8000e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e6a:	f7ff f9b1 	bl	80001d0 <__aeabi_dmul>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	460b      	mov	r3, r1
 8000e72:	4620      	mov	r0, r4
 8000e74:	4629      	mov	r1, r5
 8000e76:	f7ff fadb 	bl	8000430 <__adddf3>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	4610      	mov	r0, r2
 8000e80:	4619      	mov	r1, r3
 8000e82:	f7ff fc8b 	bl	800079c <__aeabi_d2iz>
 8000e86:	4603      	mov	r3, r0
 8000e88:	b21a      	sxth	r2, r3
 8000e8a:	4b4f      	ldr	r3, [pc, #316]	; (8000fc8 <motor_VectorKinematic+0x278>)
 8000e8c:	805a      	strh	r2, [r3, #2]
	motor_SetPoint[2] = (short int) (((vx*-1) * cosf(120 * M_PI/180)) + ((vy*1.1) * sinf(120 * M_PI/180))*1.2 + (vsudut*-0.72));
 8000e8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e92:	425b      	negs	r3, r3
 8000e94:	ee07 3a90 	vmov	s15, r3
 8000e98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e9c:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8000fd4 <motor_VectorKinematic+0x284>
 8000ea0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ea4:	ee17 0a90 	vmov	r0, s15
 8000ea8:	f7ff fc20 	bl	80006ec <__aeabi_f2d>
 8000eac:	4604      	mov	r4, r0
 8000eae:	460d      	mov	r5, r1
 8000eb0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fc07 	bl	80006c8 <__aeabi_i2d>
 8000eba:	a33b      	add	r3, pc, #236	; (adr r3, 8000fa8 <motor_VectorKinematic+0x258>)
 8000ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec0:	f7ff f986 	bl	80001d0 <__aeabi_dmul>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	4610      	mov	r0, r2
 8000eca:	4619      	mov	r1, r3
 8000ecc:	a33c      	add	r3, pc, #240	; (adr r3, 8000fc0 <motor_VectorKinematic+0x270>)
 8000ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed2:	f7ff f97d 	bl	80001d0 <__aeabi_dmul>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	460b      	mov	r3, r1
 8000eda:	4610      	mov	r0, r2
 8000edc:	4619      	mov	r1, r3
 8000ede:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000ee2:	4b3b      	ldr	r3, [pc, #236]	; (8000fd0 <motor_VectorKinematic+0x280>)
 8000ee4:	f7ff f974 	bl	80001d0 <__aeabi_dmul>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	460b      	mov	r3, r1
 8000eec:	4620      	mov	r0, r4
 8000eee:	4629      	mov	r1, r5
 8000ef0:	f7ff fa9e 	bl	8000430 <__adddf3>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	4614      	mov	r4, r2
 8000efa:	461d      	mov	r5, r3
 8000efc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fbe1 	bl	80006c8 <__aeabi_i2d>
 8000f06:	a32c      	add	r3, pc, #176	; (adr r3, 8000fb8 <motor_VectorKinematic+0x268>)
 8000f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f0c:	f7ff f960 	bl	80001d0 <__aeabi_dmul>
 8000f10:	4602      	mov	r2, r0
 8000f12:	460b      	mov	r3, r1
 8000f14:	4620      	mov	r0, r4
 8000f16:	4629      	mov	r1, r5
 8000f18:	f7ff fa8a 	bl	8000430 <__adddf3>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	460b      	mov	r3, r1
 8000f20:	4610      	mov	r0, r2
 8000f22:	4619      	mov	r1, r3
 8000f24:	f7ff fc3a 	bl	800079c <__aeabi_d2iz>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	b21a      	sxth	r2, r3
 8000f2c:	4b26      	ldr	r3, [pc, #152]	; (8000fc8 <motor_VectorKinematic+0x278>)
 8000f2e:	809a      	strh	r2, [r3, #4]
	motor_SetPoint[0] = constrain(motor_SetPoint[0], -150, 150);
 8000f30:	4b25      	ldr	r3, [pc, #148]	; (8000fc8 <motor_VectorKinematic+0x278>)
 8000f32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f36:	f113 0f96 	cmn.w	r3, #150	; 0x96
 8000f3a:	db07      	blt.n	8000f4c <motor_VectorKinematic+0x1fc>
 8000f3c:	4b22      	ldr	r3, [pc, #136]	; (8000fc8 <motor_VectorKinematic+0x278>)
 8000f3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f42:	2b96      	cmp	r3, #150	; 0x96
 8000f44:	bfa8      	it	ge
 8000f46:	2396      	movge	r3, #150	; 0x96
 8000f48:	b21b      	sxth	r3, r3
 8000f4a:	e001      	b.n	8000f50 <motor_VectorKinematic+0x200>
 8000f4c:	f06f 0395 	mvn.w	r3, #149	; 0x95
 8000f50:	4a1d      	ldr	r2, [pc, #116]	; (8000fc8 <motor_VectorKinematic+0x278>)
 8000f52:	8013      	strh	r3, [r2, #0]
	motor_SetPoint[1] = constrain(motor_SetPoint[1], -150, 150);
 8000f54:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <motor_VectorKinematic+0x278>)
 8000f56:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f5a:	f113 0f96 	cmn.w	r3, #150	; 0x96
 8000f5e:	db07      	blt.n	8000f70 <motor_VectorKinematic+0x220>
 8000f60:	4b19      	ldr	r3, [pc, #100]	; (8000fc8 <motor_VectorKinematic+0x278>)
 8000f62:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f66:	2b96      	cmp	r3, #150	; 0x96
 8000f68:	bfa8      	it	ge
 8000f6a:	2396      	movge	r3, #150	; 0x96
 8000f6c:	b21b      	sxth	r3, r3
 8000f6e:	e001      	b.n	8000f74 <motor_VectorKinematic+0x224>
 8000f70:	f06f 0395 	mvn.w	r3, #149	; 0x95
 8000f74:	4a14      	ldr	r2, [pc, #80]	; (8000fc8 <motor_VectorKinematic+0x278>)
 8000f76:	8053      	strh	r3, [r2, #2]
	motor_SetPoint[2] = constrain(motor_SetPoint[2], -150, 150);
 8000f78:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <motor_VectorKinematic+0x278>)
 8000f7a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f7e:	f113 0f96 	cmn.w	r3, #150	; 0x96
 8000f82:	db07      	blt.n	8000f94 <motor_VectorKinematic+0x244>
 8000f84:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <motor_VectorKinematic+0x278>)
 8000f86:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f8a:	2b96      	cmp	r3, #150	; 0x96
 8000f8c:	bfa8      	it	ge
 8000f8e:	2396      	movge	r3, #150	; 0x96
 8000f90:	b21b      	sxth	r3, r3
 8000f92:	e001      	b.n	8000f98 <motor_VectorKinematic+0x248>
 8000f94:	f06f 0395 	mvn.w	r3, #149	; 0x95
 8000f98:	4a0b      	ldr	r2, [pc, #44]	; (8000fc8 <motor_VectorKinematic+0x278>)
 8000f9a:	8093      	strh	r3, [r2, #4]
}
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bdb0      	pop	{r4, r5, r7, pc}
 8000fa4:	f3af 8000 	nop.w
 8000fa8:	9999999a 	.word	0x9999999a
 8000fac:	3ff19999 	.word	0x3ff19999
 8000fb0:	00000000 	.word	0x00000000
 8000fb4:	bfebb67b 	.word	0xbfebb67b
 8000fb8:	70a3d70a 	.word	0x70a3d70a
 8000fbc:	bfe70a3d 	.word	0xbfe70a3d
 8000fc0:	e0000000 	.word	0xe0000000
 8000fc4:	3febb67a 	.word	0x3febb67a
 8000fc8:	2000049c 	.word	0x2000049c
 8000fcc:	befffffd 	.word	0xbefffffd
 8000fd0:	3ff33333 	.word	0x3ff33333
 8000fd4:	bf000001 	.word	0xbf000001

08000fd8 <motor_VeloControl>:

void motor_VeloControl(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
	for(int i = 0; i < 3; i++){
 8000fde:	2300      	movs	r3, #0
 8000fe0:	607b      	str	r3, [r7, #4]
 8000fe2:	e112      	b.n	800120a <motor_VeloControl+0x232>
		motor_velo[i] = (encoder[i] - prev_enc[i]);
 8000fe4:	4a8e      	ldr	r2, [pc, #568]	; (8001220 <motor_VeloControl+0x248>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fec:	ee07 3a90 	vmov	s15, r3
 8000ff0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ff4:	4a8b      	ldr	r2, [pc, #556]	; (8001224 <motor_VeloControl+0x24c>)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	4413      	add	r3, r2
 8000ffc:	edd3 7a00 	vldr	s15, [r3]
 8001000:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001004:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001008:	ee17 3a90 	vmov	r3, s15
 800100c:	b219      	sxth	r1, r3
 800100e:	4a86      	ldr	r2, [pc, #536]	; (8001228 <motor_VeloControl+0x250>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		error_velo_motor[i] = motor_SetPoint[i] - motor_velo[i];
 8001016:	4a85      	ldr	r2, [pc, #532]	; (800122c <motor_VeloControl+0x254>)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800101e:	4619      	mov	r1, r3
 8001020:	4a81      	ldr	r2, [pc, #516]	; (8001228 <motor_VeloControl+0x250>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001028:	1acb      	subs	r3, r1, r3
 800102a:	ee07 3a90 	vmov	s15, r3
 800102e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001032:	4a7f      	ldr	r2, [pc, #508]	; (8001230 <motor_VeloControl+0x258>)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	4413      	add	r3, r2
 800103a:	edc3 7a00 	vstr	s15, [r3]

		proportional_motor[i] = KP_motor * error_velo_motor[i];
 800103e:	4a7c      	ldr	r2, [pc, #496]	; (8001230 <motor_VeloControl+0x258>)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	4413      	add	r3, r2
 8001046:	ed93 7a00 	vldr	s14, [r3]
 800104a:	4b7a      	ldr	r3, [pc, #488]	; (8001234 <motor_VeloControl+0x25c>)
 800104c:	edd3 7a00 	vldr	s15, [r3]
 8001050:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001054:	4a78      	ldr	r2, [pc, #480]	; (8001238 <motor_VeloControl+0x260>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	4413      	add	r3, r2
 800105c:	edc3 7a00 	vstr	s15, [r3]
		integral_motor[i] += error_velo_motor[i];
 8001060:	4a76      	ldr	r2, [pc, #472]	; (800123c <motor_VeloControl+0x264>)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	4413      	add	r3, r2
 8001068:	ed93 7a00 	vldr	s14, [r3]
 800106c:	4a70      	ldr	r2, [pc, #448]	; (8001230 <motor_VeloControl+0x258>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	edd3 7a00 	vldr	s15, [r3]
 8001078:	ee77 7a27 	vadd.f32	s15, s14, s15
 800107c:	4a6f      	ldr	r2, [pc, #444]	; (800123c <motor_VeloControl+0x264>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	4413      	add	r3, r2
 8001084:	edc3 7a00 	vstr	s15, [r3]
		derivative_motor[i] = KD_motor * (error_velo_motor[i] - previous_error_velo_motor[i]) / PID_dt;
 8001088:	4a69      	ldr	r2, [pc, #420]	; (8001230 <motor_VeloControl+0x258>)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4413      	add	r3, r2
 8001090:	ed93 7a00 	vldr	s14, [r3]
 8001094:	4a6a      	ldr	r2, [pc, #424]	; (8001240 <motor_VeloControl+0x268>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	4413      	add	r3, r2
 800109c:	edd3 7a00 	vldr	s15, [r3]
 80010a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010a4:	4b67      	ldr	r3, [pc, #412]	; (8001244 <motor_VeloControl+0x26c>)
 80010a6:	edd3 7a00 	vldr	s15, [r3]
 80010aa:	ee67 6a27 	vmul.f32	s13, s14, s15
 80010ae:	4b66      	ldr	r3, [pc, #408]	; (8001248 <motor_VeloControl+0x270>)
 80010b0:	ed93 7a00 	vldr	s14, [r3]
 80010b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010b8:	4a64      	ldr	r2, [pc, #400]	; (800124c <motor_VeloControl+0x274>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	4413      	add	r3, r2
 80010c0:	edc3 7a00 	vstr	s15, [r3]

		integral_motor[i] = KI_motor * (integral_motor[i] + error_velo_motor[i] * PID_dt);
 80010c4:	4a5d      	ldr	r2, [pc, #372]	; (800123c <motor_VeloControl+0x264>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	4413      	add	r3, r2
 80010cc:	ed93 7a00 	vldr	s14, [r3]
 80010d0:	4a57      	ldr	r2, [pc, #348]	; (8001230 <motor_VeloControl+0x258>)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	4413      	add	r3, r2
 80010d8:	edd3 6a00 	vldr	s13, [r3]
 80010dc:	4b5a      	ldr	r3, [pc, #360]	; (8001248 <motor_VeloControl+0x270>)
 80010de:	edd3 7a00 	vldr	s15, [r3]
 80010e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010ea:	4b59      	ldr	r3, [pc, #356]	; (8001250 <motor_VeloControl+0x278>)
 80010ec:	edd3 7a00 	vldr	s15, [r3]
 80010f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010f4:	4a51      	ldr	r2, [pc, #324]	; (800123c <motor_VeloControl+0x264>)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	4413      	add	r3, r2
 80010fc:	edc3 7a00 	vstr	s15, [r3]

		if(integral_motor[i] > 30) integral_motor[i] = 30;
 8001100:	4a4e      	ldr	r2, [pc, #312]	; (800123c <motor_VeloControl+0x264>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	4413      	add	r3, r2
 8001108:	edd3 7a00 	vldr	s15, [r3]
 800110c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001110:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001118:	dd06      	ble.n	8001128 <motor_VeloControl+0x150>
 800111a:	4a48      	ldr	r2, [pc, #288]	; (800123c <motor_VeloControl+0x264>)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4413      	add	r3, r2
 8001122:	4a4c      	ldr	r2, [pc, #304]	; (8001254 <motor_VeloControl+0x27c>)
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	e012      	b.n	800114e <motor_VeloControl+0x176>
		else if(integral_motor[i] < -30) integral_motor[i] = -30;
 8001128:	4a44      	ldr	r2, [pc, #272]	; (800123c <motor_VeloControl+0x264>)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	4413      	add	r3, r2
 8001130:	edd3 7a00 	vldr	s15, [r3]
 8001134:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8001138:	eef4 7ac7 	vcmpe.f32	s15, s14
 800113c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001140:	d505      	bpl.n	800114e <motor_VeloControl+0x176>
 8001142:	4a3e      	ldr	r2, [pc, #248]	; (800123c <motor_VeloControl+0x264>)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	4413      	add	r3, r2
 800114a:	4a43      	ldr	r2, [pc, #268]	; (8001258 <motor_VeloControl+0x280>)
 800114c:	601a      	str	r2, [r3, #0]

		outputPWM[i] = proportional_motor[i] + integral_motor[i] + derivative_motor[i];
 800114e:	4a3a      	ldr	r2, [pc, #232]	; (8001238 <motor_VeloControl+0x260>)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	4413      	add	r3, r2
 8001156:	ed93 7a00 	vldr	s14, [r3]
 800115a:	4a38      	ldr	r2, [pc, #224]	; (800123c <motor_VeloControl+0x264>)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	edd3 7a00 	vldr	s15, [r3]
 8001166:	ee37 7a27 	vadd.f32	s14, s14, s15
 800116a:	4a38      	ldr	r2, [pc, #224]	; (800124c <motor_VeloControl+0x274>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	4413      	add	r3, r2
 8001172:	edd3 7a00 	vldr	s15, [r3]
 8001176:	ee77 7a27 	vadd.f32	s15, s14, s15
 800117a:	4a38      	ldr	r2, [pc, #224]	; (800125c <motor_VeloControl+0x284>)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4413      	add	r3, r2
 8001182:	edc3 7a00 	vstr	s15, [r3]

		if(outputPWM[i] > 150) outputPWM[i] = 150;
 8001186:	4a35      	ldr	r2, [pc, #212]	; (800125c <motor_VeloControl+0x284>)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	4413      	add	r3, r2
 800118e:	edd3 7a00 	vldr	s15, [r3]
 8001192:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001260 <motor_VeloControl+0x288>
 8001196:	eef4 7ac7 	vcmpe.f32	s15, s14
 800119a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800119e:	dd06      	ble.n	80011ae <motor_VeloControl+0x1d6>
 80011a0:	4a2e      	ldr	r2, [pc, #184]	; (800125c <motor_VeloControl+0x284>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	4413      	add	r3, r2
 80011a8:	4a2e      	ldr	r2, [pc, #184]	; (8001264 <motor_VeloControl+0x28c>)
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	e012      	b.n	80011d4 <motor_VeloControl+0x1fc>
		else if(outputPWM[i] < -150) outputPWM[i] = -150;
 80011ae:	4a2b      	ldr	r2, [pc, #172]	; (800125c <motor_VeloControl+0x284>)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	4413      	add	r3, r2
 80011b6:	edd3 7a00 	vldr	s15, [r3]
 80011ba:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001268 <motor_VeloControl+0x290>
 80011be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c6:	d505      	bpl.n	80011d4 <motor_VeloControl+0x1fc>
 80011c8:	4a24      	ldr	r2, [pc, #144]	; (800125c <motor_VeloControl+0x284>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	4413      	add	r3, r2
 80011d0:	4a26      	ldr	r2, [pc, #152]	; (800126c <motor_VeloControl+0x294>)
 80011d2:	601a      	str	r2, [r3, #0]
		prev_enc[i] = encoder[i];
 80011d4:	4a12      	ldr	r2, [pc, #72]	; (8001220 <motor_VeloControl+0x248>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011dc:	ee07 3a90 	vmov	s15, r3
 80011e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011e4:	4a0f      	ldr	r2, [pc, #60]	; (8001224 <motor_VeloControl+0x24c>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	4413      	add	r3, r2
 80011ec:	edc3 7a00 	vstr	s15, [r3]
		previous_error_velo_motor[i] = error_velo_motor[i];
 80011f0:	4a0f      	ldr	r2, [pc, #60]	; (8001230 <motor_VeloControl+0x258>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	4413      	add	r3, r2
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	4911      	ldr	r1, [pc, #68]	; (8001240 <motor_VeloControl+0x268>)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	440b      	add	r3, r1
 8001202:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 3; i++){
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3301      	adds	r3, #1
 8001208:	607b      	str	r3, [r7, #4]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2b02      	cmp	r3, #2
 800120e:	f77f aee9 	ble.w	8000fe4 <motor_VeloControl+0xc>
//		else if(outputPWM[i] < -120) outputPWM[i] = -120;
//
//		previous_error_velo_motor[i] = error_velo_motor[i];
//
//	}
}
 8001212:	bf00      	nop
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	20000488 	.word	0x20000488
 8001224:	200004c8 	.word	0x200004c8
 8001228:	20000494 	.word	0x20000494
 800122c:	2000049c 	.word	0x2000049c
 8001230:	200004d4 	.word	0x200004d4
 8001234:	20000000 	.word	0x20000000
 8001238:	200004a4 	.word	0x200004a4
 800123c:	200004b0 	.word	0x200004b0
 8001240:	200004e0 	.word	0x200004e0
 8001244:	20000008 	.word	0x20000008
 8001248:	2000000c 	.word	0x2000000c
 800124c:	200004bc 	.word	0x200004bc
 8001250:	20000004 	.word	0x20000004
 8001254:	41f00000 	.word	0x41f00000
 8001258:	c1f00000 	.word	0xc1f00000
 800125c:	200004ec 	.word	0x200004ec
 8001260:	43160000 	.word	0x43160000
 8001264:	43160000 	.word	0x43160000
 8001268:	c3160000 	.word	0xc3160000
 800126c:	c3160000 	.word	0xc3160000

08001270 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <MX_DMA_Init+0x3c>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a0b      	ldr	r2, [pc, #44]	; (80012ac <MX_DMA_Init+0x3c>)
 8001280:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <MX_DMA_Init+0x3c>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2105      	movs	r1, #5
 8001296:	2010      	movs	r0, #16
 8001298:	f002 fb7e 	bl	8003998 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800129c:	2010      	movs	r0, #16
 800129e:	f002 fb97 	bl	80039d0 <HAL_NVIC_EnableIRQ>

}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40023800 	.word	0x40023800

080012b0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	4a07      	ldr	r2, [pc, #28]	; (80012dc <vApplicationGetIdleTaskMemory+0x2c>)
 80012c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	4a06      	ldr	r2, [pc, #24]	; (80012e0 <vApplicationGetIdleTaskMemory+0x30>)
 80012c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2280      	movs	r2, #128	; 0x80
 80012cc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80012ce:	bf00      	nop
 80012d0:	3714      	adds	r7, #20
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	2000012c 	.word	0x2000012c
 80012e0:	200001e0 	.word	0x200001e0

080012e4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80012e4:	b5b0      	push	{r4, r5, r7, lr}
 80012e6:	b0a6      	sub	sp, #152	; 0x98
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of Mutex01 */
  osMutexDef(Mutex01);
 80012ea:	2300      	movs	r3, #0
 80012ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80012f0:	2300      	movs	r3, #0
 80012f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  Mutex01Handle = osMutexCreate(osMutex(Mutex01));
 80012f6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80012fa:	4618      	mov	r0, r3
 80012fc:	f005 fe6b 	bl	8006fd6 <osMutexCreate>
 8001300:	4603      	mov	r3, r0
 8001302:	4a31      	ldr	r2, [pc, #196]	; (80013c8 <MX_FREERTOS_Init+0xe4>)
 8001304:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task01 */
  osThreadDef(Task01, StartTask01, osPriorityNormal, 0, 1024);
 8001306:	4b31      	ldr	r3, [pc, #196]	; (80013cc <MX_FREERTOS_Init+0xe8>)
 8001308:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800130c:	461d      	mov	r5, r3
 800130e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001310:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001312:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001316:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task01Handle = osThreadCreate(osThread(Task01), NULL);
 800131a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800131e:	2100      	movs	r1, #0
 8001320:	4618      	mov	r0, r3
 8001322:	f005 fdf8 	bl	8006f16 <osThreadCreate>
 8001326:	4603      	mov	r3, r0
 8001328:	4a29      	ldr	r2, [pc, #164]	; (80013d0 <MX_FREERTOS_Init+0xec>)
 800132a:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task02 */
  osThreadDef(Task02, StartTask02, osPriorityNormal, 0, 128);
 800132c:	4b29      	ldr	r3, [pc, #164]	; (80013d4 <MX_FREERTOS_Init+0xf0>)
 800132e:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001332:	461d      	mov	r5, r3
 8001334:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001336:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001338:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800133c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task02Handle = osThreadCreate(osThread(Task02), NULL);
 8001340:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001344:	2100      	movs	r1, #0
 8001346:	4618      	mov	r0, r3
 8001348:	f005 fde5 	bl	8006f16 <osThreadCreate>
 800134c:	4603      	mov	r3, r0
 800134e:	4a22      	ldr	r2, [pc, #136]	; (80013d8 <MX_FREERTOS_Init+0xf4>)
 8001350:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task03 */
  osThreadDef(Task03, StartTask03, osPriorityLow, 0, 128);
 8001352:	4b22      	ldr	r3, [pc, #136]	; (80013dc <MX_FREERTOS_Init+0xf8>)
 8001354:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001358:	461d      	mov	r5, r3
 800135a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800135c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800135e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001362:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task03Handle = osThreadCreate(osThread(Task03), NULL);
 8001366:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800136a:	2100      	movs	r1, #0
 800136c:	4618      	mov	r0, r3
 800136e:	f005 fdd2 	bl	8006f16 <osThreadCreate>
 8001372:	4603      	mov	r3, r0
 8001374:	4a1a      	ldr	r2, [pc, #104]	; (80013e0 <MX_FREERTOS_Init+0xfc>)
 8001376:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task04 */
  osThreadDef(Task04, StartTask04, osPriorityLow, 0, 128);
 8001378:	4b1a      	ldr	r3, [pc, #104]	; (80013e4 <MX_FREERTOS_Init+0x100>)
 800137a:	f107 0420 	add.w	r4, r7, #32
 800137e:	461d      	mov	r5, r3
 8001380:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001382:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001384:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001388:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task04Handle = osThreadCreate(osThread(Task04), NULL);
 800138c:	f107 0320 	add.w	r3, r7, #32
 8001390:	2100      	movs	r1, #0
 8001392:	4618      	mov	r0, r3
 8001394:	f005 fdbf 	bl	8006f16 <osThreadCreate>
 8001398:	4603      	mov	r3, r0
 800139a:	4a13      	ldr	r2, [pc, #76]	; (80013e8 <MX_FREERTOS_Init+0x104>)
 800139c:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task05 */
  osThreadDef(Task05, StartTask05, osPriorityLow, 0, 128);
 800139e:	4b13      	ldr	r3, [pc, #76]	; (80013ec <MX_FREERTOS_Init+0x108>)
 80013a0:	1d3c      	adds	r4, r7, #4
 80013a2:	461d      	mov	r5, r3
 80013a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task05Handle = osThreadCreate(osThread(Task05), NULL);
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f005 fdae 	bl	8006f16 <osThreadCreate>
 80013ba:	4603      	mov	r3, r0
 80013bc:	4a0c      	ldr	r2, [pc, #48]	; (80013f0 <MX_FREERTOS_Init+0x10c>)
 80013be:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80013c0:	bf00      	nop
 80013c2:	3798      	adds	r7, #152	; 0x98
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bdb0      	pop	{r4, r5, r7, pc}
 80013c8:	20000128 	.word	0x20000128
 80013cc:	08009048 	.word	0x08009048
 80013d0:	20000114 	.word	0x20000114
 80013d4:	08009064 	.word	0x08009064
 80013d8:	20000118 	.word	0x20000118
 80013dc:	08009080 	.word	0x08009080
 80013e0:	2000011c 	.word	0x2000011c
 80013e4:	0800909c 	.word	0x0800909c
 80013e8:	20000120 	.word	0x20000120
 80013ec:	080090b8 	.word	0x080090b8
 80013f0:	20000124 	.word	0x20000124

080013f4 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void const * argument)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af02      	add	r7, sp, #8
 80013fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask01 */
  /* Infinite loop */
  for(;;)
  {
	  if(joystick_bt_counter < joystick_bt_timeout){
 80013fc:	4b5b      	ldr	r3, [pc, #364]	; (800156c <StartTask01+0x178>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b5b      	ldr	r3, [pc, #364]	; (8001570 <StartTask01+0x17c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	429a      	cmp	r2, r3
 8001406:	da10      	bge.n	800142a <StartTask01+0x36>
		  if(HAL_UART_Receive_DMA(&huart2, joystick_buf, sizeof(joystick_buf)) != HAL_OK){
 8001408:	220e      	movs	r2, #14
 800140a:	495a      	ldr	r1, [pc, #360]	; (8001574 <StartTask01+0x180>)
 800140c:	485a      	ldr	r0, [pc, #360]	; (8001578 <StartTask01+0x184>)
 800140e:	f005 f87c 	bl	800650a <HAL_UART_Receive_DMA>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d005      	beq.n	8001424 <StartTask01+0x30>
			  joystick_bt_counter++;
 8001418:	4b54      	ldr	r3, [pc, #336]	; (800156c <StartTask01+0x178>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	3301      	adds	r3, #1
 800141e:	4a53      	ldr	r2, [pc, #332]	; (800156c <StartTask01+0x178>)
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	e002      	b.n	800142a <StartTask01+0x36>
		  }
		  else{
			  joystick_bt_counter = 0;
 8001424:	4b51      	ldr	r3, [pc, #324]	; (800156c <StartTask01+0x178>)
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
		  }
	  }

	  if(joystick_bt_counter >= 299){
 800142a:	4b50      	ldr	r3, [pc, #320]	; (800156c <StartTask01+0x178>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 8001432:	dd03      	ble.n	800143c <StartTask01+0x48>
		  joystick_bt_counter = 299;
 8001434:	4b4d      	ldr	r3, [pc, #308]	; (800156c <StartTask01+0x178>)
 8001436:	f240 122b 	movw	r2, #299	; 0x12b
 800143a:	601a      	str	r2, [r3, #0]
	  }

	  if(joystick_buf[0] == 'E' && joystick_buf[1] == 'L' && joystick_buf[2] == 'K' && joystick_buf[3] == 'A'){
 800143c:	4b4d      	ldr	r3, [pc, #308]	; (8001574 <StartTask01+0x180>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b45      	cmp	r3, #69	; 0x45
 8001442:	d167      	bne.n	8001514 <StartTask01+0x120>
 8001444:	4b4b      	ldr	r3, [pc, #300]	; (8001574 <StartTask01+0x180>)
 8001446:	785b      	ldrb	r3, [r3, #1]
 8001448:	2b4c      	cmp	r3, #76	; 0x4c
 800144a:	d163      	bne.n	8001514 <StartTask01+0x120>
 800144c:	4b49      	ldr	r3, [pc, #292]	; (8001574 <StartTask01+0x180>)
 800144e:	789b      	ldrb	r3, [r3, #2]
 8001450:	2b4b      	cmp	r3, #75	; 0x4b
 8001452:	d15f      	bne.n	8001514 <StartTask01+0x120>
 8001454:	4b47      	ldr	r3, [pc, #284]	; (8001574 <StartTask01+0x180>)
 8001456:	78db      	ldrb	r3, [r3, #3]
 8001458:	2b41      	cmp	r3, #65	; 0x41
 800145a:	d15b      	bne.n	8001514 <StartTask01+0x120>
		  HAL_UART_Receive_DMA(&huart2, joystick_buf, sizeof(joystick_buf));
 800145c:	220e      	movs	r2, #14
 800145e:	4945      	ldr	r1, [pc, #276]	; (8001574 <StartTask01+0x180>)
 8001460:	4845      	ldr	r0, [pc, #276]	; (8001578 <StartTask01+0x184>)
 8001462:	f005 f852 	bl	800650a <HAL_UART_Receive_DMA>

		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001466:	2201      	movs	r2, #1
 8001468:	2140      	movs	r1, #64	; 0x40
 800146a:	4844      	ldr	r0, [pc, #272]	; (800157c <StartTask01+0x188>)
 800146c:	f002 ffca 	bl	8004404 <HAL_GPIO_WritePin>

		  memcpy(&joystick_y_buf, joystick_buf + 4, 1);
 8001470:	4b43      	ldr	r3, [pc, #268]	; (8001580 <StartTask01+0x18c>)
 8001472:	781a      	ldrb	r2, [r3, #0]
 8001474:	4b43      	ldr	r3, [pc, #268]	; (8001584 <StartTask01+0x190>)
 8001476:	701a      	strb	r2, [r3, #0]
		  memcpy(&joystick_x_buf, joystick_buf + 5, 1);
 8001478:	4b43      	ldr	r3, [pc, #268]	; (8001588 <StartTask01+0x194>)
 800147a:	781a      	ldrb	r2, [r3, #0]
 800147c:	4b43      	ldr	r3, [pc, #268]	; (800158c <StartTask01+0x198>)
 800147e:	701a      	strb	r2, [r3, #0]
		  memcpy(&joystick_z_buf, joystick_buf + 7, 1);
 8001480:	4b43      	ldr	r3, [pc, #268]	; (8001590 <StartTask01+0x19c>)
 8001482:	781a      	ldrb	r2, [r3, #0]
 8001484:	4b43      	ldr	r3, [pc, #268]	; (8001594 <StartTask01+0x1a0>)
 8001486:	701a      	strb	r2, [r3, #0]

		  joystick_x_buf = constrain(joystick_x_buf, 0, 246);
 8001488:	4b40      	ldr	r3, [pc, #256]	; (800158c <StartTask01+0x198>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2bf6      	cmp	r3, #246	; 0xf6
 800148e:	bf28      	it	cs
 8001490:	23f6      	movcs	r3, #246	; 0xf6
 8001492:	b2da      	uxtb	r2, r3
 8001494:	4b3d      	ldr	r3, [pc, #244]	; (800158c <StartTask01+0x198>)
 8001496:	701a      	strb	r2, [r3, #0]
		  joystick_y_buf = constrain(joystick_y_buf, 0, 246);
 8001498:	4b3a      	ldr	r3, [pc, #232]	; (8001584 <StartTask01+0x190>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2bf6      	cmp	r3, #246	; 0xf6
 800149e:	bf28      	it	cs
 80014a0:	23f6      	movcs	r3, #246	; 0xf6
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	4b37      	ldr	r3, [pc, #220]	; (8001584 <StartTask01+0x190>)
 80014a6:	701a      	strb	r2, [r3, #0]
		  joystick_z_buf = constrain(joystick_z_buf, 0, 246);
 80014a8:	4b3a      	ldr	r3, [pc, #232]	; (8001594 <StartTask01+0x1a0>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2bf6      	cmp	r3, #246	; 0xf6
 80014ae:	bf28      	it	cs
 80014b0:	23f6      	movcs	r3, #246	; 0xf6
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	4b37      	ldr	r3, [pc, #220]	; (8001594 <StartTask01+0x1a0>)
 80014b6:	701a      	strb	r2, [r3, #0]

		  joystick_x = map(joystick_x_buf, 0, 246, -123, 123);
 80014b8:	4b34      	ldr	r3, [pc, #208]	; (800158c <StartTask01+0x198>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	237b      	movs	r3, #123	; 0x7b
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	f06f 037a 	mvn.w	r3, #122	; 0x7a
 80014c6:	22f6      	movs	r2, #246	; 0xf6
 80014c8:	2100      	movs	r1, #0
 80014ca:	f7ff fc23 	bl	8000d14 <map>
 80014ce:	4603      	mov	r3, r0
 80014d0:	b25a      	sxtb	r2, r3
 80014d2:	4b31      	ldr	r3, [pc, #196]	; (8001598 <StartTask01+0x1a4>)
 80014d4:	701a      	strb	r2, [r3, #0]
		  joystick_y = map(joystick_y_buf, 0, 246, -123, 123);
 80014d6:	4b2b      	ldr	r3, [pc, #172]	; (8001584 <StartTask01+0x190>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	237b      	movs	r3, #123	; 0x7b
 80014de:	9300      	str	r3, [sp, #0]
 80014e0:	f06f 037a 	mvn.w	r3, #122	; 0x7a
 80014e4:	22f6      	movs	r2, #246	; 0xf6
 80014e6:	2100      	movs	r1, #0
 80014e8:	f7ff fc14 	bl	8000d14 <map>
 80014ec:	4603      	mov	r3, r0
 80014ee:	b25a      	sxtb	r2, r3
 80014f0:	4b2a      	ldr	r3, [pc, #168]	; (800159c <StartTask01+0x1a8>)
 80014f2:	701a      	strb	r2, [r3, #0]
		  joystick_z = map(joystick_z_buf, 0, 246, -123, 123);
 80014f4:	4b27      	ldr	r3, [pc, #156]	; (8001594 <StartTask01+0x1a0>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	4618      	mov	r0, r3
 80014fa:	237b      	movs	r3, #123	; 0x7b
 80014fc:	9300      	str	r3, [sp, #0]
 80014fe:	f06f 037a 	mvn.w	r3, #122	; 0x7a
 8001502:	22f6      	movs	r2, #246	; 0xf6
 8001504:	2100      	movs	r1, #0
 8001506:	f7ff fc05 	bl	8000d14 <map>
 800150a:	4603      	mov	r3, r0
 800150c:	b25a      	sxtb	r2, r3
 800150e:	4b24      	ldr	r3, [pc, #144]	; (80015a0 <StartTask01+0x1ac>)
 8001510:	701a      	strb	r2, [r3, #0]
 8001512:	e012      	b.n	800153a <StartTask01+0x146>
	  }
	  else{
		  HAL_UART_Receive_DMA(&huart2, joystick_buf, sizeof(joystick_buf));
 8001514:	220e      	movs	r2, #14
 8001516:	4917      	ldr	r1, [pc, #92]	; (8001574 <StartTask01+0x180>)
 8001518:	4817      	ldr	r0, [pc, #92]	; (8001578 <StartTask01+0x184>)
 800151a:	f004 fff6 	bl	800650a <HAL_UART_Receive_DMA>

		  joystick_x = 0;
 800151e:	4b1e      	ldr	r3, [pc, #120]	; (8001598 <StartTask01+0x1a4>)
 8001520:	2200      	movs	r2, #0
 8001522:	701a      	strb	r2, [r3, #0]
		  joystick_y = 0;
 8001524:	4b1d      	ldr	r3, [pc, #116]	; (800159c <StartTask01+0x1a8>)
 8001526:	2200      	movs	r2, #0
 8001528:	701a      	strb	r2, [r3, #0]
		  joystick_z = 0;
 800152a:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <StartTask01+0x1ac>)
 800152c:	2200      	movs	r2, #0
 800152e:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001530:	2200      	movs	r2, #0
 8001532:	2140      	movs	r1, #64	; 0x40
 8001534:	4811      	ldr	r0, [pc, #68]	; (800157c <StartTask01+0x188>)
 8001536:	f002 ff65 	bl	8004404 <HAL_GPIO_WritePin>
	  }

	  if(joystick_bt_counter == 299){
 800153a:	4b0c      	ldr	r3, [pc, #48]	; (800156c <StartTask01+0x178>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f240 122b 	movw	r2, #299	; 0x12b
 8001542:	4293      	cmp	r3, r2
 8001544:	d10d      	bne.n	8001562 <StartTask01+0x16e>
		  joystick_x = 0;
 8001546:	4b14      	ldr	r3, [pc, #80]	; (8001598 <StartTask01+0x1a4>)
 8001548:	2200      	movs	r2, #0
 800154a:	701a      	strb	r2, [r3, #0]
		  joystick_y = 0;
 800154c:	4b13      	ldr	r3, [pc, #76]	; (800159c <StartTask01+0x1a8>)
 800154e:	2200      	movs	r2, #0
 8001550:	701a      	strb	r2, [r3, #0]
		  joystick_z = 0;
 8001552:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <StartTask01+0x1ac>)
 8001554:	2200      	movs	r2, #0
 8001556:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001558:	2200      	movs	r2, #0
 800155a:	2140      	movs	r1, #64	; 0x40
 800155c:	4807      	ldr	r0, [pc, #28]	; (800157c <StartTask01+0x188>)
 800155e:	f002 ff51 	bl	8004404 <HAL_GPIO_WritePin>
	  }
    osDelay(1);
 8001562:	2001      	movs	r0, #1
 8001564:	f005 fd23 	bl	8006fae <osDelay>
	  if(joystick_bt_counter < joystick_bt_timeout){
 8001568:	e748      	b.n	80013fc <StartTask01+0x8>
 800156a:	bf00      	nop
 800156c:	2000050c 	.word	0x2000050c
 8001570:	20000010 	.word	0x20000010
 8001574:	200004f8 	.word	0x200004f8
 8001578:	20000908 	.word	0x20000908
 800157c:	40020c00 	.word	0x40020c00
 8001580:	200004fc 	.word	0x200004fc
 8001584:	20000507 	.word	0x20000507
 8001588:	200004fd 	.word	0x200004fd
 800158c:	20000506 	.word	0x20000506
 8001590:	200004ff 	.word	0x200004ff
 8001594:	20000508 	.word	0x20000508
 8001598:	20000509 	.word	0x20000509
 800159c:	2000050a 	.word	0x2000050a
 80015a0:	2000050b 	.word	0x2000050b

080015a4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  //==============================================================================
	  if (outputPWM[1] < 0){
 80015ac:	4b59      	ldr	r3, [pc, #356]	; (8001714 <StartTask02+0x170>)
 80015ae:	edd3 7a01 	vldr	s15, [r3, #4]
 80015b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ba:	d50f      	bpl.n	80015dc <StartTask02+0x38>
		  dummy = 0;
 80015bc:	4b56      	ldr	r3, [pc, #344]	; (8001718 <StartTask02+0x174>)
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(MOTOR1A_GPIO_Port, MOTOR1A_Pin, GPIO_PIN_SET);
 80015c2:	2201      	movs	r2, #1
 80015c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015c8:	4854      	ldr	r0, [pc, #336]	; (800171c <StartTask02+0x178>)
 80015ca:	f002 ff1b 	bl	8004404 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(MOTOR1B_GPIO_Port, MOTOR1B_Pin, GPIO_PIN_RESET);
 80015ce:	2200      	movs	r2, #0
 80015d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015d4:	4851      	ldr	r0, [pc, #324]	; (800171c <StartTask02+0x178>)
 80015d6:	f002 ff15 	bl	8004404 <HAL_GPIO_WritePin>
 80015da:	e016      	b.n	800160a <StartTask02+0x66>
	  }
	  else if (outputPWM[1] > 0){
 80015dc:	4b4d      	ldr	r3, [pc, #308]	; (8001714 <StartTask02+0x170>)
 80015de:	edd3 7a01 	vldr	s15, [r3, #4]
 80015e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ea:	dd0e      	ble.n	800160a <StartTask02+0x66>
		  dummy = 1;
 80015ec:	4b4a      	ldr	r3, [pc, #296]	; (8001718 <StartTask02+0x174>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(MOTOR1A_GPIO_Port, MOTOR1A_Pin, GPIO_PIN_RESET);
 80015f2:	2200      	movs	r2, #0
 80015f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015f8:	4848      	ldr	r0, [pc, #288]	; (800171c <StartTask02+0x178>)
 80015fa:	f002 ff03 	bl	8004404 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(MOTOR1B_GPIO_Port, MOTOR1B_Pin, GPIO_PIN_SET);
 80015fe:	2201      	movs	r2, #1
 8001600:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001604:	4845      	ldr	r0, [pc, #276]	; (800171c <StartTask02+0x178>)
 8001606:	f002 fefd 	bl	8004404 <HAL_GPIO_WritePin>
	  }
	  //==============================================================================
	  if (outputPWM[2] < 0){
 800160a:	4b42      	ldr	r3, [pc, #264]	; (8001714 <StartTask02+0x170>)
 800160c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001610:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001618:	d50b      	bpl.n	8001632 <StartTask02+0x8e>
		  HAL_GPIO_WritePin(MOTOR2A_GPIO_Port, MOTOR2A_Pin, GPIO_PIN_SET);
 800161a:	2201      	movs	r2, #1
 800161c:	2180      	movs	r1, #128	; 0x80
 800161e:	4840      	ldr	r0, [pc, #256]	; (8001720 <StartTask02+0x17c>)
 8001620:	f002 fef0 	bl	8004404 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(MOTOR2B_GPIO_Port, MOTOR2B_Pin, GPIO_PIN_RESET);
 8001624:	2200      	movs	r2, #0
 8001626:	f44f 7180 	mov.w	r1, #256	; 0x100
 800162a:	483d      	ldr	r0, [pc, #244]	; (8001720 <StartTask02+0x17c>)
 800162c:	f002 feea 	bl	8004404 <HAL_GPIO_WritePin>
 8001630:	e012      	b.n	8001658 <StartTask02+0xb4>
	  }
	  else if (outputPWM[2] > 0){
 8001632:	4b38      	ldr	r3, [pc, #224]	; (8001714 <StartTask02+0x170>)
 8001634:	edd3 7a02 	vldr	s15, [r3, #8]
 8001638:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800163c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001640:	dd0a      	ble.n	8001658 <StartTask02+0xb4>
		  HAL_GPIO_WritePin(MOTOR2A_GPIO_Port, MOTOR2A_Pin, GPIO_PIN_RESET);
 8001642:	2200      	movs	r2, #0
 8001644:	2180      	movs	r1, #128	; 0x80
 8001646:	4836      	ldr	r0, [pc, #216]	; (8001720 <StartTask02+0x17c>)
 8001648:	f002 fedc 	bl	8004404 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(MOTOR2B_GPIO_Port, MOTOR2B_Pin, GPIO_PIN_SET);
 800164c:	2201      	movs	r2, #1
 800164e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001652:	4833      	ldr	r0, [pc, #204]	; (8001720 <StartTask02+0x17c>)
 8001654:	f002 fed6 	bl	8004404 <HAL_GPIO_WritePin>
	  }
	  //==============================================================================
	  if (outputPWM[0] < 0){
 8001658:	4b2e      	ldr	r3, [pc, #184]	; (8001714 <StartTask02+0x170>)
 800165a:	edd3 7a00 	vldr	s15, [r3]
 800165e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001666:	d50c      	bpl.n	8001682 <StartTask02+0xde>
		  HAL_GPIO_WritePin(MOTOR3A_GPIO_Port, MOTOR3A_Pin, GPIO_PIN_SET);
 8001668:	2201      	movs	r2, #1
 800166a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800166e:	482d      	ldr	r0, [pc, #180]	; (8001724 <StartTask02+0x180>)
 8001670:	f002 fec8 	bl	8004404 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(MOTOR3B_GPIO_Port, MOTOR3B_Pin, GPIO_PIN_RESET);
 8001674:	2200      	movs	r2, #0
 8001676:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800167a:	482a      	ldr	r0, [pc, #168]	; (8001724 <StartTask02+0x180>)
 800167c:	f002 fec2 	bl	8004404 <HAL_GPIO_WritePin>
 8001680:	e013      	b.n	80016aa <StartTask02+0x106>
	  }
	  else if (outputPWM[0] > 0)
 8001682:	4b24      	ldr	r3, [pc, #144]	; (8001714 <StartTask02+0x170>)
 8001684:	edd3 7a00 	vldr	s15, [r3]
 8001688:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800168c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001690:	dd0b      	ble.n	80016aa <StartTask02+0x106>
	  {
		  HAL_GPIO_WritePin(MOTOR3A_GPIO_Port, MOTOR3A_Pin, GPIO_PIN_RESET);
 8001692:	2200      	movs	r2, #0
 8001694:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001698:	4822      	ldr	r0, [pc, #136]	; (8001724 <StartTask02+0x180>)
 800169a:	f002 feb3 	bl	8004404 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(MOTOR3B_GPIO_Port, MOTOR3B_Pin, GPIO_PIN_SET);
 800169e:	2201      	movs	r2, #1
 80016a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016a4:	481f      	ldr	r0, [pc, #124]	; (8001724 <StartTask02+0x180>)
 80016a6:	f002 fead 	bl	8004404 <HAL_GPIO_WritePin>
	  }

	  if(joystick_bt_counter == 299){
 80016aa:	4b1f      	ldr	r3, [pc, #124]	; (8001728 <StartTask02+0x184>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f240 122b 	movw	r2, #299	; 0x12b
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d10b      	bne.n	80016ce <StartTask02+0x12a>
		  outputPWM[0] = 0;
 80016b6:	4b17      	ldr	r3, [pc, #92]	; (8001714 <StartTask02+0x170>)
 80016b8:	f04f 0200 	mov.w	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
		  outputPWM[1] = 0;
 80016be:	4b15      	ldr	r3, [pc, #84]	; (8001714 <StartTask02+0x170>)
 80016c0:	f04f 0200 	mov.w	r2, #0
 80016c4:	605a      	str	r2, [r3, #4]
		  outputPWM[2] = 0;
 80016c6:	4b13      	ldr	r3, [pc, #76]	; (8001714 <StartTask02+0x170>)
 80016c8:	f04f 0200 	mov.w	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
	  }

	  __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, abs(motor_SetPoint[1]));
 80016ce:	4b17      	ldr	r3, [pc, #92]	; (800172c <StartTask02+0x188>)
 80016d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	bfb8      	it	lt
 80016d8:	425b      	neglt	r3, r3
 80016da:	b29a      	uxth	r2, r3
 80016dc:	4b14      	ldr	r3, [pc, #80]	; (8001730 <StartTask02+0x18c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, abs(motor_SetPoint[2]));
 80016e2:	4b12      	ldr	r3, [pc, #72]	; (800172c <StartTask02+0x188>)
 80016e4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	bfb8      	it	lt
 80016ec:	425b      	neglt	r3, r3
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <StartTask02+0x18c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, abs(motor_SetPoint[0]));
 80016f6:	4b0d      	ldr	r3, [pc, #52]	; (800172c <StartTask02+0x188>)
 80016f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	bfb8      	it	lt
 8001700:	425b      	neglt	r3, r3
 8001702:	b29a      	uxth	r2, r3
 8001704:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <StartTask02+0x190>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	639a      	str	r2, [r3, #56]	; 0x38
	  osDelay(1);
 800170a:	2001      	movs	r0, #1
 800170c:	f005 fc4f 	bl	8006fae <osDelay>
	  if (outputPWM[1] < 0){
 8001710:	e74c      	b.n	80015ac <StartTask02+0x8>
 8001712:	bf00      	nop
 8001714:	200004ec 	.word	0x200004ec
 8001718:	20000510 	.word	0x20000510
 800171c:	40020800 	.word	0x40020800
 8001720:	40021000 	.word	0x40021000
 8001724:	40020c00 	.word	0x40020c00
 8001728:	2000050c 	.word	0x2000050c
 800172c:	2000049c 	.word	0x2000049c
 8001730:	20000764 	.word	0x20000764
 8001734:	200007ac 	.word	0x200007ac

08001738 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 8001740:	2201      	movs	r2, #1
 8001742:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001746:	4816      	ldr	r0, [pc, #88]	; (80017a0 <StartTask03+0x68>)
 8001748:	f002 fe5c 	bl	8004404 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 800174c:	2201      	movs	r2, #1
 800174e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001752:	4813      	ldr	r0, [pc, #76]	; (80017a0 <StartTask03+0x68>)
 8001754:	f002 fe56 	bl	8004404 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 8001758:	2201      	movs	r2, #1
 800175a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800175e:	4810      	ldr	r0, [pc, #64]	; (80017a0 <StartTask03+0x68>)
 8001760:	f002 fe50 	bl	8004404 <HAL_GPIO_WritePin>
	osDelay(1000);
 8001764:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001768:	f005 fc21 	bl	8006fae <osDelay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 800176c:	2200      	movs	r2, #0
 800176e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001772:	480b      	ldr	r0, [pc, #44]	; (80017a0 <StartTask03+0x68>)
 8001774:	f002 fe46 	bl	8004404 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8001778:	2200      	movs	r2, #0
 800177a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800177e:	4808      	ldr	r0, [pc, #32]	; (80017a0 <StartTask03+0x68>)
 8001780:	f002 fe40 	bl	8004404 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8001784:	2200      	movs	r2, #0
 8001786:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800178a:	4805      	ldr	r0, [pc, #20]	; (80017a0 <StartTask03+0x68>)
 800178c:	f002 fe3a 	bl	8004404 <HAL_GPIO_WritePin>
	osDelay(1000);
 8001790:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001794:	f005 fc0b 	bl	8006fae <osDelay>
    osDelay(1);
 8001798:	2001      	movs	r0, #1
 800179a:	f005 fc08 	bl	8006fae <osDelay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 800179e:	e7cf      	b.n	8001740 <StartTask03+0x8>
 80017a0:	40021000 	.word	0x40021000

080017a4 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80017ac:	2001      	movs	r0, #1
 80017ae:	f005 fbfe 	bl	8006fae <osDelay>
 80017b2:	e7fb      	b.n	80017ac <StartTask04+0x8>

080017b4 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void const * argument)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80017bc:	2201      	movs	r2, #1
 80017be:	2101      	movs	r1, #1
 80017c0:	480e      	ldr	r0, [pc, #56]	; (80017fc <StartTask05+0x48>)
 80017c2:	f002 fe1f 	bl	8004404 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80017c6:	2201      	movs	r2, #1
 80017c8:	2102      	movs	r1, #2
 80017ca:	480d      	ldr	r0, [pc, #52]	; (8001800 <StartTask05+0x4c>)
 80017cc:	f002 fe1a 	bl	8004404 <HAL_GPIO_WritePin>
	  osDelay(100);
 80017d0:	2064      	movs	r0, #100	; 0x64
 80017d2:	f005 fbec 	bl	8006fae <osDelay>
	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2101      	movs	r1, #1
 80017da:	4808      	ldr	r0, [pc, #32]	; (80017fc <StartTask05+0x48>)
 80017dc:	f002 fe12 	bl	8004404 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80017e0:	2200      	movs	r2, #0
 80017e2:	2102      	movs	r1, #2
 80017e4:	4806      	ldr	r0, [pc, #24]	; (8001800 <StartTask05+0x4c>)
 80017e6:	f002 fe0d 	bl	8004404 <HAL_GPIO_WritePin>
	  osDelay(500);
 80017ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017ee:	f005 fbde 	bl	8006fae <osDelay>
    osDelay(1);
 80017f2:	2001      	movs	r0, #1
 80017f4:	f005 fbdb 	bl	8006fae <osDelay>
	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80017f8:	e7e0      	b.n	80017bc <StartTask05+0x8>
 80017fa:	bf00      	nop
 80017fc:	40021000 	.word	0x40021000
 8001800:	40020000 	.word	0x40020000

08001804 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b08c      	sub	sp, #48	; 0x30
 8001808:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180a:	f107 031c 	add.w	r3, r7, #28
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	605a      	str	r2, [r3, #4]
 8001814:	609a      	str	r2, [r3, #8]
 8001816:	60da      	str	r2, [r3, #12]
 8001818:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	61bb      	str	r3, [r7, #24]
 800181e:	4b7d      	ldr	r3, [pc, #500]	; (8001a14 <MX_GPIO_Init+0x210>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	4a7c      	ldr	r2, [pc, #496]	; (8001a14 <MX_GPIO_Init+0x210>)
 8001824:	f043 0310 	orr.w	r3, r3, #16
 8001828:	6313      	str	r3, [r2, #48]	; 0x30
 800182a:	4b7a      	ldr	r3, [pc, #488]	; (8001a14 <MX_GPIO_Init+0x210>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	f003 0310 	and.w	r3, r3, #16
 8001832:	61bb      	str	r3, [r7, #24]
 8001834:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	617b      	str	r3, [r7, #20]
 800183a:	4b76      	ldr	r3, [pc, #472]	; (8001a14 <MX_GPIO_Init+0x210>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	4a75      	ldr	r2, [pc, #468]	; (8001a14 <MX_GPIO_Init+0x210>)
 8001840:	f043 0304 	orr.w	r3, r3, #4
 8001844:	6313      	str	r3, [r2, #48]	; 0x30
 8001846:	4b73      	ldr	r3, [pc, #460]	; (8001a14 <MX_GPIO_Init+0x210>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	f003 0304 	and.w	r3, r3, #4
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	613b      	str	r3, [r7, #16]
 8001856:	4b6f      	ldr	r3, [pc, #444]	; (8001a14 <MX_GPIO_Init+0x210>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a6e      	ldr	r2, [pc, #440]	; (8001a14 <MX_GPIO_Init+0x210>)
 800185c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b6c      	ldr	r3, [pc, #432]	; (8001a14 <MX_GPIO_Init+0x210>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800186a:	613b      	str	r3, [r7, #16]
 800186c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	4b68      	ldr	r3, [pc, #416]	; (8001a14 <MX_GPIO_Init+0x210>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	4a67      	ldr	r2, [pc, #412]	; (8001a14 <MX_GPIO_Init+0x210>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	6313      	str	r3, [r2, #48]	; 0x30
 800187e:	4b65      	ldr	r3, [pc, #404]	; (8001a14 <MX_GPIO_Init+0x210>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	60bb      	str	r3, [r7, #8]
 800188e:	4b61      	ldr	r3, [pc, #388]	; (8001a14 <MX_GPIO_Init+0x210>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	4a60      	ldr	r2, [pc, #384]	; (8001a14 <MX_GPIO_Init+0x210>)
 8001894:	f043 0302 	orr.w	r3, r3, #2
 8001898:	6313      	str	r3, [r2, #48]	; 0x30
 800189a:	4b5e      	ldr	r3, [pc, #376]	; (8001a14 <MX_GPIO_Init+0x210>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	60bb      	str	r3, [r7, #8]
 80018a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	4b5a      	ldr	r3, [pc, #360]	; (8001a14 <MX_GPIO_Init+0x210>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a59      	ldr	r2, [pc, #356]	; (8001a14 <MX_GPIO_Init+0x210>)
 80018b0:	f043 0308 	orr.w	r3, r3, #8
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b57      	ldr	r3, [pc, #348]	; (8001a14 <MX_GPIO_Init+0x210>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f003 0308 	and.w	r3, r3, #8
 80018be:	607b      	str	r3, [r7, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|MOTOR2A_Pin|MOTOR2B_Pin|GPIO_PIN_10
 80018c2:	2200      	movs	r2, #0
 80018c4:	f24f 5189 	movw	r1, #62857	; 0xf589
 80018c8:	4853      	ldr	r0, [pc, #332]	; (8001a18 <MX_GPIO_Init+0x214>)
 80018ca:	f002 fd9b 	bl	8004404 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80018ce:	2201      	movs	r2, #1
 80018d0:	2101      	movs	r1, #1
 80018d2:	4852      	ldr	r0, [pc, #328]	; (8001a1c <MX_GPIO_Init+0x218>)
 80018d4:	f002 fd96 	bl	8004404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80018d8:	2200      	movs	r2, #0
 80018da:	2102      	movs	r1, #2
 80018dc:	4850      	ldr	r0, [pc, #320]	; (8001a20 <MX_GPIO_Init+0x21c>)
 80018de:	f002 fd91 	bl	8004404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|MOTOR1A_Pin|MOTOR1B_Pin, GPIO_PIN_RESET);
 80018e2:	2200      	movs	r2, #0
 80018e4:	f44f 714c 	mov.w	r1, #816	; 0x330
 80018e8:	484c      	ldr	r0, [pc, #304]	; (8001a1c <MX_GPIO_Init+0x218>)
 80018ea:	f002 fd8b 	bl	8004404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MOTOR3A_Pin|MOTOR3B_Pin|Audio_RST_Pin|LED2_Pin, GPIO_PIN_RESET);
 80018ee:	2200      	movs	r2, #0
 80018f0:	f44f 6145 	mov.w	r1, #3152	; 0xc50
 80018f4:	484b      	ldr	r0, [pc, #300]	; (8001a24 <MX_GPIO_Init+0x220>)
 80018f6:	f002 fd85 	bl	8004404 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PEPin PEPin PE10
                           PE12 PE13 PE14 PE15
                           PEPin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|MOTOR2A_Pin|MOTOR2B_Pin|GPIO_PIN_10
 80018fa:	f24f 5389 	movw	r3, #62857	; 0xf589
 80018fe:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001900:	2301      	movs	r3, #1
 8001902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001908:	2300      	movs	r3, #0
 800190a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800190c:	f107 031c 	add.w	r3, r7, #28
 8001910:	4619      	mov	r1, r3
 8001912:	4841      	ldr	r0, [pc, #260]	; (8001a18 <MX_GPIO_Init+0x214>)
 8001914:	f002 fbda 	bl	80040cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PC4 PC5 PCPin
                           PCPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_4|GPIO_PIN_5|MOTOR1A_Pin
 8001918:	f240 3331 	movw	r3, #817	; 0x331
 800191c:	61fb      	str	r3, [r7, #28]
                          |MOTOR1B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191e:	2301      	movs	r3, #1
 8001920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001926:	2300      	movs	r3, #0
 8001928:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800192a:	f107 031c 	add.w	r3, r7, #28
 800192e:	4619      	mov	r1, r3
 8001930:	483a      	ldr	r0, [pc, #232]	; (8001a1c <MX_GPIO_Init+0x218>)
 8001932:	f002 fbcb 	bl	80040cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001936:	2301      	movs	r3, #1
 8001938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800193a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800193e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001944:	f107 031c 	add.w	r3, r7, #28
 8001948:	4619      	mov	r1, r3
 800194a:	4835      	ldr	r0, [pc, #212]	; (8001a20 <MX_GPIO_Init+0x21c>)
 800194c:	f002 fbbe 	bl	80040cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8001950:	2302      	movs	r3, #2
 8001952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001954:	2301      	movs	r3, #1
 8001956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195c:	2300      	movs	r3, #0
 800195e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001960:	f107 031c 	add.w	r3, r7, #28
 8001964:	4619      	mov	r1, r3
 8001966:	482e      	ldr	r0, [pc, #184]	; (8001a20 <MX_GPIO_Init+0x21c>)
 8001968:	f002 fbb0 	bl	80040cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 800196c:	f243 0307 	movw	r3, #12295	; 0x3007
 8001970:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001972:	2300      	movs	r3, #0
 8001974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197a:	f107 031c 	add.w	r3, r7, #28
 800197e:	4619      	mov	r1, r3
 8001980:	4829      	ldr	r0, [pc, #164]	; (8001a28 <MX_GPIO_Init+0x224>)
 8001982:	f002 fba3 	bl	80040cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = MOTOR3A_Pin|MOTOR3B_Pin|Audio_RST_Pin|LED2_Pin;
 8001986:	f44f 6345 	mov.w	r3, #3152	; 0xc50
 800198a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800198c:	2301      	movs	r3, #1
 800198e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	2300      	movs	r3, #0
 8001992:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001994:	2300      	movs	r3, #0
 8001996:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001998:	f107 031c 	add.w	r3, r7, #28
 800199c:	4619      	mov	r1, r3
 800199e:	4821      	ldr	r0, [pc, #132]	; (8001a24 <MX_GPIO_Init+0x220>)
 80019a0:	f002 fb94 	bl	80040cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80019a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019aa:	2303      	movs	r3, #3
 80019ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019b2:	f107 031c 	add.w	r3, r7, #28
 80019b6:	4619      	mov	r1, r3
 80019b8:	481a      	ldr	r0, [pc, #104]	; (8001a24 <MX_GPIO_Init+0x220>)
 80019ba:	f002 fb87 	bl	80040cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80019be:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80019c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c4:	2300      	movs	r3, #0
 80019c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019cc:	f107 031c 	add.w	r3, r7, #28
 80019d0:	4619      	mov	r1, r3
 80019d2:	4813      	ldr	r0, [pc, #76]	; (8001a20 <MX_GPIO_Init+0x21c>)
 80019d4:	f002 fb7a 	bl	80040cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80019d8:	2320      	movs	r3, #32
 80019da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019dc:	2300      	movs	r3, #0
 80019de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80019e4:	f107 031c 	add.w	r3, r7, #28
 80019e8:	4619      	mov	r1, r3
 80019ea:	480e      	ldr	r0, [pc, #56]	; (8001a24 <MX_GPIO_Init+0x220>)
 80019ec:	f002 fb6e 	bl	80040cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80019f0:	2302      	movs	r3, #2
 80019f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80019f4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80019f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80019fe:	f107 031c 	add.w	r3, r7, #28
 8001a02:	4619      	mov	r1, r3
 8001a04:	4804      	ldr	r0, [pc, #16]	; (8001a18 <MX_GPIO_Init+0x214>)
 8001a06:	f002 fb61 	bl	80040cc <HAL_GPIO_Init>

}
 8001a0a:	bf00      	nop
 8001a0c:	3730      	adds	r7, #48	; 0x30
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40023800 	.word	0x40023800
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	40020800 	.word	0x40020800
 8001a20:	40020000 	.word	0x40020000
 8001a24:	40020c00 	.word	0x40020c00
 8001a28:	40020400 	.word	0x40020400

08001a2c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a30:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <MX_I2C1_Init+0x50>)
 8001a32:	4a13      	ldr	r2, [pc, #76]	; (8001a80 <MX_I2C1_Init+0x54>)
 8001a34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a36:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <MX_I2C1_Init+0x50>)
 8001a38:	4a12      	ldr	r2, [pc, #72]	; (8001a84 <MX_I2C1_Init+0x58>)
 8001a3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a3c:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <MX_I2C1_Init+0x50>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a42:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <MX_I2C1_Init+0x50>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a48:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <MX_I2C1_Init+0x50>)
 8001a4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a4e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a50:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <MX_I2C1_Init+0x50>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a56:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <MX_I2C1_Init+0x50>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a5c:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <MX_I2C1_Init+0x50>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a62:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <MX_I2C1_Init+0x50>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a68:	4804      	ldr	r0, [pc, #16]	; (8001a7c <MX_I2C1_Init+0x50>)
 8001a6a:	f002 fce5 	bl	8004438 <HAL_I2C_Init>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a74:	f000 f9fc 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a78:	bf00      	nop
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	200003e0 	.word	0x200003e0
 8001a80:	40005400 	.word	0x40005400
 8001a84:	000186a0 	.word	0x000186a0

08001a88 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a8c:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <MX_I2C2_Init+0x50>)
 8001a8e:	4a13      	ldr	r2, [pc, #76]	; (8001adc <MX_I2C2_Init+0x54>)
 8001a90:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001a92:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <MX_I2C2_Init+0x50>)
 8001a94:	4a12      	ldr	r2, [pc, #72]	; (8001ae0 <MX_I2C2_Init+0x58>)
 8001a96:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a98:	4b0f      	ldr	r3, [pc, #60]	; (8001ad8 <MX_I2C2_Init+0x50>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001a9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <MX_I2C2_Init+0x50>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <MX_I2C2_Init+0x50>)
 8001aa6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001aaa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001aac:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <MX_I2C2_Init+0x50>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <MX_I2C2_Init+0x50>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ab8:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <MX_I2C2_Init+0x50>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001abe:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <MX_I2C2_Init+0x50>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ac4:	4804      	ldr	r0, [pc, #16]	; (8001ad8 <MX_I2C2_Init+0x50>)
 8001ac6:	f002 fcb7 	bl	8004438 <HAL_I2C_Init>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001ad0:	f000 f9ce 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001ad4:	bf00      	nop
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20000434 	.word	0x20000434
 8001adc:	40005800 	.word	0x40005800
 8001ae0:	000186a0 	.word	0x000186a0

08001ae4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08c      	sub	sp, #48	; 0x30
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	f107 031c 	add.w	r3, r7, #28
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a33      	ldr	r2, [pc, #204]	; (8001bd0 <HAL_I2C_MspInit+0xec>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d12d      	bne.n	8001b62 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	61bb      	str	r3, [r7, #24]
 8001b0a:	4b32      	ldr	r3, [pc, #200]	; (8001bd4 <HAL_I2C_MspInit+0xf0>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	4a31      	ldr	r2, [pc, #196]	; (8001bd4 <HAL_I2C_MspInit+0xf0>)
 8001b10:	f043 0302 	orr.w	r3, r3, #2
 8001b14:	6313      	str	r3, [r2, #48]	; 0x30
 8001b16:	4b2f      	ldr	r3, [pc, #188]	; (8001bd4 <HAL_I2C_MspInit+0xf0>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	61bb      	str	r3, [r7, #24]
 8001b20:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001b22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b28:	2312      	movs	r3, #18
 8001b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b30:	2300      	movs	r3, #0
 8001b32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b34:	2304      	movs	r3, #4
 8001b36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b38:	f107 031c 	add.w	r3, r7, #28
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4826      	ldr	r0, [pc, #152]	; (8001bd8 <HAL_I2C_MspInit+0xf4>)
 8001b40:	f002 fac4 	bl	80040cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]
 8001b48:	4b22      	ldr	r3, [pc, #136]	; (8001bd4 <HAL_I2C_MspInit+0xf0>)
 8001b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4c:	4a21      	ldr	r2, [pc, #132]	; (8001bd4 <HAL_I2C_MspInit+0xf0>)
 8001b4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b52:	6413      	str	r3, [r2, #64]	; 0x40
 8001b54:	4b1f      	ldr	r3, [pc, #124]	; (8001bd4 <HAL_I2C_MspInit+0xf0>)
 8001b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001b60:	e031      	b.n	8001bc6 <HAL_I2C_MspInit+0xe2>
  else if(i2cHandle->Instance==I2C2)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a1d      	ldr	r2, [pc, #116]	; (8001bdc <HAL_I2C_MspInit+0xf8>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d12c      	bne.n	8001bc6 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <HAL_I2C_MspInit+0xf0>)
 8001b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b74:	4a17      	ldr	r2, [pc, #92]	; (8001bd4 <HAL_I2C_MspInit+0xf0>)
 8001b76:	f043 0302 	orr.w	r3, r3, #2
 8001b7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7c:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <HAL_I2C_MspInit+0xf0>)
 8001b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	613b      	str	r3, [r7, #16]
 8001b86:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b88:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b8e:	2312      	movs	r3, #18
 8001b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b96:	2303      	movs	r3, #3
 8001b98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b9a:	2304      	movs	r3, #4
 8001b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b9e:	f107 031c 	add.w	r3, r7, #28
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	480c      	ldr	r0, [pc, #48]	; (8001bd8 <HAL_I2C_MspInit+0xf4>)
 8001ba6:	f002 fa91 	bl	80040cc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <HAL_I2C_MspInit+0xf0>)
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	4a08      	ldr	r2, [pc, #32]	; (8001bd4 <HAL_I2C_MspInit+0xf0>)
 8001bb4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bba:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <HAL_I2C_MspInit+0xf0>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
}
 8001bc6:	bf00      	nop
 8001bc8:	3730      	adds	r7, #48	; 0x30
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40005400 	.word	0x40005400
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	40020400 	.word	0x40020400
 8001bdc:	40005800 	.word	0x40005800

08001be0 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bf0:	d105      	bne.n	8001bfe <HAL_TIM_IC_CaptureCallback+0x1e>
		encoder[0] = __HAL_TIM_GET_COUNTER(&htim2);
 8001bf2:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <HAL_TIM_IC_CaptureCallback+0x58>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001bfc:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM3){
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a0f      	ldr	r2, [pc, #60]	; (8001c40 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d105      	bne.n	8001c14 <HAL_TIM_IC_CaptureCallback+0x34>
		encoder[1] = __HAL_TIM_GET_COUNTER(&htim3);
 8001c08:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <HAL_TIM_IC_CaptureCallback+0x64>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0e:	461a      	mov	r2, r3
 8001c10:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001c12:	605a      	str	r2, [r3, #4]
	}
	if(htim->Instance == TIM4){
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a0b      	ldr	r2, [pc, #44]	; (8001c48 <HAL_TIM_IC_CaptureCallback+0x68>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d105      	bne.n	8001c2a <HAL_TIM_IC_CaptureCallback+0x4a>
		encoder[2] = __HAL_TIM_GET_COUNTER(&htim4);
 8001c1e:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <HAL_TIM_IC_CaptureCallback+0x6c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c24:	461a      	mov	r2, r3
 8001c26:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001c28:	609a      	str	r2, [r3, #8]
	}
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	200005fc 	.word	0x200005fc
 8001c3c:	20000488 	.word	0x20000488
 8001c40:	40000400 	.word	0x40000400
 8001c44:	20000644 	.word	0x20000644
 8001c48:	40000800 	.word	0x40000800
 8001c4c:	2000068c 	.word	0x2000068c

08001c50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c54:	f001 fa48 	bl	80030e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c58:	f000 f860 	bl	8001d1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c5c:	f7ff fdd2 	bl	8001804 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c60:	f7ff fb06 	bl	8001270 <MX_DMA_Init>
  MX_I2C1_Init();
 8001c64:	f7ff fee2 	bl	8001a2c <MX_I2C1_Init>
  MX_TIM1_Init();
 8001c68:	f000 fac0 	bl	80021ec <MX_TIM1_Init>
  MX_TIM9_Init();
 8001c6c:	f000 fca0 	bl	80025b0 <MX_TIM9_Init>
  MX_TIM4_Init();
 8001c70:	f000 fbbc 	bl	80023ec <MX_TIM4_Init>
  MX_TIM3_Init();
 8001c74:	f000 fb66 	bl	8002344 <MX_TIM3_Init>
  MX_UART4_Init();
 8001c78:	f000 ffc6 	bl	8002c08 <MX_UART4_Init>
  MX_UART5_Init();
 8001c7c:	f000 ffee 	bl	8002c5c <MX_UART5_Init>
  MX_USART3_UART_Init();
 8001c80:	f001 f86a 	bl	8002d58 <MX_USART3_UART_Init>
  MX_CAN1_Init();
 8001c84:	f7fe ffca 	bl	8000c1c <MX_CAN1_Init>
  MX_I2C2_Init();
 8001c88:	f7ff fefe 	bl	8001a88 <MX_I2C2_Init>
  MX_SPI1_Init();
 8001c8c:	f000 f8f6 	bl	8001e7c <MX_SPI1_Init>
  MX_TIM12_Init();
 8001c90:	f000 fcfa 	bl	8002688 <MX_TIM12_Init>
  MX_ADC1_Init();
 8001c94:	f7fe ff2c 	bl	8000af0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001c98:	f001 f834 	bl	8002d04 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001c9c:	f000 fafe 	bl	800229c <MX_TIM2_Init>
  MX_TIM8_Init();
 8001ca0:	f000 fc2e 	bl	8002500 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8001ca4:	f001 f804 	bl	8002cb0 <MX_USART1_UART_Init>
  MX_TIM7_Init();
 8001ca8:	f000 fbf4 	bl	8002494 <MX_TIM7_Init>
  MX_TIM13_Init();
 8001cac:	f000 fd58 	bl	8002760 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 8001cb0:	4813      	ldr	r0, [pc, #76]	; (8001d00 <main+0xb0>)
 8001cb2:	f003 faa7 	bl	8005204 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim13);
 8001cb6:	4813      	ldr	r0, [pc, #76]	; (8001d04 <main+0xb4>)
 8001cb8:	f003 faa4 	bl	8005204 <HAL_TIM_Base_Start_IT>

  //============ACTUATOR MOTOR============
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);//M1
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	4812      	ldr	r0, [pc, #72]	; (8001d08 <main+0xb8>)
 8001cc0:	f003 fb6a 	bl	8005398 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);//M2
 8001cc4:	2104      	movs	r1, #4
 8001cc6:	4810      	ldr	r0, [pc, #64]	; (8001d08 <main+0xb8>)
 8001cc8:	f003 fb66 	bl	8005398 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);//M3
 8001ccc:	2104      	movs	r1, #4
 8001cce:	480f      	ldr	r0, [pc, #60]	; (8001d0c <main+0xbc>)
 8001cd0:	f003 fb62 	bl	8005398 <HAL_TIM_PWM_Start>

  //=============EXTERNAL PWM=============
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);//EXTERNAL PWM
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	480d      	ldr	r0, [pc, #52]	; (8001d0c <main+0xbc>)
 8001cd8:	f003 fb5e 	bl	8005398 <HAL_TIM_PWM_Start>

  //=============ENCODER MOTOR============
  HAL_TIM_Encoder_Start_IT(&htim2,TIM_CHANNEL_ALL);
 8001cdc:	213c      	movs	r1, #60	; 0x3c
 8001cde:	480c      	ldr	r0, [pc, #48]	; (8001d10 <main+0xc0>)
 8001ce0:	f003 fcc8 	bl	8005674 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_ALL);
 8001ce4:	213c      	movs	r1, #60	; 0x3c
 8001ce6:	480b      	ldr	r0, [pc, #44]	; (8001d14 <main+0xc4>)
 8001ce8:	f003 fcc4 	bl	8005674 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4,TIM_CHANNEL_ALL);
 8001cec:	213c      	movs	r1, #60	; 0x3c
 8001cee:	480a      	ldr	r0, [pc, #40]	; (8001d18 <main+0xc8>)
 8001cf0:	f003 fcc0 	bl	8005674 <HAL_TIM_Encoder_Start_IT>
  //=============JOYSTICK RC==============
//  HAL_UART_Receive_DMA(&huart2, joystick_buf, sizeof(joystick_buf));
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001cf4:	f7ff faf6 	bl	80012e4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001cf8:	f005 f906 	bl	8006f08 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001cfc:	e7fe      	b.n	8001cfc <main+0xac>
 8001cfe:	bf00      	nop
 8001d00:	200006d4 	.word	0x200006d4
 8001d04:	200007f4 	.word	0x200007f4
 8001d08:	20000764 	.word	0x20000764
 8001d0c:	200007ac 	.word	0x200007ac
 8001d10:	200005fc 	.word	0x200005fc
 8001d14:	20000644 	.word	0x20000644
 8001d18:	2000068c 	.word	0x2000068c

08001d1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b094      	sub	sp, #80	; 0x50
 8001d20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d22:	f107 0320 	add.w	r3, r7, #32
 8001d26:	2230      	movs	r2, #48	; 0x30
 8001d28:	2100      	movs	r1, #0
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f007 f8a2 	bl	8008e74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d30:	f107 030c 	add.w	r3, r7, #12
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
 8001d3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d40:	2300      	movs	r3, #0
 8001d42:	60bb      	str	r3, [r7, #8]
 8001d44:	4b28      	ldr	r3, [pc, #160]	; (8001de8 <SystemClock_Config+0xcc>)
 8001d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d48:	4a27      	ldr	r2, [pc, #156]	; (8001de8 <SystemClock_Config+0xcc>)
 8001d4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d4e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d50:	4b25      	ldr	r3, [pc, #148]	; (8001de8 <SystemClock_Config+0xcc>)
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d58:	60bb      	str	r3, [r7, #8]
 8001d5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	607b      	str	r3, [r7, #4]
 8001d60:	4b22      	ldr	r3, [pc, #136]	; (8001dec <SystemClock_Config+0xd0>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a21      	ldr	r2, [pc, #132]	; (8001dec <SystemClock_Config+0xd0>)
 8001d66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d6a:	6013      	str	r3, [r2, #0]
 8001d6c:	4b1f      	ldr	r3, [pc, #124]	; (8001dec <SystemClock_Config+0xd0>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d74:	607b      	str	r3, [r7, #4]
 8001d76:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d80:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d82:	2302      	movs	r3, #2
 8001d84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d8c:	2308      	movs	r3, #8
 8001d8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001d90:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001d94:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d96:	2302      	movs	r3, #2
 8001d98:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d9a:	2307      	movs	r3, #7
 8001d9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d9e:	f107 0320 	add.w	r3, r7, #32
 8001da2:	4618      	mov	r0, r3
 8001da4:	f002 fc8c 	bl	80046c0 <HAL_RCC_OscConfig>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001dae:	f000 f85f 	bl	8001e70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001db2:	230f      	movs	r3, #15
 8001db4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001db6:	2302      	movs	r3, #2
 8001db8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001dbe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001dc2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001dc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dc8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001dca:	f107 030c 	add.w	r3, r7, #12
 8001dce:	2105      	movs	r1, #5
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f002 feed 	bl	8004bb0 <HAL_RCC_ClockConfig>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001ddc:	f000 f848 	bl	8001e70 <Error_Handler>
  }
}
 8001de0:	bf00      	nop
 8001de2:	3750      	adds	r7, #80	; 0x50
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40023800 	.word	0x40023800
 8001dec:	40007000 	.word	0x40007000

08001df0 <HAL_UART_RxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
   // do nothing here
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
//			else{
//				HAL_UART_Receive_DMA(&huart2, joystick_buf, sizeof(joystick_buf));
//			}
//		}
	}
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM7){
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a11      	ldr	r2, [pc, #68]	; (8001e58 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d101      	bne.n	8001e1a <HAL_TIM_PeriodElapsedCallback+0x16>
		motor_VeloControl();
 8001e16:	f7ff f8df 	bl	8000fd8 <motor_VeloControl>
	}
	if (htim->Instance == TIM13){
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a0f      	ldr	r2, [pc, #60]	; (8001e5c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d10e      	bne.n	8001e42 <HAL_TIM_PeriodElapsedCallback+0x3e>
		motor_VectorKinematic(joystick_x, joystick_y, joystick_z);
 8001e24:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001e26:	f993 3000 	ldrsb.w	r3, [r3]
 8001e2a:	b21b      	sxth	r3, r3
 8001e2c:	4a0d      	ldr	r2, [pc, #52]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001e2e:	f992 2000 	ldrsb.w	r2, [r2]
 8001e32:	b211      	sxth	r1, r2
 8001e34:	4a0c      	ldr	r2, [pc, #48]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001e36:	f992 2000 	ldrsb.w	r2, [r2]
 8001e3a:	b212      	sxth	r2, r2
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7fe ff87 	bl	8000d50 <motor_VectorKinematic>
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a09      	ldr	r2, [pc, #36]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d101      	bne.n	8001e50 <HAL_TIM_PeriodElapsedCallback+0x4c>
    HAL_IncTick();
 8001e4c:	f001 f96e 	bl	800312c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e50:	bf00      	nop
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40001400 	.word	0x40001400
 8001e5c:	40001c00 	.word	0x40001c00
 8001e60:	20000509 	.word	0x20000509
 8001e64:	2000050a 	.word	0x2000050a
 8001e68:	2000050b 	.word	0x2000050b
 8001e6c:	40001000 	.word	0x40001000

08001e70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e74:	b672      	cpsid	i
}
 8001e76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e78:	e7fe      	b.n	8001e78 <Error_Handler+0x8>
	...

08001e7c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001e80:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <MX_SPI1_Init+0x64>)
 8001e82:	4a18      	ldr	r2, [pc, #96]	; (8001ee4 <MX_SPI1_Init+0x68>)
 8001e84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e86:	4b16      	ldr	r3, [pc, #88]	; (8001ee0 <MX_SPI1_Init+0x64>)
 8001e88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e8e:	4b14      	ldr	r3, [pc, #80]	; (8001ee0 <MX_SPI1_Init+0x64>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e94:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <MX_SPI1_Init+0x64>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e9a:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <MX_SPI1_Init+0x64>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ea0:	4b0f      	ldr	r3, [pc, #60]	; (8001ee0 <MX_SPI1_Init+0x64>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ea6:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <MX_SPI1_Init+0x64>)
 8001ea8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001eae:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <MX_SPI1_Init+0x64>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001eb4:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <MX_SPI1_Init+0x64>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001eba:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <MX_SPI1_Init+0x64>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ec0:	4b07      	ldr	r3, [pc, #28]	; (8001ee0 <MX_SPI1_Init+0x64>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001ec6:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <MX_SPI1_Init+0x64>)
 8001ec8:	220a      	movs	r2, #10
 8001eca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ecc:	4804      	ldr	r0, [pc, #16]	; (8001ee0 <MX_SPI1_Init+0x64>)
 8001ece:	f003 f8c1 	bl	8005054 <HAL_SPI_Init>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ed8:	f7ff ffca 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001edc:	bf00      	nop
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	20000514 	.word	0x20000514
 8001ee4:	40013000 	.word	0x40013000

08001ee8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08a      	sub	sp, #40	; 0x28
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef0:	f107 0314 	add.w	r3, r7, #20
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
 8001efe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a28      	ldr	r2, [pc, #160]	; (8001fa8 <HAL_SPI_MspInit+0xc0>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d149      	bne.n	8001f9e <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	613b      	str	r3, [r7, #16]
 8001f0e:	4b27      	ldr	r3, [pc, #156]	; (8001fac <HAL_SPI_MspInit+0xc4>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f12:	4a26      	ldr	r2, [pc, #152]	; (8001fac <HAL_SPI_MspInit+0xc4>)
 8001f14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f18:	6453      	str	r3, [r2, #68]	; 0x44
 8001f1a:	4b24      	ldr	r3, [pc, #144]	; (8001fac <HAL_SPI_MspInit+0xc4>)
 8001f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	4b20      	ldr	r3, [pc, #128]	; (8001fac <HAL_SPI_MspInit+0xc4>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	4a1f      	ldr	r2, [pc, #124]	; (8001fac <HAL_SPI_MspInit+0xc4>)
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	6313      	str	r3, [r2, #48]	; 0x30
 8001f36:	4b1d      	ldr	r3, [pc, #116]	; (8001fac <HAL_SPI_MspInit+0xc4>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	4b19      	ldr	r3, [pc, #100]	; (8001fac <HAL_SPI_MspInit+0xc4>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	4a18      	ldr	r2, [pc, #96]	; (8001fac <HAL_SPI_MspInit+0xc4>)
 8001f4c:	f043 0302 	orr.w	r3, r3, #2
 8001f50:	6313      	str	r3, [r2, #48]	; 0x30
 8001f52:	4b16      	ldr	r3, [pc, #88]	; (8001fac <HAL_SPI_MspInit+0xc4>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	60bb      	str	r3, [r7, #8]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001f5e:	2330      	movs	r3, #48	; 0x30
 8001f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f62:	2302      	movs	r3, #2
 8001f64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f6e:	2305      	movs	r3, #5
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f72:	f107 0314 	add.w	r3, r7, #20
 8001f76:	4619      	mov	r1, r3
 8001f78:	480d      	ldr	r0, [pc, #52]	; (8001fb0 <HAL_SPI_MspInit+0xc8>)
 8001f7a:	f002 f8a7 	bl	80040cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001f7e:	2330      	movs	r3, #48	; 0x30
 8001f80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f82:	2302      	movs	r3, #2
 8001f84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f8e:	2305      	movs	r3, #5
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f92:	f107 0314 	add.w	r3, r7, #20
 8001f96:	4619      	mov	r1, r3
 8001f98:	4806      	ldr	r0, [pc, #24]	; (8001fb4 <HAL_SPI_MspInit+0xcc>)
 8001f9a:	f002 f897 	bl	80040cc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001f9e:	bf00      	nop
 8001fa0:	3728      	adds	r7, #40	; 0x28
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40013000 	.word	0x40013000
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40020000 	.word	0x40020000
 8001fb4:	40020400 	.word	0x40020400

08001fb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	607b      	str	r3, [r7, #4]
 8001fc2:	4b12      	ldr	r3, [pc, #72]	; (800200c <HAL_MspInit+0x54>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc6:	4a11      	ldr	r2, [pc, #68]	; (800200c <HAL_MspInit+0x54>)
 8001fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001fce:	4b0f      	ldr	r3, [pc, #60]	; (800200c <HAL_MspInit+0x54>)
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fd6:	607b      	str	r3, [r7, #4]
 8001fd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	603b      	str	r3, [r7, #0]
 8001fde:	4b0b      	ldr	r3, [pc, #44]	; (800200c <HAL_MspInit+0x54>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	4a0a      	ldr	r2, [pc, #40]	; (800200c <HAL_MspInit+0x54>)
 8001fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fea:	4b08      	ldr	r3, [pc, #32]	; (800200c <HAL_MspInit+0x54>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff2:	603b      	str	r3, [r7, #0]
 8001ff4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	210f      	movs	r1, #15
 8001ffa:	f06f 0001 	mvn.w	r0, #1
 8001ffe:	f001 fccb 	bl	8003998 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40023800 	.word	0x40023800

08002010 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b08e      	sub	sp, #56	; 0x38
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800201c:	2300      	movs	r3, #0
 800201e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002020:	2300      	movs	r3, #0
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	4b33      	ldr	r3, [pc, #204]	; (80020f4 <HAL_InitTick+0xe4>)
 8002026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002028:	4a32      	ldr	r2, [pc, #200]	; (80020f4 <HAL_InitTick+0xe4>)
 800202a:	f043 0310 	orr.w	r3, r3, #16
 800202e:	6413      	str	r3, [r2, #64]	; 0x40
 8002030:	4b30      	ldr	r3, [pc, #192]	; (80020f4 <HAL_InitTick+0xe4>)
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	f003 0310 	and.w	r3, r3, #16
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800203c:	f107 0210 	add.w	r2, r7, #16
 8002040:	f107 0314 	add.w	r3, r7, #20
 8002044:	4611      	mov	r1, r2
 8002046:	4618      	mov	r0, r3
 8002048:	f002 ffd2 	bl	8004ff0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800204c:	6a3b      	ldr	r3, [r7, #32]
 800204e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002052:	2b00      	cmp	r3, #0
 8002054:	d103      	bne.n	800205e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002056:	f002 ffa3 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 800205a:	6378      	str	r0, [r7, #52]	; 0x34
 800205c:	e004      	b.n	8002068 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800205e:	f002 ff9f 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 8002062:	4603      	mov	r3, r0
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800206a:	4a23      	ldr	r2, [pc, #140]	; (80020f8 <HAL_InitTick+0xe8>)
 800206c:	fba2 2303 	umull	r2, r3, r2, r3
 8002070:	0c9b      	lsrs	r3, r3, #18
 8002072:	3b01      	subs	r3, #1
 8002074:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002076:	4b21      	ldr	r3, [pc, #132]	; (80020fc <HAL_InitTick+0xec>)
 8002078:	4a21      	ldr	r2, [pc, #132]	; (8002100 <HAL_InitTick+0xf0>)
 800207a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800207c:	4b1f      	ldr	r3, [pc, #124]	; (80020fc <HAL_InitTick+0xec>)
 800207e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002082:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002084:	4a1d      	ldr	r2, [pc, #116]	; (80020fc <HAL_InitTick+0xec>)
 8002086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002088:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800208a:	4b1c      	ldr	r3, [pc, #112]	; (80020fc <HAL_InitTick+0xec>)
 800208c:	2200      	movs	r2, #0
 800208e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002090:	4b1a      	ldr	r3, [pc, #104]	; (80020fc <HAL_InitTick+0xec>)
 8002092:	2200      	movs	r2, #0
 8002094:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002096:	4b19      	ldr	r3, [pc, #100]	; (80020fc <HAL_InitTick+0xec>)
 8002098:	2200      	movs	r2, #0
 800209a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800209c:	4817      	ldr	r0, [pc, #92]	; (80020fc <HAL_InitTick+0xec>)
 800209e:	f003 f862 	bl	8005166 <HAL_TIM_Base_Init>
 80020a2:	4603      	mov	r3, r0
 80020a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80020a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d11b      	bne.n	80020e8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80020b0:	4812      	ldr	r0, [pc, #72]	; (80020fc <HAL_InitTick+0xec>)
 80020b2:	f003 f8a7 	bl	8005204 <HAL_TIM_Base_Start_IT>
 80020b6:	4603      	mov	r3, r0
 80020b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80020bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d111      	bne.n	80020e8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80020c4:	2036      	movs	r0, #54	; 0x36
 80020c6:	f001 fc83 	bl	80039d0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b0f      	cmp	r3, #15
 80020ce:	d808      	bhi.n	80020e2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80020d0:	2200      	movs	r2, #0
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	2036      	movs	r0, #54	; 0x36
 80020d6:	f001 fc5f 	bl	8003998 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020da:	4a0a      	ldr	r2, [pc, #40]	; (8002104 <HAL_InitTick+0xf4>)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6013      	str	r3, [r2, #0]
 80020e0:	e002      	b.n	80020e8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80020e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3738      	adds	r7, #56	; 0x38
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40023800 	.word	0x40023800
 80020f8:	431bde83 	.word	0x431bde83
 80020fc:	2000056c 	.word	0x2000056c
 8002100:	40001000 	.word	0x40001000
 8002104:	20000018 	.word	0x20000018

08002108 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800210c:	e7fe      	b.n	800210c <NMI_Handler+0x4>

0800210e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800210e:	b480      	push	{r7}
 8002110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002112:	e7fe      	b.n	8002112 <HardFault_Handler+0x4>

08002114 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002118:	e7fe      	b.n	8002118 <MemManage_Handler+0x4>

0800211a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800211a:	b480      	push	{r7}
 800211c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800211e:	e7fe      	b.n	800211e <BusFault_Handler+0x4>

08002120 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002124:	e7fe      	b.n	8002124 <UsageFault_Handler+0x4>

08002126 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002126:	b480      	push	{r7}
 8002128:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002138:	4802      	ldr	r0, [pc, #8]	; (8002144 <DMA1_Stream5_IRQHandler+0x10>)
 800213a:	f001 fd5d 	bl	8003bf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800213e:	bf00      	nop
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	20000990 	.word	0x20000990

08002148 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800214c:	4802      	ldr	r0, [pc, #8]	; (8002158 <TIM2_IRQHandler+0x10>)
 800214e:	f003 fb3f 	bl	80057d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	200005fc 	.word	0x200005fc

0800215c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002160:	4802      	ldr	r0, [pc, #8]	; (800216c <TIM3_IRQHandler+0x10>)
 8002162:	f003 fb35 	bl	80057d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002166:	bf00      	nop
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20000644 	.word	0x20000644

08002170 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002174:	4802      	ldr	r0, [pc, #8]	; (8002180 <TIM4_IRQHandler+0x10>)
 8002176:	f003 fb2b 	bl	80057d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800217a:	bf00      	nop
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	2000068c 	.word	0x2000068c

08002184 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002188:	4803      	ldr	r0, [pc, #12]	; (8002198 <TIM8_UP_TIM13_IRQHandler+0x14>)
 800218a:	f003 fb21 	bl	80057d0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800218e:	4803      	ldr	r0, [pc, #12]	; (800219c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8002190:	f003 fb1e 	bl	80057d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002194:	bf00      	nop
 8002196:	bd80      	pop	{r7, pc}
 8002198:	2000071c 	.word	0x2000071c
 800219c:	200007f4 	.word	0x200007f4

080021a0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80021a4:	4802      	ldr	r0, [pc, #8]	; (80021b0 <TIM6_DAC_IRQHandler+0x10>)
 80021a6:	f003 fb13 	bl	80057d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80021aa:	bf00      	nop
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	2000056c 	.word	0x2000056c

080021b4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80021b8:	4802      	ldr	r0, [pc, #8]	; (80021c4 <TIM7_IRQHandler+0x10>)
 80021ba:	f003 fb09 	bl	80057d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	200006d4 	.word	0x200006d4

080021c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021cc:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <SystemInit+0x20>)
 80021ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d2:	4a05      	ldr	r2, [pc, #20]	; (80021e8 <SystemInit+0x20>)
 80021d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	e000ed00 	.word	0xe000ed00

080021ec <MX_TIM1_Init>:
TIM_HandleTypeDef htim12;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08c      	sub	sp, #48	; 0x30
 80021f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80021f2:	f107 030c 	add.w	r3, r7, #12
 80021f6:	2224      	movs	r2, #36	; 0x24
 80021f8:	2100      	movs	r1, #0
 80021fa:	4618      	mov	r0, r3
 80021fc:	f006 fe3a 	bl	8008e74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002200:	1d3b      	adds	r3, r7, #4
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002208:	4b22      	ldr	r3, [pc, #136]	; (8002294 <MX_TIM1_Init+0xa8>)
 800220a:	4a23      	ldr	r2, [pc, #140]	; (8002298 <MX_TIM1_Init+0xac>)
 800220c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800220e:	4b21      	ldr	r3, [pc, #132]	; (8002294 <MX_TIM1_Init+0xa8>)
 8002210:	2200      	movs	r2, #0
 8002212:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002214:	4b1f      	ldr	r3, [pc, #124]	; (8002294 <MX_TIM1_Init+0xa8>)
 8002216:	2200      	movs	r2, #0
 8002218:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800221a:	4b1e      	ldr	r3, [pc, #120]	; (8002294 <MX_TIM1_Init+0xa8>)
 800221c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002220:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002222:	4b1c      	ldr	r3, [pc, #112]	; (8002294 <MX_TIM1_Init+0xa8>)
 8002224:	2200      	movs	r2, #0
 8002226:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002228:	4b1a      	ldr	r3, [pc, #104]	; (8002294 <MX_TIM1_Init+0xa8>)
 800222a:	2200      	movs	r2, #0
 800222c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800222e:	4b19      	ldr	r3, [pc, #100]	; (8002294 <MX_TIM1_Init+0xa8>)
 8002230:	2200      	movs	r2, #0
 8002232:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002234:	2301      	movs	r3, #1
 8002236:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002238:	2300      	movs	r3, #0
 800223a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800223c:	2301      	movs	r3, #1
 800223e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002240:	2300      	movs	r3, #0
 8002242:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002244:	2300      	movs	r3, #0
 8002246:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002248:	2300      	movs	r3, #0
 800224a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800224c:	2301      	movs	r3, #1
 800224e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002250:	2300      	movs	r3, #0
 8002252:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002258:	f107 030c 	add.w	r3, r7, #12
 800225c:	4619      	mov	r1, r3
 800225e:	480d      	ldr	r0, [pc, #52]	; (8002294 <MX_TIM1_Init+0xa8>)
 8002260:	f003 f962 	bl	8005528 <HAL_TIM_Encoder_Init>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800226a:	f7ff fe01 	bl	8001e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800226e:	2300      	movs	r3, #0
 8002270:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002272:	2300      	movs	r3, #0
 8002274:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002276:	1d3b      	adds	r3, r7, #4
 8002278:	4619      	mov	r1, r3
 800227a:	4806      	ldr	r0, [pc, #24]	; (8002294 <MX_TIM1_Init+0xa8>)
 800227c:	f004 f868 	bl	8006350 <HAL_TIMEx_MasterConfigSynchronization>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002286:	f7ff fdf3 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800228a:	bf00      	nop
 800228c:	3730      	adds	r7, #48	; 0x30
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	200005b4 	.word	0x200005b4
 8002298:	40010000 	.word	0x40010000

0800229c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b08c      	sub	sp, #48	; 0x30
 80022a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80022a2:	f107 030c 	add.w	r3, r7, #12
 80022a6:	2224      	movs	r2, #36	; 0x24
 80022a8:	2100      	movs	r1, #0
 80022aa:	4618      	mov	r0, r3
 80022ac:	f006 fde2 	bl	8008e74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022b0:	1d3b      	adds	r3, r7, #4
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022b8:	4b21      	ldr	r3, [pc, #132]	; (8002340 <MX_TIM2_Init+0xa4>)
 80022ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80022c0:	4b1f      	ldr	r3, [pc, #124]	; (8002340 <MX_TIM2_Init+0xa4>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c6:	4b1e      	ldr	r3, [pc, #120]	; (8002340 <MX_TIM2_Init+0xa4>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80022cc:	4b1c      	ldr	r3, [pc, #112]	; (8002340 <MX_TIM2_Init+0xa4>)
 80022ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022d4:	4b1a      	ldr	r3, [pc, #104]	; (8002340 <MX_TIM2_Init+0xa4>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022da:	4b19      	ldr	r3, [pc, #100]	; (8002340 <MX_TIM2_Init+0xa4>)
 80022dc:	2200      	movs	r2, #0
 80022de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80022e0:	2301      	movs	r3, #1
 80022e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80022e4:	2300      	movs	r3, #0
 80022e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80022e8:	2301      	movs	r3, #1
 80022ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80022ec:	2300      	movs	r3, #0
 80022ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80022f0:	2300      	movs	r3, #0
 80022f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80022f4:	2300      	movs	r3, #0
 80022f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80022f8:	2301      	movs	r3, #1
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80022fc:	2300      	movs	r3, #0
 80022fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002300:	2300      	movs	r3, #0
 8002302:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002304:	f107 030c 	add.w	r3, r7, #12
 8002308:	4619      	mov	r1, r3
 800230a:	480d      	ldr	r0, [pc, #52]	; (8002340 <MX_TIM2_Init+0xa4>)
 800230c:	f003 f90c 	bl	8005528 <HAL_TIM_Encoder_Init>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002316:	f7ff fdab 	bl	8001e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800231a:	2300      	movs	r3, #0
 800231c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800231e:	2300      	movs	r3, #0
 8002320:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002322:	1d3b      	adds	r3, r7, #4
 8002324:	4619      	mov	r1, r3
 8002326:	4806      	ldr	r0, [pc, #24]	; (8002340 <MX_TIM2_Init+0xa4>)
 8002328:	f004 f812 	bl	8006350 <HAL_TIMEx_MasterConfigSynchronization>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002332:	f7ff fd9d 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002336:	bf00      	nop
 8002338:	3730      	adds	r7, #48	; 0x30
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	200005fc 	.word	0x200005fc

08002344 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b08c      	sub	sp, #48	; 0x30
 8002348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800234a:	f107 030c 	add.w	r3, r7, #12
 800234e:	2224      	movs	r2, #36	; 0x24
 8002350:	2100      	movs	r1, #0
 8002352:	4618      	mov	r0, r3
 8002354:	f006 fd8e 	bl	8008e74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002358:	1d3b      	adds	r3, r7, #4
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002360:	4b20      	ldr	r3, [pc, #128]	; (80023e4 <MX_TIM3_Init+0xa0>)
 8002362:	4a21      	ldr	r2, [pc, #132]	; (80023e8 <MX_TIM3_Init+0xa4>)
 8002364:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002366:	4b1f      	ldr	r3, [pc, #124]	; (80023e4 <MX_TIM3_Init+0xa0>)
 8002368:	2200      	movs	r2, #0
 800236a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800236c:	4b1d      	ldr	r3, [pc, #116]	; (80023e4 <MX_TIM3_Init+0xa0>)
 800236e:	2200      	movs	r2, #0
 8002370:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002372:	4b1c      	ldr	r3, [pc, #112]	; (80023e4 <MX_TIM3_Init+0xa0>)
 8002374:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002378:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800237a:	4b1a      	ldr	r3, [pc, #104]	; (80023e4 <MX_TIM3_Init+0xa0>)
 800237c:	2200      	movs	r2, #0
 800237e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002380:	4b18      	ldr	r3, [pc, #96]	; (80023e4 <MX_TIM3_Init+0xa0>)
 8002382:	2200      	movs	r2, #0
 8002384:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002386:	2301      	movs	r3, #1
 8002388:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800238a:	2300      	movs	r3, #0
 800238c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800238e:	2301      	movs	r3, #1
 8002390:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002392:	2300      	movs	r3, #0
 8002394:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002396:	2300      	movs	r3, #0
 8002398:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800239a:	2300      	movs	r3, #0
 800239c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800239e:	2301      	movs	r3, #1
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80023a2:	2300      	movs	r3, #0
 80023a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80023a6:	2300      	movs	r3, #0
 80023a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80023aa:	f107 030c 	add.w	r3, r7, #12
 80023ae:	4619      	mov	r1, r3
 80023b0:	480c      	ldr	r0, [pc, #48]	; (80023e4 <MX_TIM3_Init+0xa0>)
 80023b2:	f003 f8b9 	bl	8005528 <HAL_TIM_Encoder_Init>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80023bc:	f7ff fd58 	bl	8001e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023c0:	2300      	movs	r3, #0
 80023c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023c4:	2300      	movs	r3, #0
 80023c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023c8:	1d3b      	adds	r3, r7, #4
 80023ca:	4619      	mov	r1, r3
 80023cc:	4805      	ldr	r0, [pc, #20]	; (80023e4 <MX_TIM3_Init+0xa0>)
 80023ce:	f003 ffbf 	bl	8006350 <HAL_TIMEx_MasterConfigSynchronization>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80023d8:	f7ff fd4a 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80023dc:	bf00      	nop
 80023de:	3730      	adds	r7, #48	; 0x30
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	20000644 	.word	0x20000644
 80023e8:	40000400 	.word	0x40000400

080023ec <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08c      	sub	sp, #48	; 0x30
 80023f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80023f2:	f107 030c 	add.w	r3, r7, #12
 80023f6:	2224      	movs	r2, #36	; 0x24
 80023f8:	2100      	movs	r1, #0
 80023fa:	4618      	mov	r0, r3
 80023fc:	f006 fd3a 	bl	8008e74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002400:	1d3b      	adds	r3, r7, #4
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002408:	4b20      	ldr	r3, [pc, #128]	; (800248c <MX_TIM4_Init+0xa0>)
 800240a:	4a21      	ldr	r2, [pc, #132]	; (8002490 <MX_TIM4_Init+0xa4>)
 800240c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800240e:	4b1f      	ldr	r3, [pc, #124]	; (800248c <MX_TIM4_Init+0xa0>)
 8002410:	2200      	movs	r2, #0
 8002412:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002414:	4b1d      	ldr	r3, [pc, #116]	; (800248c <MX_TIM4_Init+0xa0>)
 8002416:	2200      	movs	r2, #0
 8002418:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800241a:	4b1c      	ldr	r3, [pc, #112]	; (800248c <MX_TIM4_Init+0xa0>)
 800241c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002420:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002422:	4b1a      	ldr	r3, [pc, #104]	; (800248c <MX_TIM4_Init+0xa0>)
 8002424:	2200      	movs	r2, #0
 8002426:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002428:	4b18      	ldr	r3, [pc, #96]	; (800248c <MX_TIM4_Init+0xa0>)
 800242a:	2200      	movs	r2, #0
 800242c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800242e:	2301      	movs	r3, #1
 8002430:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002432:	2300      	movs	r3, #0
 8002434:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002436:	2301      	movs	r3, #1
 8002438:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800243a:	2300      	movs	r3, #0
 800243c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800243e:	2300      	movs	r3, #0
 8002440:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002442:	2300      	movs	r3, #0
 8002444:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002446:	2301      	movs	r3, #1
 8002448:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800244a:	2300      	movs	r3, #0
 800244c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800244e:	2300      	movs	r3, #0
 8002450:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002452:	f107 030c 	add.w	r3, r7, #12
 8002456:	4619      	mov	r1, r3
 8002458:	480c      	ldr	r0, [pc, #48]	; (800248c <MX_TIM4_Init+0xa0>)
 800245a:	f003 f865 	bl	8005528 <HAL_TIM_Encoder_Init>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002464:	f7ff fd04 	bl	8001e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002468:	2300      	movs	r3, #0
 800246a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800246c:	2300      	movs	r3, #0
 800246e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002470:	1d3b      	adds	r3, r7, #4
 8002472:	4619      	mov	r1, r3
 8002474:	4805      	ldr	r0, [pc, #20]	; (800248c <MX_TIM4_Init+0xa0>)
 8002476:	f003 ff6b 	bl	8006350 <HAL_TIMEx_MasterConfigSynchronization>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002480:	f7ff fcf6 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002484:	bf00      	nop
 8002486:	3730      	adds	r7, #48	; 0x30
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	2000068c 	.word	0x2000068c
 8002490:	40000800 	.word	0x40000800

08002494 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800249a:	463b      	mov	r3, r7
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80024a2:	4b15      	ldr	r3, [pc, #84]	; (80024f8 <MX_TIM7_Init+0x64>)
 80024a4:	4a15      	ldr	r2, [pc, #84]	; (80024fc <MX_TIM7_Init+0x68>)
 80024a6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 20000-1;
 80024a8:	4b13      	ldr	r3, [pc, #76]	; (80024f8 <MX_TIM7_Init+0x64>)
 80024aa:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80024ae:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b0:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <MX_TIM7_Init+0x64>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 200-1;
 80024b6:	4b10      	ldr	r3, [pc, #64]	; (80024f8 <MX_TIM7_Init+0x64>)
 80024b8:	22c7      	movs	r2, #199	; 0xc7
 80024ba:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024bc:	4b0e      	ldr	r3, [pc, #56]	; (80024f8 <MX_TIM7_Init+0x64>)
 80024be:	2200      	movs	r2, #0
 80024c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80024c2:	480d      	ldr	r0, [pc, #52]	; (80024f8 <MX_TIM7_Init+0x64>)
 80024c4:	f002 fe4f 	bl	8005166 <HAL_TIM_Base_Init>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80024ce:	f7ff fccf 	bl	8001e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024d2:	2300      	movs	r3, #0
 80024d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024d6:	2300      	movs	r3, #0
 80024d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80024da:	463b      	mov	r3, r7
 80024dc:	4619      	mov	r1, r3
 80024de:	4806      	ldr	r0, [pc, #24]	; (80024f8 <MX_TIM7_Init+0x64>)
 80024e0:	f003 ff36 	bl	8006350 <HAL_TIMEx_MasterConfigSynchronization>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80024ea:	f7ff fcc1 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	200006d4 	.word	0x200006d4
 80024fc:	40001400 	.word	0x40001400

08002500 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b08c      	sub	sp, #48	; 0x30
 8002504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002506:	f107 030c 	add.w	r3, r7, #12
 800250a:	2224      	movs	r2, #36	; 0x24
 800250c:	2100      	movs	r1, #0
 800250e:	4618      	mov	r0, r3
 8002510:	f006 fcb0 	bl	8008e74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002514:	1d3b      	adds	r3, r7, #4
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800251c:	4b22      	ldr	r3, [pc, #136]	; (80025a8 <MX_TIM8_Init+0xa8>)
 800251e:	4a23      	ldr	r2, [pc, #140]	; (80025ac <MX_TIM8_Init+0xac>)
 8002520:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002522:	4b21      	ldr	r3, [pc, #132]	; (80025a8 <MX_TIM8_Init+0xa8>)
 8002524:	2200      	movs	r2, #0
 8002526:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002528:	4b1f      	ldr	r3, [pc, #124]	; (80025a8 <MX_TIM8_Init+0xa8>)
 800252a:	2200      	movs	r2, #0
 800252c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800252e:	4b1e      	ldr	r3, [pc, #120]	; (80025a8 <MX_TIM8_Init+0xa8>)
 8002530:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002534:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002536:	4b1c      	ldr	r3, [pc, #112]	; (80025a8 <MX_TIM8_Init+0xa8>)
 8002538:	2200      	movs	r2, #0
 800253a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800253c:	4b1a      	ldr	r3, [pc, #104]	; (80025a8 <MX_TIM8_Init+0xa8>)
 800253e:	2200      	movs	r2, #0
 8002540:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002542:	4b19      	ldr	r3, [pc, #100]	; (80025a8 <MX_TIM8_Init+0xa8>)
 8002544:	2200      	movs	r2, #0
 8002546:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002548:	2301      	movs	r3, #1
 800254a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800254c:	2300      	movs	r3, #0
 800254e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002550:	2301      	movs	r3, #1
 8002552:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002554:	2300      	movs	r3, #0
 8002556:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002558:	2300      	movs	r3, #0
 800255a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800255c:	2300      	movs	r3, #0
 800255e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002560:	2301      	movs	r3, #1
 8002562:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002564:	2300      	movs	r3, #0
 8002566:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002568:	2300      	movs	r3, #0
 800256a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800256c:	f107 030c 	add.w	r3, r7, #12
 8002570:	4619      	mov	r1, r3
 8002572:	480d      	ldr	r0, [pc, #52]	; (80025a8 <MX_TIM8_Init+0xa8>)
 8002574:	f002 ffd8 	bl	8005528 <HAL_TIM_Encoder_Init>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800257e:	f7ff fc77 	bl	8001e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002582:	2300      	movs	r3, #0
 8002584:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002586:	2300      	movs	r3, #0
 8002588:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800258a:	1d3b      	adds	r3, r7, #4
 800258c:	4619      	mov	r1, r3
 800258e:	4806      	ldr	r0, [pc, #24]	; (80025a8 <MX_TIM8_Init+0xa8>)
 8002590:	f003 fede 	bl	8006350 <HAL_TIMEx_MasterConfigSynchronization>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800259a:	f7ff fc69 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800259e:	bf00      	nop
 80025a0:	3730      	adds	r7, #48	; 0x30
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	2000071c 	.word	0x2000071c
 80025ac:	40010400 	.word	0x40010400

080025b0 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08c      	sub	sp, #48	; 0x30
 80025b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025b6:	f107 0320 	add.w	r3, r7, #32
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	605a      	str	r2, [r3, #4]
 80025c0:	609a      	str	r2, [r3, #8]
 80025c2:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025c4:	1d3b      	adds	r3, r7, #4
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	605a      	str	r2, [r3, #4]
 80025cc:	609a      	str	r2, [r3, #8]
 80025ce:	60da      	str	r2, [r3, #12]
 80025d0:	611a      	str	r2, [r3, #16]
 80025d2:	615a      	str	r2, [r3, #20]
 80025d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80025d6:	4b2a      	ldr	r3, [pc, #168]	; (8002680 <MX_TIM9_Init+0xd0>)
 80025d8:	4a2a      	ldr	r2, [pc, #168]	; (8002684 <MX_TIM9_Init+0xd4>)
 80025da:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 84-1;
 80025dc:	4b28      	ldr	r3, [pc, #160]	; (8002680 <MX_TIM9_Init+0xd0>)
 80025de:	2253      	movs	r2, #83	; 0x53
 80025e0:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025e2:	4b27      	ldr	r3, [pc, #156]	; (8002680 <MX_TIM9_Init+0xd0>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 200-1;
 80025e8:	4b25      	ldr	r3, [pc, #148]	; (8002680 <MX_TIM9_Init+0xd0>)
 80025ea:	22c7      	movs	r2, #199	; 0xc7
 80025ec:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025ee:	4b24      	ldr	r3, [pc, #144]	; (8002680 <MX_TIM9_Init+0xd0>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025f4:	4b22      	ldr	r3, [pc, #136]	; (8002680 <MX_TIM9_Init+0xd0>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80025fa:	4821      	ldr	r0, [pc, #132]	; (8002680 <MX_TIM9_Init+0xd0>)
 80025fc:	f002 fdb3 	bl	8005166 <HAL_TIM_Base_Init>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_TIM9_Init+0x5a>
  {
    Error_Handler();
 8002606:	f7ff fc33 	bl	8001e70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800260a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800260e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002610:	f107 0320 	add.w	r3, r7, #32
 8002614:	4619      	mov	r1, r3
 8002616:	481a      	ldr	r0, [pc, #104]	; (8002680 <MX_TIM9_Init+0xd0>)
 8002618:	f003 faa4 	bl	8005b64 <HAL_TIM_ConfigClockSource>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <MX_TIM9_Init+0x76>
  {
    Error_Handler();
 8002622:	f7ff fc25 	bl	8001e70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8002626:	4816      	ldr	r0, [pc, #88]	; (8002680 <MX_TIM9_Init+0xd0>)
 8002628:	f002 fe5c 	bl	80052e4 <HAL_TIM_PWM_Init>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <MX_TIM9_Init+0x86>
  {
    Error_Handler();
 8002632:	f7ff fc1d 	bl	8001e70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002636:	2360      	movs	r3, #96	; 0x60
 8002638:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800263a:	2300      	movs	r3, #0
 800263c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800263e:	2300      	movs	r3, #0
 8002640:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002642:	2300      	movs	r3, #0
 8002644:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002646:	1d3b      	adds	r3, r7, #4
 8002648:	2200      	movs	r2, #0
 800264a:	4619      	mov	r1, r3
 800264c:	480c      	ldr	r0, [pc, #48]	; (8002680 <MX_TIM9_Init+0xd0>)
 800264e:	f003 f9c7 	bl	80059e0 <HAL_TIM_PWM_ConfigChannel>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <MX_TIM9_Init+0xac>
  {
    Error_Handler();
 8002658:	f7ff fc0a 	bl	8001e70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800265c:	1d3b      	adds	r3, r7, #4
 800265e:	2204      	movs	r2, #4
 8002660:	4619      	mov	r1, r3
 8002662:	4807      	ldr	r0, [pc, #28]	; (8002680 <MX_TIM9_Init+0xd0>)
 8002664:	f003 f9bc 	bl	80059e0 <HAL_TIM_PWM_ConfigChannel>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <MX_TIM9_Init+0xc2>
  {
    Error_Handler();
 800266e:	f7ff fbff 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8002672:	4803      	ldr	r0, [pc, #12]	; (8002680 <MX_TIM9_Init+0xd0>)
 8002674:	f000 fa66 	bl	8002b44 <HAL_TIM_MspPostInit>

}
 8002678:	bf00      	nop
 800267a:	3730      	adds	r7, #48	; 0x30
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	20000764 	.word	0x20000764
 8002684:	40014000 	.word	0x40014000

08002688 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b08c      	sub	sp, #48	; 0x30
 800268c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800268e:	f107 0320 	add.w	r3, r7, #32
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	605a      	str	r2, [r3, #4]
 8002698:	609a      	str	r2, [r3, #8]
 800269a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800269c:	1d3b      	adds	r3, r7, #4
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	605a      	str	r2, [r3, #4]
 80026a4:	609a      	str	r2, [r3, #8]
 80026a6:	60da      	str	r2, [r3, #12]
 80026a8:	611a      	str	r2, [r3, #16]
 80026aa:	615a      	str	r2, [r3, #20]
 80026ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80026ae:	4b2a      	ldr	r3, [pc, #168]	; (8002758 <MX_TIM12_Init+0xd0>)
 80026b0:	4a2a      	ldr	r2, [pc, #168]	; (800275c <MX_TIM12_Init+0xd4>)
 80026b2:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 168-1;
 80026b4:	4b28      	ldr	r3, [pc, #160]	; (8002758 <MX_TIM12_Init+0xd0>)
 80026b6:	22a7      	movs	r2, #167	; 0xa7
 80026b8:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026ba:	4b27      	ldr	r3, [pc, #156]	; (8002758 <MX_TIM12_Init+0xd0>)
 80026bc:	2200      	movs	r2, #0
 80026be:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 200-1;
 80026c0:	4b25      	ldr	r3, [pc, #148]	; (8002758 <MX_TIM12_Init+0xd0>)
 80026c2:	22c7      	movs	r2, #199	; 0xc7
 80026c4:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026c6:	4b24      	ldr	r3, [pc, #144]	; (8002758 <MX_TIM12_Init+0xd0>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026cc:	4b22      	ldr	r3, [pc, #136]	; (8002758 <MX_TIM12_Init+0xd0>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80026d2:	4821      	ldr	r0, [pc, #132]	; (8002758 <MX_TIM12_Init+0xd0>)
 80026d4:	f002 fd47 	bl	8005166 <HAL_TIM_Base_Init>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 80026de:	f7ff fbc7 	bl	8001e70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026e6:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80026e8:	f107 0320 	add.w	r3, r7, #32
 80026ec:	4619      	mov	r1, r3
 80026ee:	481a      	ldr	r0, [pc, #104]	; (8002758 <MX_TIM12_Init+0xd0>)
 80026f0:	f003 fa38 	bl	8005b64 <HAL_TIM_ConfigClockSource>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <MX_TIM12_Init+0x76>
  {
    Error_Handler();
 80026fa:	f7ff fbb9 	bl	8001e70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80026fe:	4816      	ldr	r0, [pc, #88]	; (8002758 <MX_TIM12_Init+0xd0>)
 8002700:	f002 fdf0 	bl	80052e4 <HAL_TIM_PWM_Init>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <MX_TIM12_Init+0x86>
  {
    Error_Handler();
 800270a:	f7ff fbb1 	bl	8001e70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800270e:	2360      	movs	r3, #96	; 0x60
 8002710:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002712:	2300      	movs	r3, #0
 8002714:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002716:	2300      	movs	r3, #0
 8002718:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800271a:	2300      	movs	r3, #0
 800271c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800271e:	1d3b      	adds	r3, r7, #4
 8002720:	2200      	movs	r2, #0
 8002722:	4619      	mov	r1, r3
 8002724:	480c      	ldr	r0, [pc, #48]	; (8002758 <MX_TIM12_Init+0xd0>)
 8002726:	f003 f95b 	bl	80059e0 <HAL_TIM_PWM_ConfigChannel>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <MX_TIM12_Init+0xac>
  {
    Error_Handler();
 8002730:	f7ff fb9e 	bl	8001e70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002734:	1d3b      	adds	r3, r7, #4
 8002736:	2204      	movs	r2, #4
 8002738:	4619      	mov	r1, r3
 800273a:	4807      	ldr	r0, [pc, #28]	; (8002758 <MX_TIM12_Init+0xd0>)
 800273c:	f003 f950 	bl	80059e0 <HAL_TIM_PWM_ConfigChannel>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <MX_TIM12_Init+0xc2>
  {
    Error_Handler();
 8002746:	f7ff fb93 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800274a:	4803      	ldr	r0, [pc, #12]	; (8002758 <MX_TIM12_Init+0xd0>)
 800274c:	f000 f9fa 	bl	8002b44 <HAL_TIM_MspPostInit>

}
 8002750:	bf00      	nop
 8002752:	3730      	adds	r7, #48	; 0x30
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	200007ac 	.word	0x200007ac
 800275c:	40001800 	.word	0x40001800

08002760 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002764:	4b0d      	ldr	r3, [pc, #52]	; (800279c <MX_TIM13_Init+0x3c>)
 8002766:	4a0e      	ldr	r2, [pc, #56]	; (80027a0 <MX_TIM13_Init+0x40>)
 8002768:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 168-1;
 800276a:	4b0c      	ldr	r3, [pc, #48]	; (800279c <MX_TIM13_Init+0x3c>)
 800276c:	22a7      	movs	r2, #167	; 0xa7
 800276e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002770:	4b0a      	ldr	r3, [pc, #40]	; (800279c <MX_TIM13_Init+0x3c>)
 8002772:	2200      	movs	r2, #0
 8002774:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 200-1;
 8002776:	4b09      	ldr	r3, [pc, #36]	; (800279c <MX_TIM13_Init+0x3c>)
 8002778:	22c7      	movs	r2, #199	; 0xc7
 800277a:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800277c:	4b07      	ldr	r3, [pc, #28]	; (800279c <MX_TIM13_Init+0x3c>)
 800277e:	2200      	movs	r2, #0
 8002780:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002782:	4b06      	ldr	r3, [pc, #24]	; (800279c <MX_TIM13_Init+0x3c>)
 8002784:	2200      	movs	r2, #0
 8002786:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002788:	4804      	ldr	r0, [pc, #16]	; (800279c <MX_TIM13_Init+0x3c>)
 800278a:	f002 fcec 	bl	8005166 <HAL_TIM_Base_Init>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <MX_TIM13_Init+0x38>
  {
    Error_Handler();
 8002794:	f7ff fb6c 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8002798:	bf00      	nop
 800279a:	bd80      	pop	{r7, pc}
 800279c:	200007f4 	.word	0x200007f4
 80027a0:	40001c00 	.word	0x40001c00

080027a4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b092      	sub	sp, #72	; 0x48
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	609a      	str	r2, [r3, #8]
 80027b8:	60da      	str	r2, [r3, #12]
 80027ba:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a9d      	ldr	r2, [pc, #628]	; (8002a38 <HAL_TIM_Encoder_MspInit+0x294>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d12d      	bne.n	8002822 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027c6:	2300      	movs	r3, #0
 80027c8:	633b      	str	r3, [r7, #48]	; 0x30
 80027ca:	4b9c      	ldr	r3, [pc, #624]	; (8002a3c <HAL_TIM_Encoder_MspInit+0x298>)
 80027cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ce:	4a9b      	ldr	r2, [pc, #620]	; (8002a3c <HAL_TIM_Encoder_MspInit+0x298>)
 80027d0:	f043 0301 	orr.w	r3, r3, #1
 80027d4:	6453      	str	r3, [r2, #68]	; 0x44
 80027d6:	4b99      	ldr	r3, [pc, #612]	; (8002a3c <HAL_TIM_Encoder_MspInit+0x298>)
 80027d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	633b      	str	r3, [r7, #48]	; 0x30
 80027e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80027e2:	2300      	movs	r3, #0
 80027e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027e6:	4b95      	ldr	r3, [pc, #596]	; (8002a3c <HAL_TIM_Encoder_MspInit+0x298>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	4a94      	ldr	r2, [pc, #592]	; (8002a3c <HAL_TIM_Encoder_MspInit+0x298>)
 80027ec:	f043 0310 	orr.w	r3, r3, #16
 80027f0:	6313      	str	r3, [r2, #48]	; 0x30
 80027f2:	4b92      	ldr	r3, [pc, #584]	; (8002a3c <HAL_TIM_Encoder_MspInit+0x298>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	f003 0310 	and.w	r3, r3, #16
 80027fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80027fe:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002802:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002804:	2302      	movs	r3, #2
 8002806:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002808:	2300      	movs	r3, #0
 800280a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280c:	2300      	movs	r3, #0
 800280e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002810:	2301      	movs	r3, #1
 8002812:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002814:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002818:	4619      	mov	r1, r3
 800281a:	4889      	ldr	r0, [pc, #548]	; (8002a40 <HAL_TIM_Encoder_MspInit+0x29c>)
 800281c:	f001 fc56 	bl	80040cc <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002820:	e106      	b.n	8002a30 <HAL_TIM_Encoder_MspInit+0x28c>
  else if(tim_encoderHandle->Instance==TIM2)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800282a:	d153      	bne.n	80028d4 <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800282c:	2300      	movs	r3, #0
 800282e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002830:	4b82      	ldr	r3, [pc, #520]	; (8002a3c <HAL_TIM_Encoder_MspInit+0x298>)
 8002832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002834:	4a81      	ldr	r2, [pc, #516]	; (8002a3c <HAL_TIM_Encoder_MspInit+0x298>)
 8002836:	f043 0301 	orr.w	r3, r3, #1
 800283a:	6413      	str	r3, [r2, #64]	; 0x40
 800283c:	4b7f      	ldr	r3, [pc, #508]	; (8002a3c <HAL_TIM_Encoder_MspInit+0x298>)
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	62bb      	str	r3, [r7, #40]	; 0x28
 8002846:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002848:	2300      	movs	r3, #0
 800284a:	627b      	str	r3, [r7, #36]	; 0x24
 800284c:	4b7b      	ldr	r3, [pc, #492]	; (8002a3c <HAL_TIM_Encoder_MspInit+0x298>)
 800284e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002850:	4a7a      	ldr	r2, [pc, #488]	; (8002a3c <HAL_TIM_Encoder_MspInit+0x298>)
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	6313      	str	r3, [r2, #48]	; 0x30
 8002858:	4b78      	ldr	r3, [pc, #480]	; (8002a3c <HAL_TIM_Encoder_MspInit+0x298>)
 800285a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	627b      	str	r3, [r7, #36]	; 0x24
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002864:	2300      	movs	r3, #0
 8002866:	623b      	str	r3, [r7, #32]
 8002868:	4b74      	ldr	r3, [pc, #464]	; (8002a3c <HAL_TIM_Encoder_MspInit+0x298>)
 800286a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286c:	4a73      	ldr	r2, [pc, #460]	; (8002a3c <HAL_TIM_Encoder_MspInit+0x298>)
 800286e:	f043 0302 	orr.w	r3, r3, #2
 8002872:	6313      	str	r3, [r2, #48]	; 0x30
 8002874:	4b71      	ldr	r3, [pc, #452]	; (8002a3c <HAL_TIM_Encoder_MspInit+0x298>)
 8002876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	623b      	str	r3, [r7, #32]
 800287e:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002880:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002884:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002886:	2302      	movs	r3, #2
 8002888:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	2300      	movs	r3, #0
 800288c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288e:	2300      	movs	r3, #0
 8002890:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002892:	2301      	movs	r3, #1
 8002894:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002896:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800289a:	4619      	mov	r1, r3
 800289c:	4869      	ldr	r0, [pc, #420]	; (8002a44 <HAL_TIM_Encoder_MspInit+0x2a0>)
 800289e:	f001 fc15 	bl	80040cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80028a2:	2308      	movs	r3, #8
 80028a4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a6:	2302      	movs	r3, #2
 80028a8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028aa:	2300      	movs	r3, #0
 80028ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ae:	2300      	movs	r3, #0
 80028b0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80028b2:	2301      	movs	r3, #1
 80028b4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028ba:	4619      	mov	r1, r3
 80028bc:	4862      	ldr	r0, [pc, #392]	; (8002a48 <HAL_TIM_Encoder_MspInit+0x2a4>)
 80028be:	f001 fc05 	bl	80040cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80028c2:	2200      	movs	r2, #0
 80028c4:	2105      	movs	r1, #5
 80028c6:	201c      	movs	r0, #28
 80028c8:	f001 f866 	bl	8003998 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80028cc:	201c      	movs	r0, #28
 80028ce:	f001 f87f 	bl	80039d0 <HAL_NVIC_EnableIRQ>
}
 80028d2:	e0ad      	b.n	8002a30 <HAL_TIM_Encoder_MspInit+0x28c>
  else if(tim_encoderHandle->Instance==TIM3)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a5c      	ldr	r2, [pc, #368]	; (8002a4c <HAL_TIM_Encoder_MspInit+0x2a8>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d134      	bne.n	8002948 <HAL_TIM_Encoder_MspInit+0x1a4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	61fb      	str	r3, [r7, #28]
 80028e2:	4b56      	ldr	r3, [pc, #344]	; (8002a3c <HAL_TIM_Encoder_MspInit+0x298>)
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	4a55      	ldr	r2, [pc, #340]	; (8002a3c <HAL_TIM_Encoder_MspInit+0x298>)
 80028e8:	f043 0302 	orr.w	r3, r3, #2
 80028ec:	6413      	str	r3, [r2, #64]	; 0x40
 80028ee:	4b53      	ldr	r3, [pc, #332]	; (8002a3c <HAL_TIM_Encoder_MspInit+0x298>)
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	61fb      	str	r3, [r7, #28]
 80028f8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	61bb      	str	r3, [r7, #24]
 80028fe:	4b4f      	ldr	r3, [pc, #316]	; (8002a3c <HAL_TIM_Encoder_MspInit+0x298>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	4a4e      	ldr	r2, [pc, #312]	; (8002a3c <HAL_TIM_Encoder_MspInit+0x298>)
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	6313      	str	r3, [r2, #48]	; 0x30
 800290a:	4b4c      	ldr	r3, [pc, #304]	; (8002a3c <HAL_TIM_Encoder_MspInit+0x298>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	61bb      	str	r3, [r7, #24]
 8002914:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002916:	23c0      	movs	r3, #192	; 0xc0
 8002918:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291a:	2302      	movs	r3, #2
 800291c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291e:	2300      	movs	r3, #0
 8002920:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002922:	2300      	movs	r3, #0
 8002924:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002926:	2302      	movs	r3, #2
 8002928:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800292a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800292e:	4619      	mov	r1, r3
 8002930:	4844      	ldr	r0, [pc, #272]	; (8002a44 <HAL_TIM_Encoder_MspInit+0x2a0>)
 8002932:	f001 fbcb 	bl	80040cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002936:	2200      	movs	r2, #0
 8002938:	2105      	movs	r1, #5
 800293a:	201d      	movs	r0, #29
 800293c:	f001 f82c 	bl	8003998 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002940:	201d      	movs	r0, #29
 8002942:	f001 f845 	bl	80039d0 <HAL_NVIC_EnableIRQ>
}
 8002946:	e073      	b.n	8002a30 <HAL_TIM_Encoder_MspInit+0x28c>
  else if(tim_encoderHandle->Instance==TIM4)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a40      	ldr	r2, [pc, #256]	; (8002a50 <HAL_TIM_Encoder_MspInit+0x2ac>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d135      	bne.n	80029be <HAL_TIM_Encoder_MspInit+0x21a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002952:	2300      	movs	r3, #0
 8002954:	617b      	str	r3, [r7, #20]
 8002956:	4b39      	ldr	r3, [pc, #228]	; (8002a3c <HAL_TIM_Encoder_MspInit+0x298>)
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	4a38      	ldr	r2, [pc, #224]	; (8002a3c <HAL_TIM_Encoder_MspInit+0x298>)
 800295c:	f043 0304 	orr.w	r3, r3, #4
 8002960:	6413      	str	r3, [r2, #64]	; 0x40
 8002962:	4b36      	ldr	r3, [pc, #216]	; (8002a3c <HAL_TIM_Encoder_MspInit+0x298>)
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	f003 0304 	and.w	r3, r3, #4
 800296a:	617b      	str	r3, [r7, #20]
 800296c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800296e:	2300      	movs	r3, #0
 8002970:	613b      	str	r3, [r7, #16]
 8002972:	4b32      	ldr	r3, [pc, #200]	; (8002a3c <HAL_TIM_Encoder_MspInit+0x298>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	4a31      	ldr	r2, [pc, #196]	; (8002a3c <HAL_TIM_Encoder_MspInit+0x298>)
 8002978:	f043 0308 	orr.w	r3, r3, #8
 800297c:	6313      	str	r3, [r2, #48]	; 0x30
 800297e:	4b2f      	ldr	r3, [pc, #188]	; (8002a3c <HAL_TIM_Encoder_MspInit+0x298>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	f003 0308 	and.w	r3, r3, #8
 8002986:	613b      	str	r3, [r7, #16]
 8002988:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800298a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800298e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002990:	2302      	movs	r3, #2
 8002992:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002994:	2300      	movs	r3, #0
 8002996:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002998:	2300      	movs	r3, #0
 800299a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800299c:	2302      	movs	r3, #2
 800299e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80029a4:	4619      	mov	r1, r3
 80029a6:	482b      	ldr	r0, [pc, #172]	; (8002a54 <HAL_TIM_Encoder_MspInit+0x2b0>)
 80029a8:	f001 fb90 	bl	80040cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80029ac:	2200      	movs	r2, #0
 80029ae:	2105      	movs	r1, #5
 80029b0:	201e      	movs	r0, #30
 80029b2:	f000 fff1 	bl	8003998 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80029b6:	201e      	movs	r0, #30
 80029b8:	f001 f80a 	bl	80039d0 <HAL_NVIC_EnableIRQ>
}
 80029bc:	e038      	b.n	8002a30 <HAL_TIM_Encoder_MspInit+0x28c>
  else if(tim_encoderHandle->Instance==TIM8)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a25      	ldr	r2, [pc, #148]	; (8002a58 <HAL_TIM_Encoder_MspInit+0x2b4>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d133      	bne.n	8002a30 <HAL_TIM_Encoder_MspInit+0x28c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80029c8:	2300      	movs	r3, #0
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	4b1b      	ldr	r3, [pc, #108]	; (8002a3c <HAL_TIM_Encoder_MspInit+0x298>)
 80029ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d0:	4a1a      	ldr	r2, [pc, #104]	; (8002a3c <HAL_TIM_Encoder_MspInit+0x298>)
 80029d2:	f043 0302 	orr.w	r3, r3, #2
 80029d6:	6453      	str	r3, [r2, #68]	; 0x44
 80029d8:	4b18      	ldr	r3, [pc, #96]	; (8002a3c <HAL_TIM_Encoder_MspInit+0x298>)
 80029da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029e4:	2300      	movs	r3, #0
 80029e6:	60bb      	str	r3, [r7, #8]
 80029e8:	4b14      	ldr	r3, [pc, #80]	; (8002a3c <HAL_TIM_Encoder_MspInit+0x298>)
 80029ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ec:	4a13      	ldr	r2, [pc, #76]	; (8002a3c <HAL_TIM_Encoder_MspInit+0x298>)
 80029ee:	f043 0304 	orr.w	r3, r3, #4
 80029f2:	6313      	str	r3, [r2, #48]	; 0x30
 80029f4:	4b11      	ldr	r3, [pc, #68]	; (8002a3c <HAL_TIM_Encoder_MspInit+0x298>)
 80029f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f8:	f003 0304 	and.w	r3, r3, #4
 80029fc:	60bb      	str	r3, [r7, #8]
 80029fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a00:	23c0      	movs	r3, #192	; 0xc0
 8002a02:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a04:	2302      	movs	r3, #2
 8002a06:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002a10:	2303      	movs	r3, #3
 8002a12:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a14:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4810      	ldr	r0, [pc, #64]	; (8002a5c <HAL_TIM_Encoder_MspInit+0x2b8>)
 8002a1c:	f001 fb56 	bl	80040cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 8002a20:	2200      	movs	r2, #0
 8002a22:	2105      	movs	r1, #5
 8002a24:	202c      	movs	r0, #44	; 0x2c
 8002a26:	f000 ffb7 	bl	8003998 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002a2a:	202c      	movs	r0, #44	; 0x2c
 8002a2c:	f000 ffd0 	bl	80039d0 <HAL_NVIC_EnableIRQ>
}
 8002a30:	bf00      	nop
 8002a32:	3748      	adds	r7, #72	; 0x48
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40010000 	.word	0x40010000
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	40021000 	.word	0x40021000
 8002a44:	40020000 	.word	0x40020000
 8002a48:	40020400 	.word	0x40020400
 8002a4c:	40000400 	.word	0x40000400
 8002a50:	40000800 	.word	0x40000800
 8002a54:	40020c00 	.word	0x40020c00
 8002a58:	40010400 	.word	0x40010400
 8002a5c:	40020800 	.word	0x40020800

08002a60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a30      	ldr	r2, [pc, #192]	; (8002b30 <HAL_TIM_Base_MspInit+0xd0>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d116      	bne.n	8002aa0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002a72:	2300      	movs	r3, #0
 8002a74:	617b      	str	r3, [r7, #20]
 8002a76:	4b2f      	ldr	r3, [pc, #188]	; (8002b34 <HAL_TIM_Base_MspInit+0xd4>)
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	4a2e      	ldr	r2, [pc, #184]	; (8002b34 <HAL_TIM_Base_MspInit+0xd4>)
 8002a7c:	f043 0320 	orr.w	r3, r3, #32
 8002a80:	6413      	str	r3, [r2, #64]	; 0x40
 8002a82:	4b2c      	ldr	r3, [pc, #176]	; (8002b34 <HAL_TIM_Base_MspInit+0xd4>)
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	f003 0320 	and.w	r3, r3, #32
 8002a8a:	617b      	str	r3, [r7, #20]
 8002a8c:	697b      	ldr	r3, [r7, #20]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8002a8e:	2200      	movs	r2, #0
 8002a90:	2105      	movs	r1, #5
 8002a92:	2037      	movs	r0, #55	; 0x37
 8002a94:	f000 ff80 	bl	8003998 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002a98:	2037      	movs	r0, #55	; 0x37
 8002a9a:	f000 ff99 	bl	80039d0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8002a9e:	e042      	b.n	8002b26 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM9)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a24      	ldr	r2, [pc, #144]	; (8002b38 <HAL_TIM_Base_MspInit+0xd8>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d10e      	bne.n	8002ac8 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002aaa:	2300      	movs	r3, #0
 8002aac:	613b      	str	r3, [r7, #16]
 8002aae:	4b21      	ldr	r3, [pc, #132]	; (8002b34 <HAL_TIM_Base_MspInit+0xd4>)
 8002ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab2:	4a20      	ldr	r2, [pc, #128]	; (8002b34 <HAL_TIM_Base_MspInit+0xd4>)
 8002ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8002aba:	4b1e      	ldr	r3, [pc, #120]	; (8002b34 <HAL_TIM_Base_MspInit+0xd4>)
 8002abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac2:	613b      	str	r3, [r7, #16]
 8002ac4:	693b      	ldr	r3, [r7, #16]
}
 8002ac6:	e02e      	b.n	8002b26 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM12)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a1b      	ldr	r2, [pc, #108]	; (8002b3c <HAL_TIM_Base_MspInit+0xdc>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d10e      	bne.n	8002af0 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60fb      	str	r3, [r7, #12]
 8002ad6:	4b17      	ldr	r3, [pc, #92]	; (8002b34 <HAL_TIM_Base_MspInit+0xd4>)
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	4a16      	ldr	r2, [pc, #88]	; (8002b34 <HAL_TIM_Base_MspInit+0xd4>)
 8002adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ae2:	4b14      	ldr	r3, [pc, #80]	; (8002b34 <HAL_TIM_Base_MspInit+0xd4>)
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	68fb      	ldr	r3, [r7, #12]
}
 8002aee:	e01a      	b.n	8002b26 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM13)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a12      	ldr	r2, [pc, #72]	; (8002b40 <HAL_TIM_Base_MspInit+0xe0>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d115      	bne.n	8002b26 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002afa:	2300      	movs	r3, #0
 8002afc:	60bb      	str	r3, [r7, #8]
 8002afe:	4b0d      	ldr	r3, [pc, #52]	; (8002b34 <HAL_TIM_Base_MspInit+0xd4>)
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	4a0c      	ldr	r2, [pc, #48]	; (8002b34 <HAL_TIM_Base_MspInit+0xd4>)
 8002b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b08:	6413      	str	r3, [r2, #64]	; 0x40
 8002b0a:	4b0a      	ldr	r3, [pc, #40]	; (8002b34 <HAL_TIM_Base_MspInit+0xd4>)
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b12:	60bb      	str	r3, [r7, #8]
 8002b14:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 8002b16:	2200      	movs	r2, #0
 8002b18:	2105      	movs	r1, #5
 8002b1a:	202c      	movs	r0, #44	; 0x2c
 8002b1c:	f000 ff3c 	bl	8003998 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002b20:	202c      	movs	r0, #44	; 0x2c
 8002b22:	f000 ff55 	bl	80039d0 <HAL_NVIC_EnableIRQ>
}
 8002b26:	bf00      	nop
 8002b28:	3718      	adds	r7, #24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	40001400 	.word	0x40001400
 8002b34:	40023800 	.word	0x40023800
 8002b38:	40014000 	.word	0x40014000
 8002b3c:	40001800 	.word	0x40001800
 8002b40:	40001c00 	.word	0x40001c00

08002b44 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b08a      	sub	sp, #40	; 0x28
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b4c:	f107 0314 	add.w	r3, r7, #20
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	609a      	str	r2, [r3, #8]
 8002b58:	60da      	str	r2, [r3, #12]
 8002b5a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM9)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a24      	ldr	r2, [pc, #144]	; (8002bf4 <HAL_TIM_MspPostInit+0xb0>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d11e      	bne.n	8002ba4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b66:	2300      	movs	r3, #0
 8002b68:	613b      	str	r3, [r7, #16]
 8002b6a:	4b23      	ldr	r3, [pc, #140]	; (8002bf8 <HAL_TIM_MspPostInit+0xb4>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	4a22      	ldr	r2, [pc, #136]	; (8002bf8 <HAL_TIM_MspPostInit+0xb4>)
 8002b70:	f043 0310 	orr.w	r3, r3, #16
 8002b74:	6313      	str	r3, [r2, #48]	; 0x30
 8002b76:	4b20      	ldr	r3, [pc, #128]	; (8002bf8 <HAL_TIM_MspPostInit+0xb4>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	f003 0310 	and.w	r3, r3, #16
 8002b7e:	613b      	str	r3, [r7, #16]
 8002b80:	693b      	ldr	r3, [r7, #16]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    PE6     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002b82:	2360      	movs	r3, #96	; 0x60
 8002b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b86:	2302      	movs	r3, #2
 8002b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002b92:	2303      	movs	r3, #3
 8002b94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b96:	f107 0314 	add.w	r3, r7, #20
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	4817      	ldr	r0, [pc, #92]	; (8002bfc <HAL_TIM_MspPostInit+0xb8>)
 8002b9e:	f001 fa95 	bl	80040cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002ba2:	e023      	b.n	8002bec <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM12)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a15      	ldr	r2, [pc, #84]	; (8002c00 <HAL_TIM_MspPostInit+0xbc>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d11e      	bne.n	8002bec <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	4b11      	ldr	r3, [pc, #68]	; (8002bf8 <HAL_TIM_MspPostInit+0xb4>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb6:	4a10      	ldr	r2, [pc, #64]	; (8002bf8 <HAL_TIM_MspPostInit+0xb4>)
 8002bb8:	f043 0302 	orr.w	r3, r3, #2
 8002bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bbe:	4b0e      	ldr	r3, [pc, #56]	; (8002bf8 <HAL_TIM_MspPostInit+0xb4>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002bca:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002bce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002bdc:	2309      	movs	r3, #9
 8002bde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002be0:	f107 0314 	add.w	r3, r7, #20
 8002be4:	4619      	mov	r1, r3
 8002be6:	4807      	ldr	r0, [pc, #28]	; (8002c04 <HAL_TIM_MspPostInit+0xc0>)
 8002be8:	f001 fa70 	bl	80040cc <HAL_GPIO_Init>
}
 8002bec:	bf00      	nop
 8002bee:	3728      	adds	r7, #40	; 0x28
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40014000 	.word	0x40014000
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	40001800 	.word	0x40001800
 8002c04:	40020400 	.word	0x40020400

08002c08 <MX_UART4_Init>:
UART_HandleTypeDef huart3;
DMA_HandleTypeDef hdma_usart2_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002c0c:	4b11      	ldr	r3, [pc, #68]	; (8002c54 <MX_UART4_Init+0x4c>)
 8002c0e:	4a12      	ldr	r2, [pc, #72]	; (8002c58 <MX_UART4_Init+0x50>)
 8002c10:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002c12:	4b10      	ldr	r3, [pc, #64]	; (8002c54 <MX_UART4_Init+0x4c>)
 8002c14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c18:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002c1a:	4b0e      	ldr	r3, [pc, #56]	; (8002c54 <MX_UART4_Init+0x4c>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002c20:	4b0c      	ldr	r3, [pc, #48]	; (8002c54 <MX_UART4_Init+0x4c>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002c26:	4b0b      	ldr	r3, [pc, #44]	; (8002c54 <MX_UART4_Init+0x4c>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002c2c:	4b09      	ldr	r3, [pc, #36]	; (8002c54 <MX_UART4_Init+0x4c>)
 8002c2e:	220c      	movs	r2, #12
 8002c30:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c32:	4b08      	ldr	r3, [pc, #32]	; (8002c54 <MX_UART4_Init+0x4c>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c38:	4b06      	ldr	r3, [pc, #24]	; (8002c54 <MX_UART4_Init+0x4c>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002c3e:	4805      	ldr	r0, [pc, #20]	; (8002c54 <MX_UART4_Init+0x4c>)
 8002c40:	f003 fc16 	bl	8006470 <HAL_UART_Init>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002c4a:	f7ff f911 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002c4e:	bf00      	nop
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	2000083c 	.word	0x2000083c
 8002c58:	40004c00 	.word	0x40004c00

08002c5c <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002c60:	4b11      	ldr	r3, [pc, #68]	; (8002ca8 <MX_UART5_Init+0x4c>)
 8002c62:	4a12      	ldr	r2, [pc, #72]	; (8002cac <MX_UART5_Init+0x50>)
 8002c64:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002c66:	4b10      	ldr	r3, [pc, #64]	; (8002ca8 <MX_UART5_Init+0x4c>)
 8002c68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c6c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002c6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ca8 <MX_UART5_Init+0x4c>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002c74:	4b0c      	ldr	r3, [pc, #48]	; (8002ca8 <MX_UART5_Init+0x4c>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002c7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <MX_UART5_Init+0x4c>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002c80:	4b09      	ldr	r3, [pc, #36]	; (8002ca8 <MX_UART5_Init+0x4c>)
 8002c82:	220c      	movs	r2, #12
 8002c84:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c86:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <MX_UART5_Init+0x4c>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c8c:	4b06      	ldr	r3, [pc, #24]	; (8002ca8 <MX_UART5_Init+0x4c>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002c92:	4805      	ldr	r0, [pc, #20]	; (8002ca8 <MX_UART5_Init+0x4c>)
 8002c94:	f003 fbec 	bl	8006470 <HAL_UART_Init>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002c9e:	f7ff f8e7 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002ca2:	bf00      	nop
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	20000880 	.word	0x20000880
 8002cac:	40005000 	.word	0x40005000

08002cb0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002cb4:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <MX_USART1_UART_Init+0x4c>)
 8002cb6:	4a12      	ldr	r2, [pc, #72]	; (8002d00 <MX_USART1_UART_Init+0x50>)
 8002cb8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002cba:	4b10      	ldr	r3, [pc, #64]	; (8002cfc <MX_USART1_UART_Init+0x4c>)
 8002cbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002cc0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002cc2:	4b0e      	ldr	r3, [pc, #56]	; (8002cfc <MX_USART1_UART_Init+0x4c>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002cc8:	4b0c      	ldr	r3, [pc, #48]	; (8002cfc <MX_USART1_UART_Init+0x4c>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002cce:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <MX_USART1_UART_Init+0x4c>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002cd4:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <MX_USART1_UART_Init+0x4c>)
 8002cd6:	220c      	movs	r2, #12
 8002cd8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cda:	4b08      	ldr	r3, [pc, #32]	; (8002cfc <MX_USART1_UART_Init+0x4c>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ce0:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <MX_USART1_UART_Init+0x4c>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ce6:	4805      	ldr	r0, [pc, #20]	; (8002cfc <MX_USART1_UART_Init+0x4c>)
 8002ce8:	f003 fbc2 	bl	8006470 <HAL_UART_Init>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002cf2:	f7ff f8bd 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002cf6:	bf00      	nop
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	200008c4 	.word	0x200008c4
 8002d00:	40011000 	.word	0x40011000

08002d04 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d08:	4b11      	ldr	r3, [pc, #68]	; (8002d50 <MX_USART2_UART_Init+0x4c>)
 8002d0a:	4a12      	ldr	r2, [pc, #72]	; (8002d54 <MX_USART2_UART_Init+0x50>)
 8002d0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002d0e:	4b10      	ldr	r3, [pc, #64]	; (8002d50 <MX_USART2_UART_Init+0x4c>)
 8002d10:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002d14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d16:	4b0e      	ldr	r3, [pc, #56]	; (8002d50 <MX_USART2_UART_Init+0x4c>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d1c:	4b0c      	ldr	r3, [pc, #48]	; (8002d50 <MX_USART2_UART_Init+0x4c>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d22:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <MX_USART2_UART_Init+0x4c>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d28:	4b09      	ldr	r3, [pc, #36]	; (8002d50 <MX_USART2_UART_Init+0x4c>)
 8002d2a:	220c      	movs	r2, #12
 8002d2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d2e:	4b08      	ldr	r3, [pc, #32]	; (8002d50 <MX_USART2_UART_Init+0x4c>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d34:	4b06      	ldr	r3, [pc, #24]	; (8002d50 <MX_USART2_UART_Init+0x4c>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d3a:	4805      	ldr	r0, [pc, #20]	; (8002d50 <MX_USART2_UART_Init+0x4c>)
 8002d3c:	f003 fb98 	bl	8006470 <HAL_UART_Init>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002d46:	f7ff f893 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d4a:	bf00      	nop
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	20000908 	.word	0x20000908
 8002d54:	40004400 	.word	0x40004400

08002d58 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002d5c:	4b11      	ldr	r3, [pc, #68]	; (8002da4 <MX_USART3_UART_Init+0x4c>)
 8002d5e:	4a12      	ldr	r2, [pc, #72]	; (8002da8 <MX_USART3_UART_Init+0x50>)
 8002d60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002d62:	4b10      	ldr	r3, [pc, #64]	; (8002da4 <MX_USART3_UART_Init+0x4c>)
 8002d64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002d6a:	4b0e      	ldr	r3, [pc, #56]	; (8002da4 <MX_USART3_UART_Init+0x4c>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002d70:	4b0c      	ldr	r3, [pc, #48]	; (8002da4 <MX_USART3_UART_Init+0x4c>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002d76:	4b0b      	ldr	r3, [pc, #44]	; (8002da4 <MX_USART3_UART_Init+0x4c>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002d7c:	4b09      	ldr	r3, [pc, #36]	; (8002da4 <MX_USART3_UART_Init+0x4c>)
 8002d7e:	220c      	movs	r2, #12
 8002d80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d82:	4b08      	ldr	r3, [pc, #32]	; (8002da4 <MX_USART3_UART_Init+0x4c>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d88:	4b06      	ldr	r3, [pc, #24]	; (8002da4 <MX_USART3_UART_Init+0x4c>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002d8e:	4805      	ldr	r0, [pc, #20]	; (8002da4 <MX_USART3_UART_Init+0x4c>)
 8002d90:	f003 fb6e 	bl	8006470 <HAL_UART_Init>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002d9a:	f7ff f869 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002d9e:	bf00      	nop
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	2000094c 	.word	0x2000094c
 8002da8:	40004800 	.word	0x40004800

08002dac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b092      	sub	sp, #72	; 0x48
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	605a      	str	r2, [r3, #4]
 8002dbe:	609a      	str	r2, [r3, #8]
 8002dc0:	60da      	str	r2, [r3, #12]
 8002dc2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a8a      	ldr	r2, [pc, #552]	; (8002ff4 <HAL_UART_MspInit+0x248>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d12d      	bne.n	8002e2a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002dce:	2300      	movs	r3, #0
 8002dd0:	633b      	str	r3, [r7, #48]	; 0x30
 8002dd2:	4b89      	ldr	r3, [pc, #548]	; (8002ff8 <HAL_UART_MspInit+0x24c>)
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	4a88      	ldr	r2, [pc, #544]	; (8002ff8 <HAL_UART_MspInit+0x24c>)
 8002dd8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8002dde:	4b86      	ldr	r3, [pc, #536]	; (8002ff8 <HAL_UART_MspInit+0x24c>)
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002de6:	633b      	str	r3, [r7, #48]	; 0x30
 8002de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dea:	2300      	movs	r3, #0
 8002dec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dee:	4b82      	ldr	r3, [pc, #520]	; (8002ff8 <HAL_UART_MspInit+0x24c>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	4a81      	ldr	r2, [pc, #516]	; (8002ff8 <HAL_UART_MspInit+0x24c>)
 8002df4:	f043 0304 	orr.w	r3, r3, #4
 8002df8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dfa:	4b7f      	ldr	r3, [pc, #508]	; (8002ff8 <HAL_UART_MspInit+0x24c>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfe:	f003 0304 	and.w	r3, r3, #4
 8002e02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002e06:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002e0a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e10:	2300      	movs	r3, #0
 8002e12:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e14:	2303      	movs	r3, #3
 8002e16:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002e18:	2308      	movs	r3, #8
 8002e1a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e1c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e20:	4619      	mov	r1, r3
 8002e22:	4876      	ldr	r0, [pc, #472]	; (8002ffc <HAL_UART_MspInit+0x250>)
 8002e24:	f001 f952 	bl	80040cc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002e28:	e12a      	b.n	8003080 <HAL_UART_MspInit+0x2d4>
  else if(uartHandle->Instance==UART5)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a74      	ldr	r2, [pc, #464]	; (8003000 <HAL_UART_MspInit+0x254>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d14b      	bne.n	8002ecc <HAL_UART_MspInit+0x120>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002e34:	2300      	movs	r3, #0
 8002e36:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e38:	4b6f      	ldr	r3, [pc, #444]	; (8002ff8 <HAL_UART_MspInit+0x24c>)
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3c:	4a6e      	ldr	r2, [pc, #440]	; (8002ff8 <HAL_UART_MspInit+0x24c>)
 8002e3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e42:	6413      	str	r3, [r2, #64]	; 0x40
 8002e44:	4b6c      	ldr	r3, [pc, #432]	; (8002ff8 <HAL_UART_MspInit+0x24c>)
 8002e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e50:	2300      	movs	r3, #0
 8002e52:	627b      	str	r3, [r7, #36]	; 0x24
 8002e54:	4b68      	ldr	r3, [pc, #416]	; (8002ff8 <HAL_UART_MspInit+0x24c>)
 8002e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e58:	4a67      	ldr	r2, [pc, #412]	; (8002ff8 <HAL_UART_MspInit+0x24c>)
 8002e5a:	f043 0304 	orr.w	r3, r3, #4
 8002e5e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e60:	4b65      	ldr	r3, [pc, #404]	; (8002ff8 <HAL_UART_MspInit+0x24c>)
 8002e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e64:	f003 0304 	and.w	r3, r3, #4
 8002e68:	627b      	str	r3, [r7, #36]	; 0x24
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	623b      	str	r3, [r7, #32]
 8002e70:	4b61      	ldr	r3, [pc, #388]	; (8002ff8 <HAL_UART_MspInit+0x24c>)
 8002e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e74:	4a60      	ldr	r2, [pc, #384]	; (8002ff8 <HAL_UART_MspInit+0x24c>)
 8002e76:	f043 0308 	orr.w	r3, r3, #8
 8002e7a:	6313      	str	r3, [r2, #48]	; 0x30
 8002e7c:	4b5e      	ldr	r3, [pc, #376]	; (8002ff8 <HAL_UART_MspInit+0x24c>)
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e80:	f003 0308 	and.w	r3, r3, #8
 8002e84:	623b      	str	r3, [r7, #32]
 8002e86:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002e88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e8c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e8e:	2302      	movs	r3, #2
 8002e90:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e92:	2300      	movs	r3, #0
 8002e94:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e96:	2303      	movs	r3, #3
 8002e98:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002e9a:	2308      	movs	r3, #8
 8002e9c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e9e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	4855      	ldr	r0, [pc, #340]	; (8002ffc <HAL_UART_MspInit+0x250>)
 8002ea6:	f001 f911 	bl	80040cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002eaa:	2304      	movs	r3, #4
 8002eac:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eae:	2302      	movs	r3, #2
 8002eb0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002eba:	2308      	movs	r3, #8
 8002ebc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ebe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	484f      	ldr	r0, [pc, #316]	; (8003004 <HAL_UART_MspInit+0x258>)
 8002ec6:	f001 f901 	bl	80040cc <HAL_GPIO_Init>
}
 8002eca:	e0d9      	b.n	8003080 <HAL_UART_MspInit+0x2d4>
  else if(uartHandle->Instance==USART1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a4d      	ldr	r2, [pc, #308]	; (8003008 <HAL_UART_MspInit+0x25c>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d12d      	bne.n	8002f32 <HAL_UART_MspInit+0x186>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61fb      	str	r3, [r7, #28]
 8002eda:	4b47      	ldr	r3, [pc, #284]	; (8002ff8 <HAL_UART_MspInit+0x24c>)
 8002edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ede:	4a46      	ldr	r2, [pc, #280]	; (8002ff8 <HAL_UART_MspInit+0x24c>)
 8002ee0:	f043 0310 	orr.w	r3, r3, #16
 8002ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ee6:	4b44      	ldr	r3, [pc, #272]	; (8002ff8 <HAL_UART_MspInit+0x24c>)
 8002ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eea:	f003 0310 	and.w	r3, r3, #16
 8002eee:	61fb      	str	r3, [r7, #28]
 8002ef0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	61bb      	str	r3, [r7, #24]
 8002ef6:	4b40      	ldr	r3, [pc, #256]	; (8002ff8 <HAL_UART_MspInit+0x24c>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	4a3f      	ldr	r2, [pc, #252]	; (8002ff8 <HAL_UART_MspInit+0x24c>)
 8002efc:	f043 0301 	orr.w	r3, r3, #1
 8002f00:	6313      	str	r3, [r2, #48]	; 0x30
 8002f02:	4b3d      	ldr	r3, [pc, #244]	; (8002ff8 <HAL_UART_MspInit+0x24c>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	61bb      	str	r3, [r7, #24]
 8002f0c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002f0e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002f12:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f14:	2302      	movs	r3, #2
 8002f16:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f20:	2307      	movs	r3, #7
 8002f22:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f24:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002f28:	4619      	mov	r1, r3
 8002f2a:	4838      	ldr	r0, [pc, #224]	; (800300c <HAL_UART_MspInit+0x260>)
 8002f2c:	f001 f8ce 	bl	80040cc <HAL_GPIO_Init>
}
 8002f30:	e0a6      	b.n	8003080 <HAL_UART_MspInit+0x2d4>
  else if(uartHandle->Instance==USART2)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a36      	ldr	r2, [pc, #216]	; (8003010 <HAL_UART_MspInit+0x264>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d16f      	bne.n	800301c <HAL_UART_MspInit+0x270>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	617b      	str	r3, [r7, #20]
 8002f40:	4b2d      	ldr	r3, [pc, #180]	; (8002ff8 <HAL_UART_MspInit+0x24c>)
 8002f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f44:	4a2c      	ldr	r2, [pc, #176]	; (8002ff8 <HAL_UART_MspInit+0x24c>)
 8002f46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f4a:	6413      	str	r3, [r2, #64]	; 0x40
 8002f4c:	4b2a      	ldr	r3, [pc, #168]	; (8002ff8 <HAL_UART_MspInit+0x24c>)
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f54:	617b      	str	r3, [r7, #20]
 8002f56:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f58:	2300      	movs	r3, #0
 8002f5a:	613b      	str	r3, [r7, #16]
 8002f5c:	4b26      	ldr	r3, [pc, #152]	; (8002ff8 <HAL_UART_MspInit+0x24c>)
 8002f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f60:	4a25      	ldr	r2, [pc, #148]	; (8002ff8 <HAL_UART_MspInit+0x24c>)
 8002f62:	f043 0301 	orr.w	r3, r3, #1
 8002f66:	6313      	str	r3, [r2, #48]	; 0x30
 8002f68:	4b23      	ldr	r3, [pc, #140]	; (8002ff8 <HAL_UART_MspInit+0x24c>)
 8002f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	613b      	str	r3, [r7, #16]
 8002f72:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002f74:	230c      	movs	r3, #12
 8002f76:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f78:	2302      	movs	r3, #2
 8002f7a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f80:	2303      	movs	r3, #3
 8002f82:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f84:	2307      	movs	r3, #7
 8002f86:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f88:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	481f      	ldr	r0, [pc, #124]	; (800300c <HAL_UART_MspInit+0x260>)
 8002f90:	f001 f89c 	bl	80040cc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002f94:	4b1f      	ldr	r3, [pc, #124]	; (8003014 <HAL_UART_MspInit+0x268>)
 8002f96:	4a20      	ldr	r2, [pc, #128]	; (8003018 <HAL_UART_MspInit+0x26c>)
 8002f98:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002f9a:	4b1e      	ldr	r3, [pc, #120]	; (8003014 <HAL_UART_MspInit+0x268>)
 8002f9c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002fa0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fa2:	4b1c      	ldr	r3, [pc, #112]	; (8003014 <HAL_UART_MspInit+0x268>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fa8:	4b1a      	ldr	r3, [pc, #104]	; (8003014 <HAL_UART_MspInit+0x268>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002fae:	4b19      	ldr	r3, [pc, #100]	; (8003014 <HAL_UART_MspInit+0x268>)
 8002fb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fb4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fb6:	4b17      	ldr	r3, [pc, #92]	; (8003014 <HAL_UART_MspInit+0x268>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fbc:	4b15      	ldr	r3, [pc, #84]	; (8003014 <HAL_UART_MspInit+0x268>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002fc2:	4b14      	ldr	r3, [pc, #80]	; (8003014 <HAL_UART_MspInit+0x268>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002fc8:	4b12      	ldr	r3, [pc, #72]	; (8003014 <HAL_UART_MspInit+0x268>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fce:	4b11      	ldr	r3, [pc, #68]	; (8003014 <HAL_UART_MspInit+0x268>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002fd4:	480f      	ldr	r0, [pc, #60]	; (8003014 <HAL_UART_MspInit+0x268>)
 8002fd6:	f000 fd09 	bl	80039ec <HAL_DMA_Init>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <HAL_UART_MspInit+0x238>
      Error_Handler();
 8002fe0:	f7fe ff46 	bl	8001e70 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a0b      	ldr	r2, [pc, #44]	; (8003014 <HAL_UART_MspInit+0x268>)
 8002fe8:	639a      	str	r2, [r3, #56]	; 0x38
 8002fea:	4a0a      	ldr	r2, [pc, #40]	; (8003014 <HAL_UART_MspInit+0x268>)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002ff0:	e046      	b.n	8003080 <HAL_UART_MspInit+0x2d4>
 8002ff2:	bf00      	nop
 8002ff4:	40004c00 	.word	0x40004c00
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	40020800 	.word	0x40020800
 8003000:	40005000 	.word	0x40005000
 8003004:	40020c00 	.word	0x40020c00
 8003008:	40011000 	.word	0x40011000
 800300c:	40020000 	.word	0x40020000
 8003010:	40004400 	.word	0x40004400
 8003014:	20000990 	.word	0x20000990
 8003018:	40026088 	.word	0x40026088
  else if(uartHandle->Instance==USART3)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a19      	ldr	r2, [pc, #100]	; (8003088 <HAL_UART_MspInit+0x2dc>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d12c      	bne.n	8003080 <HAL_UART_MspInit+0x2d4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003026:	2300      	movs	r3, #0
 8003028:	60fb      	str	r3, [r7, #12]
 800302a:	4b18      	ldr	r3, [pc, #96]	; (800308c <HAL_UART_MspInit+0x2e0>)
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	4a17      	ldr	r2, [pc, #92]	; (800308c <HAL_UART_MspInit+0x2e0>)
 8003030:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003034:	6413      	str	r3, [r2, #64]	; 0x40
 8003036:	4b15      	ldr	r3, [pc, #84]	; (800308c <HAL_UART_MspInit+0x2e0>)
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003042:	2300      	movs	r3, #0
 8003044:	60bb      	str	r3, [r7, #8]
 8003046:	4b11      	ldr	r3, [pc, #68]	; (800308c <HAL_UART_MspInit+0x2e0>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304a:	4a10      	ldr	r2, [pc, #64]	; (800308c <HAL_UART_MspInit+0x2e0>)
 800304c:	f043 0308 	orr.w	r3, r3, #8
 8003050:	6313      	str	r3, [r2, #48]	; 0x30
 8003052:	4b0e      	ldr	r3, [pc, #56]	; (800308c <HAL_UART_MspInit+0x2e0>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	f003 0308 	and.w	r3, r3, #8
 800305a:	60bb      	str	r3, [r7, #8]
 800305c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800305e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003062:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003064:	2302      	movs	r3, #2
 8003066:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003068:	2300      	movs	r3, #0
 800306a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800306c:	2303      	movs	r3, #3
 800306e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003070:	2307      	movs	r3, #7
 8003072:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003074:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003078:	4619      	mov	r1, r3
 800307a:	4805      	ldr	r0, [pc, #20]	; (8003090 <HAL_UART_MspInit+0x2e4>)
 800307c:	f001 f826 	bl	80040cc <HAL_GPIO_Init>
}
 8003080:	bf00      	nop
 8003082:	3748      	adds	r7, #72	; 0x48
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40004800 	.word	0x40004800
 800308c:	40023800 	.word	0x40023800
 8003090:	40020c00 	.word	0x40020c00

08003094 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003094:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003098:	480d      	ldr	r0, [pc, #52]	; (80030d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800309a:	490e      	ldr	r1, [pc, #56]	; (80030d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800309c:	4a0e      	ldr	r2, [pc, #56]	; (80030d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800309e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030a0:	e002      	b.n	80030a8 <LoopCopyDataInit>

080030a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030a6:	3304      	adds	r3, #4

080030a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030ac:	d3f9      	bcc.n	80030a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030ae:	4a0b      	ldr	r2, [pc, #44]	; (80030dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80030b0:	4c0b      	ldr	r4, [pc, #44]	; (80030e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80030b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030b4:	e001      	b.n	80030ba <LoopFillZerobss>

080030b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030b8:	3204      	adds	r2, #4

080030ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030bc:	d3fb      	bcc.n	80030b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80030be:	f7ff f883 	bl	80021c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030c2:	f005 fea3 	bl	8008e0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030c6:	f7fe fdc3 	bl	8001c50 <main>
  bx  lr    
 80030ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80030cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80030d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030d4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80030d8:	0800916c 	.word	0x0800916c
  ldr r2, =_sbss
 80030dc:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80030e0:	20004750 	.word	0x20004750

080030e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030e4:	e7fe      	b.n	80030e4 <ADC_IRQHandler>
	...

080030e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030ec:	4b0e      	ldr	r3, [pc, #56]	; (8003128 <HAL_Init+0x40>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a0d      	ldr	r2, [pc, #52]	; (8003128 <HAL_Init+0x40>)
 80030f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030f8:	4b0b      	ldr	r3, [pc, #44]	; (8003128 <HAL_Init+0x40>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a0a      	ldr	r2, [pc, #40]	; (8003128 <HAL_Init+0x40>)
 80030fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003102:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003104:	4b08      	ldr	r3, [pc, #32]	; (8003128 <HAL_Init+0x40>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a07      	ldr	r2, [pc, #28]	; (8003128 <HAL_Init+0x40>)
 800310a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800310e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003110:	2003      	movs	r0, #3
 8003112:	f000 fc36 	bl	8003982 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003116:	200f      	movs	r0, #15
 8003118:	f7fe ff7a 	bl	8002010 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800311c:	f7fe ff4c 	bl	8001fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40023c00 	.word	0x40023c00

0800312c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003130:	4b06      	ldr	r3, [pc, #24]	; (800314c <HAL_IncTick+0x20>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	461a      	mov	r2, r3
 8003136:	4b06      	ldr	r3, [pc, #24]	; (8003150 <HAL_IncTick+0x24>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4413      	add	r3, r2
 800313c:	4a04      	ldr	r2, [pc, #16]	; (8003150 <HAL_IncTick+0x24>)
 800313e:	6013      	str	r3, [r2, #0]
}
 8003140:	bf00      	nop
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	2000001c 	.word	0x2000001c
 8003150:	200009f0 	.word	0x200009f0

08003154 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  return uwTick;
 8003158:	4b03      	ldr	r3, [pc, #12]	; (8003168 <HAL_GetTick+0x14>)
 800315a:	681b      	ldr	r3, [r3, #0]
}
 800315c:	4618      	mov	r0, r3
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	200009f0 	.word	0x200009f0

0800316c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003174:	2300      	movs	r3, #0
 8003176:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e033      	b.n	80031ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	2b00      	cmp	r3, #0
 8003188:	d109      	bne.n	800319e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7fd fd02 	bl	8000b94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	f003 0310 	and.w	r3, r3, #16
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d118      	bne.n	80031dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80031b2:	f023 0302 	bic.w	r3, r3, #2
 80031b6:	f043 0202 	orr.w	r2, r3, #2
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 f93a 	bl	8003438 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	f023 0303 	bic.w	r3, r3, #3
 80031d2:	f043 0201 	orr.w	r2, r3, #1
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	641a      	str	r2, [r3, #64]	; 0x40
 80031da:	e001      	b.n	80031e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80031e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
	...

080031f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80031fe:	2300      	movs	r3, #0
 8003200:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003208:	2b01      	cmp	r3, #1
 800320a:	d101      	bne.n	8003210 <HAL_ADC_ConfigChannel+0x1c>
 800320c:	2302      	movs	r3, #2
 800320e:	e105      	b.n	800341c <HAL_ADC_ConfigChannel+0x228>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2b09      	cmp	r3, #9
 800321e:	d925      	bls.n	800326c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68d9      	ldr	r1, [r3, #12]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	b29b      	uxth	r3, r3
 800322c:	461a      	mov	r2, r3
 800322e:	4613      	mov	r3, r2
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	4413      	add	r3, r2
 8003234:	3b1e      	subs	r3, #30
 8003236:	2207      	movs	r2, #7
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	43da      	mvns	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	400a      	ands	r2, r1
 8003244:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68d9      	ldr	r1, [r3, #12]
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	b29b      	uxth	r3, r3
 8003256:	4618      	mov	r0, r3
 8003258:	4603      	mov	r3, r0
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	4403      	add	r3, r0
 800325e:	3b1e      	subs	r3, #30
 8003260:	409a      	lsls	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	430a      	orrs	r2, r1
 8003268:	60da      	str	r2, [r3, #12]
 800326a:	e022      	b.n	80032b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6919      	ldr	r1, [r3, #16]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	b29b      	uxth	r3, r3
 8003278:	461a      	mov	r2, r3
 800327a:	4613      	mov	r3, r2
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	4413      	add	r3, r2
 8003280:	2207      	movs	r2, #7
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	43da      	mvns	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	400a      	ands	r2, r1
 800328e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6919      	ldr	r1, [r3, #16]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	689a      	ldr	r2, [r3, #8]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	b29b      	uxth	r3, r3
 80032a0:	4618      	mov	r0, r3
 80032a2:	4603      	mov	r3, r0
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	4403      	add	r3, r0
 80032a8:	409a      	lsls	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2b06      	cmp	r3, #6
 80032b8:	d824      	bhi.n	8003304 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	4613      	mov	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	3b05      	subs	r3, #5
 80032cc:	221f      	movs	r2, #31
 80032ce:	fa02 f303 	lsl.w	r3, r2, r3
 80032d2:	43da      	mvns	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	400a      	ands	r2, r1
 80032da:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	4618      	mov	r0, r3
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	3b05      	subs	r3, #5
 80032f6:	fa00 f203 	lsl.w	r2, r0, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	430a      	orrs	r2, r1
 8003300:	635a      	str	r2, [r3, #52]	; 0x34
 8003302:	e04c      	b.n	800339e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	2b0c      	cmp	r3, #12
 800330a:	d824      	bhi.n	8003356 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	3b23      	subs	r3, #35	; 0x23
 800331e:	221f      	movs	r2, #31
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	43da      	mvns	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	400a      	ands	r2, r1
 800332c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	b29b      	uxth	r3, r3
 800333a:	4618      	mov	r0, r3
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685a      	ldr	r2, [r3, #4]
 8003340:	4613      	mov	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	3b23      	subs	r3, #35	; 0x23
 8003348:	fa00 f203 	lsl.w	r2, r0, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	430a      	orrs	r2, r1
 8003352:	631a      	str	r2, [r3, #48]	; 0x30
 8003354:	e023      	b.n	800339e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	4613      	mov	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4413      	add	r3, r2
 8003366:	3b41      	subs	r3, #65	; 0x41
 8003368:	221f      	movs	r2, #31
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	43da      	mvns	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	400a      	ands	r2, r1
 8003376:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	b29b      	uxth	r3, r3
 8003384:	4618      	mov	r0, r3
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685a      	ldr	r2, [r3, #4]
 800338a:	4613      	mov	r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	4413      	add	r3, r2
 8003390:	3b41      	subs	r3, #65	; 0x41
 8003392:	fa00 f203 	lsl.w	r2, r0, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800339e:	4b22      	ldr	r3, [pc, #136]	; (8003428 <HAL_ADC_ConfigChannel+0x234>)
 80033a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a21      	ldr	r2, [pc, #132]	; (800342c <HAL_ADC_ConfigChannel+0x238>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d109      	bne.n	80033c0 <HAL_ADC_ConfigChannel+0x1cc>
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2b12      	cmp	r3, #18
 80033b2:	d105      	bne.n	80033c0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a19      	ldr	r2, [pc, #100]	; (800342c <HAL_ADC_ConfigChannel+0x238>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d123      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x21e>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2b10      	cmp	r3, #16
 80033d0:	d003      	beq.n	80033da <HAL_ADC_ConfigChannel+0x1e6>
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2b11      	cmp	r3, #17
 80033d8:	d11b      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2b10      	cmp	r3, #16
 80033ec:	d111      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80033ee:	4b10      	ldr	r3, [pc, #64]	; (8003430 <HAL_ADC_ConfigChannel+0x23c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a10      	ldr	r2, [pc, #64]	; (8003434 <HAL_ADC_ConfigChannel+0x240>)
 80033f4:	fba2 2303 	umull	r2, r3, r2, r3
 80033f8:	0c9a      	lsrs	r2, r3, #18
 80033fa:	4613      	mov	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4413      	add	r3, r2
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003404:	e002      	b.n	800340c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	3b01      	subs	r3, #1
 800340a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1f9      	bne.n	8003406 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3714      	adds	r7, #20
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr
 8003428:	40012300 	.word	0x40012300
 800342c:	40012000 	.word	0x40012000
 8003430:	20000014 	.word	0x20000014
 8003434:	431bde83 	.word	0x431bde83

08003438 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003440:	4b79      	ldr	r3, [pc, #484]	; (8003628 <ADC_Init+0x1f0>)
 8003442:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	431a      	orrs	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800346c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	6859      	ldr	r1, [r3, #4]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	021a      	lsls	r2, r3, #8
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	430a      	orrs	r2, r1
 8003480:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003490:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	6859      	ldr	r1, [r3, #4]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6899      	ldr	r1, [r3, #8]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68da      	ldr	r2, [r3, #12]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ca:	4a58      	ldr	r2, [pc, #352]	; (800362c <ADC_Init+0x1f4>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d022      	beq.n	8003516 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689a      	ldr	r2, [r3, #8]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6899      	ldr	r1, [r3, #8]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003500:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6899      	ldr	r1, [r3, #8]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	430a      	orrs	r2, r1
 8003512:	609a      	str	r2, [r3, #8]
 8003514:	e00f      	b.n	8003536 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	689a      	ldr	r2, [r3, #8]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003524:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003534:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 0202 	bic.w	r2, r2, #2
 8003544:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6899      	ldr	r1, [r3, #8]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	7e1b      	ldrb	r3, [r3, #24]
 8003550:	005a      	lsls	r2, r3, #1
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d01b      	beq.n	800359c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003572:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685a      	ldr	r2, [r3, #4]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003582:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6859      	ldr	r1, [r3, #4]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	3b01      	subs	r3, #1
 8003590:	035a      	lsls	r2, r3, #13
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	430a      	orrs	r2, r1
 8003598:	605a      	str	r2, [r3, #4]
 800359a:	e007      	b.n	80035ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80035ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	69db      	ldr	r3, [r3, #28]
 80035c6:	3b01      	subs	r3, #1
 80035c8:	051a      	lsls	r2, r3, #20
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80035e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6899      	ldr	r1, [r3, #8]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80035ee:	025a      	lsls	r2, r3, #9
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	430a      	orrs	r2, r1
 80035f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003606:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6899      	ldr	r1, [r3, #8]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	029a      	lsls	r2, r3, #10
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	430a      	orrs	r2, r1
 800361a:	609a      	str	r2, [r3, #8]
}
 800361c:	bf00      	nop
 800361e:	3714      	adds	r7, #20
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr
 8003628:	40012300 	.word	0x40012300
 800362c:	0f000001 	.word	0x0f000001

08003630 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e0ed      	b.n	800381e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d102      	bne.n	8003654 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7fd fb18 	bl	8000c84 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f042 0201 	orr.w	r2, r2, #1
 8003662:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003664:	f7ff fd76 	bl	8003154 <HAL_GetTick>
 8003668:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800366a:	e012      	b.n	8003692 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800366c:	f7ff fd72 	bl	8003154 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b0a      	cmp	r3, #10
 8003678:	d90b      	bls.n	8003692 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2205      	movs	r2, #5
 800368a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e0c5      	b.n	800381e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	2b00      	cmp	r3, #0
 800369e:	d0e5      	beq.n	800366c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0202 	bic.w	r2, r2, #2
 80036ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036b0:	f7ff fd50 	bl	8003154 <HAL_GetTick>
 80036b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80036b6:	e012      	b.n	80036de <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80036b8:	f7ff fd4c 	bl	8003154 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b0a      	cmp	r3, #10
 80036c4:	d90b      	bls.n	80036de <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2205      	movs	r2, #5
 80036d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e09f      	b.n	800381e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1e5      	bne.n	80036b8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	7e1b      	ldrb	r3, [r3, #24]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d108      	bne.n	8003706 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	e007      	b.n	8003716 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003714:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	7e5b      	ldrb	r3, [r3, #25]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d108      	bne.n	8003730 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	e007      	b.n	8003740 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800373e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	7e9b      	ldrb	r3, [r3, #26]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d108      	bne.n	800375a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f042 0220 	orr.w	r2, r2, #32
 8003756:	601a      	str	r2, [r3, #0]
 8003758:	e007      	b.n	800376a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 0220 	bic.w	r2, r2, #32
 8003768:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	7edb      	ldrb	r3, [r3, #27]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d108      	bne.n	8003784 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 0210 	bic.w	r2, r2, #16
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	e007      	b.n	8003794 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 0210 	orr.w	r2, r2, #16
 8003792:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	7f1b      	ldrb	r3, [r3, #28]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d108      	bne.n	80037ae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f042 0208 	orr.w	r2, r2, #8
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	e007      	b.n	80037be <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 0208 	bic.w	r2, r2, #8
 80037bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	7f5b      	ldrb	r3, [r3, #29]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d108      	bne.n	80037d8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f042 0204 	orr.w	r2, r2, #4
 80037d4:	601a      	str	r2, [r3, #0]
 80037d6:	e007      	b.n	80037e8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0204 	bic.w	r2, r2, #4
 80037e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689a      	ldr	r2, [r3, #8]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	431a      	orrs	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	431a      	orrs	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	ea42 0103 	orr.w	r1, r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	1e5a      	subs	r2, r3, #1
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
	...

08003828 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f003 0307 	and.w	r3, r3, #7
 8003836:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003838:	4b0c      	ldr	r3, [pc, #48]	; (800386c <__NVIC_SetPriorityGrouping+0x44>)
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003844:	4013      	ands	r3, r2
 8003846:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003850:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003858:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800385a:	4a04      	ldr	r2, [pc, #16]	; (800386c <__NVIC_SetPriorityGrouping+0x44>)
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	60d3      	str	r3, [r2, #12]
}
 8003860:	bf00      	nop
 8003862:	3714      	adds	r7, #20
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	e000ed00 	.word	0xe000ed00

08003870 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003874:	4b04      	ldr	r3, [pc, #16]	; (8003888 <__NVIC_GetPriorityGrouping+0x18>)
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	0a1b      	lsrs	r3, r3, #8
 800387a:	f003 0307 	and.w	r3, r3, #7
}
 800387e:	4618      	mov	r0, r3
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr
 8003888:	e000ed00 	.word	0xe000ed00

0800388c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	4603      	mov	r3, r0
 8003894:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800389a:	2b00      	cmp	r3, #0
 800389c:	db0b      	blt.n	80038b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800389e:	79fb      	ldrb	r3, [r7, #7]
 80038a0:	f003 021f 	and.w	r2, r3, #31
 80038a4:	4907      	ldr	r1, [pc, #28]	; (80038c4 <__NVIC_EnableIRQ+0x38>)
 80038a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038aa:	095b      	lsrs	r3, r3, #5
 80038ac:	2001      	movs	r0, #1
 80038ae:	fa00 f202 	lsl.w	r2, r0, r2
 80038b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038b6:	bf00      	nop
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	e000e100 	.word	0xe000e100

080038c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	4603      	mov	r3, r0
 80038d0:	6039      	str	r1, [r7, #0]
 80038d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	db0a      	blt.n	80038f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	490c      	ldr	r1, [pc, #48]	; (8003914 <__NVIC_SetPriority+0x4c>)
 80038e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e6:	0112      	lsls	r2, r2, #4
 80038e8:	b2d2      	uxtb	r2, r2
 80038ea:	440b      	add	r3, r1
 80038ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038f0:	e00a      	b.n	8003908 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	b2da      	uxtb	r2, r3
 80038f6:	4908      	ldr	r1, [pc, #32]	; (8003918 <__NVIC_SetPriority+0x50>)
 80038f8:	79fb      	ldrb	r3, [r7, #7]
 80038fa:	f003 030f 	and.w	r3, r3, #15
 80038fe:	3b04      	subs	r3, #4
 8003900:	0112      	lsls	r2, r2, #4
 8003902:	b2d2      	uxtb	r2, r2
 8003904:	440b      	add	r3, r1
 8003906:	761a      	strb	r2, [r3, #24]
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr
 8003914:	e000e100 	.word	0xe000e100
 8003918:	e000ed00 	.word	0xe000ed00

0800391c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800391c:	b480      	push	{r7}
 800391e:	b089      	sub	sp, #36	; 0x24
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f003 0307 	and.w	r3, r3, #7
 800392e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	f1c3 0307 	rsb	r3, r3, #7
 8003936:	2b04      	cmp	r3, #4
 8003938:	bf28      	it	cs
 800393a:	2304      	movcs	r3, #4
 800393c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	3304      	adds	r3, #4
 8003942:	2b06      	cmp	r3, #6
 8003944:	d902      	bls.n	800394c <NVIC_EncodePriority+0x30>
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	3b03      	subs	r3, #3
 800394a:	e000      	b.n	800394e <NVIC_EncodePriority+0x32>
 800394c:	2300      	movs	r3, #0
 800394e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003950:	f04f 32ff 	mov.w	r2, #4294967295
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	fa02 f303 	lsl.w	r3, r2, r3
 800395a:	43da      	mvns	r2, r3
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	401a      	ands	r2, r3
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003964:	f04f 31ff 	mov.w	r1, #4294967295
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	fa01 f303 	lsl.w	r3, r1, r3
 800396e:	43d9      	mvns	r1, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003974:	4313      	orrs	r3, r2
         );
}
 8003976:	4618      	mov	r0, r3
 8003978:	3724      	adds	r7, #36	; 0x24
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr

08003982 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b082      	sub	sp, #8
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7ff ff4c 	bl	8003828 <__NVIC_SetPriorityGrouping>
}
 8003990:	bf00      	nop
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	4603      	mov	r3, r0
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
 80039a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039a6:	2300      	movs	r3, #0
 80039a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039aa:	f7ff ff61 	bl	8003870 <__NVIC_GetPriorityGrouping>
 80039ae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	68b9      	ldr	r1, [r7, #8]
 80039b4:	6978      	ldr	r0, [r7, #20]
 80039b6:	f7ff ffb1 	bl	800391c <NVIC_EncodePriority>
 80039ba:	4602      	mov	r2, r0
 80039bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039c0:	4611      	mov	r1, r2
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7ff ff80 	bl	80038c8 <__NVIC_SetPriority>
}
 80039c8:	bf00      	nop
 80039ca:	3718      	adds	r7, #24
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	4603      	mov	r3, r0
 80039d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039de:	4618      	mov	r0, r3
 80039e0:	f7ff ff54 	bl	800388c <__NVIC_EnableIRQ>
}
 80039e4:	bf00      	nop
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039f4:	2300      	movs	r3, #0
 80039f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80039f8:	f7ff fbac 	bl	8003154 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d101      	bne.n	8003a08 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e099      	b.n	8003b3c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 0201 	bic.w	r2, r2, #1
 8003a26:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a28:	e00f      	b.n	8003a4a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a2a:	f7ff fb93 	bl	8003154 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b05      	cmp	r3, #5
 8003a36:	d908      	bls.n	8003a4a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2203      	movs	r2, #3
 8003a42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e078      	b.n	8003b3c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1e8      	bne.n	8003a2a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	4b38      	ldr	r3, [pc, #224]	; (8003b44 <HAL_DMA_Init+0x158>)
 8003a64:	4013      	ands	r3, r2
 8003a66:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa0:	2b04      	cmp	r3, #4
 8003aa2:	d107      	bne.n	8003ab4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aac:	4313      	orrs	r3, r2
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	f023 0307 	bic.w	r3, r3, #7
 8003aca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	d117      	bne.n	8003b0e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00e      	beq.n	8003b0e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 fa6f 	bl	8003fd4 <DMA_CheckFifoParam>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d008      	beq.n	8003b0e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2240      	movs	r2, #64	; 0x40
 8003b00:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e016      	b.n	8003b3c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 fa26 	bl	8003f68 <DMA_CalcBaseAndBitshift>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b24:	223f      	movs	r2, #63	; 0x3f
 8003b26:	409a      	lsls	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3718      	adds	r7, #24
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	f010803f 	.word	0xf010803f

08003b48 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
 8003b54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b56:	2300      	movs	r3, #0
 8003b58:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b5e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d101      	bne.n	8003b6e <HAL_DMA_Start_IT+0x26>
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	e040      	b.n	8003bf0 <HAL_DMA_Start_IT+0xa8>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d12f      	bne.n	8003be2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2202      	movs	r2, #2
 8003b86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	68b9      	ldr	r1, [r7, #8]
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f000 f9b8 	bl	8003f0c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba0:	223f      	movs	r2, #63	; 0x3f
 8003ba2:	409a      	lsls	r2, r3
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 0216 	orr.w	r2, r2, #22
 8003bb6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d007      	beq.n	8003bd0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f042 0208 	orr.w	r2, r2, #8
 8003bce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f042 0201 	orr.w	r2, r2, #1
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	e005      	b.n	8003bee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003bea:	2302      	movs	r3, #2
 8003bec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003bee:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3718      	adds	r7, #24
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003c00:	2300      	movs	r3, #0
 8003c02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c04:	4b8e      	ldr	r3, [pc, #568]	; (8003e40 <HAL_DMA_IRQHandler+0x248>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a8e      	ldr	r2, [pc, #568]	; (8003e44 <HAL_DMA_IRQHandler+0x24c>)
 8003c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0e:	0a9b      	lsrs	r3, r3, #10
 8003c10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c22:	2208      	movs	r2, #8
 8003c24:	409a      	lsls	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d01a      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0304 	and.w	r3, r3, #4
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d013      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0204 	bic.w	r2, r2, #4
 8003c4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c50:	2208      	movs	r2, #8
 8003c52:	409a      	lsls	r2, r3
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c5c:	f043 0201 	orr.w	r2, r3, #1
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c68:	2201      	movs	r2, #1
 8003c6a:	409a      	lsls	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d012      	beq.n	8003c9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00b      	beq.n	8003c9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c86:	2201      	movs	r2, #1
 8003c88:	409a      	lsls	r2, r3
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c92:	f043 0202 	orr.w	r2, r3, #2
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c9e:	2204      	movs	r2, #4
 8003ca0:	409a      	lsls	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d012      	beq.n	8003cd0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00b      	beq.n	8003cd0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cbc:	2204      	movs	r2, #4
 8003cbe:	409a      	lsls	r2, r3
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc8:	f043 0204 	orr.w	r2, r3, #4
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd4:	2210      	movs	r2, #16
 8003cd6:	409a      	lsls	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d043      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0308 	and.w	r3, r3, #8
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d03c      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf2:	2210      	movs	r2, #16
 8003cf4:	409a      	lsls	r2, r3
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d018      	beq.n	8003d3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d108      	bne.n	8003d28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d024      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	4798      	blx	r3
 8003d26:	e01f      	b.n	8003d68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d01b      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	4798      	blx	r3
 8003d38:	e016      	b.n	8003d68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d107      	bne.n	8003d58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f022 0208 	bic.w	r2, r2, #8
 8003d56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d003      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d6c:	2220      	movs	r2, #32
 8003d6e:	409a      	lsls	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	4013      	ands	r3, r2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 808f 	beq.w	8003e98 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0310 	and.w	r3, r3, #16
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 8087 	beq.w	8003e98 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d8e:	2220      	movs	r2, #32
 8003d90:	409a      	lsls	r2, r3
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b05      	cmp	r3, #5
 8003da0:	d136      	bne.n	8003e10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0216 	bic.w	r2, r2, #22
 8003db0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	695a      	ldr	r2, [r3, #20]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dc0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d103      	bne.n	8003dd2 <HAL_DMA_IRQHandler+0x1da>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d007      	beq.n	8003de2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 0208 	bic.w	r2, r2, #8
 8003de0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de6:	223f      	movs	r2, #63	; 0x3f
 8003de8:	409a      	lsls	r2, r3
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d07e      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	4798      	blx	r3
        }
        return;
 8003e0e:	e079      	b.n	8003f04 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d01d      	beq.n	8003e5a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d10d      	bne.n	8003e48 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d031      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	4798      	blx	r3
 8003e3c:	e02c      	b.n	8003e98 <HAL_DMA_IRQHandler+0x2a0>
 8003e3e:	bf00      	nop
 8003e40:	20000014 	.word	0x20000014
 8003e44:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d023      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	4798      	blx	r3
 8003e58:	e01e      	b.n	8003e98 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d10f      	bne.n	8003e88 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 0210 	bic.w	r2, r2, #16
 8003e76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d003      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d032      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d022      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2205      	movs	r2, #5
 8003eb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 0201 	bic.w	r2, r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	60bb      	str	r3, [r7, #8]
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d307      	bcc.n	8003ee0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1f2      	bne.n	8003ec4 <HAL_DMA_IRQHandler+0x2cc>
 8003ede:	e000      	b.n	8003ee2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003ee0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d005      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	4798      	blx	r3
 8003f02:	e000      	b.n	8003f06 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003f04:	bf00      	nop
    }
  }
}
 8003f06:	3718      	adds	r7, #24
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
 8003f18:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f28:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	2b40      	cmp	r3, #64	; 0x40
 8003f38:	d108      	bne.n	8003f4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003f4a:	e007      	b.n	8003f5c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68ba      	ldr	r2, [r7, #8]
 8003f52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	60da      	str	r2, [r3, #12]
}
 8003f5c:	bf00      	nop
 8003f5e:	3714      	adds	r7, #20
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	3b10      	subs	r3, #16
 8003f78:	4a14      	ldr	r2, [pc, #80]	; (8003fcc <DMA_CalcBaseAndBitshift+0x64>)
 8003f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7e:	091b      	lsrs	r3, r3, #4
 8003f80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f82:	4a13      	ldr	r2, [pc, #76]	; (8003fd0 <DMA_CalcBaseAndBitshift+0x68>)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	4413      	add	r3, r2
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2b03      	cmp	r3, #3
 8003f94:	d909      	bls.n	8003faa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f9e:	f023 0303 	bic.w	r3, r3, #3
 8003fa2:	1d1a      	adds	r2, r3, #4
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	659a      	str	r2, [r3, #88]	; 0x58
 8003fa8:	e007      	b.n	8003fba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003fb2:	f023 0303 	bic.w	r3, r3, #3
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3714      	adds	r7, #20
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	aaaaaaab 	.word	0xaaaaaaab
 8003fd0:	080090f4 	.word	0x080090f4

08003fd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d11f      	bne.n	800402e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	2b03      	cmp	r3, #3
 8003ff2:	d856      	bhi.n	80040a2 <DMA_CheckFifoParam+0xce>
 8003ff4:	a201      	add	r2, pc, #4	; (adr r2, 8003ffc <DMA_CheckFifoParam+0x28>)
 8003ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ffa:	bf00      	nop
 8003ffc:	0800400d 	.word	0x0800400d
 8004000:	0800401f 	.word	0x0800401f
 8004004:	0800400d 	.word	0x0800400d
 8004008:	080040a3 	.word	0x080040a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004010:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d046      	beq.n	80040a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800401c:	e043      	b.n	80040a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004022:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004026:	d140      	bne.n	80040aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800402c:	e03d      	b.n	80040aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004036:	d121      	bne.n	800407c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	2b03      	cmp	r3, #3
 800403c:	d837      	bhi.n	80040ae <DMA_CheckFifoParam+0xda>
 800403e:	a201      	add	r2, pc, #4	; (adr r2, 8004044 <DMA_CheckFifoParam+0x70>)
 8004040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004044:	08004055 	.word	0x08004055
 8004048:	0800405b 	.word	0x0800405b
 800404c:	08004055 	.word	0x08004055
 8004050:	0800406d 	.word	0x0800406d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	73fb      	strb	r3, [r7, #15]
      break;
 8004058:	e030      	b.n	80040bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d025      	beq.n	80040b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800406a:	e022      	b.n	80040b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004070:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004074:	d11f      	bne.n	80040b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800407a:	e01c      	b.n	80040b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	2b02      	cmp	r3, #2
 8004080:	d903      	bls.n	800408a <DMA_CheckFifoParam+0xb6>
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	2b03      	cmp	r3, #3
 8004086:	d003      	beq.n	8004090 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004088:	e018      	b.n	80040bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	73fb      	strb	r3, [r7, #15]
      break;
 800408e:	e015      	b.n	80040bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004094:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00e      	beq.n	80040ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	73fb      	strb	r3, [r7, #15]
      break;
 80040a0:	e00b      	b.n	80040ba <DMA_CheckFifoParam+0xe6>
      break;
 80040a2:	bf00      	nop
 80040a4:	e00a      	b.n	80040bc <DMA_CheckFifoParam+0xe8>
      break;
 80040a6:	bf00      	nop
 80040a8:	e008      	b.n	80040bc <DMA_CheckFifoParam+0xe8>
      break;
 80040aa:	bf00      	nop
 80040ac:	e006      	b.n	80040bc <DMA_CheckFifoParam+0xe8>
      break;
 80040ae:	bf00      	nop
 80040b0:	e004      	b.n	80040bc <DMA_CheckFifoParam+0xe8>
      break;
 80040b2:	bf00      	nop
 80040b4:	e002      	b.n	80040bc <DMA_CheckFifoParam+0xe8>
      break;   
 80040b6:	bf00      	nop
 80040b8:	e000      	b.n	80040bc <DMA_CheckFifoParam+0xe8>
      break;
 80040ba:	bf00      	nop
    }
  } 
  
  return status; 
 80040bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop

080040cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b089      	sub	sp, #36	; 0x24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80040d6:	2300      	movs	r3, #0
 80040d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80040da:	2300      	movs	r3, #0
 80040dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80040de:	2300      	movs	r3, #0
 80040e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040e2:	2300      	movs	r3, #0
 80040e4:	61fb      	str	r3, [r7, #28]
 80040e6:	e16b      	b.n	80043c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040e8:	2201      	movs	r2, #1
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	fa02 f303 	lsl.w	r3, r2, r3
 80040f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	4013      	ands	r3, r2
 80040fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	429a      	cmp	r2, r3
 8004102:	f040 815a 	bne.w	80043ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f003 0303 	and.w	r3, r3, #3
 800410e:	2b01      	cmp	r3, #1
 8004110:	d005      	beq.n	800411e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800411a:	2b02      	cmp	r3, #2
 800411c:	d130      	bne.n	8004180 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	005b      	lsls	r3, r3, #1
 8004128:	2203      	movs	r2, #3
 800412a:	fa02 f303 	lsl.w	r3, r2, r3
 800412e:	43db      	mvns	r3, r3
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	4013      	ands	r3, r2
 8004134:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	68da      	ldr	r2, [r3, #12]
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	005b      	lsls	r3, r3, #1
 800413e:	fa02 f303 	lsl.w	r3, r2, r3
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	4313      	orrs	r3, r2
 8004146:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004154:	2201      	movs	r2, #1
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	fa02 f303 	lsl.w	r3, r2, r3
 800415c:	43db      	mvns	r3, r3
 800415e:	69ba      	ldr	r2, [r7, #24]
 8004160:	4013      	ands	r3, r2
 8004162:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	091b      	lsrs	r3, r3, #4
 800416a:	f003 0201 	and.w	r2, r3, #1
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	fa02 f303 	lsl.w	r3, r2, r3
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	4313      	orrs	r3, r2
 8004178:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f003 0303 	and.w	r3, r3, #3
 8004188:	2b03      	cmp	r3, #3
 800418a:	d017      	beq.n	80041bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	005b      	lsls	r3, r3, #1
 8004196:	2203      	movs	r2, #3
 8004198:	fa02 f303 	lsl.w	r3, r2, r3
 800419c:	43db      	mvns	r3, r3
 800419e:	69ba      	ldr	r2, [r7, #24]
 80041a0:	4013      	ands	r3, r2
 80041a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	689a      	ldr	r2, [r3, #8]
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	005b      	lsls	r3, r3, #1
 80041ac:	fa02 f303 	lsl.w	r3, r2, r3
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f003 0303 	and.w	r3, r3, #3
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d123      	bne.n	8004210 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	08da      	lsrs	r2, r3, #3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	3208      	adds	r2, #8
 80041d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	f003 0307 	and.w	r3, r3, #7
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	220f      	movs	r2, #15
 80041e0:	fa02 f303 	lsl.w	r3, r2, r3
 80041e4:	43db      	mvns	r3, r3
 80041e6:	69ba      	ldr	r2, [r7, #24]
 80041e8:	4013      	ands	r3, r2
 80041ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	691a      	ldr	r2, [r3, #16]
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	f003 0307 	and.w	r3, r3, #7
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	fa02 f303 	lsl.w	r3, r2, r3
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	4313      	orrs	r3, r2
 8004200:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	08da      	lsrs	r2, r3, #3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	3208      	adds	r2, #8
 800420a:	69b9      	ldr	r1, [r7, #24]
 800420c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	2203      	movs	r2, #3
 800421c:	fa02 f303 	lsl.w	r3, r2, r3
 8004220:	43db      	mvns	r3, r3
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	4013      	ands	r3, r2
 8004226:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f003 0203 	and.w	r2, r3, #3
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	fa02 f303 	lsl.w	r3, r2, r3
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	4313      	orrs	r3, r2
 800423c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800424c:	2b00      	cmp	r3, #0
 800424e:	f000 80b4 	beq.w	80043ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004252:	2300      	movs	r3, #0
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	4b60      	ldr	r3, [pc, #384]	; (80043d8 <HAL_GPIO_Init+0x30c>)
 8004258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425a:	4a5f      	ldr	r2, [pc, #380]	; (80043d8 <HAL_GPIO_Init+0x30c>)
 800425c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004260:	6453      	str	r3, [r2, #68]	; 0x44
 8004262:	4b5d      	ldr	r3, [pc, #372]	; (80043d8 <HAL_GPIO_Init+0x30c>)
 8004264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800426e:	4a5b      	ldr	r2, [pc, #364]	; (80043dc <HAL_GPIO_Init+0x310>)
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	089b      	lsrs	r3, r3, #2
 8004274:	3302      	adds	r3, #2
 8004276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800427a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	f003 0303 	and.w	r3, r3, #3
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	220f      	movs	r2, #15
 8004286:	fa02 f303 	lsl.w	r3, r2, r3
 800428a:	43db      	mvns	r3, r3
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	4013      	ands	r3, r2
 8004290:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a52      	ldr	r2, [pc, #328]	; (80043e0 <HAL_GPIO_Init+0x314>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d02b      	beq.n	80042f2 <HAL_GPIO_Init+0x226>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a51      	ldr	r2, [pc, #324]	; (80043e4 <HAL_GPIO_Init+0x318>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d025      	beq.n	80042ee <HAL_GPIO_Init+0x222>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a50      	ldr	r2, [pc, #320]	; (80043e8 <HAL_GPIO_Init+0x31c>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d01f      	beq.n	80042ea <HAL_GPIO_Init+0x21e>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a4f      	ldr	r2, [pc, #316]	; (80043ec <HAL_GPIO_Init+0x320>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d019      	beq.n	80042e6 <HAL_GPIO_Init+0x21a>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a4e      	ldr	r2, [pc, #312]	; (80043f0 <HAL_GPIO_Init+0x324>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d013      	beq.n	80042e2 <HAL_GPIO_Init+0x216>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a4d      	ldr	r2, [pc, #308]	; (80043f4 <HAL_GPIO_Init+0x328>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d00d      	beq.n	80042de <HAL_GPIO_Init+0x212>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a4c      	ldr	r2, [pc, #304]	; (80043f8 <HAL_GPIO_Init+0x32c>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d007      	beq.n	80042da <HAL_GPIO_Init+0x20e>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a4b      	ldr	r2, [pc, #300]	; (80043fc <HAL_GPIO_Init+0x330>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d101      	bne.n	80042d6 <HAL_GPIO_Init+0x20a>
 80042d2:	2307      	movs	r3, #7
 80042d4:	e00e      	b.n	80042f4 <HAL_GPIO_Init+0x228>
 80042d6:	2308      	movs	r3, #8
 80042d8:	e00c      	b.n	80042f4 <HAL_GPIO_Init+0x228>
 80042da:	2306      	movs	r3, #6
 80042dc:	e00a      	b.n	80042f4 <HAL_GPIO_Init+0x228>
 80042de:	2305      	movs	r3, #5
 80042e0:	e008      	b.n	80042f4 <HAL_GPIO_Init+0x228>
 80042e2:	2304      	movs	r3, #4
 80042e4:	e006      	b.n	80042f4 <HAL_GPIO_Init+0x228>
 80042e6:	2303      	movs	r3, #3
 80042e8:	e004      	b.n	80042f4 <HAL_GPIO_Init+0x228>
 80042ea:	2302      	movs	r3, #2
 80042ec:	e002      	b.n	80042f4 <HAL_GPIO_Init+0x228>
 80042ee:	2301      	movs	r3, #1
 80042f0:	e000      	b.n	80042f4 <HAL_GPIO_Init+0x228>
 80042f2:	2300      	movs	r3, #0
 80042f4:	69fa      	ldr	r2, [r7, #28]
 80042f6:	f002 0203 	and.w	r2, r2, #3
 80042fa:	0092      	lsls	r2, r2, #2
 80042fc:	4093      	lsls	r3, r2
 80042fe:	69ba      	ldr	r2, [r7, #24]
 8004300:	4313      	orrs	r3, r2
 8004302:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004304:	4935      	ldr	r1, [pc, #212]	; (80043dc <HAL_GPIO_Init+0x310>)
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	089b      	lsrs	r3, r3, #2
 800430a:	3302      	adds	r3, #2
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004312:	4b3b      	ldr	r3, [pc, #236]	; (8004400 <HAL_GPIO_Init+0x334>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	43db      	mvns	r3, r3
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	4013      	ands	r3, r2
 8004320:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d003      	beq.n	8004336 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	4313      	orrs	r3, r2
 8004334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004336:	4a32      	ldr	r2, [pc, #200]	; (8004400 <HAL_GPIO_Init+0x334>)
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800433c:	4b30      	ldr	r3, [pc, #192]	; (8004400 <HAL_GPIO_Init+0x334>)
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	43db      	mvns	r3, r3
 8004346:	69ba      	ldr	r2, [r7, #24]
 8004348:	4013      	ands	r3, r2
 800434a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d003      	beq.n	8004360 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	4313      	orrs	r3, r2
 800435e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004360:	4a27      	ldr	r2, [pc, #156]	; (8004400 <HAL_GPIO_Init+0x334>)
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004366:	4b26      	ldr	r3, [pc, #152]	; (8004400 <HAL_GPIO_Init+0x334>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	43db      	mvns	r3, r3
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	4013      	ands	r3, r2
 8004374:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d003      	beq.n	800438a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	4313      	orrs	r3, r2
 8004388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800438a:	4a1d      	ldr	r2, [pc, #116]	; (8004400 <HAL_GPIO_Init+0x334>)
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004390:	4b1b      	ldr	r3, [pc, #108]	; (8004400 <HAL_GPIO_Init+0x334>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	43db      	mvns	r3, r3
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	4013      	ands	r3, r2
 800439e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d003      	beq.n	80043b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80043b4:	4a12      	ldr	r2, [pc, #72]	; (8004400 <HAL_GPIO_Init+0x334>)
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	3301      	adds	r3, #1
 80043be:	61fb      	str	r3, [r7, #28]
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	2b0f      	cmp	r3, #15
 80043c4:	f67f ae90 	bls.w	80040e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80043c8:	bf00      	nop
 80043ca:	bf00      	nop
 80043cc:	3724      	adds	r7, #36	; 0x24
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	40023800 	.word	0x40023800
 80043dc:	40013800 	.word	0x40013800
 80043e0:	40020000 	.word	0x40020000
 80043e4:	40020400 	.word	0x40020400
 80043e8:	40020800 	.word	0x40020800
 80043ec:	40020c00 	.word	0x40020c00
 80043f0:	40021000 	.word	0x40021000
 80043f4:	40021400 	.word	0x40021400
 80043f8:	40021800 	.word	0x40021800
 80043fc:	40021c00 	.word	0x40021c00
 8004400:	40013c00 	.word	0x40013c00

08004404 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	460b      	mov	r3, r1
 800440e:	807b      	strh	r3, [r7, #2]
 8004410:	4613      	mov	r3, r2
 8004412:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004414:	787b      	ldrb	r3, [r7, #1]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d003      	beq.n	8004422 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800441a:	887a      	ldrh	r2, [r7, #2]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004420:	e003      	b.n	800442a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004422:	887b      	ldrh	r3, [r7, #2]
 8004424:	041a      	lsls	r2, r3, #16
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	619a      	str	r2, [r3, #24]
}
 800442a:	bf00      	nop
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
	...

08004438 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e12b      	b.n	80046a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d106      	bne.n	8004464 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7fd fb40 	bl	8001ae4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2224      	movs	r2, #36	; 0x24
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f022 0201 	bic.w	r2, r2, #1
 800447a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800448a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800449a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800449c:	f000 fd80 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 80044a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	4a81      	ldr	r2, [pc, #516]	; (80046ac <HAL_I2C_Init+0x274>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d807      	bhi.n	80044bc <HAL_I2C_Init+0x84>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	4a80      	ldr	r2, [pc, #512]	; (80046b0 <HAL_I2C_Init+0x278>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	bf94      	ite	ls
 80044b4:	2301      	movls	r3, #1
 80044b6:	2300      	movhi	r3, #0
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	e006      	b.n	80044ca <HAL_I2C_Init+0x92>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	4a7d      	ldr	r2, [pc, #500]	; (80046b4 <HAL_I2C_Init+0x27c>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	bf94      	ite	ls
 80044c4:	2301      	movls	r3, #1
 80044c6:	2300      	movhi	r3, #0
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d001      	beq.n	80044d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e0e7      	b.n	80046a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	4a78      	ldr	r2, [pc, #480]	; (80046b8 <HAL_I2C_Init+0x280>)
 80044d6:	fba2 2303 	umull	r2, r3, r2, r3
 80044da:	0c9b      	lsrs	r3, r3, #18
 80044dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	430a      	orrs	r2, r1
 80044f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	6a1b      	ldr	r3, [r3, #32]
 80044f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	4a6a      	ldr	r2, [pc, #424]	; (80046ac <HAL_I2C_Init+0x274>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d802      	bhi.n	800450c <HAL_I2C_Init+0xd4>
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	3301      	adds	r3, #1
 800450a:	e009      	b.n	8004520 <HAL_I2C_Init+0xe8>
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004512:	fb02 f303 	mul.w	r3, r2, r3
 8004516:	4a69      	ldr	r2, [pc, #420]	; (80046bc <HAL_I2C_Init+0x284>)
 8004518:	fba2 2303 	umull	r2, r3, r2, r3
 800451c:	099b      	lsrs	r3, r3, #6
 800451e:	3301      	adds	r3, #1
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	6812      	ldr	r2, [r2, #0]
 8004524:	430b      	orrs	r3, r1
 8004526:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	69db      	ldr	r3, [r3, #28]
 800452e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004532:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	495c      	ldr	r1, [pc, #368]	; (80046ac <HAL_I2C_Init+0x274>)
 800453c:	428b      	cmp	r3, r1
 800453e:	d819      	bhi.n	8004574 <HAL_I2C_Init+0x13c>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	1e59      	subs	r1, r3, #1
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	005b      	lsls	r3, r3, #1
 800454a:	fbb1 f3f3 	udiv	r3, r1, r3
 800454e:	1c59      	adds	r1, r3, #1
 8004550:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004554:	400b      	ands	r3, r1
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00a      	beq.n	8004570 <HAL_I2C_Init+0x138>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	1e59      	subs	r1, r3, #1
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	005b      	lsls	r3, r3, #1
 8004564:	fbb1 f3f3 	udiv	r3, r1, r3
 8004568:	3301      	adds	r3, #1
 800456a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800456e:	e051      	b.n	8004614 <HAL_I2C_Init+0x1dc>
 8004570:	2304      	movs	r3, #4
 8004572:	e04f      	b.n	8004614 <HAL_I2C_Init+0x1dc>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d111      	bne.n	80045a0 <HAL_I2C_Init+0x168>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	1e58      	subs	r0, r3, #1
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6859      	ldr	r1, [r3, #4]
 8004584:	460b      	mov	r3, r1
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	440b      	add	r3, r1
 800458a:	fbb0 f3f3 	udiv	r3, r0, r3
 800458e:	3301      	adds	r3, #1
 8004590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004594:	2b00      	cmp	r3, #0
 8004596:	bf0c      	ite	eq
 8004598:	2301      	moveq	r3, #1
 800459a:	2300      	movne	r3, #0
 800459c:	b2db      	uxtb	r3, r3
 800459e:	e012      	b.n	80045c6 <HAL_I2C_Init+0x18e>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	1e58      	subs	r0, r3, #1
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6859      	ldr	r1, [r3, #4]
 80045a8:	460b      	mov	r3, r1
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	440b      	add	r3, r1
 80045ae:	0099      	lsls	r1, r3, #2
 80045b0:	440b      	add	r3, r1
 80045b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80045b6:	3301      	adds	r3, #1
 80045b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045bc:	2b00      	cmp	r3, #0
 80045be:	bf0c      	ite	eq
 80045c0:	2301      	moveq	r3, #1
 80045c2:	2300      	movne	r3, #0
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d001      	beq.n	80045ce <HAL_I2C_Init+0x196>
 80045ca:	2301      	movs	r3, #1
 80045cc:	e022      	b.n	8004614 <HAL_I2C_Init+0x1dc>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10e      	bne.n	80045f4 <HAL_I2C_Init+0x1bc>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	1e58      	subs	r0, r3, #1
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6859      	ldr	r1, [r3, #4]
 80045de:	460b      	mov	r3, r1
 80045e0:	005b      	lsls	r3, r3, #1
 80045e2:	440b      	add	r3, r1
 80045e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80045e8:	3301      	adds	r3, #1
 80045ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045f2:	e00f      	b.n	8004614 <HAL_I2C_Init+0x1dc>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	1e58      	subs	r0, r3, #1
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6859      	ldr	r1, [r3, #4]
 80045fc:	460b      	mov	r3, r1
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	440b      	add	r3, r1
 8004602:	0099      	lsls	r1, r3, #2
 8004604:	440b      	add	r3, r1
 8004606:	fbb0 f3f3 	udiv	r3, r0, r3
 800460a:	3301      	adds	r3, #1
 800460c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004610:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004614:	6879      	ldr	r1, [r7, #4]
 8004616:	6809      	ldr	r1, [r1, #0]
 8004618:	4313      	orrs	r3, r2
 800461a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	69da      	ldr	r2, [r3, #28]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	431a      	orrs	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	430a      	orrs	r2, r1
 8004636:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004642:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	6911      	ldr	r1, [r2, #16]
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	68d2      	ldr	r2, [r2, #12]
 800464e:	4311      	orrs	r1, r2
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	6812      	ldr	r2, [r2, #0]
 8004654:	430b      	orrs	r3, r1
 8004656:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	695a      	ldr	r2, [r3, #20]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	431a      	orrs	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	430a      	orrs	r2, r1
 8004672:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0201 	orr.w	r2, r2, #1
 8004682:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2220      	movs	r2, #32
 800468e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	000186a0 	.word	0x000186a0
 80046b0:	001e847f 	.word	0x001e847f
 80046b4:	003d08ff 	.word	0x003d08ff
 80046b8:	431bde83 	.word	0x431bde83
 80046bc:	10624dd3 	.word	0x10624dd3

080046c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e267      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d075      	beq.n	80047ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046de:	4b88      	ldr	r3, [pc, #544]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f003 030c 	and.w	r3, r3, #12
 80046e6:	2b04      	cmp	r3, #4
 80046e8:	d00c      	beq.n	8004704 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046ea:	4b85      	ldr	r3, [pc, #532]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046f2:	2b08      	cmp	r3, #8
 80046f4:	d112      	bne.n	800471c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046f6:	4b82      	ldr	r3, [pc, #520]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004702:	d10b      	bne.n	800471c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004704:	4b7e      	ldr	r3, [pc, #504]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d05b      	beq.n	80047c8 <HAL_RCC_OscConfig+0x108>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d157      	bne.n	80047c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e242      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004724:	d106      	bne.n	8004734 <HAL_RCC_OscConfig+0x74>
 8004726:	4b76      	ldr	r3, [pc, #472]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a75      	ldr	r2, [pc, #468]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 800472c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004730:	6013      	str	r3, [r2, #0]
 8004732:	e01d      	b.n	8004770 <HAL_RCC_OscConfig+0xb0>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800473c:	d10c      	bne.n	8004758 <HAL_RCC_OscConfig+0x98>
 800473e:	4b70      	ldr	r3, [pc, #448]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a6f      	ldr	r2, [pc, #444]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 8004744:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004748:	6013      	str	r3, [r2, #0]
 800474a:	4b6d      	ldr	r3, [pc, #436]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a6c      	ldr	r2, [pc, #432]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 8004750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004754:	6013      	str	r3, [r2, #0]
 8004756:	e00b      	b.n	8004770 <HAL_RCC_OscConfig+0xb0>
 8004758:	4b69      	ldr	r3, [pc, #420]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a68      	ldr	r2, [pc, #416]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 800475e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004762:	6013      	str	r3, [r2, #0]
 8004764:	4b66      	ldr	r3, [pc, #408]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a65      	ldr	r2, [pc, #404]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 800476a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800476e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d013      	beq.n	80047a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004778:	f7fe fcec 	bl	8003154 <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800477e:	e008      	b.n	8004792 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004780:	f7fe fce8 	bl	8003154 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b64      	cmp	r3, #100	; 0x64
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e207      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004792:	4b5b      	ldr	r3, [pc, #364]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d0f0      	beq.n	8004780 <HAL_RCC_OscConfig+0xc0>
 800479e:	e014      	b.n	80047ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a0:	f7fe fcd8 	bl	8003154 <HAL_GetTick>
 80047a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047a6:	e008      	b.n	80047ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047a8:	f7fe fcd4 	bl	8003154 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b64      	cmp	r3, #100	; 0x64
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e1f3      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ba:	4b51      	ldr	r3, [pc, #324]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1f0      	bne.n	80047a8 <HAL_RCC_OscConfig+0xe8>
 80047c6:	e000      	b.n	80047ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d063      	beq.n	800489e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047d6:	4b4a      	ldr	r3, [pc, #296]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f003 030c 	and.w	r3, r3, #12
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00b      	beq.n	80047fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047e2:	4b47      	ldr	r3, [pc, #284]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047ea:	2b08      	cmp	r3, #8
 80047ec:	d11c      	bne.n	8004828 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047ee:	4b44      	ldr	r3, [pc, #272]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d116      	bne.n	8004828 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047fa:	4b41      	ldr	r3, [pc, #260]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d005      	beq.n	8004812 <HAL_RCC_OscConfig+0x152>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d001      	beq.n	8004812 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e1c7      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004812:	4b3b      	ldr	r3, [pc, #236]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	00db      	lsls	r3, r3, #3
 8004820:	4937      	ldr	r1, [pc, #220]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 8004822:	4313      	orrs	r3, r2
 8004824:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004826:	e03a      	b.n	800489e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d020      	beq.n	8004872 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004830:	4b34      	ldr	r3, [pc, #208]	; (8004904 <HAL_RCC_OscConfig+0x244>)
 8004832:	2201      	movs	r2, #1
 8004834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004836:	f7fe fc8d 	bl	8003154 <HAL_GetTick>
 800483a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800483c:	e008      	b.n	8004850 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800483e:	f7fe fc89 	bl	8003154 <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	2b02      	cmp	r3, #2
 800484a:	d901      	bls.n	8004850 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e1a8      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004850:	4b2b      	ldr	r3, [pc, #172]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d0f0      	beq.n	800483e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800485c:	4b28      	ldr	r3, [pc, #160]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	00db      	lsls	r3, r3, #3
 800486a:	4925      	ldr	r1, [pc, #148]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 800486c:	4313      	orrs	r3, r2
 800486e:	600b      	str	r3, [r1, #0]
 8004870:	e015      	b.n	800489e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004872:	4b24      	ldr	r3, [pc, #144]	; (8004904 <HAL_RCC_OscConfig+0x244>)
 8004874:	2200      	movs	r2, #0
 8004876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004878:	f7fe fc6c 	bl	8003154 <HAL_GetTick>
 800487c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800487e:	e008      	b.n	8004892 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004880:	f7fe fc68 	bl	8003154 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b02      	cmp	r3, #2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e187      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004892:	4b1b      	ldr	r3, [pc, #108]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1f0      	bne.n	8004880 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0308 	and.w	r3, r3, #8
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d036      	beq.n	8004918 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d016      	beq.n	80048e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048b2:	4b15      	ldr	r3, [pc, #84]	; (8004908 <HAL_RCC_OscConfig+0x248>)
 80048b4:	2201      	movs	r2, #1
 80048b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b8:	f7fe fc4c 	bl	8003154 <HAL_GetTick>
 80048bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048be:	e008      	b.n	80048d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048c0:	f7fe fc48 	bl	8003154 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d901      	bls.n	80048d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e167      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048d2:	4b0b      	ldr	r3, [pc, #44]	; (8004900 <HAL_RCC_OscConfig+0x240>)
 80048d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d0f0      	beq.n	80048c0 <HAL_RCC_OscConfig+0x200>
 80048de:	e01b      	b.n	8004918 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048e0:	4b09      	ldr	r3, [pc, #36]	; (8004908 <HAL_RCC_OscConfig+0x248>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048e6:	f7fe fc35 	bl	8003154 <HAL_GetTick>
 80048ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048ec:	e00e      	b.n	800490c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048ee:	f7fe fc31 	bl	8003154 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d907      	bls.n	800490c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e150      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
 8004900:	40023800 	.word	0x40023800
 8004904:	42470000 	.word	0x42470000
 8004908:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800490c:	4b88      	ldr	r3, [pc, #544]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 800490e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004910:	f003 0302 	and.w	r3, r3, #2
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1ea      	bne.n	80048ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0304 	and.w	r3, r3, #4
 8004920:	2b00      	cmp	r3, #0
 8004922:	f000 8097 	beq.w	8004a54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004926:	2300      	movs	r3, #0
 8004928:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800492a:	4b81      	ldr	r3, [pc, #516]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 800492c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10f      	bne.n	8004956 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004936:	2300      	movs	r3, #0
 8004938:	60bb      	str	r3, [r7, #8]
 800493a:	4b7d      	ldr	r3, [pc, #500]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	4a7c      	ldr	r2, [pc, #496]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 8004940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004944:	6413      	str	r3, [r2, #64]	; 0x40
 8004946:	4b7a      	ldr	r3, [pc, #488]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 8004948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800494e:	60bb      	str	r3, [r7, #8]
 8004950:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004952:	2301      	movs	r3, #1
 8004954:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004956:	4b77      	ldr	r3, [pc, #476]	; (8004b34 <HAL_RCC_OscConfig+0x474>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800495e:	2b00      	cmp	r3, #0
 8004960:	d118      	bne.n	8004994 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004962:	4b74      	ldr	r3, [pc, #464]	; (8004b34 <HAL_RCC_OscConfig+0x474>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a73      	ldr	r2, [pc, #460]	; (8004b34 <HAL_RCC_OscConfig+0x474>)
 8004968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800496c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800496e:	f7fe fbf1 	bl	8003154 <HAL_GetTick>
 8004972:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004974:	e008      	b.n	8004988 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004976:	f7fe fbed 	bl	8003154 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	2b02      	cmp	r3, #2
 8004982:	d901      	bls.n	8004988 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e10c      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004988:	4b6a      	ldr	r3, [pc, #424]	; (8004b34 <HAL_RCC_OscConfig+0x474>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004990:	2b00      	cmp	r3, #0
 8004992:	d0f0      	beq.n	8004976 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d106      	bne.n	80049aa <HAL_RCC_OscConfig+0x2ea>
 800499c:	4b64      	ldr	r3, [pc, #400]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 800499e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a0:	4a63      	ldr	r2, [pc, #396]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 80049a2:	f043 0301 	orr.w	r3, r3, #1
 80049a6:	6713      	str	r3, [r2, #112]	; 0x70
 80049a8:	e01c      	b.n	80049e4 <HAL_RCC_OscConfig+0x324>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	2b05      	cmp	r3, #5
 80049b0:	d10c      	bne.n	80049cc <HAL_RCC_OscConfig+0x30c>
 80049b2:	4b5f      	ldr	r3, [pc, #380]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 80049b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b6:	4a5e      	ldr	r2, [pc, #376]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 80049b8:	f043 0304 	orr.w	r3, r3, #4
 80049bc:	6713      	str	r3, [r2, #112]	; 0x70
 80049be:	4b5c      	ldr	r3, [pc, #368]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 80049c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c2:	4a5b      	ldr	r2, [pc, #364]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 80049c4:	f043 0301 	orr.w	r3, r3, #1
 80049c8:	6713      	str	r3, [r2, #112]	; 0x70
 80049ca:	e00b      	b.n	80049e4 <HAL_RCC_OscConfig+0x324>
 80049cc:	4b58      	ldr	r3, [pc, #352]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 80049ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d0:	4a57      	ldr	r2, [pc, #348]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 80049d2:	f023 0301 	bic.w	r3, r3, #1
 80049d6:	6713      	str	r3, [r2, #112]	; 0x70
 80049d8:	4b55      	ldr	r3, [pc, #340]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 80049da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049dc:	4a54      	ldr	r2, [pc, #336]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 80049de:	f023 0304 	bic.w	r3, r3, #4
 80049e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d015      	beq.n	8004a18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ec:	f7fe fbb2 	bl	8003154 <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049f2:	e00a      	b.n	8004a0a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049f4:	f7fe fbae 	bl	8003154 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e0cb      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a0a:	4b49      	ldr	r3, [pc, #292]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 8004a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d0ee      	beq.n	80049f4 <HAL_RCC_OscConfig+0x334>
 8004a16:	e014      	b.n	8004a42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a18:	f7fe fb9c 	bl	8003154 <HAL_GetTick>
 8004a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a1e:	e00a      	b.n	8004a36 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a20:	f7fe fb98 	bl	8003154 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e0b5      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a36:	4b3e      	ldr	r3, [pc, #248]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 8004a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1ee      	bne.n	8004a20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a42:	7dfb      	ldrb	r3, [r7, #23]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d105      	bne.n	8004a54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a48:	4b39      	ldr	r3, [pc, #228]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 8004a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4c:	4a38      	ldr	r2, [pc, #224]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 8004a4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f000 80a1 	beq.w	8004ba0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a5e:	4b34      	ldr	r3, [pc, #208]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f003 030c 	and.w	r3, r3, #12
 8004a66:	2b08      	cmp	r3, #8
 8004a68:	d05c      	beq.n	8004b24 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d141      	bne.n	8004af6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a72:	4b31      	ldr	r3, [pc, #196]	; (8004b38 <HAL_RCC_OscConfig+0x478>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a78:	f7fe fb6c 	bl	8003154 <HAL_GetTick>
 8004a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a7e:	e008      	b.n	8004a92 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a80:	f7fe fb68 	bl	8003154 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e087      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a92:	4b27      	ldr	r3, [pc, #156]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1f0      	bne.n	8004a80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	69da      	ldr	r2, [r3, #28]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aac:	019b      	lsls	r3, r3, #6
 8004aae:	431a      	orrs	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab4:	085b      	lsrs	r3, r3, #1
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	041b      	lsls	r3, r3, #16
 8004aba:	431a      	orrs	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac0:	061b      	lsls	r3, r3, #24
 8004ac2:	491b      	ldr	r1, [pc, #108]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ac8:	4b1b      	ldr	r3, [pc, #108]	; (8004b38 <HAL_RCC_OscConfig+0x478>)
 8004aca:	2201      	movs	r2, #1
 8004acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ace:	f7fe fb41 	bl	8003154 <HAL_GetTick>
 8004ad2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ad4:	e008      	b.n	8004ae8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ad6:	f7fe fb3d 	bl	8003154 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d901      	bls.n	8004ae8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e05c      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ae8:	4b11      	ldr	r3, [pc, #68]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d0f0      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x416>
 8004af4:	e054      	b.n	8004ba0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004af6:	4b10      	ldr	r3, [pc, #64]	; (8004b38 <HAL_RCC_OscConfig+0x478>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004afc:	f7fe fb2a 	bl	8003154 <HAL_GetTick>
 8004b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b02:	e008      	b.n	8004b16 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b04:	f7fe fb26 	bl	8003154 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e045      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b16:	4b06      	ldr	r3, [pc, #24]	; (8004b30 <HAL_RCC_OscConfig+0x470>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1f0      	bne.n	8004b04 <HAL_RCC_OscConfig+0x444>
 8004b22:	e03d      	b.n	8004ba0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d107      	bne.n	8004b3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e038      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
 8004b30:	40023800 	.word	0x40023800
 8004b34:	40007000 	.word	0x40007000
 8004b38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b3c:	4b1b      	ldr	r3, [pc, #108]	; (8004bac <HAL_RCC_OscConfig+0x4ec>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d028      	beq.n	8004b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d121      	bne.n	8004b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d11a      	bne.n	8004b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d111      	bne.n	8004b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b82:	085b      	lsrs	r3, r3, #1
 8004b84:	3b01      	subs	r3, #1
 8004b86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d107      	bne.n	8004b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d001      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e000      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3718      	adds	r7, #24
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	40023800 	.word	0x40023800

08004bb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d101      	bne.n	8004bc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e0cc      	b.n	8004d5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bc4:	4b68      	ldr	r3, [pc, #416]	; (8004d68 <HAL_RCC_ClockConfig+0x1b8>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0307 	and.w	r3, r3, #7
 8004bcc:	683a      	ldr	r2, [r7, #0]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d90c      	bls.n	8004bec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bd2:	4b65      	ldr	r3, [pc, #404]	; (8004d68 <HAL_RCC_ClockConfig+0x1b8>)
 8004bd4:	683a      	ldr	r2, [r7, #0]
 8004bd6:	b2d2      	uxtb	r2, r2
 8004bd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bda:	4b63      	ldr	r3, [pc, #396]	; (8004d68 <HAL_RCC_ClockConfig+0x1b8>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0307 	and.w	r3, r3, #7
 8004be2:	683a      	ldr	r2, [r7, #0]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d001      	beq.n	8004bec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e0b8      	b.n	8004d5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0302 	and.w	r3, r3, #2
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d020      	beq.n	8004c3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0304 	and.w	r3, r3, #4
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d005      	beq.n	8004c10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c04:	4b59      	ldr	r3, [pc, #356]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	4a58      	ldr	r2, [pc, #352]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0308 	and.w	r3, r3, #8
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d005      	beq.n	8004c28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c1c:	4b53      	ldr	r3, [pc, #332]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	4a52      	ldr	r2, [pc, #328]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c28:	4b50      	ldr	r3, [pc, #320]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	494d      	ldr	r1, [pc, #308]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d044      	beq.n	8004cd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d107      	bne.n	8004c5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c4e:	4b47      	ldr	r3, [pc, #284]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d119      	bne.n	8004c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e07f      	b.n	8004d5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d003      	beq.n	8004c6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c6a:	2b03      	cmp	r3, #3
 8004c6c:	d107      	bne.n	8004c7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c6e:	4b3f      	ldr	r3, [pc, #252]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d109      	bne.n	8004c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e06f      	b.n	8004d5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c7e:	4b3b      	ldr	r3, [pc, #236]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0302 	and.w	r3, r3, #2
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e067      	b.n	8004d5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c8e:	4b37      	ldr	r3, [pc, #220]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f023 0203 	bic.w	r2, r3, #3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	4934      	ldr	r1, [pc, #208]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ca0:	f7fe fa58 	bl	8003154 <HAL_GetTick>
 8004ca4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ca6:	e00a      	b.n	8004cbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ca8:	f7fe fa54 	bl	8003154 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e04f      	b.n	8004d5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cbe:	4b2b      	ldr	r3, [pc, #172]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f003 020c 	and.w	r2, r3, #12
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d1eb      	bne.n	8004ca8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cd0:	4b25      	ldr	r3, [pc, #148]	; (8004d68 <HAL_RCC_ClockConfig+0x1b8>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0307 	and.w	r3, r3, #7
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d20c      	bcs.n	8004cf8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cde:	4b22      	ldr	r3, [pc, #136]	; (8004d68 <HAL_RCC_ClockConfig+0x1b8>)
 8004ce0:	683a      	ldr	r2, [r7, #0]
 8004ce2:	b2d2      	uxtb	r2, r2
 8004ce4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ce6:	4b20      	ldr	r3, [pc, #128]	; (8004d68 <HAL_RCC_ClockConfig+0x1b8>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0307 	and.w	r3, r3, #7
 8004cee:	683a      	ldr	r2, [r7, #0]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d001      	beq.n	8004cf8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e032      	b.n	8004d5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0304 	and.w	r3, r3, #4
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d008      	beq.n	8004d16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d04:	4b19      	ldr	r3, [pc, #100]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	4916      	ldr	r1, [pc, #88]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0308 	and.w	r3, r3, #8
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d009      	beq.n	8004d36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d22:	4b12      	ldr	r3, [pc, #72]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	00db      	lsls	r3, r3, #3
 8004d30:	490e      	ldr	r1, [pc, #56]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d36:	f000 f821 	bl	8004d7c <HAL_RCC_GetSysClockFreq>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	4b0b      	ldr	r3, [pc, #44]	; (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	091b      	lsrs	r3, r3, #4
 8004d42:	f003 030f 	and.w	r3, r3, #15
 8004d46:	490a      	ldr	r1, [pc, #40]	; (8004d70 <HAL_RCC_ClockConfig+0x1c0>)
 8004d48:	5ccb      	ldrb	r3, [r1, r3]
 8004d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d4e:	4a09      	ldr	r2, [pc, #36]	; (8004d74 <HAL_RCC_ClockConfig+0x1c4>)
 8004d50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d52:	4b09      	ldr	r3, [pc, #36]	; (8004d78 <HAL_RCC_ClockConfig+0x1c8>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7fd f95a 	bl	8002010 <HAL_InitTick>

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	40023c00 	.word	0x40023c00
 8004d6c:	40023800 	.word	0x40023800
 8004d70:	080090dc 	.word	0x080090dc
 8004d74:	20000014 	.word	0x20000014
 8004d78:	20000018 	.word	0x20000018

08004d7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d80:	b094      	sub	sp, #80	; 0x50
 8004d82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d84:	2300      	movs	r3, #0
 8004d86:	647b      	str	r3, [r7, #68]	; 0x44
 8004d88:	2300      	movs	r3, #0
 8004d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004d90:	2300      	movs	r3, #0
 8004d92:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d94:	4b79      	ldr	r3, [pc, #484]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f003 030c 	and.w	r3, r3, #12
 8004d9c:	2b08      	cmp	r3, #8
 8004d9e:	d00d      	beq.n	8004dbc <HAL_RCC_GetSysClockFreq+0x40>
 8004da0:	2b08      	cmp	r3, #8
 8004da2:	f200 80e1 	bhi.w	8004f68 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d002      	beq.n	8004db0 <HAL_RCC_GetSysClockFreq+0x34>
 8004daa:	2b04      	cmp	r3, #4
 8004dac:	d003      	beq.n	8004db6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004dae:	e0db      	b.n	8004f68 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004db0:	4b73      	ldr	r3, [pc, #460]	; (8004f80 <HAL_RCC_GetSysClockFreq+0x204>)
 8004db2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004db4:	e0db      	b.n	8004f6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004db6:	4b73      	ldr	r3, [pc, #460]	; (8004f84 <HAL_RCC_GetSysClockFreq+0x208>)
 8004db8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dba:	e0d8      	b.n	8004f6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004dbc:	4b6f      	ldr	r3, [pc, #444]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dc4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004dc6:	4b6d      	ldr	r3, [pc, #436]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d063      	beq.n	8004e9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dd2:	4b6a      	ldr	r3, [pc, #424]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	099b      	lsrs	r3, r3, #6
 8004dd8:	2200      	movs	r2, #0
 8004dda:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ddc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004de4:	633b      	str	r3, [r7, #48]	; 0x30
 8004de6:	2300      	movs	r3, #0
 8004de8:	637b      	str	r3, [r7, #52]	; 0x34
 8004dea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004dee:	4622      	mov	r2, r4
 8004df0:	462b      	mov	r3, r5
 8004df2:	f04f 0000 	mov.w	r0, #0
 8004df6:	f04f 0100 	mov.w	r1, #0
 8004dfa:	0159      	lsls	r1, r3, #5
 8004dfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e00:	0150      	lsls	r0, r2, #5
 8004e02:	4602      	mov	r2, r0
 8004e04:	460b      	mov	r3, r1
 8004e06:	4621      	mov	r1, r4
 8004e08:	1a51      	subs	r1, r2, r1
 8004e0a:	6139      	str	r1, [r7, #16]
 8004e0c:	4629      	mov	r1, r5
 8004e0e:	eb63 0301 	sbc.w	r3, r3, r1
 8004e12:	617b      	str	r3, [r7, #20]
 8004e14:	f04f 0200 	mov.w	r2, #0
 8004e18:	f04f 0300 	mov.w	r3, #0
 8004e1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e20:	4659      	mov	r1, fp
 8004e22:	018b      	lsls	r3, r1, #6
 8004e24:	4651      	mov	r1, sl
 8004e26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e2a:	4651      	mov	r1, sl
 8004e2c:	018a      	lsls	r2, r1, #6
 8004e2e:	4651      	mov	r1, sl
 8004e30:	ebb2 0801 	subs.w	r8, r2, r1
 8004e34:	4659      	mov	r1, fp
 8004e36:	eb63 0901 	sbc.w	r9, r3, r1
 8004e3a:	f04f 0200 	mov.w	r2, #0
 8004e3e:	f04f 0300 	mov.w	r3, #0
 8004e42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e4e:	4690      	mov	r8, r2
 8004e50:	4699      	mov	r9, r3
 8004e52:	4623      	mov	r3, r4
 8004e54:	eb18 0303 	adds.w	r3, r8, r3
 8004e58:	60bb      	str	r3, [r7, #8]
 8004e5a:	462b      	mov	r3, r5
 8004e5c:	eb49 0303 	adc.w	r3, r9, r3
 8004e60:	60fb      	str	r3, [r7, #12]
 8004e62:	f04f 0200 	mov.w	r2, #0
 8004e66:	f04f 0300 	mov.w	r3, #0
 8004e6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e6e:	4629      	mov	r1, r5
 8004e70:	024b      	lsls	r3, r1, #9
 8004e72:	4621      	mov	r1, r4
 8004e74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e78:	4621      	mov	r1, r4
 8004e7a:	024a      	lsls	r2, r1, #9
 8004e7c:	4610      	mov	r0, r2
 8004e7e:	4619      	mov	r1, r3
 8004e80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e82:	2200      	movs	r2, #0
 8004e84:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e8c:	f7fb fcae 	bl	80007ec <__aeabi_uldivmod>
 8004e90:	4602      	mov	r2, r0
 8004e92:	460b      	mov	r3, r1
 8004e94:	4613      	mov	r3, r2
 8004e96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e98:	e058      	b.n	8004f4c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e9a:	4b38      	ldr	r3, [pc, #224]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	099b      	lsrs	r3, r3, #6
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	4611      	mov	r1, r2
 8004ea6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004eaa:	623b      	str	r3, [r7, #32]
 8004eac:	2300      	movs	r3, #0
 8004eae:	627b      	str	r3, [r7, #36]	; 0x24
 8004eb0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004eb4:	4642      	mov	r2, r8
 8004eb6:	464b      	mov	r3, r9
 8004eb8:	f04f 0000 	mov.w	r0, #0
 8004ebc:	f04f 0100 	mov.w	r1, #0
 8004ec0:	0159      	lsls	r1, r3, #5
 8004ec2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ec6:	0150      	lsls	r0, r2, #5
 8004ec8:	4602      	mov	r2, r0
 8004eca:	460b      	mov	r3, r1
 8004ecc:	4641      	mov	r1, r8
 8004ece:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ed2:	4649      	mov	r1, r9
 8004ed4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ed8:	f04f 0200 	mov.w	r2, #0
 8004edc:	f04f 0300 	mov.w	r3, #0
 8004ee0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ee4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ee8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004eec:	ebb2 040a 	subs.w	r4, r2, sl
 8004ef0:	eb63 050b 	sbc.w	r5, r3, fp
 8004ef4:	f04f 0200 	mov.w	r2, #0
 8004ef8:	f04f 0300 	mov.w	r3, #0
 8004efc:	00eb      	lsls	r3, r5, #3
 8004efe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f02:	00e2      	lsls	r2, r4, #3
 8004f04:	4614      	mov	r4, r2
 8004f06:	461d      	mov	r5, r3
 8004f08:	4643      	mov	r3, r8
 8004f0a:	18e3      	adds	r3, r4, r3
 8004f0c:	603b      	str	r3, [r7, #0]
 8004f0e:	464b      	mov	r3, r9
 8004f10:	eb45 0303 	adc.w	r3, r5, r3
 8004f14:	607b      	str	r3, [r7, #4]
 8004f16:	f04f 0200 	mov.w	r2, #0
 8004f1a:	f04f 0300 	mov.w	r3, #0
 8004f1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f22:	4629      	mov	r1, r5
 8004f24:	028b      	lsls	r3, r1, #10
 8004f26:	4621      	mov	r1, r4
 8004f28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f2c:	4621      	mov	r1, r4
 8004f2e:	028a      	lsls	r2, r1, #10
 8004f30:	4610      	mov	r0, r2
 8004f32:	4619      	mov	r1, r3
 8004f34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f36:	2200      	movs	r2, #0
 8004f38:	61bb      	str	r3, [r7, #24]
 8004f3a:	61fa      	str	r2, [r7, #28]
 8004f3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f40:	f7fb fc54 	bl	80007ec <__aeabi_uldivmod>
 8004f44:	4602      	mov	r2, r0
 8004f46:	460b      	mov	r3, r1
 8004f48:	4613      	mov	r3, r2
 8004f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f4c:	4b0b      	ldr	r3, [pc, #44]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	0c1b      	lsrs	r3, r3, #16
 8004f52:	f003 0303 	and.w	r3, r3, #3
 8004f56:	3301      	adds	r3, #1
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004f5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f66:	e002      	b.n	8004f6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f68:	4b05      	ldr	r3, [pc, #20]	; (8004f80 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f6a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3750      	adds	r7, #80	; 0x50
 8004f74:	46bd      	mov	sp, r7
 8004f76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f7a:	bf00      	nop
 8004f7c:	40023800 	.word	0x40023800
 8004f80:	00f42400 	.word	0x00f42400
 8004f84:	007a1200 	.word	0x007a1200

08004f88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f8c:	4b03      	ldr	r3, [pc, #12]	; (8004f9c <HAL_RCC_GetHCLKFreq+0x14>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	20000014 	.word	0x20000014

08004fa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004fa4:	f7ff fff0 	bl	8004f88 <HAL_RCC_GetHCLKFreq>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	4b05      	ldr	r3, [pc, #20]	; (8004fc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	0a9b      	lsrs	r3, r3, #10
 8004fb0:	f003 0307 	and.w	r3, r3, #7
 8004fb4:	4903      	ldr	r1, [pc, #12]	; (8004fc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fb6:	5ccb      	ldrb	r3, [r1, r3]
 8004fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	40023800 	.word	0x40023800
 8004fc4:	080090ec 	.word	0x080090ec

08004fc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004fcc:	f7ff ffdc 	bl	8004f88 <HAL_RCC_GetHCLKFreq>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	4b05      	ldr	r3, [pc, #20]	; (8004fe8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	0b5b      	lsrs	r3, r3, #13
 8004fd8:	f003 0307 	and.w	r3, r3, #7
 8004fdc:	4903      	ldr	r1, [pc, #12]	; (8004fec <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fde:	5ccb      	ldrb	r3, [r1, r3]
 8004fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	40023800 	.word	0x40023800
 8004fec:	080090ec 	.word	0x080090ec

08004ff0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	220f      	movs	r2, #15
 8004ffe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005000:	4b12      	ldr	r3, [pc, #72]	; (800504c <HAL_RCC_GetClockConfig+0x5c>)
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f003 0203 	and.w	r2, r3, #3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800500c:	4b0f      	ldr	r3, [pc, #60]	; (800504c <HAL_RCC_GetClockConfig+0x5c>)
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005018:	4b0c      	ldr	r3, [pc, #48]	; (800504c <HAL_RCC_GetClockConfig+0x5c>)
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005024:	4b09      	ldr	r3, [pc, #36]	; (800504c <HAL_RCC_GetClockConfig+0x5c>)
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	08db      	lsrs	r3, r3, #3
 800502a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005032:	4b07      	ldr	r3, [pc, #28]	; (8005050 <HAL_RCC_GetClockConfig+0x60>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0207 	and.w	r2, r3, #7
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	601a      	str	r2, [r3, #0]
}
 800503e:	bf00      	nop
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	40023800 	.word	0x40023800
 8005050:	40023c00 	.word	0x40023c00

08005054 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e07b      	b.n	800515e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506a:	2b00      	cmp	r3, #0
 800506c:	d108      	bne.n	8005080 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005076:	d009      	beq.n	800508c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	61da      	str	r2, [r3, #28]
 800507e:	e005      	b.n	800508c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d106      	bne.n	80050ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f7fc ff1e 	bl	8001ee8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2202      	movs	r2, #2
 80050b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80050d4:	431a      	orrs	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050de:	431a      	orrs	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	f003 0302 	and.w	r3, r3, #2
 80050e8:	431a      	orrs	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	431a      	orrs	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050fc:	431a      	orrs	r2, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	69db      	ldr	r3, [r3, #28]
 8005102:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005106:	431a      	orrs	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a1b      	ldr	r3, [r3, #32]
 800510c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005110:	ea42 0103 	orr.w	r1, r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005118:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	430a      	orrs	r2, r1
 8005122:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	0c1b      	lsrs	r3, r3, #16
 800512a:	f003 0104 	and.w	r1, r3, #4
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005132:	f003 0210 	and.w	r2, r3, #16
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	430a      	orrs	r2, r1
 800513c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	69da      	ldr	r2, [r3, #28]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800514c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3708      	adds	r7, #8
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b082      	sub	sp, #8
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d101      	bne.n	8005178 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e041      	b.n	80051fc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800517e:	b2db      	uxtb	r3, r3
 8005180:	2b00      	cmp	r3, #0
 8005182:	d106      	bne.n	8005192 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f7fd fc67 	bl	8002a60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2202      	movs	r2, #2
 8005196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	3304      	adds	r3, #4
 80051a2:	4619      	mov	r1, r3
 80051a4:	4610      	mov	r0, r2
 80051a6:	f000 fdc3 	bl	8005d30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2201      	movs	r2, #1
 80051ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2201      	movs	r2, #1
 80051be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3708      	adds	r7, #8
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b01      	cmp	r3, #1
 8005216:	d001      	beq.n	800521c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e04e      	b.n	80052ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2202      	movs	r2, #2
 8005220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68da      	ldr	r2, [r3, #12]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f042 0201 	orr.w	r2, r2, #1
 8005232:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a23      	ldr	r2, [pc, #140]	; (80052c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d022      	beq.n	8005284 <HAL_TIM_Base_Start_IT+0x80>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005246:	d01d      	beq.n	8005284 <HAL_TIM_Base_Start_IT+0x80>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a1f      	ldr	r2, [pc, #124]	; (80052cc <HAL_TIM_Base_Start_IT+0xc8>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d018      	beq.n	8005284 <HAL_TIM_Base_Start_IT+0x80>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a1e      	ldr	r2, [pc, #120]	; (80052d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d013      	beq.n	8005284 <HAL_TIM_Base_Start_IT+0x80>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a1c      	ldr	r2, [pc, #112]	; (80052d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d00e      	beq.n	8005284 <HAL_TIM_Base_Start_IT+0x80>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a1b      	ldr	r2, [pc, #108]	; (80052d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d009      	beq.n	8005284 <HAL_TIM_Base_Start_IT+0x80>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a19      	ldr	r2, [pc, #100]	; (80052dc <HAL_TIM_Base_Start_IT+0xd8>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d004      	beq.n	8005284 <HAL_TIM_Base_Start_IT+0x80>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a18      	ldr	r2, [pc, #96]	; (80052e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d111      	bne.n	80052a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f003 0307 	and.w	r3, r3, #7
 800528e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2b06      	cmp	r3, #6
 8005294:	d010      	beq.n	80052b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f042 0201 	orr.w	r2, r2, #1
 80052a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a6:	e007      	b.n	80052b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f042 0201 	orr.w	r2, r2, #1
 80052b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3714      	adds	r7, #20
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	40010000 	.word	0x40010000
 80052cc:	40000400 	.word	0x40000400
 80052d0:	40000800 	.word	0x40000800
 80052d4:	40000c00 	.word	0x40000c00
 80052d8:	40010400 	.word	0x40010400
 80052dc:	40014000 	.word	0x40014000
 80052e0:	40001800 	.word	0x40001800

080052e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e041      	b.n	800537a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d106      	bne.n	8005310 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f839 	bl	8005382 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2202      	movs	r2, #2
 8005314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	3304      	adds	r3, #4
 8005320:	4619      	mov	r1, r3
 8005322:	4610      	mov	r0, r2
 8005324:	f000 fd04 	bl	8005d30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3708      	adds	r7, #8
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005382:	b480      	push	{r7}
 8005384:	b083      	sub	sp, #12
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800538a:	bf00      	nop
 800538c:	370c      	adds	r7, #12
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
	...

08005398 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d109      	bne.n	80053bc <HAL_TIM_PWM_Start+0x24>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	bf14      	ite	ne
 80053b4:	2301      	movne	r3, #1
 80053b6:	2300      	moveq	r3, #0
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	e022      	b.n	8005402 <HAL_TIM_PWM_Start+0x6a>
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	2b04      	cmp	r3, #4
 80053c0:	d109      	bne.n	80053d6 <HAL_TIM_PWM_Start+0x3e>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	bf14      	ite	ne
 80053ce:	2301      	movne	r3, #1
 80053d0:	2300      	moveq	r3, #0
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	e015      	b.n	8005402 <HAL_TIM_PWM_Start+0x6a>
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	2b08      	cmp	r3, #8
 80053da:	d109      	bne.n	80053f0 <HAL_TIM_PWM_Start+0x58>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	bf14      	ite	ne
 80053e8:	2301      	movne	r3, #1
 80053ea:	2300      	moveq	r3, #0
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	e008      	b.n	8005402 <HAL_TIM_PWM_Start+0x6a>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	bf14      	ite	ne
 80053fc:	2301      	movne	r3, #1
 80053fe:	2300      	moveq	r3, #0
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d001      	beq.n	800540a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e07c      	b.n	8005504 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d104      	bne.n	800541a <HAL_TIM_PWM_Start+0x82>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2202      	movs	r2, #2
 8005414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005418:	e013      	b.n	8005442 <HAL_TIM_PWM_Start+0xaa>
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	2b04      	cmp	r3, #4
 800541e:	d104      	bne.n	800542a <HAL_TIM_PWM_Start+0x92>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2202      	movs	r2, #2
 8005424:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005428:	e00b      	b.n	8005442 <HAL_TIM_PWM_Start+0xaa>
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	2b08      	cmp	r3, #8
 800542e:	d104      	bne.n	800543a <HAL_TIM_PWM_Start+0xa2>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2202      	movs	r2, #2
 8005434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005438:	e003      	b.n	8005442 <HAL_TIM_PWM_Start+0xaa>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2202      	movs	r2, #2
 800543e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2201      	movs	r2, #1
 8005448:	6839      	ldr	r1, [r7, #0]
 800544a:	4618      	mov	r0, r3
 800544c:	f000 ff5a 	bl	8006304 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a2d      	ldr	r2, [pc, #180]	; (800550c <HAL_TIM_PWM_Start+0x174>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d004      	beq.n	8005464 <HAL_TIM_PWM_Start+0xcc>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a2c      	ldr	r2, [pc, #176]	; (8005510 <HAL_TIM_PWM_Start+0x178>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d101      	bne.n	8005468 <HAL_TIM_PWM_Start+0xd0>
 8005464:	2301      	movs	r3, #1
 8005466:	e000      	b.n	800546a <HAL_TIM_PWM_Start+0xd2>
 8005468:	2300      	movs	r3, #0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d007      	beq.n	800547e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800547c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a22      	ldr	r2, [pc, #136]	; (800550c <HAL_TIM_PWM_Start+0x174>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d022      	beq.n	80054ce <HAL_TIM_PWM_Start+0x136>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005490:	d01d      	beq.n	80054ce <HAL_TIM_PWM_Start+0x136>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a1f      	ldr	r2, [pc, #124]	; (8005514 <HAL_TIM_PWM_Start+0x17c>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d018      	beq.n	80054ce <HAL_TIM_PWM_Start+0x136>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a1d      	ldr	r2, [pc, #116]	; (8005518 <HAL_TIM_PWM_Start+0x180>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d013      	beq.n	80054ce <HAL_TIM_PWM_Start+0x136>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a1c      	ldr	r2, [pc, #112]	; (800551c <HAL_TIM_PWM_Start+0x184>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d00e      	beq.n	80054ce <HAL_TIM_PWM_Start+0x136>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a16      	ldr	r2, [pc, #88]	; (8005510 <HAL_TIM_PWM_Start+0x178>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d009      	beq.n	80054ce <HAL_TIM_PWM_Start+0x136>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a18      	ldr	r2, [pc, #96]	; (8005520 <HAL_TIM_PWM_Start+0x188>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d004      	beq.n	80054ce <HAL_TIM_PWM_Start+0x136>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a16      	ldr	r2, [pc, #88]	; (8005524 <HAL_TIM_PWM_Start+0x18c>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d111      	bne.n	80054f2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f003 0307 	and.w	r3, r3, #7
 80054d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2b06      	cmp	r3, #6
 80054de:	d010      	beq.n	8005502 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f042 0201 	orr.w	r2, r2, #1
 80054ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054f0:	e007      	b.n	8005502 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f042 0201 	orr.w	r2, r2, #1
 8005500:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	40010000 	.word	0x40010000
 8005510:	40010400 	.word	0x40010400
 8005514:	40000400 	.word	0x40000400
 8005518:	40000800 	.word	0x40000800
 800551c:	40000c00 	.word	0x40000c00
 8005520:	40014000 	.word	0x40014000
 8005524:	40001800 	.word	0x40001800

08005528 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b086      	sub	sp, #24
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d101      	bne.n	800553c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e097      	b.n	800566c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005542:	b2db      	uxtb	r3, r3
 8005544:	2b00      	cmp	r3, #0
 8005546:	d106      	bne.n	8005556 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f7fd f927 	bl	80027a4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2202      	movs	r2, #2
 800555a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	6812      	ldr	r2, [r2, #0]
 8005568:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800556c:	f023 0307 	bic.w	r3, r3, #7
 8005570:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	3304      	adds	r3, #4
 800557a:	4619      	mov	r1, r3
 800557c:	4610      	mov	r0, r2
 800557e:	f000 fbd7 	bl	8005d30 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	6a1b      	ldr	r3, [r3, #32]
 8005598:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055aa:	f023 0303 	bic.w	r3, r3, #3
 80055ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	689a      	ldr	r2, [r3, #8]
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	021b      	lsls	r3, r3, #8
 80055ba:	4313      	orrs	r3, r2
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	4313      	orrs	r3, r2
 80055c0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80055c8:	f023 030c 	bic.w	r3, r3, #12
 80055cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	68da      	ldr	r2, [r3, #12]
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	69db      	ldr	r3, [r3, #28]
 80055e2:	021b      	lsls	r3, r3, #8
 80055e4:	4313      	orrs	r3, r2
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	011a      	lsls	r2, r3, #4
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	031b      	lsls	r3, r3, #12
 80055f8:	4313      	orrs	r3, r2
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005606:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800560e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	685a      	ldr	r2, [r3, #4]
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	011b      	lsls	r3, r3, #4
 800561a:	4313      	orrs	r3, r2
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	4313      	orrs	r3, r2
 8005620:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2201      	movs	r2, #1
 800563e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	4618      	mov	r0, r3
 800566e:	3718      	adds	r7, #24
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005684:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800568c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005694:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800569c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d110      	bne.n	80056c6 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056a4:	7bfb      	ldrb	r3, [r7, #15]
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d102      	bne.n	80056b0 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80056aa:	7b7b      	ldrb	r3, [r7, #13]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d001      	beq.n	80056b4 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e089      	b.n	80057c8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2202      	movs	r2, #2
 80056b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2202      	movs	r2, #2
 80056c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056c4:	e031      	b.n	800572a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	2b04      	cmp	r3, #4
 80056ca:	d110      	bne.n	80056ee <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80056cc:	7bbb      	ldrb	r3, [r7, #14]
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d102      	bne.n	80056d8 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80056d2:	7b3b      	ldrb	r3, [r7, #12]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d001      	beq.n	80056dc <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e075      	b.n	80057c8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2202      	movs	r2, #2
 80056e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2202      	movs	r2, #2
 80056e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056ec:	e01d      	b.n	800572a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056ee:	7bfb      	ldrb	r3, [r7, #15]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d108      	bne.n	8005706 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80056f4:	7bbb      	ldrb	r3, [r7, #14]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d105      	bne.n	8005706 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056fa:	7b7b      	ldrb	r3, [r7, #13]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d102      	bne.n	8005706 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005700:	7b3b      	ldrb	r3, [r7, #12]
 8005702:	2b01      	cmp	r3, #1
 8005704:	d001      	beq.n	800570a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e05e      	b.n	80057c8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2202      	movs	r2, #2
 800570e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2202      	movs	r2, #2
 8005716:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2202      	movs	r2, #2
 800571e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2202      	movs	r2, #2
 8005726:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d003      	beq.n	8005738 <HAL_TIM_Encoder_Start_IT+0xc4>
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	2b04      	cmp	r3, #4
 8005734:	d010      	beq.n	8005758 <HAL_TIM_Encoder_Start_IT+0xe4>
 8005736:	e01f      	b.n	8005778 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2201      	movs	r2, #1
 800573e:	2100      	movs	r1, #0
 8005740:	4618      	mov	r0, r3
 8005742:	f000 fddf 	bl	8006304 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68da      	ldr	r2, [r3, #12]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f042 0202 	orr.w	r2, r2, #2
 8005754:	60da      	str	r2, [r3, #12]
      break;
 8005756:	e02e      	b.n	80057b6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2201      	movs	r2, #1
 800575e:	2104      	movs	r1, #4
 8005760:	4618      	mov	r0, r3
 8005762:	f000 fdcf 	bl	8006304 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68da      	ldr	r2, [r3, #12]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f042 0204 	orr.w	r2, r2, #4
 8005774:	60da      	str	r2, [r3, #12]
      break;
 8005776:	e01e      	b.n	80057b6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2201      	movs	r2, #1
 800577e:	2100      	movs	r1, #0
 8005780:	4618      	mov	r0, r3
 8005782:	f000 fdbf 	bl	8006304 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2201      	movs	r2, #1
 800578c:	2104      	movs	r1, #4
 800578e:	4618      	mov	r0, r3
 8005790:	f000 fdb8 	bl	8006304 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68da      	ldr	r2, [r3, #12]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f042 0202 	orr.w	r2, r2, #2
 80057a2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68da      	ldr	r2, [r3, #12]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f042 0204 	orr.w	r2, r2, #4
 80057b2:	60da      	str	r2, [r3, #12]
      break;
 80057b4:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f042 0201 	orr.w	r2, r2, #1
 80057c4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b082      	sub	sp, #8
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	f003 0302 	and.w	r3, r3, #2
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d122      	bne.n	800582c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f003 0302 	and.w	r3, r3, #2
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d11b      	bne.n	800582c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f06f 0202 	mvn.w	r2, #2
 80057fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	f003 0303 	and.w	r3, r3, #3
 800580e:	2b00      	cmp	r3, #0
 8005810:	d003      	beq.n	800581a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f7fc f9e4 	bl	8001be0 <HAL_TIM_IC_CaptureCallback>
 8005818:	e005      	b.n	8005826 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 fa69 	bl	8005cf2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 fa70 	bl	8005d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	f003 0304 	and.w	r3, r3, #4
 8005836:	2b04      	cmp	r3, #4
 8005838:	d122      	bne.n	8005880 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	f003 0304 	and.w	r3, r3, #4
 8005844:	2b04      	cmp	r3, #4
 8005846:	d11b      	bne.n	8005880 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f06f 0204 	mvn.w	r2, #4
 8005850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2202      	movs	r2, #2
 8005856:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005862:	2b00      	cmp	r3, #0
 8005864:	d003      	beq.n	800586e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f7fc f9ba 	bl	8001be0 <HAL_TIM_IC_CaptureCallback>
 800586c:	e005      	b.n	800587a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 fa3f 	bl	8005cf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 fa46 	bl	8005d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	f003 0308 	and.w	r3, r3, #8
 800588a:	2b08      	cmp	r3, #8
 800588c:	d122      	bne.n	80058d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	f003 0308 	and.w	r3, r3, #8
 8005898:	2b08      	cmp	r3, #8
 800589a:	d11b      	bne.n	80058d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f06f 0208 	mvn.w	r2, #8
 80058a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2204      	movs	r2, #4
 80058aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	f003 0303 	and.w	r3, r3, #3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d003      	beq.n	80058c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f7fc f990 	bl	8001be0 <HAL_TIM_IC_CaptureCallback>
 80058c0:	e005      	b.n	80058ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 fa15 	bl	8005cf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 fa1c 	bl	8005d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	f003 0310 	and.w	r3, r3, #16
 80058de:	2b10      	cmp	r3, #16
 80058e0:	d122      	bne.n	8005928 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	f003 0310 	and.w	r3, r3, #16
 80058ec:	2b10      	cmp	r3, #16
 80058ee:	d11b      	bne.n	8005928 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f06f 0210 	mvn.w	r2, #16
 80058f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2208      	movs	r2, #8
 80058fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	69db      	ldr	r3, [r3, #28]
 8005906:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800590a:	2b00      	cmp	r3, #0
 800590c:	d003      	beq.n	8005916 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7fc f966 	bl	8001be0 <HAL_TIM_IC_CaptureCallback>
 8005914:	e005      	b.n	8005922 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f9eb 	bl	8005cf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 f9f2 	bl	8005d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	f003 0301 	and.w	r3, r3, #1
 8005932:	2b01      	cmp	r3, #1
 8005934:	d10e      	bne.n	8005954 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	f003 0301 	and.w	r3, r3, #1
 8005940:	2b01      	cmp	r3, #1
 8005942:	d107      	bne.n	8005954 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f06f 0201 	mvn.w	r2, #1
 800594c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f7fc fa58 	bl	8001e04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800595e:	2b80      	cmp	r3, #128	; 0x80
 8005960:	d10e      	bne.n	8005980 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800596c:	2b80      	cmp	r3, #128	; 0x80
 800596e:	d107      	bne.n	8005980 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 fd6e 	bl	800645c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800598a:	2b40      	cmp	r3, #64	; 0x40
 800598c:	d10e      	bne.n	80059ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005998:	2b40      	cmp	r3, #64	; 0x40
 800599a:	d107      	bne.n	80059ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 f9b7 	bl	8005d1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	f003 0320 	and.w	r3, r3, #32
 80059b6:	2b20      	cmp	r3, #32
 80059b8:	d10e      	bne.n	80059d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	f003 0320 	and.w	r3, r3, #32
 80059c4:	2b20      	cmp	r3, #32
 80059c6:	d107      	bne.n	80059d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f06f 0220 	mvn.w	r2, #32
 80059d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 fd38 	bl	8006448 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059d8:	bf00      	nop
 80059da:	3708      	adds	r7, #8
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059ec:	2300      	movs	r3, #0
 80059ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d101      	bne.n	80059fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80059fa:	2302      	movs	r3, #2
 80059fc:	e0ae      	b.n	8005b5c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2b0c      	cmp	r3, #12
 8005a0a:	f200 809f 	bhi.w	8005b4c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005a0e:	a201      	add	r2, pc, #4	; (adr r2, 8005a14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a14:	08005a49 	.word	0x08005a49
 8005a18:	08005b4d 	.word	0x08005b4d
 8005a1c:	08005b4d 	.word	0x08005b4d
 8005a20:	08005b4d 	.word	0x08005b4d
 8005a24:	08005a89 	.word	0x08005a89
 8005a28:	08005b4d 	.word	0x08005b4d
 8005a2c:	08005b4d 	.word	0x08005b4d
 8005a30:	08005b4d 	.word	0x08005b4d
 8005a34:	08005acb 	.word	0x08005acb
 8005a38:	08005b4d 	.word	0x08005b4d
 8005a3c:	08005b4d 	.word	0x08005b4d
 8005a40:	08005b4d 	.word	0x08005b4d
 8005a44:	08005b0b 	.word	0x08005b0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68b9      	ldr	r1, [r7, #8]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f000 fa0e 	bl	8005e70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	699a      	ldr	r2, [r3, #24]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f042 0208 	orr.w	r2, r2, #8
 8005a62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	699a      	ldr	r2, [r3, #24]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f022 0204 	bic.w	r2, r2, #4
 8005a72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6999      	ldr	r1, [r3, #24]
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	691a      	ldr	r2, [r3, #16]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	430a      	orrs	r2, r1
 8005a84:	619a      	str	r2, [r3, #24]
      break;
 8005a86:	e064      	b.n	8005b52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68b9      	ldr	r1, [r7, #8]
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f000 fa5e 	bl	8005f50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	699a      	ldr	r2, [r3, #24]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005aa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	699a      	ldr	r2, [r3, #24]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ab2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	6999      	ldr	r1, [r3, #24]
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	021a      	lsls	r2, r3, #8
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	619a      	str	r2, [r3, #24]
      break;
 8005ac8:	e043      	b.n	8005b52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68b9      	ldr	r1, [r7, #8]
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f000 fab3 	bl	800603c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	69da      	ldr	r2, [r3, #28]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f042 0208 	orr.w	r2, r2, #8
 8005ae4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	69da      	ldr	r2, [r3, #28]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f022 0204 	bic.w	r2, r2, #4
 8005af4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	69d9      	ldr	r1, [r3, #28]
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	691a      	ldr	r2, [r3, #16]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	430a      	orrs	r2, r1
 8005b06:	61da      	str	r2, [r3, #28]
      break;
 8005b08:	e023      	b.n	8005b52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68b9      	ldr	r1, [r7, #8]
 8005b10:	4618      	mov	r0, r3
 8005b12:	f000 fb07 	bl	8006124 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	69da      	ldr	r2, [r3, #28]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	69da      	ldr	r2, [r3, #28]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	69d9      	ldr	r1, [r3, #28]
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	021a      	lsls	r2, r3, #8
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	430a      	orrs	r2, r1
 8005b48:	61da      	str	r2, [r3, #28]
      break;
 8005b4a:	e002      	b.n	8005b52 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3718      	adds	r7, #24
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d101      	bne.n	8005b80 <HAL_TIM_ConfigClockSource+0x1c>
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	e0b4      	b.n	8005cea <HAL_TIM_ConfigClockSource+0x186>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2202      	movs	r2, #2
 8005b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ba6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68ba      	ldr	r2, [r7, #8]
 8005bae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bb8:	d03e      	beq.n	8005c38 <HAL_TIM_ConfigClockSource+0xd4>
 8005bba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bbe:	f200 8087 	bhi.w	8005cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8005bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bc6:	f000 8086 	beq.w	8005cd6 <HAL_TIM_ConfigClockSource+0x172>
 8005bca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bce:	d87f      	bhi.n	8005cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8005bd0:	2b70      	cmp	r3, #112	; 0x70
 8005bd2:	d01a      	beq.n	8005c0a <HAL_TIM_ConfigClockSource+0xa6>
 8005bd4:	2b70      	cmp	r3, #112	; 0x70
 8005bd6:	d87b      	bhi.n	8005cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8005bd8:	2b60      	cmp	r3, #96	; 0x60
 8005bda:	d050      	beq.n	8005c7e <HAL_TIM_ConfigClockSource+0x11a>
 8005bdc:	2b60      	cmp	r3, #96	; 0x60
 8005bde:	d877      	bhi.n	8005cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8005be0:	2b50      	cmp	r3, #80	; 0x50
 8005be2:	d03c      	beq.n	8005c5e <HAL_TIM_ConfigClockSource+0xfa>
 8005be4:	2b50      	cmp	r3, #80	; 0x50
 8005be6:	d873      	bhi.n	8005cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8005be8:	2b40      	cmp	r3, #64	; 0x40
 8005bea:	d058      	beq.n	8005c9e <HAL_TIM_ConfigClockSource+0x13a>
 8005bec:	2b40      	cmp	r3, #64	; 0x40
 8005bee:	d86f      	bhi.n	8005cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8005bf0:	2b30      	cmp	r3, #48	; 0x30
 8005bf2:	d064      	beq.n	8005cbe <HAL_TIM_ConfigClockSource+0x15a>
 8005bf4:	2b30      	cmp	r3, #48	; 0x30
 8005bf6:	d86b      	bhi.n	8005cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8005bf8:	2b20      	cmp	r3, #32
 8005bfa:	d060      	beq.n	8005cbe <HAL_TIM_ConfigClockSource+0x15a>
 8005bfc:	2b20      	cmp	r3, #32
 8005bfe:	d867      	bhi.n	8005cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d05c      	beq.n	8005cbe <HAL_TIM_ConfigClockSource+0x15a>
 8005c04:	2b10      	cmp	r3, #16
 8005c06:	d05a      	beq.n	8005cbe <HAL_TIM_ConfigClockSource+0x15a>
 8005c08:	e062      	b.n	8005cd0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6818      	ldr	r0, [r3, #0]
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	6899      	ldr	r1, [r3, #8]
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	f000 fb53 	bl	80062c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68ba      	ldr	r2, [r7, #8]
 8005c34:	609a      	str	r2, [r3, #8]
      break;
 8005c36:	e04f      	b.n	8005cd8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6818      	ldr	r0, [r3, #0]
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	6899      	ldr	r1, [r3, #8]
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	685a      	ldr	r2, [r3, #4]
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	f000 fb3c 	bl	80062c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	689a      	ldr	r2, [r3, #8]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c5a:	609a      	str	r2, [r3, #8]
      break;
 8005c5c:	e03c      	b.n	8005cd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6818      	ldr	r0, [r3, #0]
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	6859      	ldr	r1, [r3, #4]
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	f000 fab0 	bl	80061d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2150      	movs	r1, #80	; 0x50
 8005c76:	4618      	mov	r0, r3
 8005c78:	f000 fb09 	bl	800628e <TIM_ITRx_SetConfig>
      break;
 8005c7c:	e02c      	b.n	8005cd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6818      	ldr	r0, [r3, #0]
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	6859      	ldr	r1, [r3, #4]
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	f000 facf 	bl	800622e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2160      	movs	r1, #96	; 0x60
 8005c96:	4618      	mov	r0, r3
 8005c98:	f000 faf9 	bl	800628e <TIM_ITRx_SetConfig>
      break;
 8005c9c:	e01c      	b.n	8005cd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6818      	ldr	r0, [r3, #0]
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	6859      	ldr	r1, [r3, #4]
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	461a      	mov	r2, r3
 8005cac:	f000 fa90 	bl	80061d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2140      	movs	r1, #64	; 0x40
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f000 fae9 	bl	800628e <TIM_ITRx_SetConfig>
      break;
 8005cbc:	e00c      	b.n	8005cd8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	4610      	mov	r0, r2
 8005cca:	f000 fae0 	bl	800628e <TIM_ITRx_SetConfig>
      break;
 8005cce:	e003      	b.n	8005cd8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8005cd4:	e000      	b.n	8005cd8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005cd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	b083      	sub	sp, #12
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cfa:	bf00      	nop
 8005cfc:	370c      	adds	r7, #12
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr

08005d06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d06:	b480      	push	{r7}
 8005d08:	b083      	sub	sp, #12
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d0e:	bf00      	nop
 8005d10:	370c      	adds	r7, #12
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr

08005d1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d1a:	b480      	push	{r7}
 8005d1c:	b083      	sub	sp, #12
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d22:	bf00      	nop
 8005d24:	370c      	adds	r7, #12
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
	...

08005d30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a40      	ldr	r2, [pc, #256]	; (8005e44 <TIM_Base_SetConfig+0x114>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d013      	beq.n	8005d70 <TIM_Base_SetConfig+0x40>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d4e:	d00f      	beq.n	8005d70 <TIM_Base_SetConfig+0x40>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a3d      	ldr	r2, [pc, #244]	; (8005e48 <TIM_Base_SetConfig+0x118>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d00b      	beq.n	8005d70 <TIM_Base_SetConfig+0x40>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a3c      	ldr	r2, [pc, #240]	; (8005e4c <TIM_Base_SetConfig+0x11c>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d007      	beq.n	8005d70 <TIM_Base_SetConfig+0x40>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a3b      	ldr	r2, [pc, #236]	; (8005e50 <TIM_Base_SetConfig+0x120>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d003      	beq.n	8005d70 <TIM_Base_SetConfig+0x40>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a3a      	ldr	r2, [pc, #232]	; (8005e54 <TIM_Base_SetConfig+0x124>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d108      	bne.n	8005d82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a2f      	ldr	r2, [pc, #188]	; (8005e44 <TIM_Base_SetConfig+0x114>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d02b      	beq.n	8005de2 <TIM_Base_SetConfig+0xb2>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d90:	d027      	beq.n	8005de2 <TIM_Base_SetConfig+0xb2>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a2c      	ldr	r2, [pc, #176]	; (8005e48 <TIM_Base_SetConfig+0x118>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d023      	beq.n	8005de2 <TIM_Base_SetConfig+0xb2>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a2b      	ldr	r2, [pc, #172]	; (8005e4c <TIM_Base_SetConfig+0x11c>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d01f      	beq.n	8005de2 <TIM_Base_SetConfig+0xb2>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a2a      	ldr	r2, [pc, #168]	; (8005e50 <TIM_Base_SetConfig+0x120>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d01b      	beq.n	8005de2 <TIM_Base_SetConfig+0xb2>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a29      	ldr	r2, [pc, #164]	; (8005e54 <TIM_Base_SetConfig+0x124>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d017      	beq.n	8005de2 <TIM_Base_SetConfig+0xb2>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a28      	ldr	r2, [pc, #160]	; (8005e58 <TIM_Base_SetConfig+0x128>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d013      	beq.n	8005de2 <TIM_Base_SetConfig+0xb2>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a27      	ldr	r2, [pc, #156]	; (8005e5c <TIM_Base_SetConfig+0x12c>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d00f      	beq.n	8005de2 <TIM_Base_SetConfig+0xb2>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a26      	ldr	r2, [pc, #152]	; (8005e60 <TIM_Base_SetConfig+0x130>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d00b      	beq.n	8005de2 <TIM_Base_SetConfig+0xb2>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a25      	ldr	r2, [pc, #148]	; (8005e64 <TIM_Base_SetConfig+0x134>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d007      	beq.n	8005de2 <TIM_Base_SetConfig+0xb2>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a24      	ldr	r2, [pc, #144]	; (8005e68 <TIM_Base_SetConfig+0x138>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d003      	beq.n	8005de2 <TIM_Base_SetConfig+0xb2>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a23      	ldr	r2, [pc, #140]	; (8005e6c <TIM_Base_SetConfig+0x13c>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d108      	bne.n	8005df4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005de8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	689a      	ldr	r2, [r3, #8]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a0a      	ldr	r2, [pc, #40]	; (8005e44 <TIM_Base_SetConfig+0x114>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d003      	beq.n	8005e28 <TIM_Base_SetConfig+0xf8>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a0c      	ldr	r2, [pc, #48]	; (8005e54 <TIM_Base_SetConfig+0x124>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d103      	bne.n	8005e30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	691a      	ldr	r2, [r3, #16]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	615a      	str	r2, [r3, #20]
}
 8005e36:	bf00      	nop
 8005e38:	3714      	adds	r7, #20
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	40010000 	.word	0x40010000
 8005e48:	40000400 	.word	0x40000400
 8005e4c:	40000800 	.word	0x40000800
 8005e50:	40000c00 	.word	0x40000c00
 8005e54:	40010400 	.word	0x40010400
 8005e58:	40014000 	.word	0x40014000
 8005e5c:	40014400 	.word	0x40014400
 8005e60:	40014800 	.word	0x40014800
 8005e64:	40001800 	.word	0x40001800
 8005e68:	40001c00 	.word	0x40001c00
 8005e6c:	40002000 	.word	0x40002000

08005e70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b087      	sub	sp, #28
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	f023 0201 	bic.w	r2, r3, #1
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	699b      	ldr	r3, [r3, #24]
 8005e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f023 0303 	bic.w	r3, r3, #3
 8005ea6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	f023 0302 	bic.w	r3, r3, #2
 8005eb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	697a      	ldr	r2, [r7, #20]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a20      	ldr	r2, [pc, #128]	; (8005f48 <TIM_OC1_SetConfig+0xd8>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d003      	beq.n	8005ed4 <TIM_OC1_SetConfig+0x64>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a1f      	ldr	r2, [pc, #124]	; (8005f4c <TIM_OC1_SetConfig+0xdc>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d10c      	bne.n	8005eee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	f023 0308 	bic.w	r3, r3, #8
 8005eda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	697a      	ldr	r2, [r7, #20]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	f023 0304 	bic.w	r3, r3, #4
 8005eec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a15      	ldr	r2, [pc, #84]	; (8005f48 <TIM_OC1_SetConfig+0xd8>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d003      	beq.n	8005efe <TIM_OC1_SetConfig+0x8e>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a14      	ldr	r2, [pc, #80]	; (8005f4c <TIM_OC1_SetConfig+0xdc>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d111      	bne.n	8005f22 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	693a      	ldr	r2, [r7, #16]
 8005f26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	697a      	ldr	r2, [r7, #20]
 8005f3a:	621a      	str	r2, [r3, #32]
}
 8005f3c:	bf00      	nop
 8005f3e:	371c      	adds	r7, #28
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr
 8005f48:	40010000 	.word	0x40010000
 8005f4c:	40010400 	.word	0x40010400

08005f50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b087      	sub	sp, #28
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a1b      	ldr	r3, [r3, #32]
 8005f5e:	f023 0210 	bic.w	r2, r3, #16
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a1b      	ldr	r3, [r3, #32]
 8005f6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	021b      	lsls	r3, r3, #8
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	f023 0320 	bic.w	r3, r3, #32
 8005f9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	011b      	lsls	r3, r3, #4
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a22      	ldr	r2, [pc, #136]	; (8006034 <TIM_OC2_SetConfig+0xe4>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d003      	beq.n	8005fb8 <TIM_OC2_SetConfig+0x68>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a21      	ldr	r2, [pc, #132]	; (8006038 <TIM_OC2_SetConfig+0xe8>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d10d      	bne.n	8005fd4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	011b      	lsls	r3, r3, #4
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fd2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a17      	ldr	r2, [pc, #92]	; (8006034 <TIM_OC2_SetConfig+0xe4>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d003      	beq.n	8005fe4 <TIM_OC2_SetConfig+0x94>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a16      	ldr	r2, [pc, #88]	; (8006038 <TIM_OC2_SetConfig+0xe8>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d113      	bne.n	800600c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ff2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	695b      	ldr	r3, [r3, #20]
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	699b      	ldr	r3, [r3, #24]
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	4313      	orrs	r3, r2
 800600a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	685a      	ldr	r2, [r3, #4]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	621a      	str	r2, [r3, #32]
}
 8006026:	bf00      	nop
 8006028:	371c      	adds	r7, #28
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	40010000 	.word	0x40010000
 8006038:	40010400 	.word	0x40010400

0800603c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800603c:	b480      	push	{r7}
 800603e:	b087      	sub	sp, #28
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a1b      	ldr	r3, [r3, #32]
 800604a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	69db      	ldr	r3, [r3, #28]
 8006062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800606a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f023 0303 	bic.w	r3, r3, #3
 8006072:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	4313      	orrs	r3, r2
 800607c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006084:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	021b      	lsls	r3, r3, #8
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	4313      	orrs	r3, r2
 8006090:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a21      	ldr	r2, [pc, #132]	; (800611c <TIM_OC3_SetConfig+0xe0>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d003      	beq.n	80060a2 <TIM_OC3_SetConfig+0x66>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a20      	ldr	r2, [pc, #128]	; (8006120 <TIM_OC3_SetConfig+0xe4>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d10d      	bne.n	80060be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	021b      	lsls	r3, r3, #8
 80060b0:	697a      	ldr	r2, [r7, #20]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a16      	ldr	r2, [pc, #88]	; (800611c <TIM_OC3_SetConfig+0xe0>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d003      	beq.n	80060ce <TIM_OC3_SetConfig+0x92>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a15      	ldr	r2, [pc, #84]	; (8006120 <TIM_OC3_SetConfig+0xe4>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d113      	bne.n	80060f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	011b      	lsls	r3, r3, #4
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	011b      	lsls	r3, r3, #4
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	693a      	ldr	r2, [r7, #16]
 80060fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	685a      	ldr	r2, [r3, #4]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	697a      	ldr	r2, [r7, #20]
 800610e:	621a      	str	r2, [r3, #32]
}
 8006110:	bf00      	nop
 8006112:	371c      	adds	r7, #28
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr
 800611c:	40010000 	.word	0x40010000
 8006120:	40010400 	.word	0x40010400

08006124 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006124:	b480      	push	{r7}
 8006126:	b087      	sub	sp, #28
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a1b      	ldr	r3, [r3, #32]
 8006132:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a1b      	ldr	r3, [r3, #32]
 800613e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	69db      	ldr	r3, [r3, #28]
 800614a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800615a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	021b      	lsls	r3, r3, #8
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	4313      	orrs	r3, r2
 8006166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800616e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	031b      	lsls	r3, r3, #12
 8006176:	693a      	ldr	r2, [r7, #16]
 8006178:	4313      	orrs	r3, r2
 800617a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a12      	ldr	r2, [pc, #72]	; (80061c8 <TIM_OC4_SetConfig+0xa4>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d003      	beq.n	800618c <TIM_OC4_SetConfig+0x68>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a11      	ldr	r2, [pc, #68]	; (80061cc <TIM_OC4_SetConfig+0xa8>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d109      	bne.n	80061a0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006192:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	695b      	ldr	r3, [r3, #20]
 8006198:	019b      	lsls	r3, r3, #6
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	4313      	orrs	r3, r2
 800619e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	697a      	ldr	r2, [r7, #20]
 80061a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	685a      	ldr	r2, [r3, #4]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	693a      	ldr	r2, [r7, #16]
 80061b8:	621a      	str	r2, [r3, #32]
}
 80061ba:	bf00      	nop
 80061bc:	371c      	adds	r7, #28
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	40010000 	.word	0x40010000
 80061cc:	40010400 	.word	0x40010400

080061d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b087      	sub	sp, #28
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6a1b      	ldr	r3, [r3, #32]
 80061e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6a1b      	ldr	r3, [r3, #32]
 80061e6:	f023 0201 	bic.w	r2, r3, #1
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	011b      	lsls	r3, r3, #4
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	4313      	orrs	r3, r2
 8006204:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	f023 030a 	bic.w	r3, r3, #10
 800620c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800620e:	697a      	ldr	r2, [r7, #20]
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	4313      	orrs	r3, r2
 8006214:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	621a      	str	r2, [r3, #32]
}
 8006222:	bf00      	nop
 8006224:	371c      	adds	r7, #28
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr

0800622e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800622e:	b480      	push	{r7}
 8006230:	b087      	sub	sp, #28
 8006232:	af00      	add	r7, sp, #0
 8006234:	60f8      	str	r0, [r7, #12]
 8006236:	60b9      	str	r1, [r7, #8]
 8006238:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	f023 0210 	bic.w	r2, r3, #16
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6a1b      	ldr	r3, [r3, #32]
 8006250:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006258:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	031b      	lsls	r3, r3, #12
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	4313      	orrs	r3, r2
 8006262:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800626a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	011b      	lsls	r3, r3, #4
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	4313      	orrs	r3, r2
 8006274:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	697a      	ldr	r2, [r7, #20]
 800627a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	621a      	str	r2, [r3, #32]
}
 8006282:	bf00      	nop
 8006284:	371c      	adds	r7, #28
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr

0800628e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800628e:	b480      	push	{r7}
 8006290:	b085      	sub	sp, #20
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
 8006296:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	f043 0307 	orr.w	r3, r3, #7
 80062b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	609a      	str	r2, [r3, #8]
}
 80062b8:	bf00      	nop
 80062ba:	3714      	adds	r7, #20
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b087      	sub	sp, #28
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
 80062d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	021a      	lsls	r2, r3, #8
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	431a      	orrs	r2, r3
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	697a      	ldr	r2, [r7, #20]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	697a      	ldr	r2, [r7, #20]
 80062f6:	609a      	str	r2, [r3, #8]
}
 80062f8:	bf00      	nop
 80062fa:	371c      	adds	r7, #28
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006304:	b480      	push	{r7}
 8006306:	b087      	sub	sp, #28
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	f003 031f 	and.w	r3, r3, #31
 8006316:	2201      	movs	r2, #1
 8006318:	fa02 f303 	lsl.w	r3, r2, r3
 800631c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6a1a      	ldr	r2, [r3, #32]
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	43db      	mvns	r3, r3
 8006326:	401a      	ands	r2, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6a1a      	ldr	r2, [r3, #32]
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	f003 031f 	and.w	r3, r3, #31
 8006336:	6879      	ldr	r1, [r7, #4]
 8006338:	fa01 f303 	lsl.w	r3, r1, r3
 800633c:	431a      	orrs	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	621a      	str	r2, [r3, #32]
}
 8006342:	bf00      	nop
 8006344:	371c      	adds	r7, #28
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
	...

08006350 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006360:	2b01      	cmp	r3, #1
 8006362:	d101      	bne.n	8006368 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006364:	2302      	movs	r3, #2
 8006366:	e05a      	b.n	800641e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2202      	movs	r2, #2
 8006374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800638e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	4313      	orrs	r3, r2
 8006398:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a21      	ldr	r2, [pc, #132]	; (800642c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d022      	beq.n	80063f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063b4:	d01d      	beq.n	80063f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a1d      	ldr	r2, [pc, #116]	; (8006430 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d018      	beq.n	80063f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a1b      	ldr	r2, [pc, #108]	; (8006434 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d013      	beq.n	80063f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a1a      	ldr	r2, [pc, #104]	; (8006438 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d00e      	beq.n	80063f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a18      	ldr	r2, [pc, #96]	; (800643c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d009      	beq.n	80063f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a17      	ldr	r2, [pc, #92]	; (8006440 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d004      	beq.n	80063f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a15      	ldr	r2, [pc, #84]	; (8006444 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d10c      	bne.n	800640c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	68ba      	ldr	r2, [r7, #8]
 8006400:	4313      	orrs	r3, r2
 8006402:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68ba      	ldr	r2, [r7, #8]
 800640a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3714      	adds	r7, #20
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	40010000 	.word	0x40010000
 8006430:	40000400 	.word	0x40000400
 8006434:	40000800 	.word	0x40000800
 8006438:	40000c00 	.word	0x40000c00
 800643c:	40010400 	.word	0x40010400
 8006440:	40014000 	.word	0x40014000
 8006444:	40001800 	.word	0x40001800

08006448 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006450:	bf00      	nop
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006464:	bf00      	nop
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d101      	bne.n	8006482 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e03f      	b.n	8006502 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006488:	b2db      	uxtb	r3, r3
 800648a:	2b00      	cmp	r3, #0
 800648c:	d106      	bne.n	800649c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f7fc fc88 	bl	8002dac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2224      	movs	r2, #36	; 0x24
 80064a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68da      	ldr	r2, [r3, #12]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 fa9b 	bl	80069f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	691a      	ldr	r2, [r3, #16]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	695a      	ldr	r2, [r3, #20]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68da      	ldr	r2, [r3, #12]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2220      	movs	r2, #32
 80064f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2220      	movs	r2, #32
 80064fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	3708      	adds	r7, #8
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}

0800650a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800650a:	b580      	push	{r7, lr}
 800650c:	b084      	sub	sp, #16
 800650e:	af00      	add	r7, sp, #0
 8006510:	60f8      	str	r0, [r7, #12]
 8006512:	60b9      	str	r1, [r7, #8]
 8006514:	4613      	mov	r3, r2
 8006516:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b20      	cmp	r3, #32
 8006522:	d11d      	bne.n	8006560 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d002      	beq.n	8006530 <HAL_UART_Receive_DMA+0x26>
 800652a:	88fb      	ldrh	r3, [r7, #6]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d101      	bne.n	8006534 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e016      	b.n	8006562 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800653a:	2b01      	cmp	r3, #1
 800653c:	d101      	bne.n	8006542 <HAL_UART_Receive_DMA+0x38>
 800653e:	2302      	movs	r3, #2
 8006540:	e00f      	b.n	8006562 <HAL_UART_Receive_DMA+0x58>
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2201      	movs	r2, #1
 8006546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006550:	88fb      	ldrh	r3, [r7, #6]
 8006552:	461a      	mov	r2, r3
 8006554:	68b9      	ldr	r1, [r7, #8]
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	f000 f920 	bl	800679c <UART_Start_Receive_DMA>
 800655c:	4603      	mov	r3, r0
 800655e:	e000      	b.n	8006562 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006560:	2302      	movs	r3, #2
  }
}
 8006562:	4618      	mov	r0, r3
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}

0800656a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800656a:	b480      	push	{r7}
 800656c:	b083      	sub	sp, #12
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006572:	bf00      	nop
 8006574:	370c      	adds	r7, #12
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr

0800657e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800657e:	b480      	push	{r7}
 8006580:	b083      	sub	sp, #12
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006586:	bf00      	nop
 8006588:	370c      	adds	r7, #12
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr

08006592 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006592:	b480      	push	{r7}
 8006594:	b083      	sub	sp, #12
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
 800659a:	460b      	mov	r3, r1
 800659c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800659e:	bf00      	nop
 80065a0:	370c      	adds	r7, #12
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr

080065aa <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80065aa:	b580      	push	{r7, lr}
 80065ac:	b09c      	sub	sp, #112	; 0x70
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d172      	bne.n	80066ac <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80065c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065c8:	2200      	movs	r2, #0
 80065ca:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	330c      	adds	r3, #12
 80065d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065d6:	e853 3f00 	ldrex	r3, [r3]
 80065da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80065dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80065e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	330c      	adds	r3, #12
 80065ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80065ec:	65ba      	str	r2, [r7, #88]	; 0x58
 80065ee:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80065f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80065f4:	e841 2300 	strex	r3, r2, [r1]
 80065f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80065fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d1e5      	bne.n	80065cc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	3314      	adds	r3, #20
 8006606:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800660a:	e853 3f00 	ldrex	r3, [r3]
 800660e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006612:	f023 0301 	bic.w	r3, r3, #1
 8006616:	667b      	str	r3, [r7, #100]	; 0x64
 8006618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	3314      	adds	r3, #20
 800661e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006620:	647a      	str	r2, [r7, #68]	; 0x44
 8006622:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006624:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006626:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006628:	e841 2300 	strex	r3, r2, [r1]
 800662c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800662e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006630:	2b00      	cmp	r3, #0
 8006632:	d1e5      	bne.n	8006600 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	3314      	adds	r3, #20
 800663a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663e:	e853 3f00 	ldrex	r3, [r3]
 8006642:	623b      	str	r3, [r7, #32]
   return(result);
 8006644:	6a3b      	ldr	r3, [r7, #32]
 8006646:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800664a:	663b      	str	r3, [r7, #96]	; 0x60
 800664c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	3314      	adds	r3, #20
 8006652:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006654:	633a      	str	r2, [r7, #48]	; 0x30
 8006656:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006658:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800665a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800665c:	e841 2300 	strex	r3, r2, [r1]
 8006660:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006664:	2b00      	cmp	r3, #0
 8006666:	d1e5      	bne.n	8006634 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800666a:	2220      	movs	r2, #32
 800666c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006674:	2b01      	cmp	r3, #1
 8006676:	d119      	bne.n	80066ac <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006678:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	330c      	adds	r3, #12
 800667e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	e853 3f00 	ldrex	r3, [r3]
 8006686:	60fb      	str	r3, [r7, #12]
   return(result);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f023 0310 	bic.w	r3, r3, #16
 800668e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	330c      	adds	r3, #12
 8006696:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006698:	61fa      	str	r2, [r7, #28]
 800669a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669c:	69b9      	ldr	r1, [r7, #24]
 800669e:	69fa      	ldr	r2, [r7, #28]
 80066a0:	e841 2300 	strex	r3, r2, [r1]
 80066a4:	617b      	str	r3, [r7, #20]
   return(result);
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1e5      	bne.n	8006678 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d106      	bne.n	80066c2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80066b8:	4619      	mov	r1, r3
 80066ba:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80066bc:	f7ff ff69 	bl	8006592 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80066c0:	e002      	b.n	80066c8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80066c2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80066c4:	f7fb fb94 	bl	8001df0 <HAL_UART_RxCpltCallback>
}
 80066c8:	bf00      	nop
 80066ca:	3770      	adds	r7, #112	; 0x70
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066dc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d108      	bne.n	80066f8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80066ea:	085b      	lsrs	r3, r3, #1
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	4619      	mov	r1, r3
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f7ff ff4e 	bl	8006592 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80066f6:	e002      	b.n	80066fe <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80066f8:	68f8      	ldr	r0, [r7, #12]
 80066fa:	f7ff ff36 	bl	800656a <HAL_UART_RxHalfCpltCallback>
}
 80066fe:	bf00      	nop
 8006700:	3710      	adds	r7, #16
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}

08006706 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006706:	b580      	push	{r7, lr}
 8006708:	b084      	sub	sp, #16
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800670e:	2300      	movs	r3, #0
 8006710:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006716:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	695b      	ldr	r3, [r3, #20]
 800671e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006722:	2b80      	cmp	r3, #128	; 0x80
 8006724:	bf0c      	ite	eq
 8006726:	2301      	moveq	r3, #1
 8006728:	2300      	movne	r3, #0
 800672a:	b2db      	uxtb	r3, r3
 800672c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006734:	b2db      	uxtb	r3, r3
 8006736:	2b21      	cmp	r3, #33	; 0x21
 8006738:	d108      	bne.n	800674c <UART_DMAError+0x46>
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d005      	beq.n	800674c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	2200      	movs	r2, #0
 8006744:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006746:	68b8      	ldr	r0, [r7, #8]
 8006748:	f000 f8c6 	bl	80068d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	695b      	ldr	r3, [r3, #20]
 8006752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006756:	2b40      	cmp	r3, #64	; 0x40
 8006758:	bf0c      	ite	eq
 800675a:	2301      	moveq	r3, #1
 800675c:	2300      	movne	r3, #0
 800675e:	b2db      	uxtb	r3, r3
 8006760:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006768:	b2db      	uxtb	r3, r3
 800676a:	2b22      	cmp	r3, #34	; 0x22
 800676c:	d108      	bne.n	8006780 <UART_DMAError+0x7a>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d005      	beq.n	8006780 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	2200      	movs	r2, #0
 8006778:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800677a:	68b8      	ldr	r0, [r7, #8]
 800677c:	f000 f8d4 	bl	8006928 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006784:	f043 0210 	orr.w	r2, r3, #16
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800678c:	68b8      	ldr	r0, [r7, #8]
 800678e:	f7ff fef6 	bl	800657e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006792:	bf00      	nop
 8006794:	3710      	adds	r7, #16
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
	...

0800679c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b098      	sub	sp, #96	; 0x60
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	4613      	mov	r3, r2
 80067a8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80067aa:	68ba      	ldr	r2, [r7, #8]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	88fa      	ldrh	r2, [r7, #6]
 80067b4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2200      	movs	r2, #0
 80067ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2222      	movs	r2, #34	; 0x22
 80067c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c8:	4a40      	ldr	r2, [pc, #256]	; (80068cc <UART_Start_Receive_DMA+0x130>)
 80067ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d0:	4a3f      	ldr	r2, [pc, #252]	; (80068d0 <UART_Start_Receive_DMA+0x134>)
 80067d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d8:	4a3e      	ldr	r2, [pc, #248]	; (80068d4 <UART_Start_Receive_DMA+0x138>)
 80067da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e0:	2200      	movs	r2, #0
 80067e2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80067e4:	f107 0308 	add.w	r3, r7, #8
 80067e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	3304      	adds	r3, #4
 80067f4:	4619      	mov	r1, r3
 80067f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	88fb      	ldrh	r3, [r7, #6]
 80067fc:	f7fd f9a4 	bl	8003b48 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006800:	2300      	movs	r3, #0
 8006802:	613b      	str	r3, [r7, #16]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	613b      	str	r3, [r7, #16]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	613b      	str	r3, [r7, #16]
 8006814:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d019      	beq.n	800685a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	330c      	adds	r3, #12
 800682c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006830:	e853 3f00 	ldrex	r3, [r3]
 8006834:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800683c:	65bb      	str	r3, [r7, #88]	; 0x58
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	330c      	adds	r3, #12
 8006844:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006846:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006848:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800684c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800684e:	e841 2300 	strex	r3, r2, [r1]
 8006852:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006856:	2b00      	cmp	r3, #0
 8006858:	d1e5      	bne.n	8006826 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	3314      	adds	r3, #20
 8006860:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006864:	e853 3f00 	ldrex	r3, [r3]
 8006868:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800686a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686c:	f043 0301 	orr.w	r3, r3, #1
 8006870:	657b      	str	r3, [r7, #84]	; 0x54
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	3314      	adds	r3, #20
 8006878:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800687a:	63ba      	str	r2, [r7, #56]	; 0x38
 800687c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006880:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006882:	e841 2300 	strex	r3, r2, [r1]
 8006886:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688a:	2b00      	cmp	r3, #0
 800688c:	d1e5      	bne.n	800685a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	3314      	adds	r3, #20
 8006894:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	e853 3f00 	ldrex	r3, [r3]
 800689c:	617b      	str	r3, [r7, #20]
   return(result);
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068a4:	653b      	str	r3, [r7, #80]	; 0x50
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	3314      	adds	r3, #20
 80068ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80068ae:	627a      	str	r2, [r7, #36]	; 0x24
 80068b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b2:	6a39      	ldr	r1, [r7, #32]
 80068b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068b6:	e841 2300 	strex	r3, r2, [r1]
 80068ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d1e5      	bne.n	800688e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80068c2:	2300      	movs	r3, #0
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3760      	adds	r7, #96	; 0x60
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	080065ab 	.word	0x080065ab
 80068d0:	080066d1 	.word	0x080066d1
 80068d4:	08006707 	.word	0x08006707

080068d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80068d8:	b480      	push	{r7}
 80068da:	b089      	sub	sp, #36	; 0x24
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	330c      	adds	r3, #12
 80068e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	e853 3f00 	ldrex	r3, [r3]
 80068ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80068f6:	61fb      	str	r3, [r7, #28]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	330c      	adds	r3, #12
 80068fe:	69fa      	ldr	r2, [r7, #28]
 8006900:	61ba      	str	r2, [r7, #24]
 8006902:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006904:	6979      	ldr	r1, [r7, #20]
 8006906:	69ba      	ldr	r2, [r7, #24]
 8006908:	e841 2300 	strex	r3, r2, [r1]
 800690c:	613b      	str	r3, [r7, #16]
   return(result);
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d1e5      	bne.n	80068e0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2220      	movs	r2, #32
 8006918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800691c:	bf00      	nop
 800691e:	3724      	adds	r7, #36	; 0x24
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006928:	b480      	push	{r7}
 800692a:	b095      	sub	sp, #84	; 0x54
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	330c      	adds	r3, #12
 8006936:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800693a:	e853 3f00 	ldrex	r3, [r3]
 800693e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006942:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006946:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	330c      	adds	r3, #12
 800694e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006950:	643a      	str	r2, [r7, #64]	; 0x40
 8006952:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006954:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006956:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006958:	e841 2300 	strex	r3, r2, [r1]
 800695c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800695e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1e5      	bne.n	8006930 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	3314      	adds	r3, #20
 800696a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696c:	6a3b      	ldr	r3, [r7, #32]
 800696e:	e853 3f00 	ldrex	r3, [r3]
 8006972:	61fb      	str	r3, [r7, #28]
   return(result);
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	f023 0301 	bic.w	r3, r3, #1
 800697a:	64bb      	str	r3, [r7, #72]	; 0x48
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	3314      	adds	r3, #20
 8006982:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006984:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006986:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006988:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800698a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800698c:	e841 2300 	strex	r3, r2, [r1]
 8006990:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006994:	2b00      	cmp	r3, #0
 8006996:	d1e5      	bne.n	8006964 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800699c:	2b01      	cmp	r3, #1
 800699e:	d119      	bne.n	80069d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	330c      	adds	r3, #12
 80069a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	e853 3f00 	ldrex	r3, [r3]
 80069ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	f023 0310 	bic.w	r3, r3, #16
 80069b6:	647b      	str	r3, [r7, #68]	; 0x44
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	330c      	adds	r3, #12
 80069be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069c0:	61ba      	str	r2, [r7, #24]
 80069c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c4:	6979      	ldr	r1, [r7, #20]
 80069c6:	69ba      	ldr	r2, [r7, #24]
 80069c8:	e841 2300 	strex	r3, r2, [r1]
 80069cc:	613b      	str	r3, [r7, #16]
   return(result);
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1e5      	bne.n	80069a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2220      	movs	r2, #32
 80069d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80069e2:	bf00      	nop
 80069e4:	3754      	adds	r7, #84	; 0x54
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
	...

080069f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069f4:	b0c0      	sub	sp, #256	; 0x100
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a0c:	68d9      	ldr	r1, [r3, #12]
 8006a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	ea40 0301 	orr.w	r3, r0, r1
 8006a18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a1e:	689a      	ldr	r2, [r3, #8]
 8006a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	431a      	orrs	r2, r3
 8006a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a2c:	695b      	ldr	r3, [r3, #20]
 8006a2e:	431a      	orrs	r2, r3
 8006a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a34:	69db      	ldr	r3, [r3, #28]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006a48:	f021 010c 	bic.w	r1, r1, #12
 8006a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a56:	430b      	orrs	r3, r1
 8006a58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	695b      	ldr	r3, [r3, #20]
 8006a62:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a6a:	6999      	ldr	r1, [r3, #24]
 8006a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	ea40 0301 	orr.w	r3, r0, r1
 8006a76:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	4b8f      	ldr	r3, [pc, #572]	; (8006cbc <UART_SetConfig+0x2cc>)
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d005      	beq.n	8006a90 <UART_SetConfig+0xa0>
 8006a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	4b8d      	ldr	r3, [pc, #564]	; (8006cc0 <UART_SetConfig+0x2d0>)
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d104      	bne.n	8006a9a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a90:	f7fe fa9a 	bl	8004fc8 <HAL_RCC_GetPCLK2Freq>
 8006a94:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006a98:	e003      	b.n	8006aa2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a9a:	f7fe fa81 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 8006a9e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aa6:	69db      	ldr	r3, [r3, #28]
 8006aa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006aac:	f040 810c 	bne.w	8006cc8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ab0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006aba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006abe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006ac2:	4622      	mov	r2, r4
 8006ac4:	462b      	mov	r3, r5
 8006ac6:	1891      	adds	r1, r2, r2
 8006ac8:	65b9      	str	r1, [r7, #88]	; 0x58
 8006aca:	415b      	adcs	r3, r3
 8006acc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ace:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006ad2:	4621      	mov	r1, r4
 8006ad4:	eb12 0801 	adds.w	r8, r2, r1
 8006ad8:	4629      	mov	r1, r5
 8006ada:	eb43 0901 	adc.w	r9, r3, r1
 8006ade:	f04f 0200 	mov.w	r2, #0
 8006ae2:	f04f 0300 	mov.w	r3, #0
 8006ae6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006aea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006aee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006af2:	4690      	mov	r8, r2
 8006af4:	4699      	mov	r9, r3
 8006af6:	4623      	mov	r3, r4
 8006af8:	eb18 0303 	adds.w	r3, r8, r3
 8006afc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006b00:	462b      	mov	r3, r5
 8006b02:	eb49 0303 	adc.w	r3, r9, r3
 8006b06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006b16:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006b1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006b1e:	460b      	mov	r3, r1
 8006b20:	18db      	adds	r3, r3, r3
 8006b22:	653b      	str	r3, [r7, #80]	; 0x50
 8006b24:	4613      	mov	r3, r2
 8006b26:	eb42 0303 	adc.w	r3, r2, r3
 8006b2a:	657b      	str	r3, [r7, #84]	; 0x54
 8006b2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006b30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006b34:	f7f9 fe5a 	bl	80007ec <__aeabi_uldivmod>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	4b61      	ldr	r3, [pc, #388]	; (8006cc4 <UART_SetConfig+0x2d4>)
 8006b3e:	fba3 2302 	umull	r2, r3, r3, r2
 8006b42:	095b      	lsrs	r3, r3, #5
 8006b44:	011c      	lsls	r4, r3, #4
 8006b46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b50:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006b54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006b58:	4642      	mov	r2, r8
 8006b5a:	464b      	mov	r3, r9
 8006b5c:	1891      	adds	r1, r2, r2
 8006b5e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006b60:	415b      	adcs	r3, r3
 8006b62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006b68:	4641      	mov	r1, r8
 8006b6a:	eb12 0a01 	adds.w	sl, r2, r1
 8006b6e:	4649      	mov	r1, r9
 8006b70:	eb43 0b01 	adc.w	fp, r3, r1
 8006b74:	f04f 0200 	mov.w	r2, #0
 8006b78:	f04f 0300 	mov.w	r3, #0
 8006b7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b88:	4692      	mov	sl, r2
 8006b8a:	469b      	mov	fp, r3
 8006b8c:	4643      	mov	r3, r8
 8006b8e:	eb1a 0303 	adds.w	r3, sl, r3
 8006b92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b96:	464b      	mov	r3, r9
 8006b98:	eb4b 0303 	adc.w	r3, fp, r3
 8006b9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006bac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006bb0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	18db      	adds	r3, r3, r3
 8006bb8:	643b      	str	r3, [r7, #64]	; 0x40
 8006bba:	4613      	mov	r3, r2
 8006bbc:	eb42 0303 	adc.w	r3, r2, r3
 8006bc0:	647b      	str	r3, [r7, #68]	; 0x44
 8006bc2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006bc6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006bca:	f7f9 fe0f 	bl	80007ec <__aeabi_uldivmod>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	4611      	mov	r1, r2
 8006bd4:	4b3b      	ldr	r3, [pc, #236]	; (8006cc4 <UART_SetConfig+0x2d4>)
 8006bd6:	fba3 2301 	umull	r2, r3, r3, r1
 8006bda:	095b      	lsrs	r3, r3, #5
 8006bdc:	2264      	movs	r2, #100	; 0x64
 8006bde:	fb02 f303 	mul.w	r3, r2, r3
 8006be2:	1acb      	subs	r3, r1, r3
 8006be4:	00db      	lsls	r3, r3, #3
 8006be6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006bea:	4b36      	ldr	r3, [pc, #216]	; (8006cc4 <UART_SetConfig+0x2d4>)
 8006bec:	fba3 2302 	umull	r2, r3, r3, r2
 8006bf0:	095b      	lsrs	r3, r3, #5
 8006bf2:	005b      	lsls	r3, r3, #1
 8006bf4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006bf8:	441c      	add	r4, r3
 8006bfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c04:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006c08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006c0c:	4642      	mov	r2, r8
 8006c0e:	464b      	mov	r3, r9
 8006c10:	1891      	adds	r1, r2, r2
 8006c12:	63b9      	str	r1, [r7, #56]	; 0x38
 8006c14:	415b      	adcs	r3, r3
 8006c16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006c1c:	4641      	mov	r1, r8
 8006c1e:	1851      	adds	r1, r2, r1
 8006c20:	6339      	str	r1, [r7, #48]	; 0x30
 8006c22:	4649      	mov	r1, r9
 8006c24:	414b      	adcs	r3, r1
 8006c26:	637b      	str	r3, [r7, #52]	; 0x34
 8006c28:	f04f 0200 	mov.w	r2, #0
 8006c2c:	f04f 0300 	mov.w	r3, #0
 8006c30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006c34:	4659      	mov	r1, fp
 8006c36:	00cb      	lsls	r3, r1, #3
 8006c38:	4651      	mov	r1, sl
 8006c3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c3e:	4651      	mov	r1, sl
 8006c40:	00ca      	lsls	r2, r1, #3
 8006c42:	4610      	mov	r0, r2
 8006c44:	4619      	mov	r1, r3
 8006c46:	4603      	mov	r3, r0
 8006c48:	4642      	mov	r2, r8
 8006c4a:	189b      	adds	r3, r3, r2
 8006c4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c50:	464b      	mov	r3, r9
 8006c52:	460a      	mov	r2, r1
 8006c54:	eb42 0303 	adc.w	r3, r2, r3
 8006c58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006c68:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006c6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006c70:	460b      	mov	r3, r1
 8006c72:	18db      	adds	r3, r3, r3
 8006c74:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c76:	4613      	mov	r3, r2
 8006c78:	eb42 0303 	adc.w	r3, r2, r3
 8006c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006c86:	f7f9 fdb1 	bl	80007ec <__aeabi_uldivmod>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	4b0d      	ldr	r3, [pc, #52]	; (8006cc4 <UART_SetConfig+0x2d4>)
 8006c90:	fba3 1302 	umull	r1, r3, r3, r2
 8006c94:	095b      	lsrs	r3, r3, #5
 8006c96:	2164      	movs	r1, #100	; 0x64
 8006c98:	fb01 f303 	mul.w	r3, r1, r3
 8006c9c:	1ad3      	subs	r3, r2, r3
 8006c9e:	00db      	lsls	r3, r3, #3
 8006ca0:	3332      	adds	r3, #50	; 0x32
 8006ca2:	4a08      	ldr	r2, [pc, #32]	; (8006cc4 <UART_SetConfig+0x2d4>)
 8006ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ca8:	095b      	lsrs	r3, r3, #5
 8006caa:	f003 0207 	and.w	r2, r3, #7
 8006cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4422      	add	r2, r4
 8006cb6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006cb8:	e105      	b.n	8006ec6 <UART_SetConfig+0x4d6>
 8006cba:	bf00      	nop
 8006cbc:	40011000 	.word	0x40011000
 8006cc0:	40011400 	.word	0x40011400
 8006cc4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006cc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006cd2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006cd6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006cda:	4642      	mov	r2, r8
 8006cdc:	464b      	mov	r3, r9
 8006cde:	1891      	adds	r1, r2, r2
 8006ce0:	6239      	str	r1, [r7, #32]
 8006ce2:	415b      	adcs	r3, r3
 8006ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ce6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006cea:	4641      	mov	r1, r8
 8006cec:	1854      	adds	r4, r2, r1
 8006cee:	4649      	mov	r1, r9
 8006cf0:	eb43 0501 	adc.w	r5, r3, r1
 8006cf4:	f04f 0200 	mov.w	r2, #0
 8006cf8:	f04f 0300 	mov.w	r3, #0
 8006cfc:	00eb      	lsls	r3, r5, #3
 8006cfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d02:	00e2      	lsls	r2, r4, #3
 8006d04:	4614      	mov	r4, r2
 8006d06:	461d      	mov	r5, r3
 8006d08:	4643      	mov	r3, r8
 8006d0a:	18e3      	adds	r3, r4, r3
 8006d0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006d10:	464b      	mov	r3, r9
 8006d12:	eb45 0303 	adc.w	r3, r5, r3
 8006d16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006d26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006d2a:	f04f 0200 	mov.w	r2, #0
 8006d2e:	f04f 0300 	mov.w	r3, #0
 8006d32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006d36:	4629      	mov	r1, r5
 8006d38:	008b      	lsls	r3, r1, #2
 8006d3a:	4621      	mov	r1, r4
 8006d3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d40:	4621      	mov	r1, r4
 8006d42:	008a      	lsls	r2, r1, #2
 8006d44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006d48:	f7f9 fd50 	bl	80007ec <__aeabi_uldivmod>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	460b      	mov	r3, r1
 8006d50:	4b60      	ldr	r3, [pc, #384]	; (8006ed4 <UART_SetConfig+0x4e4>)
 8006d52:	fba3 2302 	umull	r2, r3, r3, r2
 8006d56:	095b      	lsrs	r3, r3, #5
 8006d58:	011c      	lsls	r4, r3, #4
 8006d5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006d64:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006d68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006d6c:	4642      	mov	r2, r8
 8006d6e:	464b      	mov	r3, r9
 8006d70:	1891      	adds	r1, r2, r2
 8006d72:	61b9      	str	r1, [r7, #24]
 8006d74:	415b      	adcs	r3, r3
 8006d76:	61fb      	str	r3, [r7, #28]
 8006d78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d7c:	4641      	mov	r1, r8
 8006d7e:	1851      	adds	r1, r2, r1
 8006d80:	6139      	str	r1, [r7, #16]
 8006d82:	4649      	mov	r1, r9
 8006d84:	414b      	adcs	r3, r1
 8006d86:	617b      	str	r3, [r7, #20]
 8006d88:	f04f 0200 	mov.w	r2, #0
 8006d8c:	f04f 0300 	mov.w	r3, #0
 8006d90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d94:	4659      	mov	r1, fp
 8006d96:	00cb      	lsls	r3, r1, #3
 8006d98:	4651      	mov	r1, sl
 8006d9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d9e:	4651      	mov	r1, sl
 8006da0:	00ca      	lsls	r2, r1, #3
 8006da2:	4610      	mov	r0, r2
 8006da4:	4619      	mov	r1, r3
 8006da6:	4603      	mov	r3, r0
 8006da8:	4642      	mov	r2, r8
 8006daa:	189b      	adds	r3, r3, r2
 8006dac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006db0:	464b      	mov	r3, r9
 8006db2:	460a      	mov	r2, r1
 8006db4:	eb42 0303 	adc.w	r3, r2, r3
 8006db8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	67bb      	str	r3, [r7, #120]	; 0x78
 8006dc6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006dc8:	f04f 0200 	mov.w	r2, #0
 8006dcc:	f04f 0300 	mov.w	r3, #0
 8006dd0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006dd4:	4649      	mov	r1, r9
 8006dd6:	008b      	lsls	r3, r1, #2
 8006dd8:	4641      	mov	r1, r8
 8006dda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006dde:	4641      	mov	r1, r8
 8006de0:	008a      	lsls	r2, r1, #2
 8006de2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006de6:	f7f9 fd01 	bl	80007ec <__aeabi_uldivmod>
 8006dea:	4602      	mov	r2, r0
 8006dec:	460b      	mov	r3, r1
 8006dee:	4b39      	ldr	r3, [pc, #228]	; (8006ed4 <UART_SetConfig+0x4e4>)
 8006df0:	fba3 1302 	umull	r1, r3, r3, r2
 8006df4:	095b      	lsrs	r3, r3, #5
 8006df6:	2164      	movs	r1, #100	; 0x64
 8006df8:	fb01 f303 	mul.w	r3, r1, r3
 8006dfc:	1ad3      	subs	r3, r2, r3
 8006dfe:	011b      	lsls	r3, r3, #4
 8006e00:	3332      	adds	r3, #50	; 0x32
 8006e02:	4a34      	ldr	r2, [pc, #208]	; (8006ed4 <UART_SetConfig+0x4e4>)
 8006e04:	fba2 2303 	umull	r2, r3, r2, r3
 8006e08:	095b      	lsrs	r3, r3, #5
 8006e0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e0e:	441c      	add	r4, r3
 8006e10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e14:	2200      	movs	r2, #0
 8006e16:	673b      	str	r3, [r7, #112]	; 0x70
 8006e18:	677a      	str	r2, [r7, #116]	; 0x74
 8006e1a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006e1e:	4642      	mov	r2, r8
 8006e20:	464b      	mov	r3, r9
 8006e22:	1891      	adds	r1, r2, r2
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	415b      	adcs	r3, r3
 8006e28:	60fb      	str	r3, [r7, #12]
 8006e2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e2e:	4641      	mov	r1, r8
 8006e30:	1851      	adds	r1, r2, r1
 8006e32:	6039      	str	r1, [r7, #0]
 8006e34:	4649      	mov	r1, r9
 8006e36:	414b      	adcs	r3, r1
 8006e38:	607b      	str	r3, [r7, #4]
 8006e3a:	f04f 0200 	mov.w	r2, #0
 8006e3e:	f04f 0300 	mov.w	r3, #0
 8006e42:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006e46:	4659      	mov	r1, fp
 8006e48:	00cb      	lsls	r3, r1, #3
 8006e4a:	4651      	mov	r1, sl
 8006e4c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e50:	4651      	mov	r1, sl
 8006e52:	00ca      	lsls	r2, r1, #3
 8006e54:	4610      	mov	r0, r2
 8006e56:	4619      	mov	r1, r3
 8006e58:	4603      	mov	r3, r0
 8006e5a:	4642      	mov	r2, r8
 8006e5c:	189b      	adds	r3, r3, r2
 8006e5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e60:	464b      	mov	r3, r9
 8006e62:	460a      	mov	r2, r1
 8006e64:	eb42 0303 	adc.w	r3, r2, r3
 8006e68:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	663b      	str	r3, [r7, #96]	; 0x60
 8006e74:	667a      	str	r2, [r7, #100]	; 0x64
 8006e76:	f04f 0200 	mov.w	r2, #0
 8006e7a:	f04f 0300 	mov.w	r3, #0
 8006e7e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006e82:	4649      	mov	r1, r9
 8006e84:	008b      	lsls	r3, r1, #2
 8006e86:	4641      	mov	r1, r8
 8006e88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e8c:	4641      	mov	r1, r8
 8006e8e:	008a      	lsls	r2, r1, #2
 8006e90:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006e94:	f7f9 fcaa 	bl	80007ec <__aeabi_uldivmod>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	4b0d      	ldr	r3, [pc, #52]	; (8006ed4 <UART_SetConfig+0x4e4>)
 8006e9e:	fba3 1302 	umull	r1, r3, r3, r2
 8006ea2:	095b      	lsrs	r3, r3, #5
 8006ea4:	2164      	movs	r1, #100	; 0x64
 8006ea6:	fb01 f303 	mul.w	r3, r1, r3
 8006eaa:	1ad3      	subs	r3, r2, r3
 8006eac:	011b      	lsls	r3, r3, #4
 8006eae:	3332      	adds	r3, #50	; 0x32
 8006eb0:	4a08      	ldr	r2, [pc, #32]	; (8006ed4 <UART_SetConfig+0x4e4>)
 8006eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb6:	095b      	lsrs	r3, r3, #5
 8006eb8:	f003 020f 	and.w	r2, r3, #15
 8006ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4422      	add	r2, r4
 8006ec4:	609a      	str	r2, [r3, #8]
}
 8006ec6:	bf00      	nop
 8006ec8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ed2:	bf00      	nop
 8006ed4:	51eb851f 	.word	0x51eb851f

08006ed8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	4603      	mov	r3, r0
 8006ee0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006ee6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006eea:	2b84      	cmp	r3, #132	; 0x84
 8006eec:	d005      	beq.n	8006efa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006eee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	3303      	adds	r3, #3
 8006ef8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006efa:	68fb      	ldr	r3, [r7, #12]
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3714      	adds	r7, #20
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006f0c:	f000 fe66 	bl	8007bdc <vTaskStartScheduler>
  
  return osOK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006f16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f18:	b089      	sub	sp, #36	; 0x24
 8006f1a:	af04      	add	r7, sp, #16
 8006f1c:	6078      	str	r0, [r7, #4]
 8006f1e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	695b      	ldr	r3, [r3, #20]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d020      	beq.n	8006f6a <osThreadCreate+0x54>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	699b      	ldr	r3, [r3, #24]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d01c      	beq.n	8006f6a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	685c      	ldr	r4, [r3, #4]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681d      	ldr	r5, [r3, #0]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	691e      	ldr	r6, [r3, #16]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006f42:	4618      	mov	r0, r3
 8006f44:	f7ff ffc8 	bl	8006ed8 <makeFreeRtosPriority>
 8006f48:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	695b      	ldr	r3, [r3, #20]
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f52:	9202      	str	r2, [sp, #8]
 8006f54:	9301      	str	r3, [sp, #4]
 8006f56:	9100      	str	r1, [sp, #0]
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	4632      	mov	r2, r6
 8006f5c:	4629      	mov	r1, r5
 8006f5e:	4620      	mov	r0, r4
 8006f60:	f000 fc5e 	bl	8007820 <xTaskCreateStatic>
 8006f64:	4603      	mov	r3, r0
 8006f66:	60fb      	str	r3, [r7, #12]
 8006f68:	e01c      	b.n	8006fa4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	685c      	ldr	r4, [r3, #4]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f76:	b29e      	uxth	r6, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f7ff ffaa 	bl	8006ed8 <makeFreeRtosPriority>
 8006f84:	4602      	mov	r2, r0
 8006f86:	f107 030c 	add.w	r3, r7, #12
 8006f8a:	9301      	str	r3, [sp, #4]
 8006f8c:	9200      	str	r2, [sp, #0]
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	4632      	mov	r2, r6
 8006f92:	4629      	mov	r1, r5
 8006f94:	4620      	mov	r0, r4
 8006f96:	f000 fca0 	bl	80078da <xTaskCreate>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d001      	beq.n	8006fa4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	e000      	b.n	8006fa6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3714      	adds	r7, #20
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006fae <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b084      	sub	sp, #16
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d001      	beq.n	8006fc4 <osDelay+0x16>
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	e000      	b.n	8006fc6 <osDelay+0x18>
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f000 fdd4 	bl	8007b74 <vTaskDelay>
  
  return osOK;
 8006fcc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b082      	sub	sp, #8
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d007      	beq.n	8006ff6 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	4619      	mov	r1, r3
 8006fec:	2001      	movs	r0, #1
 8006fee:	f000 fa2a 	bl	8007446 <xQueueCreateMutexStatic>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	e003      	b.n	8006ffe <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8006ff6:	2001      	movs	r0, #1
 8006ff8:	f000 fa0d 	bl	8007416 <xQueueCreateMutex>
 8006ffc:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3708      	adds	r7, #8
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007006:	b480      	push	{r7}
 8007008:	b083      	sub	sp, #12
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f103 0208 	add.w	r2, r3, #8
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f04f 32ff 	mov.w	r2, #4294967295
 800701e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f103 0208 	add.w	r2, r3, #8
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f103 0208 	add.w	r2, r3, #8
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800703a:	bf00      	nop
 800703c:	370c      	adds	r7, #12
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr

08007046 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007046:	b480      	push	{r7}
 8007048:	b083      	sub	sp, #12
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007054:	bf00      	nop
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007060:	b480      	push	{r7}
 8007062:	b085      	sub	sp, #20
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	689a      	ldr	r2, [r3, #8]
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	683a      	ldr	r2, [r7, #0]
 8007084:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	683a      	ldr	r2, [r7, #0]
 800708a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	1c5a      	adds	r2, r3, #1
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	601a      	str	r2, [r3, #0]
}
 800709c:	bf00      	nop
 800709e:	3714      	adds	r7, #20
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80070a8:	b480      	push	{r7}
 80070aa:	b085      	sub	sp, #20
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070be:	d103      	bne.n	80070c8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	60fb      	str	r3, [r7, #12]
 80070c6:	e00c      	b.n	80070e2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	3308      	adds	r3, #8
 80070cc:	60fb      	str	r3, [r7, #12]
 80070ce:	e002      	b.n	80070d6 <vListInsert+0x2e>
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	60fb      	str	r3, [r7, #12]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	68ba      	ldr	r2, [r7, #8]
 80070de:	429a      	cmp	r2, r3
 80070e0:	d2f6      	bcs.n	80070d0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	685a      	ldr	r2, [r3, #4]
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	683a      	ldr	r2, [r7, #0]
 80070f0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	68fa      	ldr	r2, [r7, #12]
 80070f6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	683a      	ldr	r2, [r7, #0]
 80070fc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	1c5a      	adds	r2, r3, #1
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	601a      	str	r2, [r3, #0]
}
 800710e:	bf00      	nop
 8007110:	3714      	adds	r7, #20
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr

0800711a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800711a:	b480      	push	{r7}
 800711c:	b085      	sub	sp, #20
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	6892      	ldr	r2, [r2, #8]
 8007130:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	6852      	ldr	r2, [r2, #4]
 800713a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	429a      	cmp	r2, r3
 8007144:	d103      	bne.n	800714e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	689a      	ldr	r2, [r3, #8]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	1e5a      	subs	r2, r3, #1
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
}
 8007162:	4618      	mov	r0, r3
 8007164:	3714      	adds	r7, #20
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
	...

08007170 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d10a      	bne.n	800719a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007188:	f383 8811 	msr	BASEPRI, r3
 800718c:	f3bf 8f6f 	isb	sy
 8007190:	f3bf 8f4f 	dsb	sy
 8007194:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007196:	bf00      	nop
 8007198:	e7fe      	b.n	8007198 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800719a:	f001 fb6b 	bl	8008874 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071a6:	68f9      	ldr	r1, [r7, #12]
 80071a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80071aa:	fb01 f303 	mul.w	r3, r1, r3
 80071ae:	441a      	add	r2, r3
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2200      	movs	r2, #0
 80071b8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ca:	3b01      	subs	r3, #1
 80071cc:	68f9      	ldr	r1, [r7, #12]
 80071ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80071d0:	fb01 f303 	mul.w	r3, r1, r3
 80071d4:	441a      	add	r2, r3
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	22ff      	movs	r2, #255	; 0xff
 80071de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	22ff      	movs	r2, #255	; 0xff
 80071e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d114      	bne.n	800721a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d01a      	beq.n	800722e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	3310      	adds	r3, #16
 80071fc:	4618      	mov	r0, r3
 80071fe:	f000 ff3f 	bl	8008080 <xTaskRemoveFromEventList>
 8007202:	4603      	mov	r3, r0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d012      	beq.n	800722e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007208:	4b0c      	ldr	r3, [pc, #48]	; (800723c <xQueueGenericReset+0xcc>)
 800720a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800720e:	601a      	str	r2, [r3, #0]
 8007210:	f3bf 8f4f 	dsb	sy
 8007214:	f3bf 8f6f 	isb	sy
 8007218:	e009      	b.n	800722e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	3310      	adds	r3, #16
 800721e:	4618      	mov	r0, r3
 8007220:	f7ff fef1 	bl	8007006 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	3324      	adds	r3, #36	; 0x24
 8007228:	4618      	mov	r0, r3
 800722a:	f7ff feec 	bl	8007006 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800722e:	f001 fb51 	bl	80088d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007232:	2301      	movs	r3, #1
}
 8007234:	4618      	mov	r0, r3
 8007236:	3710      	adds	r7, #16
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}
 800723c:	e000ed04 	.word	0xe000ed04

08007240 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007240:	b580      	push	{r7, lr}
 8007242:	b08e      	sub	sp, #56	; 0x38
 8007244:	af02      	add	r7, sp, #8
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	607a      	str	r2, [r7, #4]
 800724c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d10a      	bne.n	800726a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007258:	f383 8811 	msr	BASEPRI, r3
 800725c:	f3bf 8f6f 	isb	sy
 8007260:	f3bf 8f4f 	dsb	sy
 8007264:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007266:	bf00      	nop
 8007268:	e7fe      	b.n	8007268 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d10a      	bne.n	8007286 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007274:	f383 8811 	msr	BASEPRI, r3
 8007278:	f3bf 8f6f 	isb	sy
 800727c:	f3bf 8f4f 	dsb	sy
 8007280:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007282:	bf00      	nop
 8007284:	e7fe      	b.n	8007284 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d002      	beq.n	8007292 <xQueueGenericCreateStatic+0x52>
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d001      	beq.n	8007296 <xQueueGenericCreateStatic+0x56>
 8007292:	2301      	movs	r3, #1
 8007294:	e000      	b.n	8007298 <xQueueGenericCreateStatic+0x58>
 8007296:	2300      	movs	r3, #0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d10a      	bne.n	80072b2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800729c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a0:	f383 8811 	msr	BASEPRI, r3
 80072a4:	f3bf 8f6f 	isb	sy
 80072a8:	f3bf 8f4f 	dsb	sy
 80072ac:	623b      	str	r3, [r7, #32]
}
 80072ae:	bf00      	nop
 80072b0:	e7fe      	b.n	80072b0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d102      	bne.n	80072be <xQueueGenericCreateStatic+0x7e>
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d101      	bne.n	80072c2 <xQueueGenericCreateStatic+0x82>
 80072be:	2301      	movs	r3, #1
 80072c0:	e000      	b.n	80072c4 <xQueueGenericCreateStatic+0x84>
 80072c2:	2300      	movs	r3, #0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d10a      	bne.n	80072de <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80072c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072cc:	f383 8811 	msr	BASEPRI, r3
 80072d0:	f3bf 8f6f 	isb	sy
 80072d4:	f3bf 8f4f 	dsb	sy
 80072d8:	61fb      	str	r3, [r7, #28]
}
 80072da:	bf00      	nop
 80072dc:	e7fe      	b.n	80072dc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80072de:	2348      	movs	r3, #72	; 0x48
 80072e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	2b48      	cmp	r3, #72	; 0x48
 80072e6:	d00a      	beq.n	80072fe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80072e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ec:	f383 8811 	msr	BASEPRI, r3
 80072f0:	f3bf 8f6f 	isb	sy
 80072f4:	f3bf 8f4f 	dsb	sy
 80072f8:	61bb      	str	r3, [r7, #24]
}
 80072fa:	bf00      	nop
 80072fc:	e7fe      	b.n	80072fc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80072fe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007306:	2b00      	cmp	r3, #0
 8007308:	d00d      	beq.n	8007326 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800730a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800730c:	2201      	movs	r2, #1
 800730e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007312:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007318:	9300      	str	r3, [sp, #0]
 800731a:	4613      	mov	r3, r2
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	68b9      	ldr	r1, [r7, #8]
 8007320:	68f8      	ldr	r0, [r7, #12]
 8007322:	f000 f83f 	bl	80073a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007328:	4618      	mov	r0, r3
 800732a:	3730      	adds	r7, #48	; 0x30
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007330:	b580      	push	{r7, lr}
 8007332:	b08a      	sub	sp, #40	; 0x28
 8007334:	af02      	add	r7, sp, #8
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	4613      	mov	r3, r2
 800733c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d10a      	bne.n	800735a <xQueueGenericCreate+0x2a>
	__asm volatile
 8007344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007348:	f383 8811 	msr	BASEPRI, r3
 800734c:	f3bf 8f6f 	isb	sy
 8007350:	f3bf 8f4f 	dsb	sy
 8007354:	613b      	str	r3, [r7, #16]
}
 8007356:	bf00      	nop
 8007358:	e7fe      	b.n	8007358 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	68ba      	ldr	r2, [r7, #8]
 800735e:	fb02 f303 	mul.w	r3, r2, r3
 8007362:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	3348      	adds	r3, #72	; 0x48
 8007368:	4618      	mov	r0, r3
 800736a:	f001 fb65 	bl	8008a38 <pvPortMalloc>
 800736e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d011      	beq.n	800739a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	3348      	adds	r3, #72	; 0x48
 800737e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	2200      	movs	r2, #0
 8007384:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007388:	79fa      	ldrb	r2, [r7, #7]
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	9300      	str	r3, [sp, #0]
 800738e:	4613      	mov	r3, r2
 8007390:	697a      	ldr	r2, [r7, #20]
 8007392:	68b9      	ldr	r1, [r7, #8]
 8007394:	68f8      	ldr	r0, [r7, #12]
 8007396:	f000 f805 	bl	80073a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800739a:	69bb      	ldr	r3, [r7, #24]
	}
 800739c:	4618      	mov	r0, r3
 800739e:	3720      	adds	r7, #32
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	607a      	str	r2, [r7, #4]
 80073b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d103      	bne.n	80073c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	69ba      	ldr	r2, [r7, #24]
 80073bc:	601a      	str	r2, [r3, #0]
 80073be:	e002      	b.n	80073c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80073cc:	69bb      	ldr	r3, [r7, #24]
 80073ce:	68ba      	ldr	r2, [r7, #8]
 80073d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80073d2:	2101      	movs	r1, #1
 80073d4:	69b8      	ldr	r0, [r7, #24]
 80073d6:	f7ff fecb 	bl	8007170 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80073da:	bf00      	nop
 80073dc:	3710      	adds	r7, #16
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b082      	sub	sp, #8
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d00e      	beq.n	800740e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007402:	2300      	movs	r3, #0
 8007404:	2200      	movs	r2, #0
 8007406:	2100      	movs	r1, #0
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 f837 	bl	800747c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800740e:	bf00      	nop
 8007410:	3708      	adds	r7, #8
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007416:	b580      	push	{r7, lr}
 8007418:	b086      	sub	sp, #24
 800741a:	af00      	add	r7, sp, #0
 800741c:	4603      	mov	r3, r0
 800741e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007420:	2301      	movs	r3, #1
 8007422:	617b      	str	r3, [r7, #20]
 8007424:	2300      	movs	r3, #0
 8007426:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007428:	79fb      	ldrb	r3, [r7, #7]
 800742a:	461a      	mov	r2, r3
 800742c:	6939      	ldr	r1, [r7, #16]
 800742e:	6978      	ldr	r0, [r7, #20]
 8007430:	f7ff ff7e 	bl	8007330 <xQueueGenericCreate>
 8007434:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007436:	68f8      	ldr	r0, [r7, #12]
 8007438:	f7ff ffd3 	bl	80073e2 <prvInitialiseMutex>

		return xNewQueue;
 800743c:	68fb      	ldr	r3, [r7, #12]
	}
 800743e:	4618      	mov	r0, r3
 8007440:	3718      	adds	r7, #24
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007446:	b580      	push	{r7, lr}
 8007448:	b088      	sub	sp, #32
 800744a:	af02      	add	r7, sp, #8
 800744c:	4603      	mov	r3, r0
 800744e:	6039      	str	r1, [r7, #0]
 8007450:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007452:	2301      	movs	r3, #1
 8007454:	617b      	str	r3, [r7, #20]
 8007456:	2300      	movs	r3, #0
 8007458:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800745a:	79fb      	ldrb	r3, [r7, #7]
 800745c:	9300      	str	r3, [sp, #0]
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	2200      	movs	r2, #0
 8007462:	6939      	ldr	r1, [r7, #16]
 8007464:	6978      	ldr	r0, [r7, #20]
 8007466:	f7ff feeb 	bl	8007240 <xQueueGenericCreateStatic>
 800746a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800746c:	68f8      	ldr	r0, [r7, #12]
 800746e:	f7ff ffb8 	bl	80073e2 <prvInitialiseMutex>

		return xNewQueue;
 8007472:	68fb      	ldr	r3, [r7, #12]
	}
 8007474:	4618      	mov	r0, r3
 8007476:	3718      	adds	r7, #24
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b08e      	sub	sp, #56	; 0x38
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	607a      	str	r2, [r7, #4]
 8007488:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800748a:	2300      	movs	r3, #0
 800748c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007494:	2b00      	cmp	r3, #0
 8007496:	d10a      	bne.n	80074ae <xQueueGenericSend+0x32>
	__asm volatile
 8007498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800749c:	f383 8811 	msr	BASEPRI, r3
 80074a0:	f3bf 8f6f 	isb	sy
 80074a4:	f3bf 8f4f 	dsb	sy
 80074a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80074aa:	bf00      	nop
 80074ac:	e7fe      	b.n	80074ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d103      	bne.n	80074bc <xQueueGenericSend+0x40>
 80074b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d101      	bne.n	80074c0 <xQueueGenericSend+0x44>
 80074bc:	2301      	movs	r3, #1
 80074be:	e000      	b.n	80074c2 <xQueueGenericSend+0x46>
 80074c0:	2300      	movs	r3, #0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d10a      	bne.n	80074dc <xQueueGenericSend+0x60>
	__asm volatile
 80074c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ca:	f383 8811 	msr	BASEPRI, r3
 80074ce:	f3bf 8f6f 	isb	sy
 80074d2:	f3bf 8f4f 	dsb	sy
 80074d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80074d8:	bf00      	nop
 80074da:	e7fe      	b.n	80074da <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	2b02      	cmp	r3, #2
 80074e0:	d103      	bne.n	80074ea <xQueueGenericSend+0x6e>
 80074e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d101      	bne.n	80074ee <xQueueGenericSend+0x72>
 80074ea:	2301      	movs	r3, #1
 80074ec:	e000      	b.n	80074f0 <xQueueGenericSend+0x74>
 80074ee:	2300      	movs	r3, #0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d10a      	bne.n	800750a <xQueueGenericSend+0x8e>
	__asm volatile
 80074f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f8:	f383 8811 	msr	BASEPRI, r3
 80074fc:	f3bf 8f6f 	isb	sy
 8007500:	f3bf 8f4f 	dsb	sy
 8007504:	623b      	str	r3, [r7, #32]
}
 8007506:	bf00      	nop
 8007508:	e7fe      	b.n	8007508 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800750a:	f000 ff79 	bl	8008400 <xTaskGetSchedulerState>
 800750e:	4603      	mov	r3, r0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d102      	bne.n	800751a <xQueueGenericSend+0x9e>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d101      	bne.n	800751e <xQueueGenericSend+0xa2>
 800751a:	2301      	movs	r3, #1
 800751c:	e000      	b.n	8007520 <xQueueGenericSend+0xa4>
 800751e:	2300      	movs	r3, #0
 8007520:	2b00      	cmp	r3, #0
 8007522:	d10a      	bne.n	800753a <xQueueGenericSend+0xbe>
	__asm volatile
 8007524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007528:	f383 8811 	msr	BASEPRI, r3
 800752c:	f3bf 8f6f 	isb	sy
 8007530:	f3bf 8f4f 	dsb	sy
 8007534:	61fb      	str	r3, [r7, #28]
}
 8007536:	bf00      	nop
 8007538:	e7fe      	b.n	8007538 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800753a:	f001 f99b 	bl	8008874 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800753e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007540:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007546:	429a      	cmp	r2, r3
 8007548:	d302      	bcc.n	8007550 <xQueueGenericSend+0xd4>
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	2b02      	cmp	r3, #2
 800754e:	d129      	bne.n	80075a4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007550:	683a      	ldr	r2, [r7, #0]
 8007552:	68b9      	ldr	r1, [r7, #8]
 8007554:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007556:	f000 f88f 	bl	8007678 <prvCopyDataToQueue>
 800755a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800755c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007560:	2b00      	cmp	r3, #0
 8007562:	d010      	beq.n	8007586 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007566:	3324      	adds	r3, #36	; 0x24
 8007568:	4618      	mov	r0, r3
 800756a:	f000 fd89 	bl	8008080 <xTaskRemoveFromEventList>
 800756e:	4603      	mov	r3, r0
 8007570:	2b00      	cmp	r3, #0
 8007572:	d013      	beq.n	800759c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007574:	4b3f      	ldr	r3, [pc, #252]	; (8007674 <xQueueGenericSend+0x1f8>)
 8007576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800757a:	601a      	str	r2, [r3, #0]
 800757c:	f3bf 8f4f 	dsb	sy
 8007580:	f3bf 8f6f 	isb	sy
 8007584:	e00a      	b.n	800759c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007588:	2b00      	cmp	r3, #0
 800758a:	d007      	beq.n	800759c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800758c:	4b39      	ldr	r3, [pc, #228]	; (8007674 <xQueueGenericSend+0x1f8>)
 800758e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007592:	601a      	str	r2, [r3, #0]
 8007594:	f3bf 8f4f 	dsb	sy
 8007598:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800759c:	f001 f99a 	bl	80088d4 <vPortExitCritical>
				return pdPASS;
 80075a0:	2301      	movs	r3, #1
 80075a2:	e063      	b.n	800766c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d103      	bne.n	80075b2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80075aa:	f001 f993 	bl	80088d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80075ae:	2300      	movs	r3, #0
 80075b0:	e05c      	b.n	800766c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80075b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d106      	bne.n	80075c6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80075b8:	f107 0314 	add.w	r3, r7, #20
 80075bc:	4618      	mov	r0, r3
 80075be:	f000 fdc1 	bl	8008144 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80075c2:	2301      	movs	r3, #1
 80075c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80075c6:	f001 f985 	bl	80088d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80075ca:	f000 fb71 	bl	8007cb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80075ce:	f001 f951 	bl	8008874 <vPortEnterCritical>
 80075d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075d8:	b25b      	sxtb	r3, r3
 80075da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075de:	d103      	bne.n	80075e8 <xQueueGenericSend+0x16c>
 80075e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e2:	2200      	movs	r2, #0
 80075e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075ee:	b25b      	sxtb	r3, r3
 80075f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075f4:	d103      	bne.n	80075fe <xQueueGenericSend+0x182>
 80075f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f8:	2200      	movs	r2, #0
 80075fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075fe:	f001 f969 	bl	80088d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007602:	1d3a      	adds	r2, r7, #4
 8007604:	f107 0314 	add.w	r3, r7, #20
 8007608:	4611      	mov	r1, r2
 800760a:	4618      	mov	r0, r3
 800760c:	f000 fdb0 	bl	8008170 <xTaskCheckForTimeOut>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d124      	bne.n	8007660 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007616:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007618:	f000 f8ea 	bl	80077f0 <prvIsQueueFull>
 800761c:	4603      	mov	r3, r0
 800761e:	2b00      	cmp	r3, #0
 8007620:	d018      	beq.n	8007654 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007624:	3310      	adds	r3, #16
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	4611      	mov	r1, r2
 800762a:	4618      	mov	r0, r3
 800762c:	f000 fd04 	bl	8008038 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007630:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007632:	f000 f88b 	bl	800774c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007636:	f000 fb49 	bl	8007ccc <xTaskResumeAll>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	f47f af7c 	bne.w	800753a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007642:	4b0c      	ldr	r3, [pc, #48]	; (8007674 <xQueueGenericSend+0x1f8>)
 8007644:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007648:	601a      	str	r2, [r3, #0]
 800764a:	f3bf 8f4f 	dsb	sy
 800764e:	f3bf 8f6f 	isb	sy
 8007652:	e772      	b.n	800753a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007654:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007656:	f000 f879 	bl	800774c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800765a:	f000 fb37 	bl	8007ccc <xTaskResumeAll>
 800765e:	e76c      	b.n	800753a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007660:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007662:	f000 f873 	bl	800774c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007666:	f000 fb31 	bl	8007ccc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800766a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800766c:	4618      	mov	r0, r3
 800766e:	3738      	adds	r7, #56	; 0x38
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}
 8007674:	e000ed04 	.word	0xe000ed04

08007678 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b086      	sub	sp, #24
 800767c:	af00      	add	r7, sp, #0
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007684:	2300      	movs	r3, #0
 8007686:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800768c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007692:	2b00      	cmp	r3, #0
 8007694:	d10d      	bne.n	80076b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d14d      	bne.n	800773a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	4618      	mov	r0, r3
 80076a4:	f000 feca 	bl	800843c <xTaskPriorityDisinherit>
 80076a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	609a      	str	r2, [r3, #8]
 80076b0:	e043      	b.n	800773a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d119      	bne.n	80076ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6858      	ldr	r0, [r3, #4]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c0:	461a      	mov	r2, r3
 80076c2:	68b9      	ldr	r1, [r7, #8]
 80076c4:	f001 fbc8 	bl	8008e58 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	685a      	ldr	r2, [r3, #4]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d0:	441a      	add	r2, r3
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	685a      	ldr	r2, [r3, #4]
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	429a      	cmp	r2, r3
 80076e0:	d32b      	bcc.n	800773a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	605a      	str	r2, [r3, #4]
 80076ea:	e026      	b.n	800773a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	68d8      	ldr	r0, [r3, #12]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f4:	461a      	mov	r2, r3
 80076f6:	68b9      	ldr	r1, [r7, #8]
 80076f8:	f001 fbae 	bl	8008e58 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	68da      	ldr	r2, [r3, #12]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007704:	425b      	negs	r3, r3
 8007706:	441a      	add	r2, r3
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	68da      	ldr	r2, [r3, #12]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	429a      	cmp	r2, r3
 8007716:	d207      	bcs.n	8007728 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	689a      	ldr	r2, [r3, #8]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007720:	425b      	negs	r3, r3
 8007722:	441a      	add	r2, r3
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2b02      	cmp	r3, #2
 800772c:	d105      	bne.n	800773a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d002      	beq.n	800773a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	3b01      	subs	r3, #1
 8007738:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	1c5a      	adds	r2, r3, #1
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007742:	697b      	ldr	r3, [r7, #20]
}
 8007744:	4618      	mov	r0, r3
 8007746:	3718      	adds	r7, #24
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007754:	f001 f88e 	bl	8008874 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800775e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007760:	e011      	b.n	8007786 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007766:	2b00      	cmp	r3, #0
 8007768:	d012      	beq.n	8007790 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	3324      	adds	r3, #36	; 0x24
 800776e:	4618      	mov	r0, r3
 8007770:	f000 fc86 	bl	8008080 <xTaskRemoveFromEventList>
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d001      	beq.n	800777e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800777a:	f000 fd5b 	bl	8008234 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800777e:	7bfb      	ldrb	r3, [r7, #15]
 8007780:	3b01      	subs	r3, #1
 8007782:	b2db      	uxtb	r3, r3
 8007784:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800778a:	2b00      	cmp	r3, #0
 800778c:	dce9      	bgt.n	8007762 <prvUnlockQueue+0x16>
 800778e:	e000      	b.n	8007792 <prvUnlockQueue+0x46>
					break;
 8007790:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	22ff      	movs	r2, #255	; 0xff
 8007796:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800779a:	f001 f89b 	bl	80088d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800779e:	f001 f869 	bl	8008874 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80077aa:	e011      	b.n	80077d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	691b      	ldr	r3, [r3, #16]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d012      	beq.n	80077da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	3310      	adds	r3, #16
 80077b8:	4618      	mov	r0, r3
 80077ba:	f000 fc61 	bl	8008080 <xTaskRemoveFromEventList>
 80077be:	4603      	mov	r3, r0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d001      	beq.n	80077c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80077c4:	f000 fd36 	bl	8008234 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80077c8:	7bbb      	ldrb	r3, [r7, #14]
 80077ca:	3b01      	subs	r3, #1
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80077d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	dce9      	bgt.n	80077ac <prvUnlockQueue+0x60>
 80077d8:	e000      	b.n	80077dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80077da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	22ff      	movs	r2, #255	; 0xff
 80077e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80077e4:	f001 f876 	bl	80088d4 <vPortExitCritical>
}
 80077e8:	bf00      	nop
 80077ea:	3710      	adds	r7, #16
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80077f8:	f001 f83c 	bl	8008874 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007804:	429a      	cmp	r2, r3
 8007806:	d102      	bne.n	800780e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007808:	2301      	movs	r3, #1
 800780a:	60fb      	str	r3, [r7, #12]
 800780c:	e001      	b.n	8007812 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800780e:	2300      	movs	r3, #0
 8007810:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007812:	f001 f85f 	bl	80088d4 <vPortExitCritical>

	return xReturn;
 8007816:	68fb      	ldr	r3, [r7, #12]
}
 8007818:	4618      	mov	r0, r3
 800781a:	3710      	adds	r7, #16
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007820:	b580      	push	{r7, lr}
 8007822:	b08e      	sub	sp, #56	; 0x38
 8007824:	af04      	add	r7, sp, #16
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	607a      	str	r2, [r7, #4]
 800782c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800782e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007830:	2b00      	cmp	r3, #0
 8007832:	d10a      	bne.n	800784a <xTaskCreateStatic+0x2a>
	__asm volatile
 8007834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007838:	f383 8811 	msr	BASEPRI, r3
 800783c:	f3bf 8f6f 	isb	sy
 8007840:	f3bf 8f4f 	dsb	sy
 8007844:	623b      	str	r3, [r7, #32]
}
 8007846:	bf00      	nop
 8007848:	e7fe      	b.n	8007848 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800784a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800784c:	2b00      	cmp	r3, #0
 800784e:	d10a      	bne.n	8007866 <xTaskCreateStatic+0x46>
	__asm volatile
 8007850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007854:	f383 8811 	msr	BASEPRI, r3
 8007858:	f3bf 8f6f 	isb	sy
 800785c:	f3bf 8f4f 	dsb	sy
 8007860:	61fb      	str	r3, [r7, #28]
}
 8007862:	bf00      	nop
 8007864:	e7fe      	b.n	8007864 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007866:	23b4      	movs	r3, #180	; 0xb4
 8007868:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	2bb4      	cmp	r3, #180	; 0xb4
 800786e:	d00a      	beq.n	8007886 <xTaskCreateStatic+0x66>
	__asm volatile
 8007870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007874:	f383 8811 	msr	BASEPRI, r3
 8007878:	f3bf 8f6f 	isb	sy
 800787c:	f3bf 8f4f 	dsb	sy
 8007880:	61bb      	str	r3, [r7, #24]
}
 8007882:	bf00      	nop
 8007884:	e7fe      	b.n	8007884 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007886:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800788a:	2b00      	cmp	r3, #0
 800788c:	d01e      	beq.n	80078cc <xTaskCreateStatic+0xac>
 800788e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007890:	2b00      	cmp	r3, #0
 8007892:	d01b      	beq.n	80078cc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007896:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800789c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800789e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a0:	2202      	movs	r2, #2
 80078a2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80078a6:	2300      	movs	r3, #0
 80078a8:	9303      	str	r3, [sp, #12]
 80078aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ac:	9302      	str	r3, [sp, #8]
 80078ae:	f107 0314 	add.w	r3, r7, #20
 80078b2:	9301      	str	r3, [sp, #4]
 80078b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b6:	9300      	str	r3, [sp, #0]
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	68b9      	ldr	r1, [r7, #8]
 80078be:	68f8      	ldr	r0, [r7, #12]
 80078c0:	f000 f850 	bl	8007964 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80078c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078c6:	f000 f8eb 	bl	8007aa0 <prvAddNewTaskToReadyList>
 80078ca:	e001      	b.n	80078d0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80078cc:	2300      	movs	r3, #0
 80078ce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80078d0:	697b      	ldr	r3, [r7, #20]
	}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3728      	adds	r7, #40	; 0x28
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b08c      	sub	sp, #48	; 0x30
 80078de:	af04      	add	r7, sp, #16
 80078e0:	60f8      	str	r0, [r7, #12]
 80078e2:	60b9      	str	r1, [r7, #8]
 80078e4:	603b      	str	r3, [r7, #0]
 80078e6:	4613      	mov	r3, r2
 80078e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80078ea:	88fb      	ldrh	r3, [r7, #6]
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	4618      	mov	r0, r3
 80078f0:	f001 f8a2 	bl	8008a38 <pvPortMalloc>
 80078f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d00e      	beq.n	800791a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80078fc:	20b4      	movs	r0, #180	; 0xb4
 80078fe:	f001 f89b 	bl	8008a38 <pvPortMalloc>
 8007902:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d003      	beq.n	8007912 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	697a      	ldr	r2, [r7, #20]
 800790e:	631a      	str	r2, [r3, #48]	; 0x30
 8007910:	e005      	b.n	800791e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007912:	6978      	ldr	r0, [r7, #20]
 8007914:	f001 f95c 	bl	8008bd0 <vPortFree>
 8007918:	e001      	b.n	800791e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800791a:	2300      	movs	r3, #0
 800791c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d017      	beq.n	8007954 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	2200      	movs	r2, #0
 8007928:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800792c:	88fa      	ldrh	r2, [r7, #6]
 800792e:	2300      	movs	r3, #0
 8007930:	9303      	str	r3, [sp, #12]
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	9302      	str	r3, [sp, #8]
 8007936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007938:	9301      	str	r3, [sp, #4]
 800793a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793c:	9300      	str	r3, [sp, #0]
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	68b9      	ldr	r1, [r7, #8]
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f000 f80e 	bl	8007964 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007948:	69f8      	ldr	r0, [r7, #28]
 800794a:	f000 f8a9 	bl	8007aa0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800794e:	2301      	movs	r3, #1
 8007950:	61bb      	str	r3, [r7, #24]
 8007952:	e002      	b.n	800795a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007954:	f04f 33ff 	mov.w	r3, #4294967295
 8007958:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800795a:	69bb      	ldr	r3, [r7, #24]
	}
 800795c:	4618      	mov	r0, r3
 800795e:	3720      	adds	r7, #32
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b088      	sub	sp, #32
 8007968:	af00      	add	r7, sp, #0
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	60b9      	str	r1, [r7, #8]
 800796e:	607a      	str	r2, [r7, #4]
 8007970:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007974:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800797c:	3b01      	subs	r3, #1
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	4413      	add	r3, r2
 8007982:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	f023 0307 	bic.w	r3, r3, #7
 800798a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	f003 0307 	and.w	r3, r3, #7
 8007992:	2b00      	cmp	r3, #0
 8007994:	d00a      	beq.n	80079ac <prvInitialiseNewTask+0x48>
	__asm volatile
 8007996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799a:	f383 8811 	msr	BASEPRI, r3
 800799e:	f3bf 8f6f 	isb	sy
 80079a2:	f3bf 8f4f 	dsb	sy
 80079a6:	617b      	str	r3, [r7, #20]
}
 80079a8:	bf00      	nop
 80079aa:	e7fe      	b.n	80079aa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d01f      	beq.n	80079f2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80079b2:	2300      	movs	r3, #0
 80079b4:	61fb      	str	r3, [r7, #28]
 80079b6:	e012      	b.n	80079de <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80079b8:	68ba      	ldr	r2, [r7, #8]
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	4413      	add	r3, r2
 80079be:	7819      	ldrb	r1, [r3, #0]
 80079c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	4413      	add	r3, r2
 80079c6:	3334      	adds	r3, #52	; 0x34
 80079c8:	460a      	mov	r2, r1
 80079ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80079cc:	68ba      	ldr	r2, [r7, #8]
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	4413      	add	r3, r2
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d006      	beq.n	80079e6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	3301      	adds	r3, #1
 80079dc:	61fb      	str	r3, [r7, #28]
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	2b0f      	cmp	r3, #15
 80079e2:	d9e9      	bls.n	80079b8 <prvInitialiseNewTask+0x54>
 80079e4:	e000      	b.n	80079e8 <prvInitialiseNewTask+0x84>
			{
				break;
 80079e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80079e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ea:	2200      	movs	r2, #0
 80079ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80079f0:	e003      	b.n	80079fa <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80079f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f4:	2200      	movs	r2, #0
 80079f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80079fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fc:	2b06      	cmp	r3, #6
 80079fe:	d901      	bls.n	8007a04 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007a00:	2306      	movs	r3, #6
 8007a02:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a08:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a0e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a12:	2200      	movs	r2, #0
 8007a14:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a18:	3304      	adds	r3, #4
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f7ff fb13 	bl	8007046 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a22:	3318      	adds	r3, #24
 8007a24:	4618      	mov	r0, r3
 8007a26:	f7ff fb0e 	bl	8007046 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a2e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a32:	f1c3 0207 	rsb	r2, r3, #7
 8007a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a38:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a3e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a42:	2200      	movs	r2, #0
 8007a44:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a52:	334c      	adds	r3, #76	; 0x4c
 8007a54:	2260      	movs	r2, #96	; 0x60
 8007a56:	2100      	movs	r1, #0
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f001 fa0b 	bl	8008e74 <memset>
 8007a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a60:	4a0c      	ldr	r2, [pc, #48]	; (8007a94 <prvInitialiseNewTask+0x130>)
 8007a62:	651a      	str	r2, [r3, #80]	; 0x50
 8007a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a66:	4a0c      	ldr	r2, [pc, #48]	; (8007a98 <prvInitialiseNewTask+0x134>)
 8007a68:	655a      	str	r2, [r3, #84]	; 0x54
 8007a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6c:	4a0b      	ldr	r2, [pc, #44]	; (8007a9c <prvInitialiseNewTask+0x138>)
 8007a6e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007a70:	683a      	ldr	r2, [r7, #0]
 8007a72:	68f9      	ldr	r1, [r7, #12]
 8007a74:	69b8      	ldr	r0, [r7, #24]
 8007a76:	f000 fdcd 	bl	8008614 <pxPortInitialiseStack>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d002      	beq.n	8007a8c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a8a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a8c:	bf00      	nop
 8007a8e:	3720      	adds	r7, #32
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	0800911c 	.word	0x0800911c
 8007a98:	0800913c 	.word	0x0800913c
 8007a9c:	080090fc 	.word	0x080090fc

08007aa0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007aa8:	f000 fee4 	bl	8008874 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007aac:	4b2a      	ldr	r3, [pc, #168]	; (8007b58 <prvAddNewTaskToReadyList+0xb8>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	3301      	adds	r3, #1
 8007ab2:	4a29      	ldr	r2, [pc, #164]	; (8007b58 <prvAddNewTaskToReadyList+0xb8>)
 8007ab4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007ab6:	4b29      	ldr	r3, [pc, #164]	; (8007b5c <prvAddNewTaskToReadyList+0xbc>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d109      	bne.n	8007ad2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007abe:	4a27      	ldr	r2, [pc, #156]	; (8007b5c <prvAddNewTaskToReadyList+0xbc>)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007ac4:	4b24      	ldr	r3, [pc, #144]	; (8007b58 <prvAddNewTaskToReadyList+0xb8>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d110      	bne.n	8007aee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007acc:	f000 fbd6 	bl	800827c <prvInitialiseTaskLists>
 8007ad0:	e00d      	b.n	8007aee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007ad2:	4b23      	ldr	r3, [pc, #140]	; (8007b60 <prvAddNewTaskToReadyList+0xc0>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d109      	bne.n	8007aee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007ada:	4b20      	ldr	r3, [pc, #128]	; (8007b5c <prvAddNewTaskToReadyList+0xbc>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d802      	bhi.n	8007aee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007ae8:	4a1c      	ldr	r2, [pc, #112]	; (8007b5c <prvAddNewTaskToReadyList+0xbc>)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007aee:	4b1d      	ldr	r3, [pc, #116]	; (8007b64 <prvAddNewTaskToReadyList+0xc4>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	3301      	adds	r3, #1
 8007af4:	4a1b      	ldr	r2, [pc, #108]	; (8007b64 <prvAddNewTaskToReadyList+0xc4>)
 8007af6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007afc:	2201      	movs	r2, #1
 8007afe:	409a      	lsls	r2, r3
 8007b00:	4b19      	ldr	r3, [pc, #100]	; (8007b68 <prvAddNewTaskToReadyList+0xc8>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	4a18      	ldr	r2, [pc, #96]	; (8007b68 <prvAddNewTaskToReadyList+0xc8>)
 8007b08:	6013      	str	r3, [r2, #0]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b0e:	4613      	mov	r3, r2
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	4413      	add	r3, r2
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	4a15      	ldr	r2, [pc, #84]	; (8007b6c <prvAddNewTaskToReadyList+0xcc>)
 8007b18:	441a      	add	r2, r3
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	3304      	adds	r3, #4
 8007b1e:	4619      	mov	r1, r3
 8007b20:	4610      	mov	r0, r2
 8007b22:	f7ff fa9d 	bl	8007060 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007b26:	f000 fed5 	bl	80088d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007b2a:	4b0d      	ldr	r3, [pc, #52]	; (8007b60 <prvAddNewTaskToReadyList+0xc0>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00e      	beq.n	8007b50 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007b32:	4b0a      	ldr	r3, [pc, #40]	; (8007b5c <prvAddNewTaskToReadyList+0xbc>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d207      	bcs.n	8007b50 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007b40:	4b0b      	ldr	r3, [pc, #44]	; (8007b70 <prvAddNewTaskToReadyList+0xd0>)
 8007b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b46:	601a      	str	r2, [r3, #0]
 8007b48:	f3bf 8f4f 	dsb	sy
 8007b4c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b50:	bf00      	nop
 8007b52:	3708      	adds	r7, #8
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	20000af4 	.word	0x20000af4
 8007b5c:	200009f4 	.word	0x200009f4
 8007b60:	20000b00 	.word	0x20000b00
 8007b64:	20000b10 	.word	0x20000b10
 8007b68:	20000afc 	.word	0x20000afc
 8007b6c:	200009f8 	.word	0x200009f8
 8007b70:	e000ed04 	.word	0xe000ed04

08007b74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d017      	beq.n	8007bb6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007b86:	4b13      	ldr	r3, [pc, #76]	; (8007bd4 <vTaskDelay+0x60>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d00a      	beq.n	8007ba4 <vTaskDelay+0x30>
	__asm volatile
 8007b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b92:	f383 8811 	msr	BASEPRI, r3
 8007b96:	f3bf 8f6f 	isb	sy
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	60bb      	str	r3, [r7, #8]
}
 8007ba0:	bf00      	nop
 8007ba2:	e7fe      	b.n	8007ba2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007ba4:	f000 f884 	bl	8007cb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007ba8:	2100      	movs	r1, #0
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 fccc 	bl	8008548 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007bb0:	f000 f88c 	bl	8007ccc <xTaskResumeAll>
 8007bb4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d107      	bne.n	8007bcc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007bbc:	4b06      	ldr	r3, [pc, #24]	; (8007bd8 <vTaskDelay+0x64>)
 8007bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bc2:	601a      	str	r2, [r3, #0]
 8007bc4:	f3bf 8f4f 	dsb	sy
 8007bc8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007bcc:	bf00      	nop
 8007bce:	3710      	adds	r7, #16
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	20000b1c 	.word	0x20000b1c
 8007bd8:	e000ed04 	.word	0xe000ed04

08007bdc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b08a      	sub	sp, #40	; 0x28
 8007be0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007be2:	2300      	movs	r3, #0
 8007be4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007be6:	2300      	movs	r3, #0
 8007be8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007bea:	463a      	mov	r2, r7
 8007bec:	1d39      	adds	r1, r7, #4
 8007bee:	f107 0308 	add.w	r3, r7, #8
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7f9 fb5c 	bl	80012b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007bf8:	6839      	ldr	r1, [r7, #0]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	68ba      	ldr	r2, [r7, #8]
 8007bfe:	9202      	str	r2, [sp, #8]
 8007c00:	9301      	str	r3, [sp, #4]
 8007c02:	2300      	movs	r3, #0
 8007c04:	9300      	str	r3, [sp, #0]
 8007c06:	2300      	movs	r3, #0
 8007c08:	460a      	mov	r2, r1
 8007c0a:	4921      	ldr	r1, [pc, #132]	; (8007c90 <vTaskStartScheduler+0xb4>)
 8007c0c:	4821      	ldr	r0, [pc, #132]	; (8007c94 <vTaskStartScheduler+0xb8>)
 8007c0e:	f7ff fe07 	bl	8007820 <xTaskCreateStatic>
 8007c12:	4603      	mov	r3, r0
 8007c14:	4a20      	ldr	r2, [pc, #128]	; (8007c98 <vTaskStartScheduler+0xbc>)
 8007c16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007c18:	4b1f      	ldr	r3, [pc, #124]	; (8007c98 <vTaskStartScheduler+0xbc>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d002      	beq.n	8007c26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007c20:	2301      	movs	r3, #1
 8007c22:	617b      	str	r3, [r7, #20]
 8007c24:	e001      	b.n	8007c2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007c26:	2300      	movs	r3, #0
 8007c28:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d11b      	bne.n	8007c68 <vTaskStartScheduler+0x8c>
	__asm volatile
 8007c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c34:	f383 8811 	msr	BASEPRI, r3
 8007c38:	f3bf 8f6f 	isb	sy
 8007c3c:	f3bf 8f4f 	dsb	sy
 8007c40:	613b      	str	r3, [r7, #16]
}
 8007c42:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007c44:	4b15      	ldr	r3, [pc, #84]	; (8007c9c <vTaskStartScheduler+0xc0>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	334c      	adds	r3, #76	; 0x4c
 8007c4a:	4a15      	ldr	r2, [pc, #84]	; (8007ca0 <vTaskStartScheduler+0xc4>)
 8007c4c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007c4e:	4b15      	ldr	r3, [pc, #84]	; (8007ca4 <vTaskStartScheduler+0xc8>)
 8007c50:	f04f 32ff 	mov.w	r2, #4294967295
 8007c54:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007c56:	4b14      	ldr	r3, [pc, #80]	; (8007ca8 <vTaskStartScheduler+0xcc>)
 8007c58:	2201      	movs	r2, #1
 8007c5a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007c5c:	4b13      	ldr	r3, [pc, #76]	; (8007cac <vTaskStartScheduler+0xd0>)
 8007c5e:	2200      	movs	r2, #0
 8007c60:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007c62:	f000 fd65 	bl	8008730 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007c66:	e00e      	b.n	8007c86 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c6e:	d10a      	bne.n	8007c86 <vTaskStartScheduler+0xaa>
	__asm volatile
 8007c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c74:	f383 8811 	msr	BASEPRI, r3
 8007c78:	f3bf 8f6f 	isb	sy
 8007c7c:	f3bf 8f4f 	dsb	sy
 8007c80:	60fb      	str	r3, [r7, #12]
}
 8007c82:	bf00      	nop
 8007c84:	e7fe      	b.n	8007c84 <vTaskStartScheduler+0xa8>
}
 8007c86:	bf00      	nop
 8007c88:	3718      	adds	r7, #24
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	080090d4 	.word	0x080090d4
 8007c94:	0800824d 	.word	0x0800824d
 8007c98:	20000b18 	.word	0x20000b18
 8007c9c:	200009f4 	.word	0x200009f4
 8007ca0:	20000024 	.word	0x20000024
 8007ca4:	20000b14 	.word	0x20000b14
 8007ca8:	20000b00 	.word	0x20000b00
 8007cac:	20000af8 	.word	0x20000af8

08007cb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007cb4:	4b04      	ldr	r3, [pc, #16]	; (8007cc8 <vTaskSuspendAll+0x18>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	3301      	adds	r3, #1
 8007cba:	4a03      	ldr	r2, [pc, #12]	; (8007cc8 <vTaskSuspendAll+0x18>)
 8007cbc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007cbe:	bf00      	nop
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr
 8007cc8:	20000b1c 	.word	0x20000b1c

08007ccc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007cda:	4b41      	ldr	r3, [pc, #260]	; (8007de0 <xTaskResumeAll+0x114>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10a      	bne.n	8007cf8 <xTaskResumeAll+0x2c>
	__asm volatile
 8007ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce6:	f383 8811 	msr	BASEPRI, r3
 8007cea:	f3bf 8f6f 	isb	sy
 8007cee:	f3bf 8f4f 	dsb	sy
 8007cf2:	603b      	str	r3, [r7, #0]
}
 8007cf4:	bf00      	nop
 8007cf6:	e7fe      	b.n	8007cf6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007cf8:	f000 fdbc 	bl	8008874 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007cfc:	4b38      	ldr	r3, [pc, #224]	; (8007de0 <xTaskResumeAll+0x114>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	3b01      	subs	r3, #1
 8007d02:	4a37      	ldr	r2, [pc, #220]	; (8007de0 <xTaskResumeAll+0x114>)
 8007d04:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d06:	4b36      	ldr	r3, [pc, #216]	; (8007de0 <xTaskResumeAll+0x114>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d161      	bne.n	8007dd2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007d0e:	4b35      	ldr	r3, [pc, #212]	; (8007de4 <xTaskResumeAll+0x118>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d05d      	beq.n	8007dd2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d16:	e02e      	b.n	8007d76 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d18:	4b33      	ldr	r3, [pc, #204]	; (8007de8 <xTaskResumeAll+0x11c>)
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	3318      	adds	r3, #24
 8007d24:	4618      	mov	r0, r3
 8007d26:	f7ff f9f8 	bl	800711a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	3304      	adds	r3, #4
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7ff f9f3 	bl	800711a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d38:	2201      	movs	r2, #1
 8007d3a:	409a      	lsls	r2, r3
 8007d3c:	4b2b      	ldr	r3, [pc, #172]	; (8007dec <xTaskResumeAll+0x120>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	4a2a      	ldr	r2, [pc, #168]	; (8007dec <xTaskResumeAll+0x120>)
 8007d44:	6013      	str	r3, [r2, #0]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	4413      	add	r3, r2
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	4a27      	ldr	r2, [pc, #156]	; (8007df0 <xTaskResumeAll+0x124>)
 8007d54:	441a      	add	r2, r3
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	3304      	adds	r3, #4
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	4610      	mov	r0, r2
 8007d5e:	f7ff f97f 	bl	8007060 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d66:	4b23      	ldr	r3, [pc, #140]	; (8007df4 <xTaskResumeAll+0x128>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d302      	bcc.n	8007d76 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007d70:	4b21      	ldr	r3, [pc, #132]	; (8007df8 <xTaskResumeAll+0x12c>)
 8007d72:	2201      	movs	r2, #1
 8007d74:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d76:	4b1c      	ldr	r3, [pc, #112]	; (8007de8 <xTaskResumeAll+0x11c>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d1cc      	bne.n	8007d18 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d001      	beq.n	8007d88 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007d84:	f000 fb1c 	bl	80083c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007d88:	4b1c      	ldr	r3, [pc, #112]	; (8007dfc <xTaskResumeAll+0x130>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d010      	beq.n	8007db6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007d94:	f000 f836 	bl	8007e04 <xTaskIncrementTick>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d002      	beq.n	8007da4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007d9e:	4b16      	ldr	r3, [pc, #88]	; (8007df8 <xTaskResumeAll+0x12c>)
 8007da0:	2201      	movs	r2, #1
 8007da2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	3b01      	subs	r3, #1
 8007da8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d1f1      	bne.n	8007d94 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007db0:	4b12      	ldr	r3, [pc, #72]	; (8007dfc <xTaskResumeAll+0x130>)
 8007db2:	2200      	movs	r2, #0
 8007db4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007db6:	4b10      	ldr	r3, [pc, #64]	; (8007df8 <xTaskResumeAll+0x12c>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d009      	beq.n	8007dd2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007dc2:	4b0f      	ldr	r3, [pc, #60]	; (8007e00 <xTaskResumeAll+0x134>)
 8007dc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dc8:	601a      	str	r2, [r3, #0]
 8007dca:	f3bf 8f4f 	dsb	sy
 8007dce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007dd2:	f000 fd7f 	bl	80088d4 <vPortExitCritical>

	return xAlreadyYielded;
 8007dd6:	68bb      	ldr	r3, [r7, #8]
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3710      	adds	r7, #16
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	20000b1c 	.word	0x20000b1c
 8007de4:	20000af4 	.word	0x20000af4
 8007de8:	20000ab4 	.word	0x20000ab4
 8007dec:	20000afc 	.word	0x20000afc
 8007df0:	200009f8 	.word	0x200009f8
 8007df4:	200009f4 	.word	0x200009f4
 8007df8:	20000b08 	.word	0x20000b08
 8007dfc:	20000b04 	.word	0x20000b04
 8007e00:	e000ed04 	.word	0xe000ed04

08007e04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b086      	sub	sp, #24
 8007e08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e0e:	4b4e      	ldr	r3, [pc, #312]	; (8007f48 <xTaskIncrementTick+0x144>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	f040 808e 	bne.w	8007f34 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007e18:	4b4c      	ldr	r3, [pc, #304]	; (8007f4c <xTaskIncrementTick+0x148>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007e20:	4a4a      	ldr	r2, [pc, #296]	; (8007f4c <xTaskIncrementTick+0x148>)
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d120      	bne.n	8007e6e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007e2c:	4b48      	ldr	r3, [pc, #288]	; (8007f50 <xTaskIncrementTick+0x14c>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d00a      	beq.n	8007e4c <xTaskIncrementTick+0x48>
	__asm volatile
 8007e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3a:	f383 8811 	msr	BASEPRI, r3
 8007e3e:	f3bf 8f6f 	isb	sy
 8007e42:	f3bf 8f4f 	dsb	sy
 8007e46:	603b      	str	r3, [r7, #0]
}
 8007e48:	bf00      	nop
 8007e4a:	e7fe      	b.n	8007e4a <xTaskIncrementTick+0x46>
 8007e4c:	4b40      	ldr	r3, [pc, #256]	; (8007f50 <xTaskIncrementTick+0x14c>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	60fb      	str	r3, [r7, #12]
 8007e52:	4b40      	ldr	r3, [pc, #256]	; (8007f54 <xTaskIncrementTick+0x150>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a3e      	ldr	r2, [pc, #248]	; (8007f50 <xTaskIncrementTick+0x14c>)
 8007e58:	6013      	str	r3, [r2, #0]
 8007e5a:	4a3e      	ldr	r2, [pc, #248]	; (8007f54 <xTaskIncrementTick+0x150>)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6013      	str	r3, [r2, #0]
 8007e60:	4b3d      	ldr	r3, [pc, #244]	; (8007f58 <xTaskIncrementTick+0x154>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	3301      	adds	r3, #1
 8007e66:	4a3c      	ldr	r2, [pc, #240]	; (8007f58 <xTaskIncrementTick+0x154>)
 8007e68:	6013      	str	r3, [r2, #0]
 8007e6a:	f000 faa9 	bl	80083c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007e6e:	4b3b      	ldr	r3, [pc, #236]	; (8007f5c <xTaskIncrementTick+0x158>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	693a      	ldr	r2, [r7, #16]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d348      	bcc.n	8007f0a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e78:	4b35      	ldr	r3, [pc, #212]	; (8007f50 <xTaskIncrementTick+0x14c>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d104      	bne.n	8007e8c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e82:	4b36      	ldr	r3, [pc, #216]	; (8007f5c <xTaskIncrementTick+0x158>)
 8007e84:	f04f 32ff 	mov.w	r2, #4294967295
 8007e88:	601a      	str	r2, [r3, #0]
					break;
 8007e8a:	e03e      	b.n	8007f0a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e8c:	4b30      	ldr	r3, [pc, #192]	; (8007f50 <xTaskIncrementTick+0x14c>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007e9c:	693a      	ldr	r2, [r7, #16]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d203      	bcs.n	8007eac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007ea4:	4a2d      	ldr	r2, [pc, #180]	; (8007f5c <xTaskIncrementTick+0x158>)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007eaa:	e02e      	b.n	8007f0a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	3304      	adds	r3, #4
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f7ff f932 	bl	800711a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d004      	beq.n	8007ec8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	3318      	adds	r3, #24
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7ff f929 	bl	800711a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ecc:	2201      	movs	r2, #1
 8007ece:	409a      	lsls	r2, r3
 8007ed0:	4b23      	ldr	r3, [pc, #140]	; (8007f60 <xTaskIncrementTick+0x15c>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	4a22      	ldr	r2, [pc, #136]	; (8007f60 <xTaskIncrementTick+0x15c>)
 8007ed8:	6013      	str	r3, [r2, #0]
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ede:	4613      	mov	r3, r2
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	4413      	add	r3, r2
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	4a1f      	ldr	r2, [pc, #124]	; (8007f64 <xTaskIncrementTick+0x160>)
 8007ee8:	441a      	add	r2, r3
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	3304      	adds	r3, #4
 8007eee:	4619      	mov	r1, r3
 8007ef0:	4610      	mov	r0, r2
 8007ef2:	f7ff f8b5 	bl	8007060 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007efa:	4b1b      	ldr	r3, [pc, #108]	; (8007f68 <xTaskIncrementTick+0x164>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d3b9      	bcc.n	8007e78 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007f04:	2301      	movs	r3, #1
 8007f06:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f08:	e7b6      	b.n	8007e78 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007f0a:	4b17      	ldr	r3, [pc, #92]	; (8007f68 <xTaskIncrementTick+0x164>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f10:	4914      	ldr	r1, [pc, #80]	; (8007f64 <xTaskIncrementTick+0x160>)
 8007f12:	4613      	mov	r3, r2
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	4413      	add	r3, r2
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	440b      	add	r3, r1
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d901      	bls.n	8007f26 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007f22:	2301      	movs	r3, #1
 8007f24:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007f26:	4b11      	ldr	r3, [pc, #68]	; (8007f6c <xTaskIncrementTick+0x168>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d007      	beq.n	8007f3e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	617b      	str	r3, [r7, #20]
 8007f32:	e004      	b.n	8007f3e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007f34:	4b0e      	ldr	r3, [pc, #56]	; (8007f70 <xTaskIncrementTick+0x16c>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	4a0d      	ldr	r2, [pc, #52]	; (8007f70 <xTaskIncrementTick+0x16c>)
 8007f3c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007f3e:	697b      	ldr	r3, [r7, #20]
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3718      	adds	r7, #24
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	20000b1c 	.word	0x20000b1c
 8007f4c:	20000af8 	.word	0x20000af8
 8007f50:	20000aac 	.word	0x20000aac
 8007f54:	20000ab0 	.word	0x20000ab0
 8007f58:	20000b0c 	.word	0x20000b0c
 8007f5c:	20000b14 	.word	0x20000b14
 8007f60:	20000afc 	.word	0x20000afc
 8007f64:	200009f8 	.word	0x200009f8
 8007f68:	200009f4 	.word	0x200009f4
 8007f6c:	20000b08 	.word	0x20000b08
 8007f70:	20000b04 	.word	0x20000b04

08007f74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007f74:	b480      	push	{r7}
 8007f76:	b087      	sub	sp, #28
 8007f78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007f7a:	4b29      	ldr	r3, [pc, #164]	; (8008020 <vTaskSwitchContext+0xac>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d003      	beq.n	8007f8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007f82:	4b28      	ldr	r3, [pc, #160]	; (8008024 <vTaskSwitchContext+0xb0>)
 8007f84:	2201      	movs	r2, #1
 8007f86:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007f88:	e044      	b.n	8008014 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007f8a:	4b26      	ldr	r3, [pc, #152]	; (8008024 <vTaskSwitchContext+0xb0>)
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f90:	4b25      	ldr	r3, [pc, #148]	; (8008028 <vTaskSwitchContext+0xb4>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	fab3 f383 	clz	r3, r3
 8007f9c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007f9e:	7afb      	ldrb	r3, [r7, #11]
 8007fa0:	f1c3 031f 	rsb	r3, r3, #31
 8007fa4:	617b      	str	r3, [r7, #20]
 8007fa6:	4921      	ldr	r1, [pc, #132]	; (800802c <vTaskSwitchContext+0xb8>)
 8007fa8:	697a      	ldr	r2, [r7, #20]
 8007faa:	4613      	mov	r3, r2
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	4413      	add	r3, r2
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	440b      	add	r3, r1
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d10a      	bne.n	8007fd0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fbe:	f383 8811 	msr	BASEPRI, r3
 8007fc2:	f3bf 8f6f 	isb	sy
 8007fc6:	f3bf 8f4f 	dsb	sy
 8007fca:	607b      	str	r3, [r7, #4]
}
 8007fcc:	bf00      	nop
 8007fce:	e7fe      	b.n	8007fce <vTaskSwitchContext+0x5a>
 8007fd0:	697a      	ldr	r2, [r7, #20]
 8007fd2:	4613      	mov	r3, r2
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	4413      	add	r3, r2
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	4a14      	ldr	r2, [pc, #80]	; (800802c <vTaskSwitchContext+0xb8>)
 8007fdc:	4413      	add	r3, r2
 8007fde:	613b      	str	r3, [r7, #16]
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	685a      	ldr	r2, [r3, #4]
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	605a      	str	r2, [r3, #4]
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	685a      	ldr	r2, [r3, #4]
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	3308      	adds	r3, #8
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d104      	bne.n	8008000 <vTaskSwitchContext+0x8c>
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	685a      	ldr	r2, [r3, #4]
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	605a      	str	r2, [r3, #4]
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	4a0a      	ldr	r2, [pc, #40]	; (8008030 <vTaskSwitchContext+0xbc>)
 8008008:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800800a:	4b09      	ldr	r3, [pc, #36]	; (8008030 <vTaskSwitchContext+0xbc>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	334c      	adds	r3, #76	; 0x4c
 8008010:	4a08      	ldr	r2, [pc, #32]	; (8008034 <vTaskSwitchContext+0xc0>)
 8008012:	6013      	str	r3, [r2, #0]
}
 8008014:	bf00      	nop
 8008016:	371c      	adds	r7, #28
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr
 8008020:	20000b1c 	.word	0x20000b1c
 8008024:	20000b08 	.word	0x20000b08
 8008028:	20000afc 	.word	0x20000afc
 800802c:	200009f8 	.word	0x200009f8
 8008030:	200009f4 	.word	0x200009f4
 8008034:	20000024 	.word	0x20000024

08008038 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d10a      	bne.n	800805e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800804c:	f383 8811 	msr	BASEPRI, r3
 8008050:	f3bf 8f6f 	isb	sy
 8008054:	f3bf 8f4f 	dsb	sy
 8008058:	60fb      	str	r3, [r7, #12]
}
 800805a:	bf00      	nop
 800805c:	e7fe      	b.n	800805c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800805e:	4b07      	ldr	r3, [pc, #28]	; (800807c <vTaskPlaceOnEventList+0x44>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	3318      	adds	r3, #24
 8008064:	4619      	mov	r1, r3
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f7ff f81e 	bl	80070a8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800806c:	2101      	movs	r1, #1
 800806e:	6838      	ldr	r0, [r7, #0]
 8008070:	f000 fa6a 	bl	8008548 <prvAddCurrentTaskToDelayedList>
}
 8008074:	bf00      	nop
 8008076:	3710      	adds	r7, #16
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}
 800807c:	200009f4 	.word	0x200009f4

08008080 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b086      	sub	sp, #24
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d10a      	bne.n	80080ac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800809a:	f383 8811 	msr	BASEPRI, r3
 800809e:	f3bf 8f6f 	isb	sy
 80080a2:	f3bf 8f4f 	dsb	sy
 80080a6:	60fb      	str	r3, [r7, #12]
}
 80080a8:	bf00      	nop
 80080aa:	e7fe      	b.n	80080aa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	3318      	adds	r3, #24
 80080b0:	4618      	mov	r0, r3
 80080b2:	f7ff f832 	bl	800711a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080b6:	4b1d      	ldr	r3, [pc, #116]	; (800812c <xTaskRemoveFromEventList+0xac>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d11c      	bne.n	80080f8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	3304      	adds	r3, #4
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7ff f829 	bl	800711a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080cc:	2201      	movs	r2, #1
 80080ce:	409a      	lsls	r2, r3
 80080d0:	4b17      	ldr	r3, [pc, #92]	; (8008130 <xTaskRemoveFromEventList+0xb0>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4313      	orrs	r3, r2
 80080d6:	4a16      	ldr	r2, [pc, #88]	; (8008130 <xTaskRemoveFromEventList+0xb0>)
 80080d8:	6013      	str	r3, [r2, #0]
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080de:	4613      	mov	r3, r2
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	4413      	add	r3, r2
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	4a13      	ldr	r2, [pc, #76]	; (8008134 <xTaskRemoveFromEventList+0xb4>)
 80080e8:	441a      	add	r2, r3
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	3304      	adds	r3, #4
 80080ee:	4619      	mov	r1, r3
 80080f0:	4610      	mov	r0, r2
 80080f2:	f7fe ffb5 	bl	8007060 <vListInsertEnd>
 80080f6:	e005      	b.n	8008104 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	3318      	adds	r3, #24
 80080fc:	4619      	mov	r1, r3
 80080fe:	480e      	ldr	r0, [pc, #56]	; (8008138 <xTaskRemoveFromEventList+0xb8>)
 8008100:	f7fe ffae 	bl	8007060 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008108:	4b0c      	ldr	r3, [pc, #48]	; (800813c <xTaskRemoveFromEventList+0xbc>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800810e:	429a      	cmp	r2, r3
 8008110:	d905      	bls.n	800811e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008112:	2301      	movs	r3, #1
 8008114:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008116:	4b0a      	ldr	r3, [pc, #40]	; (8008140 <xTaskRemoveFromEventList+0xc0>)
 8008118:	2201      	movs	r2, #1
 800811a:	601a      	str	r2, [r3, #0]
 800811c:	e001      	b.n	8008122 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800811e:	2300      	movs	r3, #0
 8008120:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008122:	697b      	ldr	r3, [r7, #20]
}
 8008124:	4618      	mov	r0, r3
 8008126:	3718      	adds	r7, #24
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}
 800812c:	20000b1c 	.word	0x20000b1c
 8008130:	20000afc 	.word	0x20000afc
 8008134:	200009f8 	.word	0x200009f8
 8008138:	20000ab4 	.word	0x20000ab4
 800813c:	200009f4 	.word	0x200009f4
 8008140:	20000b08 	.word	0x20000b08

08008144 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008144:	b480      	push	{r7}
 8008146:	b083      	sub	sp, #12
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800814c:	4b06      	ldr	r3, [pc, #24]	; (8008168 <vTaskInternalSetTimeOutState+0x24>)
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008154:	4b05      	ldr	r3, [pc, #20]	; (800816c <vTaskInternalSetTimeOutState+0x28>)
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	605a      	str	r2, [r3, #4]
}
 800815c:	bf00      	nop
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr
 8008168:	20000b0c 	.word	0x20000b0c
 800816c:	20000af8 	.word	0x20000af8

08008170 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b088      	sub	sp, #32
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d10a      	bne.n	8008196 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008184:	f383 8811 	msr	BASEPRI, r3
 8008188:	f3bf 8f6f 	isb	sy
 800818c:	f3bf 8f4f 	dsb	sy
 8008190:	613b      	str	r3, [r7, #16]
}
 8008192:	bf00      	nop
 8008194:	e7fe      	b.n	8008194 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d10a      	bne.n	80081b2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800819c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a0:	f383 8811 	msr	BASEPRI, r3
 80081a4:	f3bf 8f6f 	isb	sy
 80081a8:	f3bf 8f4f 	dsb	sy
 80081ac:	60fb      	str	r3, [r7, #12]
}
 80081ae:	bf00      	nop
 80081b0:	e7fe      	b.n	80081b0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80081b2:	f000 fb5f 	bl	8008874 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80081b6:	4b1d      	ldr	r3, [pc, #116]	; (800822c <xTaskCheckForTimeOut+0xbc>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	69ba      	ldr	r2, [r7, #24]
 80081c2:	1ad3      	subs	r3, r2, r3
 80081c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ce:	d102      	bne.n	80081d6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80081d0:	2300      	movs	r3, #0
 80081d2:	61fb      	str	r3, [r7, #28]
 80081d4:	e023      	b.n	800821e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	4b15      	ldr	r3, [pc, #84]	; (8008230 <xTaskCheckForTimeOut+0xc0>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	429a      	cmp	r2, r3
 80081e0:	d007      	beq.n	80081f2 <xTaskCheckForTimeOut+0x82>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	69ba      	ldr	r2, [r7, #24]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d302      	bcc.n	80081f2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80081ec:	2301      	movs	r3, #1
 80081ee:	61fb      	str	r3, [r7, #28]
 80081f0:	e015      	b.n	800821e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	697a      	ldr	r2, [r7, #20]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d20b      	bcs.n	8008214 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	1ad2      	subs	r2, r2, r3
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f7ff ff9b 	bl	8008144 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800820e:	2300      	movs	r3, #0
 8008210:	61fb      	str	r3, [r7, #28]
 8008212:	e004      	b.n	800821e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	2200      	movs	r2, #0
 8008218:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800821a:	2301      	movs	r3, #1
 800821c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800821e:	f000 fb59 	bl	80088d4 <vPortExitCritical>

	return xReturn;
 8008222:	69fb      	ldr	r3, [r7, #28]
}
 8008224:	4618      	mov	r0, r3
 8008226:	3720      	adds	r7, #32
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}
 800822c:	20000af8 	.word	0x20000af8
 8008230:	20000b0c 	.word	0x20000b0c

08008234 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008234:	b480      	push	{r7}
 8008236:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008238:	4b03      	ldr	r3, [pc, #12]	; (8008248 <vTaskMissedYield+0x14>)
 800823a:	2201      	movs	r2, #1
 800823c:	601a      	str	r2, [r3, #0]
}
 800823e:	bf00      	nop
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr
 8008248:	20000b08 	.word	0x20000b08

0800824c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b082      	sub	sp, #8
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008254:	f000 f852 	bl	80082fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008258:	4b06      	ldr	r3, [pc, #24]	; (8008274 <prvIdleTask+0x28>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	2b01      	cmp	r3, #1
 800825e:	d9f9      	bls.n	8008254 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008260:	4b05      	ldr	r3, [pc, #20]	; (8008278 <prvIdleTask+0x2c>)
 8008262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008266:	601a      	str	r2, [r3, #0]
 8008268:	f3bf 8f4f 	dsb	sy
 800826c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008270:	e7f0      	b.n	8008254 <prvIdleTask+0x8>
 8008272:	bf00      	nop
 8008274:	200009f8 	.word	0x200009f8
 8008278:	e000ed04 	.word	0xe000ed04

0800827c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008282:	2300      	movs	r3, #0
 8008284:	607b      	str	r3, [r7, #4]
 8008286:	e00c      	b.n	80082a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	4613      	mov	r3, r2
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	4413      	add	r3, r2
 8008290:	009b      	lsls	r3, r3, #2
 8008292:	4a12      	ldr	r2, [pc, #72]	; (80082dc <prvInitialiseTaskLists+0x60>)
 8008294:	4413      	add	r3, r2
 8008296:	4618      	mov	r0, r3
 8008298:	f7fe feb5 	bl	8007006 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	3301      	adds	r3, #1
 80082a0:	607b      	str	r3, [r7, #4]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2b06      	cmp	r3, #6
 80082a6:	d9ef      	bls.n	8008288 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80082a8:	480d      	ldr	r0, [pc, #52]	; (80082e0 <prvInitialiseTaskLists+0x64>)
 80082aa:	f7fe feac 	bl	8007006 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80082ae:	480d      	ldr	r0, [pc, #52]	; (80082e4 <prvInitialiseTaskLists+0x68>)
 80082b0:	f7fe fea9 	bl	8007006 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80082b4:	480c      	ldr	r0, [pc, #48]	; (80082e8 <prvInitialiseTaskLists+0x6c>)
 80082b6:	f7fe fea6 	bl	8007006 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80082ba:	480c      	ldr	r0, [pc, #48]	; (80082ec <prvInitialiseTaskLists+0x70>)
 80082bc:	f7fe fea3 	bl	8007006 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80082c0:	480b      	ldr	r0, [pc, #44]	; (80082f0 <prvInitialiseTaskLists+0x74>)
 80082c2:	f7fe fea0 	bl	8007006 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80082c6:	4b0b      	ldr	r3, [pc, #44]	; (80082f4 <prvInitialiseTaskLists+0x78>)
 80082c8:	4a05      	ldr	r2, [pc, #20]	; (80082e0 <prvInitialiseTaskLists+0x64>)
 80082ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80082cc:	4b0a      	ldr	r3, [pc, #40]	; (80082f8 <prvInitialiseTaskLists+0x7c>)
 80082ce:	4a05      	ldr	r2, [pc, #20]	; (80082e4 <prvInitialiseTaskLists+0x68>)
 80082d0:	601a      	str	r2, [r3, #0]
}
 80082d2:	bf00      	nop
 80082d4:	3708      	adds	r7, #8
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop
 80082dc:	200009f8 	.word	0x200009f8
 80082e0:	20000a84 	.word	0x20000a84
 80082e4:	20000a98 	.word	0x20000a98
 80082e8:	20000ab4 	.word	0x20000ab4
 80082ec:	20000ac8 	.word	0x20000ac8
 80082f0:	20000ae0 	.word	0x20000ae0
 80082f4:	20000aac 	.word	0x20000aac
 80082f8:	20000ab0 	.word	0x20000ab0

080082fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008302:	e019      	b.n	8008338 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008304:	f000 fab6 	bl	8008874 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008308:	4b10      	ldr	r3, [pc, #64]	; (800834c <prvCheckTasksWaitingTermination+0x50>)
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	68db      	ldr	r3, [r3, #12]
 800830e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	3304      	adds	r3, #4
 8008314:	4618      	mov	r0, r3
 8008316:	f7fe ff00 	bl	800711a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800831a:	4b0d      	ldr	r3, [pc, #52]	; (8008350 <prvCheckTasksWaitingTermination+0x54>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	3b01      	subs	r3, #1
 8008320:	4a0b      	ldr	r2, [pc, #44]	; (8008350 <prvCheckTasksWaitingTermination+0x54>)
 8008322:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008324:	4b0b      	ldr	r3, [pc, #44]	; (8008354 <prvCheckTasksWaitingTermination+0x58>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	3b01      	subs	r3, #1
 800832a:	4a0a      	ldr	r2, [pc, #40]	; (8008354 <prvCheckTasksWaitingTermination+0x58>)
 800832c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800832e:	f000 fad1 	bl	80088d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 f810 	bl	8008358 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008338:	4b06      	ldr	r3, [pc, #24]	; (8008354 <prvCheckTasksWaitingTermination+0x58>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d1e1      	bne.n	8008304 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008340:	bf00      	nop
 8008342:	bf00      	nop
 8008344:	3708      	adds	r7, #8
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	20000ac8 	.word	0x20000ac8
 8008350:	20000af4 	.word	0x20000af4
 8008354:	20000adc 	.word	0x20000adc

08008358 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	334c      	adds	r3, #76	; 0x4c
 8008364:	4618      	mov	r0, r3
 8008366:	f000 fd9b 	bl	8008ea0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008370:	2b00      	cmp	r3, #0
 8008372:	d108      	bne.n	8008386 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008378:	4618      	mov	r0, r3
 800837a:	f000 fc29 	bl	8008bd0 <vPortFree>
				vPortFree( pxTCB );
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 fc26 	bl	8008bd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008384:	e018      	b.n	80083b8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800838c:	2b01      	cmp	r3, #1
 800838e:	d103      	bne.n	8008398 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 fc1d 	bl	8008bd0 <vPortFree>
	}
 8008396:	e00f      	b.n	80083b8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800839e:	2b02      	cmp	r3, #2
 80083a0:	d00a      	beq.n	80083b8 <prvDeleteTCB+0x60>
	__asm volatile
 80083a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a6:	f383 8811 	msr	BASEPRI, r3
 80083aa:	f3bf 8f6f 	isb	sy
 80083ae:	f3bf 8f4f 	dsb	sy
 80083b2:	60fb      	str	r3, [r7, #12]
}
 80083b4:	bf00      	nop
 80083b6:	e7fe      	b.n	80083b6 <prvDeleteTCB+0x5e>
	}
 80083b8:	bf00      	nop
 80083ba:	3710      	adds	r7, #16
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083c6:	4b0c      	ldr	r3, [pc, #48]	; (80083f8 <prvResetNextTaskUnblockTime+0x38>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d104      	bne.n	80083da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80083d0:	4b0a      	ldr	r3, [pc, #40]	; (80083fc <prvResetNextTaskUnblockTime+0x3c>)
 80083d2:	f04f 32ff 	mov.w	r2, #4294967295
 80083d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80083d8:	e008      	b.n	80083ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083da:	4b07      	ldr	r3, [pc, #28]	; (80083f8 <prvResetNextTaskUnblockTime+0x38>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	68db      	ldr	r3, [r3, #12]
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	4a04      	ldr	r2, [pc, #16]	; (80083fc <prvResetNextTaskUnblockTime+0x3c>)
 80083ea:	6013      	str	r3, [r2, #0]
}
 80083ec:	bf00      	nop
 80083ee:	370c      	adds	r7, #12
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr
 80083f8:	20000aac 	.word	0x20000aac
 80083fc:	20000b14 	.word	0x20000b14

08008400 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008406:	4b0b      	ldr	r3, [pc, #44]	; (8008434 <xTaskGetSchedulerState+0x34>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d102      	bne.n	8008414 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800840e:	2301      	movs	r3, #1
 8008410:	607b      	str	r3, [r7, #4]
 8008412:	e008      	b.n	8008426 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008414:	4b08      	ldr	r3, [pc, #32]	; (8008438 <xTaskGetSchedulerState+0x38>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d102      	bne.n	8008422 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800841c:	2302      	movs	r3, #2
 800841e:	607b      	str	r3, [r7, #4]
 8008420:	e001      	b.n	8008426 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008422:	2300      	movs	r3, #0
 8008424:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008426:	687b      	ldr	r3, [r7, #4]
	}
 8008428:	4618      	mov	r0, r3
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr
 8008434:	20000b00 	.word	0x20000b00
 8008438:	20000b1c 	.word	0x20000b1c

0800843c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800843c:	b580      	push	{r7, lr}
 800843e:	b086      	sub	sp, #24
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008448:	2300      	movs	r3, #0
 800844a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d06e      	beq.n	8008530 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008452:	4b3a      	ldr	r3, [pc, #232]	; (800853c <xTaskPriorityDisinherit+0x100>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	693a      	ldr	r2, [r7, #16]
 8008458:	429a      	cmp	r2, r3
 800845a:	d00a      	beq.n	8008472 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800845c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008460:	f383 8811 	msr	BASEPRI, r3
 8008464:	f3bf 8f6f 	isb	sy
 8008468:	f3bf 8f4f 	dsb	sy
 800846c:	60fb      	str	r3, [r7, #12]
}
 800846e:	bf00      	nop
 8008470:	e7fe      	b.n	8008470 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008476:	2b00      	cmp	r3, #0
 8008478:	d10a      	bne.n	8008490 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800847a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847e:	f383 8811 	msr	BASEPRI, r3
 8008482:	f3bf 8f6f 	isb	sy
 8008486:	f3bf 8f4f 	dsb	sy
 800848a:	60bb      	str	r3, [r7, #8]
}
 800848c:	bf00      	nop
 800848e:	e7fe      	b.n	800848e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008494:	1e5a      	subs	r2, r3, #1
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d044      	beq.n	8008530 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d140      	bne.n	8008530 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	3304      	adds	r3, #4
 80084b2:	4618      	mov	r0, r3
 80084b4:	f7fe fe31 	bl	800711a <uxListRemove>
 80084b8:	4603      	mov	r3, r0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d115      	bne.n	80084ea <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084c2:	491f      	ldr	r1, [pc, #124]	; (8008540 <xTaskPriorityDisinherit+0x104>)
 80084c4:	4613      	mov	r3, r2
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	4413      	add	r3, r2
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	440b      	add	r3, r1
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d10a      	bne.n	80084ea <xTaskPriorityDisinherit+0xae>
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d8:	2201      	movs	r2, #1
 80084da:	fa02 f303 	lsl.w	r3, r2, r3
 80084de:	43da      	mvns	r2, r3
 80084e0:	4b18      	ldr	r3, [pc, #96]	; (8008544 <xTaskPriorityDisinherit+0x108>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4013      	ands	r3, r2
 80084e6:	4a17      	ldr	r2, [pc, #92]	; (8008544 <xTaskPriorityDisinherit+0x108>)
 80084e8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f6:	f1c3 0207 	rsb	r2, r3, #7
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008502:	2201      	movs	r2, #1
 8008504:	409a      	lsls	r2, r3
 8008506:	4b0f      	ldr	r3, [pc, #60]	; (8008544 <xTaskPriorityDisinherit+0x108>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4313      	orrs	r3, r2
 800850c:	4a0d      	ldr	r2, [pc, #52]	; (8008544 <xTaskPriorityDisinherit+0x108>)
 800850e:	6013      	str	r3, [r2, #0]
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008514:	4613      	mov	r3, r2
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	4413      	add	r3, r2
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	4a08      	ldr	r2, [pc, #32]	; (8008540 <xTaskPriorityDisinherit+0x104>)
 800851e:	441a      	add	r2, r3
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	3304      	adds	r3, #4
 8008524:	4619      	mov	r1, r3
 8008526:	4610      	mov	r0, r2
 8008528:	f7fe fd9a 	bl	8007060 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800852c:	2301      	movs	r3, #1
 800852e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008530:	697b      	ldr	r3, [r7, #20]
	}
 8008532:	4618      	mov	r0, r3
 8008534:	3718      	adds	r7, #24
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	200009f4 	.word	0x200009f4
 8008540:	200009f8 	.word	0x200009f8
 8008544:	20000afc 	.word	0x20000afc

08008548 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008552:	4b29      	ldr	r3, [pc, #164]	; (80085f8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008558:	4b28      	ldr	r3, [pc, #160]	; (80085fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	3304      	adds	r3, #4
 800855e:	4618      	mov	r0, r3
 8008560:	f7fe fddb 	bl	800711a <uxListRemove>
 8008564:	4603      	mov	r3, r0
 8008566:	2b00      	cmp	r3, #0
 8008568:	d10b      	bne.n	8008582 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800856a:	4b24      	ldr	r3, [pc, #144]	; (80085fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008570:	2201      	movs	r2, #1
 8008572:	fa02 f303 	lsl.w	r3, r2, r3
 8008576:	43da      	mvns	r2, r3
 8008578:	4b21      	ldr	r3, [pc, #132]	; (8008600 <prvAddCurrentTaskToDelayedList+0xb8>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4013      	ands	r3, r2
 800857e:	4a20      	ldr	r2, [pc, #128]	; (8008600 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008580:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008588:	d10a      	bne.n	80085a0 <prvAddCurrentTaskToDelayedList+0x58>
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d007      	beq.n	80085a0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008590:	4b1a      	ldr	r3, [pc, #104]	; (80085fc <prvAddCurrentTaskToDelayedList+0xb4>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	3304      	adds	r3, #4
 8008596:	4619      	mov	r1, r3
 8008598:	481a      	ldr	r0, [pc, #104]	; (8008604 <prvAddCurrentTaskToDelayedList+0xbc>)
 800859a:	f7fe fd61 	bl	8007060 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800859e:	e026      	b.n	80085ee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80085a0:	68fa      	ldr	r2, [r7, #12]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4413      	add	r3, r2
 80085a6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80085a8:	4b14      	ldr	r3, [pc, #80]	; (80085fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	68ba      	ldr	r2, [r7, #8]
 80085ae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80085b0:	68ba      	ldr	r2, [r7, #8]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d209      	bcs.n	80085cc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085b8:	4b13      	ldr	r3, [pc, #76]	; (8008608 <prvAddCurrentTaskToDelayedList+0xc0>)
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	4b0f      	ldr	r3, [pc, #60]	; (80085fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	3304      	adds	r3, #4
 80085c2:	4619      	mov	r1, r3
 80085c4:	4610      	mov	r0, r2
 80085c6:	f7fe fd6f 	bl	80070a8 <vListInsert>
}
 80085ca:	e010      	b.n	80085ee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085cc:	4b0f      	ldr	r3, [pc, #60]	; (800860c <prvAddCurrentTaskToDelayedList+0xc4>)
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	4b0a      	ldr	r3, [pc, #40]	; (80085fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	3304      	adds	r3, #4
 80085d6:	4619      	mov	r1, r3
 80085d8:	4610      	mov	r0, r2
 80085da:	f7fe fd65 	bl	80070a8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80085de:	4b0c      	ldr	r3, [pc, #48]	; (8008610 <prvAddCurrentTaskToDelayedList+0xc8>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	68ba      	ldr	r2, [r7, #8]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d202      	bcs.n	80085ee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80085e8:	4a09      	ldr	r2, [pc, #36]	; (8008610 <prvAddCurrentTaskToDelayedList+0xc8>)
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	6013      	str	r3, [r2, #0]
}
 80085ee:	bf00      	nop
 80085f0:	3710      	adds	r7, #16
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	20000af8 	.word	0x20000af8
 80085fc:	200009f4 	.word	0x200009f4
 8008600:	20000afc 	.word	0x20000afc
 8008604:	20000ae0 	.word	0x20000ae0
 8008608:	20000ab0 	.word	0x20000ab0
 800860c:	20000aac 	.word	0x20000aac
 8008610:	20000b14 	.word	0x20000b14

08008614 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008614:	b480      	push	{r7}
 8008616:	b085      	sub	sp, #20
 8008618:	af00      	add	r7, sp, #0
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	60b9      	str	r1, [r7, #8]
 800861e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	3b04      	subs	r3, #4
 8008624:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800862c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	3b04      	subs	r3, #4
 8008632:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	f023 0201 	bic.w	r2, r3, #1
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	3b04      	subs	r3, #4
 8008642:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008644:	4a0c      	ldr	r2, [pc, #48]	; (8008678 <pxPortInitialiseStack+0x64>)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	3b14      	subs	r3, #20
 800864e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008650:	687a      	ldr	r2, [r7, #4]
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	3b04      	subs	r3, #4
 800865a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f06f 0202 	mvn.w	r2, #2
 8008662:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	3b20      	subs	r3, #32
 8008668:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800866a:	68fb      	ldr	r3, [r7, #12]
}
 800866c:	4618      	mov	r0, r3
 800866e:	3714      	adds	r7, #20
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr
 8008678:	0800867d 	.word	0x0800867d

0800867c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800867c:	b480      	push	{r7}
 800867e:	b085      	sub	sp, #20
 8008680:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008682:	2300      	movs	r3, #0
 8008684:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008686:	4b12      	ldr	r3, [pc, #72]	; (80086d0 <prvTaskExitError+0x54>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800868e:	d00a      	beq.n	80086a6 <prvTaskExitError+0x2a>
	__asm volatile
 8008690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008694:	f383 8811 	msr	BASEPRI, r3
 8008698:	f3bf 8f6f 	isb	sy
 800869c:	f3bf 8f4f 	dsb	sy
 80086a0:	60fb      	str	r3, [r7, #12]
}
 80086a2:	bf00      	nop
 80086a4:	e7fe      	b.n	80086a4 <prvTaskExitError+0x28>
	__asm volatile
 80086a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086aa:	f383 8811 	msr	BASEPRI, r3
 80086ae:	f3bf 8f6f 	isb	sy
 80086b2:	f3bf 8f4f 	dsb	sy
 80086b6:	60bb      	str	r3, [r7, #8]
}
 80086b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80086ba:	bf00      	nop
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d0fc      	beq.n	80086bc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80086c2:	bf00      	nop
 80086c4:	bf00      	nop
 80086c6:	3714      	adds	r7, #20
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr
 80086d0:	20000020 	.word	0x20000020
	...

080086e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80086e0:	4b07      	ldr	r3, [pc, #28]	; (8008700 <pxCurrentTCBConst2>)
 80086e2:	6819      	ldr	r1, [r3, #0]
 80086e4:	6808      	ldr	r0, [r1, #0]
 80086e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ea:	f380 8809 	msr	PSP, r0
 80086ee:	f3bf 8f6f 	isb	sy
 80086f2:	f04f 0000 	mov.w	r0, #0
 80086f6:	f380 8811 	msr	BASEPRI, r0
 80086fa:	4770      	bx	lr
 80086fc:	f3af 8000 	nop.w

08008700 <pxCurrentTCBConst2>:
 8008700:	200009f4 	.word	0x200009f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008704:	bf00      	nop
 8008706:	bf00      	nop

08008708 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008708:	4808      	ldr	r0, [pc, #32]	; (800872c <prvPortStartFirstTask+0x24>)
 800870a:	6800      	ldr	r0, [r0, #0]
 800870c:	6800      	ldr	r0, [r0, #0]
 800870e:	f380 8808 	msr	MSP, r0
 8008712:	f04f 0000 	mov.w	r0, #0
 8008716:	f380 8814 	msr	CONTROL, r0
 800871a:	b662      	cpsie	i
 800871c:	b661      	cpsie	f
 800871e:	f3bf 8f4f 	dsb	sy
 8008722:	f3bf 8f6f 	isb	sy
 8008726:	df00      	svc	0
 8008728:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800872a:	bf00      	nop
 800872c:	e000ed08 	.word	0xe000ed08

08008730 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b086      	sub	sp, #24
 8008734:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008736:	4b46      	ldr	r3, [pc, #280]	; (8008850 <xPortStartScheduler+0x120>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a46      	ldr	r2, [pc, #280]	; (8008854 <xPortStartScheduler+0x124>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d10a      	bne.n	8008756 <xPortStartScheduler+0x26>
	__asm volatile
 8008740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008744:	f383 8811 	msr	BASEPRI, r3
 8008748:	f3bf 8f6f 	isb	sy
 800874c:	f3bf 8f4f 	dsb	sy
 8008750:	613b      	str	r3, [r7, #16]
}
 8008752:	bf00      	nop
 8008754:	e7fe      	b.n	8008754 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008756:	4b3e      	ldr	r3, [pc, #248]	; (8008850 <xPortStartScheduler+0x120>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a3f      	ldr	r2, [pc, #252]	; (8008858 <xPortStartScheduler+0x128>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d10a      	bne.n	8008776 <xPortStartScheduler+0x46>
	__asm volatile
 8008760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008764:	f383 8811 	msr	BASEPRI, r3
 8008768:	f3bf 8f6f 	isb	sy
 800876c:	f3bf 8f4f 	dsb	sy
 8008770:	60fb      	str	r3, [r7, #12]
}
 8008772:	bf00      	nop
 8008774:	e7fe      	b.n	8008774 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008776:	4b39      	ldr	r3, [pc, #228]	; (800885c <xPortStartScheduler+0x12c>)
 8008778:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	b2db      	uxtb	r3, r3
 8008780:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	22ff      	movs	r2, #255	; 0xff
 8008786:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	b2db      	uxtb	r3, r3
 800878e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008790:	78fb      	ldrb	r3, [r7, #3]
 8008792:	b2db      	uxtb	r3, r3
 8008794:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008798:	b2da      	uxtb	r2, r3
 800879a:	4b31      	ldr	r3, [pc, #196]	; (8008860 <xPortStartScheduler+0x130>)
 800879c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800879e:	4b31      	ldr	r3, [pc, #196]	; (8008864 <xPortStartScheduler+0x134>)
 80087a0:	2207      	movs	r2, #7
 80087a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80087a4:	e009      	b.n	80087ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80087a6:	4b2f      	ldr	r3, [pc, #188]	; (8008864 <xPortStartScheduler+0x134>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	3b01      	subs	r3, #1
 80087ac:	4a2d      	ldr	r2, [pc, #180]	; (8008864 <xPortStartScheduler+0x134>)
 80087ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80087b0:	78fb      	ldrb	r3, [r7, #3]
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	005b      	lsls	r3, r3, #1
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80087ba:	78fb      	ldrb	r3, [r7, #3]
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087c2:	2b80      	cmp	r3, #128	; 0x80
 80087c4:	d0ef      	beq.n	80087a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80087c6:	4b27      	ldr	r3, [pc, #156]	; (8008864 <xPortStartScheduler+0x134>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f1c3 0307 	rsb	r3, r3, #7
 80087ce:	2b04      	cmp	r3, #4
 80087d0:	d00a      	beq.n	80087e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80087d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d6:	f383 8811 	msr	BASEPRI, r3
 80087da:	f3bf 8f6f 	isb	sy
 80087de:	f3bf 8f4f 	dsb	sy
 80087e2:	60bb      	str	r3, [r7, #8]
}
 80087e4:	bf00      	nop
 80087e6:	e7fe      	b.n	80087e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80087e8:	4b1e      	ldr	r3, [pc, #120]	; (8008864 <xPortStartScheduler+0x134>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	021b      	lsls	r3, r3, #8
 80087ee:	4a1d      	ldr	r2, [pc, #116]	; (8008864 <xPortStartScheduler+0x134>)
 80087f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80087f2:	4b1c      	ldr	r3, [pc, #112]	; (8008864 <xPortStartScheduler+0x134>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80087fa:	4a1a      	ldr	r2, [pc, #104]	; (8008864 <xPortStartScheduler+0x134>)
 80087fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	b2da      	uxtb	r2, r3
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008806:	4b18      	ldr	r3, [pc, #96]	; (8008868 <xPortStartScheduler+0x138>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a17      	ldr	r2, [pc, #92]	; (8008868 <xPortStartScheduler+0x138>)
 800880c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008810:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008812:	4b15      	ldr	r3, [pc, #84]	; (8008868 <xPortStartScheduler+0x138>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a14      	ldr	r2, [pc, #80]	; (8008868 <xPortStartScheduler+0x138>)
 8008818:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800881c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800881e:	f000 f8dd 	bl	80089dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008822:	4b12      	ldr	r3, [pc, #72]	; (800886c <xPortStartScheduler+0x13c>)
 8008824:	2200      	movs	r2, #0
 8008826:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008828:	f000 f8fc 	bl	8008a24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800882c:	4b10      	ldr	r3, [pc, #64]	; (8008870 <xPortStartScheduler+0x140>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a0f      	ldr	r2, [pc, #60]	; (8008870 <xPortStartScheduler+0x140>)
 8008832:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008836:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008838:	f7ff ff66 	bl	8008708 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800883c:	f7ff fb9a 	bl	8007f74 <vTaskSwitchContext>
	prvTaskExitError();
 8008840:	f7ff ff1c 	bl	800867c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008844:	2300      	movs	r3, #0
}
 8008846:	4618      	mov	r0, r3
 8008848:	3718      	adds	r7, #24
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	e000ed00 	.word	0xe000ed00
 8008854:	410fc271 	.word	0x410fc271
 8008858:	410fc270 	.word	0x410fc270
 800885c:	e000e400 	.word	0xe000e400
 8008860:	20000b20 	.word	0x20000b20
 8008864:	20000b24 	.word	0x20000b24
 8008868:	e000ed20 	.word	0xe000ed20
 800886c:	20000020 	.word	0x20000020
 8008870:	e000ef34 	.word	0xe000ef34

08008874 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
	__asm volatile
 800887a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800887e:	f383 8811 	msr	BASEPRI, r3
 8008882:	f3bf 8f6f 	isb	sy
 8008886:	f3bf 8f4f 	dsb	sy
 800888a:	607b      	str	r3, [r7, #4]
}
 800888c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800888e:	4b0f      	ldr	r3, [pc, #60]	; (80088cc <vPortEnterCritical+0x58>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	3301      	adds	r3, #1
 8008894:	4a0d      	ldr	r2, [pc, #52]	; (80088cc <vPortEnterCritical+0x58>)
 8008896:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008898:	4b0c      	ldr	r3, [pc, #48]	; (80088cc <vPortEnterCritical+0x58>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	2b01      	cmp	r3, #1
 800889e:	d10f      	bne.n	80088c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80088a0:	4b0b      	ldr	r3, [pc, #44]	; (80088d0 <vPortEnterCritical+0x5c>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d00a      	beq.n	80088c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80088aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ae:	f383 8811 	msr	BASEPRI, r3
 80088b2:	f3bf 8f6f 	isb	sy
 80088b6:	f3bf 8f4f 	dsb	sy
 80088ba:	603b      	str	r3, [r7, #0]
}
 80088bc:	bf00      	nop
 80088be:	e7fe      	b.n	80088be <vPortEnterCritical+0x4a>
	}
}
 80088c0:	bf00      	nop
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr
 80088cc:	20000020 	.word	0x20000020
 80088d0:	e000ed04 	.word	0xe000ed04

080088d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80088da:	4b12      	ldr	r3, [pc, #72]	; (8008924 <vPortExitCritical+0x50>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d10a      	bne.n	80088f8 <vPortExitCritical+0x24>
	__asm volatile
 80088e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e6:	f383 8811 	msr	BASEPRI, r3
 80088ea:	f3bf 8f6f 	isb	sy
 80088ee:	f3bf 8f4f 	dsb	sy
 80088f2:	607b      	str	r3, [r7, #4]
}
 80088f4:	bf00      	nop
 80088f6:	e7fe      	b.n	80088f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80088f8:	4b0a      	ldr	r3, [pc, #40]	; (8008924 <vPortExitCritical+0x50>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	3b01      	subs	r3, #1
 80088fe:	4a09      	ldr	r2, [pc, #36]	; (8008924 <vPortExitCritical+0x50>)
 8008900:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008902:	4b08      	ldr	r3, [pc, #32]	; (8008924 <vPortExitCritical+0x50>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d105      	bne.n	8008916 <vPortExitCritical+0x42>
 800890a:	2300      	movs	r3, #0
 800890c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008914:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008916:	bf00      	nop
 8008918:	370c      	adds	r7, #12
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr
 8008922:	bf00      	nop
 8008924:	20000020 	.word	0x20000020
	...

08008930 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008930:	f3ef 8009 	mrs	r0, PSP
 8008934:	f3bf 8f6f 	isb	sy
 8008938:	4b15      	ldr	r3, [pc, #84]	; (8008990 <pxCurrentTCBConst>)
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	f01e 0f10 	tst.w	lr, #16
 8008940:	bf08      	it	eq
 8008942:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008946:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800894a:	6010      	str	r0, [r2, #0]
 800894c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008950:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008954:	f380 8811 	msr	BASEPRI, r0
 8008958:	f3bf 8f4f 	dsb	sy
 800895c:	f3bf 8f6f 	isb	sy
 8008960:	f7ff fb08 	bl	8007f74 <vTaskSwitchContext>
 8008964:	f04f 0000 	mov.w	r0, #0
 8008968:	f380 8811 	msr	BASEPRI, r0
 800896c:	bc09      	pop	{r0, r3}
 800896e:	6819      	ldr	r1, [r3, #0]
 8008970:	6808      	ldr	r0, [r1, #0]
 8008972:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008976:	f01e 0f10 	tst.w	lr, #16
 800897a:	bf08      	it	eq
 800897c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008980:	f380 8809 	msr	PSP, r0
 8008984:	f3bf 8f6f 	isb	sy
 8008988:	4770      	bx	lr
 800898a:	bf00      	nop
 800898c:	f3af 8000 	nop.w

08008990 <pxCurrentTCBConst>:
 8008990:	200009f4 	.word	0x200009f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008994:	bf00      	nop
 8008996:	bf00      	nop

08008998 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
	__asm volatile
 800899e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a2:	f383 8811 	msr	BASEPRI, r3
 80089a6:	f3bf 8f6f 	isb	sy
 80089aa:	f3bf 8f4f 	dsb	sy
 80089ae:	607b      	str	r3, [r7, #4]
}
 80089b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80089b2:	f7ff fa27 	bl	8007e04 <xTaskIncrementTick>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d003      	beq.n	80089c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80089bc:	4b06      	ldr	r3, [pc, #24]	; (80089d8 <SysTick_Handler+0x40>)
 80089be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089c2:	601a      	str	r2, [r3, #0]
 80089c4:	2300      	movs	r3, #0
 80089c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	f383 8811 	msr	BASEPRI, r3
}
 80089ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80089d0:	bf00      	nop
 80089d2:	3708      	adds	r7, #8
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}
 80089d8:	e000ed04 	.word	0xe000ed04

080089dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80089dc:	b480      	push	{r7}
 80089de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80089e0:	4b0b      	ldr	r3, [pc, #44]	; (8008a10 <vPortSetupTimerInterrupt+0x34>)
 80089e2:	2200      	movs	r2, #0
 80089e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80089e6:	4b0b      	ldr	r3, [pc, #44]	; (8008a14 <vPortSetupTimerInterrupt+0x38>)
 80089e8:	2200      	movs	r2, #0
 80089ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80089ec:	4b0a      	ldr	r3, [pc, #40]	; (8008a18 <vPortSetupTimerInterrupt+0x3c>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a0a      	ldr	r2, [pc, #40]	; (8008a1c <vPortSetupTimerInterrupt+0x40>)
 80089f2:	fba2 2303 	umull	r2, r3, r2, r3
 80089f6:	099b      	lsrs	r3, r3, #6
 80089f8:	4a09      	ldr	r2, [pc, #36]	; (8008a20 <vPortSetupTimerInterrupt+0x44>)
 80089fa:	3b01      	subs	r3, #1
 80089fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80089fe:	4b04      	ldr	r3, [pc, #16]	; (8008a10 <vPortSetupTimerInterrupt+0x34>)
 8008a00:	2207      	movs	r2, #7
 8008a02:	601a      	str	r2, [r3, #0]
}
 8008a04:	bf00      	nop
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr
 8008a0e:	bf00      	nop
 8008a10:	e000e010 	.word	0xe000e010
 8008a14:	e000e018 	.word	0xe000e018
 8008a18:	20000014 	.word	0x20000014
 8008a1c:	10624dd3 	.word	0x10624dd3
 8008a20:	e000e014 	.word	0xe000e014

08008a24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008a24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008a34 <vPortEnableVFP+0x10>
 8008a28:	6801      	ldr	r1, [r0, #0]
 8008a2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008a2e:	6001      	str	r1, [r0, #0]
 8008a30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008a32:	bf00      	nop
 8008a34:	e000ed88 	.word	0xe000ed88

08008a38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b08a      	sub	sp, #40	; 0x28
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008a40:	2300      	movs	r3, #0
 8008a42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008a44:	f7ff f934 	bl	8007cb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008a48:	4b5b      	ldr	r3, [pc, #364]	; (8008bb8 <pvPortMalloc+0x180>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d101      	bne.n	8008a54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008a50:	f000 f920 	bl	8008c94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008a54:	4b59      	ldr	r3, [pc, #356]	; (8008bbc <pvPortMalloc+0x184>)
 8008a56:	681a      	ldr	r2, [r3, #0]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	4013      	ands	r3, r2
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	f040 8093 	bne.w	8008b88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d01d      	beq.n	8008aa4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008a68:	2208      	movs	r2, #8
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	4413      	add	r3, r2
 8008a6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f003 0307 	and.w	r3, r3, #7
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d014      	beq.n	8008aa4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f023 0307 	bic.w	r3, r3, #7
 8008a80:	3308      	adds	r3, #8
 8008a82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f003 0307 	and.w	r3, r3, #7
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d00a      	beq.n	8008aa4 <pvPortMalloc+0x6c>
	__asm volatile
 8008a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a92:	f383 8811 	msr	BASEPRI, r3
 8008a96:	f3bf 8f6f 	isb	sy
 8008a9a:	f3bf 8f4f 	dsb	sy
 8008a9e:	617b      	str	r3, [r7, #20]
}
 8008aa0:	bf00      	nop
 8008aa2:	e7fe      	b.n	8008aa2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d06e      	beq.n	8008b88 <pvPortMalloc+0x150>
 8008aaa:	4b45      	ldr	r3, [pc, #276]	; (8008bc0 <pvPortMalloc+0x188>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d869      	bhi.n	8008b88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008ab4:	4b43      	ldr	r3, [pc, #268]	; (8008bc4 <pvPortMalloc+0x18c>)
 8008ab6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008ab8:	4b42      	ldr	r3, [pc, #264]	; (8008bc4 <pvPortMalloc+0x18c>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008abe:	e004      	b.n	8008aca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d903      	bls.n	8008adc <pvPortMalloc+0xa4>
 8008ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d1f1      	bne.n	8008ac0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008adc:	4b36      	ldr	r3, [pc, #216]	; (8008bb8 <pvPortMalloc+0x180>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d050      	beq.n	8008b88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008ae6:	6a3b      	ldr	r3, [r7, #32]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	2208      	movs	r2, #8
 8008aec:	4413      	add	r3, r2
 8008aee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	6a3b      	ldr	r3, [r7, #32]
 8008af6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afa:	685a      	ldr	r2, [r3, #4]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	1ad2      	subs	r2, r2, r3
 8008b00:	2308      	movs	r3, #8
 8008b02:	005b      	lsls	r3, r3, #1
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d91f      	bls.n	8008b48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	4413      	add	r3, r2
 8008b0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b10:	69bb      	ldr	r3, [r7, #24]
 8008b12:	f003 0307 	and.w	r3, r3, #7
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d00a      	beq.n	8008b30 <pvPortMalloc+0xf8>
	__asm volatile
 8008b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b1e:	f383 8811 	msr	BASEPRI, r3
 8008b22:	f3bf 8f6f 	isb	sy
 8008b26:	f3bf 8f4f 	dsb	sy
 8008b2a:	613b      	str	r3, [r7, #16]
}
 8008b2c:	bf00      	nop
 8008b2e:	e7fe      	b.n	8008b2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b32:	685a      	ldr	r2, [r3, #4]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	1ad2      	subs	r2, r2, r3
 8008b38:	69bb      	ldr	r3, [r7, #24]
 8008b3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008b42:	69b8      	ldr	r0, [r7, #24]
 8008b44:	f000 f908 	bl	8008d58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008b48:	4b1d      	ldr	r3, [pc, #116]	; (8008bc0 <pvPortMalloc+0x188>)
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	1ad3      	subs	r3, r2, r3
 8008b52:	4a1b      	ldr	r2, [pc, #108]	; (8008bc0 <pvPortMalloc+0x188>)
 8008b54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008b56:	4b1a      	ldr	r3, [pc, #104]	; (8008bc0 <pvPortMalloc+0x188>)
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	4b1b      	ldr	r3, [pc, #108]	; (8008bc8 <pvPortMalloc+0x190>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d203      	bcs.n	8008b6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008b62:	4b17      	ldr	r3, [pc, #92]	; (8008bc0 <pvPortMalloc+0x188>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a18      	ldr	r2, [pc, #96]	; (8008bc8 <pvPortMalloc+0x190>)
 8008b68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b6c:	685a      	ldr	r2, [r3, #4]
 8008b6e:	4b13      	ldr	r3, [pc, #76]	; (8008bbc <pvPortMalloc+0x184>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	431a      	orrs	r2, r3
 8008b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008b7e:	4b13      	ldr	r3, [pc, #76]	; (8008bcc <pvPortMalloc+0x194>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	3301      	adds	r3, #1
 8008b84:	4a11      	ldr	r2, [pc, #68]	; (8008bcc <pvPortMalloc+0x194>)
 8008b86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008b88:	f7ff f8a0 	bl	8007ccc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b8c:	69fb      	ldr	r3, [r7, #28]
 8008b8e:	f003 0307 	and.w	r3, r3, #7
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d00a      	beq.n	8008bac <pvPortMalloc+0x174>
	__asm volatile
 8008b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9a:	f383 8811 	msr	BASEPRI, r3
 8008b9e:	f3bf 8f6f 	isb	sy
 8008ba2:	f3bf 8f4f 	dsb	sy
 8008ba6:	60fb      	str	r3, [r7, #12]
}
 8008ba8:	bf00      	nop
 8008baa:	e7fe      	b.n	8008baa <pvPortMalloc+0x172>
	return pvReturn;
 8008bac:	69fb      	ldr	r3, [r7, #28]
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3728      	adds	r7, #40	; 0x28
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	20004730 	.word	0x20004730
 8008bbc:	20004744 	.word	0x20004744
 8008bc0:	20004734 	.word	0x20004734
 8008bc4:	20004728 	.word	0x20004728
 8008bc8:	20004738 	.word	0x20004738
 8008bcc:	2000473c 	.word	0x2000473c

08008bd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b086      	sub	sp, #24
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d04d      	beq.n	8008c7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008be2:	2308      	movs	r3, #8
 8008be4:	425b      	negs	r3, r3
 8008be6:	697a      	ldr	r2, [r7, #20]
 8008be8:	4413      	add	r3, r2
 8008bea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	685a      	ldr	r2, [r3, #4]
 8008bf4:	4b24      	ldr	r3, [pc, #144]	; (8008c88 <vPortFree+0xb8>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4013      	ands	r3, r2
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d10a      	bne.n	8008c14 <vPortFree+0x44>
	__asm volatile
 8008bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c02:	f383 8811 	msr	BASEPRI, r3
 8008c06:	f3bf 8f6f 	isb	sy
 8008c0a:	f3bf 8f4f 	dsb	sy
 8008c0e:	60fb      	str	r3, [r7, #12]
}
 8008c10:	bf00      	nop
 8008c12:	e7fe      	b.n	8008c12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d00a      	beq.n	8008c32 <vPortFree+0x62>
	__asm volatile
 8008c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c20:	f383 8811 	msr	BASEPRI, r3
 8008c24:	f3bf 8f6f 	isb	sy
 8008c28:	f3bf 8f4f 	dsb	sy
 8008c2c:	60bb      	str	r3, [r7, #8]
}
 8008c2e:	bf00      	nop
 8008c30:	e7fe      	b.n	8008c30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	685a      	ldr	r2, [r3, #4]
 8008c36:	4b14      	ldr	r3, [pc, #80]	; (8008c88 <vPortFree+0xb8>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4013      	ands	r3, r2
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d01e      	beq.n	8008c7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d11a      	bne.n	8008c7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	685a      	ldr	r2, [r3, #4]
 8008c4c:	4b0e      	ldr	r3, [pc, #56]	; (8008c88 <vPortFree+0xb8>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	43db      	mvns	r3, r3
 8008c52:	401a      	ands	r2, r3
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008c58:	f7ff f82a 	bl	8007cb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	685a      	ldr	r2, [r3, #4]
 8008c60:	4b0a      	ldr	r3, [pc, #40]	; (8008c8c <vPortFree+0xbc>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4413      	add	r3, r2
 8008c66:	4a09      	ldr	r2, [pc, #36]	; (8008c8c <vPortFree+0xbc>)
 8008c68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008c6a:	6938      	ldr	r0, [r7, #16]
 8008c6c:	f000 f874 	bl	8008d58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008c70:	4b07      	ldr	r3, [pc, #28]	; (8008c90 <vPortFree+0xc0>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	3301      	adds	r3, #1
 8008c76:	4a06      	ldr	r2, [pc, #24]	; (8008c90 <vPortFree+0xc0>)
 8008c78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008c7a:	f7ff f827 	bl	8007ccc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008c7e:	bf00      	nop
 8008c80:	3718      	adds	r7, #24
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	20004744 	.word	0x20004744
 8008c8c:	20004734 	.word	0x20004734
 8008c90:	20004740 	.word	0x20004740

08008c94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008c94:	b480      	push	{r7}
 8008c96:	b085      	sub	sp, #20
 8008c98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008c9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008c9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008ca0:	4b27      	ldr	r3, [pc, #156]	; (8008d40 <prvHeapInit+0xac>)
 8008ca2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f003 0307 	and.w	r3, r3, #7
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d00c      	beq.n	8008cc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	3307      	adds	r3, #7
 8008cb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f023 0307 	bic.w	r3, r3, #7
 8008cba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008cbc:	68ba      	ldr	r2, [r7, #8]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	1ad3      	subs	r3, r2, r3
 8008cc2:	4a1f      	ldr	r2, [pc, #124]	; (8008d40 <prvHeapInit+0xac>)
 8008cc4:	4413      	add	r3, r2
 8008cc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008ccc:	4a1d      	ldr	r2, [pc, #116]	; (8008d44 <prvHeapInit+0xb0>)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008cd2:	4b1c      	ldr	r3, [pc, #112]	; (8008d44 <prvHeapInit+0xb0>)
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	68ba      	ldr	r2, [r7, #8]
 8008cdc:	4413      	add	r3, r2
 8008cde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008ce0:	2208      	movs	r2, #8
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	1a9b      	subs	r3, r3, r2
 8008ce6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f023 0307 	bic.w	r3, r3, #7
 8008cee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	4a15      	ldr	r2, [pc, #84]	; (8008d48 <prvHeapInit+0xb4>)
 8008cf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008cf6:	4b14      	ldr	r3, [pc, #80]	; (8008d48 <prvHeapInit+0xb4>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008cfe:	4b12      	ldr	r3, [pc, #72]	; (8008d48 <prvHeapInit+0xb4>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	2200      	movs	r2, #0
 8008d04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	68fa      	ldr	r2, [r7, #12]
 8008d0e:	1ad2      	subs	r2, r2, r3
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008d14:	4b0c      	ldr	r3, [pc, #48]	; (8008d48 <prvHeapInit+0xb4>)
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	4a0a      	ldr	r2, [pc, #40]	; (8008d4c <prvHeapInit+0xb8>)
 8008d22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	4a09      	ldr	r2, [pc, #36]	; (8008d50 <prvHeapInit+0xbc>)
 8008d2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008d2c:	4b09      	ldr	r3, [pc, #36]	; (8008d54 <prvHeapInit+0xc0>)
 8008d2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008d32:	601a      	str	r2, [r3, #0]
}
 8008d34:	bf00      	nop
 8008d36:	3714      	adds	r7, #20
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr
 8008d40:	20000b28 	.word	0x20000b28
 8008d44:	20004728 	.word	0x20004728
 8008d48:	20004730 	.word	0x20004730
 8008d4c:	20004738 	.word	0x20004738
 8008d50:	20004734 	.word	0x20004734
 8008d54:	20004744 	.word	0x20004744

08008d58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b085      	sub	sp, #20
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008d60:	4b28      	ldr	r3, [pc, #160]	; (8008e04 <prvInsertBlockIntoFreeList+0xac>)
 8008d62:	60fb      	str	r3, [r7, #12]
 8008d64:	e002      	b.n	8008d6c <prvInsertBlockIntoFreeList+0x14>
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	60fb      	str	r3, [r7, #12]
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d8f7      	bhi.n	8008d66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	68ba      	ldr	r2, [r7, #8]
 8008d80:	4413      	add	r3, r2
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d108      	bne.n	8008d9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	685a      	ldr	r2, [r3, #4]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	441a      	add	r2, r3
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	68ba      	ldr	r2, [r7, #8]
 8008da4:	441a      	add	r2, r3
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d118      	bne.n	8008de0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	4b15      	ldr	r3, [pc, #84]	; (8008e08 <prvInsertBlockIntoFreeList+0xb0>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d00d      	beq.n	8008dd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	685a      	ldr	r2, [r3, #4]
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	441a      	add	r2, r3
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	601a      	str	r2, [r3, #0]
 8008dd4:	e008      	b.n	8008de8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008dd6:	4b0c      	ldr	r3, [pc, #48]	; (8008e08 <prvInsertBlockIntoFreeList+0xb0>)
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	601a      	str	r2, [r3, #0]
 8008dde:	e003      	b.n	8008de8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008de8:	68fa      	ldr	r2, [r7, #12]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d002      	beq.n	8008df6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008df6:	bf00      	nop
 8008df8:	3714      	adds	r7, #20
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr
 8008e02:	bf00      	nop
 8008e04:	20004728 	.word	0x20004728
 8008e08:	20004730 	.word	0x20004730

08008e0c <__libc_init_array>:
 8008e0c:	b570      	push	{r4, r5, r6, lr}
 8008e0e:	4d0d      	ldr	r5, [pc, #52]	; (8008e44 <__libc_init_array+0x38>)
 8008e10:	4c0d      	ldr	r4, [pc, #52]	; (8008e48 <__libc_init_array+0x3c>)
 8008e12:	1b64      	subs	r4, r4, r5
 8008e14:	10a4      	asrs	r4, r4, #2
 8008e16:	2600      	movs	r6, #0
 8008e18:	42a6      	cmp	r6, r4
 8008e1a:	d109      	bne.n	8008e30 <__libc_init_array+0x24>
 8008e1c:	4d0b      	ldr	r5, [pc, #44]	; (8008e4c <__libc_init_array+0x40>)
 8008e1e:	4c0c      	ldr	r4, [pc, #48]	; (8008e50 <__libc_init_array+0x44>)
 8008e20:	f000 f8f2 	bl	8009008 <_init>
 8008e24:	1b64      	subs	r4, r4, r5
 8008e26:	10a4      	asrs	r4, r4, #2
 8008e28:	2600      	movs	r6, #0
 8008e2a:	42a6      	cmp	r6, r4
 8008e2c:	d105      	bne.n	8008e3a <__libc_init_array+0x2e>
 8008e2e:	bd70      	pop	{r4, r5, r6, pc}
 8008e30:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e34:	4798      	blx	r3
 8008e36:	3601      	adds	r6, #1
 8008e38:	e7ee      	b.n	8008e18 <__libc_init_array+0xc>
 8008e3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e3e:	4798      	blx	r3
 8008e40:	3601      	adds	r6, #1
 8008e42:	e7f2      	b.n	8008e2a <__libc_init_array+0x1e>
 8008e44:	08009164 	.word	0x08009164
 8008e48:	08009164 	.word	0x08009164
 8008e4c:	08009164 	.word	0x08009164
 8008e50:	08009168 	.word	0x08009168

08008e54 <__retarget_lock_acquire_recursive>:
 8008e54:	4770      	bx	lr

08008e56 <__retarget_lock_release_recursive>:
 8008e56:	4770      	bx	lr

08008e58 <memcpy>:
 8008e58:	440a      	add	r2, r1
 8008e5a:	4291      	cmp	r1, r2
 8008e5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e60:	d100      	bne.n	8008e64 <memcpy+0xc>
 8008e62:	4770      	bx	lr
 8008e64:	b510      	push	{r4, lr}
 8008e66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e6e:	4291      	cmp	r1, r2
 8008e70:	d1f9      	bne.n	8008e66 <memcpy+0xe>
 8008e72:	bd10      	pop	{r4, pc}

08008e74 <memset>:
 8008e74:	4402      	add	r2, r0
 8008e76:	4603      	mov	r3, r0
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d100      	bne.n	8008e7e <memset+0xa>
 8008e7c:	4770      	bx	lr
 8008e7e:	f803 1b01 	strb.w	r1, [r3], #1
 8008e82:	e7f9      	b.n	8008e78 <memset+0x4>

08008e84 <cleanup_glue>:
 8008e84:	b538      	push	{r3, r4, r5, lr}
 8008e86:	460c      	mov	r4, r1
 8008e88:	6809      	ldr	r1, [r1, #0]
 8008e8a:	4605      	mov	r5, r0
 8008e8c:	b109      	cbz	r1, 8008e92 <cleanup_glue+0xe>
 8008e8e:	f7ff fff9 	bl	8008e84 <cleanup_glue>
 8008e92:	4621      	mov	r1, r4
 8008e94:	4628      	mov	r0, r5
 8008e96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e9a:	f000 b869 	b.w	8008f70 <_free_r>
	...

08008ea0 <_reclaim_reent>:
 8008ea0:	4b2c      	ldr	r3, [pc, #176]	; (8008f54 <_reclaim_reent+0xb4>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4283      	cmp	r3, r0
 8008ea6:	b570      	push	{r4, r5, r6, lr}
 8008ea8:	4604      	mov	r4, r0
 8008eaa:	d051      	beq.n	8008f50 <_reclaim_reent+0xb0>
 8008eac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008eae:	b143      	cbz	r3, 8008ec2 <_reclaim_reent+0x22>
 8008eb0:	68db      	ldr	r3, [r3, #12]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d14a      	bne.n	8008f4c <_reclaim_reent+0xac>
 8008eb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008eb8:	6819      	ldr	r1, [r3, #0]
 8008eba:	b111      	cbz	r1, 8008ec2 <_reclaim_reent+0x22>
 8008ebc:	4620      	mov	r0, r4
 8008ebe:	f000 f857 	bl	8008f70 <_free_r>
 8008ec2:	6961      	ldr	r1, [r4, #20]
 8008ec4:	b111      	cbz	r1, 8008ecc <_reclaim_reent+0x2c>
 8008ec6:	4620      	mov	r0, r4
 8008ec8:	f000 f852 	bl	8008f70 <_free_r>
 8008ecc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008ece:	b111      	cbz	r1, 8008ed6 <_reclaim_reent+0x36>
 8008ed0:	4620      	mov	r0, r4
 8008ed2:	f000 f84d 	bl	8008f70 <_free_r>
 8008ed6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008ed8:	b111      	cbz	r1, 8008ee0 <_reclaim_reent+0x40>
 8008eda:	4620      	mov	r0, r4
 8008edc:	f000 f848 	bl	8008f70 <_free_r>
 8008ee0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008ee2:	b111      	cbz	r1, 8008eea <_reclaim_reent+0x4a>
 8008ee4:	4620      	mov	r0, r4
 8008ee6:	f000 f843 	bl	8008f70 <_free_r>
 8008eea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008eec:	b111      	cbz	r1, 8008ef4 <_reclaim_reent+0x54>
 8008eee:	4620      	mov	r0, r4
 8008ef0:	f000 f83e 	bl	8008f70 <_free_r>
 8008ef4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008ef6:	b111      	cbz	r1, 8008efe <_reclaim_reent+0x5e>
 8008ef8:	4620      	mov	r0, r4
 8008efa:	f000 f839 	bl	8008f70 <_free_r>
 8008efe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008f00:	b111      	cbz	r1, 8008f08 <_reclaim_reent+0x68>
 8008f02:	4620      	mov	r0, r4
 8008f04:	f000 f834 	bl	8008f70 <_free_r>
 8008f08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f0a:	b111      	cbz	r1, 8008f12 <_reclaim_reent+0x72>
 8008f0c:	4620      	mov	r0, r4
 8008f0e:	f000 f82f 	bl	8008f70 <_free_r>
 8008f12:	69a3      	ldr	r3, [r4, #24]
 8008f14:	b1e3      	cbz	r3, 8008f50 <_reclaim_reent+0xb0>
 8008f16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008f18:	4620      	mov	r0, r4
 8008f1a:	4798      	blx	r3
 8008f1c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008f1e:	b1b9      	cbz	r1, 8008f50 <_reclaim_reent+0xb0>
 8008f20:	4620      	mov	r0, r4
 8008f22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008f26:	f7ff bfad 	b.w	8008e84 <cleanup_glue>
 8008f2a:	5949      	ldr	r1, [r1, r5]
 8008f2c:	b941      	cbnz	r1, 8008f40 <_reclaim_reent+0xa0>
 8008f2e:	3504      	adds	r5, #4
 8008f30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f32:	2d80      	cmp	r5, #128	; 0x80
 8008f34:	68d9      	ldr	r1, [r3, #12]
 8008f36:	d1f8      	bne.n	8008f2a <_reclaim_reent+0x8a>
 8008f38:	4620      	mov	r0, r4
 8008f3a:	f000 f819 	bl	8008f70 <_free_r>
 8008f3e:	e7ba      	b.n	8008eb6 <_reclaim_reent+0x16>
 8008f40:	680e      	ldr	r6, [r1, #0]
 8008f42:	4620      	mov	r0, r4
 8008f44:	f000 f814 	bl	8008f70 <_free_r>
 8008f48:	4631      	mov	r1, r6
 8008f4a:	e7ef      	b.n	8008f2c <_reclaim_reent+0x8c>
 8008f4c:	2500      	movs	r5, #0
 8008f4e:	e7ef      	b.n	8008f30 <_reclaim_reent+0x90>
 8008f50:	bd70      	pop	{r4, r5, r6, pc}
 8008f52:	bf00      	nop
 8008f54:	20000024 	.word	0x20000024

08008f58 <__malloc_lock>:
 8008f58:	4801      	ldr	r0, [pc, #4]	; (8008f60 <__malloc_lock+0x8>)
 8008f5a:	f7ff bf7b 	b.w	8008e54 <__retarget_lock_acquire_recursive>
 8008f5e:	bf00      	nop
 8008f60:	20004748 	.word	0x20004748

08008f64 <__malloc_unlock>:
 8008f64:	4801      	ldr	r0, [pc, #4]	; (8008f6c <__malloc_unlock+0x8>)
 8008f66:	f7ff bf76 	b.w	8008e56 <__retarget_lock_release_recursive>
 8008f6a:	bf00      	nop
 8008f6c:	20004748 	.word	0x20004748

08008f70 <_free_r>:
 8008f70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f72:	2900      	cmp	r1, #0
 8008f74:	d044      	beq.n	8009000 <_free_r+0x90>
 8008f76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f7a:	9001      	str	r0, [sp, #4]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	f1a1 0404 	sub.w	r4, r1, #4
 8008f82:	bfb8      	it	lt
 8008f84:	18e4      	addlt	r4, r4, r3
 8008f86:	f7ff ffe7 	bl	8008f58 <__malloc_lock>
 8008f8a:	4a1e      	ldr	r2, [pc, #120]	; (8009004 <_free_r+0x94>)
 8008f8c:	9801      	ldr	r0, [sp, #4]
 8008f8e:	6813      	ldr	r3, [r2, #0]
 8008f90:	b933      	cbnz	r3, 8008fa0 <_free_r+0x30>
 8008f92:	6063      	str	r3, [r4, #4]
 8008f94:	6014      	str	r4, [r2, #0]
 8008f96:	b003      	add	sp, #12
 8008f98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f9c:	f7ff bfe2 	b.w	8008f64 <__malloc_unlock>
 8008fa0:	42a3      	cmp	r3, r4
 8008fa2:	d908      	bls.n	8008fb6 <_free_r+0x46>
 8008fa4:	6825      	ldr	r5, [r4, #0]
 8008fa6:	1961      	adds	r1, r4, r5
 8008fa8:	428b      	cmp	r3, r1
 8008faa:	bf01      	itttt	eq
 8008fac:	6819      	ldreq	r1, [r3, #0]
 8008fae:	685b      	ldreq	r3, [r3, #4]
 8008fb0:	1949      	addeq	r1, r1, r5
 8008fb2:	6021      	streq	r1, [r4, #0]
 8008fb4:	e7ed      	b.n	8008f92 <_free_r+0x22>
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	b10b      	cbz	r3, 8008fc0 <_free_r+0x50>
 8008fbc:	42a3      	cmp	r3, r4
 8008fbe:	d9fa      	bls.n	8008fb6 <_free_r+0x46>
 8008fc0:	6811      	ldr	r1, [r2, #0]
 8008fc2:	1855      	adds	r5, r2, r1
 8008fc4:	42a5      	cmp	r5, r4
 8008fc6:	d10b      	bne.n	8008fe0 <_free_r+0x70>
 8008fc8:	6824      	ldr	r4, [r4, #0]
 8008fca:	4421      	add	r1, r4
 8008fcc:	1854      	adds	r4, r2, r1
 8008fce:	42a3      	cmp	r3, r4
 8008fd0:	6011      	str	r1, [r2, #0]
 8008fd2:	d1e0      	bne.n	8008f96 <_free_r+0x26>
 8008fd4:	681c      	ldr	r4, [r3, #0]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	6053      	str	r3, [r2, #4]
 8008fda:	4421      	add	r1, r4
 8008fdc:	6011      	str	r1, [r2, #0]
 8008fde:	e7da      	b.n	8008f96 <_free_r+0x26>
 8008fe0:	d902      	bls.n	8008fe8 <_free_r+0x78>
 8008fe2:	230c      	movs	r3, #12
 8008fe4:	6003      	str	r3, [r0, #0]
 8008fe6:	e7d6      	b.n	8008f96 <_free_r+0x26>
 8008fe8:	6825      	ldr	r5, [r4, #0]
 8008fea:	1961      	adds	r1, r4, r5
 8008fec:	428b      	cmp	r3, r1
 8008fee:	bf04      	itt	eq
 8008ff0:	6819      	ldreq	r1, [r3, #0]
 8008ff2:	685b      	ldreq	r3, [r3, #4]
 8008ff4:	6063      	str	r3, [r4, #4]
 8008ff6:	bf04      	itt	eq
 8008ff8:	1949      	addeq	r1, r1, r5
 8008ffa:	6021      	streq	r1, [r4, #0]
 8008ffc:	6054      	str	r4, [r2, #4]
 8008ffe:	e7ca      	b.n	8008f96 <_free_r+0x26>
 8009000:	b003      	add	sp, #12
 8009002:	bd30      	pop	{r4, r5, pc}
 8009004:	2000474c 	.word	0x2000474c

08009008 <_init>:
 8009008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800900a:	bf00      	nop
 800900c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800900e:	bc08      	pop	{r3}
 8009010:	469e      	mov	lr, r3
 8009012:	4770      	bx	lr

08009014 <_fini>:
 8009014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009016:	bf00      	nop
 8009018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800901a:	bc08      	pop	{r3}
 800901c:	469e      	mov	lr, r3
 800901e:	4770      	bx	lr
