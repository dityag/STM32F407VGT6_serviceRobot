
Electronics_ServiceRobot_F407VGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  0800ae24  0800ae24  0001ae24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b250  0800b250  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800b250  0800b250  0001b250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b258  0800b258  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b258  0800b258  0001b258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b260  0800b260  0001b260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800b264  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          00005248  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200052c8  200052c8  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f8a6  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004185  00000000  00000000  0003f956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001618  00000000  00000000  00043ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001498  00000000  00000000  000450f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000263a2  00000000  00000000  00046590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a335  00000000  00000000  0006c932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbffe  00000000  00000000  00086c67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00162c65  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000061d4  00000000  00000000  00162cb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ae0c 	.word	0x0800ae0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800ae0c 	.word	0x0800ae0c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_dmul>:
 80001e0:	b570      	push	{r4, r5, r6, lr}
 80001e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001ee:	bf1d      	ittte	ne
 80001f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001f4:	ea94 0f0c 	teqne	r4, ip
 80001f8:	ea95 0f0c 	teqne	r5, ip
 80001fc:	f000 f8de 	bleq	80003bc <__aeabi_dmul+0x1dc>
 8000200:	442c      	add	r4, r5
 8000202:	ea81 0603 	eor.w	r6, r1, r3
 8000206:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800020a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800020e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000212:	bf18      	it	ne
 8000214:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000218:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800021c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000220:	d038      	beq.n	8000294 <__aeabi_dmul+0xb4>
 8000222:	fba0 ce02 	umull	ip, lr, r0, r2
 8000226:	f04f 0500 	mov.w	r5, #0
 800022a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800022e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000232:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000236:	f04f 0600 	mov.w	r6, #0
 800023a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800023e:	f09c 0f00 	teq	ip, #0
 8000242:	bf18      	it	ne
 8000244:	f04e 0e01 	orrne.w	lr, lr, #1
 8000248:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800024c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000250:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000254:	d204      	bcs.n	8000260 <__aeabi_dmul+0x80>
 8000256:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800025a:	416d      	adcs	r5, r5
 800025c:	eb46 0606 	adc.w	r6, r6, r6
 8000260:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000264:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000268:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800026c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000270:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000274:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000278:	bf88      	it	hi
 800027a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800027e:	d81e      	bhi.n	80002be <__aeabi_dmul+0xde>
 8000280:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000284:	bf08      	it	eq
 8000286:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800028a:	f150 0000 	adcs.w	r0, r0, #0
 800028e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000298:	ea46 0101 	orr.w	r1, r6, r1
 800029c:	ea40 0002 	orr.w	r0, r0, r2
 80002a0:	ea81 0103 	eor.w	r1, r1, r3
 80002a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a8:	bfc2      	ittt	gt
 80002aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002b2:	bd70      	popgt	{r4, r5, r6, pc}
 80002b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b8:	f04f 0e00 	mov.w	lr, #0
 80002bc:	3c01      	subs	r4, #1
 80002be:	f300 80ab 	bgt.w	8000418 <__aeabi_dmul+0x238>
 80002c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002c6:	bfde      	ittt	le
 80002c8:	2000      	movle	r0, #0
 80002ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002ce:	bd70      	pople	{r4, r5, r6, pc}
 80002d0:	f1c4 0400 	rsb	r4, r4, #0
 80002d4:	3c20      	subs	r4, #32
 80002d6:	da35      	bge.n	8000344 <__aeabi_dmul+0x164>
 80002d8:	340c      	adds	r4, #12
 80002da:	dc1b      	bgt.n	8000314 <__aeabi_dmul+0x134>
 80002dc:	f104 0414 	add.w	r4, r4, #20
 80002e0:	f1c4 0520 	rsb	r5, r4, #32
 80002e4:	fa00 f305 	lsl.w	r3, r0, r5
 80002e8:	fa20 f004 	lsr.w	r0, r0, r4
 80002ec:	fa01 f205 	lsl.w	r2, r1, r5
 80002f0:	ea40 0002 	orr.w	r0, r0, r2
 80002f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000300:	fa21 f604 	lsr.w	r6, r1, r4
 8000304:	eb42 0106 	adc.w	r1, r2, r6
 8000308:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800030c:	bf08      	it	eq
 800030e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000312:	bd70      	pop	{r4, r5, r6, pc}
 8000314:	f1c4 040c 	rsb	r4, r4, #12
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f304 	lsl.w	r3, r0, r4
 8000320:	fa20 f005 	lsr.w	r0, r0, r5
 8000324:	fa01 f204 	lsl.w	r2, r1, r4
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000330:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800033c:	bf08      	it	eq
 800033e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f1c4 0520 	rsb	r5, r4, #32
 8000348:	fa00 f205 	lsl.w	r2, r0, r5
 800034c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000350:	fa20 f304 	lsr.w	r3, r0, r4
 8000354:	fa01 f205 	lsl.w	r2, r1, r5
 8000358:	ea43 0302 	orr.w	r3, r3, r2
 800035c:	fa21 f004 	lsr.w	r0, r1, r4
 8000360:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000364:	fa21 f204 	lsr.w	r2, r1, r4
 8000368:	ea20 0002 	bic.w	r0, r0, r2
 800036c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f094 0f00 	teq	r4, #0
 8000380:	d10f      	bne.n	80003a2 <__aeabi_dmul+0x1c2>
 8000382:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000386:	0040      	lsls	r0, r0, #1
 8000388:	eb41 0101 	adc.w	r1, r1, r1
 800038c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000390:	bf08      	it	eq
 8000392:	3c01      	subeq	r4, #1
 8000394:	d0f7      	beq.n	8000386 <__aeabi_dmul+0x1a6>
 8000396:	ea41 0106 	orr.w	r1, r1, r6
 800039a:	f095 0f00 	teq	r5, #0
 800039e:	bf18      	it	ne
 80003a0:	4770      	bxne	lr
 80003a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003a6:	0052      	lsls	r2, r2, #1
 80003a8:	eb43 0303 	adc.w	r3, r3, r3
 80003ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003b0:	bf08      	it	eq
 80003b2:	3d01      	subeq	r5, #1
 80003b4:	d0f7      	beq.n	80003a6 <__aeabi_dmul+0x1c6>
 80003b6:	ea43 0306 	orr.w	r3, r3, r6
 80003ba:	4770      	bx	lr
 80003bc:	ea94 0f0c 	teq	r4, ip
 80003c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003c4:	bf18      	it	ne
 80003c6:	ea95 0f0c 	teqne	r5, ip
 80003ca:	d00c      	beq.n	80003e6 <__aeabi_dmul+0x206>
 80003cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d0:	bf18      	it	ne
 80003d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003d6:	d1d1      	bne.n	800037c <__aeabi_dmul+0x19c>
 80003d8:	ea81 0103 	eor.w	r1, r1, r3
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	f04f 0000 	mov.w	r0, #0
 80003e4:	bd70      	pop	{r4, r5, r6, pc}
 80003e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003ea:	bf06      	itte	eq
 80003ec:	4610      	moveq	r0, r2
 80003ee:	4619      	moveq	r1, r3
 80003f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003f4:	d019      	beq.n	800042a <__aeabi_dmul+0x24a>
 80003f6:	ea94 0f0c 	teq	r4, ip
 80003fa:	d102      	bne.n	8000402 <__aeabi_dmul+0x222>
 80003fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000400:	d113      	bne.n	800042a <__aeabi_dmul+0x24a>
 8000402:	ea95 0f0c 	teq	r5, ip
 8000406:	d105      	bne.n	8000414 <__aeabi_dmul+0x234>
 8000408:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800040c:	bf1c      	itt	ne
 800040e:	4610      	movne	r0, r2
 8000410:	4619      	movne	r1, r3
 8000412:	d10a      	bne.n	800042a <__aeabi_dmul+0x24a>
 8000414:	ea81 0103 	eor.w	r1, r1, r3
 8000418:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800041c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd70      	pop	{r4, r5, r6, pc}
 800042a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800042e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000432:	bd70      	pop	{r4, r5, r6, pc}

08000434 <__aeabi_drsub>:
 8000434:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000438:	e002      	b.n	8000440 <__adddf3>
 800043a:	bf00      	nop

0800043c <__aeabi_dsub>:
 800043c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000440 <__adddf3>:
 8000440:	b530      	push	{r4, r5, lr}
 8000442:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000446:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800044a:	ea94 0f05 	teq	r4, r5
 800044e:	bf08      	it	eq
 8000450:	ea90 0f02 	teqeq	r0, r2
 8000454:	bf1f      	itttt	ne
 8000456:	ea54 0c00 	orrsne.w	ip, r4, r0
 800045a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800045e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000462:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000466:	f000 80e2 	beq.w	800062e <__adddf3+0x1ee>
 800046a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800046e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000472:	bfb8      	it	lt
 8000474:	426d      	neglt	r5, r5
 8000476:	dd0c      	ble.n	8000492 <__adddf3+0x52>
 8000478:	442c      	add	r4, r5
 800047a:	ea80 0202 	eor.w	r2, r0, r2
 800047e:	ea81 0303 	eor.w	r3, r1, r3
 8000482:	ea82 0000 	eor.w	r0, r2, r0
 8000486:	ea83 0101 	eor.w	r1, r3, r1
 800048a:	ea80 0202 	eor.w	r2, r0, r2
 800048e:	ea81 0303 	eor.w	r3, r1, r3
 8000492:	2d36      	cmp	r5, #54	; 0x36
 8000494:	bf88      	it	hi
 8000496:	bd30      	pophi	{r4, r5, pc}
 8000498:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800049c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a8:	d002      	beq.n	80004b0 <__adddf3+0x70>
 80004aa:	4240      	negs	r0, r0
 80004ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004bc:	d002      	beq.n	80004c4 <__adddf3+0x84>
 80004be:	4252      	negs	r2, r2
 80004c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004c4:	ea94 0f05 	teq	r4, r5
 80004c8:	f000 80a7 	beq.w	800061a <__adddf3+0x1da>
 80004cc:	f1a4 0401 	sub.w	r4, r4, #1
 80004d0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004d4:	db0d      	blt.n	80004f2 <__adddf3+0xb2>
 80004d6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004da:	fa22 f205 	lsr.w	r2, r2, r5
 80004de:	1880      	adds	r0, r0, r2
 80004e0:	f141 0100 	adc.w	r1, r1, #0
 80004e4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e8:	1880      	adds	r0, r0, r2
 80004ea:	fa43 f305 	asr.w	r3, r3, r5
 80004ee:	4159      	adcs	r1, r3
 80004f0:	e00e      	b.n	8000510 <__adddf3+0xd0>
 80004f2:	f1a5 0520 	sub.w	r5, r5, #32
 80004f6:	f10e 0e20 	add.w	lr, lr, #32
 80004fa:	2a01      	cmp	r2, #1
 80004fc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000500:	bf28      	it	cs
 8000502:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000506:	fa43 f305 	asr.w	r3, r3, r5
 800050a:	18c0      	adds	r0, r0, r3
 800050c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	d507      	bpl.n	8000526 <__adddf3+0xe6>
 8000516:	f04f 0e00 	mov.w	lr, #0
 800051a:	f1dc 0c00 	rsbs	ip, ip, #0
 800051e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000522:	eb6e 0101 	sbc.w	r1, lr, r1
 8000526:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800052a:	d31b      	bcc.n	8000564 <__adddf3+0x124>
 800052c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000530:	d30c      	bcc.n	800054c <__adddf3+0x10c>
 8000532:	0849      	lsrs	r1, r1, #1
 8000534:	ea5f 0030 	movs.w	r0, r0, rrx
 8000538:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800053c:	f104 0401 	add.w	r4, r4, #1
 8000540:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000544:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000548:	f080 809a 	bcs.w	8000680 <__adddf3+0x240>
 800054c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000550:	bf08      	it	eq
 8000552:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000556:	f150 0000 	adcs.w	r0, r0, #0
 800055a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800055e:	ea41 0105 	orr.w	r1, r1, r5
 8000562:	bd30      	pop	{r4, r5, pc}
 8000564:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000568:	4140      	adcs	r0, r0
 800056a:	eb41 0101 	adc.w	r1, r1, r1
 800056e:	3c01      	subs	r4, #1
 8000570:	bf28      	it	cs
 8000572:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000576:	d2e9      	bcs.n	800054c <__adddf3+0x10c>
 8000578:	f091 0f00 	teq	r1, #0
 800057c:	bf04      	itt	eq
 800057e:	4601      	moveq	r1, r0
 8000580:	2000      	moveq	r0, #0
 8000582:	fab1 f381 	clz	r3, r1
 8000586:	bf08      	it	eq
 8000588:	3320      	addeq	r3, #32
 800058a:	f1a3 030b 	sub.w	r3, r3, #11
 800058e:	f1b3 0220 	subs.w	r2, r3, #32
 8000592:	da0c      	bge.n	80005ae <__adddf3+0x16e>
 8000594:	320c      	adds	r2, #12
 8000596:	dd08      	ble.n	80005aa <__adddf3+0x16a>
 8000598:	f102 0c14 	add.w	ip, r2, #20
 800059c:	f1c2 020c 	rsb	r2, r2, #12
 80005a0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005a4:	fa21 f102 	lsr.w	r1, r1, r2
 80005a8:	e00c      	b.n	80005c4 <__adddf3+0x184>
 80005aa:	f102 0214 	add.w	r2, r2, #20
 80005ae:	bfd8      	it	le
 80005b0:	f1c2 0c20 	rsble	ip, r2, #32
 80005b4:	fa01 f102 	lsl.w	r1, r1, r2
 80005b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005bc:	bfdc      	itt	le
 80005be:	ea41 010c 	orrle.w	r1, r1, ip
 80005c2:	4090      	lslle	r0, r2
 80005c4:	1ae4      	subs	r4, r4, r3
 80005c6:	bfa2      	ittt	ge
 80005c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005cc:	4329      	orrge	r1, r5
 80005ce:	bd30      	popge	{r4, r5, pc}
 80005d0:	ea6f 0404 	mvn.w	r4, r4
 80005d4:	3c1f      	subs	r4, #31
 80005d6:	da1c      	bge.n	8000612 <__adddf3+0x1d2>
 80005d8:	340c      	adds	r4, #12
 80005da:	dc0e      	bgt.n	80005fa <__adddf3+0x1ba>
 80005dc:	f104 0414 	add.w	r4, r4, #20
 80005e0:	f1c4 0220 	rsb	r2, r4, #32
 80005e4:	fa20 f004 	lsr.w	r0, r0, r4
 80005e8:	fa01 f302 	lsl.w	r3, r1, r2
 80005ec:	ea40 0003 	orr.w	r0, r0, r3
 80005f0:	fa21 f304 	lsr.w	r3, r1, r4
 80005f4:	ea45 0103 	orr.w	r1, r5, r3
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	f1c4 040c 	rsb	r4, r4, #12
 80005fe:	f1c4 0220 	rsb	r2, r4, #32
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 f304 	lsl.w	r3, r1, r4
 800060a:	ea40 0003 	orr.w	r0, r0, r3
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	fa21 f004 	lsr.w	r0, r1, r4
 8000616:	4629      	mov	r1, r5
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	f094 0f00 	teq	r4, #0
 800061e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000622:	bf06      	itte	eq
 8000624:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000628:	3401      	addeq	r4, #1
 800062a:	3d01      	subne	r5, #1
 800062c:	e74e      	b.n	80004cc <__adddf3+0x8c>
 800062e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000632:	bf18      	it	ne
 8000634:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000638:	d029      	beq.n	800068e <__adddf3+0x24e>
 800063a:	ea94 0f05 	teq	r4, r5
 800063e:	bf08      	it	eq
 8000640:	ea90 0f02 	teqeq	r0, r2
 8000644:	d005      	beq.n	8000652 <__adddf3+0x212>
 8000646:	ea54 0c00 	orrs.w	ip, r4, r0
 800064a:	bf04      	itt	eq
 800064c:	4619      	moveq	r1, r3
 800064e:	4610      	moveq	r0, r2
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	ea91 0f03 	teq	r1, r3
 8000656:	bf1e      	ittt	ne
 8000658:	2100      	movne	r1, #0
 800065a:	2000      	movne	r0, #0
 800065c:	bd30      	popne	{r4, r5, pc}
 800065e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000662:	d105      	bne.n	8000670 <__adddf3+0x230>
 8000664:	0040      	lsls	r0, r0, #1
 8000666:	4149      	adcs	r1, r1
 8000668:	bf28      	it	cs
 800066a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd30      	pop	{r4, r5, pc}
 8000670:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000674:	bf3c      	itt	cc
 8000676:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800067a:	bd30      	popcc	{r4, r5, pc}
 800067c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000680:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000684:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000688:	f04f 0000 	mov.w	r0, #0
 800068c:	bd30      	pop	{r4, r5, pc}
 800068e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000692:	bf1a      	itte	ne
 8000694:	4619      	movne	r1, r3
 8000696:	4610      	movne	r0, r2
 8000698:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800069c:	bf1c      	itt	ne
 800069e:	460b      	movne	r3, r1
 80006a0:	4602      	movne	r2, r0
 80006a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006a6:	bf06      	itte	eq
 80006a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006ac:	ea91 0f03 	teqeq	r1, r3
 80006b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	bf00      	nop

080006b8 <__aeabi_ui2d>:
 80006b8:	f090 0f00 	teq	r0, #0
 80006bc:	bf04      	itt	eq
 80006be:	2100      	moveq	r1, #0
 80006c0:	4770      	bxeq	lr
 80006c2:	b530      	push	{r4, r5, lr}
 80006c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006cc:	f04f 0500 	mov.w	r5, #0
 80006d0:	f04f 0100 	mov.w	r1, #0
 80006d4:	e750      	b.n	8000578 <__adddf3+0x138>
 80006d6:	bf00      	nop

080006d8 <__aeabi_i2d>:
 80006d8:	f090 0f00 	teq	r0, #0
 80006dc:	bf04      	itt	eq
 80006de:	2100      	moveq	r1, #0
 80006e0:	4770      	bxeq	lr
 80006e2:	b530      	push	{r4, r5, lr}
 80006e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006f0:	bf48      	it	mi
 80006f2:	4240      	negmi	r0, r0
 80006f4:	f04f 0100 	mov.w	r1, #0
 80006f8:	e73e      	b.n	8000578 <__adddf3+0x138>
 80006fa:	bf00      	nop

080006fc <__aeabi_f2d>:
 80006fc:	0042      	lsls	r2, r0, #1
 80006fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000702:	ea4f 0131 	mov.w	r1, r1, rrx
 8000706:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800070a:	bf1f      	itttt	ne
 800070c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000710:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000714:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000718:	4770      	bxne	lr
 800071a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800071e:	bf08      	it	eq
 8000720:	4770      	bxeq	lr
 8000722:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000726:	bf04      	itt	eq
 8000728:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800072c:	4770      	bxeq	lr
 800072e:	b530      	push	{r4, r5, lr}
 8000730:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000734:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800073c:	e71c      	b.n	8000578 <__adddf3+0x138>
 800073e:	bf00      	nop

08000740 <__aeabi_ul2d>:
 8000740:	ea50 0201 	orrs.w	r2, r0, r1
 8000744:	bf08      	it	eq
 8000746:	4770      	bxeq	lr
 8000748:	b530      	push	{r4, r5, lr}
 800074a:	f04f 0500 	mov.w	r5, #0
 800074e:	e00a      	b.n	8000766 <__aeabi_l2d+0x16>

08000750 <__aeabi_l2d>:
 8000750:	ea50 0201 	orrs.w	r2, r0, r1
 8000754:	bf08      	it	eq
 8000756:	4770      	bxeq	lr
 8000758:	b530      	push	{r4, r5, lr}
 800075a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800075e:	d502      	bpl.n	8000766 <__aeabi_l2d+0x16>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800076a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000772:	f43f aed8 	beq.w	8000526 <__adddf3+0xe6>
 8000776:	f04f 0203 	mov.w	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000786:	bf18      	it	ne
 8000788:	3203      	addne	r2, #3
 800078a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800078e:	f1c2 0320 	rsb	r3, r2, #32
 8000792:	fa00 fc03 	lsl.w	ip, r0, r3
 8000796:	fa20 f002 	lsr.w	r0, r0, r2
 800079a:	fa01 fe03 	lsl.w	lr, r1, r3
 800079e:	ea40 000e 	orr.w	r0, r0, lr
 80007a2:	fa21 f102 	lsr.w	r1, r1, r2
 80007a6:	4414      	add	r4, r2
 80007a8:	e6bd      	b.n	8000526 <__adddf3+0xe6>
 80007aa:	bf00      	nop

080007ac <__aeabi_d2iz>:
 80007ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007b4:	d215      	bcs.n	80007e2 <__aeabi_d2iz+0x36>
 80007b6:	d511      	bpl.n	80007dc <__aeabi_d2iz+0x30>
 80007b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007c0:	d912      	bls.n	80007e8 <__aeabi_d2iz+0x3c>
 80007c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80007d2:	fa23 f002 	lsr.w	r0, r3, r2
 80007d6:	bf18      	it	ne
 80007d8:	4240      	negne	r0, r0
 80007da:	4770      	bx	lr
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	4770      	bx	lr
 80007e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007e6:	d105      	bne.n	80007f4 <__aeabi_d2iz+0x48>
 80007e8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80007ec:	bf08      	it	eq
 80007ee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80007f2:	4770      	bx	lr
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop

080007fc <__aeabi_d2f>:
 80007fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000800:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000804:	bf24      	itt	cs
 8000806:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800080a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800080e:	d90d      	bls.n	800082c <__aeabi_d2f+0x30>
 8000810:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000814:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000818:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800081c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000820:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000824:	bf08      	it	eq
 8000826:	f020 0001 	biceq.w	r0, r0, #1
 800082a:	4770      	bx	lr
 800082c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000830:	d121      	bne.n	8000876 <__aeabi_d2f+0x7a>
 8000832:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000836:	bfbc      	itt	lt
 8000838:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800083c:	4770      	bxlt	lr
 800083e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000842:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000846:	f1c2 0218 	rsb	r2, r2, #24
 800084a:	f1c2 0c20 	rsb	ip, r2, #32
 800084e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000852:	fa20 f002 	lsr.w	r0, r0, r2
 8000856:	bf18      	it	ne
 8000858:	f040 0001 	orrne.w	r0, r0, #1
 800085c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000860:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000864:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000868:	ea40 000c 	orr.w	r0, r0, ip
 800086c:	fa23 f302 	lsr.w	r3, r3, r2
 8000870:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000874:	e7cc      	b.n	8000810 <__aeabi_d2f+0x14>
 8000876:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800087a:	d107      	bne.n	800088c <__aeabi_d2f+0x90>
 800087c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000880:	bf1e      	ittt	ne
 8000882:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000886:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800088a:	4770      	bxne	lr
 800088c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000890:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000894:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b974 	b.w	8000b9c <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9d08      	ldr	r5, [sp, #32]
 80008d2:	4604      	mov	r4, r0
 80008d4:	468e      	mov	lr, r1
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d14d      	bne.n	8000976 <__udivmoddi4+0xaa>
 80008da:	428a      	cmp	r2, r1
 80008dc:	4694      	mov	ip, r2
 80008de:	d969      	bls.n	80009b4 <__udivmoddi4+0xe8>
 80008e0:	fab2 f282 	clz	r2, r2
 80008e4:	b152      	cbz	r2, 80008fc <__udivmoddi4+0x30>
 80008e6:	fa01 f302 	lsl.w	r3, r1, r2
 80008ea:	f1c2 0120 	rsb	r1, r2, #32
 80008ee:	fa20 f101 	lsr.w	r1, r0, r1
 80008f2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008f6:	ea41 0e03 	orr.w	lr, r1, r3
 80008fa:	4094      	lsls	r4, r2
 80008fc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000900:	0c21      	lsrs	r1, r4, #16
 8000902:	fbbe f6f8 	udiv	r6, lr, r8
 8000906:	fa1f f78c 	uxth.w	r7, ip
 800090a:	fb08 e316 	mls	r3, r8, r6, lr
 800090e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000912:	fb06 f107 	mul.w	r1, r6, r7
 8000916:	4299      	cmp	r1, r3
 8000918:	d90a      	bls.n	8000930 <__udivmoddi4+0x64>
 800091a:	eb1c 0303 	adds.w	r3, ip, r3
 800091e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000922:	f080 811f 	bcs.w	8000b64 <__udivmoddi4+0x298>
 8000926:	4299      	cmp	r1, r3
 8000928:	f240 811c 	bls.w	8000b64 <__udivmoddi4+0x298>
 800092c:	3e02      	subs	r6, #2
 800092e:	4463      	add	r3, ip
 8000930:	1a5b      	subs	r3, r3, r1
 8000932:	b2a4      	uxth	r4, r4
 8000934:	fbb3 f0f8 	udiv	r0, r3, r8
 8000938:	fb08 3310 	mls	r3, r8, r0, r3
 800093c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000940:	fb00 f707 	mul.w	r7, r0, r7
 8000944:	42a7      	cmp	r7, r4
 8000946:	d90a      	bls.n	800095e <__udivmoddi4+0x92>
 8000948:	eb1c 0404 	adds.w	r4, ip, r4
 800094c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000950:	f080 810a 	bcs.w	8000b68 <__udivmoddi4+0x29c>
 8000954:	42a7      	cmp	r7, r4
 8000956:	f240 8107 	bls.w	8000b68 <__udivmoddi4+0x29c>
 800095a:	4464      	add	r4, ip
 800095c:	3802      	subs	r0, #2
 800095e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000962:	1be4      	subs	r4, r4, r7
 8000964:	2600      	movs	r6, #0
 8000966:	b11d      	cbz	r5, 8000970 <__udivmoddi4+0xa4>
 8000968:	40d4      	lsrs	r4, r2
 800096a:	2300      	movs	r3, #0
 800096c:	e9c5 4300 	strd	r4, r3, [r5]
 8000970:	4631      	mov	r1, r6
 8000972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000976:	428b      	cmp	r3, r1
 8000978:	d909      	bls.n	800098e <__udivmoddi4+0xc2>
 800097a:	2d00      	cmp	r5, #0
 800097c:	f000 80ef 	beq.w	8000b5e <__udivmoddi4+0x292>
 8000980:	2600      	movs	r6, #0
 8000982:	e9c5 0100 	strd	r0, r1, [r5]
 8000986:	4630      	mov	r0, r6
 8000988:	4631      	mov	r1, r6
 800098a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098e:	fab3 f683 	clz	r6, r3
 8000992:	2e00      	cmp	r6, #0
 8000994:	d14a      	bne.n	8000a2c <__udivmoddi4+0x160>
 8000996:	428b      	cmp	r3, r1
 8000998:	d302      	bcc.n	80009a0 <__udivmoddi4+0xd4>
 800099a:	4282      	cmp	r2, r0
 800099c:	f200 80f9 	bhi.w	8000b92 <__udivmoddi4+0x2c6>
 80009a0:	1a84      	subs	r4, r0, r2
 80009a2:	eb61 0303 	sbc.w	r3, r1, r3
 80009a6:	2001      	movs	r0, #1
 80009a8:	469e      	mov	lr, r3
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	d0e0      	beq.n	8000970 <__udivmoddi4+0xa4>
 80009ae:	e9c5 4e00 	strd	r4, lr, [r5]
 80009b2:	e7dd      	b.n	8000970 <__udivmoddi4+0xa4>
 80009b4:	b902      	cbnz	r2, 80009b8 <__udivmoddi4+0xec>
 80009b6:	deff      	udf	#255	; 0xff
 80009b8:	fab2 f282 	clz	r2, r2
 80009bc:	2a00      	cmp	r2, #0
 80009be:	f040 8092 	bne.w	8000ae6 <__udivmoddi4+0x21a>
 80009c2:	eba1 010c 	sub.w	r1, r1, ip
 80009c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009ca:	fa1f fe8c 	uxth.w	lr, ip
 80009ce:	2601      	movs	r6, #1
 80009d0:	0c20      	lsrs	r0, r4, #16
 80009d2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009d6:	fb07 1113 	mls	r1, r7, r3, r1
 80009da:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009de:	fb0e f003 	mul.w	r0, lr, r3
 80009e2:	4288      	cmp	r0, r1
 80009e4:	d908      	bls.n	80009f8 <__udivmoddi4+0x12c>
 80009e6:	eb1c 0101 	adds.w	r1, ip, r1
 80009ea:	f103 38ff 	add.w	r8, r3, #4294967295
 80009ee:	d202      	bcs.n	80009f6 <__udivmoddi4+0x12a>
 80009f0:	4288      	cmp	r0, r1
 80009f2:	f200 80cb 	bhi.w	8000b8c <__udivmoddi4+0x2c0>
 80009f6:	4643      	mov	r3, r8
 80009f8:	1a09      	subs	r1, r1, r0
 80009fa:	b2a4      	uxth	r4, r4
 80009fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a00:	fb07 1110 	mls	r1, r7, r0, r1
 8000a04:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a08:	fb0e fe00 	mul.w	lr, lr, r0
 8000a0c:	45a6      	cmp	lr, r4
 8000a0e:	d908      	bls.n	8000a22 <__udivmoddi4+0x156>
 8000a10:	eb1c 0404 	adds.w	r4, ip, r4
 8000a14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a18:	d202      	bcs.n	8000a20 <__udivmoddi4+0x154>
 8000a1a:	45a6      	cmp	lr, r4
 8000a1c:	f200 80bb 	bhi.w	8000b96 <__udivmoddi4+0x2ca>
 8000a20:	4608      	mov	r0, r1
 8000a22:	eba4 040e 	sub.w	r4, r4, lr
 8000a26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a2a:	e79c      	b.n	8000966 <__udivmoddi4+0x9a>
 8000a2c:	f1c6 0720 	rsb	r7, r6, #32
 8000a30:	40b3      	lsls	r3, r6
 8000a32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a3a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a42:	431c      	orrs	r4, r3
 8000a44:	40f9      	lsrs	r1, r7
 8000a46:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a4a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a4e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a52:	0c20      	lsrs	r0, r4, #16
 8000a54:	fa1f fe8c 	uxth.w	lr, ip
 8000a58:	fb09 1118 	mls	r1, r9, r8, r1
 8000a5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a60:	fb08 f00e 	mul.w	r0, r8, lr
 8000a64:	4288      	cmp	r0, r1
 8000a66:	fa02 f206 	lsl.w	r2, r2, r6
 8000a6a:	d90b      	bls.n	8000a84 <__udivmoddi4+0x1b8>
 8000a6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a74:	f080 8088 	bcs.w	8000b88 <__udivmoddi4+0x2bc>
 8000a78:	4288      	cmp	r0, r1
 8000a7a:	f240 8085 	bls.w	8000b88 <__udivmoddi4+0x2bc>
 8000a7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a82:	4461      	add	r1, ip
 8000a84:	1a09      	subs	r1, r1, r0
 8000a86:	b2a4      	uxth	r4, r4
 8000a88:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a8c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a90:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a98:	458e      	cmp	lr, r1
 8000a9a:	d908      	bls.n	8000aae <__udivmoddi4+0x1e2>
 8000a9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000aa4:	d26c      	bcs.n	8000b80 <__udivmoddi4+0x2b4>
 8000aa6:	458e      	cmp	lr, r1
 8000aa8:	d96a      	bls.n	8000b80 <__udivmoddi4+0x2b4>
 8000aaa:	3802      	subs	r0, #2
 8000aac:	4461      	add	r1, ip
 8000aae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ab2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ab6:	eba1 010e 	sub.w	r1, r1, lr
 8000aba:	42a1      	cmp	r1, r4
 8000abc:	46c8      	mov	r8, r9
 8000abe:	46a6      	mov	lr, r4
 8000ac0:	d356      	bcc.n	8000b70 <__udivmoddi4+0x2a4>
 8000ac2:	d053      	beq.n	8000b6c <__udivmoddi4+0x2a0>
 8000ac4:	b15d      	cbz	r5, 8000ade <__udivmoddi4+0x212>
 8000ac6:	ebb3 0208 	subs.w	r2, r3, r8
 8000aca:	eb61 010e 	sbc.w	r1, r1, lr
 8000ace:	fa01 f707 	lsl.w	r7, r1, r7
 8000ad2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ad6:	40f1      	lsrs	r1, r6
 8000ad8:	431f      	orrs	r7, r3
 8000ada:	e9c5 7100 	strd	r7, r1, [r5]
 8000ade:	2600      	movs	r6, #0
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	f1c2 0320 	rsb	r3, r2, #32
 8000aea:	40d8      	lsrs	r0, r3
 8000aec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af0:	fa21 f303 	lsr.w	r3, r1, r3
 8000af4:	4091      	lsls	r1, r2
 8000af6:	4301      	orrs	r1, r0
 8000af8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000afc:	fa1f fe8c 	uxth.w	lr, ip
 8000b00:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b04:	fb07 3610 	mls	r6, r7, r0, r3
 8000b08:	0c0b      	lsrs	r3, r1, #16
 8000b0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b0e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b12:	429e      	cmp	r6, r3
 8000b14:	fa04 f402 	lsl.w	r4, r4, r2
 8000b18:	d908      	bls.n	8000b2c <__udivmoddi4+0x260>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b22:	d22f      	bcs.n	8000b84 <__udivmoddi4+0x2b8>
 8000b24:	429e      	cmp	r6, r3
 8000b26:	d92d      	bls.n	8000b84 <__udivmoddi4+0x2b8>
 8000b28:	3802      	subs	r0, #2
 8000b2a:	4463      	add	r3, ip
 8000b2c:	1b9b      	subs	r3, r3, r6
 8000b2e:	b289      	uxth	r1, r1
 8000b30:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b34:	fb07 3316 	mls	r3, r7, r6, r3
 8000b38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b3c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b40:	428b      	cmp	r3, r1
 8000b42:	d908      	bls.n	8000b56 <__udivmoddi4+0x28a>
 8000b44:	eb1c 0101 	adds.w	r1, ip, r1
 8000b48:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b4c:	d216      	bcs.n	8000b7c <__udivmoddi4+0x2b0>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d914      	bls.n	8000b7c <__udivmoddi4+0x2b0>
 8000b52:	3e02      	subs	r6, #2
 8000b54:	4461      	add	r1, ip
 8000b56:	1ac9      	subs	r1, r1, r3
 8000b58:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b5c:	e738      	b.n	80009d0 <__udivmoddi4+0x104>
 8000b5e:	462e      	mov	r6, r5
 8000b60:	4628      	mov	r0, r5
 8000b62:	e705      	b.n	8000970 <__udivmoddi4+0xa4>
 8000b64:	4606      	mov	r6, r0
 8000b66:	e6e3      	b.n	8000930 <__udivmoddi4+0x64>
 8000b68:	4618      	mov	r0, r3
 8000b6a:	e6f8      	b.n	800095e <__udivmoddi4+0x92>
 8000b6c:	454b      	cmp	r3, r9
 8000b6e:	d2a9      	bcs.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b70:	ebb9 0802 	subs.w	r8, r9, r2
 8000b74:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b78:	3801      	subs	r0, #1
 8000b7a:	e7a3      	b.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b7c:	4646      	mov	r6, r8
 8000b7e:	e7ea      	b.n	8000b56 <__udivmoddi4+0x28a>
 8000b80:	4620      	mov	r0, r4
 8000b82:	e794      	b.n	8000aae <__udivmoddi4+0x1e2>
 8000b84:	4640      	mov	r0, r8
 8000b86:	e7d1      	b.n	8000b2c <__udivmoddi4+0x260>
 8000b88:	46d0      	mov	r8, sl
 8000b8a:	e77b      	b.n	8000a84 <__udivmoddi4+0x1b8>
 8000b8c:	3b02      	subs	r3, #2
 8000b8e:	4461      	add	r1, ip
 8000b90:	e732      	b.n	80009f8 <__udivmoddi4+0x12c>
 8000b92:	4630      	mov	r0, r6
 8000b94:	e709      	b.n	80009aa <__udivmoddi4+0xde>
 8000b96:	4464      	add	r4, ip
 8000b98:	3802      	subs	r0, #2
 8000b9a:	e742      	b.n	8000a22 <__udivmoddi4+0x156>

08000b9c <__aeabi_idiv0>:
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <map>:
extern short int motor_SetPoint[3];
extern float proportional_motor[3], integral_motor[3], derivative_motor[3];
extern float prev_enc[3], error_velo_motor[3], previous_error_velo_motor[3];
extern float outputPWM_stm[3];

long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
 8000bac:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000bae:	68fa      	ldr	r2, [r7, #12]
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	1ad3      	subs	r3, r2, r3
 8000bb4:	69b9      	ldr	r1, [r7, #24]
 8000bb6:	683a      	ldr	r2, [r7, #0]
 8000bb8:	1a8a      	subs	r2, r1, r2
 8000bba:	fb03 f202 	mul.w	r2, r3, r2
 8000bbe:	6879      	ldr	r1, [r7, #4]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	1acb      	subs	r3, r1, r3
 8000bc4:	fb92 f2f3 	sdiv	r2, r2, r3
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	4413      	add	r3, r2
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3714      	adds	r7, #20
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <motor_VectorKinematic>:

void motor_VectorKinematic(short int vx, short int vy, short int vsudut)
{
 8000bd8:	b5b0      	push	{r4, r5, r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	80fb      	strh	r3, [r7, #6]
 8000be2:	460b      	mov	r3, r1
 8000be4:	80bb      	strh	r3, [r7, #4]
 8000be6:	4613      	mov	r3, r2
 8000be8:	807b      	strh	r3, [r7, #2]
	motor_SetPoint[0] = (short int) (((vx) * cosf(0 * M_PI/180)) + (vsudut*0.8));
 8000bea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bee:	ee07 3a90 	vmov	s15, r3
 8000bf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bf6:	ee17 0a90 	vmov	r0, s15
 8000bfa:	f7ff fd7f 	bl	80006fc <__aeabi_f2d>
 8000bfe:	4604      	mov	r4, r0
 8000c00:	460d      	mov	r5, r1
 8000c02:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff fd66 	bl	80006d8 <__aeabi_i2d>
 8000c0c:	a35f      	add	r3, pc, #380	; (adr r3, 8000d8c <motor_VectorKinematic+0x1b4>)
 8000c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c12:	f7ff fae5 	bl	80001e0 <__aeabi_dmul>
 8000c16:	4602      	mov	r2, r0
 8000c18:	460b      	mov	r3, r1
 8000c1a:	4620      	mov	r0, r4
 8000c1c:	4629      	mov	r1, r5
 8000c1e:	f7ff fc0f 	bl	8000440 <__adddf3>
 8000c22:	4602      	mov	r2, r0
 8000c24:	460b      	mov	r3, r1
 8000c26:	4610      	mov	r0, r2
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f7ff fdbf 	bl	80007ac <__aeabi_d2iz>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	b21a      	sxth	r2, r3
 8000c32:	4b53      	ldr	r3, [pc, #332]	; (8000d80 <motor_VectorKinematic+0x1a8>)
 8000c34:	801a      	strh	r2, [r3, #0]
	motor_SetPoint[1] = (short int) (((vx) * cosf(240 * M_PI/180)) + ((vy*-1.4) * sinf(240 * M_PI/180)) + (vsudut*0.3));
 8000c36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c3a:	ee07 3a90 	vmov	s15, r3
 8000c3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c42:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8000d84 <motor_VectorKinematic+0x1ac>
 8000c46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c4a:	ee17 0a90 	vmov	r0, s15
 8000c4e:	f7ff fd55 	bl	80006fc <__aeabi_f2d>
 8000c52:	4604      	mov	r4, r0
 8000c54:	460d      	mov	r5, r1
 8000c56:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff fd3c 	bl	80006d8 <__aeabi_i2d>
 8000c60:	a33f      	add	r3, pc, #252	; (adr r3, 8000d60 <motor_VectorKinematic+0x188>)
 8000c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c66:	f7ff fabb 	bl	80001e0 <__aeabi_dmul>
 8000c6a:	4602      	mov	r2, r0
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	4610      	mov	r0, r2
 8000c70:	4619      	mov	r1, r3
 8000c72:	a33d      	add	r3, pc, #244	; (adr r3, 8000d68 <motor_VectorKinematic+0x190>)
 8000c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c78:	f7ff fab2 	bl	80001e0 <__aeabi_dmul>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	460b      	mov	r3, r1
 8000c80:	4620      	mov	r0, r4
 8000c82:	4629      	mov	r1, r5
 8000c84:	f7ff fbdc 	bl	8000440 <__adddf3>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	4614      	mov	r4, r2
 8000c8e:	461d      	mov	r5, r3
 8000c90:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fd1f 	bl	80006d8 <__aeabi_i2d>
 8000c9a:	a335      	add	r3, pc, #212	; (adr r3, 8000d70 <motor_VectorKinematic+0x198>)
 8000c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ca0:	f7ff fa9e 	bl	80001e0 <__aeabi_dmul>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	460b      	mov	r3, r1
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	f7ff fbc8 	bl	8000440 <__adddf3>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	4610      	mov	r0, r2
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	f7ff fd78 	bl	80007ac <__aeabi_d2iz>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	b21a      	sxth	r2, r3
 8000cc0:	4b2f      	ldr	r3, [pc, #188]	; (8000d80 <motor_VectorKinematic+0x1a8>)
 8000cc2:	805a      	strh	r2, [r3, #2]
	motor_SetPoint[2] = (short int) (((vx) * cosf(120 * M_PI/180)) + ((vy*-1.4) * sinf(120 * M_PI/180)) + (vsudut*0.3));
 8000cc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cc8:	ee07 3a90 	vmov	s15, r3
 8000ccc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cd0:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8000d88 <motor_VectorKinematic+0x1b0>
 8000cd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cd8:	ee17 0a90 	vmov	r0, s15
 8000cdc:	f7ff fd0e 	bl	80006fc <__aeabi_f2d>
 8000ce0:	4604      	mov	r4, r0
 8000ce2:	460d      	mov	r5, r1
 8000ce4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fcf5 	bl	80006d8 <__aeabi_i2d>
 8000cee:	a31c      	add	r3, pc, #112	; (adr r3, 8000d60 <motor_VectorKinematic+0x188>)
 8000cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cf4:	f7ff fa74 	bl	80001e0 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4610      	mov	r0, r2
 8000cfe:	4619      	mov	r1, r3
 8000d00:	a31d      	add	r3, pc, #116	; (adr r3, 8000d78 <motor_VectorKinematic+0x1a0>)
 8000d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d06:	f7ff fa6b 	bl	80001e0 <__aeabi_dmul>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	4620      	mov	r0, r4
 8000d10:	4629      	mov	r1, r5
 8000d12:	f7ff fb95 	bl	8000440 <__adddf3>
 8000d16:	4602      	mov	r2, r0
 8000d18:	460b      	mov	r3, r1
 8000d1a:	4614      	mov	r4, r2
 8000d1c:	461d      	mov	r5, r3
 8000d1e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fcd8 	bl	80006d8 <__aeabi_i2d>
 8000d28:	a311      	add	r3, pc, #68	; (adr r3, 8000d70 <motor_VectorKinematic+0x198>)
 8000d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d2e:	f7ff fa57 	bl	80001e0 <__aeabi_dmul>
 8000d32:	4602      	mov	r2, r0
 8000d34:	460b      	mov	r3, r1
 8000d36:	4620      	mov	r0, r4
 8000d38:	4629      	mov	r1, r5
 8000d3a:	f7ff fb81 	bl	8000440 <__adddf3>
 8000d3e:	4602      	mov	r2, r0
 8000d40:	460b      	mov	r3, r1
 8000d42:	4610      	mov	r0, r2
 8000d44:	4619      	mov	r1, r3
 8000d46:	f7ff fd31 	bl	80007ac <__aeabi_d2iz>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	b21a      	sxth	r2, r3
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <motor_VectorKinematic+0x1a8>)
 8000d50:	809a      	strh	r2, [r3, #4]
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bdb0      	pop	{r4, r5, r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	f3af 8000 	nop.w
 8000d60:	66666666 	.word	0x66666666
 8000d64:	bff66666 	.word	0xbff66666
 8000d68:	00000000 	.word	0x00000000
 8000d6c:	bfebb67b 	.word	0xbfebb67b
 8000d70:	33333333 	.word	0x33333333
 8000d74:	3fd33333 	.word	0x3fd33333
 8000d78:	e0000000 	.word	0xe0000000
 8000d7c:	3febb67a 	.word	0x3febb67a
 8000d80:	2000037c 	.word	0x2000037c
 8000d84:	befffffd 	.word	0xbefffffd
 8000d88:	bf000001 	.word	0xbf000001
 8000d8c:	9999999a 	.word	0x9999999a
 8000d90:	3fe99999 	.word	0x3fe99999
 8000d94:	00000000 	.word	0x00000000

08000d98 <motor_VeloControl>:

void motor_VeloControl(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0

	motor_velo[0] = (encoder[0] - prev_enc[0]);
 8000d9e:	4b94      	ldr	r3, [pc, #592]	; (8000ff0 <motor_VeloControl+0x258>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	ee07 3a90 	vmov	s15, r3
 8000da6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000daa:	4b92      	ldr	r3, [pc, #584]	; (8000ff4 <motor_VeloControl+0x25c>)
 8000dac:	edd3 7a00 	vldr	s15, [r3]
 8000db0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000db4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000db8:	ee17 3a90 	vmov	r3, s15
 8000dbc:	b21a      	sxth	r2, r3
 8000dbe:	4b8e      	ldr	r3, [pc, #568]	; (8000ff8 <motor_VeloControl+0x260>)
 8000dc0:	801a      	strh	r2, [r3, #0]
	prev_enc[0] = encoder[0];
 8000dc2:	4b8b      	ldr	r3, [pc, #556]	; (8000ff0 <motor_VeloControl+0x258>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	ee07 3a90 	vmov	s15, r3
 8000dca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dce:	4b89      	ldr	r3, [pc, #548]	; (8000ff4 <motor_VeloControl+0x25c>)
 8000dd0:	edc3 7a00 	vstr	s15, [r3]
	motor_velo[1] = (encoder[1] - prev_enc[1]);
 8000dd4:	4b86      	ldr	r3, [pc, #536]	; (8000ff0 <motor_VeloControl+0x258>)
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	ee07 3a90 	vmov	s15, r3
 8000ddc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000de0:	4b84      	ldr	r3, [pc, #528]	; (8000ff4 <motor_VeloControl+0x25c>)
 8000de2:	edd3 7a01 	vldr	s15, [r3, #4]
 8000de6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dee:	ee17 3a90 	vmov	r3, s15
 8000df2:	b21a      	sxth	r2, r3
 8000df4:	4b80      	ldr	r3, [pc, #512]	; (8000ff8 <motor_VeloControl+0x260>)
 8000df6:	805a      	strh	r2, [r3, #2]
	prev_enc[1] = encoder[1];
 8000df8:	4b7d      	ldr	r3, [pc, #500]	; (8000ff0 <motor_VeloControl+0x258>)
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	ee07 3a90 	vmov	s15, r3
 8000e00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e04:	4b7b      	ldr	r3, [pc, #492]	; (8000ff4 <motor_VeloControl+0x25c>)
 8000e06:	edc3 7a01 	vstr	s15, [r3, #4]
	motor_velo[2] = (encoder[2] - prev_enc[2]);
 8000e0a:	4b79      	ldr	r3, [pc, #484]	; (8000ff0 <motor_VeloControl+0x258>)
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	ee07 3a90 	vmov	s15, r3
 8000e12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e16:	4b77      	ldr	r3, [pc, #476]	; (8000ff4 <motor_VeloControl+0x25c>)
 8000e18:	edd3 7a02 	vldr	s15, [r3, #8]
 8000e1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e24:	ee17 3a90 	vmov	r3, s15
 8000e28:	b21a      	sxth	r2, r3
 8000e2a:	4b73      	ldr	r3, [pc, #460]	; (8000ff8 <motor_VeloControl+0x260>)
 8000e2c:	809a      	strh	r2, [r3, #4]
	prev_enc[2] = encoder[2];
 8000e2e:	4b70      	ldr	r3, [pc, #448]	; (8000ff0 <motor_VeloControl+0x258>)
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	ee07 3a90 	vmov	s15, r3
 8000e36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e3a:	4b6e      	ldr	r3, [pc, #440]	; (8000ff4 <motor_VeloControl+0x25c>)
 8000e3c:	edc3 7a02 	vstr	s15, [r3, #8]

	for(int i = 0; i < 3; i++){
 8000e40:	2300      	movs	r3, #0
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	e0c5      	b.n	8000fd2 <motor_VeloControl+0x23a>
//		motor_velo[i] = (encoder[i] - prev_enc[i]);
		error_velo_motor[i] = motor_SetPoint[i] - motor_velo[i];
 8000e46:	4a6d      	ldr	r2, [pc, #436]	; (8000ffc <motor_VeloControl+0x264>)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4a69      	ldr	r2, [pc, #420]	; (8000ff8 <motor_VeloControl+0x260>)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000e58:	1acb      	subs	r3, r1, r3
 8000e5a:	ee07 3a90 	vmov	s15, r3
 8000e5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e62:	4a67      	ldr	r2, [pc, #412]	; (8001000 <motor_VeloControl+0x268>)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	4413      	add	r3, r2
 8000e6a:	edc3 7a00 	vstr	s15, [r3]
		proportional_motor[i] = KP_motor * error_velo_motor[i];
 8000e6e:	4a64      	ldr	r2, [pc, #400]	; (8001000 <motor_VeloControl+0x268>)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	4413      	add	r3, r2
 8000e76:	ed93 7a00 	vldr	s14, [r3]
 8000e7a:	4b62      	ldr	r3, [pc, #392]	; (8001004 <motor_VeloControl+0x26c>)
 8000e7c:	edd3 7a00 	vldr	s15, [r3]
 8000e80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e84:	4a60      	ldr	r2, [pc, #384]	; (8001008 <motor_VeloControl+0x270>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	4413      	add	r3, r2
 8000e8c:	edc3 7a00 	vstr	s15, [r3]
		integral_motor[i] += error_velo_motor[i];
 8000e90:	4a5e      	ldr	r2, [pc, #376]	; (800100c <motor_VeloControl+0x274>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	4413      	add	r3, r2
 8000e98:	ed93 7a00 	vldr	s14, [r3]
 8000e9c:	4a58      	ldr	r2, [pc, #352]	; (8001000 <motor_VeloControl+0x268>)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	4413      	add	r3, r2
 8000ea4:	edd3 7a00 	vldr	s15, [r3]
 8000ea8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000eac:	4a57      	ldr	r2, [pc, #348]	; (800100c <motor_VeloControl+0x274>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	4413      	add	r3, r2
 8000eb4:	edc3 7a00 	vstr	s15, [r3]
//		derivative_motor[i] = KD_motor * (error_velo_motor[i] - previous_error_velo_motor[i]) / PID_dt;
		derivative_motor[i] = KD_motor * (error_velo_motor[i] - previous_error_velo_motor[i]);
 8000eb8:	4a51      	ldr	r2, [pc, #324]	; (8001000 <motor_VeloControl+0x268>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	4413      	add	r3, r2
 8000ec0:	ed93 7a00 	vldr	s14, [r3]
 8000ec4:	4a52      	ldr	r2, [pc, #328]	; (8001010 <motor_VeloControl+0x278>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	4413      	add	r3, r2
 8000ecc:	edd3 7a00 	vldr	s15, [r3]
 8000ed0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ed4:	4b4f      	ldr	r3, [pc, #316]	; (8001014 <motor_VeloControl+0x27c>)
 8000ed6:	edd3 7a00 	vldr	s15, [r3]
 8000eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ede:	4a4e      	ldr	r2, [pc, #312]	; (8001018 <motor_VeloControl+0x280>)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	4413      	add	r3, r2
 8000ee6:	edc3 7a00 	vstr	s15, [r3]

//		integral_motor[i] = KI_motor * (integral_motor[i] + error_velo_motor[i] * PID_dt);
		previous_error_velo_motor[i] = error_velo_motor[i];
 8000eea:	4a45      	ldr	r2, [pc, #276]	; (8001000 <motor_VeloControl+0x268>)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	4413      	add	r3, r2
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4946      	ldr	r1, [pc, #280]	; (8001010 <motor_VeloControl+0x278>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	440b      	add	r3, r1
 8000efc:	601a      	str	r2, [r3, #0]

		if(integral_motor[i] > 999) integral_motor[i] = 999;
 8000efe:	4a43      	ldr	r2, [pc, #268]	; (800100c <motor_VeloControl+0x274>)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	4413      	add	r3, r2
 8000f06:	edd3 7a00 	vldr	s15, [r3]
 8000f0a:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800101c <motor_VeloControl+0x284>
 8000f0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f16:	dd06      	ble.n	8000f26 <motor_VeloControl+0x18e>
 8000f18:	4a3c      	ldr	r2, [pc, #240]	; (800100c <motor_VeloControl+0x274>)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	4413      	add	r3, r2
 8000f20:	4a3f      	ldr	r2, [pc, #252]	; (8001020 <motor_VeloControl+0x288>)
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	e012      	b.n	8000f4c <motor_VeloControl+0x1b4>
		else if(integral_motor[i] < -999) integral_motor[i] = -999;
 8000f26:	4a39      	ldr	r2, [pc, #228]	; (800100c <motor_VeloControl+0x274>)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	4413      	add	r3, r2
 8000f2e:	edd3 7a00 	vldr	s15, [r3]
 8000f32:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001024 <motor_VeloControl+0x28c>
 8000f36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f3e:	d505      	bpl.n	8000f4c <motor_VeloControl+0x1b4>
 8000f40:	4a32      	ldr	r2, [pc, #200]	; (800100c <motor_VeloControl+0x274>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	4413      	add	r3, r2
 8000f48:	4a37      	ldr	r2, [pc, #220]	; (8001028 <motor_VeloControl+0x290>)
 8000f4a:	601a      	str	r2, [r3, #0]

//		outputPWM[i] = (proportional_motor[i] + integral_motor[i] + derivative_motor[i]) * 0.9;
		outputPWM_stm[i] = proportional_motor[i] * 0.3;
 8000f4c:	4a2e      	ldr	r2, [pc, #184]	; (8001008 <motor_VeloControl+0x270>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	4413      	add	r3, r2
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fbd0 	bl	80006fc <__aeabi_f2d>
 8000f5c:	a322      	add	r3, pc, #136	; (adr r3, 8000fe8 <motor_VeloControl+0x250>)
 8000f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f62:	f7ff f93d 	bl	80001e0 <__aeabi_dmul>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	4610      	mov	r0, r2
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f7ff fc45 	bl	80007fc <__aeabi_d2f>
 8000f72:	4602      	mov	r2, r0
 8000f74:	492d      	ldr	r1, [pc, #180]	; (800102c <motor_VeloControl+0x294>)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	440b      	add	r3, r1
 8000f7c:	601a      	str	r2, [r3, #0]

		if(outputPWM_stm[i] > 999) outputPWM_stm[i] = 999;
 8000f7e:	4a2b      	ldr	r2, [pc, #172]	; (800102c <motor_VeloControl+0x294>)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	4413      	add	r3, r2
 8000f86:	edd3 7a00 	vldr	s15, [r3]
 8000f8a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800101c <motor_VeloControl+0x284>
 8000f8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f96:	dd06      	ble.n	8000fa6 <motor_VeloControl+0x20e>
 8000f98:	4a24      	ldr	r2, [pc, #144]	; (800102c <motor_VeloControl+0x294>)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	4413      	add	r3, r2
 8000fa0:	4a1f      	ldr	r2, [pc, #124]	; (8001020 <motor_VeloControl+0x288>)
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	e012      	b.n	8000fcc <motor_VeloControl+0x234>
		else if(outputPWM_stm[i] < -999) outputPWM_stm[i] = -999;
 8000fa6:	4a21      	ldr	r2, [pc, #132]	; (800102c <motor_VeloControl+0x294>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	4413      	add	r3, r2
 8000fae:	edd3 7a00 	vldr	s15, [r3]
 8000fb2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001024 <motor_VeloControl+0x28c>
 8000fb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fbe:	d505      	bpl.n	8000fcc <motor_VeloControl+0x234>
 8000fc0:	4a1a      	ldr	r2, [pc, #104]	; (800102c <motor_VeloControl+0x294>)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	4413      	add	r3, r2
 8000fc8:	4a17      	ldr	r2, [pc, #92]	; (8001028 <motor_VeloControl+0x290>)
 8000fca:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 3; i++){
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	f77f af36 	ble.w	8000e46 <motor_VeloControl+0xae>
//		prev_enc[i] = encoder[i];
//		previous_error_velo_motor[i] = error_velo_motor[i];
	}
}
 8000fda:	bf00      	nop
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	f3af 8000 	nop.w
 8000fe8:	33333333 	.word	0x33333333
 8000fec:	3fd33333 	.word	0x3fd33333
 8000ff0:	20000360 	.word	0x20000360
 8000ff4:	200003a8 	.word	0x200003a8
 8000ff8:	20000374 	.word	0x20000374
 8000ffc:	2000037c 	.word	0x2000037c
 8001000:	200003b4 	.word	0x200003b4
 8001004:	20000000 	.word	0x20000000
 8001008:	20000384 	.word	0x20000384
 800100c:	20000390 	.word	0x20000390
 8001010:	200003c0 	.word	0x200003c0
 8001014:	2000035c 	.word	0x2000035c
 8001018:	2000039c 	.word	0x2000039c
 800101c:	4479c000 	.word	0x4479c000
 8001020:	4479c000 	.word	0x4479c000
 8001024:	c479c000 	.word	0xc479c000
 8001028:	c479c000 	.word	0xc479c000
 800102c:	200005e4 	.word	0x200005e4

08001030 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	4b18      	ldr	r3, [pc, #96]	; (800109c <MX_DMA_Init+0x6c>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a17      	ldr	r2, [pc, #92]	; (800109c <MX_DMA_Init+0x6c>)
 8001040:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b15      	ldr	r3, [pc, #84]	; (800109c <MX_DMA_Init+0x6c>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001052:	2200      	movs	r2, #0
 8001054:	2105      	movs	r1, #5
 8001056:	200b      	movs	r0, #11
 8001058:	f004 fbf0 	bl	800583c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800105c:	200b      	movs	r0, #11
 800105e:	f004 fc09 	bl	8005874 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	2105      	movs	r1, #5
 8001066:	200d      	movs	r0, #13
 8001068:	f004 fbe8 	bl	800583c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800106c:	200d      	movs	r0, #13
 800106e:	f004 fc01 	bl	8005874 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	2105      	movs	r1, #5
 8001076:	2010      	movs	r0, #16
 8001078:	f004 fbe0 	bl	800583c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800107c:	2010      	movs	r0, #16
 800107e:	f004 fbf9 	bl	8005874 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8001082:	2200      	movs	r2, #0
 8001084:	2105      	movs	r1, #5
 8001086:	202f      	movs	r0, #47	; 0x2f
 8001088:	f004 fbd8 	bl	800583c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800108c:	202f      	movs	r0, #47	; 0x2f
 800108e:	f004 fbf1 	bl	8005874 <HAL_NVIC_EnableIRQ>

}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40023800 	.word	0x40023800

080010a0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4a07      	ldr	r2, [pc, #28]	; (80010cc <vApplicationGetIdleTaskMemory+0x2c>)
 80010b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	4a06      	ldr	r2, [pc, #24]	; (80010d0 <vApplicationGetIdleTaskMemory+0x30>)
 80010b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2280      	movs	r2, #128	; 0x80
 80010bc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80010be:	bf00      	nop
 80010c0:	3714      	adds	r7, #20
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	200000a8 	.word	0x200000a8
 80010d0:	2000015c 	.word	0x2000015c

080010d4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80010d4:	b5b0      	push	{r4, r5, r7, lr}
 80010d6:	b096      	sub	sp, #88	; 0x58
 80010d8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of joys_imuTask */
  osThreadDef(joys_imuTask, Startjoys_imuTask, osPriorityNormal, 0, 128);
 80010da:	4b1d      	ldr	r3, [pc, #116]	; (8001150 <MX_FREERTOS_Init+0x7c>)
 80010dc:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80010e0:	461d      	mov	r5, r3
 80010e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  joys_imuTaskHandle = osThreadCreate(osThread(joys_imuTask), NULL);
 80010ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80010f2:	2100      	movs	r1, #0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f008 f9e8 	bl	80094ca <osThreadCreate>
 80010fa:	4603      	mov	r3, r0
 80010fc:	4a15      	ldr	r2, [pc, #84]	; (8001154 <MX_FREERTOS_Init+0x80>)
 80010fe:	6013      	str	r3, [r2, #0]

  /* definition and creation of rosserialTask */
  osThreadDef(rosserialTask, StartrosserialTask, osPriorityNormal, 0, 512);
 8001100:	4b15      	ldr	r3, [pc, #84]	; (8001158 <MX_FREERTOS_Init+0x84>)
 8001102:	f107 0420 	add.w	r4, r7, #32
 8001106:	461d      	mov	r5, r3
 8001108:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800110a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800110c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001110:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  rosserialTaskHandle = osThreadCreate(osThread(rosserialTask), NULL);
 8001114:	f107 0320 	add.w	r3, r7, #32
 8001118:	2100      	movs	r1, #0
 800111a:	4618      	mov	r0, r3
 800111c:	f008 f9d5 	bl	80094ca <osThreadCreate>
 8001120:	4603      	mov	r3, r0
 8001122:	4a0e      	ldr	r2, [pc, #56]	; (800115c <MX_FREERTOS_Init+0x88>)
 8001124:	6013      	str	r3, [r2, #0]

  /* definition and creation of out_motorTask */
  osThreadDef(out_motorTask, Startout_motorTask, osPriorityNormal, 0, 128);
 8001126:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <MX_FREERTOS_Init+0x8c>)
 8001128:	1d3c      	adds	r4, r7, #4
 800112a:	461d      	mov	r5, r3
 800112c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800112e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001130:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001134:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  out_motorTaskHandle = osThreadCreate(osThread(out_motorTask), NULL);
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	2100      	movs	r1, #0
 800113c:	4618      	mov	r0, r3
 800113e:	f008 f9c4 	bl	80094ca <osThreadCreate>
 8001142:	4603      	mov	r3, r0
 8001144:	4a07      	ldr	r2, [pc, #28]	; (8001164 <MX_FREERTOS_Init+0x90>)
 8001146:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001148:	bf00      	nop
 800114a:	3758      	adds	r7, #88	; 0x58
 800114c:	46bd      	mov	sp, r7
 800114e:	bdb0      	pop	{r4, r5, r7, pc}
 8001150:	0800ae54 	.word	0x0800ae54
 8001154:	2000009c 	.word	0x2000009c
 8001158:	0800ae70 	.word	0x0800ae70
 800115c:	200000a0 	.word	0x200000a0
 8001160:	0800ae8c 	.word	0x0800ae8c
 8001164:	200000a4 	.word	0x200000a4

08001168 <Startjoys_imuTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Startjoys_imuTask */
void Startjoys_imuTask(void const * argument)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af02      	add	r7, sp, #8
 800116e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startjoys_imuTask */
  /* Infinite loop */
  for(;;)
  {	  //JOYSTICK BLUETOOTH
	  if(joystick_bt_counter < joystick_bt_timeout){
 8001170:	4b89      	ldr	r3, [pc, #548]	; (8001398 <Startjoys_imuTask+0x230>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	4b89      	ldr	r3, [pc, #548]	; (800139c <Startjoys_imuTask+0x234>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	429a      	cmp	r2, r3
 800117a:	da10      	bge.n	800119e <Startjoys_imuTask+0x36>
		  if(HAL_UART_Receive_DMA(&huart2, joystick_buf, sizeof(joystick_buf)) != HAL_OK){
 800117c:	220d      	movs	r2, #13
 800117e:	4988      	ldr	r1, [pc, #544]	; (80013a0 <Startjoys_imuTask+0x238>)
 8001180:	4888      	ldr	r0, [pc, #544]	; (80013a4 <Startjoys_imuTask+0x23c>)
 8001182:	f007 f873 	bl	800826c <HAL_UART_Receive_DMA>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d005      	beq.n	8001198 <Startjoys_imuTask+0x30>
			  joystick_bt_counter++;
 800118c:	4b82      	ldr	r3, [pc, #520]	; (8001398 <Startjoys_imuTask+0x230>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	3301      	adds	r3, #1
 8001192:	4a81      	ldr	r2, [pc, #516]	; (8001398 <Startjoys_imuTask+0x230>)
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	e002      	b.n	800119e <Startjoys_imuTask+0x36>
		  }
		  else{
			  joystick_bt_counter = 0;
 8001198:	4b7f      	ldr	r3, [pc, #508]	; (8001398 <Startjoys_imuTask+0x230>)
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
		  }
	  }

	  if(joystick_bt_counter >= 299){
 800119e:	4b7e      	ldr	r3, [pc, #504]	; (8001398 <Startjoys_imuTask+0x230>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 80011a6:	dd03      	ble.n	80011b0 <Startjoys_imuTask+0x48>
		  joystick_bt_counter = 299;
 80011a8:	4b7b      	ldr	r3, [pc, #492]	; (8001398 <Startjoys_imuTask+0x230>)
 80011aa:	f240 122b 	movw	r2, #299	; 0x12b
 80011ae:	601a      	str	r2, [r3, #0]
	  }

	  if(joystick_buf[0] == 'i' && joystick_buf[1] == 't' && joystick_buf[2] == 's'){
 80011b0:	4b7b      	ldr	r3, [pc, #492]	; (80013a0 <Startjoys_imuTask+0x238>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b69      	cmp	r3, #105	; 0x69
 80011b6:	d177      	bne.n	80012a8 <Startjoys_imuTask+0x140>
 80011b8:	4b79      	ldr	r3, [pc, #484]	; (80013a0 <Startjoys_imuTask+0x238>)
 80011ba:	785b      	ldrb	r3, [r3, #1]
 80011bc:	2b74      	cmp	r3, #116	; 0x74
 80011be:	d173      	bne.n	80012a8 <Startjoys_imuTask+0x140>
 80011c0:	4b77      	ldr	r3, [pc, #476]	; (80013a0 <Startjoys_imuTask+0x238>)
 80011c2:	789b      	ldrb	r3, [r3, #2]
 80011c4:	2b73      	cmp	r3, #115	; 0x73
 80011c6:	d16f      	bne.n	80012a8 <Startjoys_imuTask+0x140>
		  HAL_UART_Receive_DMA(&huart2, joystick_buf, sizeof(joystick_buf));
 80011c8:	220d      	movs	r2, #13
 80011ca:	4975      	ldr	r1, [pc, #468]	; (80013a0 <Startjoys_imuTask+0x238>)
 80011cc:	4875      	ldr	r0, [pc, #468]	; (80013a4 <Startjoys_imuTask+0x23c>)
 80011ce:	f007 f84d 	bl	800826c <HAL_UART_Receive_DMA>

		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80011d2:	2201      	movs	r2, #1
 80011d4:	2140      	movs	r1, #64	; 0x40
 80011d6:	4874      	ldr	r0, [pc, #464]	; (80013a8 <Startjoys_imuTask+0x240>)
 80011d8:	f005 f8f8 	bl	80063cc <HAL_GPIO_WritePin>

		  memcpy(&joystick_y_buf, joystick_buf + 3, 1);
 80011dc:	4b73      	ldr	r3, [pc, #460]	; (80013ac <Startjoys_imuTask+0x244>)
 80011de:	781a      	ldrb	r2, [r3, #0]
 80011e0:	4b73      	ldr	r3, [pc, #460]	; (80013b0 <Startjoys_imuTask+0x248>)
 80011e2:	701a      	strb	r2, [r3, #0]
		  memcpy(&joystick_x_buf, joystick_buf + 4, 1);
 80011e4:	4b73      	ldr	r3, [pc, #460]	; (80013b4 <Startjoys_imuTask+0x24c>)
 80011e6:	781a      	ldrb	r2, [r3, #0]
 80011e8:	4b73      	ldr	r3, [pc, #460]	; (80013b8 <Startjoys_imuTask+0x250>)
 80011ea:	701a      	strb	r2, [r3, #0]
		  memcpy(&joystick_z_buf, joystick_buf + 6, 1);
 80011ec:	4b73      	ldr	r3, [pc, #460]	; (80013bc <Startjoys_imuTask+0x254>)
 80011ee:	781a      	ldrb	r2, [r3, #0]
 80011f0:	4b73      	ldr	r3, [pc, #460]	; (80013c0 <Startjoys_imuTask+0x258>)
 80011f2:	701a      	strb	r2, [r3, #0]

		  joystick_x_buf = constrain(joystick_x_buf, 0, 246);
 80011f4:	4b70      	ldr	r3, [pc, #448]	; (80013b8 <Startjoys_imuTask+0x250>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2bf6      	cmp	r3, #246	; 0xf6
 80011fa:	bf28      	it	cs
 80011fc:	23f6      	movcs	r3, #246	; 0xf6
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	4b6d      	ldr	r3, [pc, #436]	; (80013b8 <Startjoys_imuTask+0x250>)
 8001202:	701a      	strb	r2, [r3, #0]
		  joystick_y_buf = constrain(joystick_y_buf, 0, 246);
 8001204:	4b6a      	ldr	r3, [pc, #424]	; (80013b0 <Startjoys_imuTask+0x248>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2bf6      	cmp	r3, #246	; 0xf6
 800120a:	bf28      	it	cs
 800120c:	23f6      	movcs	r3, #246	; 0xf6
 800120e:	b2da      	uxtb	r2, r3
 8001210:	4b67      	ldr	r3, [pc, #412]	; (80013b0 <Startjoys_imuTask+0x248>)
 8001212:	701a      	strb	r2, [r3, #0]
		  joystick_z_buf = constrain(joystick_z_buf, 0, 246);
 8001214:	4b6a      	ldr	r3, [pc, #424]	; (80013c0 <Startjoys_imuTask+0x258>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2bf6      	cmp	r3, #246	; 0xf6
 800121a:	bf28      	it	cs
 800121c:	23f6      	movcs	r3, #246	; 0xf6
 800121e:	b2da      	uxtb	r2, r3
 8001220:	4b67      	ldr	r3, [pc, #412]	; (80013c0 <Startjoys_imuTask+0x258>)
 8001222:	701a      	strb	r2, [r3, #0]

		  joystick_x = map(joystick_x_buf, 0, 246, -123, 123);
 8001224:	4b64      	ldr	r3, [pc, #400]	; (80013b8 <Startjoys_imuTask+0x250>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	4618      	mov	r0, r3
 800122a:	237b      	movs	r3, #123	; 0x7b
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	f06f 037a 	mvn.w	r3, #122	; 0x7a
 8001232:	22f6      	movs	r2, #246	; 0xf6
 8001234:	2100      	movs	r1, #0
 8001236:	f7ff fcb3 	bl	8000ba0 <map>
 800123a:	4603      	mov	r3, r0
 800123c:	b25a      	sxtb	r2, r3
 800123e:	4b61      	ldr	r3, [pc, #388]	; (80013c4 <Startjoys_imuTask+0x25c>)
 8001240:	701a      	strb	r2, [r3, #0]
		  joystick_y = map(joystick_y_buf, 0, 246, -123, 123);
 8001242:	4b5b      	ldr	r3, [pc, #364]	; (80013b0 <Startjoys_imuTask+0x248>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	4618      	mov	r0, r3
 8001248:	237b      	movs	r3, #123	; 0x7b
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	f06f 037a 	mvn.w	r3, #122	; 0x7a
 8001250:	22f6      	movs	r2, #246	; 0xf6
 8001252:	2100      	movs	r1, #0
 8001254:	f7ff fca4 	bl	8000ba0 <map>
 8001258:	4603      	mov	r3, r0
 800125a:	b25a      	sxtb	r2, r3
 800125c:	4b5a      	ldr	r3, [pc, #360]	; (80013c8 <Startjoys_imuTask+0x260>)
 800125e:	701a      	strb	r2, [r3, #0]
		  joystick_z = map(joystick_z_buf, 0, 246, -123, 123);
 8001260:	4b57      	ldr	r3, [pc, #348]	; (80013c0 <Startjoys_imuTask+0x258>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	4618      	mov	r0, r3
 8001266:	237b      	movs	r3, #123	; 0x7b
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	f06f 037a 	mvn.w	r3, #122	; 0x7a
 800126e:	22f6      	movs	r2, #246	; 0xf6
 8001270:	2100      	movs	r1, #0
 8001272:	f7ff fc95 	bl	8000ba0 <map>
 8001276:	4603      	mov	r3, r0
 8001278:	b25a      	sxtb	r2, r3
 800127a:	4b54      	ldr	r3, [pc, #336]	; (80013cc <Startjoys_imuTask+0x264>)
 800127c:	701a      	strb	r2, [r3, #0]

		  joystick_mode = joystick_buf[7];
 800127e:	4b48      	ldr	r3, [pc, #288]	; (80013a0 <Startjoys_imuTask+0x238>)
 8001280:	79db      	ldrb	r3, [r3, #7]
 8001282:	461a      	mov	r2, r3
 8001284:	4b52      	ldr	r3, [pc, #328]	; (80013d0 <Startjoys_imuTask+0x268>)
 8001286:	601a      	str	r2, [r3, #0]
		  mode = joystick_buf[8];
 8001288:	4b45      	ldr	r3, [pc, #276]	; (80013a0 <Startjoys_imuTask+0x238>)
 800128a:	7a1b      	ldrb	r3, [r3, #8]
 800128c:	461a      	mov	r2, r3
 800128e:	4b51      	ldr	r3, [pc, #324]	; (80013d4 <Startjoys_imuTask+0x26c>)
 8001290:	601a      	str	r2, [r3, #0]
		  joystick_increase_speed = joystick_buf[9];
 8001292:	4b43      	ldr	r3, [pc, #268]	; (80013a0 <Startjoys_imuTask+0x238>)
 8001294:	7a5b      	ldrb	r3, [r3, #9]
 8001296:	461a      	mov	r2, r3
 8001298:	4b4f      	ldr	r3, [pc, #316]	; (80013d8 <Startjoys_imuTask+0x270>)
 800129a:	601a      	str	r2, [r3, #0]
		  joystick_decrease_speed = joystick_buf[10];
 800129c:	4b40      	ldr	r3, [pc, #256]	; (80013a0 <Startjoys_imuTask+0x238>)
 800129e:	7a9b      	ldrb	r3, [r3, #10]
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b4e      	ldr	r3, [pc, #312]	; (80013dc <Startjoys_imuTask+0x274>)
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	e012      	b.n	80012ce <Startjoys_imuTask+0x166>
	  }
	  else{
		  HAL_UART_Receive_DMA(&huart2, joystick_buf, sizeof(joystick_buf));
 80012a8:	220d      	movs	r2, #13
 80012aa:	493d      	ldr	r1, [pc, #244]	; (80013a0 <Startjoys_imuTask+0x238>)
 80012ac:	483d      	ldr	r0, [pc, #244]	; (80013a4 <Startjoys_imuTask+0x23c>)
 80012ae:	f006 ffdd 	bl	800826c <HAL_UART_Receive_DMA>
		  joystick_x = 0;
 80012b2:	4b44      	ldr	r3, [pc, #272]	; (80013c4 <Startjoys_imuTask+0x25c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]
		  joystick_y = 0;
 80012b8:	4b43      	ldr	r3, [pc, #268]	; (80013c8 <Startjoys_imuTask+0x260>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	701a      	strb	r2, [r3, #0]
		  joystick_z = 0;
 80012be:	4b43      	ldr	r3, [pc, #268]	; (80013cc <Startjoys_imuTask+0x264>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80012c4:	2200      	movs	r2, #0
 80012c6:	2140      	movs	r1, #64	; 0x40
 80012c8:	4837      	ldr	r0, [pc, #220]	; (80013a8 <Startjoys_imuTask+0x240>)
 80012ca:	f005 f87f 	bl	80063cc <HAL_GPIO_WritePin>
	  }

	  if(joystick_bt_counter == 299){
 80012ce:	4b32      	ldr	r3, [pc, #200]	; (8001398 <Startjoys_imuTask+0x230>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f240 122b 	movw	r2, #299	; 0x12b
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d10d      	bne.n	80012f6 <Startjoys_imuTask+0x18e>
		  joystick_x = 0;
 80012da:	4b3a      	ldr	r3, [pc, #232]	; (80013c4 <Startjoys_imuTask+0x25c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	701a      	strb	r2, [r3, #0]
		  joystick_y = 0;
 80012e0:	4b39      	ldr	r3, [pc, #228]	; (80013c8 <Startjoys_imuTask+0x260>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]
		  joystick_z = 0;
 80012e6:	4b39      	ldr	r3, [pc, #228]	; (80013cc <Startjoys_imuTask+0x264>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80012ec:	2200      	movs	r2, #0
 80012ee:	2140      	movs	r1, #64	; 0x40
 80012f0:	482d      	ldr	r0, [pc, #180]	; (80013a8 <Startjoys_imuTask+0x240>)
 80012f2:	f005 f86b 	bl	80063cc <HAL_GPIO_WritePin>
	  }

	  //GYRO BNO055
	  HAL_UART_Receive_DMA(&huart4, imu_buf, sizeof(imu_buf));
 80012f6:	2220      	movs	r2, #32
 80012f8:	4939      	ldr	r1, [pc, #228]	; (80013e0 <Startjoys_imuTask+0x278>)
 80012fa:	483a      	ldr	r0, [pc, #232]	; (80013e4 <Startjoys_imuTask+0x27c>)
 80012fc:	f006 ffb6 	bl	800826c <HAL_UART_Receive_DMA>
	  if(imu_buf[0] == 'i' && imu_buf[1] == 't' && imu_buf[2] == 's'){
 8001300:	4b37      	ldr	r3, [pc, #220]	; (80013e0 <Startjoys_imuTask+0x278>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b69      	cmp	r3, #105	; 0x69
 8001306:	d137      	bne.n	8001378 <Startjoys_imuTask+0x210>
 8001308:	4b35      	ldr	r3, [pc, #212]	; (80013e0 <Startjoys_imuTask+0x278>)
 800130a:	785b      	ldrb	r3, [r3, #1]
 800130c:	2b74      	cmp	r3, #116	; 0x74
 800130e:	d133      	bne.n	8001378 <Startjoys_imuTask+0x210>
 8001310:	4b33      	ldr	r3, [pc, #204]	; (80013e0 <Startjoys_imuTask+0x278>)
 8001312:	789b      	ldrb	r3, [r3, #2]
 8001314:	2b73      	cmp	r3, #115	; 0x73
 8001316:	d12f      	bne.n	8001378 <Startjoys_imuTask+0x210>
		  memcpy(&euler_x, imu_buf + 3, 4);
 8001318:	4b33      	ldr	r3, [pc, #204]	; (80013e8 <Startjoys_imuTask+0x280>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	461a      	mov	r2, r3
 800131e:	4b33      	ldr	r3, [pc, #204]	; (80013ec <Startjoys_imuTask+0x284>)
 8001320:	601a      	str	r2, [r3, #0]
		  memcpy(&euler_y, imu_buf + 7, 4);
 8001322:	4b33      	ldr	r3, [pc, #204]	; (80013f0 <Startjoys_imuTask+0x288>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	461a      	mov	r2, r3
 8001328:	4b32      	ldr	r3, [pc, #200]	; (80013f4 <Startjoys_imuTask+0x28c>)
 800132a:	601a      	str	r2, [r3, #0]
		  memcpy(&euler_z, imu_buf + 11, 4);
 800132c:	4b32      	ldr	r3, [pc, #200]	; (80013f8 <Startjoys_imuTask+0x290>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	461a      	mov	r2, r3
 8001332:	4b32      	ldr	r3, [pc, #200]	; (80013fc <Startjoys_imuTask+0x294>)
 8001334:	601a      	str	r2, [r3, #0]
		  memcpy(&quat_w, imu_buf + 15, 4);
 8001336:	4b32      	ldr	r3, [pc, #200]	; (8001400 <Startjoys_imuTask+0x298>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	461a      	mov	r2, r3
 800133c:	4b31      	ldr	r3, [pc, #196]	; (8001404 <Startjoys_imuTask+0x29c>)
 800133e:	601a      	str	r2, [r3, #0]
		  memcpy(&quat_x, imu_buf + 19, 4);
 8001340:	4b31      	ldr	r3, [pc, #196]	; (8001408 <Startjoys_imuTask+0x2a0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	461a      	mov	r2, r3
 8001346:	4b31      	ldr	r3, [pc, #196]	; (800140c <Startjoys_imuTask+0x2a4>)
 8001348:	601a      	str	r2, [r3, #0]
		  memcpy(&quat_y, imu_buf + 23, 4);
 800134a:	4b31      	ldr	r3, [pc, #196]	; (8001410 <Startjoys_imuTask+0x2a8>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	4b30      	ldr	r3, [pc, #192]	; (8001414 <Startjoys_imuTask+0x2ac>)
 8001352:	601a      	str	r2, [r3, #0]
		  memcpy(&quat_z, imu_buf + 27, 4);
 8001354:	4b30      	ldr	r3, [pc, #192]	; (8001418 <Startjoys_imuTask+0x2b0>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	461a      	mov	r2, r3
 800135a:	4b30      	ldr	r3, [pc, #192]	; (800141c <Startjoys_imuTask+0x2b4>)
 800135c:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 800135e:	2201      	movs	r2, #1
 8001360:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001364:	482e      	ldr	r0, [pc, #184]	; (8001420 <Startjoys_imuTask+0x2b8>)
 8001366:	f005 f831 	bl	80063cc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 800136a:	2201      	movs	r2, #1
 800136c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001370:	482b      	ldr	r0, [pc, #172]	; (8001420 <Startjoys_imuTask+0x2b8>)
 8001372:	f005 f82b 	bl	80063cc <HAL_GPIO_WritePin>
 8001376:	e00b      	b.n	8001390 <Startjoys_imuTask+0x228>
	  }else{
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8001378:	2200      	movs	r2, #0
 800137a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800137e:	4828      	ldr	r0, [pc, #160]	; (8001420 <Startjoys_imuTask+0x2b8>)
 8001380:	f005 f824 	bl	80063cc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8001384:	2200      	movs	r2, #0
 8001386:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800138a:	4825      	ldr	r0, [pc, #148]	; (8001420 <Startjoys_imuTask+0x2b8>)
 800138c:	f005 f81e 	bl	80063cc <HAL_GPIO_WritePin>
	  }
    osDelay(1);
 8001390:	2001      	movs	r0, #1
 8001392:	f008 f8e6 	bl	8009562 <osDelay>
	  if(joystick_bt_counter < joystick_bt_timeout){
 8001396:	e6eb      	b.n	8001170 <Startjoys_imuTask+0x8>
 8001398:	200003ec 	.word	0x200003ec
 800139c:	20000004 	.word	0x20000004
 80013a0:	200003d8 	.word	0x200003d8
 80013a4:	20001358 	.word	0x20001358
 80013a8:	40020c00 	.word	0x40020c00
 80013ac:	200003db 	.word	0x200003db
 80013b0:	200003e6 	.word	0x200003e6
 80013b4:	200003dc 	.word	0x200003dc
 80013b8:	200003e5 	.word	0x200003e5
 80013bc:	200003de 	.word	0x200003de
 80013c0:	200003e7 	.word	0x200003e7
 80013c4:	200003e8 	.word	0x200003e8
 80013c8:	200003e9 	.word	0x200003e9
 80013cc:	200003ea 	.word	0x200003ea
 80013d0:	200003f0 	.word	0x200003f0
 80013d4:	200003f4 	.word	0x200003f4
 80013d8:	200003f8 	.word	0x200003f8
 80013dc:	200003fc 	.word	0x200003fc
 80013e0:	2000040c 	.word	0x2000040c
 80013e4:	2000128c 	.word	0x2000128c
 80013e8:	2000040f 	.word	0x2000040f
 80013ec:	2000042c 	.word	0x2000042c
 80013f0:	20000413 	.word	0x20000413
 80013f4:	20000430 	.word	0x20000430
 80013f8:	20000417 	.word	0x20000417
 80013fc:	20000434 	.word	0x20000434
 8001400:	2000041b 	.word	0x2000041b
 8001404:	20000438 	.word	0x20000438
 8001408:	2000041f 	.word	0x2000041f
 800140c:	2000043c 	.word	0x2000043c
 8001410:	20000423 	.word	0x20000423
 8001414:	20000440 	.word	0x20000440
 8001418:	20000427 	.word	0x20000427
 800141c:	20000444 	.word	0x20000444
 8001420:	40021000 	.word	0x40021000

08001424 <StartrosserialTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartrosserialTask */
void StartrosserialTask(void const * argument)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartrosserialTask */
	setup();
 800142c:	f002 f8bc 	bl	80035a8 <setup>
  /* Infinite loop */
  for(;;)
  {
	loop();
 8001430:	f002 f8d0 	bl	80035d4 <loop>
    osDelay(32);
 8001434:	2020      	movs	r0, #32
 8001436:	f008 f894 	bl	8009562 <osDelay>
	loop();
 800143a:	e7f9      	b.n	8001430 <StartrosserialTask+0xc>

0800143c <Startout_motorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startout_motorTask */
void Startout_motorTask(void const * argument)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startout_motorTask */
  /* Infinite loop */
  for(;;)
  {
	  //=================CONTROL SPEED==================//
	  	  if(joystick_increase_speed == 1 && lock_increase_speed == 0){
 8001444:	4b8d      	ldr	r3, [pc, #564]	; (800167c <Startout_motorTask+0x240>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d10b      	bne.n	8001464 <Startout_motorTask+0x28>
 800144c:	4b8c      	ldr	r3, [pc, #560]	; (8001680 <Startout_motorTask+0x244>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d107      	bne.n	8001464 <Startout_motorTask+0x28>
	  		  speed++;
 8001454:	4b8b      	ldr	r3, [pc, #556]	; (8001684 <Startout_motorTask+0x248>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	3301      	adds	r3, #1
 800145a:	4a8a      	ldr	r2, [pc, #552]	; (8001684 <Startout_motorTask+0x248>)
 800145c:	6013      	str	r3, [r2, #0]
	  		  lock_increase_speed = 1;
 800145e:	4b88      	ldr	r3, [pc, #544]	; (8001680 <Startout_motorTask+0x244>)
 8001460:	2201      	movs	r2, #1
 8001462:	601a      	str	r2, [r3, #0]
	  	  }
	  	  if(joystick_increase_speed == 0 && lock_increase_speed == 1){
 8001464:	4b85      	ldr	r3, [pc, #532]	; (800167c <Startout_motorTask+0x240>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d106      	bne.n	800147a <Startout_motorTask+0x3e>
 800146c:	4b84      	ldr	r3, [pc, #528]	; (8001680 <Startout_motorTask+0x244>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d102      	bne.n	800147a <Startout_motorTask+0x3e>
	  		  lock_increase_speed = 0;
 8001474:	4b82      	ldr	r3, [pc, #520]	; (8001680 <Startout_motorTask+0x244>)
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
	  	  }

	  	  if(joystick_decrease_speed == 1 && lock_decrease_speed == 0){
 800147a:	4b83      	ldr	r3, [pc, #524]	; (8001688 <Startout_motorTask+0x24c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d10b      	bne.n	800149a <Startout_motorTask+0x5e>
 8001482:	4b82      	ldr	r3, [pc, #520]	; (800168c <Startout_motorTask+0x250>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d107      	bne.n	800149a <Startout_motorTask+0x5e>
	  		  speed--;
 800148a:	4b7e      	ldr	r3, [pc, #504]	; (8001684 <Startout_motorTask+0x248>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	3b01      	subs	r3, #1
 8001490:	4a7c      	ldr	r2, [pc, #496]	; (8001684 <Startout_motorTask+0x248>)
 8001492:	6013      	str	r3, [r2, #0]
	  		  lock_decrease_speed = 1;
 8001494:	4b7d      	ldr	r3, [pc, #500]	; (800168c <Startout_motorTask+0x250>)
 8001496:	2201      	movs	r2, #1
 8001498:	601a      	str	r2, [r3, #0]
	  	  }
	  	  if(joystick_decrease_speed == 0 && lock_decrease_speed == 1){
 800149a:	4b7b      	ldr	r3, [pc, #492]	; (8001688 <Startout_motorTask+0x24c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d106      	bne.n	80014b0 <Startout_motorTask+0x74>
 80014a2:	4b7a      	ldr	r3, [pc, #488]	; (800168c <Startout_motorTask+0x250>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d102      	bne.n	80014b0 <Startout_motorTask+0x74>
	  		  lock_decrease_speed = 0;
 80014aa:	4b78      	ldr	r3, [pc, #480]	; (800168c <Startout_motorTask+0x250>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
	    	  }

	  	  if(speed > 2){
 80014b0:	4b74      	ldr	r3, [pc, #464]	; (8001684 <Startout_motorTask+0x248>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	dd02      	ble.n	80014be <Startout_motorTask+0x82>
	  		  speed = 0;
 80014b8:	4b72      	ldr	r3, [pc, #456]	; (8001684 <Startout_motorTask+0x248>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
	  	  }
	  	  if(speed < 0){
 80014be:	4b71      	ldr	r3, [pc, #452]	; (8001684 <Startout_motorTask+0x248>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	da02      	bge.n	80014cc <Startout_motorTask+0x90>
	  		  speed = 2;
 80014c6:	4b6f      	ldr	r3, [pc, #444]	; (8001684 <Startout_motorTask+0x248>)
 80014c8:	2202      	movs	r2, #2
 80014ca:	601a      	str	r2, [r3, #0]
	  	  }

	  	  if(speed == 0){
 80014cc:	4b6d      	ldr	r3, [pc, #436]	; (8001684 <Startout_motorTask+0x248>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d112      	bne.n	80014fa <Startout_motorTask+0xbe>
	  		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 80014d4:	2201      	movs	r2, #1
 80014d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014da:	486d      	ldr	r0, [pc, #436]	; (8001690 <Startout_motorTask+0x254>)
 80014dc:	f004 ff76 	bl	80063cc <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80014e0:	2200      	movs	r2, #0
 80014e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014e6:	486b      	ldr	r0, [pc, #428]	; (8001694 <Startout_motorTask+0x258>)
 80014e8:	f004 ff70 	bl	80063cc <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80014ec:	2200      	movs	r2, #0
 80014ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014f2:	4868      	ldr	r0, [pc, #416]	; (8001694 <Startout_motorTask+0x258>)
 80014f4:	f004 ff6a 	bl	80063cc <HAL_GPIO_WritePin>
 80014f8:	e02c      	b.n	8001554 <Startout_motorTask+0x118>
	  	  }else if(speed == 1){
 80014fa:	4b62      	ldr	r3, [pc, #392]	; (8001684 <Startout_motorTask+0x248>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d112      	bne.n	8001528 <Startout_motorTask+0xec>
	  		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8001502:	2200      	movs	r2, #0
 8001504:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001508:	4861      	ldr	r0, [pc, #388]	; (8001690 <Startout_motorTask+0x254>)
 800150a:	f004 ff5f 	bl	80063cc <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800150e:	2201      	movs	r2, #1
 8001510:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001514:	485f      	ldr	r0, [pc, #380]	; (8001694 <Startout_motorTask+0x258>)
 8001516:	f004 ff59 	bl	80063cc <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800151a:	2200      	movs	r2, #0
 800151c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001520:	485c      	ldr	r0, [pc, #368]	; (8001694 <Startout_motorTask+0x258>)
 8001522:	f004 ff53 	bl	80063cc <HAL_GPIO_WritePin>
 8001526:	e015      	b.n	8001554 <Startout_motorTask+0x118>
	  	  }else if(speed == 2){
 8001528:	4b56      	ldr	r3, [pc, #344]	; (8001684 <Startout_motorTask+0x248>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b02      	cmp	r3, #2
 800152e:	d111      	bne.n	8001554 <Startout_motorTask+0x118>
	  		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8001530:	2200      	movs	r2, #0
 8001532:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001536:	4856      	ldr	r0, [pc, #344]	; (8001690 <Startout_motorTask+0x254>)
 8001538:	f004 ff48 	bl	80063cc <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800153c:	2200      	movs	r2, #0
 800153e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001542:	4854      	ldr	r0, [pc, #336]	; (8001694 <Startout_motorTask+0x258>)
 8001544:	f004 ff42 	bl	80063cc <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001548:	2201      	movs	r2, #1
 800154a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800154e:	4851      	ldr	r0, [pc, #324]	; (8001694 <Startout_motorTask+0x258>)
 8001550:	f004 ff3c 	bl	80063cc <HAL_GPIO_WritePin>
	  	  }

	  	  //=====================SELECT MODE COMM/STM=================//
	  	  if(mode == 1){
 8001554:	4b50      	ldr	r3, [pc, #320]	; (8001698 <Startout_motorTask+0x25c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d113      	bne.n	8001584 <Startout_motorTask+0x148>
	  		  for(int i = 0; i <= 2; i++){
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	e00c      	b.n	800157c <Startout_motorTask+0x140>
	  			  outputPWM[i] = outputPWM_comm[i];
 8001562:	4a4e      	ldr	r2, [pc, #312]	; (800169c <Startout_motorTask+0x260>)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	494c      	ldr	r1, [pc, #304]	; (80016a0 <Startout_motorTask+0x264>)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	440b      	add	r3, r1
 8001574:	601a      	str	r2, [r3, #0]
	  		  for(int i = 0; i <= 2; i++){
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	3301      	adds	r3, #1
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2b02      	cmp	r3, #2
 8001580:	ddef      	ble.n	8001562 <Startout_motorTask+0x126>
 8001582:	e016      	b.n	80015b2 <Startout_motorTask+0x176>
	  		  }
	  	  }
	  	  else if(mode == 0){
 8001584:	4b44      	ldr	r3, [pc, #272]	; (8001698 <Startout_motorTask+0x25c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d112      	bne.n	80015b2 <Startout_motorTask+0x176>
	  		  for(int i = 0; i <= 2; i++){
 800158c:	2300      	movs	r3, #0
 800158e:	60bb      	str	r3, [r7, #8]
 8001590:	e00c      	b.n	80015ac <Startout_motorTask+0x170>
	  			  outputPWM[i] = outputPWM_stm[i];
 8001592:	4a44      	ldr	r2, [pc, #272]	; (80016a4 <Startout_motorTask+0x268>)
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4413      	add	r3, r2
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4940      	ldr	r1, [pc, #256]	; (80016a0 <Startout_motorTask+0x264>)
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	440b      	add	r3, r1
 80015a4:	601a      	str	r2, [r3, #0]
	  		  for(int i = 0; i <= 2; i++){
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	3301      	adds	r3, #1
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	ddef      	ble.n	8001592 <Startout_motorTask+0x156>
	  		  }
	  	  }
	  	  //========================OUTPUT PWM===========================//
	  	  if (outputPWM[0] < 0){
 80015b2:	4b3b      	ldr	r3, [pc, #236]	; (80016a0 <Startout_motorTask+0x264>)
 80015b4:	edd3 7a00 	vldr	s15, [r3]
 80015b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c0:	d50c      	bpl.n	80015dc <Startout_motorTask+0x1a0>
	  		  HAL_GPIO_WritePin(MOTOR1A_GPIO_Port, MOTOR1A_Pin, GPIO_PIN_SET);
 80015c2:	2201      	movs	r2, #1
 80015c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015c8:	4837      	ldr	r0, [pc, #220]	; (80016a8 <Startout_motorTask+0x26c>)
 80015ca:	f004 feff 	bl	80063cc <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(MOTOR1B_GPIO_Port, MOTOR1B_Pin, GPIO_PIN_RESET);
 80015ce:	2200      	movs	r2, #0
 80015d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015d4:	4834      	ldr	r0, [pc, #208]	; (80016a8 <Startout_motorTask+0x26c>)
 80015d6:	f004 fef9 	bl	80063cc <HAL_GPIO_WritePin>
 80015da:	e013      	b.n	8001604 <Startout_motorTask+0x1c8>
	  	 	  }
	  	  else if (outputPWM[0] > 0){
 80015dc:	4b30      	ldr	r3, [pc, #192]	; (80016a0 <Startout_motorTask+0x264>)
 80015de:	edd3 7a00 	vldr	s15, [r3]
 80015e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ea:	dd0b      	ble.n	8001604 <Startout_motorTask+0x1c8>
	   		  HAL_GPIO_WritePin(MOTOR1A_GPIO_Port, MOTOR1A_Pin, GPIO_PIN_RESET);
 80015ec:	2200      	movs	r2, #0
 80015ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015f2:	482d      	ldr	r0, [pc, #180]	; (80016a8 <Startout_motorTask+0x26c>)
 80015f4:	f004 feea 	bl	80063cc <HAL_GPIO_WritePin>
	   		  HAL_GPIO_WritePin(MOTOR1B_GPIO_Port, MOTOR1B_Pin, GPIO_PIN_SET);
 80015f8:	2201      	movs	r2, #1
 80015fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015fe:	482a      	ldr	r0, [pc, #168]	; (80016a8 <Startout_motorTask+0x26c>)
 8001600:	f004 fee4 	bl	80063cc <HAL_GPIO_WritePin>
	   	  }
	   	  //==============================================================================
	   	  if (outputPWM[1] < 0){
 8001604:	4b26      	ldr	r3, [pc, #152]	; (80016a0 <Startout_motorTask+0x264>)
 8001606:	edd3 7a01 	vldr	s15, [r3, #4]
 800160a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800160e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001612:	d50b      	bpl.n	800162c <Startout_motorTask+0x1f0>
	   		  HAL_GPIO_WritePin(MOTOR2A_GPIO_Port, MOTOR2A_Pin, GPIO_PIN_SET);
 8001614:	2201      	movs	r2, #1
 8001616:	2180      	movs	r1, #128	; 0x80
 8001618:	481d      	ldr	r0, [pc, #116]	; (8001690 <Startout_motorTask+0x254>)
 800161a:	f004 fed7 	bl	80063cc <HAL_GPIO_WritePin>
	   		  HAL_GPIO_WritePin(MOTOR2B_GPIO_Port, MOTOR2B_Pin, GPIO_PIN_RESET);
 800161e:	2200      	movs	r2, #0
 8001620:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001624:	481a      	ldr	r0, [pc, #104]	; (8001690 <Startout_motorTask+0x254>)
 8001626:	f004 fed1 	bl	80063cc <HAL_GPIO_WritePin>
 800162a:	e012      	b.n	8001652 <Startout_motorTask+0x216>
	   	  }
	   	  else if (outputPWM[1] > 0){
 800162c:	4b1c      	ldr	r3, [pc, #112]	; (80016a0 <Startout_motorTask+0x264>)
 800162e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001632:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800163a:	dd0a      	ble.n	8001652 <Startout_motorTask+0x216>
	   		  HAL_GPIO_WritePin(MOTOR2A_GPIO_Port, MOTOR2A_Pin, GPIO_PIN_RESET);
 800163c:	2200      	movs	r2, #0
 800163e:	2180      	movs	r1, #128	; 0x80
 8001640:	4813      	ldr	r0, [pc, #76]	; (8001690 <Startout_motorTask+0x254>)
 8001642:	f004 fec3 	bl	80063cc <HAL_GPIO_WritePin>
	   		  HAL_GPIO_WritePin(MOTOR2B_GPIO_Port, MOTOR2B_Pin, GPIO_PIN_SET);
 8001646:	2201      	movs	r2, #1
 8001648:	f44f 7180 	mov.w	r1, #256	; 0x100
 800164c:	4810      	ldr	r0, [pc, #64]	; (8001690 <Startout_motorTask+0x254>)
 800164e:	f004 febd 	bl	80063cc <HAL_GPIO_WritePin>
	   	  }
	   	  //==============================================================================
	   	  if (outputPWM[2] < 0){
 8001652:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <Startout_motorTask+0x264>)
 8001654:	edd3 7a02 	vldr	s15, [r3, #8]
 8001658:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800165c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001660:	d526      	bpl.n	80016b0 <Startout_motorTask+0x274>
	   		  HAL_GPIO_WritePin(MOTOR3A_GPIO_Port, MOTOR3A_Pin, GPIO_PIN_SET);
 8001662:	2201      	movs	r2, #1
 8001664:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001668:	4810      	ldr	r0, [pc, #64]	; (80016ac <Startout_motorTask+0x270>)
 800166a:	f004 feaf 	bl	80063cc <HAL_GPIO_WritePin>
	   		  HAL_GPIO_WritePin(MOTOR3B_GPIO_Port, MOTOR3B_Pin, GPIO_PIN_RESET);
 800166e:	2200      	movs	r2, #0
 8001670:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001674:	480d      	ldr	r0, [pc, #52]	; (80016ac <Startout_motorTask+0x270>)
 8001676:	f004 fea9 	bl	80063cc <HAL_GPIO_WritePin>
 800167a:	e02d      	b.n	80016d8 <Startout_motorTask+0x29c>
 800167c:	200003f8 	.word	0x200003f8
 8001680:	20000404 	.word	0x20000404
 8001684:	20000400 	.word	0x20000400
 8001688:	200003fc 	.word	0x200003fc
 800168c:	20000408 	.word	0x20000408
 8001690:	40021000 	.word	0x40021000
 8001694:	40020000 	.word	0x40020000
 8001698:	200003f4 	.word	0x200003f4
 800169c:	200005d8 	.word	0x200005d8
 80016a0:	200003cc 	.word	0x200003cc
 80016a4:	200005e4 	.word	0x200005e4
 80016a8:	40020800 	.word	0x40020800
 80016ac:	40020c00 	.word	0x40020c00
	   	  }
	   	  else if (outputPWM[2] > 0)
 80016b0:	4b2b      	ldr	r3, [pc, #172]	; (8001760 <Startout_motorTask+0x324>)
 80016b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80016b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016be:	dd0b      	ble.n	80016d8 <Startout_motorTask+0x29c>
	   	  {
	   		  HAL_GPIO_WritePin(MOTOR3A_GPIO_Port, MOTOR3A_Pin, GPIO_PIN_RESET);
 80016c0:	2200      	movs	r2, #0
 80016c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016c6:	4827      	ldr	r0, [pc, #156]	; (8001764 <Startout_motorTask+0x328>)
 80016c8:	f004 fe80 	bl	80063cc <HAL_GPIO_WritePin>
	   		  HAL_GPIO_WritePin(MOTOR3B_GPIO_Port, MOTOR3B_Pin, GPIO_PIN_SET);
 80016cc:	2201      	movs	r2, #1
 80016ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016d2:	4824      	ldr	r0, [pc, #144]	; (8001764 <Startout_motorTask+0x328>)
 80016d4:	f004 fe7a 	bl	80063cc <HAL_GPIO_WritePin>
	   	  }

	   	  //========================SAFETY CONTROL PWM=====================//
	   	  if(joystick_bt_counter == 299 || joystick_mode == 0){
 80016d8:	4b23      	ldr	r3, [pc, #140]	; (8001768 <Startout_motorTask+0x32c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f240 122b 	movw	r2, #299	; 0x12b
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d003      	beq.n	80016ec <Startout_motorTask+0x2b0>
 80016e4:	4b21      	ldr	r3, [pc, #132]	; (800176c <Startout_motorTask+0x330>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d10b      	bne.n	8001704 <Startout_motorTask+0x2c8>
	   		  outputPWM[0] = 0;
 80016ec:	4b1c      	ldr	r3, [pc, #112]	; (8001760 <Startout_motorTask+0x324>)
 80016ee:	f04f 0200 	mov.w	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
	   		  outputPWM[1] = 0;
 80016f4:	4b1a      	ldr	r3, [pc, #104]	; (8001760 <Startout_motorTask+0x324>)
 80016f6:	f04f 0200 	mov.w	r2, #0
 80016fa:	605a      	str	r2, [r3, #4]
	   		  outputPWM[2] = 0;
 80016fc:	4b18      	ldr	r3, [pc, #96]	; (8001760 <Startout_motorTask+0x324>)
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
	   	  }

	   	  __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, abs(outputPWM[0]));
 8001704:	4b16      	ldr	r3, [pc, #88]	; (8001760 <Startout_motorTask+0x324>)
 8001706:	edd3 7a00 	vldr	s15, [r3]
 800170a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800170e:	ee17 3a90 	vmov	r3, s15
 8001712:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001716:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800171a:	4b15      	ldr	r3, [pc, #84]	; (8001770 <Startout_motorTask+0x334>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	635a      	str	r2, [r3, #52]	; 0x34
	   	  __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, abs(outputPWM[1]));
 8001720:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <Startout_motorTask+0x324>)
 8001722:	edd3 7a01 	vldr	s15, [r3, #4]
 8001726:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800172a:	ee17 3a90 	vmov	r3, s15
 800172e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001732:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001736:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <Startout_motorTask+0x334>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	639a      	str	r2, [r3, #56]	; 0x38
	   	  __HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, abs(outputPWM[2]));
 800173c:	4b08      	ldr	r3, [pc, #32]	; (8001760 <Startout_motorTask+0x324>)
 800173e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001742:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001746:	ee17 3a90 	vmov	r3, s15
 800174a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800174e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001752:	4b08      	ldr	r3, [pc, #32]	; (8001774 <Startout_motorTask+0x338>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	639a      	str	r2, [r3, #56]	; 0x38

	   	  osDelay(1);
 8001758:	2001      	movs	r0, #1
 800175a:	f007 ff02 	bl	8009562 <osDelay>
	  	  if(joystick_increase_speed == 1 && lock_increase_speed == 0){
 800175e:	e671      	b.n	8001444 <Startout_motorTask+0x8>
 8001760:	200003cc 	.word	0x200003cc
 8001764:	40020c00 	.word	0x40020c00
 8001768:	200003ec 	.word	0x200003ec
 800176c:	200003f0 	.word	0x200003f0
 8001770:	200011b4 	.word	0x200011b4
 8001774:	200011fc 	.word	0x200011fc

08001778 <MX_GPIO_Init>:
     PD1   ------> CAN1_TX
     PB8   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08c      	sub	sp, #48	; 0x30
 800177c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177e:	f107 031c 	add.w	r3, r7, #28
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]
 8001788:	609a      	str	r2, [r3, #8]
 800178a:	60da      	str	r2, [r3, #12]
 800178c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	61bb      	str	r3, [r7, #24]
 8001792:	4b96      	ldr	r3, [pc, #600]	; (80019ec <MX_GPIO_Init+0x274>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a95      	ldr	r2, [pc, #596]	; (80019ec <MX_GPIO_Init+0x274>)
 8001798:	f043 0310 	orr.w	r3, r3, #16
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b93      	ldr	r3, [pc, #588]	; (80019ec <MX_GPIO_Init+0x274>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0310 	and.w	r3, r3, #16
 80017a6:	61bb      	str	r3, [r7, #24]
 80017a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	4b8f      	ldr	r3, [pc, #572]	; (80019ec <MX_GPIO_Init+0x274>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	4a8e      	ldr	r2, [pc, #568]	; (80019ec <MX_GPIO_Init+0x274>)
 80017b4:	f043 0304 	orr.w	r3, r3, #4
 80017b8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ba:	4b8c      	ldr	r3, [pc, #560]	; (80019ec <MX_GPIO_Init+0x274>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	f003 0304 	and.w	r3, r3, #4
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	613b      	str	r3, [r7, #16]
 80017ca:	4b88      	ldr	r3, [pc, #544]	; (80019ec <MX_GPIO_Init+0x274>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a87      	ldr	r2, [pc, #540]	; (80019ec <MX_GPIO_Init+0x274>)
 80017d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b85      	ldr	r3, [pc, #532]	; (80019ec <MX_GPIO_Init+0x274>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017de:	613b      	str	r3, [r7, #16]
 80017e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	4b81      	ldr	r3, [pc, #516]	; (80019ec <MX_GPIO_Init+0x274>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a80      	ldr	r2, [pc, #512]	; (80019ec <MX_GPIO_Init+0x274>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b7e      	ldr	r3, [pc, #504]	; (80019ec <MX_GPIO_Init+0x274>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	4b7a      	ldr	r3, [pc, #488]	; (80019ec <MX_GPIO_Init+0x274>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a79      	ldr	r2, [pc, #484]	; (80019ec <MX_GPIO_Init+0x274>)
 8001808:	f043 0302 	orr.w	r3, r3, #2
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4b77      	ldr	r3, [pc, #476]	; (80019ec <MX_GPIO_Init+0x274>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	4b73      	ldr	r3, [pc, #460]	; (80019ec <MX_GPIO_Init+0x274>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	4a72      	ldr	r2, [pc, #456]	; (80019ec <MX_GPIO_Init+0x274>)
 8001824:	f043 0308 	orr.w	r3, r3, #8
 8001828:	6313      	str	r3, [r2, #48]	; 0x30
 800182a:	4b70      	ldr	r3, [pc, #448]	; (80019ec <MX_GPIO_Init+0x274>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	f003 0308 	and.w	r3, r3, #8
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|MOTOR2A_Pin|MOTOR2B_Pin|GPIO_PIN_10
 8001836:	2200      	movs	r2, #0
 8001838:	f24f 5189 	movw	r1, #62857	; 0xf589
 800183c:	486c      	ldr	r0, [pc, #432]	; (80019f0 <MX_GPIO_Init+0x278>)
 800183e:	f004 fdc5 	bl	80063cc <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001842:	2201      	movs	r2, #1
 8001844:	2101      	movs	r1, #1
 8001846:	486b      	ldr	r0, [pc, #428]	; (80019f4 <MX_GPIO_Init+0x27c>)
 8001848:	f004 fdc0 	bl	80063cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD1_Pin|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800184c:	2200      	movs	r2, #0
 800184e:	f641 0102 	movw	r1, #6146	; 0x1802
 8001852:	4869      	ldr	r0, [pc, #420]	; (80019f8 <MX_GPIO_Init+0x280>)
 8001854:	f004 fdba 	bl	80063cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|MOTOR1A_Pin|MOTOR1B_Pin, GPIO_PIN_RESET);
 8001858:	2200      	movs	r2, #0
 800185a:	f44f 714c 	mov.w	r1, #816	; 0x330
 800185e:	4865      	ldr	r0, [pc, #404]	; (80019f4 <MX_GPIO_Init+0x27c>)
 8001860:	f004 fdb4 	bl	80063cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MOTOR3A_Pin|MOTOR3B_Pin|Audio_RST_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001864:	2200      	movs	r2, #0
 8001866:	f44f 6145 	mov.w	r1, #3152	; 0xc50
 800186a:	4864      	ldr	r0, [pc, #400]	; (80019fc <MX_GPIO_Init+0x284>)
 800186c:	f004 fdae 	bl	80063cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PEPin PEPin PE10
                           PE12 PE13 PE14 PE15
                           PEPin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|MOTOR2A_Pin|MOTOR2B_Pin|GPIO_PIN_10
 8001870:	f24f 5389 	movw	r3, #62857	; 0xf589
 8001874:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001876:	2301      	movs	r3, #1
 8001878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187e:	2300      	movs	r3, #0
 8001880:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001882:	f107 031c 	add.w	r3, r7, #28
 8001886:	4619      	mov	r1, r3
 8001888:	4859      	ldr	r0, [pc, #356]	; (80019f0 <MX_GPIO_Init+0x278>)
 800188a:	f004 fc03 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PC4 PC5 PCPin
                           PCPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_4|GPIO_PIN_5|MOTOR1A_Pin
 800188e:	f240 3331 	movw	r3, #817	; 0x331
 8001892:	61fb      	str	r3, [r7, #28]
                          |MOTOR1B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001894:	2301      	movs	r3, #1
 8001896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189c:	2300      	movs	r3, #0
 800189e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018a0:	f107 031c 	add.w	r3, r7, #28
 80018a4:	4619      	mov	r1, r3
 80018a6:	4853      	ldr	r0, [pc, #332]	; (80019f4 <MX_GPIO_Init+0x27c>)
 80018a8:	f004 fbf4 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80018ac:	2306      	movs	r3, #6
 80018ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018b0:	2303      	movs	r3, #3
 80018b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018b8:	f107 031c 	add.w	r3, r7, #28
 80018bc:	4619      	mov	r1, r3
 80018be:	484d      	ldr	r0, [pc, #308]	; (80019f4 <MX_GPIO_Init+0x27c>)
 80018c0:	f004 fbe8 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018c4:	2301      	movs	r3, #1
 80018c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80018c8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80018cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018d2:	f107 031c 	add.w	r3, r7, #28
 80018d6:	4619      	mov	r1, r3
 80018d8:	4847      	ldr	r0, [pc, #284]	; (80019f8 <MX_GPIO_Init+0x280>)
 80018da:	f004 fbdb 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA11 PA12 */
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_11|GPIO_PIN_12;
 80018de:	f641 0302 	movw	r3, #6146	; 0x1802
 80018e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e4:	2301      	movs	r3, #1
 80018e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ec:	2300      	movs	r3, #0
 80018ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f0:	f107 031c 	add.w	r3, r7, #28
 80018f4:	4619      	mov	r1, r3
 80018f6:	4840      	ldr	r0, [pc, #256]	; (80019f8 <MX_GPIO_Init+0x280>)
 80018f8:	f004 fbcc 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018fc:	2310      	movs	r3, #16
 80018fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001900:	2302      	movs	r3, #2
 8001902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001908:	2303      	movs	r3, #3
 800190a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800190c:	2305      	movs	r3, #5
 800190e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001910:	f107 031c 	add.w	r3, r7, #28
 8001914:	4619      	mov	r1, r3
 8001916:	4838      	ldr	r0, [pc, #224]	; (80019f8 <MX_GPIO_Init+0x280>)
 8001918:	f004 fbbc 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 800191c:	f243 0307 	movw	r3, #12295	; 0x3007
 8001920:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001922:	2300      	movs	r3, #0
 8001924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800192a:	f107 031c 	add.w	r3, r7, #28
 800192e:	4619      	mov	r1, r3
 8001930:	4833      	ldr	r0, [pc, #204]	; (8001a00 <MX_GPIO_Init+0x288>)
 8001932:	f004 fbaf 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = MOTOR3A_Pin|MOTOR3B_Pin|Audio_RST_Pin|LED2_Pin;
 8001936:	f44f 6345 	mov.w	r3, #3152	; 0xc50
 800193a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800193c:	2301      	movs	r3, #1
 800193e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001944:	2300      	movs	r3, #0
 8001946:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001948:	f107 031c 	add.w	r3, r7, #28
 800194c:	4619      	mov	r1, r3
 800194e:	482b      	ldr	r0, [pc, #172]	; (80019fc <MX_GPIO_Init+0x284>)
 8001950:	f004 fba0 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001954:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800195a:	2303      	movs	r3, #3
 800195c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001962:	f107 031c 	add.w	r3, r7, #28
 8001966:	4619      	mov	r1, r3
 8001968:	4824      	ldr	r0, [pc, #144]	; (80019fc <MX_GPIO_Init+0x284>)
 800196a:	f004 fb93 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800196e:	2303      	movs	r3, #3
 8001970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001972:	2302      	movs	r3, #2
 8001974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197a:	2303      	movs	r3, #3
 800197c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800197e:	2309      	movs	r3, #9
 8001980:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001982:	f107 031c 	add.w	r3, r7, #28
 8001986:	4619      	mov	r1, r3
 8001988:	481c      	ldr	r0, [pc, #112]	; (80019fc <MX_GPIO_Init+0x284>)
 800198a:	f004 fb83 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800198e:	2320      	movs	r3, #32
 8001990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001992:	2300      	movs	r3, #0
 8001994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800199a:	f107 031c 	add.w	r3, r7, #28
 800199e:	4619      	mov	r1, r3
 80019a0:	4816      	ldr	r0, [pc, #88]	; (80019fc <MX_GPIO_Init+0x284>)
 80019a2:	f004 fb77 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80019a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019ac:	2312      	movs	r3, #18
 80019ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019b0:	2301      	movs	r3, #1
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b4:	2300      	movs	r3, #0
 80019b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019b8:	2304      	movs	r3, #4
 80019ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019bc:	f107 031c 	add.w	r3, r7, #28
 80019c0:	4619      	mov	r1, r3
 80019c2:	480f      	ldr	r0, [pc, #60]	; (8001a00 <MX_GPIO_Init+0x288>)
 80019c4:	f004 fb66 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80019c8:	2302      	movs	r3, #2
 80019ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80019cc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80019d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80019d6:	f107 031c 	add.w	r3, r7, #28
 80019da:	4619      	mov	r1, r3
 80019dc:	4804      	ldr	r0, [pc, #16]	; (80019f0 <MX_GPIO_Init+0x278>)
 80019de:	f004 fb59 	bl	8006094 <HAL_GPIO_Init>

}
 80019e2:	bf00      	nop
 80019e4:	3730      	adds	r7, #48	; 0x30
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40021000 	.word	0x40021000
 80019f4:	40020800 	.word	0x40020800
 80019f8:	40020000 	.word	0x40020000
 80019fc:	40020c00 	.word	0x40020c00
 8001a00:	40020400 	.word	0x40020400

08001a04 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a14:	d105      	bne.n	8001a22 <HAL_TIM_IC_CaptureCallback+0x1e>
		encoder[0] = __HAL_TIM_GET_COUNTER(&htim2);
 8001a16:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <HAL_TIM_IC_CaptureCallback+0x84>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <HAL_TIM_IC_CaptureCallback+0x88>)
 8001a20:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM3){
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a1a      	ldr	r2, [pc, #104]	; (8001a90 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d105      	bne.n	8001a38 <HAL_TIM_IC_CaptureCallback+0x34>
		encoder[1] = __HAL_TIM_GET_COUNTER(&htim3);
 8001a2c:	4b19      	ldr	r3, [pc, #100]	; (8001a94 <HAL_TIM_IC_CaptureCallback+0x90>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a32:	461a      	mov	r2, r3
 8001a34:	4b15      	ldr	r3, [pc, #84]	; (8001a8c <HAL_TIM_IC_CaptureCallback+0x88>)
 8001a36:	605a      	str	r2, [r3, #4]
	}
	if(htim->Instance == TIM4){
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a16      	ldr	r2, [pc, #88]	; (8001a98 <HAL_TIM_IC_CaptureCallback+0x94>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d105      	bne.n	8001a4e <HAL_TIM_IC_CaptureCallback+0x4a>
		encoder[2] = __HAL_TIM_GET_COUNTER(&htim4);
 8001a42:	4b16      	ldr	r3, [pc, #88]	; (8001a9c <HAL_TIM_IC_CaptureCallback+0x98>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <HAL_TIM_IC_CaptureCallback+0x88>)
 8001a4c:	609a      	str	r2, [r3, #8]
	}

	if(htim->Instance == TIM1){
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a13      	ldr	r2, [pc, #76]	; (8001aa0 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d105      	bne.n	8001a64 <HAL_TIM_IC_CaptureCallback+0x60>
		encoder_external[0] = __HAL_TIM_GET_COUNTER(&htim1);
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5e:	461a      	mov	r2, r3
 8001a60:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8001a62:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM8){
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a10      	ldr	r2, [pc, #64]	; (8001aac <HAL_TIM_IC_CaptureCallback+0xa8>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d105      	bne.n	8001a7a <HAL_TIM_IC_CaptureCallback+0x76>
		encoder_external[1] = __HAL_TIM_GET_COUNTER(&htim8);
 8001a6e:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <HAL_TIM_IC_CaptureCallback+0xac>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a74:	461a      	mov	r2, r3
 8001a76:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8001a78:	605a      	str	r2, [r3, #4]
	}
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	2000104c 	.word	0x2000104c
 8001a8c:	20000360 	.word	0x20000360
 8001a90:	40000400 	.word	0x40000400
 8001a94:	20001094 	.word	0x20001094
 8001a98:	40000800 	.word	0x40000800
 8001a9c:	200010dc 	.word	0x200010dc
 8001aa0:	40010000 	.word	0x40010000
 8001aa4:	20001004 	.word	0x20001004
 8001aa8:	2000036c 	.word	0x2000036c
 8001aac:	40010400 	.word	0x40010400
 8001ab0:	2000116c 	.word	0x2000116c

08001ab4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ab8:	f003 fdc6 	bl	8005648 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001abc:	f000 f862 	bl	8001b84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ac0:	f7ff fe5a 	bl	8001778 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ac4:	f7ff fab4 	bl	8001030 <MX_DMA_Init>
  MX_TIM1_Init();
 8001ac8:	f002 fd5c 	bl	8004584 <MX_TIM1_Init>
  MX_TIM9_Init();
 8001acc:	f002 ff3c 	bl	8004948 <MX_TIM9_Init>
  MX_TIM4_Init();
 8001ad0:	f002 fe58 	bl	8004784 <MX_TIM4_Init>
  MX_TIM3_Init();
 8001ad4:	f002 fe02 	bl	80046dc <MX_TIM3_Init>
  MX_UART4_Init();
 8001ad8:	f003 fa8e 	bl	8004ff8 <MX_UART4_Init>
  MX_USART3_UART_Init();
 8001adc:	f003 fb34 	bl	8005148 <MX_USART3_UART_Init>
  MX_TIM12_Init();
 8001ae0:	f002 ff9e 	bl	8004a20 <MX_TIM12_Init>
  MX_USART2_UART_Init();
 8001ae4:	f003 fb06 	bl	80050f4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001ae8:	f002 fda4 	bl	8004634 <MX_TIM2_Init>
  MX_TIM8_Init();
 8001aec:	f002 fed4 	bl	8004898 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8001af0:	f003 fad6 	bl	80050a0 <MX_USART1_UART_Init>
  MX_TIM7_Init();
 8001af4:	f002 fe9a 	bl	800482c <MX_TIM7_Init>
  MX_TIM13_Init();
 8001af8:	f002 fffe 	bl	8004af8 <MX_TIM13_Init>
  MX_UART5_Init();
 8001afc:	f003 faa6 	bl	800504c <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 8001b00:	4817      	ldr	r0, [pc, #92]	; (8001b60 <main+0xac>)
 8001b02:	f005 f9b1 	bl	8006e68 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim13);
 8001b06:	4817      	ldr	r0, [pc, #92]	; (8001b64 <main+0xb0>)
 8001b08:	f005 f9ae 	bl	8006e68 <HAL_TIM_Base_Start_IT>

  //============ACTUATOR MOTOR============
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);//M1
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	4816      	ldr	r0, [pc, #88]	; (8001b68 <main+0xb4>)
 8001b10:	f005 fa74 	bl	8006ffc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);//M2
 8001b14:	2104      	movs	r1, #4
 8001b16:	4814      	ldr	r0, [pc, #80]	; (8001b68 <main+0xb4>)
 8001b18:	f005 fa70 	bl	8006ffc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);//M3
 8001b1c:	2104      	movs	r1, #4
 8001b1e:	4813      	ldr	r0, [pc, #76]	; (8001b6c <main+0xb8>)
 8001b20:	f005 fa6c 	bl	8006ffc <HAL_TIM_PWM_Start>

  //=============EXTERNAL PWM=============
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);//EXTERNAL PWM
 8001b24:	2100      	movs	r1, #0
 8001b26:	4811      	ldr	r0, [pc, #68]	; (8001b6c <main+0xb8>)
 8001b28:	f005 fa68 	bl	8006ffc <HAL_TIM_PWM_Start>

  //=============ENCODER MOTOR============
  HAL_TIM_Encoder_Start_IT(&htim2,TIM_CHANNEL_ALL);
 8001b2c:	213c      	movs	r1, #60	; 0x3c
 8001b2e:	4810      	ldr	r0, [pc, #64]	; (8001b70 <main+0xbc>)
 8001b30:	f005 fbd2 	bl	80072d8 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_ALL);
 8001b34:	213c      	movs	r1, #60	; 0x3c
 8001b36:	480f      	ldr	r0, [pc, #60]	; (8001b74 <main+0xc0>)
 8001b38:	f005 fbce 	bl	80072d8 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4,TIM_CHANNEL_ALL);
 8001b3c:	213c      	movs	r1, #60	; 0x3c
 8001b3e:	480e      	ldr	r0, [pc, #56]	; (8001b78 <main+0xc4>)
 8001b40:	f005 fbca 	bl	80072d8 <HAL_TIM_Encoder_Start_IT>

  HAL_TIM_Encoder_Start_IT(&htim1,TIM_CHANNEL_ALL);
 8001b44:	213c      	movs	r1, #60	; 0x3c
 8001b46:	480d      	ldr	r0, [pc, #52]	; (8001b7c <main+0xc8>)
 8001b48:	f005 fbc6 	bl	80072d8 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim8,TIM_CHANNEL_ALL);
 8001b4c:	213c      	movs	r1, #60	; 0x3c
 8001b4e:	480c      	ldr	r0, [pc, #48]	; (8001b80 <main+0xcc>)
 8001b50:	f005 fbc2 	bl	80072d8 <HAL_TIM_Encoder_Start_IT>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001b54:	f7ff fabe 	bl	80010d4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001b58:	f007 fcb0 	bl	80094bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b5c:	e7fe      	b.n	8001b5c <main+0xa8>
 8001b5e:	bf00      	nop
 8001b60:	20001124 	.word	0x20001124
 8001b64:	20001244 	.word	0x20001244
 8001b68:	200011b4 	.word	0x200011b4
 8001b6c:	200011fc 	.word	0x200011fc
 8001b70:	2000104c 	.word	0x2000104c
 8001b74:	20001094 	.word	0x20001094
 8001b78:	200010dc 	.word	0x200010dc
 8001b7c:	20001004 	.word	0x20001004
 8001b80:	2000116c 	.word	0x2000116c

08001b84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b094      	sub	sp, #80	; 0x50
 8001b88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b8a:	f107 0320 	add.w	r3, r7, #32
 8001b8e:	2230      	movs	r2, #48	; 0x30
 8001b90:	2100      	movs	r1, #0
 8001b92:	4618      	mov	r0, r3
 8001b94:	f008 ff48 	bl	800aa28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b98:	f107 030c 	add.w	r3, r7, #12
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60bb      	str	r3, [r7, #8]
 8001bac:	4b28      	ldr	r3, [pc, #160]	; (8001c50 <SystemClock_Config+0xcc>)
 8001bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb0:	4a27      	ldr	r2, [pc, #156]	; (8001c50 <SystemClock_Config+0xcc>)
 8001bb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb6:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb8:	4b25      	ldr	r3, [pc, #148]	; (8001c50 <SystemClock_Config+0xcc>)
 8001bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	607b      	str	r3, [r7, #4]
 8001bc8:	4b22      	ldr	r3, [pc, #136]	; (8001c54 <SystemClock_Config+0xd0>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a21      	ldr	r2, [pc, #132]	; (8001c54 <SystemClock_Config+0xd0>)
 8001bce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd2:	6013      	str	r3, [r2, #0]
 8001bd4:	4b1f      	ldr	r3, [pc, #124]	; (8001c54 <SystemClock_Config+0xd0>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bdc:	607b      	str	r3, [r7, #4]
 8001bde:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001be0:	2301      	movs	r3, #1
 8001be2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001be4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bea:	2302      	movs	r3, #2
 8001bec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001bf4:	2308      	movs	r3, #8
 8001bf6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001bf8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001bfc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001c02:	2307      	movs	r3, #7
 8001c04:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c06:	f107 0320 	add.w	r3, r7, #32
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f004 fc12 	bl	8006434 <HAL_RCC_OscConfig>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001c16:	f000 f855 	bl	8001cc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c1a:	230f      	movs	r3, #15
 8001c1c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c26:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c2a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c30:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c32:	f107 030c 	add.w	r3, r7, #12
 8001c36:	2105      	movs	r1, #5
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f004 fe73 	bl	8006924 <HAL_RCC_ClockConfig>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001c44:	f000 f83e 	bl	8001cc4 <Error_Handler>
  }
}
 8001c48:	bf00      	nop
 8001c4a:	3750      	adds	r7, #80	; 0x50
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40007000 	.word	0x40007000

08001c58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM7){
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a11      	ldr	r2, [pc, #68]	; (8001cac <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d101      	bne.n	8001c6e <HAL_TIM_PeriodElapsedCallback+0x16>
		motor_VeloControl();
 8001c6a:	f7ff f895 	bl	8000d98 <motor_VeloControl>
	}
	if (htim->Instance == TIM13){
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a0f      	ldr	r2, [pc, #60]	; (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d10e      	bne.n	8001c96 <HAL_TIM_PeriodElapsedCallback+0x3e>
		motor_VectorKinematic(joystick_x, joystick_y, joystick_z);
 8001c78:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001c7a:	f993 3000 	ldrsb.w	r3, [r3]
 8001c7e:	b21b      	sxth	r3, r3
 8001c80:	4a0d      	ldr	r2, [pc, #52]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001c82:	f992 2000 	ldrsb.w	r2, [r2]
 8001c86:	b211      	sxth	r1, r2
 8001c88:	4a0c      	ldr	r2, [pc, #48]	; (8001cbc <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001c8a:	f992 2000 	ldrsb.w	r2, [r2]
 8001c8e:	b212      	sxth	r2, r2
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7fe ffa1 	bl	8000bd8 <motor_VectorKinematic>
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a09      	ldr	r2, [pc, #36]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d101      	bne.n	8001ca4 <HAL_TIM_PeriodElapsedCallback+0x4c>
    HAL_IncTick();
 8001ca0:	f003 fcf4 	bl	800568c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ca4:	bf00      	nop
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40001400 	.word	0x40001400
 8001cb0:	40001c00 	.word	0x40001c00
 8001cb4:	200003e8 	.word	0x200003e8
 8001cb8:	200003e9 	.word	0x200003e9
 8001cbc:	200003ea 	.word	0x200003ea
 8001cc0:	40001000 	.word	0x40001000

08001cc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cc8:	b672      	cpsid	i
}
 8001cca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ccc:	e7fe      	b.n	8001ccc <Error_Handler+0x8>

08001cce <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	4a04      	ldr	r2, [pc, #16]	; (8001d0c <_ZN3ros3MsgC1Ev+0x1c>)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4618      	mov	r0, r3
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	0800b1c0 	.word	0x0800b1c0

08001d10 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
      data()
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff ffe8 	bl	8001cf0 <_ZN3ros3MsgC1Ev>
 8001d20:	4a06      	ldr	r2, [pc, #24]	; (8001d3c <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	3304      	adds	r3, #4
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff ffcf 	bl	8001cce <_ZN3ros4TimeC1Ev>
    {
    }
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4618      	mov	r0, r3
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	0800b1a8 	.word	0x0800b1a8

08001d40 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6859      	ldr	r1, [r3, #4]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	683a      	ldr	r2, [r7, #0]
 8001d56:	4413      	add	r3, r2
 8001d58:	b2ca      	uxtb	r2, r1
 8001d5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	0a19      	lsrs	r1, r3, #8
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	3301      	adds	r3, #1
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	4413      	add	r3, r2
 8001d6a:	b2ca      	uxtb	r2, r1
 8001d6c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	0c19      	lsrs	r1, r3, #16
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	3302      	adds	r3, #2
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	b2ca      	uxtb	r2, r1
 8001d7e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	0e19      	lsrs	r1, r3, #24
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	3303      	adds	r3, #3
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	b2ca      	uxtb	r2, r1
 8001d90:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	3304      	adds	r3, #4
 8001d96:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6899      	ldr	r1, [r3, #8]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	4413      	add	r3, r2
 8001da2:	b2ca      	uxtb	r2, r1
 8001da4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	0a19      	lsrs	r1, r3, #8
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	3301      	adds	r3, #1
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	4413      	add	r3, r2
 8001db4:	b2ca      	uxtb	r2, r1
 8001db6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	0c19      	lsrs	r1, r3, #16
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	3302      	adds	r3, #2
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	b2ca      	uxtb	r2, r1
 8001dc8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	0e19      	lsrs	r1, r3, #24
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	3303      	adds	r3, #3
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	b2ca      	uxtb	r2, r1
 8001dda:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	3304      	adds	r3, #4
 8001de0:	60fb      	str	r3, [r7, #12]
      return offset;
 8001de2:	68fb      	ldr	r3, [r7, #12]
    }
 8001de4:	4618      	mov	r0, r3
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	4413      	add	r3, r2
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	461a      	mov	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685a      	ldr	r2, [r3, #4]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	3301      	adds	r3, #1
 8001e14:	6839      	ldr	r1, [r7, #0]
 8001e16:	440b      	add	r3, r1
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	021b      	lsls	r3, r3, #8
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685a      	ldr	r2, [r3, #4]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	3302      	adds	r3, #2
 8001e2a:	6839      	ldr	r1, [r7, #0]
 8001e2c:	440b      	add	r3, r1
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	041b      	lsls	r3, r3, #16
 8001e32:	431a      	orrs	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	3303      	adds	r3, #3
 8001e40:	6839      	ldr	r1, [r7, #0]
 8001e42:	440b      	add	r3, r1
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	061b      	lsls	r3, r3, #24
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	3304      	adds	r3, #4
 8001e52:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	4413      	add	r3, r2
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689a      	ldr	r2, [r3, #8]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	6839      	ldr	r1, [r7, #0]
 8001e6c:	440b      	add	r3, r1
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	021b      	lsls	r3, r3, #8
 8001e72:	431a      	orrs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	3302      	adds	r3, #2
 8001e80:	6839      	ldr	r1, [r7, #0]
 8001e82:	440b      	add	r3, r1
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	041b      	lsls	r3, r3, #16
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689a      	ldr	r2, [r3, #8]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	3303      	adds	r3, #3
 8001e96:	6839      	ldr	r1, [r7, #0]
 8001e98:	440b      	add	r3, r1
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	061b      	lsls	r3, r3, #24
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	3304      	adds	r3, #4
 8001ea8:	60fb      	str	r3, [r7, #12]
     return offset;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
    }
 8001eac:	4618      	mov	r0, r3
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	4b03      	ldr	r3, [pc, #12]	; (8001ed0 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	0800aea8 	.word	0x0800aea8

08001ed4 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	4b03      	ldr	r3, [pc, #12]	; (8001eec <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001ede:	4618      	mov	r0, r3
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	0800aeb8 	.word	0x0800aeb8

08001ef0 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff fef8 	bl	8001cf0 <_ZN3ros3MsgC1Ev>
 8001f00:	4a0b      	ldr	r2, [pc, #44]	; (8001f30 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	809a      	strh	r2, [r3, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a09      	ldr	r2, [pc, #36]	; (8001f34 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001f10:	609a      	str	r2, [r3, #8]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a07      	ldr	r2, [pc, #28]	; (8001f34 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001f16:	60da      	str	r2, [r3, #12]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a06      	ldr	r2, [pc, #24]	; (8001f34 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001f1c:	611a      	str	r2, [r3, #16]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	615a      	str	r2, [r3, #20]
    {
    }
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	0800b190 	.word	0x0800b190
 8001f34:	0800aedc 	.word	0x0800aedc

08001f38 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b088      	sub	sp, #32
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001f42:	2300      	movs	r3, #0
 8001f44:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	8899      	ldrh	r1, [r3, #4]
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	4413      	add	r3, r2
 8001f50:	b2ca      	uxtb	r2, r1
 8001f52:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	889b      	ldrh	r3, [r3, #4]
 8001f58:	0a1b      	lsrs	r3, r3, #8
 8001f5a:	b299      	uxth	r1, r3
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	4413      	add	r3, r2
 8001f64:	b2ca      	uxtb	r2, r1
 8001f66:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	3302      	adds	r3, #2
 8001f6c:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe f92c 	bl	80001d0 <strlen>
 8001f78:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	4413      	add	r3, r2
 8001f80:	69b9      	ldr	r1, [r7, #24]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f001 fba0 	bl	80036c8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	3304      	adds	r3, #4
 8001f8c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	18d0      	adds	r0, r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	f008 fd36 	bl	800aa0c <memcpy>
      offset += length_topic_name;
 8001fa0:	69fa      	ldr	r2, [r7, #28]
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7fe f90f 	bl	80001d0 <strlen>
 8001fb2:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	4413      	add	r3, r2
 8001fba:	6979      	ldr	r1, [r7, #20]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f001 fb83 	bl	80036c8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	18d0      	adds	r0, r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	f008 fd19 	bl	800aa0c <memcpy>
      offset += length_message_type;
 8001fda:	69fa      	ldr	r2, [r7, #28]
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	4413      	add	r3, r2
 8001fe0:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7fe f8f2 	bl	80001d0 <strlen>
 8001fec:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	6939      	ldr	r1, [r7, #16]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f001 fb66 	bl	80036c8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	3304      	adds	r3, #4
 8002000:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	18d0      	adds	r0, r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	4619      	mov	r1, r3
 8002010:	f008 fcfc 	bl	800aa0c <memcpy>
      offset += length_md5sum;
 8002014:	69fa      	ldr	r2, [r7, #28]
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	4413      	add	r3, r2
 800201a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	695b      	ldr	r3, [r3, #20]
 8002020:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8002022:	68f9      	ldr	r1, [r7, #12]
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	4413      	add	r3, r2
 800202a:	b2ca      	uxtb	r2, r1
 800202c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	0a19      	lsrs	r1, r3, #8
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	3301      	adds	r3, #1
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	4413      	add	r3, r2
 800203a:	b2ca      	uxtb	r2, r1
 800203c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	0c19      	lsrs	r1, r3, #16
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	3302      	adds	r3, #2
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	4413      	add	r3, r2
 800204a:	b2ca      	uxtb	r2, r1
 800204c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	0e19      	lsrs	r1, r3, #24
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3303      	adds	r3, #3
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	4413      	add	r3, r2
 800205a:	b2ca      	uxtb	r2, r1
 800205c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	3304      	adds	r3, #4
 8002062:	61fb      	str	r3, [r7, #28]
      return offset;
 8002064:	69fb      	ldr	r3, [r7, #28]
    }
 8002066:	4618      	mov	r0, r3
 8002068:	3720      	adds	r7, #32
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800206e:	b580      	push	{r7, lr}
 8002070:	b08a      	sub	sp, #40	; 0x28
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
 8002076:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002078:	2300      	movs	r3, #0
 800207a:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	4413      	add	r3, r2
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	b29a      	uxth	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	889b      	ldrh	r3, [r3, #4]
 800208e:	b21a      	sxth	r2, r3
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	3301      	adds	r3, #1
 8002094:	6839      	ldr	r1, [r7, #0]
 8002096:	440b      	add	r3, r1
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	021b      	lsls	r3, r3, #8
 800209c:	b21b      	sxth	r3, r3
 800209e:	4313      	orrs	r3, r2
 80020a0:	b21b      	sxth	r3, r3
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	3302      	adds	r3, #2
 80020ac:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	441a      	add	r2, r3
 80020b4:	f107 0314 	add.w	r3, r7, #20
 80020b8:	4611      	mov	r1, r2
 80020ba:	4618      	mov	r0, r3
 80020bc:	f001 fb22 	bl	8003704 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	3304      	adds	r3, #4
 80020c4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	4413      	add	r3, r2
 80020d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d20c      	bcs.n	80020f0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	441a      	add	r2, r3
 80020dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020de:	3b01      	subs	r3, #1
 80020e0:	6839      	ldr	r1, [r7, #0]
 80020e2:	440b      	add	r3, r1
 80020e4:	7812      	ldrb	r2, [r2, #0]
 80020e6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80020e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ea:	3301      	adds	r3, #1
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24
 80020ee:	e7ec      	b.n	80020ca <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	4413      	add	r3, r2
 80020f6:	3b01      	subs	r3, #1
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	4413      	add	r3, r2
 80020fc:	2200      	movs	r2, #0
 80020fe:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	3b01      	subs	r3, #1
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	441a      	add	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	4413      	add	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	441a      	add	r2, r3
 800211a:	f107 0310 	add.w	r3, r7, #16
 800211e:	4611      	mov	r1, r2
 8002120:	4618      	mov	r0, r3
 8002122:	f001 faef 	bl	8003704 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	3304      	adds	r3, #4
 800212a:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	623b      	str	r3, [r7, #32]
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	4413      	add	r3, r2
 8002136:	6a3a      	ldr	r2, [r7, #32]
 8002138:	429a      	cmp	r2, r3
 800213a:	d20c      	bcs.n	8002156 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	6a3b      	ldr	r3, [r7, #32]
 8002140:	441a      	add	r2, r3
 8002142:	6a3b      	ldr	r3, [r7, #32]
 8002144:	3b01      	subs	r3, #1
 8002146:	6839      	ldr	r1, [r7, #0]
 8002148:	440b      	add	r3, r1
 800214a:	7812      	ldrb	r2, [r2, #0]
 800214c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800214e:	6a3b      	ldr	r3, [r7, #32]
 8002150:	3301      	adds	r3, #1
 8002152:	623b      	str	r3, [r7, #32]
 8002154:	e7ec      	b.n	8002130 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	4413      	add	r3, r2
 800215c:	3b01      	subs	r3, #1
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	4413      	add	r3, r2
 8002162:	2200      	movs	r2, #0
 8002164:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	3b01      	subs	r3, #1
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	441a      	add	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	4413      	add	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	441a      	add	r2, r3
 8002180:	f107 030c 	add.w	r3, r7, #12
 8002184:	4611      	mov	r1, r2
 8002186:	4618      	mov	r0, r3
 8002188:	f001 fabc 	bl	8003704 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	3304      	adds	r3, #4
 8002190:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	61fb      	str	r3, [r7, #28]
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	4413      	add	r3, r2
 800219c:	69fa      	ldr	r2, [r7, #28]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d20c      	bcs.n	80021bc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	441a      	add	r2, r3
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	6839      	ldr	r1, [r7, #0]
 80021ae:	440b      	add	r3, r1
 80021b0:	7812      	ldrb	r2, [r2, #0]
 80021b2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	3301      	adds	r3, #1
 80021b8:	61fb      	str	r3, [r7, #28]
 80021ba:	e7ec      	b.n	8002196 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	4413      	add	r3, r2
 80021c2:	3b01      	subs	r3, #1
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	4413      	add	r3, r2
 80021c8:	2200      	movs	r2, #0
 80021ca:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	3b01      	subs	r3, #1
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	441a      	add	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	4413      	add	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	6839      	ldr	r1, [r7, #0]
 80021ea:	440a      	add	r2, r1
 80021ec:	7812      	ldrb	r2, [r2, #0]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80021f2:	68ba      	ldr	r2, [r7, #8]
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	3301      	adds	r3, #1
 80021f8:	6839      	ldr	r1, [r7, #0]
 80021fa:	440b      	add	r3, r1
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	021b      	lsls	r3, r3, #8
 8002200:	4313      	orrs	r3, r2
 8002202:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002204:	68ba      	ldr	r2, [r7, #8]
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	3302      	adds	r3, #2
 800220a:	6839      	ldr	r1, [r7, #0]
 800220c:	440b      	add	r3, r1
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	041b      	lsls	r3, r3, #16
 8002212:	4313      	orrs	r3, r2
 8002214:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002216:	68ba      	ldr	r2, [r7, #8]
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	3303      	adds	r3, #3
 800221c:	6839      	ldr	r1, [r7, #0]
 800221e:	440b      	add	r3, r1
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	061b      	lsls	r3, r3, #24
 8002224:	4313      	orrs	r3, r2
 8002226:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002228:	68ba      	ldr	r2, [r7, #8]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	3304      	adds	r3, #4
 8002232:	61bb      	str	r3, [r7, #24]
     return offset;
 8002234:	69bb      	ldr	r3, [r7, #24]
    }
 8002236:	4618      	mov	r0, r3
 8002238:	3728      	adds	r7, #40	; 0x28
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
	...

08002240 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	4b03      	ldr	r3, [pc, #12]	; (8002258 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800224a:	4618      	mov	r0, r3
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	0800aee0 	.word	0x0800aee0

0800225c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	4b03      	ldr	r3, [pc, #12]	; (8002274 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8002266:	4618      	mov	r0, r3
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	0800aefc 	.word	0x0800aefc

08002278 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff fd34 	bl	8001cf0 <_ZN3ros3MsgC1Ev>
 8002288:	4a06      	ldr	r2, [pc, #24]	; (80022a4 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	711a      	strb	r2, [r3, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a04      	ldr	r2, [pc, #16]	; (80022a8 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002298:	609a      	str	r2, [r3, #8]
    {
    }
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4618      	mov	r0, r3
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	0800b178 	.word	0x0800b178
 80022a8:	0800aedc 	.word	0x0800aedc

080022ac <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80022b6:	2300      	movs	r3, #0
 80022b8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	4413      	add	r3, r2
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	7912      	ldrb	r2, [r2, #4]
 80022c4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	3301      	adds	r3, #1
 80022ca:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7fd ff7d 	bl	80001d0 <strlen>
 80022d6:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	4413      	add	r3, r2
 80022de:	68b9      	ldr	r1, [r7, #8]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f001 f9f1 	bl	80036c8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	3304      	adds	r3, #4
 80022ea:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	18d0      	adds	r0, r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	4619      	mov	r1, r3
 80022fa:	f008 fb87 	bl	800aa0c <memcpy>
      offset += length_msg;
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	4413      	add	r3, r2
 8002304:	60fb      	str	r3, [r7, #12]
      return offset;
 8002306:	68fb      	ldr	r3, [r7, #12]
    }
 8002308:	4618      	mov	r0, r3
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800231a:	2300      	movs	r3, #0
 800231c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	4413      	add	r3, r2
 8002324:	781a      	ldrb	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	3301      	adds	r3, #1
 800232e:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	441a      	add	r2, r3
 8002336:	f107 030c 	add.w	r3, r7, #12
 800233a:	4611      	mov	r1, r2
 800233c:	4618      	mov	r0, r3
 800233e:	f001 f9e1 	bl	8003704 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	3304      	adds	r3, #4
 8002346:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	4413      	add	r3, r2
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	429a      	cmp	r2, r3
 8002356:	d20c      	bcs.n	8002372 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	441a      	add	r2, r3
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	3b01      	subs	r3, #1
 8002362:	6839      	ldr	r1, [r7, #0]
 8002364:	440b      	add	r3, r1
 8002366:	7812      	ldrb	r2, [r2, #0]
 8002368:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	3301      	adds	r3, #1
 800236e:	617b      	str	r3, [r7, #20]
 8002370:	e7ec      	b.n	800234c <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	4413      	add	r3, r2
 8002378:	3b01      	subs	r3, #1
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	4413      	add	r3, r2
 800237e:	2200      	movs	r2, #0
 8002380:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	3b01      	subs	r3, #1
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	441a      	add	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4413      	add	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
     return offset;
 8002396:	693b      	ldr	r3, [r7, #16]
    }
 8002398:	4618      	mov	r0, r3
 800239a:	3718      	adds	r7, #24
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	4b03      	ldr	r3, [pc, #12]	; (80023b8 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80023aa:	4618      	mov	r0, r3
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	0800af20 	.word	0x0800af20

080023bc <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	4b03      	ldr	r3, [pc, #12]	; (80023d4 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80023c6:	4618      	mov	r0, r3
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	0800af34 	.word	0x0800af34

080023d8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff fc84 	bl	8001cf0 <_ZN3ros3MsgC1Ev>
 80023e8:	4a11      	ldr	r2, [pc, #68]	; (8002430 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	605a      	str	r2, [r3, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	609a      	str	r2, [r3, #8]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	60da      	str	r2, [r3, #12]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	611a      	str	r2, [r3, #16]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f04f 0200 	mov.w	r2, #0
 800240c:	615a      	str	r2, [r3, #20]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	619a      	str	r2, [r3, #24]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	61da      	str	r2, [r3, #28]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	621a      	str	r2, [r3, #32]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4618      	mov	r0, r3
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	0800b160 	.word	0x0800b160

08002434 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002434:	b580      	push	{r7, lr}
 8002436:	b08a      	sub	sp, #40	; 0x28
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800243e:	2300      	movs	r3, #0
 8002440:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6859      	ldr	r1, [r3, #4]
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	4413      	add	r3, r2
 800244c:	b2ca      	uxtb	r2, r1
 800244e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	0a19      	lsrs	r1, r3, #8
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	3301      	adds	r3, #1
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	4413      	add	r3, r2
 800245e:	b2ca      	uxtb	r2, r1
 8002460:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	0c19      	lsrs	r1, r3, #16
 8002468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246a:	3302      	adds	r3, #2
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	4413      	add	r3, r2
 8002470:	b2ca      	uxtb	r2, r1
 8002472:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	0e19      	lsrs	r1, r3, #24
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	3303      	adds	r3, #3
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	4413      	add	r3, r2
 8002482:	b2ca      	uxtb	r2, r1
 8002484:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	3304      	adds	r3, #4
 800248a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800248c:	2300      	movs	r3, #0
 800248e:	623b      	str	r3, [r7, #32]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	6a3a      	ldr	r2, [r7, #32]
 8002496:	429a      	cmp	r2, r3
 8002498:	d22b      	bcs.n	80024f2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68da      	ldr	r2, [r3, #12]
 800249e:	6a3b      	ldr	r3, [r7, #32]
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	4413      	add	r3, r2
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80024a8:	6939      	ldr	r1, [r7, #16]
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	4413      	add	r3, r2
 80024b0:	b2ca      	uxtb	r2, r1
 80024b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	0a19      	lsrs	r1, r3, #8
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	3301      	adds	r3, #1
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	4413      	add	r3, r2
 80024c0:	b2ca      	uxtb	r2, r1
 80024c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	0c19      	lsrs	r1, r3, #16
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	3302      	adds	r3, #2
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	4413      	add	r3, r2
 80024d0:	b2ca      	uxtb	r2, r1
 80024d2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	0e19      	lsrs	r1, r3, #24
 80024d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024da:	3303      	adds	r3, #3
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	4413      	add	r3, r2
 80024e0:	b2ca      	uxtb	r2, r1
 80024e2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	3304      	adds	r3, #4
 80024e8:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80024ea:	6a3b      	ldr	r3, [r7, #32]
 80024ec:	3301      	adds	r3, #1
 80024ee:	623b      	str	r3, [r7, #32]
 80024f0:	e7ce      	b.n	8002490 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6919      	ldr	r1, [r3, #16]
 80024f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	4413      	add	r3, r2
 80024fc:	b2ca      	uxtb	r2, r1
 80024fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	0a19      	lsrs	r1, r3, #8
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	3301      	adds	r3, #1
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	4413      	add	r3, r2
 800250e:	b2ca      	uxtb	r2, r1
 8002510:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	0c19      	lsrs	r1, r3, #16
 8002518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251a:	3302      	adds	r3, #2
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	4413      	add	r3, r2
 8002520:	b2ca      	uxtb	r2, r1
 8002522:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	0e19      	lsrs	r1, r3, #24
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	3303      	adds	r3, #3
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	4413      	add	r3, r2
 8002532:	b2ca      	uxtb	r2, r1
 8002534:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	3304      	adds	r3, #4
 800253a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800253c:	2300      	movs	r3, #0
 800253e:	61fb      	str	r3, [r7, #28]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	69fa      	ldr	r2, [r7, #28]
 8002546:	429a      	cmp	r2, r3
 8002548:	d22b      	bcs.n	80025a2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	699a      	ldr	r2, [r3, #24]
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4413      	add	r3, r2
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002558:	68f9      	ldr	r1, [r7, #12]
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	4413      	add	r3, r2
 8002560:	b2ca      	uxtb	r2, r1
 8002562:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	0a19      	lsrs	r1, r3, #8
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	3301      	adds	r3, #1
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	4413      	add	r3, r2
 8002570:	b2ca      	uxtb	r2, r1
 8002572:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	0c19      	lsrs	r1, r3, #16
 8002578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257a:	3302      	adds	r3, #2
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	4413      	add	r3, r2
 8002580:	b2ca      	uxtb	r2, r1
 8002582:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	0e19      	lsrs	r1, r3, #24
 8002588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258a:	3303      	adds	r3, #3
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	4413      	add	r3, r2
 8002590:	b2ca      	uxtb	r2, r1
 8002592:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	3304      	adds	r3, #4
 8002598:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	3301      	adds	r3, #1
 800259e:	61fb      	str	r3, [r7, #28]
 80025a0:	e7ce      	b.n	8002540 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	69d9      	ldr	r1, [r3, #28]
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	4413      	add	r3, r2
 80025ac:	b2ca      	uxtb	r2, r1
 80025ae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	0a19      	lsrs	r1, r3, #8
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	3301      	adds	r3, #1
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	4413      	add	r3, r2
 80025be:	b2ca      	uxtb	r2, r1
 80025c0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	0c19      	lsrs	r1, r3, #16
 80025c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ca:	3302      	adds	r3, #2
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	4413      	add	r3, r2
 80025d0:	b2ca      	uxtb	r2, r1
 80025d2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	0e19      	lsrs	r1, r3, #24
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	3303      	adds	r3, #3
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	4413      	add	r3, r2
 80025e2:	b2ca      	uxtb	r2, r1
 80025e4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	3304      	adds	r3, #4
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80025ec:	2300      	movs	r3, #0
 80025ee:	61bb      	str	r3, [r7, #24]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d228      	bcs.n	800264c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f7fd fde2 	bl	80001d0 <strlen>
 800260c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	4413      	add	r3, r2
 8002614:	6979      	ldr	r1, [r7, #20]
 8002616:	4618      	mov	r0, r3
 8002618:	f001 f856 	bl	80036c8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261e:	3304      	adds	r3, #4
 8002620:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	18d0      	adds	r0, r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	4619      	mov	r1, r3
 8002638:	f008 f9e8 	bl	800aa0c <memcpy>
      offset += length_stringsi;
 800263c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	4413      	add	r3, r2
 8002642:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	3301      	adds	r3, #1
 8002648:	61bb      	str	r3, [r7, #24]
 800264a:	e7d1      	b.n	80025f0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800264e:	4618      	mov	r0, r3
 8002650:	3728      	adds	r7, #40	; 0x28
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002656:	b580      	push	{r7, lr}
 8002658:	b08e      	sub	sp, #56	; 0x38
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
 800265e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002660:	2300      	movs	r3, #0
 8002662:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	4413      	add	r3, r2
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800266e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002670:	3301      	adds	r3, #1
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	4413      	add	r3, r2
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	021b      	lsls	r3, r3, #8
 800267a:	6a3a      	ldr	r2, [r7, #32]
 800267c:	4313      	orrs	r3, r2
 800267e:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002682:	3302      	adds	r3, #2
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	4413      	add	r3, r2
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	041b      	lsls	r3, r3, #16
 800268c:	6a3a      	ldr	r2, [r7, #32]
 800268e:	4313      	orrs	r3, r2
 8002690:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002694:	3303      	adds	r3, #3
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	4413      	add	r3, r2
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	061b      	lsls	r3, r3, #24
 800269e:	6a3a      	ldr	r2, [r7, #32]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80026a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026a6:	3304      	adds	r3, #4
 80026a8:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	6a3a      	ldr	r2, [r7, #32]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d90a      	bls.n	80026ca <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68da      	ldr	r2, [r3, #12]
 80026b8:	6a3b      	ldr	r3, [r7, #32]
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	4619      	mov	r1, r3
 80026be:	4610      	mov	r0, r2
 80026c0:	f008 fa4e 	bl	800ab60 <realloc>
 80026c4:	4602      	mov	r2, r0
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a3a      	ldr	r2, [r7, #32]
 80026ce:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80026d0:	2300      	movs	r3, #0
 80026d2:	633b      	str	r3, [r7, #48]	; 0x30
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026da:	429a      	cmp	r2, r3
 80026dc:	d236      	bcs.n	800274c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80026de:	2300      	movs	r3, #0
 80026e0:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026e6:	6839      	ldr	r1, [r7, #0]
 80026e8:	440a      	add	r2, r1
 80026ea:	7812      	ldrb	r2, [r2, #0]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f4:	3301      	adds	r3, #1
 80026f6:	6839      	ldr	r1, [r7, #0]
 80026f8:	440b      	add	r3, r1
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	021b      	lsls	r3, r3, #8
 80026fe:	4313      	orrs	r3, r2
 8002700:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002706:	3302      	adds	r3, #2
 8002708:	6839      	ldr	r1, [r7, #0]
 800270a:	440b      	add	r3, r1
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	041b      	lsls	r3, r3, #16
 8002710:	4313      	orrs	r3, r2
 8002712:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002714:	697a      	ldr	r2, [r7, #20]
 8002716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002718:	3303      	adds	r3, #3
 800271a:	6839      	ldr	r1, [r7, #0]
 800271c:	440b      	add	r3, r1
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	061b      	lsls	r3, r3, #24
 8002722:	4313      	orrs	r3, r2
 8002724:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 800272c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800272e:	3304      	adds	r3, #4
 8002730:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68da      	ldr	r2, [r3, #12]
 8002736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4413      	add	r3, r2
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	3208      	adds	r2, #8
 8002740:	6812      	ldr	r2, [r2, #0]
 8002742:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002746:	3301      	adds	r3, #1
 8002748:	633b      	str	r3, [r7, #48]	; 0x30
 800274a:	e7c3      	b.n	80026d4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800274c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	4413      	add	r3, r2
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002758:	3301      	adds	r3, #1
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	4413      	add	r3, r2
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	021b      	lsls	r3, r3, #8
 8002762:	69fa      	ldr	r2, [r7, #28]
 8002764:	4313      	orrs	r3, r2
 8002766:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800276a:	3302      	adds	r3, #2
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	4413      	add	r3, r2
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	041b      	lsls	r3, r3, #16
 8002774:	69fa      	ldr	r2, [r7, #28]
 8002776:	4313      	orrs	r3, r2
 8002778:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800277a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800277c:	3303      	adds	r3, #3
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	4413      	add	r3, r2
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	061b      	lsls	r3, r3, #24
 8002786:	69fa      	ldr	r2, [r7, #28]
 8002788:	4313      	orrs	r3, r2
 800278a:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 800278c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800278e:	3304      	adds	r3, #4
 8002790:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	69fa      	ldr	r2, [r7, #28]
 8002798:	429a      	cmp	r2, r3
 800279a:	d90a      	bls.n	80027b2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	699a      	ldr	r2, [r3, #24]
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4619      	mov	r1, r3
 80027a6:	4610      	mov	r0, r2
 80027a8:	f008 f9da 	bl	800ab60 <realloc>
 80027ac:	4602      	mov	r2, r0
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	69fa      	ldr	r2, [r7, #28]
 80027b6:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80027b8:	2300      	movs	r3, #0
 80027ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d236      	bcs.n	8002834 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80027c6:	2300      	movs	r3, #0
 80027c8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027ce:	6839      	ldr	r1, [r7, #0]
 80027d0:	440a      	add	r2, r1
 80027d2:	7812      	ldrb	r2, [r2, #0]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027dc:	3301      	adds	r3, #1
 80027de:	6839      	ldr	r1, [r7, #0]
 80027e0:	440b      	add	r3, r1
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	021b      	lsls	r3, r3, #8
 80027e6:	4313      	orrs	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ee:	3302      	adds	r3, #2
 80027f0:	6839      	ldr	r1, [r7, #0]
 80027f2:	440b      	add	r3, r1
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	041b      	lsls	r3, r3, #16
 80027f8:	4313      	orrs	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002800:	3303      	adds	r3, #3
 8002802:	6839      	ldr	r1, [r7, #0]
 8002804:	440b      	add	r3, r1
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	061b      	lsls	r3, r3, #24
 800280a:	4313      	orrs	r3, r2
 800280c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002816:	3304      	adds	r3, #4
 8002818:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	699a      	ldr	r2, [r3, #24]
 800281e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	3214      	adds	r2, #20
 8002828:	6812      	ldr	r2, [r2, #0]
 800282a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 800282c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800282e:	3301      	adds	r3, #1
 8002830:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002832:	e7c3      	b.n	80027bc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	4413      	add	r3, r2
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800283e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002840:	3301      	adds	r3, #1
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	4413      	add	r3, r2
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	021b      	lsls	r3, r3, #8
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4313      	orrs	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002852:	3302      	adds	r3, #2
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	4413      	add	r3, r2
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	041b      	lsls	r3, r3, #16
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4313      	orrs	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002864:	3303      	adds	r3, #3
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	4413      	add	r3, r2
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	061b      	lsls	r3, r3, #24
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	4313      	orrs	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002876:	3304      	adds	r3, #4
 8002878:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	429a      	cmp	r2, r3
 8002882:	d90a      	bls.n	800289a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4619      	mov	r1, r3
 800288e:	4610      	mov	r0, r2
 8002890:	f008 f966 	bl	800ab60 <realloc>
 8002894:	4602      	mov	r2, r0
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80028a0:	2300      	movs	r3, #0
 80028a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	69db      	ldr	r3, [r3, #28]
 80028a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d23f      	bcs.n	800292e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80028ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	441a      	add	r2, r3
 80028b4:	f107 030c 	add.w	r3, r7, #12
 80028b8:	4611      	mov	r1, r2
 80028ba:	4618      	mov	r0, r3
 80028bc:	f000 ff22 	bl	8003704 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80028c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028c2:	3304      	adds	r3, #4
 80028c4:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80028c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028c8:	627b      	str	r3, [r7, #36]	; 0x24
 80028ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	4413      	add	r3, r2
 80028d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d20c      	bcs.n	80028f0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	441a      	add	r2, r3
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	3b01      	subs	r3, #1
 80028e0:	6839      	ldr	r1, [r7, #0]
 80028e2:	440b      	add	r3, r1
 80028e4:	7812      	ldrb	r2, [r2, #0]
 80028e6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	3301      	adds	r3, #1
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
 80028ee:	e7ec      	b.n	80028ca <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80028f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	4413      	add	r3, r2
 80028f6:	3b01      	subs	r3, #1
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	4413      	add	r3, r2
 80028fc:	2200      	movs	r2, #0
 80028fe:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002902:	3b01      	subs	r3, #1
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	441a      	add	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 800290c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	4413      	add	r3, r2
 8002912:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	3220      	adds	r2, #32
 8002922:	6812      	ldr	r2, [r2, #0]
 8002924:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002928:	3301      	adds	r3, #1
 800292a:	62bb      	str	r3, [r7, #40]	; 0x28
 800292c:	e7ba      	b.n	80028a4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 800292e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002930:	4618      	mov	r0, r3
 8002932:	3738      	adds	r7, #56	; 0x38
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	4b03      	ldr	r3, [pc, #12]	; (8002950 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002942:	4618      	mov	r0, r3
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	0800b09c 	.word	0x0800b09c

08002954 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	4b03      	ldr	r3, [pc, #12]	; (800296c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 800295e:	4618      	mov	r0, r3
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	0800af58 	.word	0x0800af58

08002970 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
 800297c:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	68ba      	ldr	r2, [r7, #8]
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	605a      	str	r2, [r3, #4]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	611a      	str	r2, [r3, #16]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	4618      	mov	r0, r3
 8002994:	3714      	adds	r7, #20
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 800299e:	b580      	push	{r7, lr}
 80029a0:	b082      	sub	sp, #8
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
 80029a6:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68d8      	ldr	r0, [r3, #12]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	6891      	ldr	r1, [r2, #8]
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	4798      	blx	r3
 80029bc:	4603      	mov	r3, r0
  };
 80029be:	4618      	mov	r0, r3
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
  }
 80029d2:	4618      	mov	r0, r3
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80029f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029f8:	4618      	mov	r0, r3
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
      huart(&huart5), rind(0), twind(0), tfind(0){
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a0a      	ldr	r2, [pc, #40]	; (8002a38 <_ZN13STM32HardwareC1Ev+0x34>)
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr
 8002a38:	200012d0 	.word	0x200012d0

08002a3c <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 f804 	bl	8002a52 <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002a4a:	bf00      	nop
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b082      	sub	sp, #8
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6818      	ldr	r0, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	3304      	adds	r3, #4
 8002a62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a66:	4619      	mov	r1, r3
 8002a68:	f005 fc00 	bl	800826c <HAL_UART_Receive_DMA>
    }
 8002a6c:	bf00      	nop
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002a74:	b590      	push	{r4, r7, lr}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a80:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f7ff ffa8 	bl	80029de <_ZN13STM32Hardware10getRdmaIndEv>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	429c      	cmp	r4, r3
 8002a92:	bf14      	ite	ne
 8002a94:	2301      	movne	r3, #1
 8002a96:	2300      	moveq	r3, #0
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d012      	beq.n	8002ac4 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002aa4:	1c59      	adds	r1, r3, #1
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	4413      	add	r3, r2
 8002ab0:	791b      	ldrb	r3, [r3, #4]
 8002ab2:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002aba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
    }
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd90      	pop	{r4, r7, pc}
	...

08002ad0 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b20      	cmp	r3, #32
 8002ae4:	d108      	bne.n	8002af8 <_ZN13STM32Hardware5flushEv+0x28>
 8002ae6:	4b28      	ldr	r3, [pc, #160]	; (8002b88 <_ZN13STM32Hardware5flushEv+0xb8>)
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	f083 0301 	eor.w	r3, r3, #1
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <_ZN13STM32Hardware5flushEv+0x28>
 8002af4:	2301      	movs	r3, #1
 8002af6:	e000      	b.n	8002afa <_ZN13STM32Hardware5flushEv+0x2a>
 8002af8:	2300      	movs	r3, #0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d03f      	beq.n	8002b7e <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 8002afe:	4b22      	ldr	r3, [pc, #136]	; (8002b88 <_ZN13STM32Hardware5flushEv+0xb8>)
 8002b00:	2201      	movs	r2, #1
 8002b02:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d031      	beq.n	8002b78 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d20a      	bcs.n	8002b3a <_ZN13STM32Hardware5flushEv+0x6a>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	e006      	b.n	8002b48 <_ZN13STM32Hardware5flushEv+0x78>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6818      	ldr	r0, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002b54:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	89fa      	ldrh	r2, [r7, #14]
 8002b5e:	4619      	mov	r1, r3
 8002b60:	f005 fb06 	bl	8008170 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002b6a:	89fb      	ldrh	r3, [r7, #14]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8002b78:	4b03      	ldr	r3, [pc, #12]	; (8002b88 <_ZN13STM32Hardware5flushEv+0xb8>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	701a      	strb	r2, [r3, #0]
      }
    }
 8002b7e:	bf00      	nop
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	200005f0 	.word	0x200005f0

08002b8c <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
      int n = length;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ba2:	bfa8      	it	ge
 8002ba4:	f44f 7300 	movge.w	r3, #512	; 0x200
 8002ba8:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002bb0:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	bf28      	it	cs
 8002bba:	4613      	movcs	r3, r2
 8002bbc:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002bc4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	4413      	add	r3, r2
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	68b9      	ldr	r1, [r7, #8]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f007 ff1b 	bl	800aa0c <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	4413      	add	r3, r2
 8002be0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d00b      	beq.n	8002c0a <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	18d1      	adds	r1, r2, r3
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	461a      	mov	r2, r3
 8002c06:	f007 ff01 	bl	800aa0c <memcpy>
      }

      flush();
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f7ff ff60 	bl	8002ad0 <_ZN13STM32Hardware5flushEv>
    }
 8002c10:	bf00      	nop
 8002c12:	3718      	adds	r7, #24
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	f002 fd48 	bl	80056b4 <HAL_GetTick>
 8002c24:	4603      	mov	r3, r0
 8002c26:	4618      	mov	r0, r3
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <_ZN8std_msgs19MultiArrayDimensionC1Ev>:
      typedef uint32_t _size_type;
      _size_type size;
      typedef uint32_t _stride_type;
      _stride_type stride;

    MultiArrayDimension():
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
      label(""),
      size(0),
      stride(0)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff f858 	bl	8001cf0 <_ZN3ros3MsgC1Ev>
 8002c40:	4a08      	ldr	r2, [pc, #32]	; (8002c64 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x34>)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a07      	ldr	r2, [pc, #28]	; (8002c68 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x38>)
 8002c4a:	605a      	str	r2, [r3, #4]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	609a      	str	r2, [r3, #8]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	60da      	str	r2, [r3, #12]
    {
    }
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	0800b11c 	.word	0x0800b11c
 8002c68:	0800aedc 	.word	0x0800aedc

08002c6c <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002c76:	2300      	movs	r3, #0
 8002c78:	60fb      	str	r3, [r7, #12]
      uint32_t length_label = strlen(this->label);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fd faa6 	bl	80001d0 <strlen>
 8002c84:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_label);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	68b9      	ldr	r1, [r7, #8]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 fd1a 	bl	80036c8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	3304      	adds	r3, #4
 8002c98:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->label, length_label);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	18d0      	adds	r0, r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	f007 feb0 	bl	800aa0c <memcpy>
      offset += length_label;
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6899      	ldr	r1, [r3, #8]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	b2ca      	uxtb	r2, r1
 8002cc0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	0a19      	lsrs	r1, r3, #8
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	3301      	adds	r3, #1
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	4413      	add	r3, r2
 8002cd0:	b2ca      	uxtb	r2, r1
 8002cd2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	0c19      	lsrs	r1, r3, #16
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	3302      	adds	r3, #2
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	b2ca      	uxtb	r2, r1
 8002ce4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	0e19      	lsrs	r1, r3, #24
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	3303      	adds	r3, #3
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	b2ca      	uxtb	r2, r1
 8002cf6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->size);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	3304      	adds	r3, #4
 8002cfc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68d9      	ldr	r1, [r3, #12]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	4413      	add	r3, r2
 8002d08:	b2ca      	uxtb	r2, r1
 8002d0a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	0a19      	lsrs	r1, r3, #8
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	3301      	adds	r3, #1
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	4413      	add	r3, r2
 8002d1a:	b2ca      	uxtb	r2, r1
 8002d1c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	0c19      	lsrs	r1, r3, #16
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	3302      	adds	r3, #2
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	b2ca      	uxtb	r2, r1
 8002d2e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	0e19      	lsrs	r1, r3, #24
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	3303      	adds	r3, #3
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	b2ca      	uxtb	r2, r1
 8002d40:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stride);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	3304      	adds	r3, #4
 8002d46:	60fb      	str	r3, [r7, #12]
      return offset;
 8002d48:	68fb      	ldr	r3, [r7, #12]
    }
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b086      	sub	sp, #24
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
 8002d5a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	613b      	str	r3, [r7, #16]
      uint32_t length_label;
      arrToVar(length_label, (inbuffer + offset));
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	441a      	add	r2, r3
 8002d66:	f107 030c 	add.w	r3, r7, #12
 8002d6a:	4611      	mov	r1, r2
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f000 fcc9 	bl	8003704 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	3304      	adds	r3, #4
 8002d76:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	617b      	str	r3, [r7, #20]
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	4413      	add	r3, r2
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d20c      	bcs.n	8002da2 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	441a      	add	r2, r3
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	3b01      	subs	r3, #1
 8002d92:	6839      	ldr	r1, [r7, #0]
 8002d94:	440b      	add	r3, r1
 8002d96:	7812      	ldrb	r2, [r2, #0]
 8002d98:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	617b      	str	r3, [r7, #20]
 8002da0:	e7ec      	b.n	8002d7c <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_label-1]=0;
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	4413      	add	r3, r2
 8002da8:	3b01      	subs	r3, #1
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	4413      	add	r3, r2
 8002dae:	2200      	movs	r2, #0
 8002db0:	701a      	strb	r2, [r3, #0]
      this->label = (char *)(inbuffer + offset-1);
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	3b01      	subs	r3, #1
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	441a      	add	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	605a      	str	r2, [r3, #4]
      offset += length_label;
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	613b      	str	r3, [r7, #16]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	4413      	add	r3, r2
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	3301      	adds	r3, #1
 8002ddc:	6839      	ldr	r1, [r7, #0]
 8002dde:	440b      	add	r3, r1
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	021b      	lsls	r3, r3, #8
 8002de4:	431a      	orrs	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	689a      	ldr	r2, [r3, #8]
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	3302      	adds	r3, #2
 8002df2:	6839      	ldr	r1, [r7, #0]
 8002df4:	440b      	add	r3, r1
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	041b      	lsls	r3, r3, #16
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	3303      	adds	r3, #3
 8002e08:	6839      	ldr	r1, [r7, #0]
 8002e0a:	440b      	add	r3, r1
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	061b      	lsls	r3, r3, #24
 8002e10:	431a      	orrs	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->size);
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	3304      	adds	r3, #4
 8002e1a:	613b      	str	r3, [r7, #16]
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	4413      	add	r3, r2
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	461a      	mov	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	3301      	adds	r3, #1
 8002e32:	6839      	ldr	r1, [r7, #0]
 8002e34:	440b      	add	r3, r1
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	021b      	lsls	r3, r3, #8
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68da      	ldr	r2, [r3, #12]
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	3302      	adds	r3, #2
 8002e48:	6839      	ldr	r1, [r7, #0]
 8002e4a:	440b      	add	r3, r1
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	041b      	lsls	r3, r3, #16
 8002e50:	431a      	orrs	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68da      	ldr	r2, [r3, #12]
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	3303      	adds	r3, #3
 8002e5e:	6839      	ldr	r1, [r7, #0]
 8002e60:	440b      	add	r3, r1
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	061b      	lsls	r3, r3, #24
 8002e66:	431a      	orrs	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stride);
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	3304      	adds	r3, #4
 8002e70:	613b      	str	r3, [r7, #16]
     return offset;
 8002e72:	693b      	ldr	r3, [r7, #16]
    }
 8002e74:	4618      	mov	r0, r3
 8002e76:	3718      	adds	r7, #24
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayDimension"; };
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	4b03      	ldr	r3, [pc, #12]	; (8002e94 <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x18>)
 8002e86:	4618      	mov	r0, r3
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	0800af7c 	.word	0x0800af7c

08002e98 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
    virtual const char * getMD5() override { return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	4b03      	ldr	r3, [pc, #12]	; (8002eb0 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x18>)
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	0800af9c 	.word	0x0800af9c

08002eb4 <_ZN8std_msgs16MultiArrayLayoutC1Ev>:
      _dim_type st_dim;
      _dim_type * dim;
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
      dim_length(0), st_dim(), dim(nullptr),
      data_offset(0)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fe ff16 	bl	8001cf0 <_ZN3ros3MsgC1Ev>
 8002ec4:	4a0a      	ldr	r2, [pc, #40]	; (8002ef0 <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x3c>)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	605a      	str	r2, [r3, #4]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3308      	adds	r3, #8
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff feab 	bl	8002c30 <_ZN8std_msgs19MultiArrayDimensionC1Ev>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	619a      	str	r2, [r3, #24]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	61da      	str	r2, [r3, #28]
    {
    }
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	0800b104 	.word	0x0800b104

08002ef4 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002efe:	2300      	movs	r3, #0
 8002f00:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6859      	ldr	r1, [r3, #4]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	b2ca      	uxtb	r2, r1
 8002f0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	0a19      	lsrs	r1, r3, #8
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	b2ca      	uxtb	r2, r1
 8002f20:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	0c19      	lsrs	r1, r3, #16
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	3302      	adds	r3, #2
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	4413      	add	r3, r2
 8002f30:	b2ca      	uxtb	r2, r1
 8002f32:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	0e19      	lsrs	r1, r3, #24
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	3303      	adds	r3, #3
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	4413      	add	r3, r2
 8002f42:	b2ca      	uxtb	r2, r1
 8002f44:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->dim_length);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	3304      	adds	r3, #4
 8002f4a:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	60bb      	str	r3, [r7, #8]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d218      	bcs.n	8002f8c <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x98>
      offset += this->dim[i].serialize(outbuffer + offset);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	699a      	ldr	r2, [r3, #24]
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	011b      	lsls	r3, r3, #4
 8002f62:	18d0      	adds	r0, r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	699a      	ldr	r2, [r3, #24]
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	4413      	add	r3, r2
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	6839      	ldr	r1, [r7, #0]
 8002f76:	440a      	add	r2, r1
 8002f78:	4611      	mov	r1, r2
 8002f7a:	4798      	blx	r3
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	4413      	add	r3, r2
 8002f82:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	3301      	adds	r3, #1
 8002f88:	60bb      	str	r3, [r7, #8]
 8002f8a:	e7e1      	b.n	8002f50 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	69d9      	ldr	r1, [r3, #28]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	4413      	add	r3, r2
 8002f96:	b2ca      	uxtb	r2, r1
 8002f98:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	0a19      	lsrs	r1, r3, #8
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	b2ca      	uxtb	r2, r1
 8002faa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	69db      	ldr	r3, [r3, #28]
 8002fb0:	0c19      	lsrs	r1, r3, #16
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	3302      	adds	r3, #2
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	4413      	add	r3, r2
 8002fba:	b2ca      	uxtb	r2, r1
 8002fbc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	0e19      	lsrs	r1, r3, #24
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	3303      	adds	r3, #3
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	4413      	add	r3, r2
 8002fcc:	b2ca      	uxtb	r2, r1
 8002fce:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_offset);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	3304      	adds	r3, #4
 8002fd4:	60fb      	str	r3, [r7, #12]
      return offset;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
    }
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3710      	adds	r7, #16
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002fea:	2300      	movs	r3, #0
 8002fec:	617b      	str	r3, [r7, #20]
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	4413      	add	r3, r2
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	021b      	lsls	r3, r3, #8
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	4313      	orrs	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	3302      	adds	r3, #2
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	4413      	add	r3, r2
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	041b      	lsls	r3, r3, #16
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	4313      	orrs	r3, r2
 800301a:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	3303      	adds	r3, #3
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	4413      	add	r3, r2
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	061b      	lsls	r3, r3, #24
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	4313      	orrs	r3, r2
 800302c:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->dim_length);
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	3304      	adds	r3, #4
 8003032:	617b      	str	r3, [r7, #20]
      if(dim_lengthT > dim_length)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	429a      	cmp	r2, r3
 800303c:	d90a      	bls.n	8003054 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x74>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	699a      	ldr	r2, [r3, #24]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	4619      	mov	r1, r3
 8003048:	4610      	mov	r0, r2
 800304a:	f007 fd89 	bl	800ab60 <realloc>
 800304e:	4602      	mov	r2, r0
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	619a      	str	r2, [r3, #24]
      dim_length = dim_lengthT;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 800305a:	2300      	movs	r3, #0
 800305c:	613b      	str	r3, [r7, #16]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	429a      	cmp	r2, r3
 8003066:	d21b      	bcs.n	80030a0 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xc0>
      offset += this->st_dim.deserialize(inbuffer + offset);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f103 0008 	add.w	r0, r3, #8
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	4413      	add	r3, r2
 8003074:	4619      	mov	r1, r3
 8003076:	f7ff fe6c 	bl	8002d52 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
 800307a:	4602      	mov	r2, r0
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	4413      	add	r3, r2
 8003080:	617b      	str	r3, [r7, #20]
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	699a      	ldr	r2, [r3, #24]
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	011b      	lsls	r3, r3, #4
 800308a:	18d0      	adds	r0, r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3308      	adds	r3, #8
 8003090:	2210      	movs	r2, #16
 8003092:	4619      	mov	r1, r3
 8003094:	f007 fcba 	bl	800aa0c <memcpy>
      for( uint32_t i = 0; i < dim_length; i++){
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	3301      	adds	r3, #1
 800309c:	613b      	str	r3, [r7, #16]
 800309e:	e7de      	b.n	800305e <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x7e>
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	4413      	add	r3, r2
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	461a      	mov	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69da      	ldr	r2, [r3, #28]
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	3301      	adds	r3, #1
 80030b6:	6839      	ldr	r1, [r7, #0]
 80030b8:	440b      	add	r3, r1
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	021b      	lsls	r3, r3, #8
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	69da      	ldr	r2, [r3, #28]
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	3302      	adds	r3, #2
 80030cc:	6839      	ldr	r1, [r7, #0]
 80030ce:	440b      	add	r3, r1
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	041b      	lsls	r3, r3, #16
 80030d4:	431a      	orrs	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69da      	ldr	r2, [r3, #28]
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	3303      	adds	r3, #3
 80030e2:	6839      	ldr	r1, [r7, #0]
 80030e4:	440b      	add	r3, r1
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	061b      	lsls	r3, r3, #24
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->data_offset);
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	3304      	adds	r3, #4
 80030f4:	617b      	str	r3, [r7, #20]
     return offset;
 80030f6:	697b      	ldr	r3, [r7, #20]
    }
 80030f8:	4618      	mov	r0, r3
 80030fa:	3718      	adds	r7, #24
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayLayout"; };
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	4b03      	ldr	r3, [pc, #12]	; (8003118 <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x18>)
 800310a:	4618      	mov	r0, r3
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	0800afc0 	.word	0x0800afc0

0800311c <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    virtual const char * getMD5() override { return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	4b03      	ldr	r3, [pc, #12]	; (8003134 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x18>)
 8003126:	4618      	mov	r0, r3
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	0800afdc 	.word	0x0800afdc

08003138 <_ZN8std_msgs15Int32MultiArrayC1Ev>:
      uint32_t data_length;
      typedef int32_t _data_type;
      _data_type st_data;
      _data_type * data;

    Int32MultiArray():
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
      layout(),
      data_length(0), st_data(), data(nullptr)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4618      	mov	r0, r3
 8003144:	f7fe fdd4 	bl	8001cf0 <_ZN3ros3MsgC1Ev>
 8003148:	4a0a      	ldr	r2, [pc, #40]	; (8003174 <_ZN8std_msgs15Int32MultiArrayC1Ev+0x3c>)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	3304      	adds	r3, #4
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff feae 	bl	8002eb4 <_ZN8std_msgs16MultiArrayLayoutC1Ev>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	625a      	str	r2, [r3, #36]	; 0x24
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	629a      	str	r2, [r3, #40]	; 0x28
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	62da      	str	r2, [r3, #44]	; 0x2c
    {
    }
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4618      	mov	r0, r3
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	0800b0ec 	.word	0x0800b0ec

08003178 <_ZNK8std_msgs15Int32MultiArray9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003182:	2300      	movs	r3, #0
 8003184:	617b      	str	r3, [r7, #20]
      offset += this->layout.serialize(outbuffer + offset);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	1d18      	adds	r0, r3, #4
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	683a      	ldr	r2, [r7, #0]
 800318e:	4413      	add	r3, r2
 8003190:	4619      	mov	r1, r3
 8003192:	f7ff feaf 	bl	8002ef4 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
 8003196:	4602      	mov	r2, r0
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	4413      	add	r3, r2
 800319c:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	4413      	add	r3, r2
 80031a8:	b2ca      	uxtb	r2, r1
 80031aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b0:	0a19      	lsrs	r1, r3, #8
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	3301      	adds	r3, #1
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	4413      	add	r3, r2
 80031ba:	b2ca      	uxtb	r2, r1
 80031bc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c2:	0c19      	lsrs	r1, r3, #16
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	3302      	adds	r3, #2
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	4413      	add	r3, r2
 80031cc:	b2ca      	uxtb	r2, r1
 80031ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	0e19      	lsrs	r1, r3, #24
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	3303      	adds	r3, #3
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	4413      	add	r3, r2
 80031de:	b2ca      	uxtb	r2, r1
 80031e0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_length);
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	3304      	adds	r3, #4
 80031e6:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 80031e8:	2300      	movs	r3, #0
 80031ea:	613b      	str	r3, [r7, #16]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d22b      	bcs.n	800324e <_ZNK8std_msgs15Int32MultiArray9serializeEPh+0xd6>
      union {
        int32_t real;
        uint32_t base;
      } u_datai;
      u_datai.real = this->data[i];
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 8003204:	68f9      	ldr	r1, [r7, #12]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	4413      	add	r3, r2
 800320c:	b2ca      	uxtb	r2, r1
 800320e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	0a19      	lsrs	r1, r3, #8
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	3301      	adds	r3, #1
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	4413      	add	r3, r2
 800321c:	b2ca      	uxtb	r2, r1
 800321e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_datai.base >> (8 * 2)) & 0xFF;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	0c19      	lsrs	r1, r3, #16
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	3302      	adds	r3, #2
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	4413      	add	r3, r2
 800322c:	b2ca      	uxtb	r2, r1
 800322e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_datai.base >> (8 * 3)) & 0xFF;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	0e19      	lsrs	r1, r3, #24
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	3303      	adds	r3, #3
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	4413      	add	r3, r2
 800323c:	b2ca      	uxtb	r2, r1
 800323e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data[i]);
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	3304      	adds	r3, #4
 8003244:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	3301      	adds	r3, #1
 800324a:	613b      	str	r3, [r7, #16]
 800324c:	e7ce      	b.n	80031ec <_ZNK8std_msgs15Int32MultiArray9serializeEPh+0x74>
      }
      return offset;
 800324e:	697b      	ldr	r3, [r7, #20]
    }
 8003250:	4618      	mov	r0, r3
 8003252:	3718      	adds	r7, #24
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <_ZN8std_msgs15Int32MultiArray11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003262:	2300      	movs	r3, #0
 8003264:	617b      	str	r3, [r7, #20]
      offset += this->layout.deserialize(inbuffer + offset);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	1d18      	adds	r0, r3, #4
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	4413      	add	r3, r2
 8003270:	4619      	mov	r1, r3
 8003272:	f7ff feb5 	bl	8002fe0 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
 8003276:	4602      	mov	r2, r0
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	4413      	add	r3, r2
 800327c:	617b      	str	r3, [r7, #20]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	4413      	add	r3, r2
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	3301      	adds	r3, #1
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	4413      	add	r3, r2
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	021b      	lsls	r3, r3, #8
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	4313      	orrs	r3, r2
 8003298:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	3302      	adds	r3, #2
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	4413      	add	r3, r2
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	041b      	lsls	r3, r3, #16
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	3303      	adds	r3, #3
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	4413      	add	r3, r2
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	061b      	lsls	r3, r3, #24
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->data_length);
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	3304      	adds	r3, #4
 80032c2:	617b      	str	r3, [r7, #20]
      if(data_lengthT > data_length)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d90a      	bls.n	80032e4 <_ZN8std_msgs15Int32MultiArray11deserializeEPh+0x8c>
        this->data = (int32_t*)realloc(this->data, data_lengthT * sizeof(int32_t));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4619      	mov	r1, r3
 80032d8:	4610      	mov	r0, r2
 80032da:	f007 fc41 	bl	800ab60 <realloc>
 80032de:	4602      	mov	r2, r0
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	62da      	str	r2, [r3, #44]	; 0x2c
      data_length = data_lengthT;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	625a      	str	r2, [r3, #36]	; 0x24
      for( uint32_t i = 0; i < data_length; i++){
 80032ea:	2300      	movs	r3, #0
 80032ec:	613b      	str	r3, [r7, #16]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d236      	bcs.n	8003366 <_ZN8std_msgs15Int32MultiArray11deserializeEPh+0x10e>
      union {
        int32_t real;
        uint32_t base;
      } u_st_data;
      u_st_data.base = 0;
 80032f8:	2300      	movs	r3, #0
 80032fa:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	6839      	ldr	r1, [r7, #0]
 8003302:	440a      	add	r2, r1
 8003304:	7812      	ldrb	r2, [r2, #0]
 8003306:	4313      	orrs	r3, r2
 8003308:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	3301      	adds	r3, #1
 8003310:	6839      	ldr	r1, [r7, #0]
 8003312:	440b      	add	r3, r1
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	021b      	lsls	r3, r3, #8
 8003318:	4313      	orrs	r3, r2
 800331a:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800331c:	68ba      	ldr	r2, [r7, #8]
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	3302      	adds	r3, #2
 8003322:	6839      	ldr	r1, [r7, #0]
 8003324:	440b      	add	r3, r1
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	041b      	lsls	r3, r3, #16
 800332a:	4313      	orrs	r3, r2
 800332c:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800332e:	68ba      	ldr	r2, [r7, #8]
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	3303      	adds	r3, #3
 8003334:	6839      	ldr	r1, [r7, #0]
 8003336:	440b      	add	r3, r1
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	061b      	lsls	r3, r3, #24
 800333c:	4313      	orrs	r3, r2
 800333e:	60bb      	str	r3, [r7, #8]
      this->st_data = u_st_data.real;
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	629a      	str	r2, [r3, #40]	; 0x28
      offset += sizeof(this->st_data);
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	3304      	adds	r3, #4
 800334a:	617b      	str	r3, [r7, #20]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(int32_t));
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	3228      	adds	r2, #40	; 0x28
 800335a:	6812      	ldr	r2, [r2, #0]
 800335c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < data_length; i++){
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	3301      	adds	r3, #1
 8003362:	613b      	str	r3, [r7, #16]
 8003364:	e7c3      	b.n	80032ee <_ZN8std_msgs15Int32MultiArray11deserializeEPh+0x96>
      }
     return offset;
 8003366:	697b      	ldr	r3, [r7, #20]
    }
 8003368:	4618      	mov	r0, r3
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <_ZN8std_msgs15Int32MultiArray7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Int32MultiArray"; };
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	4b03      	ldr	r3, [pc, #12]	; (8003388 <_ZN8std_msgs15Int32MultiArray7getTypeEv+0x18>)
 800337a:	4618      	mov	r0, r3
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	0800b000 	.word	0x0800b000

0800338c <_ZN8std_msgs15Int32MultiArray6getMD5Ev>:
    virtual const char * getMD5() override { return "1d99f79f8b325b44fee908053e9c945b"; };
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	4b03      	ldr	r3, [pc, #12]	; (80033a4 <_ZN8std_msgs15Int32MultiArray6getMD5Ev+0x18>)
 8003396:	4618      	mov	r0, r3
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	0800b01c 	.word	0x0800b01c

080033a8 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	4a04      	ldr	r2, [pc, #16]	; (80033c4 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4618      	mov	r0, r3
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	0800b14c 	.word	0x0800b14c

080033c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff ffe8 	bl	80033a8 <_ZN3ros15NodeHandleBase_C1Ev>
 80033d8:	4a36      	ldr	r2, [pc, #216]	; (80034b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	601a      	str	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	3304      	adds	r3, #4
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7ff fb0e 	bl	8002a04 <_ZN13STM32HardwareC1Ev>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800340e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003412:	2100      	movs	r1, #0
 8003414:	4618      	mov	r0, r3
 8003416:	f007 fb07 	bl	800aa28 <memset>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003420:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003424:	2100      	movs	r1, #0
 8003426:	4618      	mov	r0, r3
 8003428:	f007 fafe 	bl	800aa28 <memset>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8003432:	2264      	movs	r2, #100	; 0x64
 8003434:	2100      	movs	r1, #0
 8003436:	4618      	mov	r0, r3
 8003438:	f007 faf6 	bl	800aa28 <memset>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8003442:	2264      	movs	r2, #100	; 0x64
 8003444:	2100      	movs	r1, #0
 8003446:	4618      	mov	r0, r3
 8003448:	f007 faee 	bl	800aa28 <memset>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f603 1314 	addw	r3, r3, #2324	; 0x914
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fe ff98 	bl	80023d8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4618      	mov	r0, r3
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	0800b0d8 	.word	0x0800b0d8

080034b8 <_Z9messageCbRKN8std_msgs15Int32MultiArrayE>:

extern float outputPWM_comm[3];
extern float outputPWM_stm[3];

void messageCb(const std_msgs::Int32MultiArray& incoming_msg )
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
	if (incoming_msg.data){
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d041      	beq.n	800354c <_Z9messageCbRKN8std_msgs15Int32MultiArrayE+0x94>
		for(int i = 0; i <= 50; i++){
 80034c8:	2300      	movs	r3, #0
 80034ca:	60fb      	str	r3, [r7, #12]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2b32      	cmp	r3, #50	; 0x32
 80034d0:	dc0d      	bgt.n	80034ee <_Z9messageCbRKN8std_msgs15Int32MultiArrayE+0x36>
			comm_to_stm[i] = incoming_msg.data[i];
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4413      	add	r3, r2
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	491d      	ldr	r1, [pc, #116]	; (8003554 <_Z9messageCbRKN8std_msgs15Int32MultiArrayE+0x9c>)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i <= 50; i++){
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	3301      	adds	r3, #1
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	e7ee      	b.n	80034cc <_Z9messageCbRKN8std_msgs15Int32MultiArrayE+0x14>
		}

		if(comm_to_stm[0] == 'E' && comm_to_stm[1] == 'L' && comm_to_stm[2] == 'K' && comm_to_stm[3] == 'A'){
 80034ee:	4b19      	ldr	r3, [pc, #100]	; (8003554 <_Z9messageCbRKN8std_msgs15Int32MultiArrayE+0x9c>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2b45      	cmp	r3, #69	; 0x45
 80034f4:	d12a      	bne.n	800354c <_Z9messageCbRKN8std_msgs15Int32MultiArrayE+0x94>
 80034f6:	4b17      	ldr	r3, [pc, #92]	; (8003554 <_Z9messageCbRKN8std_msgs15Int32MultiArrayE+0x9c>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2b4c      	cmp	r3, #76	; 0x4c
 80034fc:	d126      	bne.n	800354c <_Z9messageCbRKN8std_msgs15Int32MultiArrayE+0x94>
 80034fe:	4b15      	ldr	r3, [pc, #84]	; (8003554 <_Z9messageCbRKN8std_msgs15Int32MultiArrayE+0x9c>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	2b4b      	cmp	r3, #75	; 0x4b
 8003504:	d122      	bne.n	800354c <_Z9messageCbRKN8std_msgs15Int32MultiArrayE+0x94>
 8003506:	4b13      	ldr	r3, [pc, #76]	; (8003554 <_Z9messageCbRKN8std_msgs15Int32MultiArrayE+0x9c>)
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	2b41      	cmp	r3, #65	; 0x41
 800350c:	d11e      	bne.n	800354c <_Z9messageCbRKN8std_msgs15Int32MultiArrayE+0x94>
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_0);
 800350e:	2101      	movs	r1, #1
 8003510:	4811      	ldr	r0, [pc, #68]	; (8003558 <_Z9messageCbRKN8std_msgs15Int32MultiArrayE+0xa0>)
 8003512:	f002 ff74 	bl	80063fe <HAL_GPIO_TogglePin>
			outputPWM_comm[0] = comm_to_stm[4];
 8003516:	4b0f      	ldr	r3, [pc, #60]	; (8003554 <_Z9messageCbRKN8std_msgs15Int32MultiArrayE+0x9c>)
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	ee07 3a90 	vmov	s15, r3
 800351e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003522:	4b0e      	ldr	r3, [pc, #56]	; (800355c <_Z9messageCbRKN8std_msgs15Int32MultiArrayE+0xa4>)
 8003524:	edc3 7a00 	vstr	s15, [r3]
			outputPWM_comm[1] = comm_to_stm[5];
 8003528:	4b0a      	ldr	r3, [pc, #40]	; (8003554 <_Z9messageCbRKN8std_msgs15Int32MultiArrayE+0x9c>)
 800352a:	695b      	ldr	r3, [r3, #20]
 800352c:	ee07 3a90 	vmov	s15, r3
 8003530:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003534:	4b09      	ldr	r3, [pc, #36]	; (800355c <_Z9messageCbRKN8std_msgs15Int32MultiArrayE+0xa4>)
 8003536:	edc3 7a01 	vstr	s15, [r3, #4]
			outputPWM_comm[2] = comm_to_stm[6];
 800353a:	4b06      	ldr	r3, [pc, #24]	; (8003554 <_Z9messageCbRKN8std_msgs15Int32MultiArrayE+0x9c>)
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	ee07 3a90 	vmov	s15, r3
 8003542:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003546:	4b05      	ldr	r3, [pc, #20]	; (800355c <_Z9messageCbRKN8std_msgs15Int32MultiArrayE+0xa4>)
 8003548:	edc3 7a02 	vstr	s15, [r3, #8]
		}
	}
}
 800354c:	bf00      	nop
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	20000510 	.word	0x20000510
 8003558:	40021000 	.word	0x40021000
 800355c:	200005d8 	.word	0x200005d8

08003560 <HAL_UART_TxCpltCallback>:

ros::Subscriber<std_msgs::Int32MultiArray> sub("/service_robot/comm", &messageCb );

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 8003568:	4805      	ldr	r0, [pc, #20]	; (8003580 <HAL_UART_TxCpltCallback+0x20>)
 800356a:	f000 f925 	bl	80037b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800356e:	4603      	mov	r3, r0
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff faad 	bl	8002ad0 <_ZN13STM32Hardware5flushEv>
}
 8003576:	bf00      	nop
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	200005f4 	.word	0x200005f4

08003584 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 800358c:	4805      	ldr	r0, [pc, #20]	; (80035a4 <HAL_UART_RxCpltCallback+0x20>)
 800358e:	f000 f913 	bl	80037b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003592:	4603      	mov	r3, r0
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff fa5c 	bl	8002a52 <_ZN13STM32Hardware10reset_rbufEv>
}
 800359a:	bf00      	nop
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	200005f4 	.word	0x200005f4

080035a8 <setup>:

void setup(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  nh.initNode();
 80035ac:	4806      	ldr	r0, [pc, #24]	; (80035c8 <setup+0x20>)
 80035ae:	f000 f90f 	bl	80037d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.advertise(stm);
 80035b2:	4906      	ldr	r1, [pc, #24]	; (80035cc <setup+0x24>)
 80035b4:	4804      	ldr	r0, [pc, #16]	; (80035c8 <setup+0x20>)
 80035b6:	f000 f928 	bl	800380a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.subscribe(sub);
 80035ba:	4905      	ldr	r1, [pc, #20]	; (80035d0 <setup+0x28>)
 80035bc:	4802      	ldr	r0, [pc, #8]	; (80035c8 <setup+0x20>)
 80035be:	f000 f954 	bl	800386a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
}
 80035c2:	bf00      	nop
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	200005f4 	.word	0x200005f4
 80035cc:	20000f60 	.word	0x20000f60
 80035d0:	20000f74 	.word	0x20000f74

080035d4 <loop>:

void loop(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	af00      	add	r7, sp, #0
  str_msg.data = stm_to_comm;
 80035d8:	4b33      	ldr	r3, [pc, #204]	; (80036a8 <loop+0xd4>)
 80035da:	4a34      	ldr	r2, [pc, #208]	; (80036ac <loop+0xd8>)
 80035dc:	62da      	str	r2, [r3, #44]	; 0x2c
  str_msg.data[0] = 'E';
 80035de:	4b32      	ldr	r3, [pc, #200]	; (80036a8 <loop+0xd4>)
 80035e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e2:	2245      	movs	r2, #69	; 0x45
 80035e4:	601a      	str	r2, [r3, #0]
  str_msg.data[1] = 'L';
 80035e6:	4b30      	ldr	r3, [pc, #192]	; (80036a8 <loop+0xd4>)
 80035e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ea:	3304      	adds	r3, #4
 80035ec:	224c      	movs	r2, #76	; 0x4c
 80035ee:	601a      	str	r2, [r3, #0]
  str_msg.data[2] = 'K';
 80035f0:	4b2d      	ldr	r3, [pc, #180]	; (80036a8 <loop+0xd4>)
 80035f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f4:	3308      	adds	r3, #8
 80035f6:	224b      	movs	r2, #75	; 0x4b
 80035f8:	601a      	str	r2, [r3, #0]
  str_msg.data[3] = 'A';
 80035fa:	4b2b      	ldr	r3, [pc, #172]	; (80036a8 <loop+0xd4>)
 80035fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fe:	330c      	adds	r3, #12
 8003600:	2241      	movs	r2, #65	; 0x41
 8003602:	601a      	str	r2, [r3, #0]

  str_msg.data[4] = int(outputPWM_stm[0]);
 8003604:	4b2a      	ldr	r3, [pc, #168]	; (80036b0 <loop+0xdc>)
 8003606:	edd3 7a00 	vldr	s15, [r3]
 800360a:	4b27      	ldr	r3, [pc, #156]	; (80036a8 <loop+0xd4>)
 800360c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360e:	3310      	adds	r3, #16
 8003610:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003614:	ee17 2a90 	vmov	r2, s15
 8003618:	601a      	str	r2, [r3, #0]
  str_msg.data[5] = int(outputPWM_stm[1]);
 800361a:	4b25      	ldr	r3, [pc, #148]	; (80036b0 <loop+0xdc>)
 800361c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003620:	4b21      	ldr	r3, [pc, #132]	; (80036a8 <loop+0xd4>)
 8003622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003624:	3314      	adds	r3, #20
 8003626:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800362a:	ee17 2a90 	vmov	r2, s15
 800362e:	601a      	str	r2, [r3, #0]
  str_msg.data[6] = int(outputPWM_stm[2]);
 8003630:	4b1f      	ldr	r3, [pc, #124]	; (80036b0 <loop+0xdc>)
 8003632:	edd3 7a02 	vldr	s15, [r3, #8]
 8003636:	4b1c      	ldr	r3, [pc, #112]	; (80036a8 <loop+0xd4>)
 8003638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363a:	3318      	adds	r3, #24
 800363c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003640:	ee17 2a90 	vmov	r2, s15
 8003644:	601a      	str	r2, [r3, #0]

  str_msg.data[7] = mode;
 8003646:	4b18      	ldr	r3, [pc, #96]	; (80036a8 <loop+0xd4>)
 8003648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364a:	331c      	adds	r3, #28
 800364c:	4a19      	ldr	r2, [pc, #100]	; (80036b4 <loop+0xe0>)
 800364e:	6812      	ldr	r2, [r2, #0]
 8003650:	601a      	str	r2, [r3, #0]

  str_msg.data[8] = 65535;
 8003652:	4b15      	ldr	r3, [pc, #84]	; (80036a8 <loop+0xd4>)
 8003654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003656:	3320      	adds	r3, #32
 8003658:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800365c:	601a      	str	r2, [r3, #0]
  str_msg.data[9] = encoder[1];
 800365e:	4b12      	ldr	r3, [pc, #72]	; (80036a8 <loop+0xd4>)
 8003660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003662:	3324      	adds	r3, #36	; 0x24
 8003664:	4a14      	ldr	r2, [pc, #80]	; (80036b8 <loop+0xe4>)
 8003666:	6852      	ldr	r2, [r2, #4]
 8003668:	601a      	str	r2, [r3, #0]
  str_msg.data[10] = encoder[2];
 800366a:	4b0f      	ldr	r3, [pc, #60]	; (80036a8 <loop+0xd4>)
 800366c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366e:	3328      	adds	r3, #40	; 0x28
 8003670:	4a11      	ldr	r2, [pc, #68]	; (80036b8 <loop+0xe4>)
 8003672:	6892      	ldr	r2, [r2, #8]
 8003674:	601a      	str	r2, [r3, #0]

  str_msg.data[11] = encoder_external[0];
 8003676:	4b0c      	ldr	r3, [pc, #48]	; (80036a8 <loop+0xd4>)
 8003678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367a:	332c      	adds	r3, #44	; 0x2c
 800367c:	4a0f      	ldr	r2, [pc, #60]	; (80036bc <loop+0xe8>)
 800367e:	6812      	ldr	r2, [r2, #0]
 8003680:	601a      	str	r2, [r3, #0]
  str_msg.data[12] = encoder_external[1];
 8003682:	4b09      	ldr	r3, [pc, #36]	; (80036a8 <loop+0xd4>)
 8003684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003686:	3330      	adds	r3, #48	; 0x30
 8003688:	4a0c      	ldr	r2, [pc, #48]	; (80036bc <loop+0xe8>)
 800368a:	6852      	ldr	r2, [r2, #4]
 800368c:	601a      	str	r2, [r3, #0]
//  memcpy(str_msg.data + 15, &encoder[2], 4);
//  memcpy(str_msg.data + 19, &encoder_external[0], 4);
//  memcpy(str_msg.data + 23, &encoder_external[1], 4);
//  memcpy(str_msg.data + 27, &mode, 1);

  str_msg.data_length = 13;
 800368e:	4b06      	ldr	r3, [pc, #24]	; (80036a8 <loop+0xd4>)
 8003690:	220d      	movs	r2, #13
 8003692:	625a      	str	r2, [r3, #36]	; 0x24

  stm.publish(&str_msg);
 8003694:	4904      	ldr	r1, [pc, #16]	; (80036a8 <loop+0xd4>)
 8003696:	480a      	ldr	r0, [pc, #40]	; (80036c0 <loop+0xec>)
 8003698:	f7ff f981 	bl	800299e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  nh.spinOnce();
 800369c:	4809      	ldr	r0, [pc, #36]	; (80036c4 <loop+0xf0>)
 800369e:	f000 f90f 	bl	80038c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 80036a2:	bf00      	nop
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	20000f30 	.word	0x20000f30
 80036ac:	20000448 	.word	0x20000448
 80036b0:	200005e4 	.word	0x200005e4
 80036b4:	200003f4 	.word	0x200003f4
 80036b8:	20000360 	.word	0x20000360
 80036bc:	2000036c 	.word	0x2000036c
 80036c0:	20000f60 	.word	0x20000f60
 80036c4:	200005f4 	.word	0x200005f4

080036c8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80036d2:	2300      	movs	r3, #0
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2b03      	cmp	r3, #3
 80036da:	d80d      	bhi.n	80036f8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	fa22 f103 	lsr.w	r1, r2, r3
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4413      	add	r3, r2
 80036ec:	b2ca      	uxtb	r2, r1
 80036ee:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	3301      	adds	r3, #1
 80036f4:	60fb      	str	r3, [r7, #12]
 80036f6:	e7ee      	b.n	80036d6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 80036f8:	bf00      	nop
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003714:	2300      	movs	r3, #0
 8003716:	60fb      	str	r3, [r7, #12]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2b03      	cmp	r3, #3
 800371c:	d811      	bhi.n	8003742 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	6839      	ldr	r1, [r7, #0]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	440a      	add	r2, r1
 8003728:	7812      	ldrb	r2, [r2, #0]
 800372a:	4611      	mov	r1, r2
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	00d2      	lsls	r2, r2, #3
 8003730:	fa01 f202 	lsl.w	r2, r1, r2
 8003734:	431a      	orrs	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	3301      	adds	r3, #1
 800373e:	60fb      	str	r3, [r7, #12]
 8003740:	e7ea      	b.n	8003718 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8003742:	bf00      	nop
 8003744:	3714      	adds	r7, #20
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
	...

08003750 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	4a04      	ldr	r2, [pc, #16]	; (800376c <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	601a      	str	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4618      	mov	r0, r3
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr
 800376c:	0800b134 	.word	0x0800b134

08003770 <_ZN3ros10SubscriberIN8std_msgs15Int32MultiArrayEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
 800377c:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	4618      	mov	r0, r3
 8003782:	f7ff ffe5 	bl	8003750 <_ZN3ros11Subscriber_C1Ev>
 8003786:	4a0b      	ldr	r2, [pc, #44]	; (80037b4 <_ZN3ros10SubscriberIN8std_msgs15Int32MultiArrayEvEC1EPKcPFvRKS2_Ei+0x44>)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	330c      	adds	r3, #12
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff fcd1 	bl	8003138 <_ZN8std_msgs15Int32MultiArrayC1Ev>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	63da      	str	r2, [r3, #60]	; 0x3c
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	641a      	str	r2, [r3, #64]	; 0x40
  {
    topic_ = topic_name;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	68ba      	ldr	r2, [r7, #8]
 80037a6:	609a      	str	r2, [r3, #8]
  };
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	4618      	mov	r0, r3
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	0800b0c0 	.word	0x0800b0c0

080037b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	3304      	adds	r3, #4
  }
 80037c4:	4618      	mov	r0, r3
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3304      	adds	r3, #4
 80037dc:	4618      	mov	r0, r3
 80037de:	f7ff f92d 	bl	8002a3c <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8003802:	bf00      	nop
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 800380a:	b480      	push	{r7}
 800380c:	b085      	sub	sp, #20
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
 8003812:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003814:	2300      	movs	r3, #0
 8003816:	60fb      	str	r3, [r7, #12]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2b18      	cmp	r3, #24
 800381c:	dc1e      	bgt.n	800385c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	4413      	add	r3, r2
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d111      	bne.n	8003854 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	4413      	add	r3, r2
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	60da      	str	r2, [r3, #12]
        return true;
 8003850:	2301      	movs	r3, #1
 8003852:	e004      	b.n	800385e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	3301      	adds	r3, #1
 8003858:	60fb      	str	r3, [r7, #12]
 800385a:	e7dd      	b.n	8003818 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 800385c:	2300      	movs	r3, #0
  }
 800385e:	4618      	mov	r0, r3
 8003860:	3714      	adds	r7, #20
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr

0800386a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 800386a:	b480      	push	{r7}
 800386c:	b085      	sub	sp, #20
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
 8003872:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003874:	2300      	movs	r3, #0
 8003876:	60fb      	str	r3, [r7, #12]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2b18      	cmp	r3, #24
 800387c:	dc19      	bgt.n	80038b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10d      	bne.n	80038aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x40>
      {
        subscribers[i] = &s;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003896:	6839      	ldr	r1, [r7, #0]
 8003898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	605a      	str	r2, [r3, #4]
        return true;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e004      	b.n	80038b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	3301      	adds	r3, #1
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	e7e2      	b.n	8003878 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0xe>
      }
    }
    return false;
 80038b2:	2300      	movs	r3, #0
  }
 80038b4:	4618      	mov	r0, r3
 80038b6:	3714      	adds	r7, #20
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	3304      	adds	r3, #4
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7ff f9a3 	bl	8002c18 <_ZN13STM32Hardware4timeEv>
 80038d2:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d903      	bls.n	80038ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d009      	beq.n	800390c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	429a      	cmp	r2, r3
 8003902:	d903      	bls.n	800390c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003912:	2b00      	cmp	r3, #0
 8003914:	d014      	beq.n	8003940 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	3304      	adds	r3, #4
 800391a:	4618      	mov	r0, r3
 800391c:	f7ff f97c 	bl	8002c18 <_ZN13STM32Hardware4timeEv>
 8003920:	4602      	mov	r2, r0
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	1ad2      	subs	r2, r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800392c:	429a      	cmp	r2, r3
 800392e:	bf8c      	ite	hi
 8003930:	2301      	movhi	r3, #1
 8003932:	2300      	movls	r3, #0
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d002      	beq.n	8003940 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 800393a:	f06f 0301 	mvn.w	r3, #1
 800393e:	e194      	b.n	8003c6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3304      	adds	r3, #4
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff f895 	bl	8002a74 <_ZN13STM32Hardware4readEv>
 800394a:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	2b00      	cmp	r3, #0
 8003950:	f2c0 8174 	blt.w	8003c3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	441a      	add	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800396a:	2b07      	cmp	r3, #7
 800396c:	d11e      	bne.n	80039ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8003974:	1c59      	adds	r1, r3, #1
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 800397c:	68ba      	ldr	r2, [r7, #8]
 800397e:	b2d1      	uxtb	r1, r2
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	4413      	add	r3, r2
 8003984:	460a      	mov	r2, r1
 8003986:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003990:	1e5a      	subs	r2, r3, #1
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1b4      	bne.n	800390c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2208      	movs	r2, #8
 80039a6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80039aa:	e7af      	b.n	800390c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d128      	bne.n	8003a08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	2bff      	cmp	r3, #255	; 0xff
 80039ba:	d10d      	bne.n	80039d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80039c2:	1c5a      	adds	r2, r3, #1
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f103 0214 	add.w	r2, r3, #20
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80039d6:	e799      	b.n	800390c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	3304      	adds	r3, #4
 80039dc:	4618      	mov	r0, r3
 80039de:	f7ff f91b 	bl	8002c18 <_ZN13STM32Hardware4timeEv>
 80039e2:	4602      	mov	r2, r0
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ec:	4293      	cmp	r3, r2
 80039ee:	bf8c      	ite	hi
 80039f0:	2301      	movhi	r3, #1
 80039f2:	2300      	movls	r3, #0
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d088      	beq.n	800390c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8003a02:	f06f 0301 	mvn.w	r3, #1
 8003a06:	e130      	b.n	8003c6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d118      	bne.n	8003a44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	2bfe      	cmp	r3, #254	; 0xfe
 8003a16:	d107      	bne.n	8003a28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003a1e:	1c5a      	adds	r2, r3, #1
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003a26:	e771      	b.n	800390c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f47f af68 	bne.w	800390c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 f918 	bl	8003c72 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8003a42:	e763      	b.n	800390c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d113      	bne.n	8003a76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68ba      	ldr	r2, [r7, #8]
 8003a52:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003a64:	1c5a      	adds	r2, r3, #1
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68ba      	ldr	r2, [r7, #8]
 8003a70:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003a74:	e74a      	b.n	800390c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003a7c:	2b03      	cmp	r3, #3
 8003a7e:	d110      	bne.n	8003aa2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	021b      	lsls	r3, r3, #8
 8003a8a:	441a      	add	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003a98:	1c5a      	adds	r2, r3, #1
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003aa0:	e734      	b.n	800390c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003aa8:	2b04      	cmp	r3, #4
 8003aaa:	d116      	bne.n	8003ada <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003ab2:	425a      	negs	r2, r3
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	b2d2      	uxtb	r2, r2
 8003ab8:	bf58      	it	pl
 8003aba:	4253      	negpl	r3, r2
 8003abc:	2bff      	cmp	r3, #255	; 0xff
 8003abe:	d107      	bne.n	8003ad0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003ac6:	1c5a      	adds	r2, r3, #1
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003ace:	e71d      	b.n	800390c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003ad8:	e718      	b.n	800390c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003ae0:	2b05      	cmp	r3, #5
 8003ae2:	d10f      	bne.n	8003b04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003af2:	1c5a      	adds	r2, r3, #1
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003b02:	e703      	b.n	800390c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003b0a:	2b06      	cmp	r3, #6
 8003b0c:	d117      	bne.n	8003b3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	021b      	lsls	r3, r3, #8
 8003b18:	441a      	add	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2207      	movs	r2, #7
 8003b24:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f47f aeec 	bne.w	800390c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2208      	movs	r2, #8
 8003b38:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003b3c:	e6e6      	b.n	800390c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003b44:	2b08      	cmp	r3, #8
 8003b46:	f47f aee1 	bne.w	800390c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003b58:	425a      	negs	r2, r3
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	b2d2      	uxtb	r2, r2
 8003b5e:	bf58      	it	pl
 8003b60:	4253      	negpl	r3, r2
 8003b62:	2bff      	cmp	r3, #255	; 0xff
 8003b64:	f47f aed2 	bne.w	800390c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d110      	bne.n	8003b94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f87d 	bl	8003c72 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 f898 	bl	8003cae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8003b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b92:	e06a      	b.n	8003c6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003b9a:	2b0a      	cmp	r3, #10
 8003b9c:	d107      	bne.n	8003bae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f960 	bl	8003e6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8003bac:	e6ae      	b.n	800390c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003bb4:	2b06      	cmp	r3, #6
 8003bb6:	d10e      	bne.n	8003bd6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	4610      	mov	r0, r2
 8003bc8:	f7fe fd45 	bl	8002656 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8003bd4:	e69a      	b.n	800390c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003bdc:	2b0b      	cmp	r3, #11
 8003bde:	d104      	bne.n	8003bea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003be8:	e690      	b.n	800390c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003bf0:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f43f ae84 	beq.w	800390c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003c0a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003c14:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003c1e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8003c36:	4611      	mov	r1, r2
 8003c38:	4798      	blx	r3
    while (true)
 8003c3a:	e667      	b.n	800390c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8003c3c:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00f      	beq.n	8003c68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d906      	bls.n	8003c68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f809 	bl	8003c72 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8003c68:	2300      	movs	r3, #0
  }
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b086      	sub	sp, #24
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8003c7a:	f107 030c 	add.w	r3, r7, #12
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7fe f846 	bl	8001d10 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f107 020c 	add.w	r2, r7, #12
 8003c8e:	210a      	movs	r1, #10
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	4798      	blx	r3
    rt_time = hardware_.time();
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	3304      	adds	r3, #4
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7fe ffbd 	bl	8002c18 <_ZN13STM32Hardware4timeEv>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8003ca6:	bf00      	nop
 8003ca8:	3718      	adds	r7, #24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8003cae:	b590      	push	{r4, r7, lr}
 8003cb0:	b08b      	sub	sp, #44	; 0x2c
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003cb6:	f107 030c 	add.w	r3, r7, #12
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fe f918 	bl	8001ef0 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	2b18      	cmp	r3, #24
 8003cc8:	dc63      	bgt.n	8003d92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cce:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	4413      	add	r3, r2
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d056      	beq.n	8003d8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	4413      	add	r3, r2
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	4413      	add	r3, r2
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	4413      	add	r3, r2
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	6859      	ldr	r1, [r3, #4]
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d16:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	4413      	add	r3, r2
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	3308      	adds	r3, #8
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4608      	mov	r0, r1
 8003d2a:	4798      	blx	r3
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d34:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4413      	add	r3, r2
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	6859      	ldr	r1, [r3, #4]
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d44:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	4413      	add	r3, r2
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	330c      	adds	r3, #12
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4608      	mov	r0, r1
 8003d58:	4798      	blx	r3
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8003d5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d62:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681c      	ldr	r4, [r3, #0]
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	4413      	add	r3, r2
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7fe fe24 	bl	80029c6 <_ZN3ros9Publisher15getEndpointTypeEv>
 8003d7e:	4601      	mov	r1, r0
 8003d80:	f107 030c 	add.w	r3, r7, #12
 8003d84:	461a      	mov	r2, r3
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d90:	e798      	b.n	8003cc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003d92:	2300      	movs	r3, #0
 8003d94:	627b      	str	r3, [r7, #36]	; 0x24
 8003d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d98:	2b18      	cmp	r3, #24
 8003d9a:	dc5f      	bgt.n	8003e5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003da0:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d053      	beq.n	8003e54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db0:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dc2:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd2:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003dd6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dde:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	3308      	adds	r3, #8
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4608      	mov	r0, r1
 8003dee:	4798      	blx	r3
 8003df0:	4603      	mov	r3, r0
 8003df2:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003df8:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003dfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e04:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	330c      	adds	r3, #12
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4608      	mov	r0, r1
 8003e14:	4798      	blx	r3
 8003e16:	4603      	mov	r3, r0
 8003e18:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003e1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e1e:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681c      	ldr	r4, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e2a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003e2e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e36:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	3304      	adds	r3, #4
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4608      	mov	r0, r1
 8003e46:	4798      	blx	r3
 8003e48:	4601      	mov	r1, r0
 8003e4a:	f107 030c 	add.w	r3, r7, #12
 8003e4e:	461a      	mov	r2, r3
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e56:	3301      	adds	r3, #1
 8003e58:	627b      	str	r3, [r7, #36]	; 0x24
 8003e5a:	e79c      	b.n	8003d96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8003e64:	bf00      	nop
 8003e66:	372c      	adds	r7, #44	; 0x2c
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd90      	pop	{r4, r7, pc}

08003e6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003e76:	f107 0308 	add.w	r3, r7, #8
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fd ff48 	bl	8001d10 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	3304      	adds	r3, #4
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7fe fec7 	bl	8002c18 <_ZN13STM32Hardware4timeEv>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003e96:	f107 0308 	add.w	r3, r7, #8
 8003e9a:	6839      	ldr	r1, [r7, #0]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7fd ffa7 	bl	8001df0 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	4915      	ldr	r1, [pc, #84]	; (8003efc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003ea8:	fba1 1303 	umull	r1, r3, r1, r3
 8003eac:	099b      	lsrs	r3, r3, #6
 8003eae:	4413      	add	r3, r2
 8003eb0:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003eb2:	6939      	ldr	r1, [r7, #16]
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	4b11      	ldr	r3, [pc, #68]	; (8003efc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003eb8:	fba3 0302 	umull	r0, r3, r3, r2
 8003ebc:	099b      	lsrs	r3, r3, #6
 8003ebe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ec2:	fb00 f303 	mul.w	r3, r0, r3
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	4a0d      	ldr	r2, [pc, #52]	; (8003f00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003eca:	fb02 f303 	mul.w	r3, r2, r3
 8003ece:	440b      	add	r3, r1
 8003ed0:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003ed2:	f107 0308 	add.w	r3, r7, #8
 8003ed6:	3304      	adds	r3, #4
 8003ed8:	4619      	mov	r1, r3
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f8a6 	bl	800402c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3304      	adds	r3, #4
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7fe fe97 	bl	8002c18 <_ZN13STM32Hardware4timeEv>
 8003eea:	4602      	mov	r2, r0
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8003ef2:	bf00      	nop
 8003ef4:	3718      	adds	r7, #24
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	10624dd3 	.word	0x10624dd3
 8003f00:	000f4240 	.word	0x000f4240

08003f04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b088      	sub	sp, #32
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	2b63      	cmp	r3, #99	; 0x63
 8003f14:	dd09      	ble.n	8003f2a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003f1c:	f083 0301 	eor.w	r3, r3, #1
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8003f26:	2300      	movs	r3, #0
 8003f28:	e079      	b.n	800401e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8003f36:	3207      	adds	r2, #7
 8003f38:	4611      	mov	r1, r2
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	4798      	blx	r3
 8003f3e:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	22ff      	movs	r2, #255	; 0xff
 8003f44:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	22fe      	movs	r2, #254	; 0xfe
 8003f4c:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	b2da      	uxtb	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	0a1b      	lsrs	r3, r3, #8
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	b2da      	uxtb	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8003f76:	4413      	add	r3, r2
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	43db      	mvns	r3, r3
 8003f7c:	b2da      	uxtb	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	b2da      	uxtb	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	b21b      	sxth	r3, r3
 8003f92:	121b      	asrs	r3, r3, #8
 8003f94:	b21b      	sxth	r3, r3
 8003f96:	b2da      	uxtb	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003fa2:	2305      	movs	r3, #5
 8003fa4:	61bb      	str	r3, [r7, #24]
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	3306      	adds	r3, #6
 8003faa:	69ba      	ldr	r2, [r7, #24]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	dc0d      	bgt.n	8003fcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	61bb      	str	r3, [r7, #24]
 8003fca:	e7ec      	b.n	8003fa6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	3307      	adds	r3, #7
 8003fd0:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	425a      	negs	r2, r3
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	b2d2      	uxtb	r2, r2
 8003fda:	bf58      	it	pl
 8003fdc:	4253      	negpl	r3, r2
 8003fde:	b2da      	uxtb	r2, r3
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	1c59      	adds	r1, r3, #1
 8003fe4:	6179      	str	r1, [r7, #20]
 8003fe6:	43d2      	mvns	r2, r2
 8003fe8:	b2d1      	uxtb	r1, r2
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	4413      	add	r3, r2
 8003fee:	460a      	mov	r2, r1
 8003ff0:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ffa:	dc0a      	bgt.n	8004012 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	1d18      	adds	r0, r3, #4
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	4619      	mov	r1, r3
 800400a:	f7fe fdbf 	bl	8002b8c <_ZN13STM32Hardware5writeEPhi>
      return l;
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	e005      	b.n	800401e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004012:	4905      	ldr	r1, [pc, #20]	; (8004028 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f000 f849 	bl	80040ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 800401a:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 800401e:	4618      	mov	r0, r3
 8004020:	3720      	adds	r7, #32
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	0800b040 	.word	0x0800b040

0800402c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	3304      	adds	r3, #4
 800403a:	4618      	mov	r0, r3
 800403c:	f7fe fdec 	bl	8002c18 <_ZN13STM32Hardware4timeEv>
 8004040:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	4915      	ldr	r1, [pc, #84]	; (80040a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 800404a:	fba1 1303 	umull	r1, r3, r1, r3
 800404e:	099b      	lsrs	r3, r3, #6
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	1e5a      	subs	r2, r3, #1
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	6859      	ldr	r1, [r3, #4]
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	4b0f      	ldr	r3, [pc, #60]	; (80040a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8004062:	fba3 0302 	umull	r0, r3, r3, r2
 8004066:	099b      	lsrs	r3, r3, #6
 8004068:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800406c:	fb00 f303 	mul.w	r3, r0, r3
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	4a0c      	ldr	r2, [pc, #48]	; (80040a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8004074:	fb02 f303 	mul.w	r3, r2, r3
 8004078:	1aca      	subs	r2, r1, r3
 800407a:	4b0b      	ldr	r3, [pc, #44]	; (80040a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 800407c:	4413      	add	r3, r2
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8004090:	4619      	mov	r1, r3
 8004092:	4610      	mov	r0, r2
 8004094:	f000 ff84 	bl	8004fa0 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004098:	bf00      	nop
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	10624dd3 	.word	0x10624dd3
 80040a4:	000f4240 	.word	0x000f4240
 80040a8:	3b9aca00 	.word	0x3b9aca00

080040ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	2103      	movs	r1, #3
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f804 	bl	80040c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80040c0:	bf00      	nop
 80040c2:	3708      	adds	r7, #8
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b088      	sub	sp, #32
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	460b      	mov	r3, r1
 80040d2:	607a      	str	r2, [r7, #4]
 80040d4:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80040d6:	f107 0314 	add.w	r3, r7, #20
 80040da:	4618      	mov	r0, r3
 80040dc:	f7fe f8cc 	bl	8002278 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80040e0:	7afb      	ldrb	r3, [r7, #11]
 80040e2:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f107 0214 	add.w	r2, r7, #20
 80040f2:	2107      	movs	r1, #7
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	4798      	blx	r3
  }
 80040f8:	bf00      	nop
 80040fa:	3720      	adds	r7, #32
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <_Z41__static_initialization_and_destruction_0ii>:
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d116      	bne.n	800413e <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004116:	4293      	cmp	r3, r2
 8004118:	d111      	bne.n	800413e <_Z41__static_initialization_and_destruction_0ii+0x3e>
ros::NodeHandle nh;
 800411a:	480b      	ldr	r0, [pc, #44]	; (8004148 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800411c:	f7ff f954 	bl	80033c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Int32MultiArray str_msg;
 8004120:	480a      	ldr	r0, [pc, #40]	; (800414c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004122:	f7ff f809 	bl	8003138 <_ZN8std_msgs15Int32MultiArrayC1Ev>
ros::Publisher stm("stm", &str_msg);
 8004126:	2300      	movs	r3, #0
 8004128:	4a08      	ldr	r2, [pc, #32]	; (800414c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800412a:	4909      	ldr	r1, [pc, #36]	; (8004150 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800412c:	4809      	ldr	r0, [pc, #36]	; (8004154 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800412e:	f7fe fc1f 	bl	8002970 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Int32MultiArray> sub("/service_robot/comm", &messageCb );
 8004132:	2301      	movs	r3, #1
 8004134:	4a08      	ldr	r2, [pc, #32]	; (8004158 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8004136:	4909      	ldr	r1, [pc, #36]	; (800415c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8004138:	4809      	ldr	r0, [pc, #36]	; (8004160 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800413a:	f7ff fb19 	bl	8003770 <_ZN3ros10SubscriberIN8std_msgs15Int32MultiArrayEvEC1EPKcPFvRKS2_Ei>
}
 800413e:	bf00      	nop
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	200005f4 	.word	0x200005f4
 800414c:	20000f30 	.word	0x20000f30
 8004150:	0800b07c 	.word	0x0800b07c
 8004154:	20000f60 	.word	0x20000f60
 8004158:	080034b9 	.word	0x080034b9
 800415c:	0800b080 	.word	0x0800b080
 8004160:	20000f74 	.word	0x20000f74

08004164 <_ZN3ros10SubscriberIN8std_msgs15Int32MultiArrayEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	330c      	adds	r3, #12
 8004172:	6839      	ldr	r1, [r7, #0]
 8004174:	4618      	mov	r0, r3
 8004176:	f7ff f86f 	bl	8003258 <_ZN8std_msgs15Int32MultiArray11deserializeEPh>
    this->cb_(msg);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	320c      	adds	r2, #12
 8004182:	4610      	mov	r0, r2
 8004184:	4798      	blx	r3
  }
 8004186:	bf00      	nop
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <_ZN3ros10SubscriberIN8std_msgs15Int32MultiArrayEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 800418e:	b480      	push	{r7}
 8004190:	b083      	sub	sp, #12
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  }
 800419a:	4618      	mov	r0, r3
 800419c:	370c      	adds	r7, #12
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr

080041a6 <_ZN3ros10SubscriberIN8std_msgs15Int32MultiArrayEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b082      	sub	sp, #8
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	330c      	adds	r3, #12
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7ff f8dc 	bl	8003370 <_ZN8std_msgs15Int32MultiArray7getTypeEv>
 80041b8:	4603      	mov	r3, r0
  }
 80041ba:	4618      	mov	r0, r3
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <_ZN3ros10SubscriberIN8std_msgs15Int32MultiArrayEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b082      	sub	sp, #8
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	330c      	adds	r3, #12
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7ff f8dc 	bl	800338c <_ZN8std_msgs15Int32MultiArray6getMD5Ev>
 80041d4:	4603      	mov	r3, r0
  }
 80041d6:	4618      	mov	r0, r3
 80041d8:	3708      	adds	r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 80041de:	b480      	push	{r7}
 80041e0:	b083      	sub	sp, #12
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
    return configured_;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 80041ec:	4618      	mov	r0, r3
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <_GLOBAL__sub_I_nh>:
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004200:	2001      	movs	r0, #1
 8004202:	f7ff ff7d 	bl	8004100 <_Z41__static_initialization_and_destruction_0ii>
 8004206:	bd80      	pop	{r7, pc}

08004208 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800420e:	2300      	movs	r3, #0
 8004210:	607b      	str	r3, [r7, #4]
 8004212:	4b12      	ldr	r3, [pc, #72]	; (800425c <HAL_MspInit+0x54>)
 8004214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004216:	4a11      	ldr	r2, [pc, #68]	; (800425c <HAL_MspInit+0x54>)
 8004218:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800421c:	6453      	str	r3, [r2, #68]	; 0x44
 800421e:	4b0f      	ldr	r3, [pc, #60]	; (800425c <HAL_MspInit+0x54>)
 8004220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004222:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004226:	607b      	str	r3, [r7, #4]
 8004228:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800422a:	2300      	movs	r3, #0
 800422c:	603b      	str	r3, [r7, #0]
 800422e:	4b0b      	ldr	r3, [pc, #44]	; (800425c <HAL_MspInit+0x54>)
 8004230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004232:	4a0a      	ldr	r2, [pc, #40]	; (800425c <HAL_MspInit+0x54>)
 8004234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004238:	6413      	str	r3, [r2, #64]	; 0x40
 800423a:	4b08      	ldr	r3, [pc, #32]	; (800425c <HAL_MspInit+0x54>)
 800423c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004242:	603b      	str	r3, [r7, #0]
 8004244:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004246:	2200      	movs	r2, #0
 8004248:	210f      	movs	r1, #15
 800424a:	f06f 0001 	mvn.w	r0, #1
 800424e:	f001 faf5 	bl	800583c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004252:	bf00      	nop
 8004254:	3708      	adds	r7, #8
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	40023800 	.word	0x40023800

08004260 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b08e      	sub	sp, #56	; 0x38
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004268:	2300      	movs	r3, #0
 800426a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800426c:	2300      	movs	r3, #0
 800426e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004270:	2300      	movs	r3, #0
 8004272:	60fb      	str	r3, [r7, #12]
 8004274:	4b33      	ldr	r3, [pc, #204]	; (8004344 <HAL_InitTick+0xe4>)
 8004276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004278:	4a32      	ldr	r2, [pc, #200]	; (8004344 <HAL_InitTick+0xe4>)
 800427a:	f043 0310 	orr.w	r3, r3, #16
 800427e:	6413      	str	r3, [r2, #64]	; 0x40
 8004280:	4b30      	ldr	r3, [pc, #192]	; (8004344 <HAL_InitTick+0xe4>)
 8004282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004284:	f003 0310 	and.w	r3, r3, #16
 8004288:	60fb      	str	r3, [r7, #12]
 800428a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800428c:	f107 0210 	add.w	r2, r7, #16
 8004290:	f107 0314 	add.w	r3, r7, #20
 8004294:	4611      	mov	r1, r2
 8004296:	4618      	mov	r0, r3
 8004298:	f002 fd64 	bl	8006d64 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800429c:	6a3b      	ldr	r3, [r7, #32]
 800429e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80042a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d103      	bne.n	80042ae <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80042a6:	f002 fd35 	bl	8006d14 <HAL_RCC_GetPCLK1Freq>
 80042aa:	6378      	str	r0, [r7, #52]	; 0x34
 80042ac:	e004      	b.n	80042b8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80042ae:	f002 fd31 	bl	8006d14 <HAL_RCC_GetPCLK1Freq>
 80042b2:	4603      	mov	r3, r0
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80042b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ba:	4a23      	ldr	r2, [pc, #140]	; (8004348 <HAL_InitTick+0xe8>)
 80042bc:	fba2 2303 	umull	r2, r3, r2, r3
 80042c0:	0c9b      	lsrs	r3, r3, #18
 80042c2:	3b01      	subs	r3, #1
 80042c4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80042c6:	4b21      	ldr	r3, [pc, #132]	; (800434c <HAL_InitTick+0xec>)
 80042c8:	4a21      	ldr	r2, [pc, #132]	; (8004350 <HAL_InitTick+0xf0>)
 80042ca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80042cc:	4b1f      	ldr	r3, [pc, #124]	; (800434c <HAL_InitTick+0xec>)
 80042ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 80042d2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80042d4:	4a1d      	ldr	r2, [pc, #116]	; (800434c <HAL_InitTick+0xec>)
 80042d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80042da:	4b1c      	ldr	r3, [pc, #112]	; (800434c <HAL_InitTick+0xec>)
 80042dc:	2200      	movs	r2, #0
 80042de:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042e0:	4b1a      	ldr	r3, [pc, #104]	; (800434c <HAL_InitTick+0xec>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042e6:	4b19      	ldr	r3, [pc, #100]	; (800434c <HAL_InitTick+0xec>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80042ec:	4817      	ldr	r0, [pc, #92]	; (800434c <HAL_InitTick+0xec>)
 80042ee:	f002 fd6b 	bl	8006dc8 <HAL_TIM_Base_Init>
 80042f2:	4603      	mov	r3, r0
 80042f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80042f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d11b      	bne.n	8004338 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8004300:	4812      	ldr	r0, [pc, #72]	; (800434c <HAL_InitTick+0xec>)
 8004302:	f002 fdb1 	bl	8006e68 <HAL_TIM_Base_Start_IT>
 8004306:	4603      	mov	r3, r0
 8004308:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800430c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004310:	2b00      	cmp	r3, #0
 8004312:	d111      	bne.n	8004338 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004314:	2036      	movs	r0, #54	; 0x36
 8004316:	f001 faad 	bl	8005874 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b0f      	cmp	r3, #15
 800431e:	d808      	bhi.n	8004332 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8004320:	2200      	movs	r2, #0
 8004322:	6879      	ldr	r1, [r7, #4]
 8004324:	2036      	movs	r0, #54	; 0x36
 8004326:	f001 fa89 	bl	800583c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800432a:	4a0a      	ldr	r2, [pc, #40]	; (8004354 <HAL_InitTick+0xf4>)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6013      	str	r3, [r2, #0]
 8004330:	e002      	b.n	8004338 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004338:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800433c:	4618      	mov	r0, r3
 800433e:	3738      	adds	r7, #56	; 0x38
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	40023800 	.word	0x40023800
 8004348:	431bde83 	.word	0x431bde83
 800434c:	20000fb8 	.word	0x20000fb8
 8004350:	40001000 	.word	0x40001000
 8004354:	2000000c 	.word	0x2000000c

08004358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004358:	b480      	push	{r7}
 800435a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800435c:	e7fe      	b.n	800435c <NMI_Handler+0x4>

0800435e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800435e:	b480      	push	{r7}
 8004360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004362:	e7fe      	b.n	8004362 <HardFault_Handler+0x4>

08004364 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004364:	b480      	push	{r7}
 8004366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004368:	e7fe      	b.n	8004368 <MemManage_Handler+0x4>

0800436a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800436a:	b480      	push	{r7}
 800436c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800436e:	e7fe      	b.n	800436e <BusFault_Handler+0x4>

08004370 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004370:	b480      	push	{r7}
 8004372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004374:	e7fe      	b.n	8004374 <UsageFault_Handler+0x4>

08004376 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004376:	b480      	push	{r7}
 8004378:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800437a:	bf00      	nop
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8004388:	4802      	ldr	r0, [pc, #8]	; (8004394 <DMA1_Stream0_IRQHandler+0x10>)
 800438a:	f001 fc19 	bl	8005bc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800438e:	bf00      	nop
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	20001440 	.word	0x20001440

08004398 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800439c:	4802      	ldr	r0, [pc, #8]	; (80043a8 <DMA1_Stream2_IRQHandler+0x10>)
 800439e:	f001 fc0f 	bl	8005bc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80043a2:	bf00      	nop
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	200013e0 	.word	0x200013e0

080043ac <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80043b0:	4802      	ldr	r0, [pc, #8]	; (80043bc <DMA1_Stream5_IRQHandler+0x10>)
 80043b2:	f001 fc05 	bl	8005bc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80043b6:	bf00      	nop
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	20001500 	.word	0x20001500

080043c0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80043c4:	4802      	ldr	r0, [pc, #8]	; (80043d0 <TIM1_CC_IRQHandler+0x10>)
 80043c6:	f003 f835 	bl	8007434 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80043ca:	bf00      	nop
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	20001004 	.word	0x20001004

080043d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80043d8:	4802      	ldr	r0, [pc, #8]	; (80043e4 <TIM2_IRQHandler+0x10>)
 80043da:	f003 f82b 	bl	8007434 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80043de:	bf00      	nop
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	2000104c 	.word	0x2000104c

080043e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80043ec:	4802      	ldr	r0, [pc, #8]	; (80043f8 <TIM3_IRQHandler+0x10>)
 80043ee:	f003 f821 	bl	8007434 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80043f2:	bf00      	nop
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	20001094 	.word	0x20001094

080043fc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004400:	4802      	ldr	r0, [pc, #8]	; (800440c <TIM4_IRQHandler+0x10>)
 8004402:	f003 f817 	bl	8007434 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004406:	bf00      	nop
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	200010dc 	.word	0x200010dc

08004410 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004414:	4802      	ldr	r0, [pc, #8]	; (8004420 <USART1_IRQHandler+0x10>)
 8004416:	f003 ff59 	bl	80082cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800441a:	bf00      	nop
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	20001314 	.word	0x20001314

08004424 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004428:	4802      	ldr	r0, [pc, #8]	; (8004434 <USART2_IRQHandler+0x10>)
 800442a:	f003 ff4f 	bl	80082cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800442e:	bf00      	nop
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	20001358 	.word	0x20001358

08004438 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800443c:	4802      	ldr	r0, [pc, #8]	; (8004448 <TIM8_CC_IRQHandler+0x10>)
 800443e:	f002 fff9 	bl	8007434 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8004442:	bf00      	nop
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	2000116c 	.word	0x2000116c

0800444c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8004450:	4802      	ldr	r0, [pc, #8]	; (800445c <DMA1_Stream7_IRQHandler+0x10>)
 8004452:	f001 fbb5 	bl	8005bc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8004456:	bf00      	nop
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	200014a0 	.word	0x200014a0

08004460 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004464:	4802      	ldr	r0, [pc, #8]	; (8004470 <UART4_IRQHandler+0x10>)
 8004466:	f003 ff31 	bl	80082cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800446a:	bf00      	nop
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	2000128c 	.word	0x2000128c

08004474 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8004478:	4802      	ldr	r0, [pc, #8]	; (8004484 <UART5_IRQHandler+0x10>)
 800447a:	f003 ff27 	bl	80082cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800447e:	bf00      	nop
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	200012d0 	.word	0x200012d0

08004488 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800448c:	4802      	ldr	r0, [pc, #8]	; (8004498 <TIM6_DAC_IRQHandler+0x10>)
 800448e:	f002 ffd1 	bl	8007434 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004492:	bf00      	nop
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	20000fb8 	.word	0x20000fb8

0800449c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80044a0:	4802      	ldr	r0, [pc, #8]	; (80044ac <TIM7_IRQHandler+0x10>)
 80044a2:	f002 ffc7 	bl	8007434 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80044a6:	bf00      	nop
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	20001124 	.word	0x20001124

080044b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80044b0:	b480      	push	{r7}
 80044b2:	af00      	add	r7, sp, #0
  return 1;
 80044b4:	2301      	movs	r3, #1
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <_kill>:

int _kill(int pid, int sig)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80044ca:	f006 fa73 	bl	800a9b4 <__errno>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2216      	movs	r2, #22
 80044d2:	601a      	str	r2, [r3, #0]
  return -1;
 80044d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3708      	adds	r7, #8
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <_exit>:

void _exit (int status)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80044e8:	f04f 31ff 	mov.w	r1, #4294967295
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f7ff ffe7 	bl	80044c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80044f2:	e7fe      	b.n	80044f2 <_exit+0x12>

080044f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80044fc:	4a14      	ldr	r2, [pc, #80]	; (8004550 <_sbrk+0x5c>)
 80044fe:	4b15      	ldr	r3, [pc, #84]	; (8004554 <_sbrk+0x60>)
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004508:	4b13      	ldr	r3, [pc, #76]	; (8004558 <_sbrk+0x64>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d102      	bne.n	8004516 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004510:	4b11      	ldr	r3, [pc, #68]	; (8004558 <_sbrk+0x64>)
 8004512:	4a12      	ldr	r2, [pc, #72]	; (800455c <_sbrk+0x68>)
 8004514:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004516:	4b10      	ldr	r3, [pc, #64]	; (8004558 <_sbrk+0x64>)
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4413      	add	r3, r2
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	429a      	cmp	r2, r3
 8004522:	d207      	bcs.n	8004534 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004524:	f006 fa46 	bl	800a9b4 <__errno>
 8004528:	4603      	mov	r3, r0
 800452a:	220c      	movs	r2, #12
 800452c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800452e:	f04f 33ff 	mov.w	r3, #4294967295
 8004532:	e009      	b.n	8004548 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004534:	4b08      	ldr	r3, [pc, #32]	; (8004558 <_sbrk+0x64>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800453a:	4b07      	ldr	r3, [pc, #28]	; (8004558 <_sbrk+0x64>)
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4413      	add	r3, r2
 8004542:	4a05      	ldr	r2, [pc, #20]	; (8004558 <_sbrk+0x64>)
 8004544:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004546:	68fb      	ldr	r3, [r7, #12]
}
 8004548:	4618      	mov	r0, r3
 800454a:	3718      	adds	r7, #24
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	20020000 	.word	0x20020000
 8004554:	00000400 	.word	0x00000400
 8004558:	20001000 	.word	0x20001000
 800455c:	200052c8 	.word	0x200052c8

08004560 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004564:	4b06      	ldr	r3, [pc, #24]	; (8004580 <SystemInit+0x20>)
 8004566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800456a:	4a05      	ldr	r2, [pc, #20]	; (8004580 <SystemInit+0x20>)
 800456c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004570:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004574:	bf00      	nop
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	e000ed00 	.word	0xe000ed00

08004584 <MX_TIM1_Init>:
TIM_HandleTypeDef htim12;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b08c      	sub	sp, #48	; 0x30
 8004588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800458a:	f107 030c 	add.w	r3, r7, #12
 800458e:	2224      	movs	r2, #36	; 0x24
 8004590:	2100      	movs	r1, #0
 8004592:	4618      	mov	r0, r3
 8004594:	f006 fa48 	bl	800aa28 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004598:	1d3b      	adds	r3, r7, #4
 800459a:	2200      	movs	r2, #0
 800459c:	601a      	str	r2, [r3, #0]
 800459e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80045a0:	4b22      	ldr	r3, [pc, #136]	; (800462c <MX_TIM1_Init+0xa8>)
 80045a2:	4a23      	ldr	r2, [pc, #140]	; (8004630 <MX_TIM1_Init+0xac>)
 80045a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80045a6:	4b21      	ldr	r3, [pc, #132]	; (800462c <MX_TIM1_Init+0xa8>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045ac:	4b1f      	ldr	r3, [pc, #124]	; (800462c <MX_TIM1_Init+0xa8>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80045b2:	4b1e      	ldr	r3, [pc, #120]	; (800462c <MX_TIM1_Init+0xa8>)
 80045b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045ba:	4b1c      	ldr	r3, [pc, #112]	; (800462c <MX_TIM1_Init+0xa8>)
 80045bc:	2200      	movs	r2, #0
 80045be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80045c0:	4b1a      	ldr	r3, [pc, #104]	; (800462c <MX_TIM1_Init+0xa8>)
 80045c2:	2200      	movs	r2, #0
 80045c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045c6:	4b19      	ldr	r3, [pc, #100]	; (800462c <MX_TIM1_Init+0xa8>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80045cc:	2301      	movs	r3, #1
 80045ce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80045d0:	2300      	movs	r3, #0
 80045d2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80045d4:	2301      	movs	r3, #1
 80045d6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80045d8:	2300      	movs	r3, #0
 80045da:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80045dc:	2300      	movs	r3, #0
 80045de:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80045e0:	2300      	movs	r3, #0
 80045e2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80045e4:	2301      	movs	r3, #1
 80045e6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80045e8:	2300      	movs	r3, #0
 80045ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80045ec:	2300      	movs	r3, #0
 80045ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80045f0:	f107 030c 	add.w	r3, r7, #12
 80045f4:	4619      	mov	r1, r3
 80045f6:	480d      	ldr	r0, [pc, #52]	; (800462c <MX_TIM1_Init+0xa8>)
 80045f8:	f002 fdc8 	bl	800718c <HAL_TIM_Encoder_Init>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d001      	beq.n	8004606 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8004602:	f7fd fb5f 	bl	8001cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004606:	2300      	movs	r3, #0
 8004608:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800460a:	2300      	movs	r3, #0
 800460c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800460e:	1d3b      	adds	r3, r7, #4
 8004610:	4619      	mov	r1, r3
 8004612:	4806      	ldr	r0, [pc, #24]	; (800462c <MX_TIM1_Init+0xa8>)
 8004614:	f003 fcce 	bl	8007fb4 <HAL_TIMEx_MasterConfigSynchronization>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800461e:	f7fd fb51 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004622:	bf00      	nop
 8004624:	3730      	adds	r7, #48	; 0x30
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	20001004 	.word	0x20001004
 8004630:	40010000 	.word	0x40010000

08004634 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b08c      	sub	sp, #48	; 0x30
 8004638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800463a:	f107 030c 	add.w	r3, r7, #12
 800463e:	2224      	movs	r2, #36	; 0x24
 8004640:	2100      	movs	r1, #0
 8004642:	4618      	mov	r0, r3
 8004644:	f006 f9f0 	bl	800aa28 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004648:	1d3b      	adds	r3, r7, #4
 800464a:	2200      	movs	r2, #0
 800464c:	601a      	str	r2, [r3, #0]
 800464e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004650:	4b21      	ldr	r3, [pc, #132]	; (80046d8 <MX_TIM2_Init+0xa4>)
 8004652:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004656:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004658:	4b1f      	ldr	r3, [pc, #124]	; (80046d8 <MX_TIM2_Init+0xa4>)
 800465a:	2200      	movs	r2, #0
 800465c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800465e:	4b1e      	ldr	r3, [pc, #120]	; (80046d8 <MX_TIM2_Init+0xa4>)
 8004660:	2200      	movs	r2, #0
 8004662:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8004664:	4b1c      	ldr	r3, [pc, #112]	; (80046d8 <MX_TIM2_Init+0xa4>)
 8004666:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800466a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800466c:	4b1a      	ldr	r3, [pc, #104]	; (80046d8 <MX_TIM2_Init+0xa4>)
 800466e:	2200      	movs	r2, #0
 8004670:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004672:	4b19      	ldr	r3, [pc, #100]	; (80046d8 <MX_TIM2_Init+0xa4>)
 8004674:	2200      	movs	r2, #0
 8004676:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004678:	2301      	movs	r3, #1
 800467a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800467c:	2300      	movs	r3, #0
 800467e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004680:	2301      	movs	r3, #1
 8004682:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004684:	2300      	movs	r3, #0
 8004686:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004688:	2300      	movs	r3, #0
 800468a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800468c:	2300      	movs	r3, #0
 800468e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004690:	2301      	movs	r3, #1
 8004692:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004694:	2300      	movs	r3, #0
 8004696:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004698:	2300      	movs	r3, #0
 800469a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800469c:	f107 030c 	add.w	r3, r7, #12
 80046a0:	4619      	mov	r1, r3
 80046a2:	480d      	ldr	r0, [pc, #52]	; (80046d8 <MX_TIM2_Init+0xa4>)
 80046a4:	f002 fd72 	bl	800718c <HAL_TIM_Encoder_Init>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d001      	beq.n	80046b2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80046ae:	f7fd fb09 	bl	8001cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046b2:	2300      	movs	r3, #0
 80046b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046b6:	2300      	movs	r3, #0
 80046b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80046ba:	1d3b      	adds	r3, r7, #4
 80046bc:	4619      	mov	r1, r3
 80046be:	4806      	ldr	r0, [pc, #24]	; (80046d8 <MX_TIM2_Init+0xa4>)
 80046c0:	f003 fc78 	bl	8007fb4 <HAL_TIMEx_MasterConfigSynchronization>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80046ca:	f7fd fafb 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80046ce:	bf00      	nop
 80046d0:	3730      	adds	r7, #48	; 0x30
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	2000104c 	.word	0x2000104c

080046dc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b08c      	sub	sp, #48	; 0x30
 80046e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80046e2:	f107 030c 	add.w	r3, r7, #12
 80046e6:	2224      	movs	r2, #36	; 0x24
 80046e8:	2100      	movs	r1, #0
 80046ea:	4618      	mov	r0, r3
 80046ec:	f006 f99c 	bl	800aa28 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046f0:	1d3b      	adds	r3, r7, #4
 80046f2:	2200      	movs	r2, #0
 80046f4:	601a      	str	r2, [r3, #0]
 80046f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80046f8:	4b20      	ldr	r3, [pc, #128]	; (800477c <MX_TIM3_Init+0xa0>)
 80046fa:	4a21      	ldr	r2, [pc, #132]	; (8004780 <MX_TIM3_Init+0xa4>)
 80046fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80046fe:	4b1f      	ldr	r3, [pc, #124]	; (800477c <MX_TIM3_Init+0xa0>)
 8004700:	2200      	movs	r2, #0
 8004702:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004704:	4b1d      	ldr	r3, [pc, #116]	; (800477c <MX_TIM3_Init+0xa0>)
 8004706:	2200      	movs	r2, #0
 8004708:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800470a:	4b1c      	ldr	r3, [pc, #112]	; (800477c <MX_TIM3_Init+0xa0>)
 800470c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004710:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004712:	4b1a      	ldr	r3, [pc, #104]	; (800477c <MX_TIM3_Init+0xa0>)
 8004714:	2200      	movs	r2, #0
 8004716:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004718:	4b18      	ldr	r3, [pc, #96]	; (800477c <MX_TIM3_Init+0xa0>)
 800471a:	2200      	movs	r2, #0
 800471c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800471e:	2301      	movs	r3, #1
 8004720:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004722:	2300      	movs	r3, #0
 8004724:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004726:	2301      	movs	r3, #1
 8004728:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800472a:	2300      	movs	r3, #0
 800472c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800472e:	2300      	movs	r3, #0
 8004730:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004732:	2300      	movs	r3, #0
 8004734:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004736:	2301      	movs	r3, #1
 8004738:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800473a:	2300      	movs	r3, #0
 800473c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800473e:	2300      	movs	r3, #0
 8004740:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8004742:	f107 030c 	add.w	r3, r7, #12
 8004746:	4619      	mov	r1, r3
 8004748:	480c      	ldr	r0, [pc, #48]	; (800477c <MX_TIM3_Init+0xa0>)
 800474a:	f002 fd1f 	bl	800718c <HAL_TIM_Encoder_Init>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d001      	beq.n	8004758 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8004754:	f7fd fab6 	bl	8001cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004758:	2300      	movs	r3, #0
 800475a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800475c:	2300      	movs	r3, #0
 800475e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004760:	1d3b      	adds	r3, r7, #4
 8004762:	4619      	mov	r1, r3
 8004764:	4805      	ldr	r0, [pc, #20]	; (800477c <MX_TIM3_Init+0xa0>)
 8004766:	f003 fc25 	bl	8007fb4 <HAL_TIMEx_MasterConfigSynchronization>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d001      	beq.n	8004774 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8004770:	f7fd faa8 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004774:	bf00      	nop
 8004776:	3730      	adds	r7, #48	; 0x30
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	20001094 	.word	0x20001094
 8004780:	40000400 	.word	0x40000400

08004784 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b08c      	sub	sp, #48	; 0x30
 8004788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800478a:	f107 030c 	add.w	r3, r7, #12
 800478e:	2224      	movs	r2, #36	; 0x24
 8004790:	2100      	movs	r1, #0
 8004792:	4618      	mov	r0, r3
 8004794:	f006 f948 	bl	800aa28 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004798:	1d3b      	adds	r3, r7, #4
 800479a:	2200      	movs	r2, #0
 800479c:	601a      	str	r2, [r3, #0]
 800479e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80047a0:	4b20      	ldr	r3, [pc, #128]	; (8004824 <MX_TIM4_Init+0xa0>)
 80047a2:	4a21      	ldr	r2, [pc, #132]	; (8004828 <MX_TIM4_Init+0xa4>)
 80047a4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80047a6:	4b1f      	ldr	r3, [pc, #124]	; (8004824 <MX_TIM4_Init+0xa0>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047ac:	4b1d      	ldr	r3, [pc, #116]	; (8004824 <MX_TIM4_Init+0xa0>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80047b2:	4b1c      	ldr	r3, [pc, #112]	; (8004824 <MX_TIM4_Init+0xa0>)
 80047b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047b8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047ba:	4b1a      	ldr	r3, [pc, #104]	; (8004824 <MX_TIM4_Init+0xa0>)
 80047bc:	2200      	movs	r2, #0
 80047be:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047c0:	4b18      	ldr	r3, [pc, #96]	; (8004824 <MX_TIM4_Init+0xa0>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80047c6:	2301      	movs	r3, #1
 80047c8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80047ca:	2300      	movs	r3, #0
 80047cc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80047ce:	2301      	movs	r3, #1
 80047d0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80047d2:	2300      	movs	r3, #0
 80047d4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80047d6:	2300      	movs	r3, #0
 80047d8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80047da:	2300      	movs	r3, #0
 80047dc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80047de:	2301      	movs	r3, #1
 80047e0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80047e2:	2300      	movs	r3, #0
 80047e4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80047e6:	2300      	movs	r3, #0
 80047e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80047ea:	f107 030c 	add.w	r3, r7, #12
 80047ee:	4619      	mov	r1, r3
 80047f0:	480c      	ldr	r0, [pc, #48]	; (8004824 <MX_TIM4_Init+0xa0>)
 80047f2:	f002 fccb 	bl	800718c <HAL_TIM_Encoder_Init>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d001      	beq.n	8004800 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80047fc:	f7fd fa62 	bl	8001cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004800:	2300      	movs	r3, #0
 8004802:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004804:	2300      	movs	r3, #0
 8004806:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004808:	1d3b      	adds	r3, r7, #4
 800480a:	4619      	mov	r1, r3
 800480c:	4805      	ldr	r0, [pc, #20]	; (8004824 <MX_TIM4_Init+0xa0>)
 800480e:	f003 fbd1 	bl	8007fb4 <HAL_TIMEx_MasterConfigSynchronization>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d001      	beq.n	800481c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8004818:	f7fd fa54 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800481c:	bf00      	nop
 800481e:	3730      	adds	r7, #48	; 0x30
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	200010dc 	.word	0x200010dc
 8004828:	40000800 	.word	0x40000800

0800482c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004832:	463b      	mov	r3, r7
 8004834:	2200      	movs	r2, #0
 8004836:	601a      	str	r2, [r3, #0]
 8004838:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800483a:	4b15      	ldr	r3, [pc, #84]	; (8004890 <MX_TIM7_Init+0x64>)
 800483c:	4a15      	ldr	r2, [pc, #84]	; (8004894 <MX_TIM7_Init+0x68>)
 800483e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 4000-1;
 8004840:	4b13      	ldr	r3, [pc, #76]	; (8004890 <MX_TIM7_Init+0x64>)
 8004842:	f640 729f 	movw	r2, #3999	; 0xf9f
 8004846:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004848:	4b11      	ldr	r3, [pc, #68]	; (8004890 <MX_TIM7_Init+0x64>)
 800484a:	2200      	movs	r2, #0
 800484c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 200-1;
 800484e:	4b10      	ldr	r3, [pc, #64]	; (8004890 <MX_TIM7_Init+0x64>)
 8004850:	22c7      	movs	r2, #199	; 0xc7
 8004852:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004854:	4b0e      	ldr	r3, [pc, #56]	; (8004890 <MX_TIM7_Init+0x64>)
 8004856:	2200      	movs	r2, #0
 8004858:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800485a:	480d      	ldr	r0, [pc, #52]	; (8004890 <MX_TIM7_Init+0x64>)
 800485c:	f002 fab4 	bl	8006dc8 <HAL_TIM_Base_Init>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d001      	beq.n	800486a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8004866:	f7fd fa2d 	bl	8001cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800486a:	2300      	movs	r3, #0
 800486c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800486e:	2300      	movs	r3, #0
 8004870:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004872:	463b      	mov	r3, r7
 8004874:	4619      	mov	r1, r3
 8004876:	4806      	ldr	r0, [pc, #24]	; (8004890 <MX_TIM7_Init+0x64>)
 8004878:	f003 fb9c 	bl	8007fb4 <HAL_TIMEx_MasterConfigSynchronization>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d001      	beq.n	8004886 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8004882:	f7fd fa1f 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004886:	bf00      	nop
 8004888:	3708      	adds	r7, #8
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	20001124 	.word	0x20001124
 8004894:	40001400 	.word	0x40001400

08004898 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b08c      	sub	sp, #48	; 0x30
 800489c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800489e:	f107 030c 	add.w	r3, r7, #12
 80048a2:	2224      	movs	r2, #36	; 0x24
 80048a4:	2100      	movs	r1, #0
 80048a6:	4618      	mov	r0, r3
 80048a8:	f006 f8be 	bl	800aa28 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048ac:	1d3b      	adds	r3, r7, #4
 80048ae:	2200      	movs	r2, #0
 80048b0:	601a      	str	r2, [r3, #0]
 80048b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80048b4:	4b22      	ldr	r3, [pc, #136]	; (8004940 <MX_TIM8_Init+0xa8>)
 80048b6:	4a23      	ldr	r2, [pc, #140]	; (8004944 <MX_TIM8_Init+0xac>)
 80048b8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80048ba:	4b21      	ldr	r3, [pc, #132]	; (8004940 <MX_TIM8_Init+0xa8>)
 80048bc:	2200      	movs	r2, #0
 80048be:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048c0:	4b1f      	ldr	r3, [pc, #124]	; (8004940 <MX_TIM8_Init+0xa8>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80048c6:	4b1e      	ldr	r3, [pc, #120]	; (8004940 <MX_TIM8_Init+0xa8>)
 80048c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048cc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048ce:	4b1c      	ldr	r3, [pc, #112]	; (8004940 <MX_TIM8_Init+0xa8>)
 80048d0:	2200      	movs	r2, #0
 80048d2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80048d4:	4b1a      	ldr	r3, [pc, #104]	; (8004940 <MX_TIM8_Init+0xa8>)
 80048d6:	2200      	movs	r2, #0
 80048d8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80048da:	4b19      	ldr	r3, [pc, #100]	; (8004940 <MX_TIM8_Init+0xa8>)
 80048dc:	2200      	movs	r2, #0
 80048de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80048e0:	2301      	movs	r3, #1
 80048e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80048e4:	2300      	movs	r3, #0
 80048e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80048e8:	2301      	movs	r3, #1
 80048ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80048ec:	2300      	movs	r3, #0
 80048ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80048f0:	2300      	movs	r3, #0
 80048f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80048f4:	2300      	movs	r3, #0
 80048f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80048f8:	2301      	movs	r3, #1
 80048fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80048fc:	2300      	movs	r3, #0
 80048fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004900:	2300      	movs	r3, #0
 8004902:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8004904:	f107 030c 	add.w	r3, r7, #12
 8004908:	4619      	mov	r1, r3
 800490a:	480d      	ldr	r0, [pc, #52]	; (8004940 <MX_TIM8_Init+0xa8>)
 800490c:	f002 fc3e 	bl	800718c <HAL_TIM_Encoder_Init>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8004916:	f7fd f9d5 	bl	8001cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800491a:	2300      	movs	r3, #0
 800491c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800491e:	2300      	movs	r3, #0
 8004920:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004922:	1d3b      	adds	r3, r7, #4
 8004924:	4619      	mov	r1, r3
 8004926:	4806      	ldr	r0, [pc, #24]	; (8004940 <MX_TIM8_Init+0xa8>)
 8004928:	f003 fb44 	bl	8007fb4 <HAL_TIMEx_MasterConfigSynchronization>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8004932:	f7fd f9c7 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8004936:	bf00      	nop
 8004938:	3730      	adds	r7, #48	; 0x30
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	2000116c 	.word	0x2000116c
 8004944:	40010400 	.word	0x40010400

08004948 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b08c      	sub	sp, #48	; 0x30
 800494c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800494e:	f107 0320 	add.w	r3, r7, #32
 8004952:	2200      	movs	r2, #0
 8004954:	601a      	str	r2, [r3, #0]
 8004956:	605a      	str	r2, [r3, #4]
 8004958:	609a      	str	r2, [r3, #8]
 800495a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800495c:	1d3b      	adds	r3, r7, #4
 800495e:	2200      	movs	r2, #0
 8004960:	601a      	str	r2, [r3, #0]
 8004962:	605a      	str	r2, [r3, #4]
 8004964:	609a      	str	r2, [r3, #8]
 8004966:	60da      	str	r2, [r3, #12]
 8004968:	611a      	str	r2, [r3, #16]
 800496a:	615a      	str	r2, [r3, #20]
 800496c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800496e:	4b2a      	ldr	r3, [pc, #168]	; (8004a18 <MX_TIM9_Init+0xd0>)
 8004970:	4a2a      	ldr	r2, [pc, #168]	; (8004a1c <MX_TIM9_Init+0xd4>)
 8004972:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 84-1;
 8004974:	4b28      	ldr	r3, [pc, #160]	; (8004a18 <MX_TIM9_Init+0xd0>)
 8004976:	2253      	movs	r2, #83	; 0x53
 8004978:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800497a:	4b27      	ldr	r3, [pc, #156]	; (8004a18 <MX_TIM9_Init+0xd0>)
 800497c:	2200      	movs	r2, #0
 800497e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 200-1;
 8004980:	4b25      	ldr	r3, [pc, #148]	; (8004a18 <MX_TIM9_Init+0xd0>)
 8004982:	22c7      	movs	r2, #199	; 0xc7
 8004984:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004986:	4b24      	ldr	r3, [pc, #144]	; (8004a18 <MX_TIM9_Init+0xd0>)
 8004988:	2200      	movs	r2, #0
 800498a:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800498c:	4b22      	ldr	r3, [pc, #136]	; (8004a18 <MX_TIM9_Init+0xd0>)
 800498e:	2200      	movs	r2, #0
 8004990:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8004992:	4821      	ldr	r0, [pc, #132]	; (8004a18 <MX_TIM9_Init+0xd0>)
 8004994:	f002 fa18 	bl	8006dc8 <HAL_TIM_Base_Init>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <MX_TIM9_Init+0x5a>
  {
    Error_Handler();
 800499e:	f7fd f991 	bl	8001cc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80049a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049a6:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80049a8:	f107 0320 	add.w	r3, r7, #32
 80049ac:	4619      	mov	r1, r3
 80049ae:	481a      	ldr	r0, [pc, #104]	; (8004a18 <MX_TIM9_Init+0xd0>)
 80049b0:	f002 ff0a 	bl	80077c8 <HAL_TIM_ConfigClockSource>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d001      	beq.n	80049be <MX_TIM9_Init+0x76>
  {
    Error_Handler();
 80049ba:	f7fd f983 	bl	8001cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80049be:	4816      	ldr	r0, [pc, #88]	; (8004a18 <MX_TIM9_Init+0xd0>)
 80049c0:	f002 fac2 	bl	8006f48 <HAL_TIM_PWM_Init>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d001      	beq.n	80049ce <MX_TIM9_Init+0x86>
  {
    Error_Handler();
 80049ca:	f7fd f97b 	bl	8001cc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80049ce:	2360      	movs	r3, #96	; 0x60
 80049d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80049d2:	2300      	movs	r3, #0
 80049d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80049d6:	2300      	movs	r3, #0
 80049d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80049da:	2300      	movs	r3, #0
 80049dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80049de:	1d3b      	adds	r3, r7, #4
 80049e0:	2200      	movs	r2, #0
 80049e2:	4619      	mov	r1, r3
 80049e4:	480c      	ldr	r0, [pc, #48]	; (8004a18 <MX_TIM9_Init+0xd0>)
 80049e6:	f002 fe2d 	bl	8007644 <HAL_TIM_PWM_ConfigChannel>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d001      	beq.n	80049f4 <MX_TIM9_Init+0xac>
  {
    Error_Handler();
 80049f0:	f7fd f968 	bl	8001cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80049f4:	1d3b      	adds	r3, r7, #4
 80049f6:	2204      	movs	r2, #4
 80049f8:	4619      	mov	r1, r3
 80049fa:	4807      	ldr	r0, [pc, #28]	; (8004a18 <MX_TIM9_Init+0xd0>)
 80049fc:	f002 fe22 	bl	8007644 <HAL_TIM_PWM_ConfigChannel>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <MX_TIM9_Init+0xc2>
  {
    Error_Handler();
 8004a06:	f7fd f95d 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8004a0a:	4803      	ldr	r0, [pc, #12]	; (8004a18 <MX_TIM9_Init+0xd0>)
 8004a0c:	f000 fa66 	bl	8004edc <HAL_TIM_MspPostInit>

}
 8004a10:	bf00      	nop
 8004a12:	3730      	adds	r7, #48	; 0x30
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	200011b4 	.word	0x200011b4
 8004a1c:	40014000 	.word	0x40014000

08004a20 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b08c      	sub	sp, #48	; 0x30
 8004a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004a26:	f107 0320 	add.w	r3, r7, #32
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	601a      	str	r2, [r3, #0]
 8004a2e:	605a      	str	r2, [r3, #4]
 8004a30:	609a      	str	r2, [r3, #8]
 8004a32:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004a34:	1d3b      	adds	r3, r7, #4
 8004a36:	2200      	movs	r2, #0
 8004a38:	601a      	str	r2, [r3, #0]
 8004a3a:	605a      	str	r2, [r3, #4]
 8004a3c:	609a      	str	r2, [r3, #8]
 8004a3e:	60da      	str	r2, [r3, #12]
 8004a40:	611a      	str	r2, [r3, #16]
 8004a42:	615a      	str	r2, [r3, #20]
 8004a44:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8004a46:	4b2a      	ldr	r3, [pc, #168]	; (8004af0 <MX_TIM12_Init+0xd0>)
 8004a48:	4a2a      	ldr	r2, [pc, #168]	; (8004af4 <MX_TIM12_Init+0xd4>)
 8004a4a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 168-1;
 8004a4c:	4b28      	ldr	r3, [pc, #160]	; (8004af0 <MX_TIM12_Init+0xd0>)
 8004a4e:	22a7      	movs	r2, #167	; 0xa7
 8004a50:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a52:	4b27      	ldr	r3, [pc, #156]	; (8004af0 <MX_TIM12_Init+0xd0>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 200-1;
 8004a58:	4b25      	ldr	r3, [pc, #148]	; (8004af0 <MX_TIM12_Init+0xd0>)
 8004a5a:	22c7      	movs	r2, #199	; 0xc7
 8004a5c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a5e:	4b24      	ldr	r3, [pc, #144]	; (8004af0 <MX_TIM12_Init+0xd0>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a64:	4b22      	ldr	r3, [pc, #136]	; (8004af0 <MX_TIM12_Init+0xd0>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8004a6a:	4821      	ldr	r0, [pc, #132]	; (8004af0 <MX_TIM12_Init+0xd0>)
 8004a6c:	f002 f9ac 	bl	8006dc8 <HAL_TIM_Base_Init>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d001      	beq.n	8004a7a <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 8004a76:	f7fd f925 	bl	8001cc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004a7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a7e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8004a80:	f107 0320 	add.w	r3, r7, #32
 8004a84:	4619      	mov	r1, r3
 8004a86:	481a      	ldr	r0, [pc, #104]	; (8004af0 <MX_TIM12_Init+0xd0>)
 8004a88:	f002 fe9e 	bl	80077c8 <HAL_TIM_ConfigClockSource>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <MX_TIM12_Init+0x76>
  {
    Error_Handler();
 8004a92:	f7fd f917 	bl	8001cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8004a96:	4816      	ldr	r0, [pc, #88]	; (8004af0 <MX_TIM12_Init+0xd0>)
 8004a98:	f002 fa56 	bl	8006f48 <HAL_TIM_PWM_Init>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <MX_TIM12_Init+0x86>
  {
    Error_Handler();
 8004aa2:	f7fd f90f 	bl	8001cc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004aa6:	2360      	movs	r3, #96	; 0x60
 8004aa8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004ab6:	1d3b      	adds	r3, r7, #4
 8004ab8:	2200      	movs	r2, #0
 8004aba:	4619      	mov	r1, r3
 8004abc:	480c      	ldr	r0, [pc, #48]	; (8004af0 <MX_TIM12_Init+0xd0>)
 8004abe:	f002 fdc1 	bl	8007644 <HAL_TIM_PWM_ConfigChannel>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d001      	beq.n	8004acc <MX_TIM12_Init+0xac>
  {
    Error_Handler();
 8004ac8:	f7fd f8fc 	bl	8001cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004acc:	1d3b      	adds	r3, r7, #4
 8004ace:	2204      	movs	r2, #4
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	4807      	ldr	r0, [pc, #28]	; (8004af0 <MX_TIM12_Init+0xd0>)
 8004ad4:	f002 fdb6 	bl	8007644 <HAL_TIM_PWM_ConfigChannel>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <MX_TIM12_Init+0xc2>
  {
    Error_Handler();
 8004ade:	f7fd f8f1 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8004ae2:	4803      	ldr	r0, [pc, #12]	; (8004af0 <MX_TIM12_Init+0xd0>)
 8004ae4:	f000 f9fa 	bl	8004edc <HAL_TIM_MspPostInit>

}
 8004ae8:	bf00      	nop
 8004aea:	3730      	adds	r7, #48	; 0x30
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	200011fc 	.word	0x200011fc
 8004af4:	40001800 	.word	0x40001800

08004af8 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004afc:	4b0d      	ldr	r3, [pc, #52]	; (8004b34 <MX_TIM13_Init+0x3c>)
 8004afe:	4a0e      	ldr	r2, [pc, #56]	; (8004b38 <MX_TIM13_Init+0x40>)
 8004b00:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 168-1;
 8004b02:	4b0c      	ldr	r3, [pc, #48]	; (8004b34 <MX_TIM13_Init+0x3c>)
 8004b04:	22a7      	movs	r2, #167	; 0xa7
 8004b06:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b08:	4b0a      	ldr	r3, [pc, #40]	; (8004b34 <MX_TIM13_Init+0x3c>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 200-1;
 8004b0e:	4b09      	ldr	r3, [pc, #36]	; (8004b34 <MX_TIM13_Init+0x3c>)
 8004b10:	22c7      	movs	r2, #199	; 0xc7
 8004b12:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b14:	4b07      	ldr	r3, [pc, #28]	; (8004b34 <MX_TIM13_Init+0x3c>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b1a:	4b06      	ldr	r3, [pc, #24]	; (8004b34 <MX_TIM13_Init+0x3c>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004b20:	4804      	ldr	r0, [pc, #16]	; (8004b34 <MX_TIM13_Init+0x3c>)
 8004b22:	f002 f951 	bl	8006dc8 <HAL_TIM_Base_Init>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d001      	beq.n	8004b30 <MX_TIM13_Init+0x38>
  {
    Error_Handler();
 8004b2c:	f7fd f8ca 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8004b30:	bf00      	nop
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	20001244 	.word	0x20001244
 8004b38:	40001c00 	.word	0x40001c00

08004b3c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b092      	sub	sp, #72	; 0x48
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b44:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004b48:	2200      	movs	r2, #0
 8004b4a:	601a      	str	r2, [r3, #0]
 8004b4c:	605a      	str	r2, [r3, #4]
 8004b4e:	609a      	str	r2, [r3, #8]
 8004b50:	60da      	str	r2, [r3, #12]
 8004b52:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4aa1      	ldr	r2, [pc, #644]	; (8004de0 <HAL_TIM_Encoder_MspInit+0x2a4>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d135      	bne.n	8004bca <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004b5e:	2300      	movs	r3, #0
 8004b60:	633b      	str	r3, [r7, #48]	; 0x30
 8004b62:	4ba0      	ldr	r3, [pc, #640]	; (8004de4 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8004b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b66:	4a9f      	ldr	r2, [pc, #636]	; (8004de4 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8004b68:	f043 0301 	orr.w	r3, r3, #1
 8004b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8004b6e:	4b9d      	ldr	r3, [pc, #628]	; (8004de4 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8004b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	633b      	str	r3, [r7, #48]	; 0x30
 8004b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b7e:	4b99      	ldr	r3, [pc, #612]	; (8004de4 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8004b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b82:	4a98      	ldr	r2, [pc, #608]	; (8004de4 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8004b84:	f043 0310 	orr.w	r3, r3, #16
 8004b88:	6313      	str	r3, [r2, #48]	; 0x30
 8004b8a:	4b96      	ldr	r3, [pc, #600]	; (8004de4 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8004b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8e:	f003 0310 	and.w	r3, r3, #16
 8004b92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8004b96:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8004b9a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004bac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	488d      	ldr	r0, [pc, #564]	; (8004de8 <HAL_TIM_Encoder_MspInit+0x2ac>)
 8004bb4:	f001 fa6e 	bl	8006094 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8004bb8:	2200      	movs	r2, #0
 8004bba:	2105      	movs	r1, #5
 8004bbc:	201b      	movs	r0, #27
 8004bbe:	f000 fe3d 	bl	800583c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004bc2:	201b      	movs	r0, #27
 8004bc4:	f000 fe56 	bl	8005874 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8004bc8:	e106      	b.n	8004dd8 <HAL_TIM_Encoder_MspInit+0x29c>
  else if(tim_encoderHandle->Instance==TIM2)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bd2:	d153      	bne.n	8004c7c <HAL_TIM_Encoder_MspInit+0x140>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bd8:	4b82      	ldr	r3, [pc, #520]	; (8004de4 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8004bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bdc:	4a81      	ldr	r2, [pc, #516]	; (8004de4 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8004bde:	f043 0301 	orr.w	r3, r3, #1
 8004be2:	6413      	str	r3, [r2, #64]	; 0x40
 8004be4:	4b7f      	ldr	r3, [pc, #508]	; (8004de4 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8004be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8004bf4:	4b7b      	ldr	r3, [pc, #492]	; (8004de4 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8004bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf8:	4a7a      	ldr	r2, [pc, #488]	; (8004de4 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8004bfa:	f043 0301 	orr.w	r3, r3, #1
 8004bfe:	6313      	str	r3, [r2, #48]	; 0x30
 8004c00:	4b78      	ldr	r3, [pc, #480]	; (8004de4 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8004c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	627b      	str	r3, [r7, #36]	; 0x24
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	623b      	str	r3, [r7, #32]
 8004c10:	4b74      	ldr	r3, [pc, #464]	; (8004de4 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8004c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c14:	4a73      	ldr	r2, [pc, #460]	; (8004de4 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8004c16:	f043 0302 	orr.w	r3, r3, #2
 8004c1a:	6313      	str	r3, [r2, #48]	; 0x30
 8004c1c:	4b71      	ldr	r3, [pc, #452]	; (8004de4 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8004c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	623b      	str	r3, [r7, #32]
 8004c26:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004c28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c2c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c2e:	2302      	movs	r3, #2
 8004c30:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c32:	2300      	movs	r3, #0
 8004c34:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c36:	2300      	movs	r3, #0
 8004c38:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c3e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004c42:	4619      	mov	r1, r3
 8004c44:	4869      	ldr	r0, [pc, #420]	; (8004dec <HAL_TIM_Encoder_MspInit+0x2b0>)
 8004c46:	f001 fa25 	bl	8006094 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004c4a:	2308      	movs	r3, #8
 8004c4c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c4e:	2302      	movs	r3, #2
 8004c50:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c52:	2300      	movs	r3, #0
 8004c54:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c56:	2300      	movs	r3, #0
 8004c58:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c5e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004c62:	4619      	mov	r1, r3
 8004c64:	4862      	ldr	r0, [pc, #392]	; (8004df0 <HAL_TIM_Encoder_MspInit+0x2b4>)
 8004c66:	f001 fa15 	bl	8006094 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	2105      	movs	r1, #5
 8004c6e:	201c      	movs	r0, #28
 8004c70:	f000 fde4 	bl	800583c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004c74:	201c      	movs	r0, #28
 8004c76:	f000 fdfd 	bl	8005874 <HAL_NVIC_EnableIRQ>
}
 8004c7a:	e0ad      	b.n	8004dd8 <HAL_TIM_Encoder_MspInit+0x29c>
  else if(tim_encoderHandle->Instance==TIM3)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a5c      	ldr	r2, [pc, #368]	; (8004df4 <HAL_TIM_Encoder_MspInit+0x2b8>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d134      	bne.n	8004cf0 <HAL_TIM_Encoder_MspInit+0x1b4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004c86:	2300      	movs	r3, #0
 8004c88:	61fb      	str	r3, [r7, #28]
 8004c8a:	4b56      	ldr	r3, [pc, #344]	; (8004de4 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8e:	4a55      	ldr	r2, [pc, #340]	; (8004de4 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8004c90:	f043 0302 	orr.w	r3, r3, #2
 8004c94:	6413      	str	r3, [r2, #64]	; 0x40
 8004c96:	4b53      	ldr	r3, [pc, #332]	; (8004de4 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	f003 0302 	and.w	r3, r3, #2
 8004c9e:	61fb      	str	r3, [r7, #28]
 8004ca0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	61bb      	str	r3, [r7, #24]
 8004ca6:	4b4f      	ldr	r3, [pc, #316]	; (8004de4 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8004ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004caa:	4a4e      	ldr	r2, [pc, #312]	; (8004de4 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8004cac:	f043 0301 	orr.w	r3, r3, #1
 8004cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8004cb2:	4b4c      	ldr	r3, [pc, #304]	; (8004de4 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8004cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	61bb      	str	r3, [r7, #24]
 8004cbc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004cbe:	23c0      	movs	r3, #192	; 0xc0
 8004cc0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004cce:	2302      	movs	r3, #2
 8004cd0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cd2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	4844      	ldr	r0, [pc, #272]	; (8004dec <HAL_TIM_Encoder_MspInit+0x2b0>)
 8004cda:	f001 f9db 	bl	8006094 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004cde:	2200      	movs	r2, #0
 8004ce0:	2105      	movs	r1, #5
 8004ce2:	201d      	movs	r0, #29
 8004ce4:	f000 fdaa 	bl	800583c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004ce8:	201d      	movs	r0, #29
 8004cea:	f000 fdc3 	bl	8005874 <HAL_NVIC_EnableIRQ>
}
 8004cee:	e073      	b.n	8004dd8 <HAL_TIM_Encoder_MspInit+0x29c>
  else if(tim_encoderHandle->Instance==TIM4)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a40      	ldr	r2, [pc, #256]	; (8004df8 <HAL_TIM_Encoder_MspInit+0x2bc>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d135      	bne.n	8004d66 <HAL_TIM_Encoder_MspInit+0x22a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	617b      	str	r3, [r7, #20]
 8004cfe:	4b39      	ldr	r3, [pc, #228]	; (8004de4 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8004d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d02:	4a38      	ldr	r2, [pc, #224]	; (8004de4 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8004d04:	f043 0304 	orr.w	r3, r3, #4
 8004d08:	6413      	str	r3, [r2, #64]	; 0x40
 8004d0a:	4b36      	ldr	r3, [pc, #216]	; (8004de4 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0e:	f003 0304 	and.w	r3, r3, #4
 8004d12:	617b      	str	r3, [r7, #20]
 8004d14:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004d16:	2300      	movs	r3, #0
 8004d18:	613b      	str	r3, [r7, #16]
 8004d1a:	4b32      	ldr	r3, [pc, #200]	; (8004de4 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8004d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1e:	4a31      	ldr	r2, [pc, #196]	; (8004de4 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8004d20:	f043 0308 	orr.w	r3, r3, #8
 8004d24:	6313      	str	r3, [r2, #48]	; 0x30
 8004d26:	4b2f      	ldr	r3, [pc, #188]	; (8004de4 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8004d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2a:	f003 0308 	and.w	r3, r3, #8
 8004d2e:	613b      	str	r3, [r7, #16]
 8004d30:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004d32:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004d36:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d38:	2302      	movs	r3, #2
 8004d3a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d40:	2300      	movs	r3, #0
 8004d42:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004d44:	2302      	movs	r3, #2
 8004d46:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004d48:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	482b      	ldr	r0, [pc, #172]	; (8004dfc <HAL_TIM_Encoder_MspInit+0x2c0>)
 8004d50:	f001 f9a0 	bl	8006094 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8004d54:	2200      	movs	r2, #0
 8004d56:	2105      	movs	r1, #5
 8004d58:	201e      	movs	r0, #30
 8004d5a:	f000 fd6f 	bl	800583c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004d5e:	201e      	movs	r0, #30
 8004d60:	f000 fd88 	bl	8005874 <HAL_NVIC_EnableIRQ>
}
 8004d64:	e038      	b.n	8004dd8 <HAL_TIM_Encoder_MspInit+0x29c>
  else if(tim_encoderHandle->Instance==TIM8)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a25      	ldr	r2, [pc, #148]	; (8004e00 <HAL_TIM_Encoder_MspInit+0x2c4>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d133      	bne.n	8004dd8 <HAL_TIM_Encoder_MspInit+0x29c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004d70:	2300      	movs	r3, #0
 8004d72:	60fb      	str	r3, [r7, #12]
 8004d74:	4b1b      	ldr	r3, [pc, #108]	; (8004de4 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8004d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d78:	4a1a      	ldr	r2, [pc, #104]	; (8004de4 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8004d7a:	f043 0302 	orr.w	r3, r3, #2
 8004d7e:	6453      	str	r3, [r2, #68]	; 0x44
 8004d80:	4b18      	ldr	r3, [pc, #96]	; (8004de4 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8004d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	60fb      	str	r3, [r7, #12]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	60bb      	str	r3, [r7, #8]
 8004d90:	4b14      	ldr	r3, [pc, #80]	; (8004de4 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8004d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d94:	4a13      	ldr	r2, [pc, #76]	; (8004de4 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8004d96:	f043 0304 	orr.w	r3, r3, #4
 8004d9a:	6313      	str	r3, [r2, #48]	; 0x30
 8004d9c:	4b11      	ldr	r3, [pc, #68]	; (8004de4 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8004d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da0:	f003 0304 	and.w	r3, r3, #4
 8004da4:	60bb      	str	r3, [r7, #8]
 8004da6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004da8:	23c0      	movs	r3, #192	; 0xc0
 8004daa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dac:	2302      	movs	r3, #2
 8004dae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004db0:	2300      	movs	r3, #0
 8004db2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004db4:	2300      	movs	r3, #0
 8004db6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004db8:	2303      	movs	r3, #3
 8004dba:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004dbc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	4810      	ldr	r0, [pc, #64]	; (8004e04 <HAL_TIM_Encoder_MspInit+0x2c8>)
 8004dc4:	f001 f966 	bl	8006094 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 8004dc8:	2200      	movs	r2, #0
 8004dca:	2105      	movs	r1, #5
 8004dcc:	202e      	movs	r0, #46	; 0x2e
 8004dce:	f000 fd35 	bl	800583c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8004dd2:	202e      	movs	r0, #46	; 0x2e
 8004dd4:	f000 fd4e 	bl	8005874 <HAL_NVIC_EnableIRQ>
}
 8004dd8:	bf00      	nop
 8004dda:	3748      	adds	r7, #72	; 0x48
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	40010000 	.word	0x40010000
 8004de4:	40023800 	.word	0x40023800
 8004de8:	40021000 	.word	0x40021000
 8004dec:	40020000 	.word	0x40020000
 8004df0:	40020400 	.word	0x40020400
 8004df4:	40000400 	.word	0x40000400
 8004df8:	40000800 	.word	0x40000800
 8004dfc:	40020c00 	.word	0x40020c00
 8004e00:	40010400 	.word	0x40010400
 8004e04:	40020800 	.word	0x40020800

08004e08 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a2c      	ldr	r2, [pc, #176]	; (8004ec8 <HAL_TIM_Base_MspInit+0xc0>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d116      	bne.n	8004e48 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	617b      	str	r3, [r7, #20]
 8004e1e:	4b2b      	ldr	r3, [pc, #172]	; (8004ecc <HAL_TIM_Base_MspInit+0xc4>)
 8004e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e22:	4a2a      	ldr	r2, [pc, #168]	; (8004ecc <HAL_TIM_Base_MspInit+0xc4>)
 8004e24:	f043 0320 	orr.w	r3, r3, #32
 8004e28:	6413      	str	r3, [r2, #64]	; 0x40
 8004e2a:	4b28      	ldr	r3, [pc, #160]	; (8004ecc <HAL_TIM_Base_MspInit+0xc4>)
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2e:	f003 0320 	and.w	r3, r3, #32
 8004e32:	617b      	str	r3, [r7, #20]
 8004e34:	697b      	ldr	r3, [r7, #20]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8004e36:	2200      	movs	r2, #0
 8004e38:	2105      	movs	r1, #5
 8004e3a:	2037      	movs	r0, #55	; 0x37
 8004e3c:	f000 fcfe 	bl	800583c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004e40:	2037      	movs	r0, #55	; 0x37
 8004e42:	f000 fd17 	bl	8005874 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8004e46:	e03a      	b.n	8004ebe <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM9)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a20      	ldr	r2, [pc, #128]	; (8004ed0 <HAL_TIM_Base_MspInit+0xc8>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d10e      	bne.n	8004e70 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8004e52:	2300      	movs	r3, #0
 8004e54:	613b      	str	r3, [r7, #16]
 8004e56:	4b1d      	ldr	r3, [pc, #116]	; (8004ecc <HAL_TIM_Base_MspInit+0xc4>)
 8004e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e5a:	4a1c      	ldr	r2, [pc, #112]	; (8004ecc <HAL_TIM_Base_MspInit+0xc4>)
 8004e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e60:	6453      	str	r3, [r2, #68]	; 0x44
 8004e62:	4b1a      	ldr	r3, [pc, #104]	; (8004ecc <HAL_TIM_Base_MspInit+0xc4>)
 8004e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e6a:	613b      	str	r3, [r7, #16]
 8004e6c:	693b      	ldr	r3, [r7, #16]
}
 8004e6e:	e026      	b.n	8004ebe <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM12)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a17      	ldr	r2, [pc, #92]	; (8004ed4 <HAL_TIM_Base_MspInit+0xcc>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d10e      	bne.n	8004e98 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	60fb      	str	r3, [r7, #12]
 8004e7e:	4b13      	ldr	r3, [pc, #76]	; (8004ecc <HAL_TIM_Base_MspInit+0xc4>)
 8004e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e82:	4a12      	ldr	r2, [pc, #72]	; (8004ecc <HAL_TIM_Base_MspInit+0xc4>)
 8004e84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e88:	6413      	str	r3, [r2, #64]	; 0x40
 8004e8a:	4b10      	ldr	r3, [pc, #64]	; (8004ecc <HAL_TIM_Base_MspInit+0xc4>)
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e92:	60fb      	str	r3, [r7, #12]
 8004e94:	68fb      	ldr	r3, [r7, #12]
}
 8004e96:	e012      	b.n	8004ebe <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM13)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a0e      	ldr	r2, [pc, #56]	; (8004ed8 <HAL_TIM_Base_MspInit+0xd0>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d10d      	bne.n	8004ebe <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	60bb      	str	r3, [r7, #8]
 8004ea6:	4b09      	ldr	r3, [pc, #36]	; (8004ecc <HAL_TIM_Base_MspInit+0xc4>)
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eaa:	4a08      	ldr	r2, [pc, #32]	; (8004ecc <HAL_TIM_Base_MspInit+0xc4>)
 8004eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8004eb2:	4b06      	ldr	r3, [pc, #24]	; (8004ecc <HAL_TIM_Base_MspInit+0xc4>)
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eba:	60bb      	str	r3, [r7, #8]
 8004ebc:	68bb      	ldr	r3, [r7, #8]
}
 8004ebe:	bf00      	nop
 8004ec0:	3718      	adds	r7, #24
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	40001400 	.word	0x40001400
 8004ecc:	40023800 	.word	0x40023800
 8004ed0:	40014000 	.word	0x40014000
 8004ed4:	40001800 	.word	0x40001800
 8004ed8:	40001c00 	.word	0x40001c00

08004edc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b08a      	sub	sp, #40	; 0x28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ee4:	f107 0314 	add.w	r3, r7, #20
 8004ee8:	2200      	movs	r2, #0
 8004eea:	601a      	str	r2, [r3, #0]
 8004eec:	605a      	str	r2, [r3, #4]
 8004eee:	609a      	str	r2, [r3, #8]
 8004ef0:	60da      	str	r2, [r3, #12]
 8004ef2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM9)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a24      	ldr	r2, [pc, #144]	; (8004f8c <HAL_TIM_MspPostInit+0xb0>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d11e      	bne.n	8004f3c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004efe:	2300      	movs	r3, #0
 8004f00:	613b      	str	r3, [r7, #16]
 8004f02:	4b23      	ldr	r3, [pc, #140]	; (8004f90 <HAL_TIM_MspPostInit+0xb4>)
 8004f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f06:	4a22      	ldr	r2, [pc, #136]	; (8004f90 <HAL_TIM_MspPostInit+0xb4>)
 8004f08:	f043 0310 	orr.w	r3, r3, #16
 8004f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8004f0e:	4b20      	ldr	r3, [pc, #128]	; (8004f90 <HAL_TIM_MspPostInit+0xb4>)
 8004f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f12:	f003 0310 	and.w	r3, r3, #16
 8004f16:	613b      	str	r3, [r7, #16]
 8004f18:	693b      	ldr	r3, [r7, #16]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    PE6     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004f1a:	2360      	movs	r3, #96	; 0x60
 8004f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f1e:	2302      	movs	r3, #2
 8004f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f22:	2300      	movs	r3, #0
 8004f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f26:	2300      	movs	r3, #0
 8004f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004f2e:	f107 0314 	add.w	r3, r7, #20
 8004f32:	4619      	mov	r1, r3
 8004f34:	4817      	ldr	r0, [pc, #92]	; (8004f94 <HAL_TIM_MspPostInit+0xb8>)
 8004f36:	f001 f8ad 	bl	8006094 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8004f3a:	e023      	b.n	8004f84 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM12)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a15      	ldr	r2, [pc, #84]	; (8004f98 <HAL_TIM_MspPostInit+0xbc>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d11e      	bne.n	8004f84 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f46:	2300      	movs	r3, #0
 8004f48:	60fb      	str	r3, [r7, #12]
 8004f4a:	4b11      	ldr	r3, [pc, #68]	; (8004f90 <HAL_TIM_MspPostInit+0xb4>)
 8004f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4e:	4a10      	ldr	r2, [pc, #64]	; (8004f90 <HAL_TIM_MspPostInit+0xb4>)
 8004f50:	f043 0302 	orr.w	r3, r3, #2
 8004f54:	6313      	str	r3, [r2, #48]	; 0x30
 8004f56:	4b0e      	ldr	r3, [pc, #56]	; (8004f90 <HAL_TIM_MspPostInit+0xb4>)
 8004f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	60fb      	str	r3, [r7, #12]
 8004f60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004f62:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f68:	2302      	movs	r3, #2
 8004f6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f70:	2300      	movs	r3, #0
 8004f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8004f74:	2309      	movs	r3, #9
 8004f76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f78:	f107 0314 	add.w	r3, r7, #20
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	4807      	ldr	r0, [pc, #28]	; (8004f9c <HAL_TIM_MspPostInit+0xc0>)
 8004f80:	f001 f888 	bl	8006094 <HAL_GPIO_Init>
}
 8004f84:	bf00      	nop
 8004f86:	3728      	adds	r7, #40	; 0x28
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	40014000 	.word	0x40014000
 8004f90:	40023800 	.word	0x40023800
 8004f94:	40021000 	.word	0x40021000
 8004f98:	40001800 	.word	0x40001800
 8004f9c:	40020400 	.word	0x40020400

08004fa0 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	0a5a      	lsrs	r2, r3, #9
 8004fb0:	490f      	ldr	r1, [pc, #60]	; (8004ff0 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8004fb2:	fba1 1202 	umull	r1, r2, r1, r2
 8004fb6:	09d2      	lsrs	r2, r2, #7
 8004fb8:	490e      	ldr	r1, [pc, #56]	; (8004ff4 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8004fba:	fb01 f202 	mul.w	r2, r1, r2
 8004fbe:	1a9b      	subs	r3, r3, r2
 8004fc0:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	0a5b      	lsrs	r3, r3, #9
 8004fc8:	4a09      	ldr	r2, [pc, #36]	; (8004ff0 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8004fca:	fba2 2303 	umull	r2, r3, r2, r3
 8004fce:	09db      	lsrs	r3, r3, #7
 8004fd0:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	441a      	add	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	601a      	str	r2, [r3, #0]
}
 8004fe4:	bf00      	nop
 8004fe6:	3714      	adds	r7, #20
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	00044b83 	.word	0x00044b83
 8004ff4:	3b9aca00 	.word	0x3b9aca00

08004ff8 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart5_tx;
DMA_HandleTypeDef hdma_usart2_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004ffc:	4b11      	ldr	r3, [pc, #68]	; (8005044 <MX_UART4_Init+0x4c>)
 8004ffe:	4a12      	ldr	r2, [pc, #72]	; (8005048 <MX_UART4_Init+0x50>)
 8005000:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8005002:	4b10      	ldr	r3, [pc, #64]	; (8005044 <MX_UART4_Init+0x4c>)
 8005004:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005008:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800500a:	4b0e      	ldr	r3, [pc, #56]	; (8005044 <MX_UART4_Init+0x4c>)
 800500c:	2200      	movs	r2, #0
 800500e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005010:	4b0c      	ldr	r3, [pc, #48]	; (8005044 <MX_UART4_Init+0x4c>)
 8005012:	2200      	movs	r2, #0
 8005014:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8005016:	4b0b      	ldr	r3, [pc, #44]	; (8005044 <MX_UART4_Init+0x4c>)
 8005018:	2200      	movs	r2, #0
 800501a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800501c:	4b09      	ldr	r3, [pc, #36]	; (8005044 <MX_UART4_Init+0x4c>)
 800501e:	220c      	movs	r2, #12
 8005020:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005022:	4b08      	ldr	r3, [pc, #32]	; (8005044 <MX_UART4_Init+0x4c>)
 8005024:	2200      	movs	r2, #0
 8005026:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005028:	4b06      	ldr	r3, [pc, #24]	; (8005044 <MX_UART4_Init+0x4c>)
 800502a:	2200      	movs	r2, #0
 800502c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800502e:	4805      	ldr	r0, [pc, #20]	; (8005044 <MX_UART4_Init+0x4c>)
 8005030:	f003 f850 	bl	80080d4 <HAL_UART_Init>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d001      	beq.n	800503e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800503a:	f7fc fe43 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800503e:	bf00      	nop
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	2000128c 	.word	0x2000128c
 8005048:	40004c00 	.word	0x40004c00

0800504c <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8005050:	4b11      	ldr	r3, [pc, #68]	; (8005098 <MX_UART5_Init+0x4c>)
 8005052:	4a12      	ldr	r2, [pc, #72]	; (800509c <MX_UART5_Init+0x50>)
 8005054:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 57600;
 8005056:	4b10      	ldr	r3, [pc, #64]	; (8005098 <MX_UART5_Init+0x4c>)
 8005058:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800505c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800505e:	4b0e      	ldr	r3, [pc, #56]	; (8005098 <MX_UART5_Init+0x4c>)
 8005060:	2200      	movs	r2, #0
 8005062:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8005064:	4b0c      	ldr	r3, [pc, #48]	; (8005098 <MX_UART5_Init+0x4c>)
 8005066:	2200      	movs	r2, #0
 8005068:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800506a:	4b0b      	ldr	r3, [pc, #44]	; (8005098 <MX_UART5_Init+0x4c>)
 800506c:	2200      	movs	r2, #0
 800506e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8005070:	4b09      	ldr	r3, [pc, #36]	; (8005098 <MX_UART5_Init+0x4c>)
 8005072:	220c      	movs	r2, #12
 8005074:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005076:	4b08      	ldr	r3, [pc, #32]	; (8005098 <MX_UART5_Init+0x4c>)
 8005078:	2200      	movs	r2, #0
 800507a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800507c:	4b06      	ldr	r3, [pc, #24]	; (8005098 <MX_UART5_Init+0x4c>)
 800507e:	2200      	movs	r2, #0
 8005080:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8005082:	4805      	ldr	r0, [pc, #20]	; (8005098 <MX_UART5_Init+0x4c>)
 8005084:	f003 f826 	bl	80080d4 <HAL_UART_Init>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d001      	beq.n	8005092 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800508e:	f7fc fe19 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8005092:	bf00      	nop
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	200012d0 	.word	0x200012d0
 800509c:	40005000 	.word	0x40005000

080050a0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80050a4:	4b11      	ldr	r3, [pc, #68]	; (80050ec <MX_USART1_UART_Init+0x4c>)
 80050a6:	4a12      	ldr	r2, [pc, #72]	; (80050f0 <MX_USART1_UART_Init+0x50>)
 80050a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80050aa:	4b10      	ldr	r3, [pc, #64]	; (80050ec <MX_USART1_UART_Init+0x4c>)
 80050ac:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80050b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80050b2:	4b0e      	ldr	r3, [pc, #56]	; (80050ec <MX_USART1_UART_Init+0x4c>)
 80050b4:	2200      	movs	r2, #0
 80050b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80050b8:	4b0c      	ldr	r3, [pc, #48]	; (80050ec <MX_USART1_UART_Init+0x4c>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80050be:	4b0b      	ldr	r3, [pc, #44]	; (80050ec <MX_USART1_UART_Init+0x4c>)
 80050c0:	2200      	movs	r2, #0
 80050c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80050c4:	4b09      	ldr	r3, [pc, #36]	; (80050ec <MX_USART1_UART_Init+0x4c>)
 80050c6:	220c      	movs	r2, #12
 80050c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80050ca:	4b08      	ldr	r3, [pc, #32]	; (80050ec <MX_USART1_UART_Init+0x4c>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80050d0:	4b06      	ldr	r3, [pc, #24]	; (80050ec <MX_USART1_UART_Init+0x4c>)
 80050d2:	2200      	movs	r2, #0
 80050d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80050d6:	4805      	ldr	r0, [pc, #20]	; (80050ec <MX_USART1_UART_Init+0x4c>)
 80050d8:	f002 fffc 	bl	80080d4 <HAL_UART_Init>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d001      	beq.n	80050e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80050e2:	f7fc fdef 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80050e6:	bf00      	nop
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	20001314 	.word	0x20001314
 80050f0:	40011000 	.word	0x40011000

080050f4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80050f8:	4b11      	ldr	r3, [pc, #68]	; (8005140 <MX_USART2_UART_Init+0x4c>)
 80050fa:	4a12      	ldr	r2, [pc, #72]	; (8005144 <MX_USART2_UART_Init+0x50>)
 80050fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80050fe:	4b10      	ldr	r3, [pc, #64]	; (8005140 <MX_USART2_UART_Init+0x4c>)
 8005100:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005104:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005106:	4b0e      	ldr	r3, [pc, #56]	; (8005140 <MX_USART2_UART_Init+0x4c>)
 8005108:	2200      	movs	r2, #0
 800510a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800510c:	4b0c      	ldr	r3, [pc, #48]	; (8005140 <MX_USART2_UART_Init+0x4c>)
 800510e:	2200      	movs	r2, #0
 8005110:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005112:	4b0b      	ldr	r3, [pc, #44]	; (8005140 <MX_USART2_UART_Init+0x4c>)
 8005114:	2200      	movs	r2, #0
 8005116:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005118:	4b09      	ldr	r3, [pc, #36]	; (8005140 <MX_USART2_UART_Init+0x4c>)
 800511a:	220c      	movs	r2, #12
 800511c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800511e:	4b08      	ldr	r3, [pc, #32]	; (8005140 <MX_USART2_UART_Init+0x4c>)
 8005120:	2200      	movs	r2, #0
 8005122:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005124:	4b06      	ldr	r3, [pc, #24]	; (8005140 <MX_USART2_UART_Init+0x4c>)
 8005126:	2200      	movs	r2, #0
 8005128:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800512a:	4805      	ldr	r0, [pc, #20]	; (8005140 <MX_USART2_UART_Init+0x4c>)
 800512c:	f002 ffd2 	bl	80080d4 <HAL_UART_Init>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d001      	beq.n	800513a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005136:	f7fc fdc5 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800513a:	bf00      	nop
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	20001358 	.word	0x20001358
 8005144:	40004400 	.word	0x40004400

08005148 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800514c:	4b11      	ldr	r3, [pc, #68]	; (8005194 <MX_USART3_UART_Init+0x4c>)
 800514e:	4a12      	ldr	r2, [pc, #72]	; (8005198 <MX_USART3_UART_Init+0x50>)
 8005150:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005152:	4b10      	ldr	r3, [pc, #64]	; (8005194 <MX_USART3_UART_Init+0x4c>)
 8005154:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005158:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800515a:	4b0e      	ldr	r3, [pc, #56]	; (8005194 <MX_USART3_UART_Init+0x4c>)
 800515c:	2200      	movs	r2, #0
 800515e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005160:	4b0c      	ldr	r3, [pc, #48]	; (8005194 <MX_USART3_UART_Init+0x4c>)
 8005162:	2200      	movs	r2, #0
 8005164:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005166:	4b0b      	ldr	r3, [pc, #44]	; (8005194 <MX_USART3_UART_Init+0x4c>)
 8005168:	2200      	movs	r2, #0
 800516a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800516c:	4b09      	ldr	r3, [pc, #36]	; (8005194 <MX_USART3_UART_Init+0x4c>)
 800516e:	220c      	movs	r2, #12
 8005170:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005172:	4b08      	ldr	r3, [pc, #32]	; (8005194 <MX_USART3_UART_Init+0x4c>)
 8005174:	2200      	movs	r2, #0
 8005176:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005178:	4b06      	ldr	r3, [pc, #24]	; (8005194 <MX_USART3_UART_Init+0x4c>)
 800517a:	2200      	movs	r2, #0
 800517c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800517e:	4805      	ldr	r0, [pc, #20]	; (8005194 <MX_USART3_UART_Init+0x4c>)
 8005180:	f002 ffa8 	bl	80080d4 <HAL_UART_Init>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800518a:	f7fc fd9b 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800518e:	bf00      	nop
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	2000139c 	.word	0x2000139c
 8005198:	40004800 	.word	0x40004800

0800519c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b092      	sub	sp, #72	; 0x48
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80051a8:	2200      	movs	r2, #0
 80051aa:	601a      	str	r2, [r3, #0]
 80051ac:	605a      	str	r2, [r3, #4]
 80051ae:	609a      	str	r2, [r3, #8]
 80051b0:	60da      	str	r2, [r3, #12]
 80051b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a8e      	ldr	r2, [pc, #568]	; (80053f4 <HAL_UART_MspInit+0x258>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d163      	bne.n	8005286 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80051be:	2300      	movs	r3, #0
 80051c0:	633b      	str	r3, [r7, #48]	; 0x30
 80051c2:	4b8d      	ldr	r3, [pc, #564]	; (80053f8 <HAL_UART_MspInit+0x25c>)
 80051c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c6:	4a8c      	ldr	r2, [pc, #560]	; (80053f8 <HAL_UART_MspInit+0x25c>)
 80051c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051cc:	6413      	str	r3, [r2, #64]	; 0x40
 80051ce:	4b8a      	ldr	r3, [pc, #552]	; (80053f8 <HAL_UART_MspInit+0x25c>)
 80051d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051d6:	633b      	str	r3, [r7, #48]	; 0x30
 80051d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80051da:	2300      	movs	r3, #0
 80051dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051de:	4b86      	ldr	r3, [pc, #536]	; (80053f8 <HAL_UART_MspInit+0x25c>)
 80051e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e2:	4a85      	ldr	r2, [pc, #532]	; (80053f8 <HAL_UART_MspInit+0x25c>)
 80051e4:	f043 0304 	orr.w	r3, r3, #4
 80051e8:	6313      	str	r3, [r2, #48]	; 0x30
 80051ea:	4b83      	ldr	r3, [pc, #524]	; (80053f8 <HAL_UART_MspInit+0x25c>)
 80051ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ee:	f003 0304 	and.w	r3, r3, #4
 80051f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80051f6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80051fa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051fc:	2302      	movs	r3, #2
 80051fe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005200:	2300      	movs	r3, #0
 8005202:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005204:	2303      	movs	r3, #3
 8005206:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005208:	2308      	movs	r3, #8
 800520a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800520c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005210:	4619      	mov	r1, r3
 8005212:	487a      	ldr	r0, [pc, #488]	; (80053fc <HAL_UART_MspInit+0x260>)
 8005214:	f000 ff3e 	bl	8006094 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8005218:	4b79      	ldr	r3, [pc, #484]	; (8005400 <HAL_UART_MspInit+0x264>)
 800521a:	4a7a      	ldr	r2, [pc, #488]	; (8005404 <HAL_UART_MspInit+0x268>)
 800521c:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800521e:	4b78      	ldr	r3, [pc, #480]	; (8005400 <HAL_UART_MspInit+0x264>)
 8005220:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005224:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005226:	4b76      	ldr	r3, [pc, #472]	; (8005400 <HAL_UART_MspInit+0x264>)
 8005228:	2200      	movs	r2, #0
 800522a:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800522c:	4b74      	ldr	r3, [pc, #464]	; (8005400 <HAL_UART_MspInit+0x264>)
 800522e:	2200      	movs	r2, #0
 8005230:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005232:	4b73      	ldr	r3, [pc, #460]	; (8005400 <HAL_UART_MspInit+0x264>)
 8005234:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005238:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800523a:	4b71      	ldr	r3, [pc, #452]	; (8005400 <HAL_UART_MspInit+0x264>)
 800523c:	2200      	movs	r2, #0
 800523e:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005240:	4b6f      	ldr	r3, [pc, #444]	; (8005400 <HAL_UART_MspInit+0x264>)
 8005242:	2200      	movs	r2, #0
 8005244:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8005246:	4b6e      	ldr	r3, [pc, #440]	; (8005400 <HAL_UART_MspInit+0x264>)
 8005248:	2200      	movs	r2, #0
 800524a:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800524c:	4b6c      	ldr	r3, [pc, #432]	; (8005400 <HAL_UART_MspInit+0x264>)
 800524e:	2200      	movs	r2, #0
 8005250:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005252:	4b6b      	ldr	r3, [pc, #428]	; (8005400 <HAL_UART_MspInit+0x264>)
 8005254:	2200      	movs	r2, #0
 8005256:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8005258:	4869      	ldr	r0, [pc, #420]	; (8005400 <HAL_UART_MspInit+0x264>)
 800525a:	f000 fb19 	bl	8005890 <HAL_DMA_Init>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d001      	beq.n	8005268 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8005264:	f7fc fd2e 	bl	8001cc4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a65      	ldr	r2, [pc, #404]	; (8005400 <HAL_UART_MspInit+0x264>)
 800526c:	639a      	str	r2, [r3, #56]	; 0x38
 800526e:	4a64      	ldr	r2, [pc, #400]	; (8005400 <HAL_UART_MspInit+0x264>)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8005274:	2200      	movs	r2, #0
 8005276:	2105      	movs	r1, #5
 8005278:	2034      	movs	r0, #52	; 0x34
 800527a:	f000 fadf 	bl	800583c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800527e:	2034      	movs	r0, #52	; 0x34
 8005280:	f000 faf8 	bl	8005874 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8005284:	e1a1      	b.n	80055ca <HAL_UART_MspInit+0x42e>
  else if(uartHandle->Instance==UART5)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a5f      	ldr	r2, [pc, #380]	; (8005408 <HAL_UART_MspInit+0x26c>)
 800528c:	4293      	cmp	r3, r2
 800528e:	f040 80c7 	bne.w	8005420 <HAL_UART_MspInit+0x284>
    __HAL_RCC_UART5_CLK_ENABLE();
 8005292:	2300      	movs	r3, #0
 8005294:	62bb      	str	r3, [r7, #40]	; 0x28
 8005296:	4b58      	ldr	r3, [pc, #352]	; (80053f8 <HAL_UART_MspInit+0x25c>)
 8005298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529a:	4a57      	ldr	r2, [pc, #348]	; (80053f8 <HAL_UART_MspInit+0x25c>)
 800529c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052a0:	6413      	str	r3, [r2, #64]	; 0x40
 80052a2:	4b55      	ldr	r3, [pc, #340]	; (80053f8 <HAL_UART_MspInit+0x25c>)
 80052a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80052ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80052ae:	2300      	movs	r3, #0
 80052b0:	627b      	str	r3, [r7, #36]	; 0x24
 80052b2:	4b51      	ldr	r3, [pc, #324]	; (80053f8 <HAL_UART_MspInit+0x25c>)
 80052b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b6:	4a50      	ldr	r2, [pc, #320]	; (80053f8 <HAL_UART_MspInit+0x25c>)
 80052b8:	f043 0304 	orr.w	r3, r3, #4
 80052bc:	6313      	str	r3, [r2, #48]	; 0x30
 80052be:	4b4e      	ldr	r3, [pc, #312]	; (80053f8 <HAL_UART_MspInit+0x25c>)
 80052c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c2:	f003 0304 	and.w	r3, r3, #4
 80052c6:	627b      	str	r3, [r7, #36]	; 0x24
 80052c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80052ca:	2300      	movs	r3, #0
 80052cc:	623b      	str	r3, [r7, #32]
 80052ce:	4b4a      	ldr	r3, [pc, #296]	; (80053f8 <HAL_UART_MspInit+0x25c>)
 80052d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d2:	4a49      	ldr	r2, [pc, #292]	; (80053f8 <HAL_UART_MspInit+0x25c>)
 80052d4:	f043 0308 	orr.w	r3, r3, #8
 80052d8:	6313      	str	r3, [r2, #48]	; 0x30
 80052da:	4b47      	ldr	r3, [pc, #284]	; (80053f8 <HAL_UART_MspInit+0x25c>)
 80052dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052de:	f003 0308 	and.w	r3, r3, #8
 80052e2:	623b      	str	r3, [r7, #32]
 80052e4:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80052e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052ea:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052ec:	2302      	movs	r3, #2
 80052ee:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052f0:	2300      	movs	r3, #0
 80052f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052f4:	2303      	movs	r3, #3
 80052f6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80052f8:	2308      	movs	r3, #8
 80052fa:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005300:	4619      	mov	r1, r3
 8005302:	483e      	ldr	r0, [pc, #248]	; (80053fc <HAL_UART_MspInit+0x260>)
 8005304:	f000 fec6 	bl	8006094 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005308:	2304      	movs	r3, #4
 800530a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800530c:	2302      	movs	r3, #2
 800530e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005310:	2300      	movs	r3, #0
 8005312:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005314:	2303      	movs	r3, #3
 8005316:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005318:	2308      	movs	r3, #8
 800531a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800531c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005320:	4619      	mov	r1, r3
 8005322:	483a      	ldr	r0, [pc, #232]	; (800540c <HAL_UART_MspInit+0x270>)
 8005324:	f000 feb6 	bl	8006094 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8005328:	4b39      	ldr	r3, [pc, #228]	; (8005410 <HAL_UART_MspInit+0x274>)
 800532a:	4a3a      	ldr	r2, [pc, #232]	; (8005414 <HAL_UART_MspInit+0x278>)
 800532c:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 800532e:	4b38      	ldr	r3, [pc, #224]	; (8005410 <HAL_UART_MspInit+0x274>)
 8005330:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005334:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005336:	4b36      	ldr	r3, [pc, #216]	; (8005410 <HAL_UART_MspInit+0x274>)
 8005338:	2200      	movs	r2, #0
 800533a:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800533c:	4b34      	ldr	r3, [pc, #208]	; (8005410 <HAL_UART_MspInit+0x274>)
 800533e:	2200      	movs	r2, #0
 8005340:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005342:	4b33      	ldr	r3, [pc, #204]	; (8005410 <HAL_UART_MspInit+0x274>)
 8005344:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005348:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800534a:	4b31      	ldr	r3, [pc, #196]	; (8005410 <HAL_UART_MspInit+0x274>)
 800534c:	2200      	movs	r2, #0
 800534e:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005350:	4b2f      	ldr	r3, [pc, #188]	; (8005410 <HAL_UART_MspInit+0x274>)
 8005352:	2200      	movs	r2, #0
 8005354:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8005356:	4b2e      	ldr	r3, [pc, #184]	; (8005410 <HAL_UART_MspInit+0x274>)
 8005358:	2200      	movs	r2, #0
 800535a:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 800535c:	4b2c      	ldr	r3, [pc, #176]	; (8005410 <HAL_UART_MspInit+0x274>)
 800535e:	2200      	movs	r2, #0
 8005360:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005362:	4b2b      	ldr	r3, [pc, #172]	; (8005410 <HAL_UART_MspInit+0x274>)
 8005364:	2200      	movs	r2, #0
 8005366:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8005368:	4829      	ldr	r0, [pc, #164]	; (8005410 <HAL_UART_MspInit+0x274>)
 800536a:	f000 fa91 	bl	8005890 <HAL_DMA_Init>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 8005374:	f7fc fca6 	bl	8001cc4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a25      	ldr	r2, [pc, #148]	; (8005410 <HAL_UART_MspInit+0x274>)
 800537c:	639a      	str	r2, [r3, #56]	; 0x38
 800537e:	4a24      	ldr	r2, [pc, #144]	; (8005410 <HAL_UART_MspInit+0x274>)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8005384:	4b24      	ldr	r3, [pc, #144]	; (8005418 <HAL_UART_MspInit+0x27c>)
 8005386:	4a25      	ldr	r2, [pc, #148]	; (800541c <HAL_UART_MspInit+0x280>)
 8005388:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 800538a:	4b23      	ldr	r3, [pc, #140]	; (8005418 <HAL_UART_MspInit+0x27c>)
 800538c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005390:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005392:	4b21      	ldr	r3, [pc, #132]	; (8005418 <HAL_UART_MspInit+0x27c>)
 8005394:	2240      	movs	r2, #64	; 0x40
 8005396:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005398:	4b1f      	ldr	r3, [pc, #124]	; (8005418 <HAL_UART_MspInit+0x27c>)
 800539a:	2200      	movs	r2, #0
 800539c:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 800539e:	4b1e      	ldr	r3, [pc, #120]	; (8005418 <HAL_UART_MspInit+0x27c>)
 80053a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053a4:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80053a6:	4b1c      	ldr	r3, [pc, #112]	; (8005418 <HAL_UART_MspInit+0x27c>)
 80053a8:	2200      	movs	r2, #0
 80053aa:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80053ac:	4b1a      	ldr	r3, [pc, #104]	; (8005418 <HAL_UART_MspInit+0x27c>)
 80053ae:	2200      	movs	r2, #0
 80053b0:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 80053b2:	4b19      	ldr	r3, [pc, #100]	; (8005418 <HAL_UART_MspInit+0x27c>)
 80053b4:	2200      	movs	r2, #0
 80053b6:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 80053b8:	4b17      	ldr	r3, [pc, #92]	; (8005418 <HAL_UART_MspInit+0x27c>)
 80053ba:	2200      	movs	r2, #0
 80053bc:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80053be:	4b16      	ldr	r3, [pc, #88]	; (8005418 <HAL_UART_MspInit+0x27c>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 80053c4:	4814      	ldr	r0, [pc, #80]	; (8005418 <HAL_UART_MspInit+0x27c>)
 80053c6:	f000 fa63 	bl	8005890 <HAL_DMA_Init>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d001      	beq.n	80053d4 <HAL_UART_MspInit+0x238>
      Error_Handler();
 80053d0:	f7fc fc78 	bl	8001cc4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a10      	ldr	r2, [pc, #64]	; (8005418 <HAL_UART_MspInit+0x27c>)
 80053d8:	635a      	str	r2, [r3, #52]	; 0x34
 80053da:	4a0f      	ldr	r2, [pc, #60]	; (8005418 <HAL_UART_MspInit+0x27c>)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 80053e0:	2200      	movs	r2, #0
 80053e2:	2105      	movs	r1, #5
 80053e4:	2035      	movs	r0, #53	; 0x35
 80053e6:	f000 fa29 	bl	800583c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80053ea:	2035      	movs	r0, #53	; 0x35
 80053ec:	f000 fa42 	bl	8005874 <HAL_NVIC_EnableIRQ>
}
 80053f0:	e0eb      	b.n	80055ca <HAL_UART_MspInit+0x42e>
 80053f2:	bf00      	nop
 80053f4:	40004c00 	.word	0x40004c00
 80053f8:	40023800 	.word	0x40023800
 80053fc:	40020800 	.word	0x40020800
 8005400:	200013e0 	.word	0x200013e0
 8005404:	40026040 	.word	0x40026040
 8005408:	40005000 	.word	0x40005000
 800540c:	40020c00 	.word	0x40020c00
 8005410:	20001440 	.word	0x20001440
 8005414:	40026010 	.word	0x40026010
 8005418:	200014a0 	.word	0x200014a0
 800541c:	400260b8 	.word	0x400260b8
  else if(uartHandle->Instance==USART1)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a6b      	ldr	r2, [pc, #428]	; (80055d4 <HAL_UART_MspInit+0x438>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d135      	bne.n	8005496 <HAL_UART_MspInit+0x2fa>
    __HAL_RCC_USART1_CLK_ENABLE();
 800542a:	2300      	movs	r3, #0
 800542c:	61fb      	str	r3, [r7, #28]
 800542e:	4b6a      	ldr	r3, [pc, #424]	; (80055d8 <HAL_UART_MspInit+0x43c>)
 8005430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005432:	4a69      	ldr	r2, [pc, #420]	; (80055d8 <HAL_UART_MspInit+0x43c>)
 8005434:	f043 0310 	orr.w	r3, r3, #16
 8005438:	6453      	str	r3, [r2, #68]	; 0x44
 800543a:	4b67      	ldr	r3, [pc, #412]	; (80055d8 <HAL_UART_MspInit+0x43c>)
 800543c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800543e:	f003 0310 	and.w	r3, r3, #16
 8005442:	61fb      	str	r3, [r7, #28]
 8005444:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005446:	2300      	movs	r3, #0
 8005448:	61bb      	str	r3, [r7, #24]
 800544a:	4b63      	ldr	r3, [pc, #396]	; (80055d8 <HAL_UART_MspInit+0x43c>)
 800544c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544e:	4a62      	ldr	r2, [pc, #392]	; (80055d8 <HAL_UART_MspInit+0x43c>)
 8005450:	f043 0301 	orr.w	r3, r3, #1
 8005454:	6313      	str	r3, [r2, #48]	; 0x30
 8005456:	4b60      	ldr	r3, [pc, #384]	; (80055d8 <HAL_UART_MspInit+0x43c>)
 8005458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	61bb      	str	r3, [r7, #24]
 8005460:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005462:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005466:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005468:	2302      	movs	r3, #2
 800546a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800546c:	2300      	movs	r3, #0
 800546e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005470:	2303      	movs	r3, #3
 8005472:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005474:	2307      	movs	r3, #7
 8005476:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005478:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800547c:	4619      	mov	r1, r3
 800547e:	4857      	ldr	r0, [pc, #348]	; (80055dc <HAL_UART_MspInit+0x440>)
 8005480:	f000 fe08 	bl	8006094 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005484:	2200      	movs	r2, #0
 8005486:	2105      	movs	r1, #5
 8005488:	2025      	movs	r0, #37	; 0x25
 800548a:	f000 f9d7 	bl	800583c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800548e:	2025      	movs	r0, #37	; 0x25
 8005490:	f000 f9f0 	bl	8005874 <HAL_NVIC_EnableIRQ>
}
 8005494:	e099      	b.n	80055ca <HAL_UART_MspInit+0x42e>
  else if(uartHandle->Instance==USART2)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a51      	ldr	r2, [pc, #324]	; (80055e0 <HAL_UART_MspInit+0x444>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d162      	bne.n	8005566 <HAL_UART_MspInit+0x3ca>
    __HAL_RCC_USART2_CLK_ENABLE();
 80054a0:	2300      	movs	r3, #0
 80054a2:	617b      	str	r3, [r7, #20]
 80054a4:	4b4c      	ldr	r3, [pc, #304]	; (80055d8 <HAL_UART_MspInit+0x43c>)
 80054a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a8:	4a4b      	ldr	r2, [pc, #300]	; (80055d8 <HAL_UART_MspInit+0x43c>)
 80054aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054ae:	6413      	str	r3, [r2, #64]	; 0x40
 80054b0:	4b49      	ldr	r3, [pc, #292]	; (80055d8 <HAL_UART_MspInit+0x43c>)
 80054b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054b8:	617b      	str	r3, [r7, #20]
 80054ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054bc:	2300      	movs	r3, #0
 80054be:	613b      	str	r3, [r7, #16]
 80054c0:	4b45      	ldr	r3, [pc, #276]	; (80055d8 <HAL_UART_MspInit+0x43c>)
 80054c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c4:	4a44      	ldr	r2, [pc, #272]	; (80055d8 <HAL_UART_MspInit+0x43c>)
 80054c6:	f043 0301 	orr.w	r3, r3, #1
 80054ca:	6313      	str	r3, [r2, #48]	; 0x30
 80054cc:	4b42      	ldr	r3, [pc, #264]	; (80055d8 <HAL_UART_MspInit+0x43c>)
 80054ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d0:	f003 0301 	and.w	r3, r3, #1
 80054d4:	613b      	str	r3, [r7, #16]
 80054d6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80054d8:	230c      	movs	r3, #12
 80054da:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054dc:	2302      	movs	r3, #2
 80054de:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054e0:	2300      	movs	r3, #0
 80054e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054e4:	2303      	movs	r3, #3
 80054e6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80054e8:	2307      	movs	r3, #7
 80054ea:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80054f0:	4619      	mov	r1, r3
 80054f2:	483a      	ldr	r0, [pc, #232]	; (80055dc <HAL_UART_MspInit+0x440>)
 80054f4:	f000 fdce 	bl	8006094 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80054f8:	4b3a      	ldr	r3, [pc, #232]	; (80055e4 <HAL_UART_MspInit+0x448>)
 80054fa:	4a3b      	ldr	r2, [pc, #236]	; (80055e8 <HAL_UART_MspInit+0x44c>)
 80054fc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80054fe:	4b39      	ldr	r3, [pc, #228]	; (80055e4 <HAL_UART_MspInit+0x448>)
 8005500:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005504:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005506:	4b37      	ldr	r3, [pc, #220]	; (80055e4 <HAL_UART_MspInit+0x448>)
 8005508:	2200      	movs	r2, #0
 800550a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800550c:	4b35      	ldr	r3, [pc, #212]	; (80055e4 <HAL_UART_MspInit+0x448>)
 800550e:	2200      	movs	r2, #0
 8005510:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005512:	4b34      	ldr	r3, [pc, #208]	; (80055e4 <HAL_UART_MspInit+0x448>)
 8005514:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005518:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800551a:	4b32      	ldr	r3, [pc, #200]	; (80055e4 <HAL_UART_MspInit+0x448>)
 800551c:	2200      	movs	r2, #0
 800551e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005520:	4b30      	ldr	r3, [pc, #192]	; (80055e4 <HAL_UART_MspInit+0x448>)
 8005522:	2200      	movs	r2, #0
 8005524:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005526:	4b2f      	ldr	r3, [pc, #188]	; (80055e4 <HAL_UART_MspInit+0x448>)
 8005528:	2200      	movs	r2, #0
 800552a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800552c:	4b2d      	ldr	r3, [pc, #180]	; (80055e4 <HAL_UART_MspInit+0x448>)
 800552e:	2200      	movs	r2, #0
 8005530:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005532:	4b2c      	ldr	r3, [pc, #176]	; (80055e4 <HAL_UART_MspInit+0x448>)
 8005534:	2200      	movs	r2, #0
 8005536:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005538:	482a      	ldr	r0, [pc, #168]	; (80055e4 <HAL_UART_MspInit+0x448>)
 800553a:	f000 f9a9 	bl	8005890 <HAL_DMA_Init>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d001      	beq.n	8005548 <HAL_UART_MspInit+0x3ac>
      Error_Handler();
 8005544:	f7fc fbbe 	bl	8001cc4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a26      	ldr	r2, [pc, #152]	; (80055e4 <HAL_UART_MspInit+0x448>)
 800554c:	639a      	str	r2, [r3, #56]	; 0x38
 800554e:	4a25      	ldr	r2, [pc, #148]	; (80055e4 <HAL_UART_MspInit+0x448>)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8005554:	2200      	movs	r2, #0
 8005556:	2105      	movs	r1, #5
 8005558:	2026      	movs	r0, #38	; 0x26
 800555a:	f000 f96f 	bl	800583c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800555e:	2026      	movs	r0, #38	; 0x26
 8005560:	f000 f988 	bl	8005874 <HAL_NVIC_EnableIRQ>
}
 8005564:	e031      	b.n	80055ca <HAL_UART_MspInit+0x42e>
  else if(uartHandle->Instance==USART3)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a20      	ldr	r2, [pc, #128]	; (80055ec <HAL_UART_MspInit+0x450>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d12c      	bne.n	80055ca <HAL_UART_MspInit+0x42e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005570:	2300      	movs	r3, #0
 8005572:	60fb      	str	r3, [r7, #12]
 8005574:	4b18      	ldr	r3, [pc, #96]	; (80055d8 <HAL_UART_MspInit+0x43c>)
 8005576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005578:	4a17      	ldr	r2, [pc, #92]	; (80055d8 <HAL_UART_MspInit+0x43c>)
 800557a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800557e:	6413      	str	r3, [r2, #64]	; 0x40
 8005580:	4b15      	ldr	r3, [pc, #84]	; (80055d8 <HAL_UART_MspInit+0x43c>)
 8005582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005584:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005588:	60fb      	str	r3, [r7, #12]
 800558a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800558c:	2300      	movs	r3, #0
 800558e:	60bb      	str	r3, [r7, #8]
 8005590:	4b11      	ldr	r3, [pc, #68]	; (80055d8 <HAL_UART_MspInit+0x43c>)
 8005592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005594:	4a10      	ldr	r2, [pc, #64]	; (80055d8 <HAL_UART_MspInit+0x43c>)
 8005596:	f043 0308 	orr.w	r3, r3, #8
 800559a:	6313      	str	r3, [r2, #48]	; 0x30
 800559c:	4b0e      	ldr	r3, [pc, #56]	; (80055d8 <HAL_UART_MspInit+0x43c>)
 800559e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a0:	f003 0308 	and.w	r3, r3, #8
 80055a4:	60bb      	str	r3, [r7, #8]
 80055a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80055a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80055ac:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055ae:	2302      	movs	r3, #2
 80055b0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055b2:	2300      	movs	r3, #0
 80055b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055b6:	2303      	movs	r3, #3
 80055b8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80055ba:	2307      	movs	r3, #7
 80055bc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80055be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80055c2:	4619      	mov	r1, r3
 80055c4:	480a      	ldr	r0, [pc, #40]	; (80055f0 <HAL_UART_MspInit+0x454>)
 80055c6:	f000 fd65 	bl	8006094 <HAL_GPIO_Init>
}
 80055ca:	bf00      	nop
 80055cc:	3748      	adds	r7, #72	; 0x48
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	40011000 	.word	0x40011000
 80055d8:	40023800 	.word	0x40023800
 80055dc:	40020000 	.word	0x40020000
 80055e0:	40004400 	.word	0x40004400
 80055e4:	20001500 	.word	0x20001500
 80055e8:	40026088 	.word	0x40026088
 80055ec:	40004800 	.word	0x40004800
 80055f0:	40020c00 	.word	0x40020c00

080055f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80055f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800562c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80055f8:	480d      	ldr	r0, [pc, #52]	; (8005630 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80055fa:	490e      	ldr	r1, [pc, #56]	; (8005634 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80055fc:	4a0e      	ldr	r2, [pc, #56]	; (8005638 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80055fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005600:	e002      	b.n	8005608 <LoopCopyDataInit>

08005602 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005602:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005604:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005606:	3304      	adds	r3, #4

08005608 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005608:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800560a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800560c:	d3f9      	bcc.n	8005602 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800560e:	4a0b      	ldr	r2, [pc, #44]	; (800563c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005610:	4c0b      	ldr	r4, [pc, #44]	; (8005640 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005612:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005614:	e001      	b.n	800561a <LoopFillZerobss>

08005616 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005616:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005618:	3204      	adds	r2, #4

0800561a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800561a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800561c:	d3fb      	bcc.n	8005616 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800561e:	f7fe ff9f 	bl	8004560 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005622:	f005 f9cd 	bl	800a9c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005626:	f7fc fa45 	bl	8001ab4 <main>
  bx  lr    
 800562a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800562c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005630:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005634:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8005638:	0800b264 	.word	0x0800b264
  ldr r2, =_sbss
 800563c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8005640:	200052c8 	.word	0x200052c8

08005644 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005644:	e7fe      	b.n	8005644 <ADC_IRQHandler>
	...

08005648 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800564c:	4b0e      	ldr	r3, [pc, #56]	; (8005688 <HAL_Init+0x40>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a0d      	ldr	r2, [pc, #52]	; (8005688 <HAL_Init+0x40>)
 8005652:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005656:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005658:	4b0b      	ldr	r3, [pc, #44]	; (8005688 <HAL_Init+0x40>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a0a      	ldr	r2, [pc, #40]	; (8005688 <HAL_Init+0x40>)
 800565e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005662:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005664:	4b08      	ldr	r3, [pc, #32]	; (8005688 <HAL_Init+0x40>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a07      	ldr	r2, [pc, #28]	; (8005688 <HAL_Init+0x40>)
 800566a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800566e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005670:	2003      	movs	r0, #3
 8005672:	f000 f8d8 	bl	8005826 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005676:	200f      	movs	r0, #15
 8005678:	f7fe fdf2 	bl	8004260 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800567c:	f7fe fdc4 	bl	8004208 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	40023c00 	.word	0x40023c00

0800568c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800568c:	b480      	push	{r7}
 800568e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005690:	4b06      	ldr	r3, [pc, #24]	; (80056ac <HAL_IncTick+0x20>)
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	461a      	mov	r2, r3
 8005696:	4b06      	ldr	r3, [pc, #24]	; (80056b0 <HAL_IncTick+0x24>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4413      	add	r3, r2
 800569c:	4a04      	ldr	r2, [pc, #16]	; (80056b0 <HAL_IncTick+0x24>)
 800569e:	6013      	str	r3, [r2, #0]
}
 80056a0:	bf00      	nop
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	20000010 	.word	0x20000010
 80056b0:	20001560 	.word	0x20001560

080056b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80056b4:	b480      	push	{r7}
 80056b6:	af00      	add	r7, sp, #0
  return uwTick;
 80056b8:	4b03      	ldr	r3, [pc, #12]	; (80056c8 <HAL_GetTick+0x14>)
 80056ba:	681b      	ldr	r3, [r3, #0]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	20001560 	.word	0x20001560

080056cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f003 0307 	and.w	r3, r3, #7
 80056da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80056dc:	4b0c      	ldr	r3, [pc, #48]	; (8005710 <__NVIC_SetPriorityGrouping+0x44>)
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056e2:	68ba      	ldr	r2, [r7, #8]
 80056e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80056e8:	4013      	ands	r3, r2
 80056ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80056f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80056f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056fe:	4a04      	ldr	r2, [pc, #16]	; (8005710 <__NVIC_SetPriorityGrouping+0x44>)
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	60d3      	str	r3, [r2, #12]
}
 8005704:	bf00      	nop
 8005706:	3714      	adds	r7, #20
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr
 8005710:	e000ed00 	.word	0xe000ed00

08005714 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005714:	b480      	push	{r7}
 8005716:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005718:	4b04      	ldr	r3, [pc, #16]	; (800572c <__NVIC_GetPriorityGrouping+0x18>)
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	0a1b      	lsrs	r3, r3, #8
 800571e:	f003 0307 	and.w	r3, r3, #7
}
 8005722:	4618      	mov	r0, r3
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr
 800572c:	e000ed00 	.word	0xe000ed00

08005730 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	4603      	mov	r3, r0
 8005738:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800573a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800573e:	2b00      	cmp	r3, #0
 8005740:	db0b      	blt.n	800575a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005742:	79fb      	ldrb	r3, [r7, #7]
 8005744:	f003 021f 	and.w	r2, r3, #31
 8005748:	4907      	ldr	r1, [pc, #28]	; (8005768 <__NVIC_EnableIRQ+0x38>)
 800574a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800574e:	095b      	lsrs	r3, r3, #5
 8005750:	2001      	movs	r0, #1
 8005752:	fa00 f202 	lsl.w	r2, r0, r2
 8005756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800575a:	bf00      	nop
 800575c:	370c      	adds	r7, #12
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	e000e100 	.word	0xe000e100

0800576c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	4603      	mov	r3, r0
 8005774:	6039      	str	r1, [r7, #0]
 8005776:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800577c:	2b00      	cmp	r3, #0
 800577e:	db0a      	blt.n	8005796 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	b2da      	uxtb	r2, r3
 8005784:	490c      	ldr	r1, [pc, #48]	; (80057b8 <__NVIC_SetPriority+0x4c>)
 8005786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800578a:	0112      	lsls	r2, r2, #4
 800578c:	b2d2      	uxtb	r2, r2
 800578e:	440b      	add	r3, r1
 8005790:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005794:	e00a      	b.n	80057ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	b2da      	uxtb	r2, r3
 800579a:	4908      	ldr	r1, [pc, #32]	; (80057bc <__NVIC_SetPriority+0x50>)
 800579c:	79fb      	ldrb	r3, [r7, #7]
 800579e:	f003 030f 	and.w	r3, r3, #15
 80057a2:	3b04      	subs	r3, #4
 80057a4:	0112      	lsls	r2, r2, #4
 80057a6:	b2d2      	uxtb	r2, r2
 80057a8:	440b      	add	r3, r1
 80057aa:	761a      	strb	r2, [r3, #24]
}
 80057ac:	bf00      	nop
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr
 80057b8:	e000e100 	.word	0xe000e100
 80057bc:	e000ed00 	.word	0xe000ed00

080057c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b089      	sub	sp, #36	; 0x24
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f003 0307 	and.w	r3, r3, #7
 80057d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	f1c3 0307 	rsb	r3, r3, #7
 80057da:	2b04      	cmp	r3, #4
 80057dc:	bf28      	it	cs
 80057de:	2304      	movcs	r3, #4
 80057e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	3304      	adds	r3, #4
 80057e6:	2b06      	cmp	r3, #6
 80057e8:	d902      	bls.n	80057f0 <NVIC_EncodePriority+0x30>
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	3b03      	subs	r3, #3
 80057ee:	e000      	b.n	80057f2 <NVIC_EncodePriority+0x32>
 80057f0:	2300      	movs	r3, #0
 80057f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057f4:	f04f 32ff 	mov.w	r2, #4294967295
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	fa02 f303 	lsl.w	r3, r2, r3
 80057fe:	43da      	mvns	r2, r3
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	401a      	ands	r2, r3
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005808:	f04f 31ff 	mov.w	r1, #4294967295
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	fa01 f303 	lsl.w	r3, r1, r3
 8005812:	43d9      	mvns	r1, r3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005818:	4313      	orrs	r3, r2
         );
}
 800581a:	4618      	mov	r0, r3
 800581c:	3724      	adds	r7, #36	; 0x24
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr

08005826 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b082      	sub	sp, #8
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7ff ff4c 	bl	80056cc <__NVIC_SetPriorityGrouping>
}
 8005834:	bf00      	nop
 8005836:	3708      	adds	r7, #8
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800583c:	b580      	push	{r7, lr}
 800583e:	b086      	sub	sp, #24
 8005840:	af00      	add	r7, sp, #0
 8005842:	4603      	mov	r3, r0
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
 8005848:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800584a:	2300      	movs	r3, #0
 800584c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800584e:	f7ff ff61 	bl	8005714 <__NVIC_GetPriorityGrouping>
 8005852:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	68b9      	ldr	r1, [r7, #8]
 8005858:	6978      	ldr	r0, [r7, #20]
 800585a:	f7ff ffb1 	bl	80057c0 <NVIC_EncodePriority>
 800585e:	4602      	mov	r2, r0
 8005860:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005864:	4611      	mov	r1, r2
 8005866:	4618      	mov	r0, r3
 8005868:	f7ff ff80 	bl	800576c <__NVIC_SetPriority>
}
 800586c:	bf00      	nop
 800586e:	3718      	adds	r7, #24
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	4603      	mov	r3, r0
 800587c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800587e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005882:	4618      	mov	r0, r3
 8005884:	f7ff ff54 	bl	8005730 <__NVIC_EnableIRQ>
}
 8005888:	bf00      	nop
 800588a:	3708      	adds	r7, #8
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b086      	sub	sp, #24
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005898:	2300      	movs	r3, #0
 800589a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800589c:	f7ff ff0a 	bl	80056b4 <HAL_GetTick>
 80058a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d101      	bne.n	80058ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e099      	b.n	80059e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2202      	movs	r2, #2
 80058b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f022 0201 	bic.w	r2, r2, #1
 80058ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058cc:	e00f      	b.n	80058ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80058ce:	f7ff fef1 	bl	80056b4 <HAL_GetTick>
 80058d2:	4602      	mov	r2, r0
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	2b05      	cmp	r3, #5
 80058da:	d908      	bls.n	80058ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2220      	movs	r2, #32
 80058e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2203      	movs	r2, #3
 80058e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e078      	b.n	80059e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0301 	and.w	r3, r3, #1
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1e8      	bne.n	80058ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	4b38      	ldr	r3, [pc, #224]	; (80059e8 <HAL_DMA_Init+0x158>)
 8005908:	4013      	ands	r3, r2
 800590a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685a      	ldr	r2, [r3, #4]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800591a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005926:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005932:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a1b      	ldr	r3, [r3, #32]
 8005938:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800593a:	697a      	ldr	r2, [r7, #20]
 800593c:	4313      	orrs	r3, r2
 800593e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005944:	2b04      	cmp	r3, #4
 8005946:	d107      	bne.n	8005958 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005950:	4313      	orrs	r3, r2
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	4313      	orrs	r3, r2
 8005956:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	f023 0307 	bic.w	r3, r3, #7
 800596e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005974:	697a      	ldr	r2, [r7, #20]
 8005976:	4313      	orrs	r3, r2
 8005978:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597e:	2b04      	cmp	r3, #4
 8005980:	d117      	bne.n	80059b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	4313      	orrs	r3, r2
 800598a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00e      	beq.n	80059b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 fb01 	bl	8005f9c <DMA_CheckFifoParam>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d008      	beq.n	80059b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2240      	movs	r2, #64	; 0x40
 80059a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80059ae:	2301      	movs	r3, #1
 80059b0:	e016      	b.n	80059e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 fab8 	bl	8005f30 <DMA_CalcBaseAndBitshift>
 80059c0:	4603      	mov	r3, r0
 80059c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059c8:	223f      	movs	r2, #63	; 0x3f
 80059ca:	409a      	lsls	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3718      	adds	r7, #24
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	f010803f 	.word	0xf010803f

080059ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
 80059f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059fa:	2300      	movs	r3, #0
 80059fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a02:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d101      	bne.n	8005a12 <HAL_DMA_Start_IT+0x26>
 8005a0e:	2302      	movs	r3, #2
 8005a10:	e040      	b.n	8005a94 <HAL_DMA_Start_IT+0xa8>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d12f      	bne.n	8005a86 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2202      	movs	r2, #2
 8005a2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	68b9      	ldr	r1, [r7, #8]
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f000 fa4a 	bl	8005ed4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a44:	223f      	movs	r2, #63	; 0x3f
 8005a46:	409a      	lsls	r2, r3
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f042 0216 	orr.w	r2, r2, #22
 8005a5a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d007      	beq.n	8005a74 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f042 0208 	orr.w	r2, r2, #8
 8005a72:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f042 0201 	orr.w	r2, r2, #1
 8005a82:	601a      	str	r2, [r3, #0]
 8005a84:	e005      	b.n	8005a92 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005a8e:	2302      	movs	r3, #2
 8005a90:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3718      	adds	r7, #24
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aa8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005aaa:	f7ff fe03 	bl	80056b4 <HAL_GetTick>
 8005aae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d008      	beq.n	8005ace <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2280      	movs	r2, #128	; 0x80
 8005ac0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e052      	b.n	8005b74 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f022 0216 	bic.w	r2, r2, #22
 8005adc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	695a      	ldr	r2, [r3, #20]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005aec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d103      	bne.n	8005afe <HAL_DMA_Abort+0x62>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d007      	beq.n	8005b0e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f022 0208 	bic.w	r2, r2, #8
 8005b0c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f022 0201 	bic.w	r2, r2, #1
 8005b1c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b1e:	e013      	b.n	8005b48 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b20:	f7ff fdc8 	bl	80056b4 <HAL_GetTick>
 8005b24:	4602      	mov	r2, r0
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	2b05      	cmp	r3, #5
 8005b2c:	d90c      	bls.n	8005b48 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2220      	movs	r2, #32
 8005b32:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2203      	movs	r2, #3
 8005b38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e015      	b.n	8005b74 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1e4      	bne.n	8005b20 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b5a:	223f      	movs	r2, #63	; 0x3f
 8005b5c:	409a      	lsls	r2, r3
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3710      	adds	r7, #16
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d004      	beq.n	8005b9a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2280      	movs	r2, #128	; 0x80
 8005b94:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e00c      	b.n	8005bb4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2205      	movs	r2, #5
 8005b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f022 0201 	bic.w	r2, r2, #1
 8005bb0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b086      	sub	sp, #24
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005bcc:	4b8e      	ldr	r3, [pc, #568]	; (8005e08 <HAL_DMA_IRQHandler+0x248>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a8e      	ldr	r2, [pc, #568]	; (8005e0c <HAL_DMA_IRQHandler+0x24c>)
 8005bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd6:	0a9b      	lsrs	r3, r3, #10
 8005bd8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bde:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bea:	2208      	movs	r2, #8
 8005bec:	409a      	lsls	r2, r3
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d01a      	beq.n	8005c2c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0304 	and.w	r3, r3, #4
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d013      	beq.n	8005c2c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f022 0204 	bic.w	r2, r2, #4
 8005c12:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c18:	2208      	movs	r2, #8
 8005c1a:	409a      	lsls	r2, r3
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c24:	f043 0201 	orr.w	r2, r3, #1
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c30:	2201      	movs	r2, #1
 8005c32:	409a      	lsls	r2, r3
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	4013      	ands	r3, r2
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d012      	beq.n	8005c62 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00b      	beq.n	8005c62 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c4e:	2201      	movs	r2, #1
 8005c50:	409a      	lsls	r2, r3
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c5a:	f043 0202 	orr.w	r2, r3, #2
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c66:	2204      	movs	r2, #4
 8005c68:	409a      	lsls	r2, r3
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d012      	beq.n	8005c98 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0302 	and.w	r3, r3, #2
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00b      	beq.n	8005c98 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c84:	2204      	movs	r2, #4
 8005c86:	409a      	lsls	r2, r3
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c90:	f043 0204 	orr.w	r2, r3, #4
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c9c:	2210      	movs	r2, #16
 8005c9e:	409a      	lsls	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d043      	beq.n	8005d30 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0308 	and.w	r3, r3, #8
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d03c      	beq.n	8005d30 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cba:	2210      	movs	r2, #16
 8005cbc:	409a      	lsls	r2, r3
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d018      	beq.n	8005d02 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d108      	bne.n	8005cf0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d024      	beq.n	8005d30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	4798      	blx	r3
 8005cee:	e01f      	b.n	8005d30 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d01b      	beq.n	8005d30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	4798      	blx	r3
 8005d00:	e016      	b.n	8005d30 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d107      	bne.n	8005d20 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f022 0208 	bic.w	r2, r2, #8
 8005d1e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d003      	beq.n	8005d30 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d34:	2220      	movs	r2, #32
 8005d36:	409a      	lsls	r2, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f000 808f 	beq.w	8005e60 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0310 	and.w	r3, r3, #16
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f000 8087 	beq.w	8005e60 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d56:	2220      	movs	r2, #32
 8005d58:	409a      	lsls	r2, r3
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	2b05      	cmp	r3, #5
 8005d68:	d136      	bne.n	8005dd8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f022 0216 	bic.w	r2, r2, #22
 8005d78:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	695a      	ldr	r2, [r3, #20]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d88:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d103      	bne.n	8005d9a <HAL_DMA_IRQHandler+0x1da>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d007      	beq.n	8005daa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f022 0208 	bic.w	r2, r2, #8
 8005da8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dae:	223f      	movs	r2, #63	; 0x3f
 8005db0:	409a      	lsls	r2, r3
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d07e      	beq.n	8005ecc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	4798      	blx	r3
        }
        return;
 8005dd6:	e079      	b.n	8005ecc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d01d      	beq.n	8005e22 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d10d      	bne.n	8005e10 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d031      	beq.n	8005e60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	4798      	blx	r3
 8005e04:	e02c      	b.n	8005e60 <HAL_DMA_IRQHandler+0x2a0>
 8005e06:	bf00      	nop
 8005e08:	20000008 	.word	0x20000008
 8005e0c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d023      	beq.n	8005e60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	4798      	blx	r3
 8005e20:	e01e      	b.n	8005e60 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d10f      	bne.n	8005e50 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f022 0210 	bic.w	r2, r2, #16
 8005e3e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d003      	beq.n	8005e60 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d032      	beq.n	8005ece <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e6c:	f003 0301 	and.w	r3, r3, #1
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d022      	beq.n	8005eba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2205      	movs	r2, #5
 8005e78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f022 0201 	bic.w	r2, r2, #1
 8005e8a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	3301      	adds	r3, #1
 8005e90:	60bb      	str	r3, [r7, #8]
 8005e92:	697a      	ldr	r2, [r7, #20]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d307      	bcc.n	8005ea8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1f2      	bne.n	8005e8c <HAL_DMA_IRQHandler+0x2cc>
 8005ea6:	e000      	b.n	8005eaa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005ea8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d005      	beq.n	8005ece <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	4798      	blx	r3
 8005eca:	e000      	b.n	8005ece <HAL_DMA_IRQHandler+0x30e>
        return;
 8005ecc:	bf00      	nop
    }
  }
}
 8005ece:	3718      	adds	r7, #24
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	607a      	str	r2, [r7, #4]
 8005ee0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ef0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	683a      	ldr	r2, [r7, #0]
 8005ef8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	2b40      	cmp	r3, #64	; 0x40
 8005f00:	d108      	bne.n	8005f14 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005f12:	e007      	b.n	8005f24 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	60da      	str	r2, [r3, #12]
}
 8005f24:	bf00      	nop
 8005f26:	3714      	adds	r7, #20
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	3b10      	subs	r3, #16
 8005f40:	4a14      	ldr	r2, [pc, #80]	; (8005f94 <DMA_CalcBaseAndBitshift+0x64>)
 8005f42:	fba2 2303 	umull	r2, r3, r2, r3
 8005f46:	091b      	lsrs	r3, r3, #4
 8005f48:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005f4a:	4a13      	ldr	r2, [pc, #76]	; (8005f98 <DMA_CalcBaseAndBitshift+0x68>)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	4413      	add	r3, r2
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	461a      	mov	r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2b03      	cmp	r3, #3
 8005f5c:	d909      	bls.n	8005f72 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005f66:	f023 0303 	bic.w	r3, r3, #3
 8005f6a:	1d1a      	adds	r2, r3, #4
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	659a      	str	r2, [r3, #88]	; 0x58
 8005f70:	e007      	b.n	8005f82 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005f7a:	f023 0303 	bic.w	r3, r3, #3
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3714      	adds	r7, #20
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	aaaaaaab 	.word	0xaaaaaaab
 8005f98:	0800b1e8 	.word	0x0800b1e8

08005f9c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	699b      	ldr	r3, [r3, #24]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d11f      	bne.n	8005ff6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	2b03      	cmp	r3, #3
 8005fba:	d856      	bhi.n	800606a <DMA_CheckFifoParam+0xce>
 8005fbc:	a201      	add	r2, pc, #4	; (adr r2, 8005fc4 <DMA_CheckFifoParam+0x28>)
 8005fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc2:	bf00      	nop
 8005fc4:	08005fd5 	.word	0x08005fd5
 8005fc8:	08005fe7 	.word	0x08005fe7
 8005fcc:	08005fd5 	.word	0x08005fd5
 8005fd0:	0800606b 	.word	0x0800606b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d046      	beq.n	800606e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fe4:	e043      	b.n	800606e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005fee:	d140      	bne.n	8006072 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ff4:	e03d      	b.n	8006072 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ffe:	d121      	bne.n	8006044 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	2b03      	cmp	r3, #3
 8006004:	d837      	bhi.n	8006076 <DMA_CheckFifoParam+0xda>
 8006006:	a201      	add	r2, pc, #4	; (adr r2, 800600c <DMA_CheckFifoParam+0x70>)
 8006008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800600c:	0800601d 	.word	0x0800601d
 8006010:	08006023 	.word	0x08006023
 8006014:	0800601d 	.word	0x0800601d
 8006018:	08006035 	.word	0x08006035
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	73fb      	strb	r3, [r7, #15]
      break;
 8006020:	e030      	b.n	8006084 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006026:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d025      	beq.n	800607a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006032:	e022      	b.n	800607a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006038:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800603c:	d11f      	bne.n	800607e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006042:	e01c      	b.n	800607e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	2b02      	cmp	r3, #2
 8006048:	d903      	bls.n	8006052 <DMA_CheckFifoParam+0xb6>
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	2b03      	cmp	r3, #3
 800604e:	d003      	beq.n	8006058 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006050:	e018      	b.n	8006084 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	73fb      	strb	r3, [r7, #15]
      break;
 8006056:	e015      	b.n	8006084 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00e      	beq.n	8006082 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	73fb      	strb	r3, [r7, #15]
      break;
 8006068:	e00b      	b.n	8006082 <DMA_CheckFifoParam+0xe6>
      break;
 800606a:	bf00      	nop
 800606c:	e00a      	b.n	8006084 <DMA_CheckFifoParam+0xe8>
      break;
 800606e:	bf00      	nop
 8006070:	e008      	b.n	8006084 <DMA_CheckFifoParam+0xe8>
      break;
 8006072:	bf00      	nop
 8006074:	e006      	b.n	8006084 <DMA_CheckFifoParam+0xe8>
      break;
 8006076:	bf00      	nop
 8006078:	e004      	b.n	8006084 <DMA_CheckFifoParam+0xe8>
      break;
 800607a:	bf00      	nop
 800607c:	e002      	b.n	8006084 <DMA_CheckFifoParam+0xe8>
      break;   
 800607e:	bf00      	nop
 8006080:	e000      	b.n	8006084 <DMA_CheckFifoParam+0xe8>
      break;
 8006082:	bf00      	nop
    }
  } 
  
  return status; 
 8006084:	7bfb      	ldrb	r3, [r7, #15]
}
 8006086:	4618      	mov	r0, r3
 8006088:	3714      	adds	r7, #20
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop

08006094 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006094:	b480      	push	{r7}
 8006096:	b089      	sub	sp, #36	; 0x24
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800609e:	2300      	movs	r3, #0
 80060a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80060a2:	2300      	movs	r3, #0
 80060a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80060a6:	2300      	movs	r3, #0
 80060a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80060aa:	2300      	movs	r3, #0
 80060ac:	61fb      	str	r3, [r7, #28]
 80060ae:	e16b      	b.n	8006388 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80060b0:	2201      	movs	r2, #1
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	fa02 f303 	lsl.w	r3, r2, r3
 80060b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	697a      	ldr	r2, [r7, #20]
 80060c0:	4013      	ands	r3, r2
 80060c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80060c4:	693a      	ldr	r2, [r7, #16]
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	f040 815a 	bne.w	8006382 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	f003 0303 	and.w	r3, r3, #3
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d005      	beq.n	80060e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d130      	bne.n	8006148 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	005b      	lsls	r3, r3, #1
 80060f0:	2203      	movs	r2, #3
 80060f2:	fa02 f303 	lsl.w	r3, r2, r3
 80060f6:	43db      	mvns	r3, r3
 80060f8:	69ba      	ldr	r2, [r7, #24]
 80060fa:	4013      	ands	r3, r2
 80060fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	68da      	ldr	r2, [r3, #12]
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	005b      	lsls	r3, r3, #1
 8006106:	fa02 f303 	lsl.w	r3, r2, r3
 800610a:	69ba      	ldr	r2, [r7, #24]
 800610c:	4313      	orrs	r3, r2
 800610e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	69ba      	ldr	r2, [r7, #24]
 8006114:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800611c:	2201      	movs	r2, #1
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	fa02 f303 	lsl.w	r3, r2, r3
 8006124:	43db      	mvns	r3, r3
 8006126:	69ba      	ldr	r2, [r7, #24]
 8006128:	4013      	ands	r3, r2
 800612a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	091b      	lsrs	r3, r3, #4
 8006132:	f003 0201 	and.w	r2, r3, #1
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	fa02 f303 	lsl.w	r3, r2, r3
 800613c:	69ba      	ldr	r2, [r7, #24]
 800613e:	4313      	orrs	r3, r2
 8006140:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	69ba      	ldr	r2, [r7, #24]
 8006146:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	f003 0303 	and.w	r3, r3, #3
 8006150:	2b03      	cmp	r3, #3
 8006152:	d017      	beq.n	8006184 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	005b      	lsls	r3, r3, #1
 800615e:	2203      	movs	r2, #3
 8006160:	fa02 f303 	lsl.w	r3, r2, r3
 8006164:	43db      	mvns	r3, r3
 8006166:	69ba      	ldr	r2, [r7, #24]
 8006168:	4013      	ands	r3, r2
 800616a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	689a      	ldr	r2, [r3, #8]
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	005b      	lsls	r3, r3, #1
 8006174:	fa02 f303 	lsl.w	r3, r2, r3
 8006178:	69ba      	ldr	r2, [r7, #24]
 800617a:	4313      	orrs	r3, r2
 800617c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	69ba      	ldr	r2, [r7, #24]
 8006182:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	f003 0303 	and.w	r3, r3, #3
 800618c:	2b02      	cmp	r3, #2
 800618e:	d123      	bne.n	80061d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	08da      	lsrs	r2, r3, #3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	3208      	adds	r2, #8
 8006198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800619c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	f003 0307 	and.w	r3, r3, #7
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	220f      	movs	r2, #15
 80061a8:	fa02 f303 	lsl.w	r3, r2, r3
 80061ac:	43db      	mvns	r3, r3
 80061ae:	69ba      	ldr	r2, [r7, #24]
 80061b0:	4013      	ands	r3, r2
 80061b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	691a      	ldr	r2, [r3, #16]
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	f003 0307 	and.w	r3, r3, #7
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	fa02 f303 	lsl.w	r3, r2, r3
 80061c4:	69ba      	ldr	r2, [r7, #24]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	08da      	lsrs	r2, r3, #3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	3208      	adds	r2, #8
 80061d2:	69b9      	ldr	r1, [r7, #24]
 80061d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	005b      	lsls	r3, r3, #1
 80061e2:	2203      	movs	r2, #3
 80061e4:	fa02 f303 	lsl.w	r3, r2, r3
 80061e8:	43db      	mvns	r3, r3
 80061ea:	69ba      	ldr	r2, [r7, #24]
 80061ec:	4013      	ands	r3, r2
 80061ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	f003 0203 	and.w	r2, r3, #3
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	005b      	lsls	r3, r3, #1
 80061fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006200:	69ba      	ldr	r2, [r7, #24]
 8006202:	4313      	orrs	r3, r2
 8006204:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	69ba      	ldr	r2, [r7, #24]
 800620a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006214:	2b00      	cmp	r3, #0
 8006216:	f000 80b4 	beq.w	8006382 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800621a:	2300      	movs	r3, #0
 800621c:	60fb      	str	r3, [r7, #12]
 800621e:	4b60      	ldr	r3, [pc, #384]	; (80063a0 <HAL_GPIO_Init+0x30c>)
 8006220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006222:	4a5f      	ldr	r2, [pc, #380]	; (80063a0 <HAL_GPIO_Init+0x30c>)
 8006224:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006228:	6453      	str	r3, [r2, #68]	; 0x44
 800622a:	4b5d      	ldr	r3, [pc, #372]	; (80063a0 <HAL_GPIO_Init+0x30c>)
 800622c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800622e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006232:	60fb      	str	r3, [r7, #12]
 8006234:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006236:	4a5b      	ldr	r2, [pc, #364]	; (80063a4 <HAL_GPIO_Init+0x310>)
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	089b      	lsrs	r3, r3, #2
 800623c:	3302      	adds	r3, #2
 800623e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006242:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	f003 0303 	and.w	r3, r3, #3
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	220f      	movs	r2, #15
 800624e:	fa02 f303 	lsl.w	r3, r2, r3
 8006252:	43db      	mvns	r3, r3
 8006254:	69ba      	ldr	r2, [r7, #24]
 8006256:	4013      	ands	r3, r2
 8006258:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a52      	ldr	r2, [pc, #328]	; (80063a8 <HAL_GPIO_Init+0x314>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d02b      	beq.n	80062ba <HAL_GPIO_Init+0x226>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a51      	ldr	r2, [pc, #324]	; (80063ac <HAL_GPIO_Init+0x318>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d025      	beq.n	80062b6 <HAL_GPIO_Init+0x222>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a50      	ldr	r2, [pc, #320]	; (80063b0 <HAL_GPIO_Init+0x31c>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d01f      	beq.n	80062b2 <HAL_GPIO_Init+0x21e>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a4f      	ldr	r2, [pc, #316]	; (80063b4 <HAL_GPIO_Init+0x320>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d019      	beq.n	80062ae <HAL_GPIO_Init+0x21a>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a4e      	ldr	r2, [pc, #312]	; (80063b8 <HAL_GPIO_Init+0x324>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d013      	beq.n	80062aa <HAL_GPIO_Init+0x216>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a4d      	ldr	r2, [pc, #308]	; (80063bc <HAL_GPIO_Init+0x328>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d00d      	beq.n	80062a6 <HAL_GPIO_Init+0x212>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a4c      	ldr	r2, [pc, #304]	; (80063c0 <HAL_GPIO_Init+0x32c>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d007      	beq.n	80062a2 <HAL_GPIO_Init+0x20e>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a4b      	ldr	r2, [pc, #300]	; (80063c4 <HAL_GPIO_Init+0x330>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d101      	bne.n	800629e <HAL_GPIO_Init+0x20a>
 800629a:	2307      	movs	r3, #7
 800629c:	e00e      	b.n	80062bc <HAL_GPIO_Init+0x228>
 800629e:	2308      	movs	r3, #8
 80062a0:	e00c      	b.n	80062bc <HAL_GPIO_Init+0x228>
 80062a2:	2306      	movs	r3, #6
 80062a4:	e00a      	b.n	80062bc <HAL_GPIO_Init+0x228>
 80062a6:	2305      	movs	r3, #5
 80062a8:	e008      	b.n	80062bc <HAL_GPIO_Init+0x228>
 80062aa:	2304      	movs	r3, #4
 80062ac:	e006      	b.n	80062bc <HAL_GPIO_Init+0x228>
 80062ae:	2303      	movs	r3, #3
 80062b0:	e004      	b.n	80062bc <HAL_GPIO_Init+0x228>
 80062b2:	2302      	movs	r3, #2
 80062b4:	e002      	b.n	80062bc <HAL_GPIO_Init+0x228>
 80062b6:	2301      	movs	r3, #1
 80062b8:	e000      	b.n	80062bc <HAL_GPIO_Init+0x228>
 80062ba:	2300      	movs	r3, #0
 80062bc:	69fa      	ldr	r2, [r7, #28]
 80062be:	f002 0203 	and.w	r2, r2, #3
 80062c2:	0092      	lsls	r2, r2, #2
 80062c4:	4093      	lsls	r3, r2
 80062c6:	69ba      	ldr	r2, [r7, #24]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80062cc:	4935      	ldr	r1, [pc, #212]	; (80063a4 <HAL_GPIO_Init+0x310>)
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	089b      	lsrs	r3, r3, #2
 80062d2:	3302      	adds	r3, #2
 80062d4:	69ba      	ldr	r2, [r7, #24]
 80062d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80062da:	4b3b      	ldr	r3, [pc, #236]	; (80063c8 <HAL_GPIO_Init+0x334>)
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	43db      	mvns	r3, r3
 80062e4:	69ba      	ldr	r2, [r7, #24]
 80062e6:	4013      	ands	r3, r2
 80062e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d003      	beq.n	80062fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80062f6:	69ba      	ldr	r2, [r7, #24]
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80062fe:	4a32      	ldr	r2, [pc, #200]	; (80063c8 <HAL_GPIO_Init+0x334>)
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006304:	4b30      	ldr	r3, [pc, #192]	; (80063c8 <HAL_GPIO_Init+0x334>)
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	43db      	mvns	r3, r3
 800630e:	69ba      	ldr	r2, [r7, #24]
 8006310:	4013      	ands	r3, r2
 8006312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800631c:	2b00      	cmp	r3, #0
 800631e:	d003      	beq.n	8006328 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006320:	69ba      	ldr	r2, [r7, #24]
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	4313      	orrs	r3, r2
 8006326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006328:	4a27      	ldr	r2, [pc, #156]	; (80063c8 <HAL_GPIO_Init+0x334>)
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800632e:	4b26      	ldr	r3, [pc, #152]	; (80063c8 <HAL_GPIO_Init+0x334>)
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	43db      	mvns	r3, r3
 8006338:	69ba      	ldr	r2, [r7, #24]
 800633a:	4013      	ands	r3, r2
 800633c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d003      	beq.n	8006352 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800634a:	69ba      	ldr	r2, [r7, #24]
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	4313      	orrs	r3, r2
 8006350:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006352:	4a1d      	ldr	r2, [pc, #116]	; (80063c8 <HAL_GPIO_Init+0x334>)
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006358:	4b1b      	ldr	r3, [pc, #108]	; (80063c8 <HAL_GPIO_Init+0x334>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	43db      	mvns	r3, r3
 8006362:	69ba      	ldr	r2, [r7, #24]
 8006364:	4013      	ands	r3, r2
 8006366:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006370:	2b00      	cmp	r3, #0
 8006372:	d003      	beq.n	800637c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006374:	69ba      	ldr	r2, [r7, #24]
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	4313      	orrs	r3, r2
 800637a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800637c:	4a12      	ldr	r2, [pc, #72]	; (80063c8 <HAL_GPIO_Init+0x334>)
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	3301      	adds	r3, #1
 8006386:	61fb      	str	r3, [r7, #28]
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	2b0f      	cmp	r3, #15
 800638c:	f67f ae90 	bls.w	80060b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006390:	bf00      	nop
 8006392:	bf00      	nop
 8006394:	3724      	adds	r7, #36	; 0x24
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	40023800 	.word	0x40023800
 80063a4:	40013800 	.word	0x40013800
 80063a8:	40020000 	.word	0x40020000
 80063ac:	40020400 	.word	0x40020400
 80063b0:	40020800 	.word	0x40020800
 80063b4:	40020c00 	.word	0x40020c00
 80063b8:	40021000 	.word	0x40021000
 80063bc:	40021400 	.word	0x40021400
 80063c0:	40021800 	.word	0x40021800
 80063c4:	40021c00 	.word	0x40021c00
 80063c8:	40013c00 	.word	0x40013c00

080063cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	460b      	mov	r3, r1
 80063d6:	807b      	strh	r3, [r7, #2]
 80063d8:	4613      	mov	r3, r2
 80063da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80063dc:	787b      	ldrb	r3, [r7, #1]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d003      	beq.n	80063ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80063e2:	887a      	ldrh	r2, [r7, #2]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80063e8:	e003      	b.n	80063f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80063ea:	887b      	ldrh	r3, [r7, #2]
 80063ec:	041a      	lsls	r2, r3, #16
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	619a      	str	r2, [r3, #24]
}
 80063f2:	bf00      	nop
 80063f4:	370c      	adds	r7, #12
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr

080063fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80063fe:	b480      	push	{r7}
 8006400:	b085      	sub	sp, #20
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
 8006406:	460b      	mov	r3, r1
 8006408:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	695b      	ldr	r3, [r3, #20]
 800640e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006410:	887a      	ldrh	r2, [r7, #2]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	4013      	ands	r3, r2
 8006416:	041a      	lsls	r2, r3, #16
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	43d9      	mvns	r1, r3
 800641c:	887b      	ldrh	r3, [r7, #2]
 800641e:	400b      	ands	r3, r1
 8006420:	431a      	orrs	r2, r3
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	619a      	str	r2, [r3, #24]
}
 8006426:	bf00      	nop
 8006428:	3714      	adds	r7, #20
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
	...

08006434 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b086      	sub	sp, #24
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d101      	bne.n	8006446 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e267      	b.n	8006916 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 0301 	and.w	r3, r3, #1
 800644e:	2b00      	cmp	r3, #0
 8006450:	d075      	beq.n	800653e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006452:	4b88      	ldr	r3, [pc, #544]	; (8006674 <HAL_RCC_OscConfig+0x240>)
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	f003 030c 	and.w	r3, r3, #12
 800645a:	2b04      	cmp	r3, #4
 800645c:	d00c      	beq.n	8006478 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800645e:	4b85      	ldr	r3, [pc, #532]	; (8006674 <HAL_RCC_OscConfig+0x240>)
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006466:	2b08      	cmp	r3, #8
 8006468:	d112      	bne.n	8006490 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800646a:	4b82      	ldr	r3, [pc, #520]	; (8006674 <HAL_RCC_OscConfig+0x240>)
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006472:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006476:	d10b      	bne.n	8006490 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006478:	4b7e      	ldr	r3, [pc, #504]	; (8006674 <HAL_RCC_OscConfig+0x240>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d05b      	beq.n	800653c <HAL_RCC_OscConfig+0x108>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d157      	bne.n	800653c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	e242      	b.n	8006916 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006498:	d106      	bne.n	80064a8 <HAL_RCC_OscConfig+0x74>
 800649a:	4b76      	ldr	r3, [pc, #472]	; (8006674 <HAL_RCC_OscConfig+0x240>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a75      	ldr	r2, [pc, #468]	; (8006674 <HAL_RCC_OscConfig+0x240>)
 80064a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064a4:	6013      	str	r3, [r2, #0]
 80064a6:	e01d      	b.n	80064e4 <HAL_RCC_OscConfig+0xb0>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064b0:	d10c      	bne.n	80064cc <HAL_RCC_OscConfig+0x98>
 80064b2:	4b70      	ldr	r3, [pc, #448]	; (8006674 <HAL_RCC_OscConfig+0x240>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a6f      	ldr	r2, [pc, #444]	; (8006674 <HAL_RCC_OscConfig+0x240>)
 80064b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064bc:	6013      	str	r3, [r2, #0]
 80064be:	4b6d      	ldr	r3, [pc, #436]	; (8006674 <HAL_RCC_OscConfig+0x240>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a6c      	ldr	r2, [pc, #432]	; (8006674 <HAL_RCC_OscConfig+0x240>)
 80064c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064c8:	6013      	str	r3, [r2, #0]
 80064ca:	e00b      	b.n	80064e4 <HAL_RCC_OscConfig+0xb0>
 80064cc:	4b69      	ldr	r3, [pc, #420]	; (8006674 <HAL_RCC_OscConfig+0x240>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a68      	ldr	r2, [pc, #416]	; (8006674 <HAL_RCC_OscConfig+0x240>)
 80064d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064d6:	6013      	str	r3, [r2, #0]
 80064d8:	4b66      	ldr	r3, [pc, #408]	; (8006674 <HAL_RCC_OscConfig+0x240>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a65      	ldr	r2, [pc, #404]	; (8006674 <HAL_RCC_OscConfig+0x240>)
 80064de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d013      	beq.n	8006514 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064ec:	f7ff f8e2 	bl	80056b4 <HAL_GetTick>
 80064f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064f2:	e008      	b.n	8006506 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064f4:	f7ff f8de 	bl	80056b4 <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	2b64      	cmp	r3, #100	; 0x64
 8006500:	d901      	bls.n	8006506 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e207      	b.n	8006916 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006506:	4b5b      	ldr	r3, [pc, #364]	; (8006674 <HAL_RCC_OscConfig+0x240>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d0f0      	beq.n	80064f4 <HAL_RCC_OscConfig+0xc0>
 8006512:	e014      	b.n	800653e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006514:	f7ff f8ce 	bl	80056b4 <HAL_GetTick>
 8006518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800651a:	e008      	b.n	800652e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800651c:	f7ff f8ca 	bl	80056b4 <HAL_GetTick>
 8006520:	4602      	mov	r2, r0
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	2b64      	cmp	r3, #100	; 0x64
 8006528:	d901      	bls.n	800652e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e1f3      	b.n	8006916 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800652e:	4b51      	ldr	r3, [pc, #324]	; (8006674 <HAL_RCC_OscConfig+0x240>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d1f0      	bne.n	800651c <HAL_RCC_OscConfig+0xe8>
 800653a:	e000      	b.n	800653e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800653c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 0302 	and.w	r3, r3, #2
 8006546:	2b00      	cmp	r3, #0
 8006548:	d063      	beq.n	8006612 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800654a:	4b4a      	ldr	r3, [pc, #296]	; (8006674 <HAL_RCC_OscConfig+0x240>)
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	f003 030c 	and.w	r3, r3, #12
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00b      	beq.n	800656e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006556:	4b47      	ldr	r3, [pc, #284]	; (8006674 <HAL_RCC_OscConfig+0x240>)
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800655e:	2b08      	cmp	r3, #8
 8006560:	d11c      	bne.n	800659c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006562:	4b44      	ldr	r3, [pc, #272]	; (8006674 <HAL_RCC_OscConfig+0x240>)
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800656a:	2b00      	cmp	r3, #0
 800656c:	d116      	bne.n	800659c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800656e:	4b41      	ldr	r3, [pc, #260]	; (8006674 <HAL_RCC_OscConfig+0x240>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 0302 	and.w	r3, r3, #2
 8006576:	2b00      	cmp	r3, #0
 8006578:	d005      	beq.n	8006586 <HAL_RCC_OscConfig+0x152>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	2b01      	cmp	r3, #1
 8006580:	d001      	beq.n	8006586 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e1c7      	b.n	8006916 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006586:	4b3b      	ldr	r3, [pc, #236]	; (8006674 <HAL_RCC_OscConfig+0x240>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	00db      	lsls	r3, r3, #3
 8006594:	4937      	ldr	r1, [pc, #220]	; (8006674 <HAL_RCC_OscConfig+0x240>)
 8006596:	4313      	orrs	r3, r2
 8006598:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800659a:	e03a      	b.n	8006612 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d020      	beq.n	80065e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065a4:	4b34      	ldr	r3, [pc, #208]	; (8006678 <HAL_RCC_OscConfig+0x244>)
 80065a6:	2201      	movs	r2, #1
 80065a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065aa:	f7ff f883 	bl	80056b4 <HAL_GetTick>
 80065ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065b0:	e008      	b.n	80065c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065b2:	f7ff f87f 	bl	80056b4 <HAL_GetTick>
 80065b6:	4602      	mov	r2, r0
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d901      	bls.n	80065c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e1a8      	b.n	8006916 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065c4:	4b2b      	ldr	r3, [pc, #172]	; (8006674 <HAL_RCC_OscConfig+0x240>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 0302 	and.w	r3, r3, #2
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d0f0      	beq.n	80065b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065d0:	4b28      	ldr	r3, [pc, #160]	; (8006674 <HAL_RCC_OscConfig+0x240>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	00db      	lsls	r3, r3, #3
 80065de:	4925      	ldr	r1, [pc, #148]	; (8006674 <HAL_RCC_OscConfig+0x240>)
 80065e0:	4313      	orrs	r3, r2
 80065e2:	600b      	str	r3, [r1, #0]
 80065e4:	e015      	b.n	8006612 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065e6:	4b24      	ldr	r3, [pc, #144]	; (8006678 <HAL_RCC_OscConfig+0x244>)
 80065e8:	2200      	movs	r2, #0
 80065ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ec:	f7ff f862 	bl	80056b4 <HAL_GetTick>
 80065f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065f2:	e008      	b.n	8006606 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065f4:	f7ff f85e 	bl	80056b4 <HAL_GetTick>
 80065f8:	4602      	mov	r2, r0
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	2b02      	cmp	r3, #2
 8006600:	d901      	bls.n	8006606 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e187      	b.n	8006916 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006606:	4b1b      	ldr	r3, [pc, #108]	; (8006674 <HAL_RCC_OscConfig+0x240>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 0302 	and.w	r3, r3, #2
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1f0      	bne.n	80065f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 0308 	and.w	r3, r3, #8
 800661a:	2b00      	cmp	r3, #0
 800661c:	d036      	beq.n	800668c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	695b      	ldr	r3, [r3, #20]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d016      	beq.n	8006654 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006626:	4b15      	ldr	r3, [pc, #84]	; (800667c <HAL_RCC_OscConfig+0x248>)
 8006628:	2201      	movs	r2, #1
 800662a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800662c:	f7ff f842 	bl	80056b4 <HAL_GetTick>
 8006630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006632:	e008      	b.n	8006646 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006634:	f7ff f83e 	bl	80056b4 <HAL_GetTick>
 8006638:	4602      	mov	r2, r0
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	2b02      	cmp	r3, #2
 8006640:	d901      	bls.n	8006646 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006642:	2303      	movs	r3, #3
 8006644:	e167      	b.n	8006916 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006646:	4b0b      	ldr	r3, [pc, #44]	; (8006674 <HAL_RCC_OscConfig+0x240>)
 8006648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800664a:	f003 0302 	and.w	r3, r3, #2
 800664e:	2b00      	cmp	r3, #0
 8006650:	d0f0      	beq.n	8006634 <HAL_RCC_OscConfig+0x200>
 8006652:	e01b      	b.n	800668c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006654:	4b09      	ldr	r3, [pc, #36]	; (800667c <HAL_RCC_OscConfig+0x248>)
 8006656:	2200      	movs	r2, #0
 8006658:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800665a:	f7ff f82b 	bl	80056b4 <HAL_GetTick>
 800665e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006660:	e00e      	b.n	8006680 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006662:	f7ff f827 	bl	80056b4 <HAL_GetTick>
 8006666:	4602      	mov	r2, r0
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	1ad3      	subs	r3, r2, r3
 800666c:	2b02      	cmp	r3, #2
 800666e:	d907      	bls.n	8006680 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006670:	2303      	movs	r3, #3
 8006672:	e150      	b.n	8006916 <HAL_RCC_OscConfig+0x4e2>
 8006674:	40023800 	.word	0x40023800
 8006678:	42470000 	.word	0x42470000
 800667c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006680:	4b88      	ldr	r3, [pc, #544]	; (80068a4 <HAL_RCC_OscConfig+0x470>)
 8006682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006684:	f003 0302 	and.w	r3, r3, #2
 8006688:	2b00      	cmp	r3, #0
 800668a:	d1ea      	bne.n	8006662 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 0304 	and.w	r3, r3, #4
 8006694:	2b00      	cmp	r3, #0
 8006696:	f000 8097 	beq.w	80067c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800669a:	2300      	movs	r3, #0
 800669c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800669e:	4b81      	ldr	r3, [pc, #516]	; (80068a4 <HAL_RCC_OscConfig+0x470>)
 80066a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d10f      	bne.n	80066ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066aa:	2300      	movs	r3, #0
 80066ac:	60bb      	str	r3, [r7, #8]
 80066ae:	4b7d      	ldr	r3, [pc, #500]	; (80068a4 <HAL_RCC_OscConfig+0x470>)
 80066b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b2:	4a7c      	ldr	r2, [pc, #496]	; (80068a4 <HAL_RCC_OscConfig+0x470>)
 80066b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066b8:	6413      	str	r3, [r2, #64]	; 0x40
 80066ba:	4b7a      	ldr	r3, [pc, #488]	; (80068a4 <HAL_RCC_OscConfig+0x470>)
 80066bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066c2:	60bb      	str	r3, [r7, #8]
 80066c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066c6:	2301      	movs	r3, #1
 80066c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066ca:	4b77      	ldr	r3, [pc, #476]	; (80068a8 <HAL_RCC_OscConfig+0x474>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d118      	bne.n	8006708 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80066d6:	4b74      	ldr	r3, [pc, #464]	; (80068a8 <HAL_RCC_OscConfig+0x474>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a73      	ldr	r2, [pc, #460]	; (80068a8 <HAL_RCC_OscConfig+0x474>)
 80066dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066e2:	f7fe ffe7 	bl	80056b4 <HAL_GetTick>
 80066e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066e8:	e008      	b.n	80066fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066ea:	f7fe ffe3 	bl	80056b4 <HAL_GetTick>
 80066ee:	4602      	mov	r2, r0
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	1ad3      	subs	r3, r2, r3
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d901      	bls.n	80066fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e10c      	b.n	8006916 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066fc:	4b6a      	ldr	r3, [pc, #424]	; (80068a8 <HAL_RCC_OscConfig+0x474>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006704:	2b00      	cmp	r3, #0
 8006706:	d0f0      	beq.n	80066ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	2b01      	cmp	r3, #1
 800670e:	d106      	bne.n	800671e <HAL_RCC_OscConfig+0x2ea>
 8006710:	4b64      	ldr	r3, [pc, #400]	; (80068a4 <HAL_RCC_OscConfig+0x470>)
 8006712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006714:	4a63      	ldr	r2, [pc, #396]	; (80068a4 <HAL_RCC_OscConfig+0x470>)
 8006716:	f043 0301 	orr.w	r3, r3, #1
 800671a:	6713      	str	r3, [r2, #112]	; 0x70
 800671c:	e01c      	b.n	8006758 <HAL_RCC_OscConfig+0x324>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	2b05      	cmp	r3, #5
 8006724:	d10c      	bne.n	8006740 <HAL_RCC_OscConfig+0x30c>
 8006726:	4b5f      	ldr	r3, [pc, #380]	; (80068a4 <HAL_RCC_OscConfig+0x470>)
 8006728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800672a:	4a5e      	ldr	r2, [pc, #376]	; (80068a4 <HAL_RCC_OscConfig+0x470>)
 800672c:	f043 0304 	orr.w	r3, r3, #4
 8006730:	6713      	str	r3, [r2, #112]	; 0x70
 8006732:	4b5c      	ldr	r3, [pc, #368]	; (80068a4 <HAL_RCC_OscConfig+0x470>)
 8006734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006736:	4a5b      	ldr	r2, [pc, #364]	; (80068a4 <HAL_RCC_OscConfig+0x470>)
 8006738:	f043 0301 	orr.w	r3, r3, #1
 800673c:	6713      	str	r3, [r2, #112]	; 0x70
 800673e:	e00b      	b.n	8006758 <HAL_RCC_OscConfig+0x324>
 8006740:	4b58      	ldr	r3, [pc, #352]	; (80068a4 <HAL_RCC_OscConfig+0x470>)
 8006742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006744:	4a57      	ldr	r2, [pc, #348]	; (80068a4 <HAL_RCC_OscConfig+0x470>)
 8006746:	f023 0301 	bic.w	r3, r3, #1
 800674a:	6713      	str	r3, [r2, #112]	; 0x70
 800674c:	4b55      	ldr	r3, [pc, #340]	; (80068a4 <HAL_RCC_OscConfig+0x470>)
 800674e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006750:	4a54      	ldr	r2, [pc, #336]	; (80068a4 <HAL_RCC_OscConfig+0x470>)
 8006752:	f023 0304 	bic.w	r3, r3, #4
 8006756:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d015      	beq.n	800678c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006760:	f7fe ffa8 	bl	80056b4 <HAL_GetTick>
 8006764:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006766:	e00a      	b.n	800677e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006768:	f7fe ffa4 	bl	80056b4 <HAL_GetTick>
 800676c:	4602      	mov	r2, r0
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	f241 3288 	movw	r2, #5000	; 0x1388
 8006776:	4293      	cmp	r3, r2
 8006778:	d901      	bls.n	800677e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	e0cb      	b.n	8006916 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800677e:	4b49      	ldr	r3, [pc, #292]	; (80068a4 <HAL_RCC_OscConfig+0x470>)
 8006780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006782:	f003 0302 	and.w	r3, r3, #2
 8006786:	2b00      	cmp	r3, #0
 8006788:	d0ee      	beq.n	8006768 <HAL_RCC_OscConfig+0x334>
 800678a:	e014      	b.n	80067b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800678c:	f7fe ff92 	bl	80056b4 <HAL_GetTick>
 8006790:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006792:	e00a      	b.n	80067aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006794:	f7fe ff8e 	bl	80056b4 <HAL_GetTick>
 8006798:	4602      	mov	r2, r0
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	f241 3288 	movw	r2, #5000	; 0x1388
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d901      	bls.n	80067aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e0b5      	b.n	8006916 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067aa:	4b3e      	ldr	r3, [pc, #248]	; (80068a4 <HAL_RCC_OscConfig+0x470>)
 80067ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ae:	f003 0302 	and.w	r3, r3, #2
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d1ee      	bne.n	8006794 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80067b6:	7dfb      	ldrb	r3, [r7, #23]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d105      	bne.n	80067c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067bc:	4b39      	ldr	r3, [pc, #228]	; (80068a4 <HAL_RCC_OscConfig+0x470>)
 80067be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c0:	4a38      	ldr	r2, [pc, #224]	; (80068a4 <HAL_RCC_OscConfig+0x470>)
 80067c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	699b      	ldr	r3, [r3, #24]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	f000 80a1 	beq.w	8006914 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80067d2:	4b34      	ldr	r3, [pc, #208]	; (80068a4 <HAL_RCC_OscConfig+0x470>)
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	f003 030c 	and.w	r3, r3, #12
 80067da:	2b08      	cmp	r3, #8
 80067dc:	d05c      	beq.n	8006898 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	699b      	ldr	r3, [r3, #24]
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	d141      	bne.n	800686a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067e6:	4b31      	ldr	r3, [pc, #196]	; (80068ac <HAL_RCC_OscConfig+0x478>)
 80067e8:	2200      	movs	r2, #0
 80067ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067ec:	f7fe ff62 	bl	80056b4 <HAL_GetTick>
 80067f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067f2:	e008      	b.n	8006806 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067f4:	f7fe ff5e 	bl	80056b4 <HAL_GetTick>
 80067f8:	4602      	mov	r2, r0
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d901      	bls.n	8006806 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	e087      	b.n	8006916 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006806:	4b27      	ldr	r3, [pc, #156]	; (80068a4 <HAL_RCC_OscConfig+0x470>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800680e:	2b00      	cmp	r3, #0
 8006810:	d1f0      	bne.n	80067f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	69da      	ldr	r2, [r3, #28]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a1b      	ldr	r3, [r3, #32]
 800681a:	431a      	orrs	r2, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006820:	019b      	lsls	r3, r3, #6
 8006822:	431a      	orrs	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006828:	085b      	lsrs	r3, r3, #1
 800682a:	3b01      	subs	r3, #1
 800682c:	041b      	lsls	r3, r3, #16
 800682e:	431a      	orrs	r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006834:	061b      	lsls	r3, r3, #24
 8006836:	491b      	ldr	r1, [pc, #108]	; (80068a4 <HAL_RCC_OscConfig+0x470>)
 8006838:	4313      	orrs	r3, r2
 800683a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800683c:	4b1b      	ldr	r3, [pc, #108]	; (80068ac <HAL_RCC_OscConfig+0x478>)
 800683e:	2201      	movs	r2, #1
 8006840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006842:	f7fe ff37 	bl	80056b4 <HAL_GetTick>
 8006846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006848:	e008      	b.n	800685c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800684a:	f7fe ff33 	bl	80056b4 <HAL_GetTick>
 800684e:	4602      	mov	r2, r0
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	2b02      	cmp	r3, #2
 8006856:	d901      	bls.n	800685c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006858:	2303      	movs	r3, #3
 800685a:	e05c      	b.n	8006916 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800685c:	4b11      	ldr	r3, [pc, #68]	; (80068a4 <HAL_RCC_OscConfig+0x470>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006864:	2b00      	cmp	r3, #0
 8006866:	d0f0      	beq.n	800684a <HAL_RCC_OscConfig+0x416>
 8006868:	e054      	b.n	8006914 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800686a:	4b10      	ldr	r3, [pc, #64]	; (80068ac <HAL_RCC_OscConfig+0x478>)
 800686c:	2200      	movs	r2, #0
 800686e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006870:	f7fe ff20 	bl	80056b4 <HAL_GetTick>
 8006874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006876:	e008      	b.n	800688a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006878:	f7fe ff1c 	bl	80056b4 <HAL_GetTick>
 800687c:	4602      	mov	r2, r0
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	2b02      	cmp	r3, #2
 8006884:	d901      	bls.n	800688a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e045      	b.n	8006916 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800688a:	4b06      	ldr	r3, [pc, #24]	; (80068a4 <HAL_RCC_OscConfig+0x470>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1f0      	bne.n	8006878 <HAL_RCC_OscConfig+0x444>
 8006896:	e03d      	b.n	8006914 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	699b      	ldr	r3, [r3, #24]
 800689c:	2b01      	cmp	r3, #1
 800689e:	d107      	bne.n	80068b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e038      	b.n	8006916 <HAL_RCC_OscConfig+0x4e2>
 80068a4:	40023800 	.word	0x40023800
 80068a8:	40007000 	.word	0x40007000
 80068ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80068b0:	4b1b      	ldr	r3, [pc, #108]	; (8006920 <HAL_RCC_OscConfig+0x4ec>)
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d028      	beq.n	8006910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d121      	bne.n	8006910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d11a      	bne.n	8006910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80068e0:	4013      	ands	r3, r2
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80068e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d111      	bne.n	8006910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f6:	085b      	lsrs	r3, r3, #1
 80068f8:	3b01      	subs	r3, #1
 80068fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d107      	bne.n	8006910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800690c:	429a      	cmp	r2, r3
 800690e:	d001      	beq.n	8006914 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	e000      	b.n	8006916 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3718      	adds	r7, #24
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	40023800 	.word	0x40023800

08006924 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d101      	bne.n	8006938 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	e0cc      	b.n	8006ad2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006938:	4b68      	ldr	r3, [pc, #416]	; (8006adc <HAL_RCC_ClockConfig+0x1b8>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 0307 	and.w	r3, r3, #7
 8006940:	683a      	ldr	r2, [r7, #0]
 8006942:	429a      	cmp	r2, r3
 8006944:	d90c      	bls.n	8006960 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006946:	4b65      	ldr	r3, [pc, #404]	; (8006adc <HAL_RCC_ClockConfig+0x1b8>)
 8006948:	683a      	ldr	r2, [r7, #0]
 800694a:	b2d2      	uxtb	r2, r2
 800694c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800694e:	4b63      	ldr	r3, [pc, #396]	; (8006adc <HAL_RCC_ClockConfig+0x1b8>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0307 	and.w	r3, r3, #7
 8006956:	683a      	ldr	r2, [r7, #0]
 8006958:	429a      	cmp	r2, r3
 800695a:	d001      	beq.n	8006960 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e0b8      	b.n	8006ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0302 	and.w	r3, r3, #2
 8006968:	2b00      	cmp	r3, #0
 800696a:	d020      	beq.n	80069ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 0304 	and.w	r3, r3, #4
 8006974:	2b00      	cmp	r3, #0
 8006976:	d005      	beq.n	8006984 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006978:	4b59      	ldr	r3, [pc, #356]	; (8006ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	4a58      	ldr	r2, [pc, #352]	; (8006ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800697e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006982:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0308 	and.w	r3, r3, #8
 800698c:	2b00      	cmp	r3, #0
 800698e:	d005      	beq.n	800699c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006990:	4b53      	ldr	r3, [pc, #332]	; (8006ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	4a52      	ldr	r2, [pc, #328]	; (8006ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8006996:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800699a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800699c:	4b50      	ldr	r3, [pc, #320]	; (8006ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	494d      	ldr	r1, [pc, #308]	; (8006ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80069aa:	4313      	orrs	r3, r2
 80069ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 0301 	and.w	r3, r3, #1
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d044      	beq.n	8006a44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d107      	bne.n	80069d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069c2:	4b47      	ldr	r3, [pc, #284]	; (8006ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d119      	bne.n	8006a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e07f      	b.n	8006ad2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d003      	beq.n	80069e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80069de:	2b03      	cmp	r3, #3
 80069e0:	d107      	bne.n	80069f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069e2:	4b3f      	ldr	r3, [pc, #252]	; (8006ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d109      	bne.n	8006a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e06f      	b.n	8006ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069f2:	4b3b      	ldr	r3, [pc, #236]	; (8006ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 0302 	and.w	r3, r3, #2
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d101      	bne.n	8006a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e067      	b.n	8006ad2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a02:	4b37      	ldr	r3, [pc, #220]	; (8006ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	f023 0203 	bic.w	r2, r3, #3
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	4934      	ldr	r1, [pc, #208]	; (8006ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a10:	4313      	orrs	r3, r2
 8006a12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a14:	f7fe fe4e 	bl	80056b4 <HAL_GetTick>
 8006a18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a1a:	e00a      	b.n	8006a32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a1c:	f7fe fe4a 	bl	80056b4 <HAL_GetTick>
 8006a20:	4602      	mov	r2, r0
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d901      	bls.n	8006a32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	e04f      	b.n	8006ad2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a32:	4b2b      	ldr	r3, [pc, #172]	; (8006ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	f003 020c 	and.w	r2, r3, #12
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d1eb      	bne.n	8006a1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a44:	4b25      	ldr	r3, [pc, #148]	; (8006adc <HAL_RCC_ClockConfig+0x1b8>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 0307 	and.w	r3, r3, #7
 8006a4c:	683a      	ldr	r2, [r7, #0]
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d20c      	bcs.n	8006a6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a52:	4b22      	ldr	r3, [pc, #136]	; (8006adc <HAL_RCC_ClockConfig+0x1b8>)
 8006a54:	683a      	ldr	r2, [r7, #0]
 8006a56:	b2d2      	uxtb	r2, r2
 8006a58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a5a:	4b20      	ldr	r3, [pc, #128]	; (8006adc <HAL_RCC_ClockConfig+0x1b8>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 0307 	and.w	r3, r3, #7
 8006a62:	683a      	ldr	r2, [r7, #0]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d001      	beq.n	8006a6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e032      	b.n	8006ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 0304 	and.w	r3, r3, #4
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d008      	beq.n	8006a8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a78:	4b19      	ldr	r3, [pc, #100]	; (8006ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	4916      	ldr	r1, [pc, #88]	; (8006ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a86:	4313      	orrs	r3, r2
 8006a88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 0308 	and.w	r3, r3, #8
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d009      	beq.n	8006aaa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a96:	4b12      	ldr	r3, [pc, #72]	; (8006ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	00db      	lsls	r3, r3, #3
 8006aa4:	490e      	ldr	r1, [pc, #56]	; (8006ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006aaa:	f000 f821 	bl	8006af0 <HAL_RCC_GetSysClockFreq>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	4b0b      	ldr	r3, [pc, #44]	; (8006ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	091b      	lsrs	r3, r3, #4
 8006ab6:	f003 030f 	and.w	r3, r3, #15
 8006aba:	490a      	ldr	r1, [pc, #40]	; (8006ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8006abc:	5ccb      	ldrb	r3, [r1, r3]
 8006abe:	fa22 f303 	lsr.w	r3, r2, r3
 8006ac2:	4a09      	ldr	r2, [pc, #36]	; (8006ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8006ac4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006ac6:	4b09      	ldr	r3, [pc, #36]	; (8006aec <HAL_RCC_ClockConfig+0x1c8>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4618      	mov	r0, r3
 8006acc:	f7fd fbc8 	bl	8004260 <HAL_InitTick>

  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3710      	adds	r7, #16
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	bf00      	nop
 8006adc:	40023c00 	.word	0x40023c00
 8006ae0:	40023800 	.word	0x40023800
 8006ae4:	0800b1d0 	.word	0x0800b1d0
 8006ae8:	20000008 	.word	0x20000008
 8006aec:	2000000c 	.word	0x2000000c

08006af0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006af0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006af4:	b094      	sub	sp, #80	; 0x50
 8006af6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006af8:	2300      	movs	r3, #0
 8006afa:	647b      	str	r3, [r7, #68]	; 0x44
 8006afc:	2300      	movs	r3, #0
 8006afe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b00:	2300      	movs	r3, #0
 8006b02:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006b04:	2300      	movs	r3, #0
 8006b06:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b08:	4b79      	ldr	r3, [pc, #484]	; (8006cf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	f003 030c 	and.w	r3, r3, #12
 8006b10:	2b08      	cmp	r3, #8
 8006b12:	d00d      	beq.n	8006b30 <HAL_RCC_GetSysClockFreq+0x40>
 8006b14:	2b08      	cmp	r3, #8
 8006b16:	f200 80e1 	bhi.w	8006cdc <HAL_RCC_GetSysClockFreq+0x1ec>
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d002      	beq.n	8006b24 <HAL_RCC_GetSysClockFreq+0x34>
 8006b1e:	2b04      	cmp	r3, #4
 8006b20:	d003      	beq.n	8006b2a <HAL_RCC_GetSysClockFreq+0x3a>
 8006b22:	e0db      	b.n	8006cdc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006b24:	4b73      	ldr	r3, [pc, #460]	; (8006cf4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006b26:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006b28:	e0db      	b.n	8006ce2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006b2a:	4b73      	ldr	r3, [pc, #460]	; (8006cf8 <HAL_RCC_GetSysClockFreq+0x208>)
 8006b2c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006b2e:	e0d8      	b.n	8006ce2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b30:	4b6f      	ldr	r3, [pc, #444]	; (8006cf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b38:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006b3a:	4b6d      	ldr	r3, [pc, #436]	; (8006cf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d063      	beq.n	8006c0e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b46:	4b6a      	ldr	r3, [pc, #424]	; (8006cf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	099b      	lsrs	r3, r3, #6
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b50:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b58:	633b      	str	r3, [r7, #48]	; 0x30
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	637b      	str	r3, [r7, #52]	; 0x34
 8006b5e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006b62:	4622      	mov	r2, r4
 8006b64:	462b      	mov	r3, r5
 8006b66:	f04f 0000 	mov.w	r0, #0
 8006b6a:	f04f 0100 	mov.w	r1, #0
 8006b6e:	0159      	lsls	r1, r3, #5
 8006b70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b74:	0150      	lsls	r0, r2, #5
 8006b76:	4602      	mov	r2, r0
 8006b78:	460b      	mov	r3, r1
 8006b7a:	4621      	mov	r1, r4
 8006b7c:	1a51      	subs	r1, r2, r1
 8006b7e:	6139      	str	r1, [r7, #16]
 8006b80:	4629      	mov	r1, r5
 8006b82:	eb63 0301 	sbc.w	r3, r3, r1
 8006b86:	617b      	str	r3, [r7, #20]
 8006b88:	f04f 0200 	mov.w	r2, #0
 8006b8c:	f04f 0300 	mov.w	r3, #0
 8006b90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b94:	4659      	mov	r1, fp
 8006b96:	018b      	lsls	r3, r1, #6
 8006b98:	4651      	mov	r1, sl
 8006b9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006b9e:	4651      	mov	r1, sl
 8006ba0:	018a      	lsls	r2, r1, #6
 8006ba2:	4651      	mov	r1, sl
 8006ba4:	ebb2 0801 	subs.w	r8, r2, r1
 8006ba8:	4659      	mov	r1, fp
 8006baa:	eb63 0901 	sbc.w	r9, r3, r1
 8006bae:	f04f 0200 	mov.w	r2, #0
 8006bb2:	f04f 0300 	mov.w	r3, #0
 8006bb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006bba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006bbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006bc2:	4690      	mov	r8, r2
 8006bc4:	4699      	mov	r9, r3
 8006bc6:	4623      	mov	r3, r4
 8006bc8:	eb18 0303 	adds.w	r3, r8, r3
 8006bcc:	60bb      	str	r3, [r7, #8]
 8006bce:	462b      	mov	r3, r5
 8006bd0:	eb49 0303 	adc.w	r3, r9, r3
 8006bd4:	60fb      	str	r3, [r7, #12]
 8006bd6:	f04f 0200 	mov.w	r2, #0
 8006bda:	f04f 0300 	mov.w	r3, #0
 8006bde:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006be2:	4629      	mov	r1, r5
 8006be4:	024b      	lsls	r3, r1, #9
 8006be6:	4621      	mov	r1, r4
 8006be8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006bec:	4621      	mov	r1, r4
 8006bee:	024a      	lsls	r2, r1, #9
 8006bf0:	4610      	mov	r0, r2
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006bfc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c00:	f7f9 fe4c 	bl	800089c <__aeabi_uldivmod>
 8006c04:	4602      	mov	r2, r0
 8006c06:	460b      	mov	r3, r1
 8006c08:	4613      	mov	r3, r2
 8006c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c0c:	e058      	b.n	8006cc0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c0e:	4b38      	ldr	r3, [pc, #224]	; (8006cf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	099b      	lsrs	r3, r3, #6
 8006c14:	2200      	movs	r2, #0
 8006c16:	4618      	mov	r0, r3
 8006c18:	4611      	mov	r1, r2
 8006c1a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006c1e:	623b      	str	r3, [r7, #32]
 8006c20:	2300      	movs	r3, #0
 8006c22:	627b      	str	r3, [r7, #36]	; 0x24
 8006c24:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006c28:	4642      	mov	r2, r8
 8006c2a:	464b      	mov	r3, r9
 8006c2c:	f04f 0000 	mov.w	r0, #0
 8006c30:	f04f 0100 	mov.w	r1, #0
 8006c34:	0159      	lsls	r1, r3, #5
 8006c36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c3a:	0150      	lsls	r0, r2, #5
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	460b      	mov	r3, r1
 8006c40:	4641      	mov	r1, r8
 8006c42:	ebb2 0a01 	subs.w	sl, r2, r1
 8006c46:	4649      	mov	r1, r9
 8006c48:	eb63 0b01 	sbc.w	fp, r3, r1
 8006c4c:	f04f 0200 	mov.w	r2, #0
 8006c50:	f04f 0300 	mov.w	r3, #0
 8006c54:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006c58:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006c5c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006c60:	ebb2 040a 	subs.w	r4, r2, sl
 8006c64:	eb63 050b 	sbc.w	r5, r3, fp
 8006c68:	f04f 0200 	mov.w	r2, #0
 8006c6c:	f04f 0300 	mov.w	r3, #0
 8006c70:	00eb      	lsls	r3, r5, #3
 8006c72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c76:	00e2      	lsls	r2, r4, #3
 8006c78:	4614      	mov	r4, r2
 8006c7a:	461d      	mov	r5, r3
 8006c7c:	4643      	mov	r3, r8
 8006c7e:	18e3      	adds	r3, r4, r3
 8006c80:	603b      	str	r3, [r7, #0]
 8006c82:	464b      	mov	r3, r9
 8006c84:	eb45 0303 	adc.w	r3, r5, r3
 8006c88:	607b      	str	r3, [r7, #4]
 8006c8a:	f04f 0200 	mov.w	r2, #0
 8006c8e:	f04f 0300 	mov.w	r3, #0
 8006c92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006c96:	4629      	mov	r1, r5
 8006c98:	028b      	lsls	r3, r1, #10
 8006c9a:	4621      	mov	r1, r4
 8006c9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ca0:	4621      	mov	r1, r4
 8006ca2:	028a      	lsls	r2, r1, #10
 8006ca4:	4610      	mov	r0, r2
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006caa:	2200      	movs	r2, #0
 8006cac:	61bb      	str	r3, [r7, #24]
 8006cae:	61fa      	str	r2, [r7, #28]
 8006cb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006cb4:	f7f9 fdf2 	bl	800089c <__aeabi_uldivmod>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	460b      	mov	r3, r1
 8006cbc:	4613      	mov	r3, r2
 8006cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006cc0:	4b0b      	ldr	r3, [pc, #44]	; (8006cf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	0c1b      	lsrs	r3, r3, #16
 8006cc6:	f003 0303 	and.w	r3, r3, #3
 8006cca:	3301      	adds	r3, #1
 8006ccc:	005b      	lsls	r3, r3, #1
 8006cce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006cd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006cd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cd8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006cda:	e002      	b.n	8006ce2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006cdc:	4b05      	ldr	r3, [pc, #20]	; (8006cf4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006cde:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006ce0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ce2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3750      	adds	r7, #80	; 0x50
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cee:	bf00      	nop
 8006cf0:	40023800 	.word	0x40023800
 8006cf4:	00f42400 	.word	0x00f42400
 8006cf8:	007a1200 	.word	0x007a1200

08006cfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d00:	4b03      	ldr	r3, [pc, #12]	; (8006d10 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d02:	681b      	ldr	r3, [r3, #0]
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	20000008 	.word	0x20000008

08006d14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006d18:	f7ff fff0 	bl	8006cfc <HAL_RCC_GetHCLKFreq>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	4b05      	ldr	r3, [pc, #20]	; (8006d34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	0a9b      	lsrs	r3, r3, #10
 8006d24:	f003 0307 	and.w	r3, r3, #7
 8006d28:	4903      	ldr	r1, [pc, #12]	; (8006d38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d2a:	5ccb      	ldrb	r3, [r1, r3]
 8006d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	40023800 	.word	0x40023800
 8006d38:	0800b1e0 	.word	0x0800b1e0

08006d3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006d40:	f7ff ffdc 	bl	8006cfc <HAL_RCC_GetHCLKFreq>
 8006d44:	4602      	mov	r2, r0
 8006d46:	4b05      	ldr	r3, [pc, #20]	; (8006d5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	0b5b      	lsrs	r3, r3, #13
 8006d4c:	f003 0307 	and.w	r3, r3, #7
 8006d50:	4903      	ldr	r1, [pc, #12]	; (8006d60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d52:	5ccb      	ldrb	r3, [r1, r3]
 8006d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	bd80      	pop	{r7, pc}
 8006d5c:	40023800 	.word	0x40023800
 8006d60:	0800b1e0 	.word	0x0800b1e0

08006d64 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	220f      	movs	r2, #15
 8006d72:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006d74:	4b12      	ldr	r3, [pc, #72]	; (8006dc0 <HAL_RCC_GetClockConfig+0x5c>)
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	f003 0203 	and.w	r2, r3, #3
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006d80:	4b0f      	ldr	r3, [pc, #60]	; (8006dc0 <HAL_RCC_GetClockConfig+0x5c>)
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006d8c:	4b0c      	ldr	r3, [pc, #48]	; (8006dc0 <HAL_RCC_GetClockConfig+0x5c>)
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006d98:	4b09      	ldr	r3, [pc, #36]	; (8006dc0 <HAL_RCC_GetClockConfig+0x5c>)
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	08db      	lsrs	r3, r3, #3
 8006d9e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006da6:	4b07      	ldr	r3, [pc, #28]	; (8006dc4 <HAL_RCC_GetClockConfig+0x60>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 0207 	and.w	r2, r3, #7
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	601a      	str	r2, [r3, #0]
}
 8006db2:	bf00      	nop
 8006db4:	370c      	adds	r7, #12
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	40023800 	.word	0x40023800
 8006dc4:	40023c00 	.word	0x40023c00

08006dc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d101      	bne.n	8006dda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e041      	b.n	8006e5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d106      	bne.n	8006df4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f7fe f80a 	bl	8004e08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2202      	movs	r2, #2
 8006df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	3304      	adds	r3, #4
 8006e04:	4619      	mov	r1, r3
 8006e06:	4610      	mov	r0, r2
 8006e08:	f000 fdc4 	bl	8007994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3708      	adds	r7, #8
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
	...

08006e68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b085      	sub	sp, #20
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d001      	beq.n	8006e80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e04e      	b.n	8006f1e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2202      	movs	r2, #2
 8006e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	68da      	ldr	r2, [r3, #12]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f042 0201 	orr.w	r2, r2, #1
 8006e96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a23      	ldr	r2, [pc, #140]	; (8006f2c <HAL_TIM_Base_Start_IT+0xc4>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d022      	beq.n	8006ee8 <HAL_TIM_Base_Start_IT+0x80>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eaa:	d01d      	beq.n	8006ee8 <HAL_TIM_Base_Start_IT+0x80>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a1f      	ldr	r2, [pc, #124]	; (8006f30 <HAL_TIM_Base_Start_IT+0xc8>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d018      	beq.n	8006ee8 <HAL_TIM_Base_Start_IT+0x80>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a1e      	ldr	r2, [pc, #120]	; (8006f34 <HAL_TIM_Base_Start_IT+0xcc>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d013      	beq.n	8006ee8 <HAL_TIM_Base_Start_IT+0x80>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a1c      	ldr	r2, [pc, #112]	; (8006f38 <HAL_TIM_Base_Start_IT+0xd0>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d00e      	beq.n	8006ee8 <HAL_TIM_Base_Start_IT+0x80>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a1b      	ldr	r2, [pc, #108]	; (8006f3c <HAL_TIM_Base_Start_IT+0xd4>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d009      	beq.n	8006ee8 <HAL_TIM_Base_Start_IT+0x80>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a19      	ldr	r2, [pc, #100]	; (8006f40 <HAL_TIM_Base_Start_IT+0xd8>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d004      	beq.n	8006ee8 <HAL_TIM_Base_Start_IT+0x80>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a18      	ldr	r2, [pc, #96]	; (8006f44 <HAL_TIM_Base_Start_IT+0xdc>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d111      	bne.n	8006f0c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	f003 0307 	and.w	r3, r3, #7
 8006ef2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2b06      	cmp	r3, #6
 8006ef8:	d010      	beq.n	8006f1c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f042 0201 	orr.w	r2, r2, #1
 8006f08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f0a:	e007      	b.n	8006f1c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f042 0201 	orr.w	r2, r2, #1
 8006f1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3714      	adds	r7, #20
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop
 8006f2c:	40010000 	.word	0x40010000
 8006f30:	40000400 	.word	0x40000400
 8006f34:	40000800 	.word	0x40000800
 8006f38:	40000c00 	.word	0x40000c00
 8006f3c:	40010400 	.word	0x40010400
 8006f40:	40014000 	.word	0x40014000
 8006f44:	40001800 	.word	0x40001800

08006f48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d101      	bne.n	8006f5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	e041      	b.n	8006fde <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d106      	bne.n	8006f74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 f839 	bl	8006fe6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2202      	movs	r2, #2
 8006f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	3304      	adds	r3, #4
 8006f84:	4619      	mov	r1, r3
 8006f86:	4610      	mov	r0, r2
 8006f88:	f000 fd04 	bl	8007994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3708      	adds	r7, #8
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006fe6:	b480      	push	{r7}
 8006fe8:	b083      	sub	sp, #12
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006fee:	bf00      	nop
 8006ff0:	370c      	adds	r7, #12
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr
	...

08006ffc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d109      	bne.n	8007020 <HAL_TIM_PWM_Start+0x24>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007012:	b2db      	uxtb	r3, r3
 8007014:	2b01      	cmp	r3, #1
 8007016:	bf14      	ite	ne
 8007018:	2301      	movne	r3, #1
 800701a:	2300      	moveq	r3, #0
 800701c:	b2db      	uxtb	r3, r3
 800701e:	e022      	b.n	8007066 <HAL_TIM_PWM_Start+0x6a>
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	2b04      	cmp	r3, #4
 8007024:	d109      	bne.n	800703a <HAL_TIM_PWM_Start+0x3e>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800702c:	b2db      	uxtb	r3, r3
 800702e:	2b01      	cmp	r3, #1
 8007030:	bf14      	ite	ne
 8007032:	2301      	movne	r3, #1
 8007034:	2300      	moveq	r3, #0
 8007036:	b2db      	uxtb	r3, r3
 8007038:	e015      	b.n	8007066 <HAL_TIM_PWM_Start+0x6a>
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	2b08      	cmp	r3, #8
 800703e:	d109      	bne.n	8007054 <HAL_TIM_PWM_Start+0x58>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007046:	b2db      	uxtb	r3, r3
 8007048:	2b01      	cmp	r3, #1
 800704a:	bf14      	ite	ne
 800704c:	2301      	movne	r3, #1
 800704e:	2300      	moveq	r3, #0
 8007050:	b2db      	uxtb	r3, r3
 8007052:	e008      	b.n	8007066 <HAL_TIM_PWM_Start+0x6a>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800705a:	b2db      	uxtb	r3, r3
 800705c:	2b01      	cmp	r3, #1
 800705e:	bf14      	ite	ne
 8007060:	2301      	movne	r3, #1
 8007062:	2300      	moveq	r3, #0
 8007064:	b2db      	uxtb	r3, r3
 8007066:	2b00      	cmp	r3, #0
 8007068:	d001      	beq.n	800706e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e07c      	b.n	8007168 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d104      	bne.n	800707e <HAL_TIM_PWM_Start+0x82>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2202      	movs	r2, #2
 8007078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800707c:	e013      	b.n	80070a6 <HAL_TIM_PWM_Start+0xaa>
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	2b04      	cmp	r3, #4
 8007082:	d104      	bne.n	800708e <HAL_TIM_PWM_Start+0x92>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2202      	movs	r2, #2
 8007088:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800708c:	e00b      	b.n	80070a6 <HAL_TIM_PWM_Start+0xaa>
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	2b08      	cmp	r3, #8
 8007092:	d104      	bne.n	800709e <HAL_TIM_PWM_Start+0xa2>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2202      	movs	r2, #2
 8007098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800709c:	e003      	b.n	80070a6 <HAL_TIM_PWM_Start+0xaa>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2202      	movs	r2, #2
 80070a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2201      	movs	r2, #1
 80070ac:	6839      	ldr	r1, [r7, #0]
 80070ae:	4618      	mov	r0, r3
 80070b0:	f000 ff5a 	bl	8007f68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a2d      	ldr	r2, [pc, #180]	; (8007170 <HAL_TIM_PWM_Start+0x174>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d004      	beq.n	80070c8 <HAL_TIM_PWM_Start+0xcc>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a2c      	ldr	r2, [pc, #176]	; (8007174 <HAL_TIM_PWM_Start+0x178>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d101      	bne.n	80070cc <HAL_TIM_PWM_Start+0xd0>
 80070c8:	2301      	movs	r3, #1
 80070ca:	e000      	b.n	80070ce <HAL_TIM_PWM_Start+0xd2>
 80070cc:	2300      	movs	r3, #0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d007      	beq.n	80070e2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80070e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a22      	ldr	r2, [pc, #136]	; (8007170 <HAL_TIM_PWM_Start+0x174>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d022      	beq.n	8007132 <HAL_TIM_PWM_Start+0x136>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070f4:	d01d      	beq.n	8007132 <HAL_TIM_PWM_Start+0x136>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a1f      	ldr	r2, [pc, #124]	; (8007178 <HAL_TIM_PWM_Start+0x17c>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d018      	beq.n	8007132 <HAL_TIM_PWM_Start+0x136>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a1d      	ldr	r2, [pc, #116]	; (800717c <HAL_TIM_PWM_Start+0x180>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d013      	beq.n	8007132 <HAL_TIM_PWM_Start+0x136>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a1c      	ldr	r2, [pc, #112]	; (8007180 <HAL_TIM_PWM_Start+0x184>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d00e      	beq.n	8007132 <HAL_TIM_PWM_Start+0x136>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a16      	ldr	r2, [pc, #88]	; (8007174 <HAL_TIM_PWM_Start+0x178>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d009      	beq.n	8007132 <HAL_TIM_PWM_Start+0x136>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a18      	ldr	r2, [pc, #96]	; (8007184 <HAL_TIM_PWM_Start+0x188>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d004      	beq.n	8007132 <HAL_TIM_PWM_Start+0x136>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a16      	ldr	r2, [pc, #88]	; (8007188 <HAL_TIM_PWM_Start+0x18c>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d111      	bne.n	8007156 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	f003 0307 	and.w	r3, r3, #7
 800713c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2b06      	cmp	r3, #6
 8007142:	d010      	beq.n	8007166 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f042 0201 	orr.w	r2, r2, #1
 8007152:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007154:	e007      	b.n	8007166 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f042 0201 	orr.w	r2, r2, #1
 8007164:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007166:	2300      	movs	r3, #0
}
 8007168:	4618      	mov	r0, r3
 800716a:	3710      	adds	r7, #16
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}
 8007170:	40010000 	.word	0x40010000
 8007174:	40010400 	.word	0x40010400
 8007178:	40000400 	.word	0x40000400
 800717c:	40000800 	.word	0x40000800
 8007180:	40000c00 	.word	0x40000c00
 8007184:	40014000 	.word	0x40014000
 8007188:	40001800 	.word	0x40001800

0800718c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b086      	sub	sp, #24
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d101      	bne.n	80071a0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	e097      	b.n	80072d0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d106      	bne.n	80071ba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f7fd fcc1 	bl	8004b3c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2202      	movs	r2, #2
 80071be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	6812      	ldr	r2, [r2, #0]
 80071cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071d0:	f023 0307 	bic.w	r3, r3, #7
 80071d4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	3304      	adds	r3, #4
 80071de:	4619      	mov	r1, r3
 80071e0:	4610      	mov	r0, r2
 80071e2:	f000 fbd7 	bl	8007994 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	699b      	ldr	r3, [r3, #24]
 80071f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	6a1b      	ldr	r3, [r3, #32]
 80071fc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	697a      	ldr	r2, [r7, #20]
 8007204:	4313      	orrs	r3, r2
 8007206:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800720e:	f023 0303 	bic.w	r3, r3, #3
 8007212:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	689a      	ldr	r2, [r3, #8]
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	699b      	ldr	r3, [r3, #24]
 800721c:	021b      	lsls	r3, r3, #8
 800721e:	4313      	orrs	r3, r2
 8007220:	693a      	ldr	r2, [r7, #16]
 8007222:	4313      	orrs	r3, r2
 8007224:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800722c:	f023 030c 	bic.w	r3, r3, #12
 8007230:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007238:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800723c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	68da      	ldr	r2, [r3, #12]
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	69db      	ldr	r3, [r3, #28]
 8007246:	021b      	lsls	r3, r3, #8
 8007248:	4313      	orrs	r3, r2
 800724a:	693a      	ldr	r2, [r7, #16]
 800724c:	4313      	orrs	r3, r2
 800724e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	011a      	lsls	r2, r3, #4
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	6a1b      	ldr	r3, [r3, #32]
 800725a:	031b      	lsls	r3, r3, #12
 800725c:	4313      	orrs	r3, r2
 800725e:	693a      	ldr	r2, [r7, #16]
 8007260:	4313      	orrs	r3, r2
 8007262:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800726a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007272:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	685a      	ldr	r2, [r3, #4]
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	695b      	ldr	r3, [r3, #20]
 800727c:	011b      	lsls	r3, r3, #4
 800727e:	4313      	orrs	r3, r2
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	4313      	orrs	r3, r2
 8007284:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	697a      	ldr	r2, [r7, #20]
 800728c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	693a      	ldr	r2, [r7, #16]
 8007294:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	68fa      	ldr	r2, [r7, #12]
 800729c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2201      	movs	r2, #1
 80072a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2201      	movs	r2, #1
 80072aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2201      	movs	r2, #1
 80072b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2201      	movs	r2, #1
 80072ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2201      	movs	r2, #1
 80072c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2201      	movs	r2, #1
 80072ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072ce:	2300      	movs	r3, #0
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3718      	adds	r7, #24
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072e8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80072f0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80072f8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007300:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d110      	bne.n	800732a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007308:	7bfb      	ldrb	r3, [r7, #15]
 800730a:	2b01      	cmp	r3, #1
 800730c:	d102      	bne.n	8007314 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800730e:	7b7b      	ldrb	r3, [r7, #13]
 8007310:	2b01      	cmp	r3, #1
 8007312:	d001      	beq.n	8007318 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	e089      	b.n	800742c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2202      	movs	r2, #2
 800731c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2202      	movs	r2, #2
 8007324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007328:	e031      	b.n	800738e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	2b04      	cmp	r3, #4
 800732e:	d110      	bne.n	8007352 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007330:	7bbb      	ldrb	r3, [r7, #14]
 8007332:	2b01      	cmp	r3, #1
 8007334:	d102      	bne.n	800733c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007336:	7b3b      	ldrb	r3, [r7, #12]
 8007338:	2b01      	cmp	r3, #1
 800733a:	d001      	beq.n	8007340 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	e075      	b.n	800742c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2202      	movs	r2, #2
 8007344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2202      	movs	r2, #2
 800734c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007350:	e01d      	b.n	800738e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007352:	7bfb      	ldrb	r3, [r7, #15]
 8007354:	2b01      	cmp	r3, #1
 8007356:	d108      	bne.n	800736a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007358:	7bbb      	ldrb	r3, [r7, #14]
 800735a:	2b01      	cmp	r3, #1
 800735c:	d105      	bne.n	800736a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800735e:	7b7b      	ldrb	r3, [r7, #13]
 8007360:	2b01      	cmp	r3, #1
 8007362:	d102      	bne.n	800736a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007364:	7b3b      	ldrb	r3, [r7, #12]
 8007366:	2b01      	cmp	r3, #1
 8007368:	d001      	beq.n	800736e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e05e      	b.n	800742c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2202      	movs	r2, #2
 8007372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2202      	movs	r2, #2
 800737a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2202      	movs	r2, #2
 8007382:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2202      	movs	r2, #2
 800738a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d003      	beq.n	800739c <HAL_TIM_Encoder_Start_IT+0xc4>
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	2b04      	cmp	r3, #4
 8007398:	d010      	beq.n	80073bc <HAL_TIM_Encoder_Start_IT+0xe4>
 800739a:	e01f      	b.n	80073dc <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2201      	movs	r2, #1
 80073a2:	2100      	movs	r1, #0
 80073a4:	4618      	mov	r0, r3
 80073a6:	f000 fddf 	bl	8007f68 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68da      	ldr	r2, [r3, #12]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f042 0202 	orr.w	r2, r2, #2
 80073b8:	60da      	str	r2, [r3, #12]
      break;
 80073ba:	e02e      	b.n	800741a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2201      	movs	r2, #1
 80073c2:	2104      	movs	r1, #4
 80073c4:	4618      	mov	r0, r3
 80073c6:	f000 fdcf 	bl	8007f68 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68da      	ldr	r2, [r3, #12]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f042 0204 	orr.w	r2, r2, #4
 80073d8:	60da      	str	r2, [r3, #12]
      break;
 80073da:	e01e      	b.n	800741a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2201      	movs	r2, #1
 80073e2:	2100      	movs	r1, #0
 80073e4:	4618      	mov	r0, r3
 80073e6:	f000 fdbf 	bl	8007f68 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	2201      	movs	r2, #1
 80073f0:	2104      	movs	r1, #4
 80073f2:	4618      	mov	r0, r3
 80073f4:	f000 fdb8 	bl	8007f68 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	68da      	ldr	r2, [r3, #12]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f042 0202 	orr.w	r2, r2, #2
 8007406:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68da      	ldr	r2, [r3, #12]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f042 0204 	orr.w	r2, r2, #4
 8007416:	60da      	str	r2, [r3, #12]
      break;
 8007418:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f042 0201 	orr.w	r2, r2, #1
 8007428:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800742a:	2300      	movs	r3, #0
}
 800742c:	4618      	mov	r0, r3
 800742e:	3710      	adds	r7, #16
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	f003 0302 	and.w	r3, r3, #2
 8007446:	2b02      	cmp	r3, #2
 8007448:	d122      	bne.n	8007490 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	f003 0302 	and.w	r3, r3, #2
 8007454:	2b02      	cmp	r3, #2
 8007456:	d11b      	bne.n	8007490 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f06f 0202 	mvn.w	r2, #2
 8007460:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2201      	movs	r2, #1
 8007466:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	699b      	ldr	r3, [r3, #24]
 800746e:	f003 0303 	and.w	r3, r3, #3
 8007472:	2b00      	cmp	r3, #0
 8007474:	d003      	beq.n	800747e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f7fa fac4 	bl	8001a04 <HAL_TIM_IC_CaptureCallback>
 800747c:	e005      	b.n	800748a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 fa69 	bl	8007956 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 fa70 	bl	800796a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	f003 0304 	and.w	r3, r3, #4
 800749a:	2b04      	cmp	r3, #4
 800749c:	d122      	bne.n	80074e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	f003 0304 	and.w	r3, r3, #4
 80074a8:	2b04      	cmp	r3, #4
 80074aa:	d11b      	bne.n	80074e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f06f 0204 	mvn.w	r2, #4
 80074b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2202      	movs	r2, #2
 80074ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	699b      	ldr	r3, [r3, #24]
 80074c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d003      	beq.n	80074d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f7fa fa9a 	bl	8001a04 <HAL_TIM_IC_CaptureCallback>
 80074d0:	e005      	b.n	80074de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 fa3f 	bl	8007956 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 fa46 	bl	800796a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	691b      	ldr	r3, [r3, #16]
 80074ea:	f003 0308 	and.w	r3, r3, #8
 80074ee:	2b08      	cmp	r3, #8
 80074f0:	d122      	bne.n	8007538 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	f003 0308 	and.w	r3, r3, #8
 80074fc:	2b08      	cmp	r3, #8
 80074fe:	d11b      	bne.n	8007538 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f06f 0208 	mvn.w	r2, #8
 8007508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2204      	movs	r2, #4
 800750e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	69db      	ldr	r3, [r3, #28]
 8007516:	f003 0303 	and.w	r3, r3, #3
 800751a:	2b00      	cmp	r3, #0
 800751c:	d003      	beq.n	8007526 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f7fa fa70 	bl	8001a04 <HAL_TIM_IC_CaptureCallback>
 8007524:	e005      	b.n	8007532 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 fa15 	bl	8007956 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 fa1c 	bl	800796a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	691b      	ldr	r3, [r3, #16]
 800753e:	f003 0310 	and.w	r3, r3, #16
 8007542:	2b10      	cmp	r3, #16
 8007544:	d122      	bne.n	800758c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	f003 0310 	and.w	r3, r3, #16
 8007550:	2b10      	cmp	r3, #16
 8007552:	d11b      	bne.n	800758c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f06f 0210 	mvn.w	r2, #16
 800755c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2208      	movs	r2, #8
 8007562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	69db      	ldr	r3, [r3, #28]
 800756a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800756e:	2b00      	cmp	r3, #0
 8007570:	d003      	beq.n	800757a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f7fa fa46 	bl	8001a04 <HAL_TIM_IC_CaptureCallback>
 8007578:	e005      	b.n	8007586 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 f9eb 	bl	8007956 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 f9f2 	bl	800796a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	691b      	ldr	r3, [r3, #16]
 8007592:	f003 0301 	and.w	r3, r3, #1
 8007596:	2b01      	cmp	r3, #1
 8007598:	d10e      	bne.n	80075b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	f003 0301 	and.w	r3, r3, #1
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d107      	bne.n	80075b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f06f 0201 	mvn.w	r2, #1
 80075b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f7fa fb50 	bl	8001c58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075c2:	2b80      	cmp	r3, #128	; 0x80
 80075c4:	d10e      	bne.n	80075e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075d0:	2b80      	cmp	r3, #128	; 0x80
 80075d2:	d107      	bne.n	80075e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80075dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 fd6e 	bl	80080c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ee:	2b40      	cmp	r3, #64	; 0x40
 80075f0:	d10e      	bne.n	8007610 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075fc:	2b40      	cmp	r3, #64	; 0x40
 80075fe:	d107      	bne.n	8007610 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 f9b7 	bl	800797e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	f003 0320 	and.w	r3, r3, #32
 800761a:	2b20      	cmp	r3, #32
 800761c:	d10e      	bne.n	800763c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	f003 0320 	and.w	r3, r3, #32
 8007628:	2b20      	cmp	r3, #32
 800762a:	d107      	bne.n	800763c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f06f 0220 	mvn.w	r2, #32
 8007634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 fd38 	bl	80080ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800763c:	bf00      	nop
 800763e:	3708      	adds	r7, #8
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b086      	sub	sp, #24
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007650:	2300      	movs	r3, #0
 8007652:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800765a:	2b01      	cmp	r3, #1
 800765c:	d101      	bne.n	8007662 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800765e:	2302      	movs	r3, #2
 8007660:	e0ae      	b.n	80077c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2201      	movs	r2, #1
 8007666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2b0c      	cmp	r3, #12
 800766e:	f200 809f 	bhi.w	80077b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007672:	a201      	add	r2, pc, #4	; (adr r2, 8007678 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007678:	080076ad 	.word	0x080076ad
 800767c:	080077b1 	.word	0x080077b1
 8007680:	080077b1 	.word	0x080077b1
 8007684:	080077b1 	.word	0x080077b1
 8007688:	080076ed 	.word	0x080076ed
 800768c:	080077b1 	.word	0x080077b1
 8007690:	080077b1 	.word	0x080077b1
 8007694:	080077b1 	.word	0x080077b1
 8007698:	0800772f 	.word	0x0800772f
 800769c:	080077b1 	.word	0x080077b1
 80076a0:	080077b1 	.word	0x080077b1
 80076a4:	080077b1 	.word	0x080077b1
 80076a8:	0800776f 	.word	0x0800776f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	68b9      	ldr	r1, [r7, #8]
 80076b2:	4618      	mov	r0, r3
 80076b4:	f000 fa0e 	bl	8007ad4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	699a      	ldr	r2, [r3, #24]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f042 0208 	orr.w	r2, r2, #8
 80076c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	699a      	ldr	r2, [r3, #24]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f022 0204 	bic.w	r2, r2, #4
 80076d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	6999      	ldr	r1, [r3, #24]
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	691a      	ldr	r2, [r3, #16]
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	430a      	orrs	r2, r1
 80076e8:	619a      	str	r2, [r3, #24]
      break;
 80076ea:	e064      	b.n	80077b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68b9      	ldr	r1, [r7, #8]
 80076f2:	4618      	mov	r0, r3
 80076f4:	f000 fa5e 	bl	8007bb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	699a      	ldr	r2, [r3, #24]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007706:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	699a      	ldr	r2, [r3, #24]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007716:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	6999      	ldr	r1, [r3, #24]
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	691b      	ldr	r3, [r3, #16]
 8007722:	021a      	lsls	r2, r3, #8
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	430a      	orrs	r2, r1
 800772a:	619a      	str	r2, [r3, #24]
      break;
 800772c:	e043      	b.n	80077b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	68b9      	ldr	r1, [r7, #8]
 8007734:	4618      	mov	r0, r3
 8007736:	f000 fab3 	bl	8007ca0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	69da      	ldr	r2, [r3, #28]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f042 0208 	orr.w	r2, r2, #8
 8007748:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	69da      	ldr	r2, [r3, #28]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f022 0204 	bic.w	r2, r2, #4
 8007758:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	69d9      	ldr	r1, [r3, #28]
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	691a      	ldr	r2, [r3, #16]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	430a      	orrs	r2, r1
 800776a:	61da      	str	r2, [r3, #28]
      break;
 800776c:	e023      	b.n	80077b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	68b9      	ldr	r1, [r7, #8]
 8007774:	4618      	mov	r0, r3
 8007776:	f000 fb07 	bl	8007d88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	69da      	ldr	r2, [r3, #28]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007788:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	69da      	ldr	r2, [r3, #28]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007798:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	69d9      	ldr	r1, [r3, #28]
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	021a      	lsls	r2, r3, #8
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	430a      	orrs	r2, r1
 80077ac:	61da      	str	r2, [r3, #28]
      break;
 80077ae:	e002      	b.n	80077b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	75fb      	strb	r3, [r7, #23]
      break;
 80077b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80077be:	7dfb      	ldrb	r3, [r7, #23]
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3718      	adds	r7, #24
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80077d2:	2300      	movs	r3, #0
 80077d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d101      	bne.n	80077e4 <HAL_TIM_ConfigClockSource+0x1c>
 80077e0:	2302      	movs	r3, #2
 80077e2:	e0b4      	b.n	800794e <HAL_TIM_ConfigClockSource+0x186>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2202      	movs	r2, #2
 80077f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007802:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800780a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	68ba      	ldr	r2, [r7, #8]
 8007812:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800781c:	d03e      	beq.n	800789c <HAL_TIM_ConfigClockSource+0xd4>
 800781e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007822:	f200 8087 	bhi.w	8007934 <HAL_TIM_ConfigClockSource+0x16c>
 8007826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800782a:	f000 8086 	beq.w	800793a <HAL_TIM_ConfigClockSource+0x172>
 800782e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007832:	d87f      	bhi.n	8007934 <HAL_TIM_ConfigClockSource+0x16c>
 8007834:	2b70      	cmp	r3, #112	; 0x70
 8007836:	d01a      	beq.n	800786e <HAL_TIM_ConfigClockSource+0xa6>
 8007838:	2b70      	cmp	r3, #112	; 0x70
 800783a:	d87b      	bhi.n	8007934 <HAL_TIM_ConfigClockSource+0x16c>
 800783c:	2b60      	cmp	r3, #96	; 0x60
 800783e:	d050      	beq.n	80078e2 <HAL_TIM_ConfigClockSource+0x11a>
 8007840:	2b60      	cmp	r3, #96	; 0x60
 8007842:	d877      	bhi.n	8007934 <HAL_TIM_ConfigClockSource+0x16c>
 8007844:	2b50      	cmp	r3, #80	; 0x50
 8007846:	d03c      	beq.n	80078c2 <HAL_TIM_ConfigClockSource+0xfa>
 8007848:	2b50      	cmp	r3, #80	; 0x50
 800784a:	d873      	bhi.n	8007934 <HAL_TIM_ConfigClockSource+0x16c>
 800784c:	2b40      	cmp	r3, #64	; 0x40
 800784e:	d058      	beq.n	8007902 <HAL_TIM_ConfigClockSource+0x13a>
 8007850:	2b40      	cmp	r3, #64	; 0x40
 8007852:	d86f      	bhi.n	8007934 <HAL_TIM_ConfigClockSource+0x16c>
 8007854:	2b30      	cmp	r3, #48	; 0x30
 8007856:	d064      	beq.n	8007922 <HAL_TIM_ConfigClockSource+0x15a>
 8007858:	2b30      	cmp	r3, #48	; 0x30
 800785a:	d86b      	bhi.n	8007934 <HAL_TIM_ConfigClockSource+0x16c>
 800785c:	2b20      	cmp	r3, #32
 800785e:	d060      	beq.n	8007922 <HAL_TIM_ConfigClockSource+0x15a>
 8007860:	2b20      	cmp	r3, #32
 8007862:	d867      	bhi.n	8007934 <HAL_TIM_ConfigClockSource+0x16c>
 8007864:	2b00      	cmp	r3, #0
 8007866:	d05c      	beq.n	8007922 <HAL_TIM_ConfigClockSource+0x15a>
 8007868:	2b10      	cmp	r3, #16
 800786a:	d05a      	beq.n	8007922 <HAL_TIM_ConfigClockSource+0x15a>
 800786c:	e062      	b.n	8007934 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6818      	ldr	r0, [r3, #0]
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	6899      	ldr	r1, [r3, #8]
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	685a      	ldr	r2, [r3, #4]
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	f000 fb53 	bl	8007f28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007890:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	68ba      	ldr	r2, [r7, #8]
 8007898:	609a      	str	r2, [r3, #8]
      break;
 800789a:	e04f      	b.n	800793c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6818      	ldr	r0, [r3, #0]
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	6899      	ldr	r1, [r3, #8]
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	685a      	ldr	r2, [r3, #4]
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	f000 fb3c 	bl	8007f28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	689a      	ldr	r2, [r3, #8]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80078be:	609a      	str	r2, [r3, #8]
      break;
 80078c0:	e03c      	b.n	800793c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6818      	ldr	r0, [r3, #0]
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	6859      	ldr	r1, [r3, #4]
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	461a      	mov	r2, r3
 80078d0:	f000 fab0 	bl	8007e34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2150      	movs	r1, #80	; 0x50
 80078da:	4618      	mov	r0, r3
 80078dc:	f000 fb09 	bl	8007ef2 <TIM_ITRx_SetConfig>
      break;
 80078e0:	e02c      	b.n	800793c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6818      	ldr	r0, [r3, #0]
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	6859      	ldr	r1, [r3, #4]
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	68db      	ldr	r3, [r3, #12]
 80078ee:	461a      	mov	r2, r3
 80078f0:	f000 facf 	bl	8007e92 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2160      	movs	r1, #96	; 0x60
 80078fa:	4618      	mov	r0, r3
 80078fc:	f000 faf9 	bl	8007ef2 <TIM_ITRx_SetConfig>
      break;
 8007900:	e01c      	b.n	800793c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6818      	ldr	r0, [r3, #0]
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	6859      	ldr	r1, [r3, #4]
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	461a      	mov	r2, r3
 8007910:	f000 fa90 	bl	8007e34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2140      	movs	r1, #64	; 0x40
 800791a:	4618      	mov	r0, r3
 800791c:	f000 fae9 	bl	8007ef2 <TIM_ITRx_SetConfig>
      break;
 8007920:	e00c      	b.n	800793c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4619      	mov	r1, r3
 800792c:	4610      	mov	r0, r2
 800792e:	f000 fae0 	bl	8007ef2 <TIM_ITRx_SetConfig>
      break;
 8007932:	e003      	b.n	800793c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	73fb      	strb	r3, [r7, #15]
      break;
 8007938:	e000      	b.n	800793c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800793a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800794c:	7bfb      	ldrb	r3, [r7, #15]
}
 800794e:	4618      	mov	r0, r3
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007956:	b480      	push	{r7}
 8007958:	b083      	sub	sp, #12
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800795e:	bf00      	nop
 8007960:	370c      	adds	r7, #12
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr

0800796a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800796a:	b480      	push	{r7}
 800796c:	b083      	sub	sp, #12
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007972:	bf00      	nop
 8007974:	370c      	adds	r7, #12
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr

0800797e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800797e:	b480      	push	{r7}
 8007980:	b083      	sub	sp, #12
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007986:	bf00      	nop
 8007988:	370c      	adds	r7, #12
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr
	...

08007994 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007994:	b480      	push	{r7}
 8007996:	b085      	sub	sp, #20
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a40      	ldr	r2, [pc, #256]	; (8007aa8 <TIM_Base_SetConfig+0x114>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d013      	beq.n	80079d4 <TIM_Base_SetConfig+0x40>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079b2:	d00f      	beq.n	80079d4 <TIM_Base_SetConfig+0x40>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a3d      	ldr	r2, [pc, #244]	; (8007aac <TIM_Base_SetConfig+0x118>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d00b      	beq.n	80079d4 <TIM_Base_SetConfig+0x40>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a3c      	ldr	r2, [pc, #240]	; (8007ab0 <TIM_Base_SetConfig+0x11c>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d007      	beq.n	80079d4 <TIM_Base_SetConfig+0x40>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a3b      	ldr	r2, [pc, #236]	; (8007ab4 <TIM_Base_SetConfig+0x120>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d003      	beq.n	80079d4 <TIM_Base_SetConfig+0x40>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4a3a      	ldr	r2, [pc, #232]	; (8007ab8 <TIM_Base_SetConfig+0x124>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d108      	bne.n	80079e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	68fa      	ldr	r2, [r7, #12]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a2f      	ldr	r2, [pc, #188]	; (8007aa8 <TIM_Base_SetConfig+0x114>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d02b      	beq.n	8007a46 <TIM_Base_SetConfig+0xb2>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079f4:	d027      	beq.n	8007a46 <TIM_Base_SetConfig+0xb2>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a2c      	ldr	r2, [pc, #176]	; (8007aac <TIM_Base_SetConfig+0x118>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d023      	beq.n	8007a46 <TIM_Base_SetConfig+0xb2>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a2b      	ldr	r2, [pc, #172]	; (8007ab0 <TIM_Base_SetConfig+0x11c>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d01f      	beq.n	8007a46 <TIM_Base_SetConfig+0xb2>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4a2a      	ldr	r2, [pc, #168]	; (8007ab4 <TIM_Base_SetConfig+0x120>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d01b      	beq.n	8007a46 <TIM_Base_SetConfig+0xb2>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a29      	ldr	r2, [pc, #164]	; (8007ab8 <TIM_Base_SetConfig+0x124>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d017      	beq.n	8007a46 <TIM_Base_SetConfig+0xb2>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a28      	ldr	r2, [pc, #160]	; (8007abc <TIM_Base_SetConfig+0x128>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d013      	beq.n	8007a46 <TIM_Base_SetConfig+0xb2>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a27      	ldr	r2, [pc, #156]	; (8007ac0 <TIM_Base_SetConfig+0x12c>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d00f      	beq.n	8007a46 <TIM_Base_SetConfig+0xb2>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a26      	ldr	r2, [pc, #152]	; (8007ac4 <TIM_Base_SetConfig+0x130>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d00b      	beq.n	8007a46 <TIM_Base_SetConfig+0xb2>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a25      	ldr	r2, [pc, #148]	; (8007ac8 <TIM_Base_SetConfig+0x134>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d007      	beq.n	8007a46 <TIM_Base_SetConfig+0xb2>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a24      	ldr	r2, [pc, #144]	; (8007acc <TIM_Base_SetConfig+0x138>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d003      	beq.n	8007a46 <TIM_Base_SetConfig+0xb2>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a23      	ldr	r2, [pc, #140]	; (8007ad0 <TIM_Base_SetConfig+0x13c>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d108      	bne.n	8007a58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	68fa      	ldr	r2, [r7, #12]
 8007a54:	4313      	orrs	r3, r2
 8007a56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	695b      	ldr	r3, [r3, #20]
 8007a62:	4313      	orrs	r3, r2
 8007a64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	689a      	ldr	r2, [r3, #8]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a0a      	ldr	r2, [pc, #40]	; (8007aa8 <TIM_Base_SetConfig+0x114>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d003      	beq.n	8007a8c <TIM_Base_SetConfig+0xf8>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a0c      	ldr	r2, [pc, #48]	; (8007ab8 <TIM_Base_SetConfig+0x124>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d103      	bne.n	8007a94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	691a      	ldr	r2, [r3, #16]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2201      	movs	r2, #1
 8007a98:	615a      	str	r2, [r3, #20]
}
 8007a9a:	bf00      	nop
 8007a9c:	3714      	adds	r7, #20
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	40010000 	.word	0x40010000
 8007aac:	40000400 	.word	0x40000400
 8007ab0:	40000800 	.word	0x40000800
 8007ab4:	40000c00 	.word	0x40000c00
 8007ab8:	40010400 	.word	0x40010400
 8007abc:	40014000 	.word	0x40014000
 8007ac0:	40014400 	.word	0x40014400
 8007ac4:	40014800 	.word	0x40014800
 8007ac8:	40001800 	.word	0x40001800
 8007acc:	40001c00 	.word	0x40001c00
 8007ad0:	40002000 	.word	0x40002000

08007ad4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b087      	sub	sp, #28
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a1b      	ldr	r3, [r3, #32]
 8007ae2:	f023 0201 	bic.w	r2, r3, #1
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a1b      	ldr	r3, [r3, #32]
 8007aee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	699b      	ldr	r3, [r3, #24]
 8007afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f023 0303 	bic.w	r3, r3, #3
 8007b0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	4313      	orrs	r3, r2
 8007b14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	f023 0302 	bic.w	r3, r3, #2
 8007b1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	697a      	ldr	r2, [r7, #20]
 8007b24:	4313      	orrs	r3, r2
 8007b26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	4a20      	ldr	r2, [pc, #128]	; (8007bac <TIM_OC1_SetConfig+0xd8>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d003      	beq.n	8007b38 <TIM_OC1_SetConfig+0x64>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4a1f      	ldr	r2, [pc, #124]	; (8007bb0 <TIM_OC1_SetConfig+0xdc>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d10c      	bne.n	8007b52 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	f023 0308 	bic.w	r3, r3, #8
 8007b3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	68db      	ldr	r3, [r3, #12]
 8007b44:	697a      	ldr	r2, [r7, #20]
 8007b46:	4313      	orrs	r3, r2
 8007b48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	f023 0304 	bic.w	r3, r3, #4
 8007b50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4a15      	ldr	r2, [pc, #84]	; (8007bac <TIM_OC1_SetConfig+0xd8>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d003      	beq.n	8007b62 <TIM_OC1_SetConfig+0x8e>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4a14      	ldr	r2, [pc, #80]	; (8007bb0 <TIM_OC1_SetConfig+0xdc>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d111      	bne.n	8007b86 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	695b      	ldr	r3, [r3, #20]
 8007b76:	693a      	ldr	r2, [r7, #16]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	699b      	ldr	r3, [r3, #24]
 8007b80:	693a      	ldr	r2, [r7, #16]
 8007b82:	4313      	orrs	r3, r2
 8007b84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	693a      	ldr	r2, [r7, #16]
 8007b8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	68fa      	ldr	r2, [r7, #12]
 8007b90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	685a      	ldr	r2, [r3, #4]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	697a      	ldr	r2, [r7, #20]
 8007b9e:	621a      	str	r2, [r3, #32]
}
 8007ba0:	bf00      	nop
 8007ba2:	371c      	adds	r7, #28
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr
 8007bac:	40010000 	.word	0x40010000
 8007bb0:	40010400 	.word	0x40010400

08007bb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b087      	sub	sp, #28
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6a1b      	ldr	r3, [r3, #32]
 8007bc2:	f023 0210 	bic.w	r2, r3, #16
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a1b      	ldr	r3, [r3, #32]
 8007bce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	699b      	ldr	r3, [r3, #24]
 8007bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	021b      	lsls	r3, r3, #8
 8007bf2:	68fa      	ldr	r2, [r7, #12]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	f023 0320 	bic.w	r3, r3, #32
 8007bfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	011b      	lsls	r3, r3, #4
 8007c06:	697a      	ldr	r2, [r7, #20]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	4a22      	ldr	r2, [pc, #136]	; (8007c98 <TIM_OC2_SetConfig+0xe4>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d003      	beq.n	8007c1c <TIM_OC2_SetConfig+0x68>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	4a21      	ldr	r2, [pc, #132]	; (8007c9c <TIM_OC2_SetConfig+0xe8>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d10d      	bne.n	8007c38 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	011b      	lsls	r3, r3, #4
 8007c2a:	697a      	ldr	r2, [r7, #20]
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	4a17      	ldr	r2, [pc, #92]	; (8007c98 <TIM_OC2_SetConfig+0xe4>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d003      	beq.n	8007c48 <TIM_OC2_SetConfig+0x94>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	4a16      	ldr	r2, [pc, #88]	; (8007c9c <TIM_OC2_SetConfig+0xe8>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d113      	bne.n	8007c70 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	695b      	ldr	r3, [r3, #20]
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	693a      	ldr	r2, [r7, #16]
 8007c60:	4313      	orrs	r3, r2
 8007c62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	699b      	ldr	r3, [r3, #24]
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	693a      	ldr	r2, [r7, #16]
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	693a      	ldr	r2, [r7, #16]
 8007c74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	685a      	ldr	r2, [r3, #4]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	697a      	ldr	r2, [r7, #20]
 8007c88:	621a      	str	r2, [r3, #32]
}
 8007c8a:	bf00      	nop
 8007c8c:	371c      	adds	r7, #28
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr
 8007c96:	bf00      	nop
 8007c98:	40010000 	.word	0x40010000
 8007c9c:	40010400 	.word	0x40010400

08007ca0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b087      	sub	sp, #28
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6a1b      	ldr	r3, [r3, #32]
 8007cae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a1b      	ldr	r3, [r3, #32]
 8007cba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	69db      	ldr	r3, [r3, #28]
 8007cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f023 0303 	bic.w	r3, r3, #3
 8007cd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	68fa      	ldr	r2, [r7, #12]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ce8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	021b      	lsls	r3, r3, #8
 8007cf0:	697a      	ldr	r2, [r7, #20]
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	4a21      	ldr	r2, [pc, #132]	; (8007d80 <TIM_OC3_SetConfig+0xe0>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d003      	beq.n	8007d06 <TIM_OC3_SetConfig+0x66>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4a20      	ldr	r2, [pc, #128]	; (8007d84 <TIM_OC3_SetConfig+0xe4>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d10d      	bne.n	8007d22 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	021b      	lsls	r3, r3, #8
 8007d14:	697a      	ldr	r2, [r7, #20]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4a16      	ldr	r2, [pc, #88]	; (8007d80 <TIM_OC3_SetConfig+0xe0>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d003      	beq.n	8007d32 <TIM_OC3_SetConfig+0x92>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	4a15      	ldr	r2, [pc, #84]	; (8007d84 <TIM_OC3_SetConfig+0xe4>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d113      	bne.n	8007d5a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	695b      	ldr	r3, [r3, #20]
 8007d46:	011b      	lsls	r3, r3, #4
 8007d48:	693a      	ldr	r2, [r7, #16]
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	699b      	ldr	r3, [r3, #24]
 8007d52:	011b      	lsls	r3, r3, #4
 8007d54:	693a      	ldr	r2, [r7, #16]
 8007d56:	4313      	orrs	r3, r2
 8007d58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	693a      	ldr	r2, [r7, #16]
 8007d5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	68fa      	ldr	r2, [r7, #12]
 8007d64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	685a      	ldr	r2, [r3, #4]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	697a      	ldr	r2, [r7, #20]
 8007d72:	621a      	str	r2, [r3, #32]
}
 8007d74:	bf00      	nop
 8007d76:	371c      	adds	r7, #28
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr
 8007d80:	40010000 	.word	0x40010000
 8007d84:	40010400 	.word	0x40010400

08007d88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b087      	sub	sp, #28
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6a1b      	ldr	r3, [r3, #32]
 8007d96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a1b      	ldr	r3, [r3, #32]
 8007da2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	69db      	ldr	r3, [r3, #28]
 8007dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	021b      	lsls	r3, r3, #8
 8007dc6:	68fa      	ldr	r2, [r7, #12]
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007dd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	031b      	lsls	r3, r3, #12
 8007dda:	693a      	ldr	r2, [r7, #16]
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	4a12      	ldr	r2, [pc, #72]	; (8007e2c <TIM_OC4_SetConfig+0xa4>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d003      	beq.n	8007df0 <TIM_OC4_SetConfig+0x68>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4a11      	ldr	r2, [pc, #68]	; (8007e30 <TIM_OC4_SetConfig+0xa8>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d109      	bne.n	8007e04 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007df6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	695b      	ldr	r3, [r3, #20]
 8007dfc:	019b      	lsls	r3, r3, #6
 8007dfe:	697a      	ldr	r2, [r7, #20]
 8007e00:	4313      	orrs	r3, r2
 8007e02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	697a      	ldr	r2, [r7, #20]
 8007e08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	68fa      	ldr	r2, [r7, #12]
 8007e0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	685a      	ldr	r2, [r3, #4]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	693a      	ldr	r2, [r7, #16]
 8007e1c:	621a      	str	r2, [r3, #32]
}
 8007e1e:	bf00      	nop
 8007e20:	371c      	adds	r7, #28
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr
 8007e2a:	bf00      	nop
 8007e2c:	40010000 	.word	0x40010000
 8007e30:	40010400 	.word	0x40010400

08007e34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b087      	sub	sp, #28
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	6a1b      	ldr	r3, [r3, #32]
 8007e44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	6a1b      	ldr	r3, [r3, #32]
 8007e4a:	f023 0201 	bic.w	r2, r3, #1
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	699b      	ldr	r3, [r3, #24]
 8007e56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	011b      	lsls	r3, r3, #4
 8007e64:	693a      	ldr	r2, [r7, #16]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	f023 030a 	bic.w	r3, r3, #10
 8007e70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e72:	697a      	ldr	r2, [r7, #20]
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	693a      	ldr	r2, [r7, #16]
 8007e7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	697a      	ldr	r2, [r7, #20]
 8007e84:	621a      	str	r2, [r3, #32]
}
 8007e86:	bf00      	nop
 8007e88:	371c      	adds	r7, #28
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr

08007e92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e92:	b480      	push	{r7}
 8007e94:	b087      	sub	sp, #28
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	60f8      	str	r0, [r7, #12]
 8007e9a:	60b9      	str	r1, [r7, #8]
 8007e9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6a1b      	ldr	r3, [r3, #32]
 8007ea2:	f023 0210 	bic.w	r2, r3, #16
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	699b      	ldr	r3, [r3, #24]
 8007eae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	6a1b      	ldr	r3, [r3, #32]
 8007eb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ebc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	031b      	lsls	r3, r3, #12
 8007ec2:	697a      	ldr	r2, [r7, #20]
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007ece:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	011b      	lsls	r3, r3, #4
 8007ed4:	693a      	ldr	r2, [r7, #16]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	697a      	ldr	r2, [r7, #20]
 8007ede:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	693a      	ldr	r2, [r7, #16]
 8007ee4:	621a      	str	r2, [r3, #32]
}
 8007ee6:	bf00      	nop
 8007ee8:	371c      	adds	r7, #28
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr

08007ef2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007ef2:	b480      	push	{r7}
 8007ef4:	b085      	sub	sp, #20
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
 8007efa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f0a:	683a      	ldr	r2, [r7, #0]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	f043 0307 	orr.w	r3, r3, #7
 8007f14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	68fa      	ldr	r2, [r7, #12]
 8007f1a:	609a      	str	r2, [r3, #8]
}
 8007f1c:	bf00      	nop
 8007f1e:	3714      	adds	r7, #20
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b087      	sub	sp, #28
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	607a      	str	r2, [r7, #4]
 8007f34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	021a      	lsls	r2, r3, #8
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	431a      	orrs	r2, r3
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	697a      	ldr	r2, [r7, #20]
 8007f52:	4313      	orrs	r3, r2
 8007f54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	697a      	ldr	r2, [r7, #20]
 8007f5a:	609a      	str	r2, [r3, #8]
}
 8007f5c:	bf00      	nop
 8007f5e:	371c      	adds	r7, #28
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b087      	sub	sp, #28
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	60b9      	str	r1, [r7, #8]
 8007f72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	f003 031f 	and.w	r3, r3, #31
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	6a1a      	ldr	r2, [r3, #32]
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	43db      	mvns	r3, r3
 8007f8a:	401a      	ands	r2, r3
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6a1a      	ldr	r2, [r3, #32]
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	f003 031f 	and.w	r3, r3, #31
 8007f9a:	6879      	ldr	r1, [r7, #4]
 8007f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8007fa0:	431a      	orrs	r2, r3
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	621a      	str	r2, [r3, #32]
}
 8007fa6:	bf00      	nop
 8007fa8:	371c      	adds	r7, #28
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr
	...

08007fb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d101      	bne.n	8007fcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007fc8:	2302      	movs	r3, #2
 8007fca:	e05a      	b.n	8008082 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2202      	movs	r2, #2
 8007fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ff2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	68fa      	ldr	r2, [r7, #12]
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	68fa      	ldr	r2, [r7, #12]
 8008004:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a21      	ldr	r2, [pc, #132]	; (8008090 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d022      	beq.n	8008056 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008018:	d01d      	beq.n	8008056 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a1d      	ldr	r2, [pc, #116]	; (8008094 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d018      	beq.n	8008056 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a1b      	ldr	r2, [pc, #108]	; (8008098 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d013      	beq.n	8008056 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a1a      	ldr	r2, [pc, #104]	; (800809c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d00e      	beq.n	8008056 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a18      	ldr	r2, [pc, #96]	; (80080a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d009      	beq.n	8008056 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a17      	ldr	r2, [pc, #92]	; (80080a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d004      	beq.n	8008056 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a15      	ldr	r2, [pc, #84]	; (80080a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d10c      	bne.n	8008070 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800805c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	68ba      	ldr	r2, [r7, #8]
 8008064:	4313      	orrs	r3, r2
 8008066:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68ba      	ldr	r2, [r7, #8]
 800806e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2201      	movs	r2, #1
 8008074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008080:	2300      	movs	r3, #0
}
 8008082:	4618      	mov	r0, r3
 8008084:	3714      	adds	r7, #20
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	40010000 	.word	0x40010000
 8008094:	40000400 	.word	0x40000400
 8008098:	40000800 	.word	0x40000800
 800809c:	40000c00 	.word	0x40000c00
 80080a0:	40010400 	.word	0x40010400
 80080a4:	40014000 	.word	0x40014000
 80080a8:	40001800 	.word	0x40001800

080080ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80080b4:	bf00      	nop
 80080b6:	370c      	adds	r7, #12
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80080c8:	bf00      	nop
 80080ca:	370c      	adds	r7, #12
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d101      	bne.n	80080e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	e03f      	b.n	8008166 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d106      	bne.n	8008100 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f7fd f84e 	bl	800519c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2224      	movs	r2, #36	; 0x24
 8008104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	68da      	ldr	r2, [r3, #12]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008116:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 ff43 	bl	8008fa4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	691a      	ldr	r2, [r3, #16]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800812c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	695a      	ldr	r2, [r3, #20]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800813c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	68da      	ldr	r2, [r3, #12]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800814c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2220      	movs	r2, #32
 8008158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2220      	movs	r2, #32
 8008160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3708      	adds	r7, #8
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
	...

08008170 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b08c      	sub	sp, #48	; 0x30
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	4613      	mov	r3, r2
 800817c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008184:	b2db      	uxtb	r3, r3
 8008186:	2b20      	cmp	r3, #32
 8008188:	d165      	bne.n	8008256 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d002      	beq.n	8008196 <HAL_UART_Transmit_DMA+0x26>
 8008190:	88fb      	ldrh	r3, [r7, #6]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d101      	bne.n	800819a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	e05e      	b.n	8008258 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d101      	bne.n	80081a8 <HAL_UART_Transmit_DMA+0x38>
 80081a4:	2302      	movs	r3, #2
 80081a6:	e057      	b.n	8008258 <HAL_UART_Transmit_DMA+0xe8>
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2201      	movs	r2, #1
 80081ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80081b0:	68ba      	ldr	r2, [r7, #8]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	88fa      	ldrh	r2, [r7, #6]
 80081ba:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	88fa      	ldrh	r2, [r7, #6]
 80081c0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2200      	movs	r2, #0
 80081c6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2221      	movs	r2, #33	; 0x21
 80081cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081d4:	4a22      	ldr	r2, [pc, #136]	; (8008260 <HAL_UART_Transmit_DMA+0xf0>)
 80081d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081dc:	4a21      	ldr	r2, [pc, #132]	; (8008264 <HAL_UART_Transmit_DMA+0xf4>)
 80081de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081e4:	4a20      	ldr	r2, [pc, #128]	; (8008268 <HAL_UART_Transmit_DMA+0xf8>)
 80081e6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081ec:	2200      	movs	r2, #0
 80081ee:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80081f0:	f107 0308 	add.w	r3, r7, #8
 80081f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80081fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081fc:	6819      	ldr	r1, [r3, #0]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	3304      	adds	r3, #4
 8008204:	461a      	mov	r2, r3
 8008206:	88fb      	ldrh	r3, [r7, #6]
 8008208:	f7fd fbf0 	bl	80059ec <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008214:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2200      	movs	r2, #0
 800821a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	3314      	adds	r3, #20
 8008224:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008226:	69bb      	ldr	r3, [r7, #24]
 8008228:	e853 3f00 	ldrex	r3, [r3]
 800822c:	617b      	str	r3, [r7, #20]
   return(result);
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008234:	62bb      	str	r3, [r7, #40]	; 0x28
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	3314      	adds	r3, #20
 800823c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800823e:	627a      	str	r2, [r7, #36]	; 0x24
 8008240:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008242:	6a39      	ldr	r1, [r7, #32]
 8008244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008246:	e841 2300 	strex	r3, r2, [r1]
 800824a:	61fb      	str	r3, [r7, #28]
   return(result);
 800824c:	69fb      	ldr	r3, [r7, #28]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d1e5      	bne.n	800821e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8008252:	2300      	movs	r3, #0
 8008254:	e000      	b.n	8008258 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8008256:	2302      	movs	r3, #2
  }
}
 8008258:	4618      	mov	r0, r3
 800825a:	3730      	adds	r7, #48	; 0x30
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}
 8008260:	0800883d 	.word	0x0800883d
 8008264:	080088d7 	.word	0x080088d7
 8008268:	08008a4f 	.word	0x08008a4f

0800826c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	4613      	mov	r3, r2
 8008278:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008280:	b2db      	uxtb	r3, r3
 8008282:	2b20      	cmp	r3, #32
 8008284:	d11d      	bne.n	80082c2 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d002      	beq.n	8008292 <HAL_UART_Receive_DMA+0x26>
 800828c:	88fb      	ldrh	r3, [r7, #6]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d101      	bne.n	8008296 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	e016      	b.n	80082c4 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800829c:	2b01      	cmp	r3, #1
 800829e:	d101      	bne.n	80082a4 <HAL_UART_Receive_DMA+0x38>
 80082a0:	2302      	movs	r3, #2
 80082a2:	e00f      	b.n	80082c4 <HAL_UART_Receive_DMA+0x58>
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2201      	movs	r2, #1
 80082a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2200      	movs	r2, #0
 80082b0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80082b2:	88fb      	ldrh	r3, [r7, #6]
 80082b4:	461a      	mov	r2, r3
 80082b6:	68b9      	ldr	r1, [r7, #8]
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	f000 fc13 	bl	8008ae4 <UART_Start_Receive_DMA>
 80082be:	4603      	mov	r3, r0
 80082c0:	e000      	b.n	80082c4 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80082c2:	2302      	movs	r3, #2
  }
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3710      	adds	r7, #16
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b0ba      	sub	sp, #232	; 0xe8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	695b      	ldr	r3, [r3, #20]
 80082ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80082f2:	2300      	movs	r3, #0
 80082f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80082f8:	2300      	movs	r3, #0
 80082fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80082fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008302:	f003 030f 	and.w	r3, r3, #15
 8008306:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800830a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800830e:	2b00      	cmp	r3, #0
 8008310:	d10f      	bne.n	8008332 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008316:	f003 0320 	and.w	r3, r3, #32
 800831a:	2b00      	cmp	r3, #0
 800831c:	d009      	beq.n	8008332 <HAL_UART_IRQHandler+0x66>
 800831e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008322:	f003 0320 	and.w	r3, r3, #32
 8008326:	2b00      	cmp	r3, #0
 8008328:	d003      	beq.n	8008332 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 fd7f 	bl	8008e2e <UART_Receive_IT>
      return;
 8008330:	e256      	b.n	80087e0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008332:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008336:	2b00      	cmp	r3, #0
 8008338:	f000 80de 	beq.w	80084f8 <HAL_UART_IRQHandler+0x22c>
 800833c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008340:	f003 0301 	and.w	r3, r3, #1
 8008344:	2b00      	cmp	r3, #0
 8008346:	d106      	bne.n	8008356 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800834c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008350:	2b00      	cmp	r3, #0
 8008352:	f000 80d1 	beq.w	80084f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800835a:	f003 0301 	and.w	r3, r3, #1
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00b      	beq.n	800837a <HAL_UART_IRQHandler+0xae>
 8008362:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800836a:	2b00      	cmp	r3, #0
 800836c:	d005      	beq.n	800837a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008372:	f043 0201 	orr.w	r2, r3, #1
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800837a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800837e:	f003 0304 	and.w	r3, r3, #4
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00b      	beq.n	800839e <HAL_UART_IRQHandler+0xd2>
 8008386:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800838a:	f003 0301 	and.w	r3, r3, #1
 800838e:	2b00      	cmp	r3, #0
 8008390:	d005      	beq.n	800839e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008396:	f043 0202 	orr.w	r2, r3, #2
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800839e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083a2:	f003 0302 	and.w	r3, r3, #2
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d00b      	beq.n	80083c2 <HAL_UART_IRQHandler+0xf6>
 80083aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083ae:	f003 0301 	and.w	r3, r3, #1
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d005      	beq.n	80083c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ba:	f043 0204 	orr.w	r2, r3, #4
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80083c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083c6:	f003 0308 	and.w	r3, r3, #8
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d011      	beq.n	80083f2 <HAL_UART_IRQHandler+0x126>
 80083ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083d2:	f003 0320 	and.w	r3, r3, #32
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d105      	bne.n	80083e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80083da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083de:	f003 0301 	and.w	r3, r3, #1
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d005      	beq.n	80083f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ea:	f043 0208 	orr.w	r2, r3, #8
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	f000 81ed 	beq.w	80087d6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80083fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008400:	f003 0320 	and.w	r3, r3, #32
 8008404:	2b00      	cmp	r3, #0
 8008406:	d008      	beq.n	800841a <HAL_UART_IRQHandler+0x14e>
 8008408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800840c:	f003 0320 	and.w	r3, r3, #32
 8008410:	2b00      	cmp	r3, #0
 8008412:	d002      	beq.n	800841a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 fd0a 	bl	8008e2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	695b      	ldr	r3, [r3, #20]
 8008420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008424:	2b40      	cmp	r3, #64	; 0x40
 8008426:	bf0c      	ite	eq
 8008428:	2301      	moveq	r3, #1
 800842a:	2300      	movne	r3, #0
 800842c:	b2db      	uxtb	r3, r3
 800842e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008436:	f003 0308 	and.w	r3, r3, #8
 800843a:	2b00      	cmp	r3, #0
 800843c:	d103      	bne.n	8008446 <HAL_UART_IRQHandler+0x17a>
 800843e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008442:	2b00      	cmp	r3, #0
 8008444:	d04f      	beq.n	80084e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 fc12 	bl	8008c70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	695b      	ldr	r3, [r3, #20]
 8008452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008456:	2b40      	cmp	r3, #64	; 0x40
 8008458:	d141      	bne.n	80084de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	3314      	adds	r3, #20
 8008460:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008464:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008468:	e853 3f00 	ldrex	r3, [r3]
 800846c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008470:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008474:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008478:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	3314      	adds	r3, #20
 8008482:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008486:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800848a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800848e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008492:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008496:	e841 2300 	strex	r3, r2, [r1]
 800849a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800849e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d1d9      	bne.n	800845a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d013      	beq.n	80084d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b2:	4a7d      	ldr	r2, [pc, #500]	; (80086a8 <HAL_UART_IRQHandler+0x3dc>)
 80084b4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7fd fb5e 	bl	8005b7c <HAL_DMA_Abort_IT>
 80084c0:	4603      	mov	r3, r0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d016      	beq.n	80084f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80084d0:	4610      	mov	r0, r2
 80084d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084d4:	e00e      	b.n	80084f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 f99a 	bl	8008810 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084dc:	e00a      	b.n	80084f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 f996 	bl	8008810 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084e4:	e006      	b.n	80084f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 f992 	bl	8008810 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80084f2:	e170      	b.n	80087d6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084f4:	bf00      	nop
    return;
 80084f6:	e16e      	b.n	80087d6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	f040 814a 	bne.w	8008796 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008506:	f003 0310 	and.w	r3, r3, #16
 800850a:	2b00      	cmp	r3, #0
 800850c:	f000 8143 	beq.w	8008796 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008514:	f003 0310 	and.w	r3, r3, #16
 8008518:	2b00      	cmp	r3, #0
 800851a:	f000 813c 	beq.w	8008796 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800851e:	2300      	movs	r3, #0
 8008520:	60bb      	str	r3, [r7, #8]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	60bb      	str	r3, [r7, #8]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	60bb      	str	r3, [r7, #8]
 8008532:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	695b      	ldr	r3, [r3, #20]
 800853a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800853e:	2b40      	cmp	r3, #64	; 0x40
 8008540:	f040 80b4 	bne.w	80086ac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008550:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008554:	2b00      	cmp	r3, #0
 8008556:	f000 8140 	beq.w	80087da <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800855e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008562:	429a      	cmp	r2, r3
 8008564:	f080 8139 	bcs.w	80087da <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800856e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008574:	69db      	ldr	r3, [r3, #28]
 8008576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800857a:	f000 8088 	beq.w	800868e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	330c      	adds	r3, #12
 8008584:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008588:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800858c:	e853 3f00 	ldrex	r3, [r3]
 8008590:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008594:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008598:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800859c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	330c      	adds	r3, #12
 80085a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80085aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80085ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80085b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80085ba:	e841 2300 	strex	r3, r2, [r1]
 80085be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80085c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d1d9      	bne.n	800857e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	3314      	adds	r3, #20
 80085d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085d4:	e853 3f00 	ldrex	r3, [r3]
 80085d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80085da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085dc:	f023 0301 	bic.w	r3, r3, #1
 80085e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	3314      	adds	r3, #20
 80085ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80085ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80085f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80085f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80085fa:	e841 2300 	strex	r3, r2, [r1]
 80085fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008600:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008602:	2b00      	cmp	r3, #0
 8008604:	d1e1      	bne.n	80085ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	3314      	adds	r3, #20
 800860c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800860e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008610:	e853 3f00 	ldrex	r3, [r3]
 8008614:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008616:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008618:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800861c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	3314      	adds	r3, #20
 8008626:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800862a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800862c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800862e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008630:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008632:	e841 2300 	strex	r3, r2, [r1]
 8008636:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008638:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800863a:	2b00      	cmp	r3, #0
 800863c:	d1e3      	bne.n	8008606 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2220      	movs	r2, #32
 8008642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2200      	movs	r2, #0
 800864a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	330c      	adds	r3, #12
 8008652:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008656:	e853 3f00 	ldrex	r3, [r3]
 800865a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800865c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800865e:	f023 0310 	bic.w	r3, r3, #16
 8008662:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	330c      	adds	r3, #12
 800866c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008670:	65ba      	str	r2, [r7, #88]	; 0x58
 8008672:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008674:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008676:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008678:	e841 2300 	strex	r3, r2, [r1]
 800867c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800867e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008680:	2b00      	cmp	r3, #0
 8008682:	d1e3      	bne.n	800864c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008688:	4618      	mov	r0, r3
 800868a:	f7fd fa07 	bl	8005a9c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008696:	b29b      	uxth	r3, r3
 8008698:	1ad3      	subs	r3, r2, r3
 800869a:	b29b      	uxth	r3, r3
 800869c:	4619      	mov	r1, r3
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 f8c0 	bl	8008824 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80086a4:	e099      	b.n	80087da <HAL_UART_IRQHandler+0x50e>
 80086a6:	bf00      	nop
 80086a8:	08008d37 	.word	0x08008d37
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	1ad3      	subs	r3, r2, r3
 80086b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	f000 808b 	beq.w	80087de <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80086c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	f000 8086 	beq.w	80087de <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	330c      	adds	r3, #12
 80086d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086dc:	e853 3f00 	ldrex	r3, [r3]
 80086e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80086e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	330c      	adds	r3, #12
 80086f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80086f6:	647a      	str	r2, [r7, #68]	; 0x44
 80086f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80086fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086fe:	e841 2300 	strex	r3, r2, [r1]
 8008702:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008706:	2b00      	cmp	r3, #0
 8008708:	d1e3      	bne.n	80086d2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	3314      	adds	r3, #20
 8008710:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008714:	e853 3f00 	ldrex	r3, [r3]
 8008718:	623b      	str	r3, [r7, #32]
   return(result);
 800871a:	6a3b      	ldr	r3, [r7, #32]
 800871c:	f023 0301 	bic.w	r3, r3, #1
 8008720:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	3314      	adds	r3, #20
 800872a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800872e:	633a      	str	r2, [r7, #48]	; 0x30
 8008730:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008732:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008734:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008736:	e841 2300 	strex	r3, r2, [r1]
 800873a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800873c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800873e:	2b00      	cmp	r3, #0
 8008740:	d1e3      	bne.n	800870a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2220      	movs	r2, #32
 8008746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2200      	movs	r2, #0
 800874e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	330c      	adds	r3, #12
 8008756:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	e853 3f00 	ldrex	r3, [r3]
 800875e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f023 0310 	bic.w	r3, r3, #16
 8008766:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	330c      	adds	r3, #12
 8008770:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008774:	61fa      	str	r2, [r7, #28]
 8008776:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008778:	69b9      	ldr	r1, [r7, #24]
 800877a:	69fa      	ldr	r2, [r7, #28]
 800877c:	e841 2300 	strex	r3, r2, [r1]
 8008780:	617b      	str	r3, [r7, #20]
   return(result);
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d1e3      	bne.n	8008750 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008788:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800878c:	4619      	mov	r1, r3
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 f848 	bl	8008824 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008794:	e023      	b.n	80087de <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800879a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d009      	beq.n	80087b6 <HAL_UART_IRQHandler+0x4ea>
 80087a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d003      	beq.n	80087b6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 fad5 	bl	8008d5e <UART_Transmit_IT>
    return;
 80087b4:	e014      	b.n	80087e0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80087b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d00e      	beq.n	80087e0 <HAL_UART_IRQHandler+0x514>
 80087c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d008      	beq.n	80087e0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 fb15 	bl	8008dfe <UART_EndTransmit_IT>
    return;
 80087d4:	e004      	b.n	80087e0 <HAL_UART_IRQHandler+0x514>
    return;
 80087d6:	bf00      	nop
 80087d8:	e002      	b.n	80087e0 <HAL_UART_IRQHandler+0x514>
      return;
 80087da:	bf00      	nop
 80087dc:	e000      	b.n	80087e0 <HAL_UART_IRQHandler+0x514>
      return;
 80087de:	bf00      	nop
  }
}
 80087e0:	37e8      	adds	r7, #232	; 0xe8
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop

080087e8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b083      	sub	sp, #12
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80087f0:	bf00      	nop
 80087f2:	370c      	adds	r7, #12
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008804:	bf00      	nop
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr

08008810 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008818:	bf00      	nop
 800881a:	370c      	adds	r7, #12
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr

08008824 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	460b      	mov	r3, r1
 800882e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008830:	bf00      	nop
 8008832:	370c      	adds	r7, #12
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b090      	sub	sp, #64	; 0x40
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008848:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008854:	2b00      	cmp	r3, #0
 8008856:	d137      	bne.n	80088c8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800885a:	2200      	movs	r2, #0
 800885c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800885e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	3314      	adds	r3, #20
 8008864:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008868:	e853 3f00 	ldrex	r3, [r3]
 800886c:	623b      	str	r3, [r7, #32]
   return(result);
 800886e:	6a3b      	ldr	r3, [r7, #32]
 8008870:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008874:	63bb      	str	r3, [r7, #56]	; 0x38
 8008876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	3314      	adds	r3, #20
 800887c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800887e:	633a      	str	r2, [r7, #48]	; 0x30
 8008880:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008882:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008886:	e841 2300 	strex	r3, r2, [r1]
 800888a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800888c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800888e:	2b00      	cmp	r3, #0
 8008890:	d1e5      	bne.n	800885e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	330c      	adds	r3, #12
 8008898:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	e853 3f00 	ldrex	r3, [r3]
 80088a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088a8:	637b      	str	r3, [r7, #52]	; 0x34
 80088aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	330c      	adds	r3, #12
 80088b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088b2:	61fa      	str	r2, [r7, #28]
 80088b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b6:	69b9      	ldr	r1, [r7, #24]
 80088b8:	69fa      	ldr	r2, [r7, #28]
 80088ba:	e841 2300 	strex	r3, r2, [r1]
 80088be:	617b      	str	r3, [r7, #20]
   return(result);
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d1e5      	bne.n	8008892 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80088c6:	e002      	b.n	80088ce <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80088c8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80088ca:	f7fa fe49 	bl	8003560 <HAL_UART_TxCpltCallback>
}
 80088ce:	bf00      	nop
 80088d0:	3740      	adds	r7, #64	; 0x40
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80088d6:	b580      	push	{r7, lr}
 80088d8:	b084      	sub	sp, #16
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	f7ff ff7f 	bl	80087e8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088ea:	bf00      	nop
 80088ec:	3710      	adds	r7, #16
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b09c      	sub	sp, #112	; 0x70
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800890a:	2b00      	cmp	r3, #0
 800890c:	d172      	bne.n	80089f4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800890e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008910:	2200      	movs	r2, #0
 8008912:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	330c      	adds	r3, #12
 800891a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800891c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800891e:	e853 3f00 	ldrex	r3, [r3]
 8008922:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008924:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008926:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800892a:	66bb      	str	r3, [r7, #104]	; 0x68
 800892c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	330c      	adds	r3, #12
 8008932:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008934:	65ba      	str	r2, [r7, #88]	; 0x58
 8008936:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008938:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800893a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800893c:	e841 2300 	strex	r3, r2, [r1]
 8008940:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008944:	2b00      	cmp	r3, #0
 8008946:	d1e5      	bne.n	8008914 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	3314      	adds	r3, #20
 800894e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008952:	e853 3f00 	ldrex	r3, [r3]
 8008956:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800895a:	f023 0301 	bic.w	r3, r3, #1
 800895e:	667b      	str	r3, [r7, #100]	; 0x64
 8008960:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	3314      	adds	r3, #20
 8008966:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008968:	647a      	str	r2, [r7, #68]	; 0x44
 800896a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800896c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800896e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008970:	e841 2300 	strex	r3, r2, [r1]
 8008974:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008978:	2b00      	cmp	r3, #0
 800897a:	d1e5      	bne.n	8008948 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800897c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	3314      	adds	r3, #20
 8008982:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008986:	e853 3f00 	ldrex	r3, [r3]
 800898a:	623b      	str	r3, [r7, #32]
   return(result);
 800898c:	6a3b      	ldr	r3, [r7, #32]
 800898e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008992:	663b      	str	r3, [r7, #96]	; 0x60
 8008994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	3314      	adds	r3, #20
 800899a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800899c:	633a      	str	r2, [r7, #48]	; 0x30
 800899e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80089a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089a4:	e841 2300 	strex	r3, r2, [r1]
 80089a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80089aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d1e5      	bne.n	800897c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80089b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089b2:	2220      	movs	r2, #32
 80089b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d119      	bne.n	80089f4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	330c      	adds	r3, #12
 80089c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	e853 3f00 	ldrex	r3, [r3]
 80089ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f023 0310 	bic.w	r3, r3, #16
 80089d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80089d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	330c      	adds	r3, #12
 80089de:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80089e0:	61fa      	str	r2, [r7, #28]
 80089e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e4:	69b9      	ldr	r1, [r7, #24]
 80089e6:	69fa      	ldr	r2, [r7, #28]
 80089e8:	e841 2300 	strex	r3, r2, [r1]
 80089ec:	617b      	str	r3, [r7, #20]
   return(result);
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d1e5      	bne.n	80089c0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d106      	bne.n	8008a0a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008a00:	4619      	mov	r1, r3
 8008a02:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008a04:	f7ff ff0e 	bl	8008824 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008a08:	e002      	b.n	8008a10 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008a0a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008a0c:	f7fa fdba 	bl	8003584 <HAL_UART_RxCpltCallback>
}
 8008a10:	bf00      	nop
 8008a12:	3770      	adds	r7, #112	; 0x70
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b084      	sub	sp, #16
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a24:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d108      	bne.n	8008a40 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008a32:	085b      	lsrs	r3, r3, #1
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	4619      	mov	r1, r3
 8008a38:	68f8      	ldr	r0, [r7, #12]
 8008a3a:	f7ff fef3 	bl	8008824 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008a3e:	e002      	b.n	8008a46 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008a40:	68f8      	ldr	r0, [r7, #12]
 8008a42:	f7ff fedb 	bl	80087fc <HAL_UART_RxHalfCpltCallback>
}
 8008a46:	bf00      	nop
 8008a48:	3710      	adds	r7, #16
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	b084      	sub	sp, #16
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008a56:	2300      	movs	r3, #0
 8008a58:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a5e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	695b      	ldr	r3, [r3, #20]
 8008a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a6a:	2b80      	cmp	r3, #128	; 0x80
 8008a6c:	bf0c      	ite	eq
 8008a6e:	2301      	moveq	r3, #1
 8008a70:	2300      	movne	r3, #0
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	2b21      	cmp	r3, #33	; 0x21
 8008a80:	d108      	bne.n	8008a94 <UART_DMAError+0x46>
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d005      	beq.n	8008a94 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008a8e:	68b8      	ldr	r0, [r7, #8]
 8008a90:	f000 f8c6 	bl	8008c20 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	695b      	ldr	r3, [r3, #20]
 8008a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a9e:	2b40      	cmp	r3, #64	; 0x40
 8008aa0:	bf0c      	ite	eq
 8008aa2:	2301      	moveq	r3, #1
 8008aa4:	2300      	movne	r3, #0
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	2b22      	cmp	r3, #34	; 0x22
 8008ab4:	d108      	bne.n	8008ac8 <UART_DMAError+0x7a>
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d005      	beq.n	8008ac8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008ac2:	68b8      	ldr	r0, [r7, #8]
 8008ac4:	f000 f8d4 	bl	8008c70 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008acc:	f043 0210 	orr.w	r2, r3, #16
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ad4:	68b8      	ldr	r0, [r7, #8]
 8008ad6:	f7ff fe9b 	bl	8008810 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ada:	bf00      	nop
 8008adc:	3710      	adds	r7, #16
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
	...

08008ae4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b098      	sub	sp, #96	; 0x60
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	60b9      	str	r1, [r7, #8]
 8008aee:	4613      	mov	r3, r2
 8008af0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008af2:	68ba      	ldr	r2, [r7, #8]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	88fa      	ldrh	r2, [r7, #6]
 8008afc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2200      	movs	r2, #0
 8008b02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2222      	movs	r2, #34	; 0x22
 8008b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b10:	4a40      	ldr	r2, [pc, #256]	; (8008c14 <UART_Start_Receive_DMA+0x130>)
 8008b12:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b18:	4a3f      	ldr	r2, [pc, #252]	; (8008c18 <UART_Start_Receive_DMA+0x134>)
 8008b1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b20:	4a3e      	ldr	r2, [pc, #248]	; (8008c1c <UART_Start_Receive_DMA+0x138>)
 8008b22:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b28:	2200      	movs	r2, #0
 8008b2a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008b2c:	f107 0308 	add.w	r3, r7, #8
 8008b30:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	3304      	adds	r3, #4
 8008b3c:	4619      	mov	r1, r3
 8008b3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	88fb      	ldrh	r3, [r7, #6]
 8008b44:	f7fc ff52 	bl	80059ec <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008b48:	2300      	movs	r3, #0
 8008b4a:	613b      	str	r3, [r7, #16]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	613b      	str	r3, [r7, #16]
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	613b      	str	r3, [r7, #16]
 8008b5c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2200      	movs	r2, #0
 8008b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	691b      	ldr	r3, [r3, #16]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d019      	beq.n	8008ba2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	330c      	adds	r3, #12
 8008b74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b78:	e853 3f00 	ldrex	r3, [r3]
 8008b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b84:	65bb      	str	r3, [r7, #88]	; 0x58
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	330c      	adds	r3, #12
 8008b8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008b8e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008b90:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b92:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008b94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008b96:	e841 2300 	strex	r3, r2, [r1]
 8008b9a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008b9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d1e5      	bne.n	8008b6e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	3314      	adds	r3, #20
 8008ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bac:	e853 3f00 	ldrex	r3, [r3]
 8008bb0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb4:	f043 0301 	orr.w	r3, r3, #1
 8008bb8:	657b      	str	r3, [r7, #84]	; 0x54
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	3314      	adds	r3, #20
 8008bc0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008bc2:	63ba      	str	r2, [r7, #56]	; 0x38
 8008bc4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008bc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bca:	e841 2300 	strex	r3, r2, [r1]
 8008bce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d1e5      	bne.n	8008ba2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	3314      	adds	r3, #20
 8008bdc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bde:	69bb      	ldr	r3, [r7, #24]
 8008be0:	e853 3f00 	ldrex	r3, [r3]
 8008be4:	617b      	str	r3, [r7, #20]
   return(result);
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bec:	653b      	str	r3, [r7, #80]	; 0x50
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	3314      	adds	r3, #20
 8008bf4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008bf6:	627a      	str	r2, [r7, #36]	; 0x24
 8008bf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bfa:	6a39      	ldr	r1, [r7, #32]
 8008bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bfe:	e841 2300 	strex	r3, r2, [r1]
 8008c02:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c04:	69fb      	ldr	r3, [r7, #28]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d1e5      	bne.n	8008bd6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8008c0a:	2300      	movs	r3, #0
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3760      	adds	r7, #96	; 0x60
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}
 8008c14:	080088f3 	.word	0x080088f3
 8008c18:	08008a19 	.word	0x08008a19
 8008c1c:	08008a4f 	.word	0x08008a4f

08008c20 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b089      	sub	sp, #36	; 0x24
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	330c      	adds	r3, #12
 8008c2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	e853 3f00 	ldrex	r3, [r3]
 8008c36:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008c3e:	61fb      	str	r3, [r7, #28]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	330c      	adds	r3, #12
 8008c46:	69fa      	ldr	r2, [r7, #28]
 8008c48:	61ba      	str	r2, [r7, #24]
 8008c4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c4c:	6979      	ldr	r1, [r7, #20]
 8008c4e:	69ba      	ldr	r2, [r7, #24]
 8008c50:	e841 2300 	strex	r3, r2, [r1]
 8008c54:	613b      	str	r3, [r7, #16]
   return(result);
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d1e5      	bne.n	8008c28 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2220      	movs	r2, #32
 8008c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008c64:	bf00      	nop
 8008c66:	3724      	adds	r7, #36	; 0x24
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b095      	sub	sp, #84	; 0x54
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	330c      	adds	r3, #12
 8008c7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c82:	e853 3f00 	ldrex	r3, [r3]
 8008c86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	330c      	adds	r3, #12
 8008c96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008c98:	643a      	str	r2, [r7, #64]	; 0x40
 8008c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ca0:	e841 2300 	strex	r3, r2, [r1]
 8008ca4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d1e5      	bne.n	8008c78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	3314      	adds	r3, #20
 8008cb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb4:	6a3b      	ldr	r3, [r7, #32]
 8008cb6:	e853 3f00 	ldrex	r3, [r3]
 8008cba:	61fb      	str	r3, [r7, #28]
   return(result);
 8008cbc:	69fb      	ldr	r3, [r7, #28]
 8008cbe:	f023 0301 	bic.w	r3, r3, #1
 8008cc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	3314      	adds	r3, #20
 8008cca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ccc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008cce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008cd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cd4:	e841 2300 	strex	r3, r2, [r1]
 8008cd8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d1e5      	bne.n	8008cac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d119      	bne.n	8008d1c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	330c      	adds	r3, #12
 8008cee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	e853 3f00 	ldrex	r3, [r3]
 8008cf6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	f023 0310 	bic.w	r3, r3, #16
 8008cfe:	647b      	str	r3, [r7, #68]	; 0x44
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	330c      	adds	r3, #12
 8008d06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d08:	61ba      	str	r2, [r7, #24]
 8008d0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d0c:	6979      	ldr	r1, [r7, #20]
 8008d0e:	69ba      	ldr	r2, [r7, #24]
 8008d10:	e841 2300 	strex	r3, r2, [r1]
 8008d14:	613b      	str	r3, [r7, #16]
   return(result);
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d1e5      	bne.n	8008ce8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2220      	movs	r2, #32
 8008d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2200      	movs	r2, #0
 8008d28:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008d2a:	bf00      	nop
 8008d2c:	3754      	adds	r7, #84	; 0x54
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d34:	4770      	bx	lr

08008d36 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d36:	b580      	push	{r7, lr}
 8008d38:	b084      	sub	sp, #16
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2200      	movs	r2, #0
 8008d48:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d50:	68f8      	ldr	r0, [r7, #12]
 8008d52:	f7ff fd5d 	bl	8008810 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d56:	bf00      	nop
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008d5e:	b480      	push	{r7}
 8008d60:	b085      	sub	sp, #20
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	2b21      	cmp	r3, #33	; 0x21
 8008d70:	d13e      	bne.n	8008df0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d7a:	d114      	bne.n	8008da6 <UART_Transmit_IT+0x48>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	691b      	ldr	r3, [r3, #16]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d110      	bne.n	8008da6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6a1b      	ldr	r3, [r3, #32]
 8008d88:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	881b      	ldrh	r3, [r3, #0]
 8008d8e:	461a      	mov	r2, r3
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d98:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6a1b      	ldr	r3, [r3, #32]
 8008d9e:	1c9a      	adds	r2, r3, #2
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	621a      	str	r2, [r3, #32]
 8008da4:	e008      	b.n	8008db8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6a1b      	ldr	r3, [r3, #32]
 8008daa:	1c59      	adds	r1, r3, #1
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	6211      	str	r1, [r2, #32]
 8008db0:	781a      	ldrb	r2, [r3, #0]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	3b01      	subs	r3, #1
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d10f      	bne.n	8008dec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	68da      	ldr	r2, [r3, #12]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008dda:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	68da      	ldr	r2, [r3, #12]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008dea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008dec:	2300      	movs	r3, #0
 8008dee:	e000      	b.n	8008df2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008df0:	2302      	movs	r3, #2
  }
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3714      	adds	r7, #20
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr

08008dfe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008dfe:	b580      	push	{r7, lr}
 8008e00:	b082      	sub	sp, #8
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	68da      	ldr	r2, [r3, #12]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e14:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2220      	movs	r2, #32
 8008e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f7fa fb9e 	bl	8003560 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008e24:	2300      	movs	r3, #0
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3708      	adds	r7, #8
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}

08008e2e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008e2e:	b580      	push	{r7, lr}
 8008e30:	b08c      	sub	sp, #48	; 0x30
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	2b22      	cmp	r3, #34	; 0x22
 8008e40:	f040 80ab 	bne.w	8008f9a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e4c:	d117      	bne.n	8008e7e <UART_Receive_IT+0x50>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	691b      	ldr	r3, [r3, #16]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d113      	bne.n	8008e7e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008e56:	2300      	movs	r3, #0
 8008e58:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e5e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e6c:	b29a      	uxth	r2, r3
 8008e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e76:	1c9a      	adds	r2, r3, #2
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	629a      	str	r2, [r3, #40]	; 0x28
 8008e7c:	e026      	b.n	8008ecc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e82:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008e84:	2300      	movs	r3, #0
 8008e86:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e90:	d007      	beq.n	8008ea2 <UART_Receive_IT+0x74>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	689b      	ldr	r3, [r3, #8]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d10a      	bne.n	8008eb0 <UART_Receive_IT+0x82>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	691b      	ldr	r3, [r3, #16]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d106      	bne.n	8008eb0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	b2da      	uxtb	r2, r3
 8008eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eac:	701a      	strb	r2, [r3, #0]
 8008eae:	e008      	b.n	8008ec2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	b2db      	uxtb	r3, r3
 8008eb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ebc:	b2da      	uxtb	r2, r3
 8008ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ec6:	1c5a      	adds	r2, r3, #1
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ed0:	b29b      	uxth	r3, r3
 8008ed2:	3b01      	subs	r3, #1
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	4619      	mov	r1, r3
 8008eda:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d15a      	bne.n	8008f96 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	68da      	ldr	r2, [r3, #12]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f022 0220 	bic.w	r2, r2, #32
 8008eee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	68da      	ldr	r2, [r3, #12]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008efe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	695a      	ldr	r2, [r3, #20]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f022 0201 	bic.w	r2, r2, #1
 8008f0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2220      	movs	r2, #32
 8008f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d135      	bne.n	8008f8c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	330c      	adds	r3, #12
 8008f2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	e853 3f00 	ldrex	r3, [r3]
 8008f34:	613b      	str	r3, [r7, #16]
   return(result);
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	f023 0310 	bic.w	r3, r3, #16
 8008f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	330c      	adds	r3, #12
 8008f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f46:	623a      	str	r2, [r7, #32]
 8008f48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f4a:	69f9      	ldr	r1, [r7, #28]
 8008f4c:	6a3a      	ldr	r2, [r7, #32]
 8008f4e:	e841 2300 	strex	r3, r2, [r1]
 8008f52:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f54:	69bb      	ldr	r3, [r7, #24]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d1e5      	bne.n	8008f26 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f003 0310 	and.w	r3, r3, #16
 8008f64:	2b10      	cmp	r3, #16
 8008f66:	d10a      	bne.n	8008f7e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008f68:	2300      	movs	r3, #0
 8008f6a:	60fb      	str	r3, [r7, #12]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	60fb      	str	r3, [r7, #12]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	60fb      	str	r3, [r7, #12]
 8008f7c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008f82:	4619      	mov	r1, r3
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f7ff fc4d 	bl	8008824 <HAL_UARTEx_RxEventCallback>
 8008f8a:	e002      	b.n	8008f92 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f7fa faf9 	bl	8003584 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008f92:	2300      	movs	r3, #0
 8008f94:	e002      	b.n	8008f9c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008f96:	2300      	movs	r3, #0
 8008f98:	e000      	b.n	8008f9c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008f9a:	2302      	movs	r3, #2
  }
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3730      	adds	r7, #48	; 0x30
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008fa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008fa8:	b0c0      	sub	sp, #256	; 0x100
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	691b      	ldr	r3, [r3, #16]
 8008fb8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fc0:	68d9      	ldr	r1, [r3, #12]
 8008fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	ea40 0301 	orr.w	r3, r0, r1
 8008fcc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fd2:	689a      	ldr	r2, [r3, #8]
 8008fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fd8:	691b      	ldr	r3, [r3, #16]
 8008fda:	431a      	orrs	r2, r3
 8008fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fe0:	695b      	ldr	r3, [r3, #20]
 8008fe2:	431a      	orrs	r2, r3
 8008fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fe8:	69db      	ldr	r3, [r3, #28]
 8008fea:	4313      	orrs	r3, r2
 8008fec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	68db      	ldr	r3, [r3, #12]
 8008ff8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008ffc:	f021 010c 	bic.w	r1, r1, #12
 8009000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009004:	681a      	ldr	r2, [r3, #0]
 8009006:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800900a:	430b      	orrs	r3, r1
 800900c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800900e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	695b      	ldr	r3, [r3, #20]
 8009016:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800901a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800901e:	6999      	ldr	r1, [r3, #24]
 8009020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009024:	681a      	ldr	r2, [r3, #0]
 8009026:	ea40 0301 	orr.w	r3, r0, r1
 800902a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800902c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009030:	681a      	ldr	r2, [r3, #0]
 8009032:	4b8f      	ldr	r3, [pc, #572]	; (8009270 <UART_SetConfig+0x2cc>)
 8009034:	429a      	cmp	r2, r3
 8009036:	d005      	beq.n	8009044 <UART_SetConfig+0xa0>
 8009038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800903c:	681a      	ldr	r2, [r3, #0]
 800903e:	4b8d      	ldr	r3, [pc, #564]	; (8009274 <UART_SetConfig+0x2d0>)
 8009040:	429a      	cmp	r2, r3
 8009042:	d104      	bne.n	800904e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009044:	f7fd fe7a 	bl	8006d3c <HAL_RCC_GetPCLK2Freq>
 8009048:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800904c:	e003      	b.n	8009056 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800904e:	f7fd fe61 	bl	8006d14 <HAL_RCC_GetPCLK1Freq>
 8009052:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800905a:	69db      	ldr	r3, [r3, #28]
 800905c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009060:	f040 810c 	bne.w	800927c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009064:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009068:	2200      	movs	r2, #0
 800906a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800906e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009072:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009076:	4622      	mov	r2, r4
 8009078:	462b      	mov	r3, r5
 800907a:	1891      	adds	r1, r2, r2
 800907c:	65b9      	str	r1, [r7, #88]	; 0x58
 800907e:	415b      	adcs	r3, r3
 8009080:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009082:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009086:	4621      	mov	r1, r4
 8009088:	eb12 0801 	adds.w	r8, r2, r1
 800908c:	4629      	mov	r1, r5
 800908e:	eb43 0901 	adc.w	r9, r3, r1
 8009092:	f04f 0200 	mov.w	r2, #0
 8009096:	f04f 0300 	mov.w	r3, #0
 800909a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800909e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80090a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80090a6:	4690      	mov	r8, r2
 80090a8:	4699      	mov	r9, r3
 80090aa:	4623      	mov	r3, r4
 80090ac:	eb18 0303 	adds.w	r3, r8, r3
 80090b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80090b4:	462b      	mov	r3, r5
 80090b6:	eb49 0303 	adc.w	r3, r9, r3
 80090ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80090be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80090ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80090ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80090d2:	460b      	mov	r3, r1
 80090d4:	18db      	adds	r3, r3, r3
 80090d6:	653b      	str	r3, [r7, #80]	; 0x50
 80090d8:	4613      	mov	r3, r2
 80090da:	eb42 0303 	adc.w	r3, r2, r3
 80090de:	657b      	str	r3, [r7, #84]	; 0x54
 80090e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80090e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80090e8:	f7f7 fbd8 	bl	800089c <__aeabi_uldivmod>
 80090ec:	4602      	mov	r2, r0
 80090ee:	460b      	mov	r3, r1
 80090f0:	4b61      	ldr	r3, [pc, #388]	; (8009278 <UART_SetConfig+0x2d4>)
 80090f2:	fba3 2302 	umull	r2, r3, r3, r2
 80090f6:	095b      	lsrs	r3, r3, #5
 80090f8:	011c      	lsls	r4, r3, #4
 80090fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090fe:	2200      	movs	r2, #0
 8009100:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009104:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009108:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800910c:	4642      	mov	r2, r8
 800910e:	464b      	mov	r3, r9
 8009110:	1891      	adds	r1, r2, r2
 8009112:	64b9      	str	r1, [r7, #72]	; 0x48
 8009114:	415b      	adcs	r3, r3
 8009116:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009118:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800911c:	4641      	mov	r1, r8
 800911e:	eb12 0a01 	adds.w	sl, r2, r1
 8009122:	4649      	mov	r1, r9
 8009124:	eb43 0b01 	adc.w	fp, r3, r1
 8009128:	f04f 0200 	mov.w	r2, #0
 800912c:	f04f 0300 	mov.w	r3, #0
 8009130:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009134:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009138:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800913c:	4692      	mov	sl, r2
 800913e:	469b      	mov	fp, r3
 8009140:	4643      	mov	r3, r8
 8009142:	eb1a 0303 	adds.w	r3, sl, r3
 8009146:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800914a:	464b      	mov	r3, r9
 800914c:	eb4b 0303 	adc.w	r3, fp, r3
 8009150:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009160:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009164:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009168:	460b      	mov	r3, r1
 800916a:	18db      	adds	r3, r3, r3
 800916c:	643b      	str	r3, [r7, #64]	; 0x40
 800916e:	4613      	mov	r3, r2
 8009170:	eb42 0303 	adc.w	r3, r2, r3
 8009174:	647b      	str	r3, [r7, #68]	; 0x44
 8009176:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800917a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800917e:	f7f7 fb8d 	bl	800089c <__aeabi_uldivmod>
 8009182:	4602      	mov	r2, r0
 8009184:	460b      	mov	r3, r1
 8009186:	4611      	mov	r1, r2
 8009188:	4b3b      	ldr	r3, [pc, #236]	; (8009278 <UART_SetConfig+0x2d4>)
 800918a:	fba3 2301 	umull	r2, r3, r3, r1
 800918e:	095b      	lsrs	r3, r3, #5
 8009190:	2264      	movs	r2, #100	; 0x64
 8009192:	fb02 f303 	mul.w	r3, r2, r3
 8009196:	1acb      	subs	r3, r1, r3
 8009198:	00db      	lsls	r3, r3, #3
 800919a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800919e:	4b36      	ldr	r3, [pc, #216]	; (8009278 <UART_SetConfig+0x2d4>)
 80091a0:	fba3 2302 	umull	r2, r3, r3, r2
 80091a4:	095b      	lsrs	r3, r3, #5
 80091a6:	005b      	lsls	r3, r3, #1
 80091a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80091ac:	441c      	add	r4, r3
 80091ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091b2:	2200      	movs	r2, #0
 80091b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80091b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80091bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80091c0:	4642      	mov	r2, r8
 80091c2:	464b      	mov	r3, r9
 80091c4:	1891      	adds	r1, r2, r2
 80091c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80091c8:	415b      	adcs	r3, r3
 80091ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80091d0:	4641      	mov	r1, r8
 80091d2:	1851      	adds	r1, r2, r1
 80091d4:	6339      	str	r1, [r7, #48]	; 0x30
 80091d6:	4649      	mov	r1, r9
 80091d8:	414b      	adcs	r3, r1
 80091da:	637b      	str	r3, [r7, #52]	; 0x34
 80091dc:	f04f 0200 	mov.w	r2, #0
 80091e0:	f04f 0300 	mov.w	r3, #0
 80091e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80091e8:	4659      	mov	r1, fp
 80091ea:	00cb      	lsls	r3, r1, #3
 80091ec:	4651      	mov	r1, sl
 80091ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80091f2:	4651      	mov	r1, sl
 80091f4:	00ca      	lsls	r2, r1, #3
 80091f6:	4610      	mov	r0, r2
 80091f8:	4619      	mov	r1, r3
 80091fa:	4603      	mov	r3, r0
 80091fc:	4642      	mov	r2, r8
 80091fe:	189b      	adds	r3, r3, r2
 8009200:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009204:	464b      	mov	r3, r9
 8009206:	460a      	mov	r2, r1
 8009208:	eb42 0303 	adc.w	r3, r2, r3
 800920c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	2200      	movs	r2, #0
 8009218:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800921c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009220:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009224:	460b      	mov	r3, r1
 8009226:	18db      	adds	r3, r3, r3
 8009228:	62bb      	str	r3, [r7, #40]	; 0x28
 800922a:	4613      	mov	r3, r2
 800922c:	eb42 0303 	adc.w	r3, r2, r3
 8009230:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009232:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009236:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800923a:	f7f7 fb2f 	bl	800089c <__aeabi_uldivmod>
 800923e:	4602      	mov	r2, r0
 8009240:	460b      	mov	r3, r1
 8009242:	4b0d      	ldr	r3, [pc, #52]	; (8009278 <UART_SetConfig+0x2d4>)
 8009244:	fba3 1302 	umull	r1, r3, r3, r2
 8009248:	095b      	lsrs	r3, r3, #5
 800924a:	2164      	movs	r1, #100	; 0x64
 800924c:	fb01 f303 	mul.w	r3, r1, r3
 8009250:	1ad3      	subs	r3, r2, r3
 8009252:	00db      	lsls	r3, r3, #3
 8009254:	3332      	adds	r3, #50	; 0x32
 8009256:	4a08      	ldr	r2, [pc, #32]	; (8009278 <UART_SetConfig+0x2d4>)
 8009258:	fba2 2303 	umull	r2, r3, r2, r3
 800925c:	095b      	lsrs	r3, r3, #5
 800925e:	f003 0207 	and.w	r2, r3, #7
 8009262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4422      	add	r2, r4
 800926a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800926c:	e105      	b.n	800947a <UART_SetConfig+0x4d6>
 800926e:	bf00      	nop
 8009270:	40011000 	.word	0x40011000
 8009274:	40011400 	.word	0x40011400
 8009278:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800927c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009280:	2200      	movs	r2, #0
 8009282:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009286:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800928a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800928e:	4642      	mov	r2, r8
 8009290:	464b      	mov	r3, r9
 8009292:	1891      	adds	r1, r2, r2
 8009294:	6239      	str	r1, [r7, #32]
 8009296:	415b      	adcs	r3, r3
 8009298:	627b      	str	r3, [r7, #36]	; 0x24
 800929a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800929e:	4641      	mov	r1, r8
 80092a0:	1854      	adds	r4, r2, r1
 80092a2:	4649      	mov	r1, r9
 80092a4:	eb43 0501 	adc.w	r5, r3, r1
 80092a8:	f04f 0200 	mov.w	r2, #0
 80092ac:	f04f 0300 	mov.w	r3, #0
 80092b0:	00eb      	lsls	r3, r5, #3
 80092b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80092b6:	00e2      	lsls	r2, r4, #3
 80092b8:	4614      	mov	r4, r2
 80092ba:	461d      	mov	r5, r3
 80092bc:	4643      	mov	r3, r8
 80092be:	18e3      	adds	r3, r4, r3
 80092c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80092c4:	464b      	mov	r3, r9
 80092c6:	eb45 0303 	adc.w	r3, r5, r3
 80092ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80092ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	2200      	movs	r2, #0
 80092d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80092da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80092de:	f04f 0200 	mov.w	r2, #0
 80092e2:	f04f 0300 	mov.w	r3, #0
 80092e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80092ea:	4629      	mov	r1, r5
 80092ec:	008b      	lsls	r3, r1, #2
 80092ee:	4621      	mov	r1, r4
 80092f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80092f4:	4621      	mov	r1, r4
 80092f6:	008a      	lsls	r2, r1, #2
 80092f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80092fc:	f7f7 face 	bl	800089c <__aeabi_uldivmod>
 8009300:	4602      	mov	r2, r0
 8009302:	460b      	mov	r3, r1
 8009304:	4b60      	ldr	r3, [pc, #384]	; (8009488 <UART_SetConfig+0x4e4>)
 8009306:	fba3 2302 	umull	r2, r3, r3, r2
 800930a:	095b      	lsrs	r3, r3, #5
 800930c:	011c      	lsls	r4, r3, #4
 800930e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009312:	2200      	movs	r2, #0
 8009314:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009318:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800931c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009320:	4642      	mov	r2, r8
 8009322:	464b      	mov	r3, r9
 8009324:	1891      	adds	r1, r2, r2
 8009326:	61b9      	str	r1, [r7, #24]
 8009328:	415b      	adcs	r3, r3
 800932a:	61fb      	str	r3, [r7, #28]
 800932c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009330:	4641      	mov	r1, r8
 8009332:	1851      	adds	r1, r2, r1
 8009334:	6139      	str	r1, [r7, #16]
 8009336:	4649      	mov	r1, r9
 8009338:	414b      	adcs	r3, r1
 800933a:	617b      	str	r3, [r7, #20]
 800933c:	f04f 0200 	mov.w	r2, #0
 8009340:	f04f 0300 	mov.w	r3, #0
 8009344:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009348:	4659      	mov	r1, fp
 800934a:	00cb      	lsls	r3, r1, #3
 800934c:	4651      	mov	r1, sl
 800934e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009352:	4651      	mov	r1, sl
 8009354:	00ca      	lsls	r2, r1, #3
 8009356:	4610      	mov	r0, r2
 8009358:	4619      	mov	r1, r3
 800935a:	4603      	mov	r3, r0
 800935c:	4642      	mov	r2, r8
 800935e:	189b      	adds	r3, r3, r2
 8009360:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009364:	464b      	mov	r3, r9
 8009366:	460a      	mov	r2, r1
 8009368:	eb42 0303 	adc.w	r3, r2, r3
 800936c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	2200      	movs	r2, #0
 8009378:	67bb      	str	r3, [r7, #120]	; 0x78
 800937a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800937c:	f04f 0200 	mov.w	r2, #0
 8009380:	f04f 0300 	mov.w	r3, #0
 8009384:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009388:	4649      	mov	r1, r9
 800938a:	008b      	lsls	r3, r1, #2
 800938c:	4641      	mov	r1, r8
 800938e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009392:	4641      	mov	r1, r8
 8009394:	008a      	lsls	r2, r1, #2
 8009396:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800939a:	f7f7 fa7f 	bl	800089c <__aeabi_uldivmod>
 800939e:	4602      	mov	r2, r0
 80093a0:	460b      	mov	r3, r1
 80093a2:	4b39      	ldr	r3, [pc, #228]	; (8009488 <UART_SetConfig+0x4e4>)
 80093a4:	fba3 1302 	umull	r1, r3, r3, r2
 80093a8:	095b      	lsrs	r3, r3, #5
 80093aa:	2164      	movs	r1, #100	; 0x64
 80093ac:	fb01 f303 	mul.w	r3, r1, r3
 80093b0:	1ad3      	subs	r3, r2, r3
 80093b2:	011b      	lsls	r3, r3, #4
 80093b4:	3332      	adds	r3, #50	; 0x32
 80093b6:	4a34      	ldr	r2, [pc, #208]	; (8009488 <UART_SetConfig+0x4e4>)
 80093b8:	fba2 2303 	umull	r2, r3, r2, r3
 80093bc:	095b      	lsrs	r3, r3, #5
 80093be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80093c2:	441c      	add	r4, r3
 80093c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093c8:	2200      	movs	r2, #0
 80093ca:	673b      	str	r3, [r7, #112]	; 0x70
 80093cc:	677a      	str	r2, [r7, #116]	; 0x74
 80093ce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80093d2:	4642      	mov	r2, r8
 80093d4:	464b      	mov	r3, r9
 80093d6:	1891      	adds	r1, r2, r2
 80093d8:	60b9      	str	r1, [r7, #8]
 80093da:	415b      	adcs	r3, r3
 80093dc:	60fb      	str	r3, [r7, #12]
 80093de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80093e2:	4641      	mov	r1, r8
 80093e4:	1851      	adds	r1, r2, r1
 80093e6:	6039      	str	r1, [r7, #0]
 80093e8:	4649      	mov	r1, r9
 80093ea:	414b      	adcs	r3, r1
 80093ec:	607b      	str	r3, [r7, #4]
 80093ee:	f04f 0200 	mov.w	r2, #0
 80093f2:	f04f 0300 	mov.w	r3, #0
 80093f6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80093fa:	4659      	mov	r1, fp
 80093fc:	00cb      	lsls	r3, r1, #3
 80093fe:	4651      	mov	r1, sl
 8009400:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009404:	4651      	mov	r1, sl
 8009406:	00ca      	lsls	r2, r1, #3
 8009408:	4610      	mov	r0, r2
 800940a:	4619      	mov	r1, r3
 800940c:	4603      	mov	r3, r0
 800940e:	4642      	mov	r2, r8
 8009410:	189b      	adds	r3, r3, r2
 8009412:	66bb      	str	r3, [r7, #104]	; 0x68
 8009414:	464b      	mov	r3, r9
 8009416:	460a      	mov	r2, r1
 8009418:	eb42 0303 	adc.w	r3, r2, r3
 800941c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800941e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	2200      	movs	r2, #0
 8009426:	663b      	str	r3, [r7, #96]	; 0x60
 8009428:	667a      	str	r2, [r7, #100]	; 0x64
 800942a:	f04f 0200 	mov.w	r2, #0
 800942e:	f04f 0300 	mov.w	r3, #0
 8009432:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009436:	4649      	mov	r1, r9
 8009438:	008b      	lsls	r3, r1, #2
 800943a:	4641      	mov	r1, r8
 800943c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009440:	4641      	mov	r1, r8
 8009442:	008a      	lsls	r2, r1, #2
 8009444:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009448:	f7f7 fa28 	bl	800089c <__aeabi_uldivmod>
 800944c:	4602      	mov	r2, r0
 800944e:	460b      	mov	r3, r1
 8009450:	4b0d      	ldr	r3, [pc, #52]	; (8009488 <UART_SetConfig+0x4e4>)
 8009452:	fba3 1302 	umull	r1, r3, r3, r2
 8009456:	095b      	lsrs	r3, r3, #5
 8009458:	2164      	movs	r1, #100	; 0x64
 800945a:	fb01 f303 	mul.w	r3, r1, r3
 800945e:	1ad3      	subs	r3, r2, r3
 8009460:	011b      	lsls	r3, r3, #4
 8009462:	3332      	adds	r3, #50	; 0x32
 8009464:	4a08      	ldr	r2, [pc, #32]	; (8009488 <UART_SetConfig+0x4e4>)
 8009466:	fba2 2303 	umull	r2, r3, r2, r3
 800946a:	095b      	lsrs	r3, r3, #5
 800946c:	f003 020f 	and.w	r2, r3, #15
 8009470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4422      	add	r2, r4
 8009478:	609a      	str	r2, [r3, #8]
}
 800947a:	bf00      	nop
 800947c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009480:	46bd      	mov	sp, r7
 8009482:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009486:	bf00      	nop
 8009488:	51eb851f 	.word	0x51eb851f

0800948c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800948c:	b480      	push	{r7}
 800948e:	b085      	sub	sp, #20
 8009490:	af00      	add	r7, sp, #0
 8009492:	4603      	mov	r3, r0
 8009494:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009496:	2300      	movs	r3, #0
 8009498:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800949a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800949e:	2b84      	cmp	r3, #132	; 0x84
 80094a0:	d005      	beq.n	80094ae <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80094a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	4413      	add	r3, r2
 80094aa:	3303      	adds	r3, #3
 80094ac:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80094ae:	68fb      	ldr	r3, [r7, #12]
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3714      	adds	r7, #20
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr

080094bc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80094c0:	f000 faf6 	bl	8009ab0 <vTaskStartScheduler>
  
  return osOK;
 80094c4:	2300      	movs	r3, #0
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	bd80      	pop	{r7, pc}

080094ca <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80094ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094cc:	b089      	sub	sp, #36	; 0x24
 80094ce:	af04      	add	r7, sp, #16
 80094d0:	6078      	str	r0, [r7, #4]
 80094d2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	695b      	ldr	r3, [r3, #20]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d020      	beq.n	800951e <osThreadCreate+0x54>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	699b      	ldr	r3, [r3, #24]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d01c      	beq.n	800951e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	685c      	ldr	r4, [r3, #4]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681d      	ldr	r5, [r3, #0]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	691e      	ldr	r6, [r3, #16]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80094f6:	4618      	mov	r0, r3
 80094f8:	f7ff ffc8 	bl	800948c <makeFreeRtosPriority>
 80094fc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	695b      	ldr	r3, [r3, #20]
 8009502:	687a      	ldr	r2, [r7, #4]
 8009504:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009506:	9202      	str	r2, [sp, #8]
 8009508:	9301      	str	r3, [sp, #4]
 800950a:	9100      	str	r1, [sp, #0]
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	4632      	mov	r2, r6
 8009510:	4629      	mov	r1, r5
 8009512:	4620      	mov	r0, r4
 8009514:	f000 f8ed 	bl	80096f2 <xTaskCreateStatic>
 8009518:	4603      	mov	r3, r0
 800951a:	60fb      	str	r3, [r7, #12]
 800951c:	e01c      	b.n	8009558 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	685c      	ldr	r4, [r3, #4]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800952a:	b29e      	uxth	r6, r3
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009532:	4618      	mov	r0, r3
 8009534:	f7ff ffaa 	bl	800948c <makeFreeRtosPriority>
 8009538:	4602      	mov	r2, r0
 800953a:	f107 030c 	add.w	r3, r7, #12
 800953e:	9301      	str	r3, [sp, #4]
 8009540:	9200      	str	r2, [sp, #0]
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	4632      	mov	r2, r6
 8009546:	4629      	mov	r1, r5
 8009548:	4620      	mov	r0, r4
 800954a:	f000 f92f 	bl	80097ac <xTaskCreate>
 800954e:	4603      	mov	r3, r0
 8009550:	2b01      	cmp	r3, #1
 8009552:	d001      	beq.n	8009558 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009554:	2300      	movs	r3, #0
 8009556:	e000      	b.n	800955a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009558:	68fb      	ldr	r3, [r7, #12]
}
 800955a:	4618      	mov	r0, r3
 800955c:	3714      	adds	r7, #20
 800955e:	46bd      	mov	sp, r7
 8009560:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009562 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009562:	b580      	push	{r7, lr}
 8009564:	b084      	sub	sp, #16
 8009566:	af00      	add	r7, sp, #0
 8009568:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d001      	beq.n	8009578 <osDelay+0x16>
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	e000      	b.n	800957a <osDelay+0x18>
 8009578:	2301      	movs	r3, #1
 800957a:	4618      	mov	r0, r3
 800957c:	f000 fa64 	bl	8009a48 <vTaskDelay>
  
  return osOK;
 8009580:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009582:	4618      	mov	r0, r3
 8009584:	3710      	adds	r7, #16
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}

0800958a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800958a:	b480      	push	{r7}
 800958c:	b083      	sub	sp, #12
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f103 0208 	add.w	r2, r3, #8
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f04f 32ff 	mov.w	r2, #4294967295
 80095a2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f103 0208 	add.w	r2, r3, #8
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f103 0208 	add.w	r2, r3, #8
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2200      	movs	r2, #0
 80095bc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80095be:	bf00      	nop
 80095c0:	370c      	adds	r7, #12
 80095c2:	46bd      	mov	sp, r7
 80095c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c8:	4770      	bx	lr

080095ca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80095ca:	b480      	push	{r7}
 80095cc:	b083      	sub	sp, #12
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2200      	movs	r2, #0
 80095d6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80095d8:	bf00      	nop
 80095da:	370c      	adds	r7, #12
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr

080095e4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80095e4:	b480      	push	{r7}
 80095e6:	b085      	sub	sp, #20
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	68fa      	ldr	r2, [r7, #12]
 80095f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	689a      	ldr	r2, [r3, #8]
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	689b      	ldr	r3, [r3, #8]
 8009606:	683a      	ldr	r2, [r7, #0]
 8009608:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	683a      	ldr	r2, [r7, #0]
 800960e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	687a      	ldr	r2, [r7, #4]
 8009614:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	1c5a      	adds	r2, r3, #1
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	601a      	str	r2, [r3, #0]
}
 8009620:	bf00      	nop
 8009622:	3714      	adds	r7, #20
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr

0800962c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800962c:	b480      	push	{r7}
 800962e:	b085      	sub	sp, #20
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009642:	d103      	bne.n	800964c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	691b      	ldr	r3, [r3, #16]
 8009648:	60fb      	str	r3, [r7, #12]
 800964a:	e00c      	b.n	8009666 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	3308      	adds	r3, #8
 8009650:	60fb      	str	r3, [r7, #12]
 8009652:	e002      	b.n	800965a <vListInsert+0x2e>
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	60fb      	str	r3, [r7, #12]
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	68ba      	ldr	r2, [r7, #8]
 8009662:	429a      	cmp	r2, r3
 8009664:	d2f6      	bcs.n	8009654 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	685a      	ldr	r2, [r3, #4]
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	683a      	ldr	r2, [r7, #0]
 8009674:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	68fa      	ldr	r2, [r7, #12]
 800967a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	683a      	ldr	r2, [r7, #0]
 8009680:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	687a      	ldr	r2, [r7, #4]
 8009686:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	1c5a      	adds	r2, r3, #1
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	601a      	str	r2, [r3, #0]
}
 8009692:	bf00      	nop
 8009694:	3714      	adds	r7, #20
 8009696:	46bd      	mov	sp, r7
 8009698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969c:	4770      	bx	lr

0800969e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800969e:	b480      	push	{r7}
 80096a0:	b085      	sub	sp, #20
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	691b      	ldr	r3, [r3, #16]
 80096aa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	687a      	ldr	r2, [r7, #4]
 80096b2:	6892      	ldr	r2, [r2, #8]
 80096b4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	689b      	ldr	r3, [r3, #8]
 80096ba:	687a      	ldr	r2, [r7, #4]
 80096bc:	6852      	ldr	r2, [r2, #4]
 80096be:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	687a      	ldr	r2, [r7, #4]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d103      	bne.n	80096d2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	689a      	ldr	r2, [r3, #8]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2200      	movs	r2, #0
 80096d6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	1e5a      	subs	r2, r3, #1
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3714      	adds	r7, #20
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr

080096f2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80096f2:	b580      	push	{r7, lr}
 80096f4:	b08e      	sub	sp, #56	; 0x38
 80096f6:	af04      	add	r7, sp, #16
 80096f8:	60f8      	str	r0, [r7, #12]
 80096fa:	60b9      	str	r1, [r7, #8]
 80096fc:	607a      	str	r2, [r7, #4]
 80096fe:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009702:	2b00      	cmp	r3, #0
 8009704:	d10a      	bne.n	800971c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800970a:	f383 8811 	msr	BASEPRI, r3
 800970e:	f3bf 8f6f 	isb	sy
 8009712:	f3bf 8f4f 	dsb	sy
 8009716:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009718:	bf00      	nop
 800971a:	e7fe      	b.n	800971a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800971c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800971e:	2b00      	cmp	r3, #0
 8009720:	d10a      	bne.n	8009738 <xTaskCreateStatic+0x46>
	__asm volatile
 8009722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009726:	f383 8811 	msr	BASEPRI, r3
 800972a:	f3bf 8f6f 	isb	sy
 800972e:	f3bf 8f4f 	dsb	sy
 8009732:	61fb      	str	r3, [r7, #28]
}
 8009734:	bf00      	nop
 8009736:	e7fe      	b.n	8009736 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009738:	23b4      	movs	r3, #180	; 0xb4
 800973a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	2bb4      	cmp	r3, #180	; 0xb4
 8009740:	d00a      	beq.n	8009758 <xTaskCreateStatic+0x66>
	__asm volatile
 8009742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009746:	f383 8811 	msr	BASEPRI, r3
 800974a:	f3bf 8f6f 	isb	sy
 800974e:	f3bf 8f4f 	dsb	sy
 8009752:	61bb      	str	r3, [r7, #24]
}
 8009754:	bf00      	nop
 8009756:	e7fe      	b.n	8009756 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009758:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800975a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800975c:	2b00      	cmp	r3, #0
 800975e:	d01e      	beq.n	800979e <xTaskCreateStatic+0xac>
 8009760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009762:	2b00      	cmp	r3, #0
 8009764:	d01b      	beq.n	800979e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009768:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800976a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800976e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009772:	2202      	movs	r2, #2
 8009774:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009778:	2300      	movs	r3, #0
 800977a:	9303      	str	r3, [sp, #12]
 800977c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800977e:	9302      	str	r3, [sp, #8]
 8009780:	f107 0314 	add.w	r3, r7, #20
 8009784:	9301      	str	r3, [sp, #4]
 8009786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009788:	9300      	str	r3, [sp, #0]
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	687a      	ldr	r2, [r7, #4]
 800978e:	68b9      	ldr	r1, [r7, #8]
 8009790:	68f8      	ldr	r0, [r7, #12]
 8009792:	f000 f851 	bl	8009838 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009796:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009798:	f000 f8ec 	bl	8009974 <prvAddNewTaskToReadyList>
 800979c:	e001      	b.n	80097a2 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800979e:	2300      	movs	r3, #0
 80097a0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80097a2:	697b      	ldr	r3, [r7, #20]
	}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3728      	adds	r7, #40	; 0x28
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b08c      	sub	sp, #48	; 0x30
 80097b0:	af04      	add	r7, sp, #16
 80097b2:	60f8      	str	r0, [r7, #12]
 80097b4:	60b9      	str	r1, [r7, #8]
 80097b6:	603b      	str	r3, [r7, #0]
 80097b8:	4613      	mov	r3, r2
 80097ba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80097bc:	88fb      	ldrh	r3, [r7, #6]
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	4618      	mov	r0, r3
 80097c2:	f000 fef1 	bl	800a5a8 <pvPortMalloc>
 80097c6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00e      	beq.n	80097ec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80097ce:	20b4      	movs	r0, #180	; 0xb4
 80097d0:	f000 feea 	bl	800a5a8 <pvPortMalloc>
 80097d4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80097d6:	69fb      	ldr	r3, [r7, #28]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d003      	beq.n	80097e4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80097dc:	69fb      	ldr	r3, [r7, #28]
 80097de:	697a      	ldr	r2, [r7, #20]
 80097e0:	631a      	str	r2, [r3, #48]	; 0x30
 80097e2:	e005      	b.n	80097f0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80097e4:	6978      	ldr	r0, [r7, #20]
 80097e6:	f000 ffab 	bl	800a740 <vPortFree>
 80097ea:	e001      	b.n	80097f0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80097ec:	2300      	movs	r3, #0
 80097ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80097f0:	69fb      	ldr	r3, [r7, #28]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d017      	beq.n	8009826 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80097f6:	69fb      	ldr	r3, [r7, #28]
 80097f8:	2200      	movs	r2, #0
 80097fa:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80097fe:	88fa      	ldrh	r2, [r7, #6]
 8009800:	2300      	movs	r3, #0
 8009802:	9303      	str	r3, [sp, #12]
 8009804:	69fb      	ldr	r3, [r7, #28]
 8009806:	9302      	str	r3, [sp, #8]
 8009808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800980a:	9301      	str	r3, [sp, #4]
 800980c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800980e:	9300      	str	r3, [sp, #0]
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	68b9      	ldr	r1, [r7, #8]
 8009814:	68f8      	ldr	r0, [r7, #12]
 8009816:	f000 f80f 	bl	8009838 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800981a:	69f8      	ldr	r0, [r7, #28]
 800981c:	f000 f8aa 	bl	8009974 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009820:	2301      	movs	r3, #1
 8009822:	61bb      	str	r3, [r7, #24]
 8009824:	e002      	b.n	800982c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009826:	f04f 33ff 	mov.w	r3, #4294967295
 800982a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800982c:	69bb      	ldr	r3, [r7, #24]
	}
 800982e:	4618      	mov	r0, r3
 8009830:	3720      	adds	r7, #32
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
	...

08009838 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b088      	sub	sp, #32
 800983c:	af00      	add	r7, sp, #0
 800983e:	60f8      	str	r0, [r7, #12]
 8009840:	60b9      	str	r1, [r7, #8]
 8009842:	607a      	str	r2, [r7, #4]
 8009844:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009848:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009850:	3b01      	subs	r3, #1
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	4413      	add	r3, r2
 8009856:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009858:	69bb      	ldr	r3, [r7, #24]
 800985a:	f023 0307 	bic.w	r3, r3, #7
 800985e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009860:	69bb      	ldr	r3, [r7, #24]
 8009862:	f003 0307 	and.w	r3, r3, #7
 8009866:	2b00      	cmp	r3, #0
 8009868:	d00a      	beq.n	8009880 <prvInitialiseNewTask+0x48>
	__asm volatile
 800986a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800986e:	f383 8811 	msr	BASEPRI, r3
 8009872:	f3bf 8f6f 	isb	sy
 8009876:	f3bf 8f4f 	dsb	sy
 800987a:	617b      	str	r3, [r7, #20]
}
 800987c:	bf00      	nop
 800987e:	e7fe      	b.n	800987e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d01f      	beq.n	80098c6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009886:	2300      	movs	r3, #0
 8009888:	61fb      	str	r3, [r7, #28]
 800988a:	e012      	b.n	80098b2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800988c:	68ba      	ldr	r2, [r7, #8]
 800988e:	69fb      	ldr	r3, [r7, #28]
 8009890:	4413      	add	r3, r2
 8009892:	7819      	ldrb	r1, [r3, #0]
 8009894:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009896:	69fb      	ldr	r3, [r7, #28]
 8009898:	4413      	add	r3, r2
 800989a:	3334      	adds	r3, #52	; 0x34
 800989c:	460a      	mov	r2, r1
 800989e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80098a0:	68ba      	ldr	r2, [r7, #8]
 80098a2:	69fb      	ldr	r3, [r7, #28]
 80098a4:	4413      	add	r3, r2
 80098a6:	781b      	ldrb	r3, [r3, #0]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d006      	beq.n	80098ba <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80098ac:	69fb      	ldr	r3, [r7, #28]
 80098ae:	3301      	adds	r3, #1
 80098b0:	61fb      	str	r3, [r7, #28]
 80098b2:	69fb      	ldr	r3, [r7, #28]
 80098b4:	2b0f      	cmp	r3, #15
 80098b6:	d9e9      	bls.n	800988c <prvInitialiseNewTask+0x54>
 80098b8:	e000      	b.n	80098bc <prvInitialiseNewTask+0x84>
			{
				break;
 80098ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80098bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098be:	2200      	movs	r2, #0
 80098c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80098c4:	e003      	b.n	80098ce <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80098c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c8:	2200      	movs	r2, #0
 80098ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80098ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d0:	2b06      	cmp	r3, #6
 80098d2:	d901      	bls.n	80098d8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80098d4:	2306      	movs	r3, #6
 80098d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80098d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80098de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098e2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80098e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e6:	2200      	movs	r2, #0
 80098e8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80098ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ec:	3304      	adds	r3, #4
 80098ee:	4618      	mov	r0, r3
 80098f0:	f7ff fe6b 	bl	80095ca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80098f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f6:	3318      	adds	r3, #24
 80098f8:	4618      	mov	r0, r3
 80098fa:	f7ff fe66 	bl	80095ca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80098fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009900:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009902:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009906:	f1c3 0207 	rsb	r2, r3, #7
 800990a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800990c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800990e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009910:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009912:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009916:	2200      	movs	r2, #0
 8009918:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800991c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800991e:	2200      	movs	r2, #0
 8009920:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009926:	334c      	adds	r3, #76	; 0x4c
 8009928:	2260      	movs	r2, #96	; 0x60
 800992a:	2100      	movs	r1, #0
 800992c:	4618      	mov	r0, r3
 800992e:	f001 f87b 	bl	800aa28 <memset>
 8009932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009934:	4a0c      	ldr	r2, [pc, #48]	; (8009968 <prvInitialiseNewTask+0x130>)
 8009936:	651a      	str	r2, [r3, #80]	; 0x50
 8009938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800993a:	4a0c      	ldr	r2, [pc, #48]	; (800996c <prvInitialiseNewTask+0x134>)
 800993c:	655a      	str	r2, [r3, #84]	; 0x54
 800993e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009940:	4a0b      	ldr	r2, [pc, #44]	; (8009970 <prvInitialiseNewTask+0x138>)
 8009942:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009944:	683a      	ldr	r2, [r7, #0]
 8009946:	68f9      	ldr	r1, [r7, #12]
 8009948:	69b8      	ldr	r0, [r7, #24]
 800994a:	f000 fc1f 	bl	800a18c <pxPortInitialiseStack>
 800994e:	4602      	mov	r2, r0
 8009950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009952:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009956:	2b00      	cmp	r3, #0
 8009958:	d002      	beq.n	8009960 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800995a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800995c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800995e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009960:	bf00      	nop
 8009962:	3720      	adds	r7, #32
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}
 8009968:	0800b210 	.word	0x0800b210
 800996c:	0800b230 	.word	0x0800b230
 8009970:	0800b1f0 	.word	0x0800b1f0

08009974 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b082      	sub	sp, #8
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800997c:	f000 fd32 	bl	800a3e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009980:	4b2a      	ldr	r3, [pc, #168]	; (8009a2c <prvAddNewTaskToReadyList+0xb8>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	3301      	adds	r3, #1
 8009986:	4a29      	ldr	r2, [pc, #164]	; (8009a2c <prvAddNewTaskToReadyList+0xb8>)
 8009988:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800998a:	4b29      	ldr	r3, [pc, #164]	; (8009a30 <prvAddNewTaskToReadyList+0xbc>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d109      	bne.n	80099a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009992:	4a27      	ldr	r2, [pc, #156]	; (8009a30 <prvAddNewTaskToReadyList+0xbc>)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009998:	4b24      	ldr	r3, [pc, #144]	; (8009a2c <prvAddNewTaskToReadyList+0xb8>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	2b01      	cmp	r3, #1
 800999e:	d110      	bne.n	80099c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80099a0:	f000 facc 	bl	8009f3c <prvInitialiseTaskLists>
 80099a4:	e00d      	b.n	80099c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80099a6:	4b23      	ldr	r3, [pc, #140]	; (8009a34 <prvAddNewTaskToReadyList+0xc0>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d109      	bne.n	80099c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80099ae:	4b20      	ldr	r3, [pc, #128]	; (8009a30 <prvAddNewTaskToReadyList+0xbc>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d802      	bhi.n	80099c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80099bc:	4a1c      	ldr	r2, [pc, #112]	; (8009a30 <prvAddNewTaskToReadyList+0xbc>)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80099c2:	4b1d      	ldr	r3, [pc, #116]	; (8009a38 <prvAddNewTaskToReadyList+0xc4>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	3301      	adds	r3, #1
 80099c8:	4a1b      	ldr	r2, [pc, #108]	; (8009a38 <prvAddNewTaskToReadyList+0xc4>)
 80099ca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d0:	2201      	movs	r2, #1
 80099d2:	409a      	lsls	r2, r3
 80099d4:	4b19      	ldr	r3, [pc, #100]	; (8009a3c <prvAddNewTaskToReadyList+0xc8>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	4313      	orrs	r3, r2
 80099da:	4a18      	ldr	r2, [pc, #96]	; (8009a3c <prvAddNewTaskToReadyList+0xc8>)
 80099dc:	6013      	str	r3, [r2, #0]
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099e2:	4613      	mov	r3, r2
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	4413      	add	r3, r2
 80099e8:	009b      	lsls	r3, r3, #2
 80099ea:	4a15      	ldr	r2, [pc, #84]	; (8009a40 <prvAddNewTaskToReadyList+0xcc>)
 80099ec:	441a      	add	r2, r3
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	3304      	adds	r3, #4
 80099f2:	4619      	mov	r1, r3
 80099f4:	4610      	mov	r0, r2
 80099f6:	f7ff fdf5 	bl	80095e4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80099fa:	f000 fd23 	bl	800a444 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80099fe:	4b0d      	ldr	r3, [pc, #52]	; (8009a34 <prvAddNewTaskToReadyList+0xc0>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d00e      	beq.n	8009a24 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009a06:	4b0a      	ldr	r3, [pc, #40]	; (8009a30 <prvAddNewTaskToReadyList+0xbc>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d207      	bcs.n	8009a24 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009a14:	4b0b      	ldr	r3, [pc, #44]	; (8009a44 <prvAddNewTaskToReadyList+0xd0>)
 8009a16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a1a:	601a      	str	r2, [r3, #0]
 8009a1c:	f3bf 8f4f 	dsb	sy
 8009a20:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a24:	bf00      	nop
 8009a26:	3708      	adds	r7, #8
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}
 8009a2c:	20001664 	.word	0x20001664
 8009a30:	20001564 	.word	0x20001564
 8009a34:	20001670 	.word	0x20001670
 8009a38:	20001680 	.word	0x20001680
 8009a3c:	2000166c 	.word	0x2000166c
 8009a40:	20001568 	.word	0x20001568
 8009a44:	e000ed04 	.word	0xe000ed04

08009a48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b084      	sub	sp, #16
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009a50:	2300      	movs	r3, #0
 8009a52:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d017      	beq.n	8009a8a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009a5a:	4b13      	ldr	r3, [pc, #76]	; (8009aa8 <vTaskDelay+0x60>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d00a      	beq.n	8009a78 <vTaskDelay+0x30>
	__asm volatile
 8009a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a66:	f383 8811 	msr	BASEPRI, r3
 8009a6a:	f3bf 8f6f 	isb	sy
 8009a6e:	f3bf 8f4f 	dsb	sy
 8009a72:	60bb      	str	r3, [r7, #8]
}
 8009a74:	bf00      	nop
 8009a76:	e7fe      	b.n	8009a76 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009a78:	f000 f884 	bl	8009b84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009a7c:	2100      	movs	r1, #0
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 fb1e 	bl	800a0c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009a84:	f000 f88c 	bl	8009ba0 <xTaskResumeAll>
 8009a88:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d107      	bne.n	8009aa0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009a90:	4b06      	ldr	r3, [pc, #24]	; (8009aac <vTaskDelay+0x64>)
 8009a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a96:	601a      	str	r2, [r3, #0]
 8009a98:	f3bf 8f4f 	dsb	sy
 8009a9c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009aa0:	bf00      	nop
 8009aa2:	3710      	adds	r7, #16
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}
 8009aa8:	2000168c 	.word	0x2000168c
 8009aac:	e000ed04 	.word	0xe000ed04

08009ab0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b08a      	sub	sp, #40	; 0x28
 8009ab4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009aba:	2300      	movs	r3, #0
 8009abc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009abe:	463a      	mov	r2, r7
 8009ac0:	1d39      	adds	r1, r7, #4
 8009ac2:	f107 0308 	add.w	r3, r7, #8
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f7f7 faea 	bl	80010a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009acc:	6839      	ldr	r1, [r7, #0]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	68ba      	ldr	r2, [r7, #8]
 8009ad2:	9202      	str	r2, [sp, #8]
 8009ad4:	9301      	str	r3, [sp, #4]
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	9300      	str	r3, [sp, #0]
 8009ada:	2300      	movs	r3, #0
 8009adc:	460a      	mov	r2, r1
 8009ade:	4921      	ldr	r1, [pc, #132]	; (8009b64 <vTaskStartScheduler+0xb4>)
 8009ae0:	4821      	ldr	r0, [pc, #132]	; (8009b68 <vTaskStartScheduler+0xb8>)
 8009ae2:	f7ff fe06 	bl	80096f2 <xTaskCreateStatic>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	4a20      	ldr	r2, [pc, #128]	; (8009b6c <vTaskStartScheduler+0xbc>)
 8009aea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009aec:	4b1f      	ldr	r3, [pc, #124]	; (8009b6c <vTaskStartScheduler+0xbc>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d002      	beq.n	8009afa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009af4:	2301      	movs	r3, #1
 8009af6:	617b      	str	r3, [r7, #20]
 8009af8:	e001      	b.n	8009afe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009afa:	2300      	movs	r3, #0
 8009afc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d11b      	bne.n	8009b3c <vTaskStartScheduler+0x8c>
	__asm volatile
 8009b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b08:	f383 8811 	msr	BASEPRI, r3
 8009b0c:	f3bf 8f6f 	isb	sy
 8009b10:	f3bf 8f4f 	dsb	sy
 8009b14:	613b      	str	r3, [r7, #16]
}
 8009b16:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009b18:	4b15      	ldr	r3, [pc, #84]	; (8009b70 <vTaskStartScheduler+0xc0>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	334c      	adds	r3, #76	; 0x4c
 8009b1e:	4a15      	ldr	r2, [pc, #84]	; (8009b74 <vTaskStartScheduler+0xc4>)
 8009b20:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009b22:	4b15      	ldr	r3, [pc, #84]	; (8009b78 <vTaskStartScheduler+0xc8>)
 8009b24:	f04f 32ff 	mov.w	r2, #4294967295
 8009b28:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009b2a:	4b14      	ldr	r3, [pc, #80]	; (8009b7c <vTaskStartScheduler+0xcc>)
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009b30:	4b13      	ldr	r3, [pc, #76]	; (8009b80 <vTaskStartScheduler+0xd0>)
 8009b32:	2200      	movs	r2, #0
 8009b34:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009b36:	f000 fbb3 	bl	800a2a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009b3a:	e00e      	b.n	8009b5a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b42:	d10a      	bne.n	8009b5a <vTaskStartScheduler+0xaa>
	__asm volatile
 8009b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b48:	f383 8811 	msr	BASEPRI, r3
 8009b4c:	f3bf 8f6f 	isb	sy
 8009b50:	f3bf 8f4f 	dsb	sy
 8009b54:	60fb      	str	r3, [r7, #12]
}
 8009b56:	bf00      	nop
 8009b58:	e7fe      	b.n	8009b58 <vTaskStartScheduler+0xa8>
}
 8009b5a:	bf00      	nop
 8009b5c:	3718      	adds	r7, #24
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop
 8009b64:	0800b094 	.word	0x0800b094
 8009b68:	08009f0d 	.word	0x08009f0d
 8009b6c:	20001688 	.word	0x20001688
 8009b70:	20001564 	.word	0x20001564
 8009b74:	2000001c 	.word	0x2000001c
 8009b78:	20001684 	.word	0x20001684
 8009b7c:	20001670 	.word	0x20001670
 8009b80:	20001668 	.word	0x20001668

08009b84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009b84:	b480      	push	{r7}
 8009b86:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009b88:	4b04      	ldr	r3, [pc, #16]	; (8009b9c <vTaskSuspendAll+0x18>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	3301      	adds	r3, #1
 8009b8e:	4a03      	ldr	r2, [pc, #12]	; (8009b9c <vTaskSuspendAll+0x18>)
 8009b90:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009b92:	bf00      	nop
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr
 8009b9c:	2000168c 	.word	0x2000168c

08009ba0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009baa:	2300      	movs	r3, #0
 8009bac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009bae:	4b41      	ldr	r3, [pc, #260]	; (8009cb4 <xTaskResumeAll+0x114>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d10a      	bne.n	8009bcc <xTaskResumeAll+0x2c>
	__asm volatile
 8009bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bba:	f383 8811 	msr	BASEPRI, r3
 8009bbe:	f3bf 8f6f 	isb	sy
 8009bc2:	f3bf 8f4f 	dsb	sy
 8009bc6:	603b      	str	r3, [r7, #0]
}
 8009bc8:	bf00      	nop
 8009bca:	e7fe      	b.n	8009bca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009bcc:	f000 fc0a 	bl	800a3e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009bd0:	4b38      	ldr	r3, [pc, #224]	; (8009cb4 <xTaskResumeAll+0x114>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	3b01      	subs	r3, #1
 8009bd6:	4a37      	ldr	r2, [pc, #220]	; (8009cb4 <xTaskResumeAll+0x114>)
 8009bd8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bda:	4b36      	ldr	r3, [pc, #216]	; (8009cb4 <xTaskResumeAll+0x114>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d161      	bne.n	8009ca6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009be2:	4b35      	ldr	r3, [pc, #212]	; (8009cb8 <xTaskResumeAll+0x118>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d05d      	beq.n	8009ca6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009bea:	e02e      	b.n	8009c4a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bec:	4b33      	ldr	r3, [pc, #204]	; (8009cbc <xTaskResumeAll+0x11c>)
 8009bee:	68db      	ldr	r3, [r3, #12]
 8009bf0:	68db      	ldr	r3, [r3, #12]
 8009bf2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	3318      	adds	r3, #24
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f7ff fd50 	bl	800969e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	3304      	adds	r3, #4
 8009c02:	4618      	mov	r0, r3
 8009c04:	f7ff fd4b 	bl	800969e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	409a      	lsls	r2, r3
 8009c10:	4b2b      	ldr	r3, [pc, #172]	; (8009cc0 <xTaskResumeAll+0x120>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4313      	orrs	r3, r2
 8009c16:	4a2a      	ldr	r2, [pc, #168]	; (8009cc0 <xTaskResumeAll+0x120>)
 8009c18:	6013      	str	r3, [r2, #0]
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c1e:	4613      	mov	r3, r2
 8009c20:	009b      	lsls	r3, r3, #2
 8009c22:	4413      	add	r3, r2
 8009c24:	009b      	lsls	r3, r3, #2
 8009c26:	4a27      	ldr	r2, [pc, #156]	; (8009cc4 <xTaskResumeAll+0x124>)
 8009c28:	441a      	add	r2, r3
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	3304      	adds	r3, #4
 8009c2e:	4619      	mov	r1, r3
 8009c30:	4610      	mov	r0, r2
 8009c32:	f7ff fcd7 	bl	80095e4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c3a:	4b23      	ldr	r3, [pc, #140]	; (8009cc8 <xTaskResumeAll+0x128>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d302      	bcc.n	8009c4a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009c44:	4b21      	ldr	r3, [pc, #132]	; (8009ccc <xTaskResumeAll+0x12c>)
 8009c46:	2201      	movs	r2, #1
 8009c48:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009c4a:	4b1c      	ldr	r3, [pc, #112]	; (8009cbc <xTaskResumeAll+0x11c>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d1cc      	bne.n	8009bec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d001      	beq.n	8009c5c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009c58:	f000 fa12 	bl	800a080 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009c5c:	4b1c      	ldr	r3, [pc, #112]	; (8009cd0 <xTaskResumeAll+0x130>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d010      	beq.n	8009c8a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009c68:	f000 f836 	bl	8009cd8 <xTaskIncrementTick>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d002      	beq.n	8009c78 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009c72:	4b16      	ldr	r3, [pc, #88]	; (8009ccc <xTaskResumeAll+0x12c>)
 8009c74:	2201      	movs	r2, #1
 8009c76:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	3b01      	subs	r3, #1
 8009c7c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d1f1      	bne.n	8009c68 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8009c84:	4b12      	ldr	r3, [pc, #72]	; (8009cd0 <xTaskResumeAll+0x130>)
 8009c86:	2200      	movs	r2, #0
 8009c88:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009c8a:	4b10      	ldr	r3, [pc, #64]	; (8009ccc <xTaskResumeAll+0x12c>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d009      	beq.n	8009ca6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009c92:	2301      	movs	r3, #1
 8009c94:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009c96:	4b0f      	ldr	r3, [pc, #60]	; (8009cd4 <xTaskResumeAll+0x134>)
 8009c98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c9c:	601a      	str	r2, [r3, #0]
 8009c9e:	f3bf 8f4f 	dsb	sy
 8009ca2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009ca6:	f000 fbcd 	bl	800a444 <vPortExitCritical>

	return xAlreadyYielded;
 8009caa:	68bb      	ldr	r3, [r7, #8]
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3710      	adds	r7, #16
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}
 8009cb4:	2000168c 	.word	0x2000168c
 8009cb8:	20001664 	.word	0x20001664
 8009cbc:	20001624 	.word	0x20001624
 8009cc0:	2000166c 	.word	0x2000166c
 8009cc4:	20001568 	.word	0x20001568
 8009cc8:	20001564 	.word	0x20001564
 8009ccc:	20001678 	.word	0x20001678
 8009cd0:	20001674 	.word	0x20001674
 8009cd4:	e000ed04 	.word	0xe000ed04

08009cd8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b086      	sub	sp, #24
 8009cdc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ce2:	4b4e      	ldr	r3, [pc, #312]	; (8009e1c <xTaskIncrementTick+0x144>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	f040 808e 	bne.w	8009e08 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009cec:	4b4c      	ldr	r3, [pc, #304]	; (8009e20 <xTaskIncrementTick+0x148>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	3301      	adds	r3, #1
 8009cf2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009cf4:	4a4a      	ldr	r2, [pc, #296]	; (8009e20 <xTaskIncrementTick+0x148>)
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d120      	bne.n	8009d42 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009d00:	4b48      	ldr	r3, [pc, #288]	; (8009e24 <xTaskIncrementTick+0x14c>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d00a      	beq.n	8009d20 <xTaskIncrementTick+0x48>
	__asm volatile
 8009d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d0e:	f383 8811 	msr	BASEPRI, r3
 8009d12:	f3bf 8f6f 	isb	sy
 8009d16:	f3bf 8f4f 	dsb	sy
 8009d1a:	603b      	str	r3, [r7, #0]
}
 8009d1c:	bf00      	nop
 8009d1e:	e7fe      	b.n	8009d1e <xTaskIncrementTick+0x46>
 8009d20:	4b40      	ldr	r3, [pc, #256]	; (8009e24 <xTaskIncrementTick+0x14c>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	60fb      	str	r3, [r7, #12]
 8009d26:	4b40      	ldr	r3, [pc, #256]	; (8009e28 <xTaskIncrementTick+0x150>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a3e      	ldr	r2, [pc, #248]	; (8009e24 <xTaskIncrementTick+0x14c>)
 8009d2c:	6013      	str	r3, [r2, #0]
 8009d2e:	4a3e      	ldr	r2, [pc, #248]	; (8009e28 <xTaskIncrementTick+0x150>)
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	6013      	str	r3, [r2, #0]
 8009d34:	4b3d      	ldr	r3, [pc, #244]	; (8009e2c <xTaskIncrementTick+0x154>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	3301      	adds	r3, #1
 8009d3a:	4a3c      	ldr	r2, [pc, #240]	; (8009e2c <xTaskIncrementTick+0x154>)
 8009d3c:	6013      	str	r3, [r2, #0]
 8009d3e:	f000 f99f 	bl	800a080 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009d42:	4b3b      	ldr	r3, [pc, #236]	; (8009e30 <xTaskIncrementTick+0x158>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	693a      	ldr	r2, [r7, #16]
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d348      	bcc.n	8009dde <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d4c:	4b35      	ldr	r3, [pc, #212]	; (8009e24 <xTaskIncrementTick+0x14c>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d104      	bne.n	8009d60 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d56:	4b36      	ldr	r3, [pc, #216]	; (8009e30 <xTaskIncrementTick+0x158>)
 8009d58:	f04f 32ff 	mov.w	r2, #4294967295
 8009d5c:	601a      	str	r2, [r3, #0]
					break;
 8009d5e:	e03e      	b.n	8009dde <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d60:	4b30      	ldr	r3, [pc, #192]	; (8009e24 <xTaskIncrementTick+0x14c>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	68db      	ldr	r3, [r3, #12]
 8009d66:	68db      	ldr	r3, [r3, #12]
 8009d68:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009d70:	693a      	ldr	r2, [r7, #16]
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d203      	bcs.n	8009d80 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009d78:	4a2d      	ldr	r2, [pc, #180]	; (8009e30 <xTaskIncrementTick+0x158>)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009d7e:	e02e      	b.n	8009dde <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	3304      	adds	r3, #4
 8009d84:	4618      	mov	r0, r3
 8009d86:	f7ff fc8a 	bl	800969e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d004      	beq.n	8009d9c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	3318      	adds	r3, #24
 8009d96:	4618      	mov	r0, r3
 8009d98:	f7ff fc81 	bl	800969e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009da0:	2201      	movs	r2, #1
 8009da2:	409a      	lsls	r2, r3
 8009da4:	4b23      	ldr	r3, [pc, #140]	; (8009e34 <xTaskIncrementTick+0x15c>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	4313      	orrs	r3, r2
 8009daa:	4a22      	ldr	r2, [pc, #136]	; (8009e34 <xTaskIncrementTick+0x15c>)
 8009dac:	6013      	str	r3, [r2, #0]
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009db2:	4613      	mov	r3, r2
 8009db4:	009b      	lsls	r3, r3, #2
 8009db6:	4413      	add	r3, r2
 8009db8:	009b      	lsls	r3, r3, #2
 8009dba:	4a1f      	ldr	r2, [pc, #124]	; (8009e38 <xTaskIncrementTick+0x160>)
 8009dbc:	441a      	add	r2, r3
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	3304      	adds	r3, #4
 8009dc2:	4619      	mov	r1, r3
 8009dc4:	4610      	mov	r0, r2
 8009dc6:	f7ff fc0d 	bl	80095e4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dce:	4b1b      	ldr	r3, [pc, #108]	; (8009e3c <xTaskIncrementTick+0x164>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d3b9      	bcc.n	8009d4c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009dd8:	2301      	movs	r3, #1
 8009dda:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ddc:	e7b6      	b.n	8009d4c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009dde:	4b17      	ldr	r3, [pc, #92]	; (8009e3c <xTaskIncrementTick+0x164>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009de4:	4914      	ldr	r1, [pc, #80]	; (8009e38 <xTaskIncrementTick+0x160>)
 8009de6:	4613      	mov	r3, r2
 8009de8:	009b      	lsls	r3, r3, #2
 8009dea:	4413      	add	r3, r2
 8009dec:	009b      	lsls	r3, r3, #2
 8009dee:	440b      	add	r3, r1
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	2b01      	cmp	r3, #1
 8009df4:	d901      	bls.n	8009dfa <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8009df6:	2301      	movs	r3, #1
 8009df8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009dfa:	4b11      	ldr	r3, [pc, #68]	; (8009e40 <xTaskIncrementTick+0x168>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d007      	beq.n	8009e12 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8009e02:	2301      	movs	r3, #1
 8009e04:	617b      	str	r3, [r7, #20]
 8009e06:	e004      	b.n	8009e12 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009e08:	4b0e      	ldr	r3, [pc, #56]	; (8009e44 <xTaskIncrementTick+0x16c>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	3301      	adds	r3, #1
 8009e0e:	4a0d      	ldr	r2, [pc, #52]	; (8009e44 <xTaskIncrementTick+0x16c>)
 8009e10:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009e12:	697b      	ldr	r3, [r7, #20]
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3718      	adds	r7, #24
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}
 8009e1c:	2000168c 	.word	0x2000168c
 8009e20:	20001668 	.word	0x20001668
 8009e24:	2000161c 	.word	0x2000161c
 8009e28:	20001620 	.word	0x20001620
 8009e2c:	2000167c 	.word	0x2000167c
 8009e30:	20001684 	.word	0x20001684
 8009e34:	2000166c 	.word	0x2000166c
 8009e38:	20001568 	.word	0x20001568
 8009e3c:	20001564 	.word	0x20001564
 8009e40:	20001678 	.word	0x20001678
 8009e44:	20001674 	.word	0x20001674

08009e48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b087      	sub	sp, #28
 8009e4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009e4e:	4b29      	ldr	r3, [pc, #164]	; (8009ef4 <vTaskSwitchContext+0xac>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d003      	beq.n	8009e5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009e56:	4b28      	ldr	r3, [pc, #160]	; (8009ef8 <vTaskSwitchContext+0xb0>)
 8009e58:	2201      	movs	r2, #1
 8009e5a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009e5c:	e044      	b.n	8009ee8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8009e5e:	4b26      	ldr	r3, [pc, #152]	; (8009ef8 <vTaskSwitchContext+0xb0>)
 8009e60:	2200      	movs	r2, #0
 8009e62:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e64:	4b25      	ldr	r3, [pc, #148]	; (8009efc <vTaskSwitchContext+0xb4>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	fab3 f383 	clz	r3, r3
 8009e70:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009e72:	7afb      	ldrb	r3, [r7, #11]
 8009e74:	f1c3 031f 	rsb	r3, r3, #31
 8009e78:	617b      	str	r3, [r7, #20]
 8009e7a:	4921      	ldr	r1, [pc, #132]	; (8009f00 <vTaskSwitchContext+0xb8>)
 8009e7c:	697a      	ldr	r2, [r7, #20]
 8009e7e:	4613      	mov	r3, r2
 8009e80:	009b      	lsls	r3, r3, #2
 8009e82:	4413      	add	r3, r2
 8009e84:	009b      	lsls	r3, r3, #2
 8009e86:	440b      	add	r3, r1
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d10a      	bne.n	8009ea4 <vTaskSwitchContext+0x5c>
	__asm volatile
 8009e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e92:	f383 8811 	msr	BASEPRI, r3
 8009e96:	f3bf 8f6f 	isb	sy
 8009e9a:	f3bf 8f4f 	dsb	sy
 8009e9e:	607b      	str	r3, [r7, #4]
}
 8009ea0:	bf00      	nop
 8009ea2:	e7fe      	b.n	8009ea2 <vTaskSwitchContext+0x5a>
 8009ea4:	697a      	ldr	r2, [r7, #20]
 8009ea6:	4613      	mov	r3, r2
 8009ea8:	009b      	lsls	r3, r3, #2
 8009eaa:	4413      	add	r3, r2
 8009eac:	009b      	lsls	r3, r3, #2
 8009eae:	4a14      	ldr	r2, [pc, #80]	; (8009f00 <vTaskSwitchContext+0xb8>)
 8009eb0:	4413      	add	r3, r2
 8009eb2:	613b      	str	r3, [r7, #16]
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	685b      	ldr	r3, [r3, #4]
 8009eb8:	685a      	ldr	r2, [r3, #4]
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	605a      	str	r2, [r3, #4]
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	685a      	ldr	r2, [r3, #4]
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	3308      	adds	r3, #8
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d104      	bne.n	8009ed4 <vTaskSwitchContext+0x8c>
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	685a      	ldr	r2, [r3, #4]
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	605a      	str	r2, [r3, #4]
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	68db      	ldr	r3, [r3, #12]
 8009eda:	4a0a      	ldr	r2, [pc, #40]	; (8009f04 <vTaskSwitchContext+0xbc>)
 8009edc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009ede:	4b09      	ldr	r3, [pc, #36]	; (8009f04 <vTaskSwitchContext+0xbc>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	334c      	adds	r3, #76	; 0x4c
 8009ee4:	4a08      	ldr	r2, [pc, #32]	; (8009f08 <vTaskSwitchContext+0xc0>)
 8009ee6:	6013      	str	r3, [r2, #0]
}
 8009ee8:	bf00      	nop
 8009eea:	371c      	adds	r7, #28
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr
 8009ef4:	2000168c 	.word	0x2000168c
 8009ef8:	20001678 	.word	0x20001678
 8009efc:	2000166c 	.word	0x2000166c
 8009f00:	20001568 	.word	0x20001568
 8009f04:	20001564 	.word	0x20001564
 8009f08:	2000001c 	.word	0x2000001c

08009f0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009f14:	f000 f852 	bl	8009fbc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009f18:	4b06      	ldr	r3, [pc, #24]	; (8009f34 <prvIdleTask+0x28>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	d9f9      	bls.n	8009f14 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009f20:	4b05      	ldr	r3, [pc, #20]	; (8009f38 <prvIdleTask+0x2c>)
 8009f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f26:	601a      	str	r2, [r3, #0]
 8009f28:	f3bf 8f4f 	dsb	sy
 8009f2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009f30:	e7f0      	b.n	8009f14 <prvIdleTask+0x8>
 8009f32:	bf00      	nop
 8009f34:	20001568 	.word	0x20001568
 8009f38:	e000ed04 	.word	0xe000ed04

08009f3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b082      	sub	sp, #8
 8009f40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009f42:	2300      	movs	r3, #0
 8009f44:	607b      	str	r3, [r7, #4]
 8009f46:	e00c      	b.n	8009f62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	4613      	mov	r3, r2
 8009f4c:	009b      	lsls	r3, r3, #2
 8009f4e:	4413      	add	r3, r2
 8009f50:	009b      	lsls	r3, r3, #2
 8009f52:	4a12      	ldr	r2, [pc, #72]	; (8009f9c <prvInitialiseTaskLists+0x60>)
 8009f54:	4413      	add	r3, r2
 8009f56:	4618      	mov	r0, r3
 8009f58:	f7ff fb17 	bl	800958a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	3301      	adds	r3, #1
 8009f60:	607b      	str	r3, [r7, #4]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2b06      	cmp	r3, #6
 8009f66:	d9ef      	bls.n	8009f48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009f68:	480d      	ldr	r0, [pc, #52]	; (8009fa0 <prvInitialiseTaskLists+0x64>)
 8009f6a:	f7ff fb0e 	bl	800958a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009f6e:	480d      	ldr	r0, [pc, #52]	; (8009fa4 <prvInitialiseTaskLists+0x68>)
 8009f70:	f7ff fb0b 	bl	800958a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009f74:	480c      	ldr	r0, [pc, #48]	; (8009fa8 <prvInitialiseTaskLists+0x6c>)
 8009f76:	f7ff fb08 	bl	800958a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009f7a:	480c      	ldr	r0, [pc, #48]	; (8009fac <prvInitialiseTaskLists+0x70>)
 8009f7c:	f7ff fb05 	bl	800958a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009f80:	480b      	ldr	r0, [pc, #44]	; (8009fb0 <prvInitialiseTaskLists+0x74>)
 8009f82:	f7ff fb02 	bl	800958a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009f86:	4b0b      	ldr	r3, [pc, #44]	; (8009fb4 <prvInitialiseTaskLists+0x78>)
 8009f88:	4a05      	ldr	r2, [pc, #20]	; (8009fa0 <prvInitialiseTaskLists+0x64>)
 8009f8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009f8c:	4b0a      	ldr	r3, [pc, #40]	; (8009fb8 <prvInitialiseTaskLists+0x7c>)
 8009f8e:	4a05      	ldr	r2, [pc, #20]	; (8009fa4 <prvInitialiseTaskLists+0x68>)
 8009f90:	601a      	str	r2, [r3, #0]
}
 8009f92:	bf00      	nop
 8009f94:	3708      	adds	r7, #8
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}
 8009f9a:	bf00      	nop
 8009f9c:	20001568 	.word	0x20001568
 8009fa0:	200015f4 	.word	0x200015f4
 8009fa4:	20001608 	.word	0x20001608
 8009fa8:	20001624 	.word	0x20001624
 8009fac:	20001638 	.word	0x20001638
 8009fb0:	20001650 	.word	0x20001650
 8009fb4:	2000161c 	.word	0x2000161c
 8009fb8:	20001620 	.word	0x20001620

08009fbc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b082      	sub	sp, #8
 8009fc0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009fc2:	e019      	b.n	8009ff8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009fc4:	f000 fa0e 	bl	800a3e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fc8:	4b10      	ldr	r3, [pc, #64]	; (800a00c <prvCheckTasksWaitingTermination+0x50>)
 8009fca:	68db      	ldr	r3, [r3, #12]
 8009fcc:	68db      	ldr	r3, [r3, #12]
 8009fce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	3304      	adds	r3, #4
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f7ff fb62 	bl	800969e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009fda:	4b0d      	ldr	r3, [pc, #52]	; (800a010 <prvCheckTasksWaitingTermination+0x54>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	3b01      	subs	r3, #1
 8009fe0:	4a0b      	ldr	r2, [pc, #44]	; (800a010 <prvCheckTasksWaitingTermination+0x54>)
 8009fe2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009fe4:	4b0b      	ldr	r3, [pc, #44]	; (800a014 <prvCheckTasksWaitingTermination+0x58>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	3b01      	subs	r3, #1
 8009fea:	4a0a      	ldr	r2, [pc, #40]	; (800a014 <prvCheckTasksWaitingTermination+0x58>)
 8009fec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009fee:	f000 fa29 	bl	800a444 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f000 f810 	bl	800a018 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ff8:	4b06      	ldr	r3, [pc, #24]	; (800a014 <prvCheckTasksWaitingTermination+0x58>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d1e1      	bne.n	8009fc4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a000:	bf00      	nop
 800a002:	bf00      	nop
 800a004:	3708      	adds	r7, #8
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
 800a00a:	bf00      	nop
 800a00c:	20001638 	.word	0x20001638
 800a010:	20001664 	.word	0x20001664
 800a014:	2000164c 	.word	0x2000164c

0800a018 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b084      	sub	sp, #16
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	334c      	adds	r3, #76	; 0x4c
 800a024:	4618      	mov	r0, r3
 800a026:	f000 fdb1 	bl	800ab8c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a030:	2b00      	cmp	r3, #0
 800a032:	d108      	bne.n	800a046 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a038:	4618      	mov	r0, r3
 800a03a:	f000 fb81 	bl	800a740 <vPortFree>
				vPortFree( pxTCB );
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f000 fb7e 	bl	800a740 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a044:	e018      	b.n	800a078 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d103      	bne.n	800a058 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f000 fb75 	bl	800a740 <vPortFree>
	}
 800a056:	e00f      	b.n	800a078 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a05e:	2b02      	cmp	r3, #2
 800a060:	d00a      	beq.n	800a078 <prvDeleteTCB+0x60>
	__asm volatile
 800a062:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a066:	f383 8811 	msr	BASEPRI, r3
 800a06a:	f3bf 8f6f 	isb	sy
 800a06e:	f3bf 8f4f 	dsb	sy
 800a072:	60fb      	str	r3, [r7, #12]
}
 800a074:	bf00      	nop
 800a076:	e7fe      	b.n	800a076 <prvDeleteTCB+0x5e>
	}
 800a078:	bf00      	nop
 800a07a:	3710      	adds	r7, #16
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a080:	b480      	push	{r7}
 800a082:	b083      	sub	sp, #12
 800a084:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a086:	4b0c      	ldr	r3, [pc, #48]	; (800a0b8 <prvResetNextTaskUnblockTime+0x38>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d104      	bne.n	800a09a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a090:	4b0a      	ldr	r3, [pc, #40]	; (800a0bc <prvResetNextTaskUnblockTime+0x3c>)
 800a092:	f04f 32ff 	mov.w	r2, #4294967295
 800a096:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a098:	e008      	b.n	800a0ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a09a:	4b07      	ldr	r3, [pc, #28]	; (800a0b8 <prvResetNextTaskUnblockTime+0x38>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	68db      	ldr	r3, [r3, #12]
 800a0a0:	68db      	ldr	r3, [r3, #12]
 800a0a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	685b      	ldr	r3, [r3, #4]
 800a0a8:	4a04      	ldr	r2, [pc, #16]	; (800a0bc <prvResetNextTaskUnblockTime+0x3c>)
 800a0aa:	6013      	str	r3, [r2, #0]
}
 800a0ac:	bf00      	nop
 800a0ae:	370c      	adds	r7, #12
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b6:	4770      	bx	lr
 800a0b8:	2000161c 	.word	0x2000161c
 800a0bc:	20001684 	.word	0x20001684

0800a0c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b084      	sub	sp, #16
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a0ca:	4b29      	ldr	r3, [pc, #164]	; (800a170 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0d0:	4b28      	ldr	r3, [pc, #160]	; (800a174 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	3304      	adds	r3, #4
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f7ff fae1 	bl	800969e <uxListRemove>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d10b      	bne.n	800a0fa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a0e2:	4b24      	ldr	r3, [pc, #144]	; (800a174 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	fa02 f303 	lsl.w	r3, r2, r3
 800a0ee:	43da      	mvns	r2, r3
 800a0f0:	4b21      	ldr	r3, [pc, #132]	; (800a178 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4013      	ands	r3, r2
 800a0f6:	4a20      	ldr	r2, [pc, #128]	; (800a178 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a0f8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a100:	d10a      	bne.n	800a118 <prvAddCurrentTaskToDelayedList+0x58>
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d007      	beq.n	800a118 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a108:	4b1a      	ldr	r3, [pc, #104]	; (800a174 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	3304      	adds	r3, #4
 800a10e:	4619      	mov	r1, r3
 800a110:	481a      	ldr	r0, [pc, #104]	; (800a17c <prvAddCurrentTaskToDelayedList+0xbc>)
 800a112:	f7ff fa67 	bl	80095e4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a116:	e026      	b.n	800a166 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a118:	68fa      	ldr	r2, [r7, #12]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	4413      	add	r3, r2
 800a11e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a120:	4b14      	ldr	r3, [pc, #80]	; (800a174 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	68ba      	ldr	r2, [r7, #8]
 800a126:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a128:	68ba      	ldr	r2, [r7, #8]
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	429a      	cmp	r2, r3
 800a12e:	d209      	bcs.n	800a144 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a130:	4b13      	ldr	r3, [pc, #76]	; (800a180 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a132:	681a      	ldr	r2, [r3, #0]
 800a134:	4b0f      	ldr	r3, [pc, #60]	; (800a174 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	3304      	adds	r3, #4
 800a13a:	4619      	mov	r1, r3
 800a13c:	4610      	mov	r0, r2
 800a13e:	f7ff fa75 	bl	800962c <vListInsert>
}
 800a142:	e010      	b.n	800a166 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a144:	4b0f      	ldr	r3, [pc, #60]	; (800a184 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	4b0a      	ldr	r3, [pc, #40]	; (800a174 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	3304      	adds	r3, #4
 800a14e:	4619      	mov	r1, r3
 800a150:	4610      	mov	r0, r2
 800a152:	f7ff fa6b 	bl	800962c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a156:	4b0c      	ldr	r3, [pc, #48]	; (800a188 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	68ba      	ldr	r2, [r7, #8]
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d202      	bcs.n	800a166 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a160:	4a09      	ldr	r2, [pc, #36]	; (800a188 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	6013      	str	r3, [r2, #0]
}
 800a166:	bf00      	nop
 800a168:	3710      	adds	r7, #16
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}
 800a16e:	bf00      	nop
 800a170:	20001668 	.word	0x20001668
 800a174:	20001564 	.word	0x20001564
 800a178:	2000166c 	.word	0x2000166c
 800a17c:	20001650 	.word	0x20001650
 800a180:	20001620 	.word	0x20001620
 800a184:	2000161c 	.word	0x2000161c
 800a188:	20001684 	.word	0x20001684

0800a18c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a18c:	b480      	push	{r7}
 800a18e:	b085      	sub	sp, #20
 800a190:	af00      	add	r7, sp, #0
 800a192:	60f8      	str	r0, [r7, #12]
 800a194:	60b9      	str	r1, [r7, #8]
 800a196:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	3b04      	subs	r3, #4
 800a19c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a1a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	3b04      	subs	r3, #4
 800a1aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	f023 0201 	bic.w	r2, r3, #1
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	3b04      	subs	r3, #4
 800a1ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a1bc:	4a0c      	ldr	r2, [pc, #48]	; (800a1f0 <pxPortInitialiseStack+0x64>)
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	3b14      	subs	r3, #20
 800a1c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a1c8:	687a      	ldr	r2, [r7, #4]
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	3b04      	subs	r3, #4
 800a1d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f06f 0202 	mvn.w	r2, #2
 800a1da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	3b20      	subs	r3, #32
 800a1e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3714      	adds	r7, #20
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ee:	4770      	bx	lr
 800a1f0:	0800a1f5 	.word	0x0800a1f5

0800a1f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b085      	sub	sp, #20
 800a1f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a1fe:	4b12      	ldr	r3, [pc, #72]	; (800a248 <prvTaskExitError+0x54>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a206:	d00a      	beq.n	800a21e <prvTaskExitError+0x2a>
	__asm volatile
 800a208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a20c:	f383 8811 	msr	BASEPRI, r3
 800a210:	f3bf 8f6f 	isb	sy
 800a214:	f3bf 8f4f 	dsb	sy
 800a218:	60fb      	str	r3, [r7, #12]
}
 800a21a:	bf00      	nop
 800a21c:	e7fe      	b.n	800a21c <prvTaskExitError+0x28>
	__asm volatile
 800a21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a222:	f383 8811 	msr	BASEPRI, r3
 800a226:	f3bf 8f6f 	isb	sy
 800a22a:	f3bf 8f4f 	dsb	sy
 800a22e:	60bb      	str	r3, [r7, #8]
}
 800a230:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a232:	bf00      	nop
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d0fc      	beq.n	800a234 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a23a:	bf00      	nop
 800a23c:	bf00      	nop
 800a23e:	3714      	adds	r7, #20
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr
 800a248:	20000014 	.word	0x20000014
 800a24c:	00000000 	.word	0x00000000

0800a250 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a250:	4b07      	ldr	r3, [pc, #28]	; (800a270 <pxCurrentTCBConst2>)
 800a252:	6819      	ldr	r1, [r3, #0]
 800a254:	6808      	ldr	r0, [r1, #0]
 800a256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a25a:	f380 8809 	msr	PSP, r0
 800a25e:	f3bf 8f6f 	isb	sy
 800a262:	f04f 0000 	mov.w	r0, #0
 800a266:	f380 8811 	msr	BASEPRI, r0
 800a26a:	4770      	bx	lr
 800a26c:	f3af 8000 	nop.w

0800a270 <pxCurrentTCBConst2>:
 800a270:	20001564 	.word	0x20001564
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a274:	bf00      	nop
 800a276:	bf00      	nop

0800a278 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a278:	4808      	ldr	r0, [pc, #32]	; (800a29c <prvPortStartFirstTask+0x24>)
 800a27a:	6800      	ldr	r0, [r0, #0]
 800a27c:	6800      	ldr	r0, [r0, #0]
 800a27e:	f380 8808 	msr	MSP, r0
 800a282:	f04f 0000 	mov.w	r0, #0
 800a286:	f380 8814 	msr	CONTROL, r0
 800a28a:	b662      	cpsie	i
 800a28c:	b661      	cpsie	f
 800a28e:	f3bf 8f4f 	dsb	sy
 800a292:	f3bf 8f6f 	isb	sy
 800a296:	df00      	svc	0
 800a298:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a29a:	bf00      	nop
 800a29c:	e000ed08 	.word	0xe000ed08

0800a2a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b086      	sub	sp, #24
 800a2a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a2a6:	4b46      	ldr	r3, [pc, #280]	; (800a3c0 <xPortStartScheduler+0x120>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	4a46      	ldr	r2, [pc, #280]	; (800a3c4 <xPortStartScheduler+0x124>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d10a      	bne.n	800a2c6 <xPortStartScheduler+0x26>
	__asm volatile
 800a2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b4:	f383 8811 	msr	BASEPRI, r3
 800a2b8:	f3bf 8f6f 	isb	sy
 800a2bc:	f3bf 8f4f 	dsb	sy
 800a2c0:	613b      	str	r3, [r7, #16]
}
 800a2c2:	bf00      	nop
 800a2c4:	e7fe      	b.n	800a2c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a2c6:	4b3e      	ldr	r3, [pc, #248]	; (800a3c0 <xPortStartScheduler+0x120>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4a3f      	ldr	r2, [pc, #252]	; (800a3c8 <xPortStartScheduler+0x128>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d10a      	bne.n	800a2e6 <xPortStartScheduler+0x46>
	__asm volatile
 800a2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d4:	f383 8811 	msr	BASEPRI, r3
 800a2d8:	f3bf 8f6f 	isb	sy
 800a2dc:	f3bf 8f4f 	dsb	sy
 800a2e0:	60fb      	str	r3, [r7, #12]
}
 800a2e2:	bf00      	nop
 800a2e4:	e7fe      	b.n	800a2e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a2e6:	4b39      	ldr	r3, [pc, #228]	; (800a3cc <xPortStartScheduler+0x12c>)
 800a2e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	781b      	ldrb	r3, [r3, #0]
 800a2ee:	b2db      	uxtb	r3, r3
 800a2f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	22ff      	movs	r2, #255	; 0xff
 800a2f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	781b      	ldrb	r3, [r3, #0]
 800a2fc:	b2db      	uxtb	r3, r3
 800a2fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a300:	78fb      	ldrb	r3, [r7, #3]
 800a302:	b2db      	uxtb	r3, r3
 800a304:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a308:	b2da      	uxtb	r2, r3
 800a30a:	4b31      	ldr	r3, [pc, #196]	; (800a3d0 <xPortStartScheduler+0x130>)
 800a30c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a30e:	4b31      	ldr	r3, [pc, #196]	; (800a3d4 <xPortStartScheduler+0x134>)
 800a310:	2207      	movs	r2, #7
 800a312:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a314:	e009      	b.n	800a32a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a316:	4b2f      	ldr	r3, [pc, #188]	; (800a3d4 <xPortStartScheduler+0x134>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	3b01      	subs	r3, #1
 800a31c:	4a2d      	ldr	r2, [pc, #180]	; (800a3d4 <xPortStartScheduler+0x134>)
 800a31e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a320:	78fb      	ldrb	r3, [r7, #3]
 800a322:	b2db      	uxtb	r3, r3
 800a324:	005b      	lsls	r3, r3, #1
 800a326:	b2db      	uxtb	r3, r3
 800a328:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a32a:	78fb      	ldrb	r3, [r7, #3]
 800a32c:	b2db      	uxtb	r3, r3
 800a32e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a332:	2b80      	cmp	r3, #128	; 0x80
 800a334:	d0ef      	beq.n	800a316 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a336:	4b27      	ldr	r3, [pc, #156]	; (800a3d4 <xPortStartScheduler+0x134>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f1c3 0307 	rsb	r3, r3, #7
 800a33e:	2b04      	cmp	r3, #4
 800a340:	d00a      	beq.n	800a358 <xPortStartScheduler+0xb8>
	__asm volatile
 800a342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a346:	f383 8811 	msr	BASEPRI, r3
 800a34a:	f3bf 8f6f 	isb	sy
 800a34e:	f3bf 8f4f 	dsb	sy
 800a352:	60bb      	str	r3, [r7, #8]
}
 800a354:	bf00      	nop
 800a356:	e7fe      	b.n	800a356 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a358:	4b1e      	ldr	r3, [pc, #120]	; (800a3d4 <xPortStartScheduler+0x134>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	021b      	lsls	r3, r3, #8
 800a35e:	4a1d      	ldr	r2, [pc, #116]	; (800a3d4 <xPortStartScheduler+0x134>)
 800a360:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a362:	4b1c      	ldr	r3, [pc, #112]	; (800a3d4 <xPortStartScheduler+0x134>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a36a:	4a1a      	ldr	r2, [pc, #104]	; (800a3d4 <xPortStartScheduler+0x134>)
 800a36c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	b2da      	uxtb	r2, r3
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a376:	4b18      	ldr	r3, [pc, #96]	; (800a3d8 <xPortStartScheduler+0x138>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4a17      	ldr	r2, [pc, #92]	; (800a3d8 <xPortStartScheduler+0x138>)
 800a37c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a380:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a382:	4b15      	ldr	r3, [pc, #84]	; (800a3d8 <xPortStartScheduler+0x138>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4a14      	ldr	r2, [pc, #80]	; (800a3d8 <xPortStartScheduler+0x138>)
 800a388:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a38c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a38e:	f000 f8dd 	bl	800a54c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a392:	4b12      	ldr	r3, [pc, #72]	; (800a3dc <xPortStartScheduler+0x13c>)
 800a394:	2200      	movs	r2, #0
 800a396:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a398:	f000 f8fc 	bl	800a594 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a39c:	4b10      	ldr	r3, [pc, #64]	; (800a3e0 <xPortStartScheduler+0x140>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4a0f      	ldr	r2, [pc, #60]	; (800a3e0 <xPortStartScheduler+0x140>)
 800a3a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a3a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a3a8:	f7ff ff66 	bl	800a278 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a3ac:	f7ff fd4c 	bl	8009e48 <vTaskSwitchContext>
	prvTaskExitError();
 800a3b0:	f7ff ff20 	bl	800a1f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a3b4:	2300      	movs	r3, #0
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3718      	adds	r7, #24
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}
 800a3be:	bf00      	nop
 800a3c0:	e000ed00 	.word	0xe000ed00
 800a3c4:	410fc271 	.word	0x410fc271
 800a3c8:	410fc270 	.word	0x410fc270
 800a3cc:	e000e400 	.word	0xe000e400
 800a3d0:	20001690 	.word	0x20001690
 800a3d4:	20001694 	.word	0x20001694
 800a3d8:	e000ed20 	.word	0xe000ed20
 800a3dc:	20000014 	.word	0x20000014
 800a3e0:	e000ef34 	.word	0xe000ef34

0800a3e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b083      	sub	sp, #12
 800a3e8:	af00      	add	r7, sp, #0
	__asm volatile
 800a3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ee:	f383 8811 	msr	BASEPRI, r3
 800a3f2:	f3bf 8f6f 	isb	sy
 800a3f6:	f3bf 8f4f 	dsb	sy
 800a3fa:	607b      	str	r3, [r7, #4]
}
 800a3fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a3fe:	4b0f      	ldr	r3, [pc, #60]	; (800a43c <vPortEnterCritical+0x58>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	3301      	adds	r3, #1
 800a404:	4a0d      	ldr	r2, [pc, #52]	; (800a43c <vPortEnterCritical+0x58>)
 800a406:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a408:	4b0c      	ldr	r3, [pc, #48]	; (800a43c <vPortEnterCritical+0x58>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	2b01      	cmp	r3, #1
 800a40e:	d10f      	bne.n	800a430 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a410:	4b0b      	ldr	r3, [pc, #44]	; (800a440 <vPortEnterCritical+0x5c>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	b2db      	uxtb	r3, r3
 800a416:	2b00      	cmp	r3, #0
 800a418:	d00a      	beq.n	800a430 <vPortEnterCritical+0x4c>
	__asm volatile
 800a41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41e:	f383 8811 	msr	BASEPRI, r3
 800a422:	f3bf 8f6f 	isb	sy
 800a426:	f3bf 8f4f 	dsb	sy
 800a42a:	603b      	str	r3, [r7, #0]
}
 800a42c:	bf00      	nop
 800a42e:	e7fe      	b.n	800a42e <vPortEnterCritical+0x4a>
	}
}
 800a430:	bf00      	nop
 800a432:	370c      	adds	r7, #12
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr
 800a43c:	20000014 	.word	0x20000014
 800a440:	e000ed04 	.word	0xe000ed04

0800a444 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a444:	b480      	push	{r7}
 800a446:	b083      	sub	sp, #12
 800a448:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a44a:	4b12      	ldr	r3, [pc, #72]	; (800a494 <vPortExitCritical+0x50>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d10a      	bne.n	800a468 <vPortExitCritical+0x24>
	__asm volatile
 800a452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a456:	f383 8811 	msr	BASEPRI, r3
 800a45a:	f3bf 8f6f 	isb	sy
 800a45e:	f3bf 8f4f 	dsb	sy
 800a462:	607b      	str	r3, [r7, #4]
}
 800a464:	bf00      	nop
 800a466:	e7fe      	b.n	800a466 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a468:	4b0a      	ldr	r3, [pc, #40]	; (800a494 <vPortExitCritical+0x50>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	3b01      	subs	r3, #1
 800a46e:	4a09      	ldr	r2, [pc, #36]	; (800a494 <vPortExitCritical+0x50>)
 800a470:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a472:	4b08      	ldr	r3, [pc, #32]	; (800a494 <vPortExitCritical+0x50>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d105      	bne.n	800a486 <vPortExitCritical+0x42>
 800a47a:	2300      	movs	r3, #0
 800a47c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a484:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a486:	bf00      	nop
 800a488:	370c      	adds	r7, #12
 800a48a:	46bd      	mov	sp, r7
 800a48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a490:	4770      	bx	lr
 800a492:	bf00      	nop
 800a494:	20000014 	.word	0x20000014
	...

0800a4a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a4a0:	f3ef 8009 	mrs	r0, PSP
 800a4a4:	f3bf 8f6f 	isb	sy
 800a4a8:	4b15      	ldr	r3, [pc, #84]	; (800a500 <pxCurrentTCBConst>)
 800a4aa:	681a      	ldr	r2, [r3, #0]
 800a4ac:	f01e 0f10 	tst.w	lr, #16
 800a4b0:	bf08      	it	eq
 800a4b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a4b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4ba:	6010      	str	r0, [r2, #0]
 800a4bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a4c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a4c4:	f380 8811 	msr	BASEPRI, r0
 800a4c8:	f3bf 8f4f 	dsb	sy
 800a4cc:	f3bf 8f6f 	isb	sy
 800a4d0:	f7ff fcba 	bl	8009e48 <vTaskSwitchContext>
 800a4d4:	f04f 0000 	mov.w	r0, #0
 800a4d8:	f380 8811 	msr	BASEPRI, r0
 800a4dc:	bc09      	pop	{r0, r3}
 800a4de:	6819      	ldr	r1, [r3, #0]
 800a4e0:	6808      	ldr	r0, [r1, #0]
 800a4e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4e6:	f01e 0f10 	tst.w	lr, #16
 800a4ea:	bf08      	it	eq
 800a4ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a4f0:	f380 8809 	msr	PSP, r0
 800a4f4:	f3bf 8f6f 	isb	sy
 800a4f8:	4770      	bx	lr
 800a4fa:	bf00      	nop
 800a4fc:	f3af 8000 	nop.w

0800a500 <pxCurrentTCBConst>:
 800a500:	20001564 	.word	0x20001564
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a504:	bf00      	nop
 800a506:	bf00      	nop

0800a508 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b082      	sub	sp, #8
 800a50c:	af00      	add	r7, sp, #0
	__asm volatile
 800a50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a512:	f383 8811 	msr	BASEPRI, r3
 800a516:	f3bf 8f6f 	isb	sy
 800a51a:	f3bf 8f4f 	dsb	sy
 800a51e:	607b      	str	r3, [r7, #4]
}
 800a520:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a522:	f7ff fbd9 	bl	8009cd8 <xTaskIncrementTick>
 800a526:	4603      	mov	r3, r0
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d003      	beq.n	800a534 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a52c:	4b06      	ldr	r3, [pc, #24]	; (800a548 <SysTick_Handler+0x40>)
 800a52e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a532:	601a      	str	r2, [r3, #0]
 800a534:	2300      	movs	r3, #0
 800a536:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	f383 8811 	msr	BASEPRI, r3
}
 800a53e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a540:	bf00      	nop
 800a542:	3708      	adds	r7, #8
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}
 800a548:	e000ed04 	.word	0xe000ed04

0800a54c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a54c:	b480      	push	{r7}
 800a54e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a550:	4b0b      	ldr	r3, [pc, #44]	; (800a580 <vPortSetupTimerInterrupt+0x34>)
 800a552:	2200      	movs	r2, #0
 800a554:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a556:	4b0b      	ldr	r3, [pc, #44]	; (800a584 <vPortSetupTimerInterrupt+0x38>)
 800a558:	2200      	movs	r2, #0
 800a55a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a55c:	4b0a      	ldr	r3, [pc, #40]	; (800a588 <vPortSetupTimerInterrupt+0x3c>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4a0a      	ldr	r2, [pc, #40]	; (800a58c <vPortSetupTimerInterrupt+0x40>)
 800a562:	fba2 2303 	umull	r2, r3, r2, r3
 800a566:	099b      	lsrs	r3, r3, #6
 800a568:	4a09      	ldr	r2, [pc, #36]	; (800a590 <vPortSetupTimerInterrupt+0x44>)
 800a56a:	3b01      	subs	r3, #1
 800a56c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a56e:	4b04      	ldr	r3, [pc, #16]	; (800a580 <vPortSetupTimerInterrupt+0x34>)
 800a570:	2207      	movs	r2, #7
 800a572:	601a      	str	r2, [r3, #0]
}
 800a574:	bf00      	nop
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr
 800a57e:	bf00      	nop
 800a580:	e000e010 	.word	0xe000e010
 800a584:	e000e018 	.word	0xe000e018
 800a588:	20000008 	.word	0x20000008
 800a58c:	10624dd3 	.word	0x10624dd3
 800a590:	e000e014 	.word	0xe000e014

0800a594 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a594:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a5a4 <vPortEnableVFP+0x10>
 800a598:	6801      	ldr	r1, [r0, #0]
 800a59a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a59e:	6001      	str	r1, [r0, #0]
 800a5a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a5a2:	bf00      	nop
 800a5a4:	e000ed88 	.word	0xe000ed88

0800a5a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b08a      	sub	sp, #40	; 0x28
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a5b4:	f7ff fae6 	bl	8009b84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a5b8:	4b5b      	ldr	r3, [pc, #364]	; (800a728 <pvPortMalloc+0x180>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d101      	bne.n	800a5c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a5c0:	f000 f920 	bl	800a804 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a5c4:	4b59      	ldr	r3, [pc, #356]	; (800a72c <pvPortMalloc+0x184>)
 800a5c6:	681a      	ldr	r2, [r3, #0]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	4013      	ands	r3, r2
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	f040 8093 	bne.w	800a6f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d01d      	beq.n	800a614 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a5d8:	2208      	movs	r2, #8
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	4413      	add	r3, r2
 800a5de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f003 0307 	and.w	r3, r3, #7
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d014      	beq.n	800a614 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f023 0307 	bic.w	r3, r3, #7
 800a5f0:	3308      	adds	r3, #8
 800a5f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f003 0307 	and.w	r3, r3, #7
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d00a      	beq.n	800a614 <pvPortMalloc+0x6c>
	__asm volatile
 800a5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a602:	f383 8811 	msr	BASEPRI, r3
 800a606:	f3bf 8f6f 	isb	sy
 800a60a:	f3bf 8f4f 	dsb	sy
 800a60e:	617b      	str	r3, [r7, #20]
}
 800a610:	bf00      	nop
 800a612:	e7fe      	b.n	800a612 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d06e      	beq.n	800a6f8 <pvPortMalloc+0x150>
 800a61a:	4b45      	ldr	r3, [pc, #276]	; (800a730 <pvPortMalloc+0x188>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	687a      	ldr	r2, [r7, #4]
 800a620:	429a      	cmp	r2, r3
 800a622:	d869      	bhi.n	800a6f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a624:	4b43      	ldr	r3, [pc, #268]	; (800a734 <pvPortMalloc+0x18c>)
 800a626:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a628:	4b42      	ldr	r3, [pc, #264]	; (800a734 <pvPortMalloc+0x18c>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a62e:	e004      	b.n	800a63a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a632:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	687a      	ldr	r2, [r7, #4]
 800a640:	429a      	cmp	r2, r3
 800a642:	d903      	bls.n	800a64c <pvPortMalloc+0xa4>
 800a644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d1f1      	bne.n	800a630 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a64c:	4b36      	ldr	r3, [pc, #216]	; (800a728 <pvPortMalloc+0x180>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a652:	429a      	cmp	r2, r3
 800a654:	d050      	beq.n	800a6f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a656:	6a3b      	ldr	r3, [r7, #32]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	2208      	movs	r2, #8
 800a65c:	4413      	add	r3, r2
 800a65e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a662:	681a      	ldr	r2, [r3, #0]
 800a664:	6a3b      	ldr	r3, [r7, #32]
 800a666:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a66a:	685a      	ldr	r2, [r3, #4]
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	1ad2      	subs	r2, r2, r3
 800a670:	2308      	movs	r3, #8
 800a672:	005b      	lsls	r3, r3, #1
 800a674:	429a      	cmp	r2, r3
 800a676:	d91f      	bls.n	800a6b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	4413      	add	r3, r2
 800a67e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a680:	69bb      	ldr	r3, [r7, #24]
 800a682:	f003 0307 	and.w	r3, r3, #7
 800a686:	2b00      	cmp	r3, #0
 800a688:	d00a      	beq.n	800a6a0 <pvPortMalloc+0xf8>
	__asm volatile
 800a68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a68e:	f383 8811 	msr	BASEPRI, r3
 800a692:	f3bf 8f6f 	isb	sy
 800a696:	f3bf 8f4f 	dsb	sy
 800a69a:	613b      	str	r3, [r7, #16]
}
 800a69c:	bf00      	nop
 800a69e:	e7fe      	b.n	800a69e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a2:	685a      	ldr	r2, [r3, #4]
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	1ad2      	subs	r2, r2, r3
 800a6a8:	69bb      	ldr	r3, [r7, #24]
 800a6aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ae:	687a      	ldr	r2, [r7, #4]
 800a6b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a6b2:	69b8      	ldr	r0, [r7, #24]
 800a6b4:	f000 f908 	bl	800a8c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a6b8:	4b1d      	ldr	r3, [pc, #116]	; (800a730 <pvPortMalloc+0x188>)
 800a6ba:	681a      	ldr	r2, [r3, #0]
 800a6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	1ad3      	subs	r3, r2, r3
 800a6c2:	4a1b      	ldr	r2, [pc, #108]	; (800a730 <pvPortMalloc+0x188>)
 800a6c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a6c6:	4b1a      	ldr	r3, [pc, #104]	; (800a730 <pvPortMalloc+0x188>)
 800a6c8:	681a      	ldr	r2, [r3, #0]
 800a6ca:	4b1b      	ldr	r3, [pc, #108]	; (800a738 <pvPortMalloc+0x190>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	429a      	cmp	r2, r3
 800a6d0:	d203      	bcs.n	800a6da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a6d2:	4b17      	ldr	r3, [pc, #92]	; (800a730 <pvPortMalloc+0x188>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4a18      	ldr	r2, [pc, #96]	; (800a738 <pvPortMalloc+0x190>)
 800a6d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6dc:	685a      	ldr	r2, [r3, #4]
 800a6de:	4b13      	ldr	r3, [pc, #76]	; (800a72c <pvPortMalloc+0x184>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	431a      	orrs	r2, r3
 800a6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a6ee:	4b13      	ldr	r3, [pc, #76]	; (800a73c <pvPortMalloc+0x194>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	3301      	adds	r3, #1
 800a6f4:	4a11      	ldr	r2, [pc, #68]	; (800a73c <pvPortMalloc+0x194>)
 800a6f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a6f8:	f7ff fa52 	bl	8009ba0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6fc:	69fb      	ldr	r3, [r7, #28]
 800a6fe:	f003 0307 	and.w	r3, r3, #7
 800a702:	2b00      	cmp	r3, #0
 800a704:	d00a      	beq.n	800a71c <pvPortMalloc+0x174>
	__asm volatile
 800a706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a70a:	f383 8811 	msr	BASEPRI, r3
 800a70e:	f3bf 8f6f 	isb	sy
 800a712:	f3bf 8f4f 	dsb	sy
 800a716:	60fb      	str	r3, [r7, #12]
}
 800a718:	bf00      	nop
 800a71a:	e7fe      	b.n	800a71a <pvPortMalloc+0x172>
	return pvReturn;
 800a71c:	69fb      	ldr	r3, [r7, #28]
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3728      	adds	r7, #40	; 0x28
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
 800a726:	bf00      	nop
 800a728:	200052a0 	.word	0x200052a0
 800a72c:	200052b4 	.word	0x200052b4
 800a730:	200052a4 	.word	0x200052a4
 800a734:	20005298 	.word	0x20005298
 800a738:	200052a8 	.word	0x200052a8
 800a73c:	200052ac 	.word	0x200052ac

0800a740 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b086      	sub	sp, #24
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d04d      	beq.n	800a7ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a752:	2308      	movs	r3, #8
 800a754:	425b      	negs	r3, r3
 800a756:	697a      	ldr	r2, [r7, #20]
 800a758:	4413      	add	r3, r2
 800a75a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	685a      	ldr	r2, [r3, #4]
 800a764:	4b24      	ldr	r3, [pc, #144]	; (800a7f8 <vPortFree+0xb8>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4013      	ands	r3, r2
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d10a      	bne.n	800a784 <vPortFree+0x44>
	__asm volatile
 800a76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a772:	f383 8811 	msr	BASEPRI, r3
 800a776:	f3bf 8f6f 	isb	sy
 800a77a:	f3bf 8f4f 	dsb	sy
 800a77e:	60fb      	str	r3, [r7, #12]
}
 800a780:	bf00      	nop
 800a782:	e7fe      	b.n	800a782 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d00a      	beq.n	800a7a2 <vPortFree+0x62>
	__asm volatile
 800a78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a790:	f383 8811 	msr	BASEPRI, r3
 800a794:	f3bf 8f6f 	isb	sy
 800a798:	f3bf 8f4f 	dsb	sy
 800a79c:	60bb      	str	r3, [r7, #8]
}
 800a79e:	bf00      	nop
 800a7a0:	e7fe      	b.n	800a7a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	685a      	ldr	r2, [r3, #4]
 800a7a6:	4b14      	ldr	r3, [pc, #80]	; (800a7f8 <vPortFree+0xb8>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4013      	ands	r3, r2
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d01e      	beq.n	800a7ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d11a      	bne.n	800a7ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	685a      	ldr	r2, [r3, #4]
 800a7bc:	4b0e      	ldr	r3, [pc, #56]	; (800a7f8 <vPortFree+0xb8>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	43db      	mvns	r3, r3
 800a7c2:	401a      	ands	r2, r3
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a7c8:	f7ff f9dc 	bl	8009b84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a7cc:	693b      	ldr	r3, [r7, #16]
 800a7ce:	685a      	ldr	r2, [r3, #4]
 800a7d0:	4b0a      	ldr	r3, [pc, #40]	; (800a7fc <vPortFree+0xbc>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	4413      	add	r3, r2
 800a7d6:	4a09      	ldr	r2, [pc, #36]	; (800a7fc <vPortFree+0xbc>)
 800a7d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a7da:	6938      	ldr	r0, [r7, #16]
 800a7dc:	f000 f874 	bl	800a8c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a7e0:	4b07      	ldr	r3, [pc, #28]	; (800a800 <vPortFree+0xc0>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	3301      	adds	r3, #1
 800a7e6:	4a06      	ldr	r2, [pc, #24]	; (800a800 <vPortFree+0xc0>)
 800a7e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a7ea:	f7ff f9d9 	bl	8009ba0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a7ee:	bf00      	nop
 800a7f0:	3718      	adds	r7, #24
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	bf00      	nop
 800a7f8:	200052b4 	.word	0x200052b4
 800a7fc:	200052a4 	.word	0x200052a4
 800a800:	200052b0 	.word	0x200052b0

0800a804 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a804:	b480      	push	{r7}
 800a806:	b085      	sub	sp, #20
 800a808:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a80a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a80e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a810:	4b27      	ldr	r3, [pc, #156]	; (800a8b0 <prvHeapInit+0xac>)
 800a812:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f003 0307 	and.w	r3, r3, #7
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d00c      	beq.n	800a838 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	3307      	adds	r3, #7
 800a822:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f023 0307 	bic.w	r3, r3, #7
 800a82a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a82c:	68ba      	ldr	r2, [r7, #8]
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	1ad3      	subs	r3, r2, r3
 800a832:	4a1f      	ldr	r2, [pc, #124]	; (800a8b0 <prvHeapInit+0xac>)
 800a834:	4413      	add	r3, r2
 800a836:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a83c:	4a1d      	ldr	r2, [pc, #116]	; (800a8b4 <prvHeapInit+0xb0>)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a842:	4b1c      	ldr	r3, [pc, #112]	; (800a8b4 <prvHeapInit+0xb0>)
 800a844:	2200      	movs	r2, #0
 800a846:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	68ba      	ldr	r2, [r7, #8]
 800a84c:	4413      	add	r3, r2
 800a84e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a850:	2208      	movs	r2, #8
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	1a9b      	subs	r3, r3, r2
 800a856:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f023 0307 	bic.w	r3, r3, #7
 800a85e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	4a15      	ldr	r2, [pc, #84]	; (800a8b8 <prvHeapInit+0xb4>)
 800a864:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a866:	4b14      	ldr	r3, [pc, #80]	; (800a8b8 <prvHeapInit+0xb4>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	2200      	movs	r2, #0
 800a86c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a86e:	4b12      	ldr	r3, [pc, #72]	; (800a8b8 <prvHeapInit+0xb4>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	2200      	movs	r2, #0
 800a874:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	68fa      	ldr	r2, [r7, #12]
 800a87e:	1ad2      	subs	r2, r2, r3
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a884:	4b0c      	ldr	r3, [pc, #48]	; (800a8b8 <prvHeapInit+0xb4>)
 800a886:	681a      	ldr	r2, [r3, #0]
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	685b      	ldr	r3, [r3, #4]
 800a890:	4a0a      	ldr	r2, [pc, #40]	; (800a8bc <prvHeapInit+0xb8>)
 800a892:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	4a09      	ldr	r2, [pc, #36]	; (800a8c0 <prvHeapInit+0xbc>)
 800a89a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a89c:	4b09      	ldr	r3, [pc, #36]	; (800a8c4 <prvHeapInit+0xc0>)
 800a89e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a8a2:	601a      	str	r2, [r3, #0]
}
 800a8a4:	bf00      	nop
 800a8a6:	3714      	adds	r7, #20
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ae:	4770      	bx	lr
 800a8b0:	20001698 	.word	0x20001698
 800a8b4:	20005298 	.word	0x20005298
 800a8b8:	200052a0 	.word	0x200052a0
 800a8bc:	200052a8 	.word	0x200052a8
 800a8c0:	200052a4 	.word	0x200052a4
 800a8c4:	200052b4 	.word	0x200052b4

0800a8c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b085      	sub	sp, #20
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a8d0:	4b28      	ldr	r3, [pc, #160]	; (800a974 <prvInsertBlockIntoFreeList+0xac>)
 800a8d2:	60fb      	str	r3, [r7, #12]
 800a8d4:	e002      	b.n	800a8dc <prvInsertBlockIntoFreeList+0x14>
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	60fb      	str	r3, [r7, #12]
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	687a      	ldr	r2, [r7, #4]
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d8f7      	bhi.n	800a8d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	68ba      	ldr	r2, [r7, #8]
 800a8f0:	4413      	add	r3, r2
 800a8f2:	687a      	ldr	r2, [r7, #4]
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	d108      	bne.n	800a90a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	685a      	ldr	r2, [r3, #4]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	441a      	add	r2, r3
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	685b      	ldr	r3, [r3, #4]
 800a912:	68ba      	ldr	r2, [r7, #8]
 800a914:	441a      	add	r2, r3
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	429a      	cmp	r2, r3
 800a91c:	d118      	bne.n	800a950 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681a      	ldr	r2, [r3, #0]
 800a922:	4b15      	ldr	r3, [pc, #84]	; (800a978 <prvInsertBlockIntoFreeList+0xb0>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	429a      	cmp	r2, r3
 800a928:	d00d      	beq.n	800a946 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	685a      	ldr	r2, [r3, #4]
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	685b      	ldr	r3, [r3, #4]
 800a934:	441a      	add	r2, r3
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	681a      	ldr	r2, [r3, #0]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	601a      	str	r2, [r3, #0]
 800a944:	e008      	b.n	800a958 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a946:	4b0c      	ldr	r3, [pc, #48]	; (800a978 <prvInsertBlockIntoFreeList+0xb0>)
 800a948:	681a      	ldr	r2, [r3, #0]
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	601a      	str	r2, [r3, #0]
 800a94e:	e003      	b.n	800a958 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681a      	ldr	r2, [r3, #0]
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a958:	68fa      	ldr	r2, [r7, #12]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d002      	beq.n	800a966 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	687a      	ldr	r2, [r7, #4]
 800a964:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a966:	bf00      	nop
 800a968:	3714      	adds	r7, #20
 800a96a:	46bd      	mov	sp, r7
 800a96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a970:	4770      	bx	lr
 800a972:	bf00      	nop
 800a974:	20005298 	.word	0x20005298
 800a978:	200052a0 	.word	0x200052a0

0800a97c <__cxa_pure_virtual>:
 800a97c:	b508      	push	{r3, lr}
 800a97e:	f000 f80d 	bl	800a99c <_ZSt9terminatev>

0800a982 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800a982:	b508      	push	{r3, lr}
 800a984:	4780      	blx	r0
 800a986:	f000 f80e 	bl	800a9a6 <abort>
	...

0800a98c <_ZSt13get_terminatev>:
 800a98c:	4b02      	ldr	r3, [pc, #8]	; (800a998 <_ZSt13get_terminatev+0xc>)
 800a98e:	6818      	ldr	r0, [r3, #0]
 800a990:	f3bf 8f5b 	dmb	ish
 800a994:	4770      	bx	lr
 800a996:	bf00      	nop
 800a998:	20000018 	.word	0x20000018

0800a99c <_ZSt9terminatev>:
 800a99c:	b508      	push	{r3, lr}
 800a99e:	f7ff fff5 	bl	800a98c <_ZSt13get_terminatev>
 800a9a2:	f7ff ffee 	bl	800a982 <_ZN10__cxxabiv111__terminateEPFvvE>

0800a9a6 <abort>:
 800a9a6:	b508      	push	{r3, lr}
 800a9a8:	2006      	movs	r0, #6
 800a9aa:	f000 f983 	bl	800acb4 <raise>
 800a9ae:	2001      	movs	r0, #1
 800a9b0:	f7f9 fd96 	bl	80044e0 <_exit>

0800a9b4 <__errno>:
 800a9b4:	4b01      	ldr	r3, [pc, #4]	; (800a9bc <__errno+0x8>)
 800a9b6:	6818      	ldr	r0, [r3, #0]
 800a9b8:	4770      	bx	lr
 800a9ba:	bf00      	nop
 800a9bc:	2000001c 	.word	0x2000001c

0800a9c0 <__libc_init_array>:
 800a9c0:	b570      	push	{r4, r5, r6, lr}
 800a9c2:	4d0d      	ldr	r5, [pc, #52]	; (800a9f8 <__libc_init_array+0x38>)
 800a9c4:	4c0d      	ldr	r4, [pc, #52]	; (800a9fc <__libc_init_array+0x3c>)
 800a9c6:	1b64      	subs	r4, r4, r5
 800a9c8:	10a4      	asrs	r4, r4, #2
 800a9ca:	2600      	movs	r6, #0
 800a9cc:	42a6      	cmp	r6, r4
 800a9ce:	d109      	bne.n	800a9e4 <__libc_init_array+0x24>
 800a9d0:	4d0b      	ldr	r5, [pc, #44]	; (800aa00 <__libc_init_array+0x40>)
 800a9d2:	4c0c      	ldr	r4, [pc, #48]	; (800aa04 <__libc_init_array+0x44>)
 800a9d4:	f000 fa1a 	bl	800ae0c <_init>
 800a9d8:	1b64      	subs	r4, r4, r5
 800a9da:	10a4      	asrs	r4, r4, #2
 800a9dc:	2600      	movs	r6, #0
 800a9de:	42a6      	cmp	r6, r4
 800a9e0:	d105      	bne.n	800a9ee <__libc_init_array+0x2e>
 800a9e2:	bd70      	pop	{r4, r5, r6, pc}
 800a9e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9e8:	4798      	blx	r3
 800a9ea:	3601      	adds	r6, #1
 800a9ec:	e7ee      	b.n	800a9cc <__libc_init_array+0xc>
 800a9ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9f2:	4798      	blx	r3
 800a9f4:	3601      	adds	r6, #1
 800a9f6:	e7f2      	b.n	800a9de <__libc_init_array+0x1e>
 800a9f8:	0800b258 	.word	0x0800b258
 800a9fc:	0800b258 	.word	0x0800b258
 800aa00:	0800b258 	.word	0x0800b258
 800aa04:	0800b260 	.word	0x0800b260

0800aa08 <__retarget_lock_acquire_recursive>:
 800aa08:	4770      	bx	lr

0800aa0a <__retarget_lock_release_recursive>:
 800aa0a:	4770      	bx	lr

0800aa0c <memcpy>:
 800aa0c:	440a      	add	r2, r1
 800aa0e:	4291      	cmp	r1, r2
 800aa10:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa14:	d100      	bne.n	800aa18 <memcpy+0xc>
 800aa16:	4770      	bx	lr
 800aa18:	b510      	push	{r4, lr}
 800aa1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa22:	4291      	cmp	r1, r2
 800aa24:	d1f9      	bne.n	800aa1a <memcpy+0xe>
 800aa26:	bd10      	pop	{r4, pc}

0800aa28 <memset>:
 800aa28:	4402      	add	r2, r0
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d100      	bne.n	800aa32 <memset+0xa>
 800aa30:	4770      	bx	lr
 800aa32:	f803 1b01 	strb.w	r1, [r3], #1
 800aa36:	e7f9      	b.n	800aa2c <memset+0x4>

0800aa38 <sbrk_aligned>:
 800aa38:	b570      	push	{r4, r5, r6, lr}
 800aa3a:	4e0e      	ldr	r6, [pc, #56]	; (800aa74 <sbrk_aligned+0x3c>)
 800aa3c:	460c      	mov	r4, r1
 800aa3e:	6831      	ldr	r1, [r6, #0]
 800aa40:	4605      	mov	r5, r0
 800aa42:	b911      	cbnz	r1, 800aa4a <sbrk_aligned+0x12>
 800aa44:	f000 f8fe 	bl	800ac44 <_sbrk_r>
 800aa48:	6030      	str	r0, [r6, #0]
 800aa4a:	4621      	mov	r1, r4
 800aa4c:	4628      	mov	r0, r5
 800aa4e:	f000 f8f9 	bl	800ac44 <_sbrk_r>
 800aa52:	1c43      	adds	r3, r0, #1
 800aa54:	d00a      	beq.n	800aa6c <sbrk_aligned+0x34>
 800aa56:	1cc4      	adds	r4, r0, #3
 800aa58:	f024 0403 	bic.w	r4, r4, #3
 800aa5c:	42a0      	cmp	r0, r4
 800aa5e:	d007      	beq.n	800aa70 <sbrk_aligned+0x38>
 800aa60:	1a21      	subs	r1, r4, r0
 800aa62:	4628      	mov	r0, r5
 800aa64:	f000 f8ee 	bl	800ac44 <_sbrk_r>
 800aa68:	3001      	adds	r0, #1
 800aa6a:	d101      	bne.n	800aa70 <sbrk_aligned+0x38>
 800aa6c:	f04f 34ff 	mov.w	r4, #4294967295
 800aa70:	4620      	mov	r0, r4
 800aa72:	bd70      	pop	{r4, r5, r6, pc}
 800aa74:	200052c0 	.word	0x200052c0

0800aa78 <_malloc_r>:
 800aa78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa7c:	1ccd      	adds	r5, r1, #3
 800aa7e:	f025 0503 	bic.w	r5, r5, #3
 800aa82:	3508      	adds	r5, #8
 800aa84:	2d0c      	cmp	r5, #12
 800aa86:	bf38      	it	cc
 800aa88:	250c      	movcc	r5, #12
 800aa8a:	2d00      	cmp	r5, #0
 800aa8c:	4607      	mov	r7, r0
 800aa8e:	db01      	blt.n	800aa94 <_malloc_r+0x1c>
 800aa90:	42a9      	cmp	r1, r5
 800aa92:	d905      	bls.n	800aaa0 <_malloc_r+0x28>
 800aa94:	230c      	movs	r3, #12
 800aa96:	603b      	str	r3, [r7, #0]
 800aa98:	2600      	movs	r6, #0
 800aa9a:	4630      	mov	r0, r6
 800aa9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aaa0:	4e2e      	ldr	r6, [pc, #184]	; (800ab5c <_malloc_r+0xe4>)
 800aaa2:	f000 f923 	bl	800acec <__malloc_lock>
 800aaa6:	6833      	ldr	r3, [r6, #0]
 800aaa8:	461c      	mov	r4, r3
 800aaaa:	bb34      	cbnz	r4, 800aafa <_malloc_r+0x82>
 800aaac:	4629      	mov	r1, r5
 800aaae:	4638      	mov	r0, r7
 800aab0:	f7ff ffc2 	bl	800aa38 <sbrk_aligned>
 800aab4:	1c43      	adds	r3, r0, #1
 800aab6:	4604      	mov	r4, r0
 800aab8:	d14d      	bne.n	800ab56 <_malloc_r+0xde>
 800aaba:	6834      	ldr	r4, [r6, #0]
 800aabc:	4626      	mov	r6, r4
 800aabe:	2e00      	cmp	r6, #0
 800aac0:	d140      	bne.n	800ab44 <_malloc_r+0xcc>
 800aac2:	6823      	ldr	r3, [r4, #0]
 800aac4:	4631      	mov	r1, r6
 800aac6:	4638      	mov	r0, r7
 800aac8:	eb04 0803 	add.w	r8, r4, r3
 800aacc:	f000 f8ba 	bl	800ac44 <_sbrk_r>
 800aad0:	4580      	cmp	r8, r0
 800aad2:	d13a      	bne.n	800ab4a <_malloc_r+0xd2>
 800aad4:	6821      	ldr	r1, [r4, #0]
 800aad6:	3503      	adds	r5, #3
 800aad8:	1a6d      	subs	r5, r5, r1
 800aada:	f025 0503 	bic.w	r5, r5, #3
 800aade:	3508      	adds	r5, #8
 800aae0:	2d0c      	cmp	r5, #12
 800aae2:	bf38      	it	cc
 800aae4:	250c      	movcc	r5, #12
 800aae6:	4629      	mov	r1, r5
 800aae8:	4638      	mov	r0, r7
 800aaea:	f7ff ffa5 	bl	800aa38 <sbrk_aligned>
 800aaee:	3001      	adds	r0, #1
 800aaf0:	d02b      	beq.n	800ab4a <_malloc_r+0xd2>
 800aaf2:	6823      	ldr	r3, [r4, #0]
 800aaf4:	442b      	add	r3, r5
 800aaf6:	6023      	str	r3, [r4, #0]
 800aaf8:	e00e      	b.n	800ab18 <_malloc_r+0xa0>
 800aafa:	6822      	ldr	r2, [r4, #0]
 800aafc:	1b52      	subs	r2, r2, r5
 800aafe:	d41e      	bmi.n	800ab3e <_malloc_r+0xc6>
 800ab00:	2a0b      	cmp	r2, #11
 800ab02:	d916      	bls.n	800ab32 <_malloc_r+0xba>
 800ab04:	1961      	adds	r1, r4, r5
 800ab06:	42a3      	cmp	r3, r4
 800ab08:	6025      	str	r5, [r4, #0]
 800ab0a:	bf18      	it	ne
 800ab0c:	6059      	strne	r1, [r3, #4]
 800ab0e:	6863      	ldr	r3, [r4, #4]
 800ab10:	bf08      	it	eq
 800ab12:	6031      	streq	r1, [r6, #0]
 800ab14:	5162      	str	r2, [r4, r5]
 800ab16:	604b      	str	r3, [r1, #4]
 800ab18:	4638      	mov	r0, r7
 800ab1a:	f104 060b 	add.w	r6, r4, #11
 800ab1e:	f000 f8eb 	bl	800acf8 <__malloc_unlock>
 800ab22:	f026 0607 	bic.w	r6, r6, #7
 800ab26:	1d23      	adds	r3, r4, #4
 800ab28:	1af2      	subs	r2, r6, r3
 800ab2a:	d0b6      	beq.n	800aa9a <_malloc_r+0x22>
 800ab2c:	1b9b      	subs	r3, r3, r6
 800ab2e:	50a3      	str	r3, [r4, r2]
 800ab30:	e7b3      	b.n	800aa9a <_malloc_r+0x22>
 800ab32:	6862      	ldr	r2, [r4, #4]
 800ab34:	42a3      	cmp	r3, r4
 800ab36:	bf0c      	ite	eq
 800ab38:	6032      	streq	r2, [r6, #0]
 800ab3a:	605a      	strne	r2, [r3, #4]
 800ab3c:	e7ec      	b.n	800ab18 <_malloc_r+0xa0>
 800ab3e:	4623      	mov	r3, r4
 800ab40:	6864      	ldr	r4, [r4, #4]
 800ab42:	e7b2      	b.n	800aaaa <_malloc_r+0x32>
 800ab44:	4634      	mov	r4, r6
 800ab46:	6876      	ldr	r6, [r6, #4]
 800ab48:	e7b9      	b.n	800aabe <_malloc_r+0x46>
 800ab4a:	230c      	movs	r3, #12
 800ab4c:	603b      	str	r3, [r7, #0]
 800ab4e:	4638      	mov	r0, r7
 800ab50:	f000 f8d2 	bl	800acf8 <__malloc_unlock>
 800ab54:	e7a1      	b.n	800aa9a <_malloc_r+0x22>
 800ab56:	6025      	str	r5, [r4, #0]
 800ab58:	e7de      	b.n	800ab18 <_malloc_r+0xa0>
 800ab5a:	bf00      	nop
 800ab5c:	200052bc 	.word	0x200052bc

0800ab60 <realloc>:
 800ab60:	4b02      	ldr	r3, [pc, #8]	; (800ab6c <realloc+0xc>)
 800ab62:	460a      	mov	r2, r1
 800ab64:	4601      	mov	r1, r0
 800ab66:	6818      	ldr	r0, [r3, #0]
 800ab68:	f000 b918 	b.w	800ad9c <_realloc_r>
 800ab6c:	2000001c 	.word	0x2000001c

0800ab70 <cleanup_glue>:
 800ab70:	b538      	push	{r3, r4, r5, lr}
 800ab72:	460c      	mov	r4, r1
 800ab74:	6809      	ldr	r1, [r1, #0]
 800ab76:	4605      	mov	r5, r0
 800ab78:	b109      	cbz	r1, 800ab7e <cleanup_glue+0xe>
 800ab7a:	f7ff fff9 	bl	800ab70 <cleanup_glue>
 800ab7e:	4621      	mov	r1, r4
 800ab80:	4628      	mov	r0, r5
 800ab82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab86:	f000 b8bd 	b.w	800ad04 <_free_r>
	...

0800ab8c <_reclaim_reent>:
 800ab8c:	4b2c      	ldr	r3, [pc, #176]	; (800ac40 <_reclaim_reent+0xb4>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	4283      	cmp	r3, r0
 800ab92:	b570      	push	{r4, r5, r6, lr}
 800ab94:	4604      	mov	r4, r0
 800ab96:	d051      	beq.n	800ac3c <_reclaim_reent+0xb0>
 800ab98:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ab9a:	b143      	cbz	r3, 800abae <_reclaim_reent+0x22>
 800ab9c:	68db      	ldr	r3, [r3, #12]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d14a      	bne.n	800ac38 <_reclaim_reent+0xac>
 800aba2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aba4:	6819      	ldr	r1, [r3, #0]
 800aba6:	b111      	cbz	r1, 800abae <_reclaim_reent+0x22>
 800aba8:	4620      	mov	r0, r4
 800abaa:	f000 f8ab 	bl	800ad04 <_free_r>
 800abae:	6961      	ldr	r1, [r4, #20]
 800abb0:	b111      	cbz	r1, 800abb8 <_reclaim_reent+0x2c>
 800abb2:	4620      	mov	r0, r4
 800abb4:	f000 f8a6 	bl	800ad04 <_free_r>
 800abb8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800abba:	b111      	cbz	r1, 800abc2 <_reclaim_reent+0x36>
 800abbc:	4620      	mov	r0, r4
 800abbe:	f000 f8a1 	bl	800ad04 <_free_r>
 800abc2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800abc4:	b111      	cbz	r1, 800abcc <_reclaim_reent+0x40>
 800abc6:	4620      	mov	r0, r4
 800abc8:	f000 f89c 	bl	800ad04 <_free_r>
 800abcc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800abce:	b111      	cbz	r1, 800abd6 <_reclaim_reent+0x4a>
 800abd0:	4620      	mov	r0, r4
 800abd2:	f000 f897 	bl	800ad04 <_free_r>
 800abd6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800abd8:	b111      	cbz	r1, 800abe0 <_reclaim_reent+0x54>
 800abda:	4620      	mov	r0, r4
 800abdc:	f000 f892 	bl	800ad04 <_free_r>
 800abe0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800abe2:	b111      	cbz	r1, 800abea <_reclaim_reent+0x5e>
 800abe4:	4620      	mov	r0, r4
 800abe6:	f000 f88d 	bl	800ad04 <_free_r>
 800abea:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800abec:	b111      	cbz	r1, 800abf4 <_reclaim_reent+0x68>
 800abee:	4620      	mov	r0, r4
 800abf0:	f000 f888 	bl	800ad04 <_free_r>
 800abf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abf6:	b111      	cbz	r1, 800abfe <_reclaim_reent+0x72>
 800abf8:	4620      	mov	r0, r4
 800abfa:	f000 f883 	bl	800ad04 <_free_r>
 800abfe:	69a3      	ldr	r3, [r4, #24]
 800ac00:	b1e3      	cbz	r3, 800ac3c <_reclaim_reent+0xb0>
 800ac02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ac04:	4620      	mov	r0, r4
 800ac06:	4798      	blx	r3
 800ac08:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ac0a:	b1b9      	cbz	r1, 800ac3c <_reclaim_reent+0xb0>
 800ac0c:	4620      	mov	r0, r4
 800ac0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ac12:	f7ff bfad 	b.w	800ab70 <cleanup_glue>
 800ac16:	5949      	ldr	r1, [r1, r5]
 800ac18:	b941      	cbnz	r1, 800ac2c <_reclaim_reent+0xa0>
 800ac1a:	3504      	adds	r5, #4
 800ac1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac1e:	2d80      	cmp	r5, #128	; 0x80
 800ac20:	68d9      	ldr	r1, [r3, #12]
 800ac22:	d1f8      	bne.n	800ac16 <_reclaim_reent+0x8a>
 800ac24:	4620      	mov	r0, r4
 800ac26:	f000 f86d 	bl	800ad04 <_free_r>
 800ac2a:	e7ba      	b.n	800aba2 <_reclaim_reent+0x16>
 800ac2c:	680e      	ldr	r6, [r1, #0]
 800ac2e:	4620      	mov	r0, r4
 800ac30:	f000 f868 	bl	800ad04 <_free_r>
 800ac34:	4631      	mov	r1, r6
 800ac36:	e7ef      	b.n	800ac18 <_reclaim_reent+0x8c>
 800ac38:	2500      	movs	r5, #0
 800ac3a:	e7ef      	b.n	800ac1c <_reclaim_reent+0x90>
 800ac3c:	bd70      	pop	{r4, r5, r6, pc}
 800ac3e:	bf00      	nop
 800ac40:	2000001c 	.word	0x2000001c

0800ac44 <_sbrk_r>:
 800ac44:	b538      	push	{r3, r4, r5, lr}
 800ac46:	4d06      	ldr	r5, [pc, #24]	; (800ac60 <_sbrk_r+0x1c>)
 800ac48:	2300      	movs	r3, #0
 800ac4a:	4604      	mov	r4, r0
 800ac4c:	4608      	mov	r0, r1
 800ac4e:	602b      	str	r3, [r5, #0]
 800ac50:	f7f9 fc50 	bl	80044f4 <_sbrk>
 800ac54:	1c43      	adds	r3, r0, #1
 800ac56:	d102      	bne.n	800ac5e <_sbrk_r+0x1a>
 800ac58:	682b      	ldr	r3, [r5, #0]
 800ac5a:	b103      	cbz	r3, 800ac5e <_sbrk_r+0x1a>
 800ac5c:	6023      	str	r3, [r4, #0]
 800ac5e:	bd38      	pop	{r3, r4, r5, pc}
 800ac60:	200052c4 	.word	0x200052c4

0800ac64 <_raise_r>:
 800ac64:	291f      	cmp	r1, #31
 800ac66:	b538      	push	{r3, r4, r5, lr}
 800ac68:	4604      	mov	r4, r0
 800ac6a:	460d      	mov	r5, r1
 800ac6c:	d904      	bls.n	800ac78 <_raise_r+0x14>
 800ac6e:	2316      	movs	r3, #22
 800ac70:	6003      	str	r3, [r0, #0]
 800ac72:	f04f 30ff 	mov.w	r0, #4294967295
 800ac76:	bd38      	pop	{r3, r4, r5, pc}
 800ac78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ac7a:	b112      	cbz	r2, 800ac82 <_raise_r+0x1e>
 800ac7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ac80:	b94b      	cbnz	r3, 800ac96 <_raise_r+0x32>
 800ac82:	4620      	mov	r0, r4
 800ac84:	f000 f830 	bl	800ace8 <_getpid_r>
 800ac88:	462a      	mov	r2, r5
 800ac8a:	4601      	mov	r1, r0
 800ac8c:	4620      	mov	r0, r4
 800ac8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac92:	f000 b817 	b.w	800acc4 <_kill_r>
 800ac96:	2b01      	cmp	r3, #1
 800ac98:	d00a      	beq.n	800acb0 <_raise_r+0x4c>
 800ac9a:	1c59      	adds	r1, r3, #1
 800ac9c:	d103      	bne.n	800aca6 <_raise_r+0x42>
 800ac9e:	2316      	movs	r3, #22
 800aca0:	6003      	str	r3, [r0, #0]
 800aca2:	2001      	movs	r0, #1
 800aca4:	e7e7      	b.n	800ac76 <_raise_r+0x12>
 800aca6:	2400      	movs	r4, #0
 800aca8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800acac:	4628      	mov	r0, r5
 800acae:	4798      	blx	r3
 800acb0:	2000      	movs	r0, #0
 800acb2:	e7e0      	b.n	800ac76 <_raise_r+0x12>

0800acb4 <raise>:
 800acb4:	4b02      	ldr	r3, [pc, #8]	; (800acc0 <raise+0xc>)
 800acb6:	4601      	mov	r1, r0
 800acb8:	6818      	ldr	r0, [r3, #0]
 800acba:	f7ff bfd3 	b.w	800ac64 <_raise_r>
 800acbe:	bf00      	nop
 800acc0:	2000001c 	.word	0x2000001c

0800acc4 <_kill_r>:
 800acc4:	b538      	push	{r3, r4, r5, lr}
 800acc6:	4d07      	ldr	r5, [pc, #28]	; (800ace4 <_kill_r+0x20>)
 800acc8:	2300      	movs	r3, #0
 800acca:	4604      	mov	r4, r0
 800accc:	4608      	mov	r0, r1
 800acce:	4611      	mov	r1, r2
 800acd0:	602b      	str	r3, [r5, #0]
 800acd2:	f7f9 fbf5 	bl	80044c0 <_kill>
 800acd6:	1c43      	adds	r3, r0, #1
 800acd8:	d102      	bne.n	800ace0 <_kill_r+0x1c>
 800acda:	682b      	ldr	r3, [r5, #0]
 800acdc:	b103      	cbz	r3, 800ace0 <_kill_r+0x1c>
 800acde:	6023      	str	r3, [r4, #0]
 800ace0:	bd38      	pop	{r3, r4, r5, pc}
 800ace2:	bf00      	nop
 800ace4:	200052c4 	.word	0x200052c4

0800ace8 <_getpid_r>:
 800ace8:	f7f9 bbe2 	b.w	80044b0 <_getpid>

0800acec <__malloc_lock>:
 800acec:	4801      	ldr	r0, [pc, #4]	; (800acf4 <__malloc_lock+0x8>)
 800acee:	f7ff be8b 	b.w	800aa08 <__retarget_lock_acquire_recursive>
 800acf2:	bf00      	nop
 800acf4:	200052b8 	.word	0x200052b8

0800acf8 <__malloc_unlock>:
 800acf8:	4801      	ldr	r0, [pc, #4]	; (800ad00 <__malloc_unlock+0x8>)
 800acfa:	f7ff be86 	b.w	800aa0a <__retarget_lock_release_recursive>
 800acfe:	bf00      	nop
 800ad00:	200052b8 	.word	0x200052b8

0800ad04 <_free_r>:
 800ad04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad06:	2900      	cmp	r1, #0
 800ad08:	d044      	beq.n	800ad94 <_free_r+0x90>
 800ad0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad0e:	9001      	str	r0, [sp, #4]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	f1a1 0404 	sub.w	r4, r1, #4
 800ad16:	bfb8      	it	lt
 800ad18:	18e4      	addlt	r4, r4, r3
 800ad1a:	f7ff ffe7 	bl	800acec <__malloc_lock>
 800ad1e:	4a1e      	ldr	r2, [pc, #120]	; (800ad98 <_free_r+0x94>)
 800ad20:	9801      	ldr	r0, [sp, #4]
 800ad22:	6813      	ldr	r3, [r2, #0]
 800ad24:	b933      	cbnz	r3, 800ad34 <_free_r+0x30>
 800ad26:	6063      	str	r3, [r4, #4]
 800ad28:	6014      	str	r4, [r2, #0]
 800ad2a:	b003      	add	sp, #12
 800ad2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad30:	f7ff bfe2 	b.w	800acf8 <__malloc_unlock>
 800ad34:	42a3      	cmp	r3, r4
 800ad36:	d908      	bls.n	800ad4a <_free_r+0x46>
 800ad38:	6825      	ldr	r5, [r4, #0]
 800ad3a:	1961      	adds	r1, r4, r5
 800ad3c:	428b      	cmp	r3, r1
 800ad3e:	bf01      	itttt	eq
 800ad40:	6819      	ldreq	r1, [r3, #0]
 800ad42:	685b      	ldreq	r3, [r3, #4]
 800ad44:	1949      	addeq	r1, r1, r5
 800ad46:	6021      	streq	r1, [r4, #0]
 800ad48:	e7ed      	b.n	800ad26 <_free_r+0x22>
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	685b      	ldr	r3, [r3, #4]
 800ad4e:	b10b      	cbz	r3, 800ad54 <_free_r+0x50>
 800ad50:	42a3      	cmp	r3, r4
 800ad52:	d9fa      	bls.n	800ad4a <_free_r+0x46>
 800ad54:	6811      	ldr	r1, [r2, #0]
 800ad56:	1855      	adds	r5, r2, r1
 800ad58:	42a5      	cmp	r5, r4
 800ad5a:	d10b      	bne.n	800ad74 <_free_r+0x70>
 800ad5c:	6824      	ldr	r4, [r4, #0]
 800ad5e:	4421      	add	r1, r4
 800ad60:	1854      	adds	r4, r2, r1
 800ad62:	42a3      	cmp	r3, r4
 800ad64:	6011      	str	r1, [r2, #0]
 800ad66:	d1e0      	bne.n	800ad2a <_free_r+0x26>
 800ad68:	681c      	ldr	r4, [r3, #0]
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	6053      	str	r3, [r2, #4]
 800ad6e:	4421      	add	r1, r4
 800ad70:	6011      	str	r1, [r2, #0]
 800ad72:	e7da      	b.n	800ad2a <_free_r+0x26>
 800ad74:	d902      	bls.n	800ad7c <_free_r+0x78>
 800ad76:	230c      	movs	r3, #12
 800ad78:	6003      	str	r3, [r0, #0]
 800ad7a:	e7d6      	b.n	800ad2a <_free_r+0x26>
 800ad7c:	6825      	ldr	r5, [r4, #0]
 800ad7e:	1961      	adds	r1, r4, r5
 800ad80:	428b      	cmp	r3, r1
 800ad82:	bf04      	itt	eq
 800ad84:	6819      	ldreq	r1, [r3, #0]
 800ad86:	685b      	ldreq	r3, [r3, #4]
 800ad88:	6063      	str	r3, [r4, #4]
 800ad8a:	bf04      	itt	eq
 800ad8c:	1949      	addeq	r1, r1, r5
 800ad8e:	6021      	streq	r1, [r4, #0]
 800ad90:	6054      	str	r4, [r2, #4]
 800ad92:	e7ca      	b.n	800ad2a <_free_r+0x26>
 800ad94:	b003      	add	sp, #12
 800ad96:	bd30      	pop	{r4, r5, pc}
 800ad98:	200052bc 	.word	0x200052bc

0800ad9c <_realloc_r>:
 800ad9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ada0:	4680      	mov	r8, r0
 800ada2:	4614      	mov	r4, r2
 800ada4:	460e      	mov	r6, r1
 800ada6:	b921      	cbnz	r1, 800adb2 <_realloc_r+0x16>
 800ada8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adac:	4611      	mov	r1, r2
 800adae:	f7ff be63 	b.w	800aa78 <_malloc_r>
 800adb2:	b92a      	cbnz	r2, 800adc0 <_realloc_r+0x24>
 800adb4:	f7ff ffa6 	bl	800ad04 <_free_r>
 800adb8:	4625      	mov	r5, r4
 800adba:	4628      	mov	r0, r5
 800adbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adc0:	f000 f81b 	bl	800adfa <_malloc_usable_size_r>
 800adc4:	4284      	cmp	r4, r0
 800adc6:	4607      	mov	r7, r0
 800adc8:	d802      	bhi.n	800add0 <_realloc_r+0x34>
 800adca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800adce:	d812      	bhi.n	800adf6 <_realloc_r+0x5a>
 800add0:	4621      	mov	r1, r4
 800add2:	4640      	mov	r0, r8
 800add4:	f7ff fe50 	bl	800aa78 <_malloc_r>
 800add8:	4605      	mov	r5, r0
 800adda:	2800      	cmp	r0, #0
 800addc:	d0ed      	beq.n	800adba <_realloc_r+0x1e>
 800adde:	42bc      	cmp	r4, r7
 800ade0:	4622      	mov	r2, r4
 800ade2:	4631      	mov	r1, r6
 800ade4:	bf28      	it	cs
 800ade6:	463a      	movcs	r2, r7
 800ade8:	f7ff fe10 	bl	800aa0c <memcpy>
 800adec:	4631      	mov	r1, r6
 800adee:	4640      	mov	r0, r8
 800adf0:	f7ff ff88 	bl	800ad04 <_free_r>
 800adf4:	e7e1      	b.n	800adba <_realloc_r+0x1e>
 800adf6:	4635      	mov	r5, r6
 800adf8:	e7df      	b.n	800adba <_realloc_r+0x1e>

0800adfa <_malloc_usable_size_r>:
 800adfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adfe:	1f18      	subs	r0, r3, #4
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	bfbc      	itt	lt
 800ae04:	580b      	ldrlt	r3, [r1, r0]
 800ae06:	18c0      	addlt	r0, r0, r3
 800ae08:	4770      	bx	lr
	...

0800ae0c <_init>:
 800ae0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae0e:	bf00      	nop
 800ae10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae12:	bc08      	pop	{r3}
 800ae14:	469e      	mov	lr, r3
 800ae16:	4770      	bx	lr

0800ae18 <_fini>:
 800ae18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae1a:	bf00      	nop
 800ae1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae1e:	bc08      	pop	{r3}
 800ae20:	469e      	mov	lr, r3
 800ae22:	4770      	bx	lr
