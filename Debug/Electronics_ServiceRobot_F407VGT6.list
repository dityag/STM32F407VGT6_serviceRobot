
Electronics_ServiceRobot_F407VGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb5c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d10  0800ecf0  0800ecf0  0001ecf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fa00  0800fa00  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  0800fa00  0800fa00  0001fa00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fa08  0800fa08  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800fa08  0800fa08  0001fa08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fa14  0800fa14  0001fa14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800fa18  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002009c  2**0
                  CONTENTS
 10 .bss          00006c14  200000a0  200000a0  000200a0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20006cb4  20006cb4  000200a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026ad9  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b97  00000000  00000000  00046ba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001970  00000000  00000000  0004b740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017d0  00000000  00000000  0004d0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026758  00000000  00000000  0004e880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cc34  00000000  00000000  00074fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd6da  00000000  00000000  00091c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016f2e6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000075b4  00000000  00000000  0016f338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a0 	.word	0x200000a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ecd4 	.word	0x0800ecd4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	0800ecd4 	.word	0x0800ecd4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_d2iz>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a94:	d215      	bcs.n	8000ac2 <__aeabi_d2iz+0x36>
 8000a96:	d511      	bpl.n	8000abc <__aeabi_d2iz+0x30>
 8000a98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa0:	d912      	bls.n	8000ac8 <__aeabi_d2iz+0x3c>
 8000aa2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ab2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	4240      	negne	r0, r0
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ac6:	d105      	bne.n	8000ad4 <__aeabi_d2iz+0x48>
 8000ac8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	bf08      	it	eq
 8000ace:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ad2:	4770      	bx	lr
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b90:	f000 b974 	b.w	8000e7c <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f806 	bl	8000bac <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__udivmoddi4>:
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	9d08      	ldr	r5, [sp, #32]
 8000bb2:	4604      	mov	r4, r0
 8000bb4:	468e      	mov	lr, r1
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d14d      	bne.n	8000c56 <__udivmoddi4+0xaa>
 8000bba:	428a      	cmp	r2, r1
 8000bbc:	4694      	mov	ip, r2
 8000bbe:	d969      	bls.n	8000c94 <__udivmoddi4+0xe8>
 8000bc0:	fab2 f282 	clz	r2, r2
 8000bc4:	b152      	cbz	r2, 8000bdc <__udivmoddi4+0x30>
 8000bc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bca:	f1c2 0120 	rsb	r1, r2, #32
 8000bce:	fa20 f101 	lsr.w	r1, r0, r1
 8000bd2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd6:	ea41 0e03 	orr.w	lr, r1, r3
 8000bda:	4094      	lsls	r4, r2
 8000bdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000be0:	0c21      	lsrs	r1, r4, #16
 8000be2:	fbbe f6f8 	udiv	r6, lr, r8
 8000be6:	fa1f f78c 	uxth.w	r7, ip
 8000bea:	fb08 e316 	mls	r3, r8, r6, lr
 8000bee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bf2:	fb06 f107 	mul.w	r1, r6, r7
 8000bf6:	4299      	cmp	r1, r3
 8000bf8:	d90a      	bls.n	8000c10 <__udivmoddi4+0x64>
 8000bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c02:	f080 811f 	bcs.w	8000e44 <__udivmoddi4+0x298>
 8000c06:	4299      	cmp	r1, r3
 8000c08:	f240 811c 	bls.w	8000e44 <__udivmoddi4+0x298>
 8000c0c:	3e02      	subs	r6, #2
 8000c0e:	4463      	add	r3, ip
 8000c10:	1a5b      	subs	r3, r3, r1
 8000c12:	b2a4      	uxth	r4, r4
 8000c14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c18:	fb08 3310 	mls	r3, r8, r0, r3
 8000c1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c20:	fb00 f707 	mul.w	r7, r0, r7
 8000c24:	42a7      	cmp	r7, r4
 8000c26:	d90a      	bls.n	8000c3e <__udivmoddi4+0x92>
 8000c28:	eb1c 0404 	adds.w	r4, ip, r4
 8000c2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c30:	f080 810a 	bcs.w	8000e48 <__udivmoddi4+0x29c>
 8000c34:	42a7      	cmp	r7, r4
 8000c36:	f240 8107 	bls.w	8000e48 <__udivmoddi4+0x29c>
 8000c3a:	4464      	add	r4, ip
 8000c3c:	3802      	subs	r0, #2
 8000c3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c42:	1be4      	subs	r4, r4, r7
 8000c44:	2600      	movs	r6, #0
 8000c46:	b11d      	cbz	r5, 8000c50 <__udivmoddi4+0xa4>
 8000c48:	40d4      	lsrs	r4, r2
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c50:	4631      	mov	r1, r6
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d909      	bls.n	8000c6e <__udivmoddi4+0xc2>
 8000c5a:	2d00      	cmp	r5, #0
 8000c5c:	f000 80ef 	beq.w	8000e3e <__udivmoddi4+0x292>
 8000c60:	2600      	movs	r6, #0
 8000c62:	e9c5 0100 	strd	r0, r1, [r5]
 8000c66:	4630      	mov	r0, r6
 8000c68:	4631      	mov	r1, r6
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	fab3 f683 	clz	r6, r3
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d14a      	bne.n	8000d0c <__udivmoddi4+0x160>
 8000c76:	428b      	cmp	r3, r1
 8000c78:	d302      	bcc.n	8000c80 <__udivmoddi4+0xd4>
 8000c7a:	4282      	cmp	r2, r0
 8000c7c:	f200 80f9 	bhi.w	8000e72 <__udivmoddi4+0x2c6>
 8000c80:	1a84      	subs	r4, r0, r2
 8000c82:	eb61 0303 	sbc.w	r3, r1, r3
 8000c86:	2001      	movs	r0, #1
 8000c88:	469e      	mov	lr, r3
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	d0e0      	beq.n	8000c50 <__udivmoddi4+0xa4>
 8000c8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c92:	e7dd      	b.n	8000c50 <__udivmoddi4+0xa4>
 8000c94:	b902      	cbnz	r2, 8000c98 <__udivmoddi4+0xec>
 8000c96:	deff      	udf	#255	; 0xff
 8000c98:	fab2 f282 	clz	r2, r2
 8000c9c:	2a00      	cmp	r2, #0
 8000c9e:	f040 8092 	bne.w	8000dc6 <__udivmoddi4+0x21a>
 8000ca2:	eba1 010c 	sub.w	r1, r1, ip
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f fe8c 	uxth.w	lr, ip
 8000cae:	2601      	movs	r6, #1
 8000cb0:	0c20      	lsrs	r0, r4, #16
 8000cb2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cb6:	fb07 1113 	mls	r1, r7, r3, r1
 8000cba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cbe:	fb0e f003 	mul.w	r0, lr, r3
 8000cc2:	4288      	cmp	r0, r1
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x12c>
 8000cc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cca:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cce:	d202      	bcs.n	8000cd6 <__udivmoddi4+0x12a>
 8000cd0:	4288      	cmp	r0, r1
 8000cd2:	f200 80cb 	bhi.w	8000e6c <__udivmoddi4+0x2c0>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	1a09      	subs	r1, r1, r0
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce0:	fb07 1110 	mls	r1, r7, r0, r1
 8000ce4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ce8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x156>
 8000cf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cf8:	d202      	bcs.n	8000d00 <__udivmoddi4+0x154>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f200 80bb 	bhi.w	8000e76 <__udivmoddi4+0x2ca>
 8000d00:	4608      	mov	r0, r1
 8000d02:	eba4 040e 	sub.w	r4, r4, lr
 8000d06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d0a:	e79c      	b.n	8000c46 <__udivmoddi4+0x9a>
 8000d0c:	f1c6 0720 	rsb	r7, r6, #32
 8000d10:	40b3      	lsls	r3, r6
 8000d12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d22:	431c      	orrs	r4, r3
 8000d24:	40f9      	lsrs	r1, r7
 8000d26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d32:	0c20      	lsrs	r0, r4, #16
 8000d34:	fa1f fe8c 	uxth.w	lr, ip
 8000d38:	fb09 1118 	mls	r1, r9, r8, r1
 8000d3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d40:	fb08 f00e 	mul.w	r0, r8, lr
 8000d44:	4288      	cmp	r0, r1
 8000d46:	fa02 f206 	lsl.w	r2, r2, r6
 8000d4a:	d90b      	bls.n	8000d64 <__udivmoddi4+0x1b8>
 8000d4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d54:	f080 8088 	bcs.w	8000e68 <__udivmoddi4+0x2bc>
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	f240 8085 	bls.w	8000e68 <__udivmoddi4+0x2bc>
 8000d5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d62:	4461      	add	r1, ip
 8000d64:	1a09      	subs	r1, r1, r0
 8000d66:	b2a4      	uxth	r4, r4
 8000d68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d78:	458e      	cmp	lr, r1
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x1e2>
 8000d7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d80:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d84:	d26c      	bcs.n	8000e60 <__udivmoddi4+0x2b4>
 8000d86:	458e      	cmp	lr, r1
 8000d88:	d96a      	bls.n	8000e60 <__udivmoddi4+0x2b4>
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	4461      	add	r1, ip
 8000d8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d92:	fba0 9402 	umull	r9, r4, r0, r2
 8000d96:	eba1 010e 	sub.w	r1, r1, lr
 8000d9a:	42a1      	cmp	r1, r4
 8000d9c:	46c8      	mov	r8, r9
 8000d9e:	46a6      	mov	lr, r4
 8000da0:	d356      	bcc.n	8000e50 <__udivmoddi4+0x2a4>
 8000da2:	d053      	beq.n	8000e4c <__udivmoddi4+0x2a0>
 8000da4:	b15d      	cbz	r5, 8000dbe <__udivmoddi4+0x212>
 8000da6:	ebb3 0208 	subs.w	r2, r3, r8
 8000daa:	eb61 010e 	sbc.w	r1, r1, lr
 8000dae:	fa01 f707 	lsl.w	r7, r1, r7
 8000db2:	fa22 f306 	lsr.w	r3, r2, r6
 8000db6:	40f1      	lsrs	r1, r6
 8000db8:	431f      	orrs	r7, r3
 8000dba:	e9c5 7100 	strd	r7, r1, [r5]
 8000dbe:	2600      	movs	r6, #0
 8000dc0:	4631      	mov	r1, r6
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	f1c2 0320 	rsb	r3, r2, #32
 8000dca:	40d8      	lsrs	r0, r3
 8000dcc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd0:	fa21 f303 	lsr.w	r3, r1, r3
 8000dd4:	4091      	lsls	r1, r2
 8000dd6:	4301      	orrs	r1, r0
 8000dd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ddc:	fa1f fe8c 	uxth.w	lr, ip
 8000de0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000de4:	fb07 3610 	mls	r6, r7, r0, r3
 8000de8:	0c0b      	lsrs	r3, r1, #16
 8000dea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dee:	fb00 f60e 	mul.w	r6, r0, lr
 8000df2:	429e      	cmp	r6, r3
 8000df4:	fa04 f402 	lsl.w	r4, r4, r2
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x260>
 8000dfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e02:	d22f      	bcs.n	8000e64 <__udivmoddi4+0x2b8>
 8000e04:	429e      	cmp	r6, r3
 8000e06:	d92d      	bls.n	8000e64 <__udivmoddi4+0x2b8>
 8000e08:	3802      	subs	r0, #2
 8000e0a:	4463      	add	r3, ip
 8000e0c:	1b9b      	subs	r3, r3, r6
 8000e0e:	b289      	uxth	r1, r1
 8000e10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e14:	fb07 3316 	mls	r3, r7, r6, r3
 8000e18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e20:	428b      	cmp	r3, r1
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x28a>
 8000e24:	eb1c 0101 	adds.w	r1, ip, r1
 8000e28:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e2c:	d216      	bcs.n	8000e5c <__udivmoddi4+0x2b0>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d914      	bls.n	8000e5c <__udivmoddi4+0x2b0>
 8000e32:	3e02      	subs	r6, #2
 8000e34:	4461      	add	r1, ip
 8000e36:	1ac9      	subs	r1, r1, r3
 8000e38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e3c:	e738      	b.n	8000cb0 <__udivmoddi4+0x104>
 8000e3e:	462e      	mov	r6, r5
 8000e40:	4628      	mov	r0, r5
 8000e42:	e705      	b.n	8000c50 <__udivmoddi4+0xa4>
 8000e44:	4606      	mov	r6, r0
 8000e46:	e6e3      	b.n	8000c10 <__udivmoddi4+0x64>
 8000e48:	4618      	mov	r0, r3
 8000e4a:	e6f8      	b.n	8000c3e <__udivmoddi4+0x92>
 8000e4c:	454b      	cmp	r3, r9
 8000e4e:	d2a9      	bcs.n	8000da4 <__udivmoddi4+0x1f8>
 8000e50:	ebb9 0802 	subs.w	r8, r9, r2
 8000e54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e58:	3801      	subs	r0, #1
 8000e5a:	e7a3      	b.n	8000da4 <__udivmoddi4+0x1f8>
 8000e5c:	4646      	mov	r6, r8
 8000e5e:	e7ea      	b.n	8000e36 <__udivmoddi4+0x28a>
 8000e60:	4620      	mov	r0, r4
 8000e62:	e794      	b.n	8000d8e <__udivmoddi4+0x1e2>
 8000e64:	4640      	mov	r0, r8
 8000e66:	e7d1      	b.n	8000e0c <__udivmoddi4+0x260>
 8000e68:	46d0      	mov	r8, sl
 8000e6a:	e77b      	b.n	8000d64 <__udivmoddi4+0x1b8>
 8000e6c:	3b02      	subs	r3, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	e732      	b.n	8000cd8 <__udivmoddi4+0x12c>
 8000e72:	4630      	mov	r0, r6
 8000e74:	e709      	b.n	8000c8a <__udivmoddi4+0xde>
 8000e76:	4464      	add	r4, ip
 8000e78:	3802      	subs	r0, #2
 8000e7a:	e742      	b.n	8000d02 <__udivmoddi4+0x156>

08000e7c <__aeabi_idiv0>:
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop

08000e80 <map>:
extern short int motor_SetPoint[3];
extern float proportional_motor[3], integral_motor[3], derivative_motor[3];
extern float prev_enc[3], error_velo_motor[3], previous_error_velo_motor[3];
extern float outputPWM[3];

long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
 8000e8c:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	69b9      	ldr	r1, [r7, #24]
 8000e96:	683a      	ldr	r2, [r7, #0]
 8000e98:	1a8a      	subs	r2, r1, r2
 8000e9a:	fb03 f202 	mul.w	r2, r3, r2
 8000e9e:	6879      	ldr	r1, [r7, #4]
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	1acb      	subs	r3, r1, r3
 8000ea4:	fb92 f2f3 	sdiv	r2, r2, r3
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	4413      	add	r3, r2
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <motor_VectorKinematic>:

void motor_VectorKinematic(short int vx, short int vy, short int vsudut)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	80fb      	strh	r3, [r7, #6]
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	80bb      	strh	r3, [r7, #4]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	807b      	strh	r3, [r7, #2]
	motor_SetPoint[0] = (short int) (((vx) * cosf(0 * M_PI/180)) + (vsudut));
 8000eca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ece:	ee07 3a90 	vmov	s15, r3
 8000ed2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ed6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000eda:	ee07 3a90 	vmov	s15, r3
 8000ede:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ee2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ee6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000eea:	ee17 3a90 	vmov	r3, s15
 8000eee:	b21a      	sxth	r2, r3
 8000ef0:	4b28      	ldr	r3, [pc, #160]	; (8000f94 <motor_VectorKinematic+0xdc>)
 8000ef2:	801a      	strh	r2, [r3, #0]
	motor_SetPoint[1] = (short int) (((vx) * cosf(240 * M_PI/180)) + ((vy) * sinf(240 * M_PI/180)) + (vsudut));
 8000ef4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ef8:	ee07 3a90 	vmov	s15, r3
 8000efc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f00:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8000f98 <motor_VectorKinematic+0xe0>
 8000f04:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f08:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f0c:	ee07 3a90 	vmov	s15, r3
 8000f10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f14:	eddf 6a21 	vldr	s13, [pc, #132]	; 8000f9c <motor_VectorKinematic+0xe4>
 8000f18:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000f1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000f24:	ee07 3a90 	vmov	s15, r3
 8000f28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f34:	ee17 3a90 	vmov	r3, s15
 8000f38:	b21a      	sxth	r2, r3
 8000f3a:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <motor_VectorKinematic+0xdc>)
 8000f3c:	805a      	strh	r2, [r3, #2]
	motor_SetPoint[2] = (short int) (((vx) * cosf(120 * M_PI/180)) + ((vy) * sinf(120 * M_PI/180)) + (vsudut));
 8000f3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f42:	ee07 3a90 	vmov	s15, r3
 8000f46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f4a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000fa0 <motor_VectorKinematic+0xe8>
 8000f4e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f52:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f56:	ee07 3a90 	vmov	s15, r3
 8000f5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f5e:	eddf 6a11 	vldr	s13, [pc, #68]	; 8000fa4 <motor_VectorKinematic+0xec>
 8000f62:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000f66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f6a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000f6e:	ee07 3a90 	vmov	s15, r3
 8000f72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f7e:	ee17 3a90 	vmov	r3, s15
 8000f82:	b21a      	sxth	r2, r3
 8000f84:	4b03      	ldr	r3, [pc, #12]	; (8000f94 <motor_VectorKinematic+0xdc>)
 8000f86:	809a      	strh	r2, [r3, #4]
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	20000394 	.word	0x20000394
 8000f98:	befffffd 	.word	0xbefffffd
 8000f9c:	bf5db3d8 	.word	0xbf5db3d8
 8000fa0:	bf000001 	.word	0xbf000001
 8000fa4:	3f5db3d7 	.word	0x3f5db3d7

08000fa8 <motor_VeloControl>:

void motor_VeloControl(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0

	motor_velo[0] = (encoder[0] - prev_enc[0]);
 8000fae:	4b94      	ldr	r3, [pc, #592]	; (8001200 <motor_VeloControl+0x258>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	ee07 3a90 	vmov	s15, r3
 8000fb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fba:	4b92      	ldr	r3, [pc, #584]	; (8001204 <motor_VeloControl+0x25c>)
 8000fbc:	edd3 7a00 	vldr	s15, [r3]
 8000fc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fc8:	ee17 3a90 	vmov	r3, s15
 8000fcc:	b21a      	sxth	r2, r3
 8000fce:	4b8e      	ldr	r3, [pc, #568]	; (8001208 <motor_VeloControl+0x260>)
 8000fd0:	801a      	strh	r2, [r3, #0]
	prev_enc[0] = encoder[0];
 8000fd2:	4b8b      	ldr	r3, [pc, #556]	; (8001200 <motor_VeloControl+0x258>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	ee07 3a90 	vmov	s15, r3
 8000fda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fde:	4b89      	ldr	r3, [pc, #548]	; (8001204 <motor_VeloControl+0x25c>)
 8000fe0:	edc3 7a00 	vstr	s15, [r3]
	motor_velo[1] = (encoder[1] - prev_enc[1]);
 8000fe4:	4b86      	ldr	r3, [pc, #536]	; (8001200 <motor_VeloControl+0x258>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	ee07 3a90 	vmov	s15, r3
 8000fec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ff0:	4b84      	ldr	r3, [pc, #528]	; (8001204 <motor_VeloControl+0x25c>)
 8000ff2:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ff6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ffa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ffe:	ee17 3a90 	vmov	r3, s15
 8001002:	b21a      	sxth	r2, r3
 8001004:	4b80      	ldr	r3, [pc, #512]	; (8001208 <motor_VeloControl+0x260>)
 8001006:	805a      	strh	r2, [r3, #2]
	prev_enc[1] = encoder[1];
 8001008:	4b7d      	ldr	r3, [pc, #500]	; (8001200 <motor_VeloControl+0x258>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	ee07 3a90 	vmov	s15, r3
 8001010:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001014:	4b7b      	ldr	r3, [pc, #492]	; (8001204 <motor_VeloControl+0x25c>)
 8001016:	edc3 7a01 	vstr	s15, [r3, #4]
	motor_velo[2] = (encoder[2] - prev_enc[2]);
 800101a:	4b79      	ldr	r3, [pc, #484]	; (8001200 <motor_VeloControl+0x258>)
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	ee07 3a90 	vmov	s15, r3
 8001022:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001026:	4b77      	ldr	r3, [pc, #476]	; (8001204 <motor_VeloControl+0x25c>)
 8001028:	edd3 7a02 	vldr	s15, [r3, #8]
 800102c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001030:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001034:	ee17 3a90 	vmov	r3, s15
 8001038:	b21a      	sxth	r2, r3
 800103a:	4b73      	ldr	r3, [pc, #460]	; (8001208 <motor_VeloControl+0x260>)
 800103c:	809a      	strh	r2, [r3, #4]
	prev_enc[2] = encoder[2];
 800103e:	4b70      	ldr	r3, [pc, #448]	; (8001200 <motor_VeloControl+0x258>)
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	ee07 3a90 	vmov	s15, r3
 8001046:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800104a:	4b6e      	ldr	r3, [pc, #440]	; (8001204 <motor_VeloControl+0x25c>)
 800104c:	edc3 7a02 	vstr	s15, [r3, #8]

	for(int i = 0; i < 3; i++){
 8001050:	2300      	movs	r3, #0
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	e0c5      	b.n	80011e2 <motor_VeloControl+0x23a>
//		motor_velo[i] = (encoder[i] - prev_enc[i]);
		error_velo_motor[i] = motor_SetPoint[i] - motor_velo[i];
 8001056:	4a6d      	ldr	r2, [pc, #436]	; (800120c <motor_VeloControl+0x264>)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800105e:	4619      	mov	r1, r3
 8001060:	4a69      	ldr	r2, [pc, #420]	; (8001208 <motor_VeloControl+0x260>)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001068:	1acb      	subs	r3, r1, r3
 800106a:	ee07 3a90 	vmov	s15, r3
 800106e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001072:	4a67      	ldr	r2, [pc, #412]	; (8001210 <motor_VeloControl+0x268>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	4413      	add	r3, r2
 800107a:	edc3 7a00 	vstr	s15, [r3]
		proportional_motor[i] = KP_motor * error_velo_motor[i];
 800107e:	4a64      	ldr	r2, [pc, #400]	; (8001210 <motor_VeloControl+0x268>)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	4413      	add	r3, r2
 8001086:	ed93 7a00 	vldr	s14, [r3]
 800108a:	4b62      	ldr	r3, [pc, #392]	; (8001214 <motor_VeloControl+0x26c>)
 800108c:	edd3 7a00 	vldr	s15, [r3]
 8001090:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001094:	4a60      	ldr	r2, [pc, #384]	; (8001218 <motor_VeloControl+0x270>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	4413      	add	r3, r2
 800109c:	edc3 7a00 	vstr	s15, [r3]
		integral_motor[i] += error_velo_motor[i];
 80010a0:	4a5e      	ldr	r2, [pc, #376]	; (800121c <motor_VeloControl+0x274>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	4413      	add	r3, r2
 80010a8:	ed93 7a00 	vldr	s14, [r3]
 80010ac:	4a58      	ldr	r2, [pc, #352]	; (8001210 <motor_VeloControl+0x268>)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4413      	add	r3, r2
 80010b4:	edd3 7a00 	vldr	s15, [r3]
 80010b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010bc:	4a57      	ldr	r2, [pc, #348]	; (800121c <motor_VeloControl+0x274>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4413      	add	r3, r2
 80010c4:	edc3 7a00 	vstr	s15, [r3]
//		derivative_motor[i] = KD_motor * (error_velo_motor[i] - previous_error_velo_motor[i]) / PID_dt;
		derivative_motor[i] = KD_motor * (error_velo_motor[i] - previous_error_velo_motor[i]);
 80010c8:	4a51      	ldr	r2, [pc, #324]	; (8001210 <motor_VeloControl+0x268>)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	4413      	add	r3, r2
 80010d0:	ed93 7a00 	vldr	s14, [r3]
 80010d4:	4a52      	ldr	r2, [pc, #328]	; (8001220 <motor_VeloControl+0x278>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	4413      	add	r3, r2
 80010dc:	edd3 7a00 	vldr	s15, [r3]
 80010e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010e4:	4b4f      	ldr	r3, [pc, #316]	; (8001224 <motor_VeloControl+0x27c>)
 80010e6:	edd3 7a00 	vldr	s15, [r3]
 80010ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ee:	4a4e      	ldr	r2, [pc, #312]	; (8001228 <motor_VeloControl+0x280>)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	edc3 7a00 	vstr	s15, [r3]

//		integral_motor[i] = KI_motor * (integral_motor[i] + error_velo_motor[i] * PID_dt);
		previous_error_velo_motor[i] = error_velo_motor[i];
 80010fa:	4a45      	ldr	r2, [pc, #276]	; (8001210 <motor_VeloControl+0x268>)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	4413      	add	r3, r2
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4946      	ldr	r1, [pc, #280]	; (8001220 <motor_VeloControl+0x278>)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	440b      	add	r3, r1
 800110c:	601a      	str	r2, [r3, #0]

		if(integral_motor[i] > 999) integral_motor[i] = 999;
 800110e:	4a43      	ldr	r2, [pc, #268]	; (800121c <motor_VeloControl+0x274>)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	4413      	add	r3, r2
 8001116:	edd3 7a00 	vldr	s15, [r3]
 800111a:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800122c <motor_VeloControl+0x284>
 800111e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001126:	dd06      	ble.n	8001136 <motor_VeloControl+0x18e>
 8001128:	4a3c      	ldr	r2, [pc, #240]	; (800121c <motor_VeloControl+0x274>)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	4413      	add	r3, r2
 8001130:	4a3f      	ldr	r2, [pc, #252]	; (8001230 <motor_VeloControl+0x288>)
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	e012      	b.n	800115c <motor_VeloControl+0x1b4>
		else if(integral_motor[i] < -999) integral_motor[i] = -999;
 8001136:	4a39      	ldr	r2, [pc, #228]	; (800121c <motor_VeloControl+0x274>)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	4413      	add	r3, r2
 800113e:	edd3 7a00 	vldr	s15, [r3]
 8001142:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001234 <motor_VeloControl+0x28c>
 8001146:	eef4 7ac7 	vcmpe.f32	s15, s14
 800114a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114e:	d505      	bpl.n	800115c <motor_VeloControl+0x1b4>
 8001150:	4a32      	ldr	r2, [pc, #200]	; (800121c <motor_VeloControl+0x274>)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	4413      	add	r3, r2
 8001158:	4a37      	ldr	r2, [pc, #220]	; (8001238 <motor_VeloControl+0x290>)
 800115a:	601a      	str	r2, [r3, #0]

//		outputPWM[i] = (proportional_motor[i] + integral_motor[i] + derivative_motor[i]) * 0.9;
		outputPWM[i] = proportional_motor[i] * 0.3;
 800115c:	4a2e      	ldr	r2, [pc, #184]	; (8001218 <motor_VeloControl+0x270>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	4413      	add	r3, r2
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff f99e 	bl	80004a8 <__aeabi_f2d>
 800116c:	a322      	add	r3, pc, #136	; (adr r3, 80011f8 <motor_VeloControl+0x250>)
 800116e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001172:	f7ff f9f1 	bl	8000558 <__aeabi_dmul>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	4610      	mov	r0, r2
 800117c:	4619      	mov	r1, r3
 800117e:	f7ff fcad 	bl	8000adc <__aeabi_d2f>
 8001182:	4602      	mov	r2, r0
 8001184:	492d      	ldr	r1, [pc, #180]	; (800123c <motor_VeloControl+0x294>)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	440b      	add	r3, r1
 800118c:	601a      	str	r2, [r3, #0]

		if(outputPWM[i] > 999) outputPWM[i] = 999;
 800118e:	4a2b      	ldr	r2, [pc, #172]	; (800123c <motor_VeloControl+0x294>)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	4413      	add	r3, r2
 8001196:	edd3 7a00 	vldr	s15, [r3]
 800119a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800122c <motor_VeloControl+0x284>
 800119e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a6:	dd06      	ble.n	80011b6 <motor_VeloControl+0x20e>
 80011a8:	4a24      	ldr	r2, [pc, #144]	; (800123c <motor_VeloControl+0x294>)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	4413      	add	r3, r2
 80011b0:	4a1f      	ldr	r2, [pc, #124]	; (8001230 <motor_VeloControl+0x288>)
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	e012      	b.n	80011dc <motor_VeloControl+0x234>
		else if(outputPWM[i] < -999) outputPWM[i] = -999;
 80011b6:	4a21      	ldr	r2, [pc, #132]	; (800123c <motor_VeloControl+0x294>)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4413      	add	r3, r2
 80011be:	edd3 7a00 	vldr	s15, [r3]
 80011c2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001234 <motor_VeloControl+0x28c>
 80011c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ce:	d505      	bpl.n	80011dc <motor_VeloControl+0x234>
 80011d0:	4a1a      	ldr	r2, [pc, #104]	; (800123c <motor_VeloControl+0x294>)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	4413      	add	r3, r2
 80011d8:	4a17      	ldr	r2, [pc, #92]	; (8001238 <motor_VeloControl+0x290>)
 80011da:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 3; i++){
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3301      	adds	r3, #1
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	f77f af36 	ble.w	8001056 <motor_VeloControl+0xae>
//		prev_enc[i] = encoder[i];
//		previous_error_velo_motor[i] = error_velo_motor[i];
	}
}
 80011ea:	bf00      	nop
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	f3af 8000 	nop.w
 80011f8:	33333333 	.word	0x33333333
 80011fc:	3fd33333 	.word	0x3fd33333
 8001200:	20000380 	.word	0x20000380
 8001204:	200003c0 	.word	0x200003c0
 8001208:	2000038c 	.word	0x2000038c
 800120c:	20000394 	.word	0x20000394
 8001210:	200003cc 	.word	0x200003cc
 8001214:	20000000 	.word	0x20000000
 8001218:	2000039c 	.word	0x2000039c
 800121c:	200003a8 	.word	0x200003a8
 8001220:	200003d8 	.word	0x200003d8
 8001224:	2000037c 	.word	0x2000037c
 8001228:	200003b4 	.word	0x200003b4
 800122c:	4479c000 	.word	0x4479c000
 8001230:	4479c000 	.word	0x4479c000
 8001234:	c479c000 	.word	0xc479c000
 8001238:	c479c000 	.word	0xc479c000
 800123c:	200003e4 	.word	0x200003e4

08001240 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	4b18      	ldr	r3, [pc, #96]	; (80012ac <MX_DMA_Init+0x6c>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a17      	ldr	r2, [pc, #92]	; (80012ac <MX_DMA_Init+0x6c>)
 8001250:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b15      	ldr	r3, [pc, #84]	; (80012ac <MX_DMA_Init+0x6c>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	2105      	movs	r1, #5
 8001266:	200b      	movs	r0, #11
 8001268:	f006 fc22 	bl	8007ab0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800126c:	200b      	movs	r0, #11
 800126e:	f006 fc3b 	bl	8007ae8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2105      	movs	r1, #5
 8001276:	200d      	movs	r0, #13
 8001278:	f006 fc1a 	bl	8007ab0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800127c:	200d      	movs	r0, #13
 800127e:	f006 fc33 	bl	8007ae8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001282:	2200      	movs	r2, #0
 8001284:	2105      	movs	r1, #5
 8001286:	2010      	movs	r0, #16
 8001288:	f006 fc12 	bl	8007ab0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800128c:	2010      	movs	r0, #16
 800128e:	f006 fc2b 	bl	8007ae8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2105      	movs	r1, #5
 8001296:	202f      	movs	r0, #47	; 0x2f
 8001298:	f006 fc0a 	bl	8007ab0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800129c:	202f      	movs	r0, #47	; 0x2f
 800129e:	f006 fc23 	bl	8007ae8 <HAL_NVIC_EnableIRQ>

}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40023800 	.word	0x40023800

080012b0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	4a07      	ldr	r2, [pc, #28]	; (80012dc <vApplicationGetIdleTaskMemory+0x2c>)
 80012c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	4a06      	ldr	r2, [pc, #24]	; (80012e0 <vApplicationGetIdleTaskMemory+0x30>)
 80012c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2280      	movs	r2, #128	; 0x80
 80012cc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80012ce:	bf00      	nop
 80012d0:	3714      	adds	r7, #20
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	200000c8 	.word	0x200000c8
 80012e0:	2000017c 	.word	0x2000017c

080012e4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80012e4:	b5b0      	push	{r4, r5, r7, lr}
 80012e6:	b096      	sub	sp, #88	; 0x58
 80012e8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of joys_imuTask */
  osThreadDef(joys_imuTask, Startjoys_imuTask, osPriorityNormal, 0, 128);
 80012ea:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <MX_FREERTOS_Init+0x7c>)
 80012ec:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80012f0:	461d      	mov	r5, r3
 80012f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  joys_imuTaskHandle = osThreadCreate(osThread(joys_imuTask), NULL);
 80012fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001302:	2100      	movs	r1, #0
 8001304:	4618      	mov	r0, r3
 8001306:	f00a fa00 	bl	800b70a <osThreadCreate>
 800130a:	4603      	mov	r3, r0
 800130c:	4a15      	ldr	r2, [pc, #84]	; (8001364 <MX_FREERTOS_Init+0x80>)
 800130e:	6013      	str	r3, [r2, #0]

  /* definition and creation of rosserialTask */
  osThreadDef(rosserialTask, StartrosserialTask, osPriorityNormal, 0, 2048);
 8001310:	4b15      	ldr	r3, [pc, #84]	; (8001368 <MX_FREERTOS_Init+0x84>)
 8001312:	f107 0420 	add.w	r4, r7, #32
 8001316:	461d      	mov	r5, r3
 8001318:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800131a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800131c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001320:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  rosserialTaskHandle = osThreadCreate(osThread(rosserialTask), NULL);
 8001324:	f107 0320 	add.w	r3, r7, #32
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f00a f9ed 	bl	800b70a <osThreadCreate>
 8001330:	4603      	mov	r3, r0
 8001332:	4a0e      	ldr	r2, [pc, #56]	; (800136c <MX_FREERTOS_Init+0x88>)
 8001334:	6013      	str	r3, [r2, #0]

  /* definition and creation of out_motorTask */
  osThreadDef(out_motorTask, Startout_motorTask, osPriorityNormal, 0, 128);
 8001336:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <MX_FREERTOS_Init+0x8c>)
 8001338:	1d3c      	adds	r4, r7, #4
 800133a:	461d      	mov	r5, r3
 800133c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800133e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001340:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001344:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  out_motorTaskHandle = osThreadCreate(osThread(out_motorTask), NULL);
 8001348:	1d3b      	adds	r3, r7, #4
 800134a:	2100      	movs	r1, #0
 800134c:	4618      	mov	r0, r3
 800134e:	f00a f9dc 	bl	800b70a <osThreadCreate>
 8001352:	4603      	mov	r3, r0
 8001354:	4a07      	ldr	r2, [pc, #28]	; (8001374 <MX_FREERTOS_Init+0x90>)
 8001356:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001358:	bf00      	nop
 800135a:	3758      	adds	r7, #88	; 0x58
 800135c:	46bd      	mov	sp, r7
 800135e:	bdb0      	pop	{r4, r5, r7, pc}
 8001360:	0800ed20 	.word	0x0800ed20
 8001364:	200000bc 	.word	0x200000bc
 8001368:	0800ed3c 	.word	0x0800ed3c
 800136c:	200000c0 	.word	0x200000c0
 8001370:	0800ed58 	.word	0x0800ed58
 8001374:	200000c4 	.word	0x200000c4

08001378 <Startjoys_imuTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Startjoys_imuTask */
void Startjoys_imuTask(void const * argument)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af02      	add	r7, sp, #8
 800137e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startjoys_imuTask */
  /* Infinite loop */
  for(;;)
  {	  //JOYSTICK BLUETOOTH
	  if(joystick_bt_counter < joystick_bt_timeout){
 8001380:	4b89      	ldr	r3, [pc, #548]	; (80015a8 <Startjoys_imuTask+0x230>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4b89      	ldr	r3, [pc, #548]	; (80015ac <Startjoys_imuTask+0x234>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	429a      	cmp	r2, r3
 800138a:	da10      	bge.n	80013ae <Startjoys_imuTask+0x36>
		  if(HAL_UART_Receive_DMA(&huart2, joystick_buf, sizeof(joystick_buf)) != HAL_OK){
 800138c:	220d      	movs	r2, #13
 800138e:	4988      	ldr	r1, [pc, #544]	; (80015b0 <Startjoys_imuTask+0x238>)
 8001390:	4888      	ldr	r0, [pc, #544]	; (80015b4 <Startjoys_imuTask+0x23c>)
 8001392:	f009 f88b 	bl	800a4ac <HAL_UART_Receive_DMA>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d005      	beq.n	80013a8 <Startjoys_imuTask+0x30>
			  joystick_bt_counter++;
 800139c:	4b82      	ldr	r3, [pc, #520]	; (80015a8 <Startjoys_imuTask+0x230>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	3301      	adds	r3, #1
 80013a2:	4a81      	ldr	r2, [pc, #516]	; (80015a8 <Startjoys_imuTask+0x230>)
 80013a4:	6013      	str	r3, [r2, #0]
 80013a6:	e002      	b.n	80013ae <Startjoys_imuTask+0x36>
		  }
		  else{
			  joystick_bt_counter = 0;
 80013a8:	4b7f      	ldr	r3, [pc, #508]	; (80015a8 <Startjoys_imuTask+0x230>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
		  }
	  }

	  if(joystick_bt_counter >= 299){
 80013ae:	4b7e      	ldr	r3, [pc, #504]	; (80015a8 <Startjoys_imuTask+0x230>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 80013b6:	dd03      	ble.n	80013c0 <Startjoys_imuTask+0x48>
		  joystick_bt_counter = 299;
 80013b8:	4b7b      	ldr	r3, [pc, #492]	; (80015a8 <Startjoys_imuTask+0x230>)
 80013ba:	f240 122b 	movw	r2, #299	; 0x12b
 80013be:	601a      	str	r2, [r3, #0]
	  }

	  if(joystick_buf[0] == 'i' && joystick_buf[1] == 't' && joystick_buf[2] == 's'){
 80013c0:	4b7b      	ldr	r3, [pc, #492]	; (80015b0 <Startjoys_imuTask+0x238>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b69      	cmp	r3, #105	; 0x69
 80013c6:	d177      	bne.n	80014b8 <Startjoys_imuTask+0x140>
 80013c8:	4b79      	ldr	r3, [pc, #484]	; (80015b0 <Startjoys_imuTask+0x238>)
 80013ca:	785b      	ldrb	r3, [r3, #1]
 80013cc:	2b74      	cmp	r3, #116	; 0x74
 80013ce:	d173      	bne.n	80014b8 <Startjoys_imuTask+0x140>
 80013d0:	4b77      	ldr	r3, [pc, #476]	; (80015b0 <Startjoys_imuTask+0x238>)
 80013d2:	789b      	ldrb	r3, [r3, #2]
 80013d4:	2b73      	cmp	r3, #115	; 0x73
 80013d6:	d16f      	bne.n	80014b8 <Startjoys_imuTask+0x140>
		  HAL_UART_Receive_DMA(&huart2, joystick_buf, sizeof(joystick_buf));
 80013d8:	220d      	movs	r2, #13
 80013da:	4975      	ldr	r1, [pc, #468]	; (80015b0 <Startjoys_imuTask+0x238>)
 80013dc:	4875      	ldr	r0, [pc, #468]	; (80015b4 <Startjoys_imuTask+0x23c>)
 80013de:	f009 f865 	bl	800a4ac <HAL_UART_Receive_DMA>

		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80013e2:	2201      	movs	r2, #1
 80013e4:	2140      	movs	r1, #64	; 0x40
 80013e6:	4874      	ldr	r0, [pc, #464]	; (80015b8 <Startjoys_imuTask+0x240>)
 80013e8:	f007 f92a 	bl	8008640 <HAL_GPIO_WritePin>

		  memcpy(&joystick_y_buf, joystick_buf + 3, 1);
 80013ec:	4b73      	ldr	r3, [pc, #460]	; (80015bc <Startjoys_imuTask+0x244>)
 80013ee:	781a      	ldrb	r2, [r3, #0]
 80013f0:	4b73      	ldr	r3, [pc, #460]	; (80015c0 <Startjoys_imuTask+0x248>)
 80013f2:	701a      	strb	r2, [r3, #0]
		  memcpy(&joystick_x_buf, joystick_buf + 4, 1);
 80013f4:	4b73      	ldr	r3, [pc, #460]	; (80015c4 <Startjoys_imuTask+0x24c>)
 80013f6:	781a      	ldrb	r2, [r3, #0]
 80013f8:	4b73      	ldr	r3, [pc, #460]	; (80015c8 <Startjoys_imuTask+0x250>)
 80013fa:	701a      	strb	r2, [r3, #0]
		  memcpy(&joystick_z_buf, joystick_buf + 6, 1);
 80013fc:	4b73      	ldr	r3, [pc, #460]	; (80015cc <Startjoys_imuTask+0x254>)
 80013fe:	781a      	ldrb	r2, [r3, #0]
 8001400:	4b73      	ldr	r3, [pc, #460]	; (80015d0 <Startjoys_imuTask+0x258>)
 8001402:	701a      	strb	r2, [r3, #0]

		  joystick_x_buf = constrain(joystick_x_buf, 0, 246);
 8001404:	4b70      	ldr	r3, [pc, #448]	; (80015c8 <Startjoys_imuTask+0x250>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2bf6      	cmp	r3, #246	; 0xf6
 800140a:	bf28      	it	cs
 800140c:	23f6      	movcs	r3, #246	; 0xf6
 800140e:	b2da      	uxtb	r2, r3
 8001410:	4b6d      	ldr	r3, [pc, #436]	; (80015c8 <Startjoys_imuTask+0x250>)
 8001412:	701a      	strb	r2, [r3, #0]
		  joystick_y_buf = constrain(joystick_y_buf, 0, 246);
 8001414:	4b6a      	ldr	r3, [pc, #424]	; (80015c0 <Startjoys_imuTask+0x248>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2bf6      	cmp	r3, #246	; 0xf6
 800141a:	bf28      	it	cs
 800141c:	23f6      	movcs	r3, #246	; 0xf6
 800141e:	b2da      	uxtb	r2, r3
 8001420:	4b67      	ldr	r3, [pc, #412]	; (80015c0 <Startjoys_imuTask+0x248>)
 8001422:	701a      	strb	r2, [r3, #0]
		  joystick_z_buf = constrain(joystick_z_buf, 0, 246);
 8001424:	4b6a      	ldr	r3, [pc, #424]	; (80015d0 <Startjoys_imuTask+0x258>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2bf6      	cmp	r3, #246	; 0xf6
 800142a:	bf28      	it	cs
 800142c:	23f6      	movcs	r3, #246	; 0xf6
 800142e:	b2da      	uxtb	r2, r3
 8001430:	4b67      	ldr	r3, [pc, #412]	; (80015d0 <Startjoys_imuTask+0x258>)
 8001432:	701a      	strb	r2, [r3, #0]

		  joystick_x = map(joystick_x_buf, 0, 246, -123, 123);
 8001434:	4b64      	ldr	r3, [pc, #400]	; (80015c8 <Startjoys_imuTask+0x250>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	237b      	movs	r3, #123	; 0x7b
 800143c:	9300      	str	r3, [sp, #0]
 800143e:	f06f 037a 	mvn.w	r3, #122	; 0x7a
 8001442:	22f6      	movs	r2, #246	; 0xf6
 8001444:	2100      	movs	r1, #0
 8001446:	f7ff fd1b 	bl	8000e80 <map>
 800144a:	4603      	mov	r3, r0
 800144c:	b25a      	sxtb	r2, r3
 800144e:	4b61      	ldr	r3, [pc, #388]	; (80015d4 <Startjoys_imuTask+0x25c>)
 8001450:	701a      	strb	r2, [r3, #0]
		  joystick_y = map(joystick_y_buf, 0, 246, -123, 123);
 8001452:	4b5b      	ldr	r3, [pc, #364]	; (80015c0 <Startjoys_imuTask+0x248>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	237b      	movs	r3, #123	; 0x7b
 800145a:	9300      	str	r3, [sp, #0]
 800145c:	f06f 037a 	mvn.w	r3, #122	; 0x7a
 8001460:	22f6      	movs	r2, #246	; 0xf6
 8001462:	2100      	movs	r1, #0
 8001464:	f7ff fd0c 	bl	8000e80 <map>
 8001468:	4603      	mov	r3, r0
 800146a:	b25a      	sxtb	r2, r3
 800146c:	4b5a      	ldr	r3, [pc, #360]	; (80015d8 <Startjoys_imuTask+0x260>)
 800146e:	701a      	strb	r2, [r3, #0]
		  joystick_z = map(joystick_z_buf, 0, 246, -123, 123);
 8001470:	4b57      	ldr	r3, [pc, #348]	; (80015d0 <Startjoys_imuTask+0x258>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	4618      	mov	r0, r3
 8001476:	237b      	movs	r3, #123	; 0x7b
 8001478:	9300      	str	r3, [sp, #0]
 800147a:	f06f 037a 	mvn.w	r3, #122	; 0x7a
 800147e:	22f6      	movs	r2, #246	; 0xf6
 8001480:	2100      	movs	r1, #0
 8001482:	f7ff fcfd 	bl	8000e80 <map>
 8001486:	4603      	mov	r3, r0
 8001488:	b25a      	sxtb	r2, r3
 800148a:	4b54      	ldr	r3, [pc, #336]	; (80015dc <Startjoys_imuTask+0x264>)
 800148c:	701a      	strb	r2, [r3, #0]

		  joystick_mode = joystick_buf[7];
 800148e:	4b48      	ldr	r3, [pc, #288]	; (80015b0 <Startjoys_imuTask+0x238>)
 8001490:	79db      	ldrb	r3, [r3, #7]
 8001492:	461a      	mov	r2, r3
 8001494:	4b52      	ldr	r3, [pc, #328]	; (80015e0 <Startjoys_imuTask+0x268>)
 8001496:	601a      	str	r2, [r3, #0]
		  mode = joystick_buf[8];
 8001498:	4b45      	ldr	r3, [pc, #276]	; (80015b0 <Startjoys_imuTask+0x238>)
 800149a:	7a1b      	ldrb	r3, [r3, #8]
 800149c:	461a      	mov	r2, r3
 800149e:	4b51      	ldr	r3, [pc, #324]	; (80015e4 <Startjoys_imuTask+0x26c>)
 80014a0:	601a      	str	r2, [r3, #0]
		  joystick_increase_speed = joystick_buf[9];
 80014a2:	4b43      	ldr	r3, [pc, #268]	; (80015b0 <Startjoys_imuTask+0x238>)
 80014a4:	7a5b      	ldrb	r3, [r3, #9]
 80014a6:	461a      	mov	r2, r3
 80014a8:	4b4f      	ldr	r3, [pc, #316]	; (80015e8 <Startjoys_imuTask+0x270>)
 80014aa:	601a      	str	r2, [r3, #0]
		  joystick_decrease_speed = joystick_buf[10];
 80014ac:	4b40      	ldr	r3, [pc, #256]	; (80015b0 <Startjoys_imuTask+0x238>)
 80014ae:	7a9b      	ldrb	r3, [r3, #10]
 80014b0:	461a      	mov	r2, r3
 80014b2:	4b4e      	ldr	r3, [pc, #312]	; (80015ec <Startjoys_imuTask+0x274>)
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	e012      	b.n	80014de <Startjoys_imuTask+0x166>
	  }
	  else{
		  HAL_UART_Receive_DMA(&huart2, joystick_buf, sizeof(joystick_buf));
 80014b8:	220d      	movs	r2, #13
 80014ba:	493d      	ldr	r1, [pc, #244]	; (80015b0 <Startjoys_imuTask+0x238>)
 80014bc:	483d      	ldr	r0, [pc, #244]	; (80015b4 <Startjoys_imuTask+0x23c>)
 80014be:	f008 fff5 	bl	800a4ac <HAL_UART_Receive_DMA>
		  joystick_x = 0;
 80014c2:	4b44      	ldr	r3, [pc, #272]	; (80015d4 <Startjoys_imuTask+0x25c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	701a      	strb	r2, [r3, #0]
		  joystick_y = 0;
 80014c8:	4b43      	ldr	r3, [pc, #268]	; (80015d8 <Startjoys_imuTask+0x260>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	701a      	strb	r2, [r3, #0]
		  joystick_z = 0;
 80014ce:	4b43      	ldr	r3, [pc, #268]	; (80015dc <Startjoys_imuTask+0x264>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80014d4:	2200      	movs	r2, #0
 80014d6:	2140      	movs	r1, #64	; 0x40
 80014d8:	4837      	ldr	r0, [pc, #220]	; (80015b8 <Startjoys_imuTask+0x240>)
 80014da:	f007 f8b1 	bl	8008640 <HAL_GPIO_WritePin>
	  }

	  if(joystick_bt_counter == 299){
 80014de:	4b32      	ldr	r3, [pc, #200]	; (80015a8 <Startjoys_imuTask+0x230>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f240 122b 	movw	r2, #299	; 0x12b
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d10d      	bne.n	8001506 <Startjoys_imuTask+0x18e>
		  joystick_x = 0;
 80014ea:	4b3a      	ldr	r3, [pc, #232]	; (80015d4 <Startjoys_imuTask+0x25c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	701a      	strb	r2, [r3, #0]
		  joystick_y = 0;
 80014f0:	4b39      	ldr	r3, [pc, #228]	; (80015d8 <Startjoys_imuTask+0x260>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	701a      	strb	r2, [r3, #0]
		  joystick_z = 0;
 80014f6:	4b39      	ldr	r3, [pc, #228]	; (80015dc <Startjoys_imuTask+0x264>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80014fc:	2200      	movs	r2, #0
 80014fe:	2140      	movs	r1, #64	; 0x40
 8001500:	482d      	ldr	r0, [pc, #180]	; (80015b8 <Startjoys_imuTask+0x240>)
 8001502:	f007 f89d 	bl	8008640 <HAL_GPIO_WritePin>
	  }

	  //GYRO BNO055
	  HAL_UART_Receive_DMA(&huart4, imu_buf, sizeof(imu_buf));
 8001506:	2220      	movs	r2, #32
 8001508:	4939      	ldr	r1, [pc, #228]	; (80015f0 <Startjoys_imuTask+0x278>)
 800150a:	483a      	ldr	r0, [pc, #232]	; (80015f4 <Startjoys_imuTask+0x27c>)
 800150c:	f008 ffce 	bl	800a4ac <HAL_UART_Receive_DMA>
	  if(imu_buf[0] == 'i' && imu_buf[1] == 't' && imu_buf[2] == 's'){
 8001510:	4b37      	ldr	r3, [pc, #220]	; (80015f0 <Startjoys_imuTask+0x278>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b69      	cmp	r3, #105	; 0x69
 8001516:	d137      	bne.n	8001588 <Startjoys_imuTask+0x210>
 8001518:	4b35      	ldr	r3, [pc, #212]	; (80015f0 <Startjoys_imuTask+0x278>)
 800151a:	785b      	ldrb	r3, [r3, #1]
 800151c:	2b74      	cmp	r3, #116	; 0x74
 800151e:	d133      	bne.n	8001588 <Startjoys_imuTask+0x210>
 8001520:	4b33      	ldr	r3, [pc, #204]	; (80015f0 <Startjoys_imuTask+0x278>)
 8001522:	789b      	ldrb	r3, [r3, #2]
 8001524:	2b73      	cmp	r3, #115	; 0x73
 8001526:	d12f      	bne.n	8001588 <Startjoys_imuTask+0x210>
		  memcpy(&euler_x, imu_buf + 3, 4);
 8001528:	4b33      	ldr	r3, [pc, #204]	; (80015f8 <Startjoys_imuTask+0x280>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	461a      	mov	r2, r3
 800152e:	4b33      	ldr	r3, [pc, #204]	; (80015fc <Startjoys_imuTask+0x284>)
 8001530:	601a      	str	r2, [r3, #0]
		  memcpy(&euler_y, imu_buf + 7, 4);
 8001532:	4b33      	ldr	r3, [pc, #204]	; (8001600 <Startjoys_imuTask+0x288>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	461a      	mov	r2, r3
 8001538:	4b32      	ldr	r3, [pc, #200]	; (8001604 <Startjoys_imuTask+0x28c>)
 800153a:	601a      	str	r2, [r3, #0]
		  memcpy(&euler_z, imu_buf + 11, 4);
 800153c:	4b32      	ldr	r3, [pc, #200]	; (8001608 <Startjoys_imuTask+0x290>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	461a      	mov	r2, r3
 8001542:	4b32      	ldr	r3, [pc, #200]	; (800160c <Startjoys_imuTask+0x294>)
 8001544:	601a      	str	r2, [r3, #0]
		  memcpy(&quat_w, imu_buf + 15, 4);
 8001546:	4b32      	ldr	r3, [pc, #200]	; (8001610 <Startjoys_imuTask+0x298>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	461a      	mov	r2, r3
 800154c:	4b31      	ldr	r3, [pc, #196]	; (8001614 <Startjoys_imuTask+0x29c>)
 800154e:	601a      	str	r2, [r3, #0]
		  memcpy(&quat_x, imu_buf + 19, 4);
 8001550:	4b31      	ldr	r3, [pc, #196]	; (8001618 <Startjoys_imuTask+0x2a0>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	461a      	mov	r2, r3
 8001556:	4b31      	ldr	r3, [pc, #196]	; (800161c <Startjoys_imuTask+0x2a4>)
 8001558:	601a      	str	r2, [r3, #0]
		  memcpy(&quat_y, imu_buf + 23, 4);
 800155a:	4b31      	ldr	r3, [pc, #196]	; (8001620 <Startjoys_imuTask+0x2a8>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	461a      	mov	r2, r3
 8001560:	4b30      	ldr	r3, [pc, #192]	; (8001624 <Startjoys_imuTask+0x2ac>)
 8001562:	601a      	str	r2, [r3, #0]
		  memcpy(&quat_z, imu_buf + 27, 4);
 8001564:	4b30      	ldr	r3, [pc, #192]	; (8001628 <Startjoys_imuTask+0x2b0>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	461a      	mov	r2, r3
 800156a:	4b30      	ldr	r3, [pc, #192]	; (800162c <Startjoys_imuTask+0x2b4>)
 800156c:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 800156e:	2201      	movs	r2, #1
 8001570:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001574:	482e      	ldr	r0, [pc, #184]	; (8001630 <Startjoys_imuTask+0x2b8>)
 8001576:	f007 f863 	bl	8008640 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 800157a:	2201      	movs	r2, #1
 800157c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001580:	482b      	ldr	r0, [pc, #172]	; (8001630 <Startjoys_imuTask+0x2b8>)
 8001582:	f007 f85d 	bl	8008640 <HAL_GPIO_WritePin>
 8001586:	e00b      	b.n	80015a0 <Startjoys_imuTask+0x228>
	  }else{
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8001588:	2200      	movs	r2, #0
 800158a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800158e:	4828      	ldr	r0, [pc, #160]	; (8001630 <Startjoys_imuTask+0x2b8>)
 8001590:	f007 f856 	bl	8008640 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8001594:	2200      	movs	r2, #0
 8001596:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800159a:	4825      	ldr	r0, [pc, #148]	; (8001630 <Startjoys_imuTask+0x2b8>)
 800159c:	f007 f850 	bl	8008640 <HAL_GPIO_WritePin>
	  }
    osDelay(1);
 80015a0:	2001      	movs	r0, #1
 80015a2:	f00a f8fe 	bl	800b7a2 <osDelay>
	  if(joystick_bt_counter < joystick_bt_timeout){
 80015a6:	e6eb      	b.n	8001380 <Startjoys_imuTask+0x8>
 80015a8:	20000404 	.word	0x20000404
 80015ac:	20000004 	.word	0x20000004
 80015b0:	200003f0 	.word	0x200003f0
 80015b4:	20002d44 	.word	0x20002d44
 80015b8:	40020c00 	.word	0x40020c00
 80015bc:	200003f3 	.word	0x200003f3
 80015c0:	200003fe 	.word	0x200003fe
 80015c4:	200003f4 	.word	0x200003f4
 80015c8:	200003fd 	.word	0x200003fd
 80015cc:	200003f6 	.word	0x200003f6
 80015d0:	200003ff 	.word	0x200003ff
 80015d4:	20000400 	.word	0x20000400
 80015d8:	20000401 	.word	0x20000401
 80015dc:	20000402 	.word	0x20000402
 80015e0:	20000408 	.word	0x20000408
 80015e4:	2000040c 	.word	0x2000040c
 80015e8:	20000410 	.word	0x20000410
 80015ec:	20000414 	.word	0x20000414
 80015f0:	20000424 	.word	0x20000424
 80015f4:	20002c78 	.word	0x20002c78
 80015f8:	20000427 	.word	0x20000427
 80015fc:	20000444 	.word	0x20000444
 8001600:	2000042b 	.word	0x2000042b
 8001604:	20000448 	.word	0x20000448
 8001608:	2000042f 	.word	0x2000042f
 800160c:	2000044c 	.word	0x2000044c
 8001610:	20000433 	.word	0x20000433
 8001614:	20000450 	.word	0x20000450
 8001618:	20000437 	.word	0x20000437
 800161c:	20000454 	.word	0x20000454
 8001620:	2000043b 	.word	0x2000043b
 8001624:	20000458 	.word	0x20000458
 8001628:	2000043f 	.word	0x2000043f
 800162c:	2000045c 	.word	0x2000045c
 8001630:	40021000 	.word	0x40021000

08001634 <StartrosserialTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartrosserialTask */
void StartrosserialTask(void const * argument)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartrosserialTask */
	setup();
 800163c:	f001 ff18 	bl	8003470 <setup>
  for(;;)
  {
//	  calculate_odometry();
//	  loop();
//    osDelay(20);
	  tick++;
 8001640:	4b05      	ldr	r3, [pc, #20]	; (8001658 <StartrosserialTask+0x24>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	3301      	adds	r3, #1
 8001646:	4a04      	ldr	r2, [pc, #16]	; (8001658 <StartrosserialTask+0x24>)
 8001648:	6013      	str	r3, [r2, #0]
	  loop();
 800164a:	f001 ff59 	bl	8003500 <loop>
	  osDelay(20);
 800164e:	2014      	movs	r0, #20
 8001650:	f00a f8a7 	bl	800b7a2 <osDelay>
	  tick++;
 8001654:	e7f4      	b.n	8001640 <StartrosserialTask+0xc>
 8001656:	bf00      	nop
 8001658:	20000470 	.word	0x20000470

0800165c <Startout_motorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startout_motorTask */
void Startout_motorTask(void const * argument)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startout_motorTask */
  /* Infinite loop */
  for(;;)
  {
	  //=================CONTROL SPEED==================//
	  	  if(joystick_increase_speed == 1 && lock_increase_speed == 0){
 8001664:	4b88      	ldr	r3, [pc, #544]	; (8001888 <Startout_motorTask+0x22c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d10b      	bne.n	8001684 <Startout_motorTask+0x28>
 800166c:	4b87      	ldr	r3, [pc, #540]	; (800188c <Startout_motorTask+0x230>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d107      	bne.n	8001684 <Startout_motorTask+0x28>
	  		  speed++;
 8001674:	4b86      	ldr	r3, [pc, #536]	; (8001890 <Startout_motorTask+0x234>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	3301      	adds	r3, #1
 800167a:	4a85      	ldr	r2, [pc, #532]	; (8001890 <Startout_motorTask+0x234>)
 800167c:	6013      	str	r3, [r2, #0]
	  		  lock_increase_speed = 1;
 800167e:	4b83      	ldr	r3, [pc, #524]	; (800188c <Startout_motorTask+0x230>)
 8001680:	2201      	movs	r2, #1
 8001682:	601a      	str	r2, [r3, #0]
	  	  }
	  	  if(joystick_increase_speed == 0 && lock_increase_speed == 1){
 8001684:	4b80      	ldr	r3, [pc, #512]	; (8001888 <Startout_motorTask+0x22c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d106      	bne.n	800169a <Startout_motorTask+0x3e>
 800168c:	4b7f      	ldr	r3, [pc, #508]	; (800188c <Startout_motorTask+0x230>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d102      	bne.n	800169a <Startout_motorTask+0x3e>
	  		  lock_increase_speed = 0;
 8001694:	4b7d      	ldr	r3, [pc, #500]	; (800188c <Startout_motorTask+0x230>)
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
	  	  }

	  	  if(joystick_decrease_speed == 1 && lock_decrease_speed == 0){
 800169a:	4b7e      	ldr	r3, [pc, #504]	; (8001894 <Startout_motorTask+0x238>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d10b      	bne.n	80016ba <Startout_motorTask+0x5e>
 80016a2:	4b7d      	ldr	r3, [pc, #500]	; (8001898 <Startout_motorTask+0x23c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d107      	bne.n	80016ba <Startout_motorTask+0x5e>
	  		  speed--;
 80016aa:	4b79      	ldr	r3, [pc, #484]	; (8001890 <Startout_motorTask+0x234>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	4a77      	ldr	r2, [pc, #476]	; (8001890 <Startout_motorTask+0x234>)
 80016b2:	6013      	str	r3, [r2, #0]
	  		  lock_decrease_speed = 1;
 80016b4:	4b78      	ldr	r3, [pc, #480]	; (8001898 <Startout_motorTask+0x23c>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	601a      	str	r2, [r3, #0]
	  	  }
	  	  if(joystick_decrease_speed == 0 && lock_decrease_speed == 1){
 80016ba:	4b76      	ldr	r3, [pc, #472]	; (8001894 <Startout_motorTask+0x238>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d106      	bne.n	80016d0 <Startout_motorTask+0x74>
 80016c2:	4b75      	ldr	r3, [pc, #468]	; (8001898 <Startout_motorTask+0x23c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d102      	bne.n	80016d0 <Startout_motorTask+0x74>
	  		  lock_decrease_speed = 0;
 80016ca:	4b73      	ldr	r3, [pc, #460]	; (8001898 <Startout_motorTask+0x23c>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
	    	  }

	  	  if(speed > 2){
 80016d0:	4b6f      	ldr	r3, [pc, #444]	; (8001890 <Startout_motorTask+0x234>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	dd02      	ble.n	80016de <Startout_motorTask+0x82>
	  		  speed = 0;
 80016d8:	4b6d      	ldr	r3, [pc, #436]	; (8001890 <Startout_motorTask+0x234>)
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
	  	  }
	  	  if(speed < 0){
 80016de:	4b6c      	ldr	r3, [pc, #432]	; (8001890 <Startout_motorTask+0x234>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	da02      	bge.n	80016ec <Startout_motorTask+0x90>
	  		  speed = 2;
 80016e6:	4b6a      	ldr	r3, [pc, #424]	; (8001890 <Startout_motorTask+0x234>)
 80016e8:	2202      	movs	r2, #2
 80016ea:	601a      	str	r2, [r3, #0]
	  	  }

	  	  if(speed == 0){
 80016ec:	4b68      	ldr	r3, [pc, #416]	; (8001890 <Startout_motorTask+0x234>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d112      	bne.n	800171a <Startout_motorTask+0xbe>
	  		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 80016f4:	2201      	movs	r2, #1
 80016f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016fa:	4868      	ldr	r0, [pc, #416]	; (800189c <Startout_motorTask+0x240>)
 80016fc:	f006 ffa0 	bl	8008640 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001700:	2200      	movs	r2, #0
 8001702:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001706:	4866      	ldr	r0, [pc, #408]	; (80018a0 <Startout_motorTask+0x244>)
 8001708:	f006 ff9a 	bl	8008640 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800170c:	2200      	movs	r2, #0
 800170e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001712:	4863      	ldr	r0, [pc, #396]	; (80018a0 <Startout_motorTask+0x244>)
 8001714:	f006 ff94 	bl	8008640 <HAL_GPIO_WritePin>
 8001718:	e02c      	b.n	8001774 <Startout_motorTask+0x118>
	  	  }else if(speed == 1){
 800171a:	4b5d      	ldr	r3, [pc, #372]	; (8001890 <Startout_motorTask+0x234>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d112      	bne.n	8001748 <Startout_motorTask+0xec>
	  		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8001722:	2200      	movs	r2, #0
 8001724:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001728:	485c      	ldr	r0, [pc, #368]	; (800189c <Startout_motorTask+0x240>)
 800172a:	f006 ff89 	bl	8008640 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800172e:	2201      	movs	r2, #1
 8001730:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001734:	485a      	ldr	r0, [pc, #360]	; (80018a0 <Startout_motorTask+0x244>)
 8001736:	f006 ff83 	bl	8008640 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800173a:	2200      	movs	r2, #0
 800173c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001740:	4857      	ldr	r0, [pc, #348]	; (80018a0 <Startout_motorTask+0x244>)
 8001742:	f006 ff7d 	bl	8008640 <HAL_GPIO_WritePin>
 8001746:	e015      	b.n	8001774 <Startout_motorTask+0x118>
	  	  }else if(speed == 2){
 8001748:	4b51      	ldr	r3, [pc, #324]	; (8001890 <Startout_motorTask+0x234>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b02      	cmp	r3, #2
 800174e:	d111      	bne.n	8001774 <Startout_motorTask+0x118>
	  		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8001750:	2200      	movs	r2, #0
 8001752:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001756:	4851      	ldr	r0, [pc, #324]	; (800189c <Startout_motorTask+0x240>)
 8001758:	f006 ff72 	bl	8008640 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800175c:	2200      	movs	r2, #0
 800175e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001762:	484f      	ldr	r0, [pc, #316]	; (80018a0 <Startout_motorTask+0x244>)
 8001764:	f006 ff6c 	bl	8008640 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001768:	2201      	movs	r2, #1
 800176a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800176e:	484c      	ldr	r0, [pc, #304]	; (80018a0 <Startout_motorTask+0x244>)
 8001770:	f006 ff66 	bl	8008640 <HAL_GPIO_WritePin>
	  	  }

	  	  //=====================SELECT MODE COMM/STM=================//
	  	  if(mode == 1){
 8001774:	4b4b      	ldr	r3, [pc, #300]	; (80018a4 <Startout_motorTask+0x248>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d10c      	bne.n	8001796 <Startout_motorTask+0x13a>
	  		motor_VectorKinematic(x_velocity, y_velocity, angular_velocity);
 800177c:	4b4a      	ldr	r3, [pc, #296]	; (80018a8 <Startout_motorTask+0x24c>)
 800177e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001782:	4a4a      	ldr	r2, [pc, #296]	; (80018ac <Startout_motorTask+0x250>)
 8001784:	f9b2 1000 	ldrsh.w	r1, [r2]
 8001788:	4a49      	ldr	r2, [pc, #292]	; (80018b0 <Startout_motorTask+0x254>)
 800178a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff fb92 	bl	8000eb8 <motor_VectorKinematic>
 8001794:	e012      	b.n	80017bc <Startout_motorTask+0x160>
	  	  }
	  	  else if(mode == 0){
 8001796:	4b43      	ldr	r3, [pc, #268]	; (80018a4 <Startout_motorTask+0x248>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d10e      	bne.n	80017bc <Startout_motorTask+0x160>
	  		motor_VectorKinematic(joystick_x, joystick_y, joystick_z);
 800179e:	4b45      	ldr	r3, [pc, #276]	; (80018b4 <Startout_motorTask+0x258>)
 80017a0:	f993 3000 	ldrsb.w	r3, [r3]
 80017a4:	b21b      	sxth	r3, r3
 80017a6:	4a44      	ldr	r2, [pc, #272]	; (80018b8 <Startout_motorTask+0x25c>)
 80017a8:	f992 2000 	ldrsb.w	r2, [r2]
 80017ac:	b211      	sxth	r1, r2
 80017ae:	4a43      	ldr	r2, [pc, #268]	; (80018bc <Startout_motorTask+0x260>)
 80017b0:	f992 2000 	ldrsb.w	r2, [r2]
 80017b4:	b212      	sxth	r2, r2
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff fb7e 	bl	8000eb8 <motor_VectorKinematic>
	  	  }
	  	  //========================OUTPUT PWM===========================//
	  	  if (outputPWM[0] < 0){
 80017bc:	4b40      	ldr	r3, [pc, #256]	; (80018c0 <Startout_motorTask+0x264>)
 80017be:	edd3 7a00 	vldr	s15, [r3]
 80017c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ca:	d50c      	bpl.n	80017e6 <Startout_motorTask+0x18a>
	  		  HAL_GPIO_WritePin(MOTOR1A_GPIO_Port, MOTOR1A_Pin, GPIO_PIN_SET);
 80017cc:	2201      	movs	r2, #1
 80017ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017d2:	483c      	ldr	r0, [pc, #240]	; (80018c4 <Startout_motorTask+0x268>)
 80017d4:	f006 ff34 	bl	8008640 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(MOTOR1B_GPIO_Port, MOTOR1B_Pin, GPIO_PIN_RESET);
 80017d8:	2200      	movs	r2, #0
 80017da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017de:	4839      	ldr	r0, [pc, #228]	; (80018c4 <Startout_motorTask+0x268>)
 80017e0:	f006 ff2e 	bl	8008640 <HAL_GPIO_WritePin>
 80017e4:	e013      	b.n	800180e <Startout_motorTask+0x1b2>
	  	 	  }
	  	  else if (outputPWM[0] > 0){
 80017e6:	4b36      	ldr	r3, [pc, #216]	; (80018c0 <Startout_motorTask+0x264>)
 80017e8:	edd3 7a00 	vldr	s15, [r3]
 80017ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f4:	dd0b      	ble.n	800180e <Startout_motorTask+0x1b2>
	   		  HAL_GPIO_WritePin(MOTOR1A_GPIO_Port, MOTOR1A_Pin, GPIO_PIN_RESET);
 80017f6:	2200      	movs	r2, #0
 80017f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017fc:	4831      	ldr	r0, [pc, #196]	; (80018c4 <Startout_motorTask+0x268>)
 80017fe:	f006 ff1f 	bl	8008640 <HAL_GPIO_WritePin>
	   		  HAL_GPIO_WritePin(MOTOR1B_GPIO_Port, MOTOR1B_Pin, GPIO_PIN_SET);
 8001802:	2201      	movs	r2, #1
 8001804:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001808:	482e      	ldr	r0, [pc, #184]	; (80018c4 <Startout_motorTask+0x268>)
 800180a:	f006 ff19 	bl	8008640 <HAL_GPIO_WritePin>
	   	  }
	   	  //==============================================================================
	   	  if (outputPWM[1] < 0){
 800180e:	4b2c      	ldr	r3, [pc, #176]	; (80018c0 <Startout_motorTask+0x264>)
 8001810:	edd3 7a01 	vldr	s15, [r3, #4]
 8001814:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181c:	d50b      	bpl.n	8001836 <Startout_motorTask+0x1da>
	   		  HAL_GPIO_WritePin(MOTOR2A_GPIO_Port, MOTOR2A_Pin, GPIO_PIN_SET);
 800181e:	2201      	movs	r2, #1
 8001820:	2180      	movs	r1, #128	; 0x80
 8001822:	481e      	ldr	r0, [pc, #120]	; (800189c <Startout_motorTask+0x240>)
 8001824:	f006 ff0c 	bl	8008640 <HAL_GPIO_WritePin>
	   		  HAL_GPIO_WritePin(MOTOR2B_GPIO_Port, MOTOR2B_Pin, GPIO_PIN_RESET);
 8001828:	2200      	movs	r2, #0
 800182a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800182e:	481b      	ldr	r0, [pc, #108]	; (800189c <Startout_motorTask+0x240>)
 8001830:	f006 ff06 	bl	8008640 <HAL_GPIO_WritePin>
 8001834:	e012      	b.n	800185c <Startout_motorTask+0x200>
	   	  }
	   	  else if (outputPWM[1] > 0){
 8001836:	4b22      	ldr	r3, [pc, #136]	; (80018c0 <Startout_motorTask+0x264>)
 8001838:	edd3 7a01 	vldr	s15, [r3, #4]
 800183c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001844:	dd0a      	ble.n	800185c <Startout_motorTask+0x200>
	   		  HAL_GPIO_WritePin(MOTOR2A_GPIO_Port, MOTOR2A_Pin, GPIO_PIN_RESET);
 8001846:	2200      	movs	r2, #0
 8001848:	2180      	movs	r1, #128	; 0x80
 800184a:	4814      	ldr	r0, [pc, #80]	; (800189c <Startout_motorTask+0x240>)
 800184c:	f006 fef8 	bl	8008640 <HAL_GPIO_WritePin>
	   		  HAL_GPIO_WritePin(MOTOR2B_GPIO_Port, MOTOR2B_Pin, GPIO_PIN_SET);
 8001850:	2201      	movs	r2, #1
 8001852:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001856:	4811      	ldr	r0, [pc, #68]	; (800189c <Startout_motorTask+0x240>)
 8001858:	f006 fef2 	bl	8008640 <HAL_GPIO_WritePin>
	   	  }
	   	  //==============================================================================
	   	  if (outputPWM[2] < 0){
 800185c:	4b18      	ldr	r3, [pc, #96]	; (80018c0 <Startout_motorTask+0x264>)
 800185e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001862:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800186a:	d52f      	bpl.n	80018cc <Startout_motorTask+0x270>
	   		  HAL_GPIO_WritePin(MOTOR3A_GPIO_Port, MOTOR3A_Pin, GPIO_PIN_SET);
 800186c:	2201      	movs	r2, #1
 800186e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001872:	4815      	ldr	r0, [pc, #84]	; (80018c8 <Startout_motorTask+0x26c>)
 8001874:	f006 fee4 	bl	8008640 <HAL_GPIO_WritePin>
	   		  HAL_GPIO_WritePin(MOTOR3B_GPIO_Port, MOTOR3B_Pin, GPIO_PIN_RESET);
 8001878:	2200      	movs	r2, #0
 800187a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800187e:	4812      	ldr	r0, [pc, #72]	; (80018c8 <Startout_motorTask+0x26c>)
 8001880:	f006 fede 	bl	8008640 <HAL_GPIO_WritePin>
 8001884:	e036      	b.n	80018f4 <Startout_motorTask+0x298>
 8001886:	bf00      	nop
 8001888:	20000410 	.word	0x20000410
 800188c:	2000041c 	.word	0x2000041c
 8001890:	20000418 	.word	0x20000418
 8001894:	20000414 	.word	0x20000414
 8001898:	20000420 	.word	0x20000420
 800189c:	40021000 	.word	0x40021000
 80018a0:	40020000 	.word	0x40020000
 80018a4:	2000040c 	.word	0x2000040c
 80018a8:	20000468 	.word	0x20000468
 80018ac:	2000046a 	.word	0x2000046a
 80018b0:	2000046c 	.word	0x2000046c
 80018b4:	20000400 	.word	0x20000400
 80018b8:	20000401 	.word	0x20000401
 80018bc:	20000402 	.word	0x20000402
 80018c0:	200003e4 	.word	0x200003e4
 80018c4:	40020800 	.word	0x40020800
 80018c8:	40020c00 	.word	0x40020c00
	   	  }
	   	  else if (outputPWM[2] > 0)
 80018cc:	4b2b      	ldr	r3, [pc, #172]	; (800197c <Startout_motorTask+0x320>)
 80018ce:	edd3 7a02 	vldr	s15, [r3, #8]
 80018d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018da:	dd0b      	ble.n	80018f4 <Startout_motorTask+0x298>
	   	  {
	   		  HAL_GPIO_WritePin(MOTOR3A_GPIO_Port, MOTOR3A_Pin, GPIO_PIN_RESET);
 80018dc:	2200      	movs	r2, #0
 80018de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018e2:	4827      	ldr	r0, [pc, #156]	; (8001980 <Startout_motorTask+0x324>)
 80018e4:	f006 feac 	bl	8008640 <HAL_GPIO_WritePin>
	   		  HAL_GPIO_WritePin(MOTOR3B_GPIO_Port, MOTOR3B_Pin, GPIO_PIN_SET);
 80018e8:	2201      	movs	r2, #1
 80018ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018ee:	4824      	ldr	r0, [pc, #144]	; (8001980 <Startout_motorTask+0x324>)
 80018f0:	f006 fea6 	bl	8008640 <HAL_GPIO_WritePin>
	   	  }

	   	  //========================SAFETY CONTROL PWM=====================//
	   	  if(joystick_bt_counter == 299 || joystick_mode == 0){
 80018f4:	4b23      	ldr	r3, [pc, #140]	; (8001984 <Startout_motorTask+0x328>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f240 122b 	movw	r2, #299	; 0x12b
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d003      	beq.n	8001908 <Startout_motorTask+0x2ac>
 8001900:	4b21      	ldr	r3, [pc, #132]	; (8001988 <Startout_motorTask+0x32c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d10b      	bne.n	8001920 <Startout_motorTask+0x2c4>
	   		  outputPWM[0] = 0;
 8001908:	4b1c      	ldr	r3, [pc, #112]	; (800197c <Startout_motorTask+0x320>)
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
	   		  outputPWM[1] = 0;
 8001910:	4b1a      	ldr	r3, [pc, #104]	; (800197c <Startout_motorTask+0x320>)
 8001912:	f04f 0200 	mov.w	r2, #0
 8001916:	605a      	str	r2, [r3, #4]
	   		  outputPWM[2] = 0;
 8001918:	4b18      	ldr	r3, [pc, #96]	; (800197c <Startout_motorTask+0x320>)
 800191a:	f04f 0200 	mov.w	r2, #0
 800191e:	609a      	str	r2, [r3, #8]
	   	  }

	   	  __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, abs(outputPWM[0]));
 8001920:	4b16      	ldr	r3, [pc, #88]	; (800197c <Startout_motorTask+0x320>)
 8001922:	edd3 7a00 	vldr	s15, [r3]
 8001926:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800192a:	ee17 3a90 	vmov	r3, s15
 800192e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001932:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001936:	4b15      	ldr	r3, [pc, #84]	; (800198c <Startout_motorTask+0x330>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	635a      	str	r2, [r3, #52]	; 0x34
	   	  __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, abs(outputPWM[1]));
 800193c:	4b0f      	ldr	r3, [pc, #60]	; (800197c <Startout_motorTask+0x320>)
 800193e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001942:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001946:	ee17 3a90 	vmov	r3, s15
 800194a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800194e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001952:	4b0e      	ldr	r3, [pc, #56]	; (800198c <Startout_motorTask+0x330>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	639a      	str	r2, [r3, #56]	; 0x38
	   	  __HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, abs(outputPWM[2]));
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <Startout_motorTask+0x320>)
 800195a:	edd3 7a02 	vldr	s15, [r3, #8]
 800195e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001962:	ee17 3a90 	vmov	r3, s15
 8001966:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800196a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800196e:	4b08      	ldr	r3, [pc, #32]	; (8001990 <Startout_motorTask+0x334>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	639a      	str	r2, [r3, #56]	; 0x38

	   	  osDelay(1);
 8001974:	2001      	movs	r0, #1
 8001976:	f009 ff14 	bl	800b7a2 <osDelay>
	  	  if(joystick_increase_speed == 1 && lock_increase_speed == 0){
 800197a:	e673      	b.n	8001664 <Startout_motorTask+0x8>
 800197c:	200003e4 	.word	0x200003e4
 8001980:	40020c00 	.word	0x40020c00
 8001984:	20000404 	.word	0x20000404
 8001988:	20000408 	.word	0x20000408
 800198c:	20002ba0 	.word	0x20002ba0
 8001990:	20002be8 	.word	0x20002be8

08001994 <MX_GPIO_Init>:
     PD1   ------> CAN1_TX
     PB8   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08c      	sub	sp, #48	; 0x30
 8001998:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199a:	f107 031c 	add.w	r3, r7, #28
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	605a      	str	r2, [r3, #4]
 80019a4:	609a      	str	r2, [r3, #8]
 80019a6:	60da      	str	r2, [r3, #12]
 80019a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	61bb      	str	r3, [r7, #24]
 80019ae:	4b96      	ldr	r3, [pc, #600]	; (8001c08 <MX_GPIO_Init+0x274>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	4a95      	ldr	r2, [pc, #596]	; (8001c08 <MX_GPIO_Init+0x274>)
 80019b4:	f043 0310 	orr.w	r3, r3, #16
 80019b8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ba:	4b93      	ldr	r3, [pc, #588]	; (8001c08 <MX_GPIO_Init+0x274>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	f003 0310 	and.w	r3, r3, #16
 80019c2:	61bb      	str	r3, [r7, #24]
 80019c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	617b      	str	r3, [r7, #20]
 80019ca:	4b8f      	ldr	r3, [pc, #572]	; (8001c08 <MX_GPIO_Init+0x274>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	4a8e      	ldr	r2, [pc, #568]	; (8001c08 <MX_GPIO_Init+0x274>)
 80019d0:	f043 0304 	orr.w	r3, r3, #4
 80019d4:	6313      	str	r3, [r2, #48]	; 0x30
 80019d6:	4b8c      	ldr	r3, [pc, #560]	; (8001c08 <MX_GPIO_Init+0x274>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	f003 0304 	and.w	r3, r3, #4
 80019de:	617b      	str	r3, [r7, #20]
 80019e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	4b88      	ldr	r3, [pc, #544]	; (8001c08 <MX_GPIO_Init+0x274>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	4a87      	ldr	r2, [pc, #540]	; (8001c08 <MX_GPIO_Init+0x274>)
 80019ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019f0:	6313      	str	r3, [r2, #48]	; 0x30
 80019f2:	4b85      	ldr	r3, [pc, #532]	; (8001c08 <MX_GPIO_Init+0x274>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019fa:	613b      	str	r3, [r7, #16]
 80019fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	4b81      	ldr	r3, [pc, #516]	; (8001c08 <MX_GPIO_Init+0x274>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	4a80      	ldr	r2, [pc, #512]	; (8001c08 <MX_GPIO_Init+0x274>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0e:	4b7e      	ldr	r3, [pc, #504]	; (8001c08 <MX_GPIO_Init+0x274>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	4b7a      	ldr	r3, [pc, #488]	; (8001c08 <MX_GPIO_Init+0x274>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	4a79      	ldr	r2, [pc, #484]	; (8001c08 <MX_GPIO_Init+0x274>)
 8001a24:	f043 0302 	orr.w	r3, r3, #2
 8001a28:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2a:	4b77      	ldr	r3, [pc, #476]	; (8001c08 <MX_GPIO_Init+0x274>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	60bb      	str	r3, [r7, #8]
 8001a34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	607b      	str	r3, [r7, #4]
 8001a3a:	4b73      	ldr	r3, [pc, #460]	; (8001c08 <MX_GPIO_Init+0x274>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	4a72      	ldr	r2, [pc, #456]	; (8001c08 <MX_GPIO_Init+0x274>)
 8001a40:	f043 0308 	orr.w	r3, r3, #8
 8001a44:	6313      	str	r3, [r2, #48]	; 0x30
 8001a46:	4b70      	ldr	r3, [pc, #448]	; (8001c08 <MX_GPIO_Init+0x274>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	f003 0308 	and.w	r3, r3, #8
 8001a4e:	607b      	str	r3, [r7, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|MOTOR2A_Pin|MOTOR2B_Pin|GPIO_PIN_10
 8001a52:	2200      	movs	r2, #0
 8001a54:	f24f 5189 	movw	r1, #62857	; 0xf589
 8001a58:	486c      	ldr	r0, [pc, #432]	; (8001c0c <MX_GPIO_Init+0x278>)
 8001a5a:	f006 fdf1 	bl	8008640 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001a5e:	2201      	movs	r2, #1
 8001a60:	2101      	movs	r1, #1
 8001a62:	486b      	ldr	r0, [pc, #428]	; (8001c10 <MX_GPIO_Init+0x27c>)
 8001a64:	f006 fdec 	bl	8008640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD1_Pin|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f641 0102 	movw	r1, #6146	; 0x1802
 8001a6e:	4869      	ldr	r0, [pc, #420]	; (8001c14 <MX_GPIO_Init+0x280>)
 8001a70:	f006 fde6 	bl	8008640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|MOTOR1A_Pin|MOTOR1B_Pin, GPIO_PIN_RESET);
 8001a74:	2200      	movs	r2, #0
 8001a76:	f44f 714c 	mov.w	r1, #816	; 0x330
 8001a7a:	4865      	ldr	r0, [pc, #404]	; (8001c10 <MX_GPIO_Init+0x27c>)
 8001a7c:	f006 fde0 	bl	8008640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MOTOR3A_Pin|MOTOR3B_Pin|Audio_RST_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001a80:	2200      	movs	r2, #0
 8001a82:	f44f 6145 	mov.w	r1, #3152	; 0xc50
 8001a86:	4864      	ldr	r0, [pc, #400]	; (8001c18 <MX_GPIO_Init+0x284>)
 8001a88:	f006 fdda 	bl	8008640 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PEPin PEPin PE10
                           PE12 PE13 PE14 PE15
                           PEPin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|MOTOR2A_Pin|MOTOR2B_Pin|GPIO_PIN_10
 8001a8c:	f24f 5389 	movw	r3, #62857	; 0xf589
 8001a90:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a92:	2301      	movs	r3, #1
 8001a94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a9e:	f107 031c 	add.w	r3, r7, #28
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4859      	ldr	r0, [pc, #356]	; (8001c0c <MX_GPIO_Init+0x278>)
 8001aa6:	f006 fc2f 	bl	8008308 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PC4 PC5 PCPin
                           PCPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_4|GPIO_PIN_5|MOTOR1A_Pin
 8001aaa:	f240 3331 	movw	r3, #817	; 0x331
 8001aae:	61fb      	str	r3, [r7, #28]
                          |MOTOR1B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001abc:	f107 031c 	add.w	r3, r7, #28
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4853      	ldr	r0, [pc, #332]	; (8001c10 <MX_GPIO_Init+0x27c>)
 8001ac4:	f006 fc20 	bl	8008308 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001ac8:	2306      	movs	r3, #6
 8001aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001acc:	2303      	movs	r3, #3
 8001ace:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ad4:	f107 031c 	add.w	r3, r7, #28
 8001ad8:	4619      	mov	r1, r3
 8001ada:	484d      	ldr	r0, [pc, #308]	; (8001c10 <MX_GPIO_Init+0x27c>)
 8001adc:	f006 fc14 	bl	8008308 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001ae4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001ae8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001aee:	f107 031c 	add.w	r3, r7, #28
 8001af2:	4619      	mov	r1, r3
 8001af4:	4847      	ldr	r0, [pc, #284]	; (8001c14 <MX_GPIO_Init+0x280>)
 8001af6:	f006 fc07 	bl	8008308 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA11 PA12 */
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_11|GPIO_PIN_12;
 8001afa:	f641 0302 	movw	r3, #6146	; 0x1802
 8001afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b00:	2301      	movs	r3, #1
 8001b02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0c:	f107 031c 	add.w	r3, r7, #28
 8001b10:	4619      	mov	r1, r3
 8001b12:	4840      	ldr	r0, [pc, #256]	; (8001c14 <MX_GPIO_Init+0x280>)
 8001b14:	f006 fbf8 	bl	8008308 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b18:	2310      	movs	r3, #16
 8001b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b24:	2303      	movs	r3, #3
 8001b26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b28:	2305      	movs	r3, #5
 8001b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2c:	f107 031c 	add.w	r3, r7, #28
 8001b30:	4619      	mov	r1, r3
 8001b32:	4838      	ldr	r0, [pc, #224]	; (8001c14 <MX_GPIO_Init+0x280>)
 8001b34:	f006 fbe8 	bl	8008308 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8001b38:	f243 0307 	movw	r3, #12295	; 0x3007
 8001b3c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b46:	f107 031c 	add.w	r3, r7, #28
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4833      	ldr	r0, [pc, #204]	; (8001c1c <MX_GPIO_Init+0x288>)
 8001b4e:	f006 fbdb 	bl	8008308 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = MOTOR3A_Pin|MOTOR3B_Pin|Audio_RST_Pin|LED2_Pin;
 8001b52:	f44f 6345 	mov.w	r3, #3152	; 0xc50
 8001b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b60:	2300      	movs	r3, #0
 8001b62:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b64:	f107 031c 	add.w	r3, r7, #28
 8001b68:	4619      	mov	r1, r3
 8001b6a:	482b      	ldr	r0, [pc, #172]	; (8001c18 <MX_GPIO_Init+0x284>)
 8001b6c:	f006 fbcc 	bl	8008308 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001b70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b76:	2303      	movs	r3, #3
 8001b78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b7e:	f107 031c 	add.w	r3, r7, #28
 8001b82:	4619      	mov	r1, r3
 8001b84:	4824      	ldr	r0, [pc, #144]	; (8001c18 <MX_GPIO_Init+0x284>)
 8001b86:	f006 fbbf 	bl	8008308 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b96:	2303      	movs	r3, #3
 8001b98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001b9a:	2309      	movs	r3, #9
 8001b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b9e:	f107 031c 	add.w	r3, r7, #28
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	481c      	ldr	r0, [pc, #112]	; (8001c18 <MX_GPIO_Init+0x284>)
 8001ba6:	f006 fbaf 	bl	8008308 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001baa:	2320      	movs	r3, #32
 8001bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001bb6:	f107 031c 	add.w	r3, r7, #28
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4816      	ldr	r0, [pc, #88]	; (8001c18 <MX_GPIO_Init+0x284>)
 8001bbe:	f006 fba3 	bl	8008308 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001bc2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bc8:	2312      	movs	r3, #18
 8001bca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bd4:	2304      	movs	r3, #4
 8001bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd8:	f107 031c 	add.w	r3, r7, #28
 8001bdc:	4619      	mov	r1, r3
 8001bde:	480f      	ldr	r0, [pc, #60]	; (8001c1c <MX_GPIO_Init+0x288>)
 8001be0:	f006 fb92 	bl	8008308 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001be4:	2302      	movs	r3, #2
 8001be6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001be8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001bec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001bf2:	f107 031c 	add.w	r3, r7, #28
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4804      	ldr	r0, [pc, #16]	; (8001c0c <MX_GPIO_Init+0x278>)
 8001bfa:	f006 fb85 	bl	8008308 <HAL_GPIO_Init>

}
 8001bfe:	bf00      	nop
 8001c00:	3730      	adds	r7, #48	; 0x30
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	40020800 	.word	0x40020800
 8001c14:	40020000 	.word	0x40020000
 8001c18:	40020c00 	.word	0x40020c00
 8001c1c:	40020400 	.word	0x40020400

08001c20 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c30:	d105      	bne.n	8001c3e <HAL_TIM_IC_CaptureCallback+0x1e>
		encoder[0] = __HAL_TIM_GET_COUNTER(&htim2);
 8001c32:	4b1c      	ldr	r3, [pc, #112]	; (8001ca4 <HAL_TIM_IC_CaptureCallback+0x84>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ca8 <HAL_TIM_IC_CaptureCallback+0x88>)
 8001c3c:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM3){
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a1a      	ldr	r2, [pc, #104]	; (8001cac <HAL_TIM_IC_CaptureCallback+0x8c>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d105      	bne.n	8001c54 <HAL_TIM_IC_CaptureCallback+0x34>
		encoder[1] = __HAL_TIM_GET_COUNTER(&htim3);
 8001c48:	4b19      	ldr	r3, [pc, #100]	; (8001cb0 <HAL_TIM_IC_CaptureCallback+0x90>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4e:	461a      	mov	r2, r3
 8001c50:	4b15      	ldr	r3, [pc, #84]	; (8001ca8 <HAL_TIM_IC_CaptureCallback+0x88>)
 8001c52:	605a      	str	r2, [r3, #4]
	}
	if(htim->Instance == TIM4){
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a16      	ldr	r2, [pc, #88]	; (8001cb4 <HAL_TIM_IC_CaptureCallback+0x94>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d105      	bne.n	8001c6a <HAL_TIM_IC_CaptureCallback+0x4a>
		encoder[2] = __HAL_TIM_GET_COUNTER(&htim4);
 8001c5e:	4b16      	ldr	r3, [pc, #88]	; (8001cb8 <HAL_TIM_IC_CaptureCallback+0x98>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c64:	461a      	mov	r2, r3
 8001c66:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <HAL_TIM_IC_CaptureCallback+0x88>)
 8001c68:	609a      	str	r2, [r3, #8]
	}

	if(htim->Instance == TIM1){
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a13      	ldr	r2, [pc, #76]	; (8001cbc <HAL_TIM_IC_CaptureCallback+0x9c>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d105      	bne.n	8001c80 <HAL_TIM_IC_CaptureCallback+0x60>
		odometry[0] = __HAL_TIM_GET_COUNTER(&htim1);
 8001c74:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8001c7e:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM8){
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a10      	ldr	r2, [pc, #64]	; (8001cc8 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d105      	bne.n	8001c96 <HAL_TIM_IC_CaptureCallback+0x76>
		odometry[1] = __HAL_TIM_GET_COUNTER(&htim8);
 8001c8a:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <HAL_TIM_IC_CaptureCallback+0xac>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c90:	461a      	mov	r2, r3
 8001c92:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8001c94:	605a      	str	r2, [r3, #4]
	}
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	20002a38 	.word	0x20002a38
 8001ca8:	20000380 	.word	0x20000380
 8001cac:	40000400 	.word	0x40000400
 8001cb0:	20002a80 	.word	0x20002a80
 8001cb4:	40000800 	.word	0x40000800
 8001cb8:	20002ac8 	.word	0x20002ac8
 8001cbc:	40010000 	.word	0x40010000
 8001cc0:	200029f0 	.word	0x200029f0
 8001cc4:	20000460 	.word	0x20000460
 8001cc8:	40010400 	.word	0x40010400
 8001ccc:	20002b58 	.word	0x20002b58

08001cd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cd4:	f005 fdf2 	bl	80078bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cd8:	f000 f862 	bl	8001da0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cdc:	f7ff fe5a 	bl	8001994 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ce0:	f7ff faae 	bl	8001240 <MX_DMA_Init>
  MX_TIM1_Init();
 8001ce4:	f004 fd88 	bl	80067f8 <MX_TIM1_Init>
  MX_TIM9_Init();
 8001ce8:	f004 ff68 	bl	8006bbc <MX_TIM9_Init>
  MX_TIM4_Init();
 8001cec:	f004 fe84 	bl	80069f8 <MX_TIM4_Init>
  MX_TIM3_Init();
 8001cf0:	f004 fe2e 	bl	8006950 <MX_TIM3_Init>
  MX_UART4_Init();
 8001cf4:	f005 faba 	bl	800726c <MX_UART4_Init>
  MX_USART3_UART_Init();
 8001cf8:	f005 fb60 	bl	80073bc <MX_USART3_UART_Init>
  MX_TIM12_Init();
 8001cfc:	f004 ffca 	bl	8006c94 <MX_TIM12_Init>
  MX_USART2_UART_Init();
 8001d00:	f005 fb32 	bl	8007368 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001d04:	f004 fdd0 	bl	80068a8 <MX_TIM2_Init>
  MX_TIM8_Init();
 8001d08:	f004 ff00 	bl	8006b0c <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8001d0c:	f005 fb02 	bl	8007314 <MX_USART1_UART_Init>
  MX_TIM7_Init();
 8001d10:	f004 fec6 	bl	8006aa0 <MX_TIM7_Init>
  MX_TIM13_Init();
 8001d14:	f005 f82a 	bl	8006d6c <MX_TIM13_Init>
  MX_UART5_Init();
 8001d18:	f005 fad2 	bl	80072c0 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 8001d1c:	4817      	ldr	r0, [pc, #92]	; (8001d7c <main+0xac>)
 8001d1e:	f007 f9c3 	bl	80090a8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim13);
 8001d22:	4817      	ldr	r0, [pc, #92]	; (8001d80 <main+0xb0>)
 8001d24:	f007 f9c0 	bl	80090a8 <HAL_TIM_Base_Start_IT>

  //============ACTUATOR MOTOR============
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);//M1
 8001d28:	2100      	movs	r1, #0
 8001d2a:	4816      	ldr	r0, [pc, #88]	; (8001d84 <main+0xb4>)
 8001d2c:	f007 fa86 	bl	800923c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);//M2
 8001d30:	2104      	movs	r1, #4
 8001d32:	4814      	ldr	r0, [pc, #80]	; (8001d84 <main+0xb4>)
 8001d34:	f007 fa82 	bl	800923c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);//M3
 8001d38:	2104      	movs	r1, #4
 8001d3a:	4813      	ldr	r0, [pc, #76]	; (8001d88 <main+0xb8>)
 8001d3c:	f007 fa7e 	bl	800923c <HAL_TIM_PWM_Start>

  //=============EXTERNAL PWM=============
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);//EXTERNAL PWM
 8001d40:	2100      	movs	r1, #0
 8001d42:	4811      	ldr	r0, [pc, #68]	; (8001d88 <main+0xb8>)
 8001d44:	f007 fa7a 	bl	800923c <HAL_TIM_PWM_Start>

  //=============ENCODER MOTOR============
  HAL_TIM_Encoder_Start_IT(&htim2,TIM_CHANNEL_ALL);
 8001d48:	213c      	movs	r1, #60	; 0x3c
 8001d4a:	4810      	ldr	r0, [pc, #64]	; (8001d8c <main+0xbc>)
 8001d4c:	f007 fbe4 	bl	8009518 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_ALL);
 8001d50:	213c      	movs	r1, #60	; 0x3c
 8001d52:	480f      	ldr	r0, [pc, #60]	; (8001d90 <main+0xc0>)
 8001d54:	f007 fbe0 	bl	8009518 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4,TIM_CHANNEL_ALL);
 8001d58:	213c      	movs	r1, #60	; 0x3c
 8001d5a:	480e      	ldr	r0, [pc, #56]	; (8001d94 <main+0xc4>)
 8001d5c:	f007 fbdc 	bl	8009518 <HAL_TIM_Encoder_Start_IT>

  HAL_TIM_Encoder_Start_IT(&htim1,TIM_CHANNEL_ALL);
 8001d60:	213c      	movs	r1, #60	; 0x3c
 8001d62:	480d      	ldr	r0, [pc, #52]	; (8001d98 <main+0xc8>)
 8001d64:	f007 fbd8 	bl	8009518 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim8,TIM_CHANNEL_ALL);
 8001d68:	213c      	movs	r1, #60	; 0x3c
 8001d6a:	480c      	ldr	r0, [pc, #48]	; (8001d9c <main+0xcc>)
 8001d6c:	f007 fbd4 	bl	8009518 <HAL_TIM_Encoder_Start_IT>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001d70:	f7ff fab8 	bl	80012e4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001d74:	f009 fcc2 	bl	800b6fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d78:	e7fe      	b.n	8001d78 <main+0xa8>
 8001d7a:	bf00      	nop
 8001d7c:	20002b10 	.word	0x20002b10
 8001d80:	20002c30 	.word	0x20002c30
 8001d84:	20002ba0 	.word	0x20002ba0
 8001d88:	20002be8 	.word	0x20002be8
 8001d8c:	20002a38 	.word	0x20002a38
 8001d90:	20002a80 	.word	0x20002a80
 8001d94:	20002ac8 	.word	0x20002ac8
 8001d98:	200029f0 	.word	0x200029f0
 8001d9c:	20002b58 	.word	0x20002b58

08001da0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b094      	sub	sp, #80	; 0x50
 8001da4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001da6:	f107 0320 	add.w	r3, r7, #32
 8001daa:	2230      	movs	r2, #48	; 0x30
 8001dac:	2100      	movs	r1, #0
 8001dae:	4618      	mov	r0, r3
 8001db0:	f00c fd9e 	bl	800e8f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001db4:	f107 030c 	add.w	r3, r7, #12
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	60bb      	str	r3, [r7, #8]
 8001dc8:	4b28      	ldr	r3, [pc, #160]	; (8001e6c <SystemClock_Config+0xcc>)
 8001dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dcc:	4a27      	ldr	r2, [pc, #156]	; (8001e6c <SystemClock_Config+0xcc>)
 8001dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd2:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd4:	4b25      	ldr	r3, [pc, #148]	; (8001e6c <SystemClock_Config+0xcc>)
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ddc:	60bb      	str	r3, [r7, #8]
 8001dde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001de0:	2300      	movs	r3, #0
 8001de2:	607b      	str	r3, [r7, #4]
 8001de4:	4b22      	ldr	r3, [pc, #136]	; (8001e70 <SystemClock_Config+0xd0>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a21      	ldr	r2, [pc, #132]	; (8001e70 <SystemClock_Config+0xd0>)
 8001dea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dee:	6013      	str	r3, [r2, #0]
 8001df0:	4b1f      	ldr	r3, [pc, #124]	; (8001e70 <SystemClock_Config+0xd0>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001df8:	607b      	str	r3, [r7, #4]
 8001dfa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e06:	2302      	movs	r3, #2
 8001e08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e10:	2308      	movs	r3, #8
 8001e12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001e14:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001e18:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001e1e:	2307      	movs	r3, #7
 8001e20:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e22:	f107 0320 	add.w	r3, r7, #32
 8001e26:	4618      	mov	r0, r3
 8001e28:	f006 fc24 	bl	8008674 <HAL_RCC_OscConfig>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001e32:	f000 f839 	bl	8001ea8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e36:	230f      	movs	r3, #15
 8001e38:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e42:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e46:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e4c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e4e:	f107 030c 	add.w	r3, r7, #12
 8001e52:	2105      	movs	r1, #5
 8001e54:	4618      	mov	r0, r3
 8001e56:	f006 fe85 	bl	8008b64 <HAL_RCC_ClockConfig>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001e60:	f000 f822 	bl	8001ea8 <Error_Handler>
  }
}
 8001e64:	bf00      	nop
 8001e66:	3750      	adds	r7, #80	; 0x50
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40007000 	.word	0x40007000

08001e74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM7){
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a07      	ldr	r2, [pc, #28]	; (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d101      	bne.n	8001e8a <HAL_TIM_PeriodElapsedCallback+0x16>
		motor_VeloControl();
 8001e86:	f7ff f88f 	bl	8000fa8 <motor_VeloControl>
	}
	if (htim->Instance == TIM13){
//		motor_VectorKinematic(joystick_x, joystick_y, joystick_z);
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a05      	ldr	r2, [pc, #20]	; (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d101      	bne.n	8001e98 <HAL_TIM_PeriodElapsedCallback+0x24>
    HAL_IncTick();
 8001e94:	f005 fd34 	bl	8007900 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e98:	bf00      	nop
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40001400 	.word	0x40001400
 8001ea4:	40001000 	.word	0x40001000

08001ea8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001eac:	b672      	cpsid	i
}
 8001eae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001eb0:	e7fe      	b.n	8001eb0 <Error_Handler+0x8>

08001eb2 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	ed87 0a01 	vstr	s0, [r7, #4]
 8001ebc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ec0:	eef0 7ae7 	vabs.f32	s15, s15
 8001ec4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <_ZN3ros3Msg19serializeAvrFloat64EPhf>:
   * @param[in] f value to serialize.
   *
   * @return number of bytes to advance the buffer pointer.
   *
   */
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 8001ef4:	b480      	push	{r7}
 8001ef6:	b087      	sub	sp, #28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	ed87 0a00 	vstr	s0, [r7]
 8001f00:	683b      	ldr	r3, [r7, #0]
  {
    int32_t val;
    memcpy(&val, &f, sizeof(val));
 8001f02:	60fb      	str	r3, [r7, #12]

    int16_t exp = ((val >> 23) & 255);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	15db      	asrs	r3, r3, #23
 8001f08:	b21b      	sxth	r3, r3
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	82fb      	strh	r3, [r7, #22]
    uint32_t mantissa = val & 0x7FFFFF;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8001f14:	613b      	str	r3, [r7, #16]

    if (exp == 255)
 8001f16:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001f1a:	2bff      	cmp	r3, #255	; 0xff
 8001f1c:	d103      	bne.n	8001f26 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x32>
    {
      exp = 2047; // Special value for NaN, infinity etc.
 8001f1e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001f22:	82fb      	strh	r3, [r7, #22]
 8001f24:	e02a      	b.n	8001f7c <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x88>
    }
    else if (exp != 0)
 8001f26:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d005      	beq.n	8001f3a <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x46>
    {
      exp += 1023 - 127; // Normal case
 8001f2e:	8afb      	ldrh	r3, [r7, #22]
 8001f30:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	82fb      	strh	r3, [r7, #22]
 8001f38:	e020      	b.n	8001f7c <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x88>
    }
    else if (!mantissa)
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d102      	bne.n	8001f46 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x52>
    {
      exp = 0; // Zero
 8001f40:	2300      	movs	r3, #0
 8001f42:	82fb      	strh	r3, [r7, #22]
 8001f44:	e01a      	b.n	8001f7c <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x88>
    }
    else
    {
      // Denormalized value in float, will fit as normalized value in double
      exp += 1023 - 127;
 8001f46:	8afb      	ldrh	r3, [r7, #22]
 8001f48:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	82fb      	strh	r3, [r7, #22]
      mantissa <<= 1;
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	613b      	str	r3, [r7, #16]
      while (!(mantissa & 0x800000))
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d109      	bne.n	8001f74 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x80>
      {
          mantissa <<= 1;
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	613b      	str	r3, [r7, #16]
          exp--;
 8001f66:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	82fb      	strh	r3, [r7, #22]
      while (!(mantissa & 0x800000))
 8001f72:	e7f0      	b.n	8001f56 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x62>
      }
      mantissa &= 0x7FFFFF;
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8001f7a:	613b      	str	r3, [r7, #16]
    }

    *(outbuffer++) = 0;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	1c5a      	adds	r2, r3, #1
 8001f80:	607a      	str	r2, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	1c5a      	adds	r2, r3, #1
 8001f8a:	607a      	str	r2, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	1c5a      	adds	r2, r3, #1
 8001f94:	607a      	str	r2, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (mantissa << 5) & 0xff;
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	1c59      	adds	r1, r3, #1
 8001fa2:	6079      	str	r1, [r7, #4]
 8001fa4:	0152      	lsls	r2, r2, #5
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (mantissa >> 3) & 0xff;
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	08d9      	lsrs	r1, r3, #3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	1c5a      	adds	r2, r3, #1
 8001fb2:	607a      	str	r2, [r7, #4]
 8001fb4:	b2ca      	uxtb	r2, r1
 8001fb6:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (mantissa >> 11) & 0xff;
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	0ad9      	lsrs	r1, r3, #11
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	1c5a      	adds	r2, r3, #1
 8001fc0:	607a      	str	r2, [r7, #4]
 8001fc2:	b2ca      	uxtb	r2, r1
 8001fc4:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((mantissa >> 19) & 0x0F);
 8001fc6:	8afb      	ldrh	r3, [r7, #22]
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	011b      	lsls	r3, r3, #4
 8001fcc:	b2d9      	uxtb	r1, r3
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	0cdb      	lsrs	r3, r3, #19
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	f003 030f 	and.w	r3, r3, #15
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	1c58      	adds	r0, r3, #1
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (exp >> 4) & 0x7F;
 8001fe6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001fea:	111b      	asrs	r3, r3, #4
 8001fec:	b21b      	sxth	r3, r3
 8001fee:	b2da      	uxtb	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	1c59      	adds	r1, r3, #1
 8001ff4:	6079      	str	r1, [r7, #4]
 8001ff6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	701a      	strb	r2, [r3, #0]

    // Mark negative bit as necessary.
    if (f < 0)
 8001ffe:	edd7 7a00 	vldr	s15, [r7]
 8002002:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800200a:	d508      	bpl.n	800201e <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x12a>
    {
      *(outbuffer - 1) |= 0x80;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3b01      	subs	r3, #1
 8002010:	781a      	ldrb	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3b01      	subs	r3, #1
 8002016:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	701a      	strb	r2, [r3, #0]
    }

    return 8;
 800201e:	2308      	movs	r3, #8
  }
 8002020:	4618      	mov	r0, r3
 8002022:	371c      	adds	r7, #28
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>:
   * @param[in] inbuffer pointer for buffer to deserialize from.
   * @param[out] f pointer to place the deserialized value in.
   *
   * @return number of bytes to advance the buffer pointer.
   */
  static int deserializeAvrFloat64(const unsigned char* inbuffer, float* f)
 800202c:	b480      	push	{r7}
 800202e:	b087      	sub	sp, #28
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  {
    int16_t exp;
    uint32_t mantissa;

    // Skip lowest 24 bits
    inbuffer += 3;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	3303      	adds	r3, #3
 800203a:	607b      	str	r3, [r7, #4]

    // Copy truncated mantissa.
    mantissa = ((uint32_t)(*(inbuffer++)) >> 4 & 0x0F);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	1c5a      	adds	r2, r3, #1
 8002040:	607a      	str	r2, [r7, #4]
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	091b      	lsrs	r3, r3, #4
 8002046:	b2db      	uxtb	r3, r3
 8002048:	f003 030f 	and.w	r3, r3, #15
 800204c:	613b      	str	r3, [r7, #16]
    mantissa |= ((uint32_t)(*(inbuffer++)) & 0xff) << 4;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	1c5a      	adds	r2, r3, #1
 8002052:	607a      	str	r2, [r7, #4]
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	011b      	lsls	r3, r3, #4
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	4313      	orrs	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
    mantissa |= ((uint32_t)(*(inbuffer++)) & 0xff) << 12;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	1c5a      	adds	r2, r3, #1
 8002062:	607a      	str	r2, [r7, #4]
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	031b      	lsls	r3, r3, #12
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	4313      	orrs	r3, r2
 800206c:	613b      	str	r3, [r7, #16]
    mantissa |= ((uint32_t)(*inbuffer) & 0x0f) << 20;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	051b      	lsls	r3, r3, #20
 8002074:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	4313      	orrs	r3, r2
 800207c:	613b      	str	r3, [r7, #16]

    // Copy exponent.
    exp = ((uint32_t)(*(inbuffer++)) & 0xf0) >> 4;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	1c5a      	adds	r2, r3, #1
 8002082:	607a      	str	r2, [r7, #4]
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	091b      	lsrs	r3, r3, #4
 8002088:	b2db      	uxtb	r3, r3
 800208a:	b21b      	sxth	r3, r3
 800208c:	f003 030f 	and.w	r3, r3, #15
 8002090:	82fb      	strh	r3, [r7, #22]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	b29b      	uxth	r3, r3
 8002098:	011b      	lsls	r3, r3, #4
 800209a:	b29b      	uxth	r3, r3
 800209c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	8afb      	ldrh	r3, [r7, #22]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	82fb      	strh	r3, [r7, #22]

    if (exp == 2047)
 80020aa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80020ae:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d102      	bne.n	80020bc <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0x90>
    {
      exp = 255; // NaN, infinity etc.
 80020b6:	23ff      	movs	r3, #255	; 0xff
 80020b8:	82fb      	strh	r3, [r7, #22]
 80020ba:	e02c      	b.n	8002116 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xea>
    }
    else if (exp - 1023 > 127)
 80020bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80020c0:	f240 427e 	movw	r2, #1150	; 0x47e
 80020c4:	4293      	cmp	r3, r2
 80020c6:	dd04      	ble.n	80020d2 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xa6>
    {
      exp = 255;
 80020c8:	23ff      	movs	r3, #255	; 0xff
 80020ca:	82fb      	strh	r3, [r7, #22]
      mantissa = 0; // Too large for float, convert to infinity
 80020cc:	2300      	movs	r3, #0
 80020ce:	613b      	str	r3, [r7, #16]
 80020d0:	e021      	b.n	8002116 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xea>
    }
    else if (exp - 1023 >= -126)
 80020d2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80020d6:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 80020da:	dd05      	ble.n	80020e8 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xbc>
    {
      exp -= 1023 - 127; // Normal case
 80020dc:	8afb      	ldrh	r3, [r7, #22]
 80020de:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	82fb      	strh	r3, [r7, #22]
 80020e6:	e016      	b.n	8002116 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xea>
    }
    else if (exp - 1023 < -150)
 80020e8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80020ec:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 80020f0:	dc02      	bgt.n	80020f8 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xcc>
    {
      exp = 0; // Too small or zero
 80020f2:	2300      	movs	r3, #0
 80020f4:	82fb      	strh	r3, [r7, #22]
 80020f6:	e00e      	b.n	8002116 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xea>
    }
    else
    {
      // Have to convert to denormalized representation for float
      mantissa |= 0x1000000;
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020fe:	613b      	str	r3, [r7, #16]
      mantissa >>= ((-126 + 1023) - exp);
 8002100:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002104:	f5c3 7360 	rsb	r3, r3, #896	; 0x380
 8002108:	3301      	adds	r3, #1
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	fa22 f303 	lsr.w	r3, r2, r3
 8002110:	613b      	str	r3, [r7, #16]
      exp = 0;
 8002112:	2300      	movs	r3, #0
 8002114:	82fb      	strh	r3, [r7, #22]
    }

    // Round off mantissa
    if (mantissa != 0xFFFFFF)
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800211c:	4293      	cmp	r3, r2
 800211e:	d002      	beq.n	8002126 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xfa>
      mantissa += 1;
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	3301      	adds	r3, #1
 8002124:	613b      	str	r3, [r7, #16]

    mantissa >>= 1;
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	085b      	lsrs	r3, r3, #1
 800212a:	613b      	str	r3, [r7, #16]

    // Put mantissa and exponent into place
    uint32_t val = mantissa;
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	60fb      	str	r3, [r7, #12]
    val |= static_cast<uint32_t>(exp) << 23;
 8002130:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002134:	05da      	lsls	r2, r3, #23
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	4313      	orrs	r3, r2
 800213a:	60fb      	str	r3, [r7, #12]

    // Copy negative sign.
    val |= (static_cast<uint32_t>(*(inbuffer++)) & 0x80) << 24;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	1c5a      	adds	r2, r3, #1
 8002140:	607a      	str	r2, [r7, #4]
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	061b      	lsls	r3, r3, #24
 8002146:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	4313      	orrs	r3, r2
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fa      	ldr	r2, [r7, #12]

    memcpy(f, &val, sizeof(val));
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	601a      	str	r2, [r3, #0]
    return 8;
 8002156:	2308      	movs	r3, #8
  }
 8002158:	4618      	mov	r0, r3
 800215a:	371c      	adds	r7, #28
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <_ZN3ros3MsgC1Ev>:
class Msg
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	4a04      	ldr	r2, [pc, #16]	; (8002180 <_ZN3ros3MsgC1Ev+0x1c>)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4618      	mov	r0, r3
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	0800f2d8 	.word	0x0800f2d8

08002184 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef float _y_type;
      _y_type y;
      typedef float _z_type;
      _z_type z;

    Vector3():
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff ffe8 	bl	8002164 <_ZN3ros3MsgC1Ev>
 8002194:	4a09      	ldr	r2, [pc, #36]	; (80021bc <_ZN13geometry_msgs7Vector3C1Ev+0x38>)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f04f 0200 	mov.w	r2, #0
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f04f 0200 	mov.w	r2, #0
 80021a8:	609a      	str	r2, [r3, #8]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f04f 0200 	mov.w	r2, #0
 80021b0:	60da      	str	r2, [r3, #12]
    {
    }
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4618      	mov	r0, r3
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	0800f2c0 	.word	0x0800f2c0

080021c0 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80021ca:	2300      	movs	r3, #0
 80021cc:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	441a      	add	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80021da:	eeb0 0a67 	vmov.f32	s0, s15
 80021de:	4610      	mov	r0, r2
 80021e0:	f7ff fe88 	bl	8001ef4 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80021e4:	4602      	mov	r2, r0
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	4413      	add	r3, r2
 80021ea:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	441a      	add	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80021f8:	eeb0 0a67 	vmov.f32	s0, s15
 80021fc:	4610      	mov	r0, r2
 80021fe:	f7ff fe79 	bl	8001ef4 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8002202:	4602      	mov	r2, r0
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4413      	add	r3, r2
 8002208:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	441a      	add	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	edd3 7a03 	vldr	s15, [r3, #12]
 8002216:	eeb0 0a67 	vmov.f32	s0, s15
 800221a:	4610      	mov	r0, r2
 800221c:	f7ff fe6a 	bl	8001ef4 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8002220:	4602      	mov	r2, r0
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	4413      	add	r3, r2
 8002226:	60fb      	str	r3, [r7, #12]
      return offset;
 8002228:	68fb      	ldr	r3, [r7, #12]
    }
 800222a:	4618      	mov	r0, r3
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002232:	b580      	push	{r7, lr}
 8002234:	b084      	sub	sp, #16
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800223c:	2300      	movs	r3, #0
 800223e:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	441a      	add	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	3304      	adds	r3, #4
 800224a:	4619      	mov	r1, r3
 800224c:	4610      	mov	r0, r2
 800224e:	f7ff feed 	bl	800202c <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8002252:	4602      	mov	r2, r0
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4413      	add	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	441a      	add	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3308      	adds	r3, #8
 8002264:	4619      	mov	r1, r3
 8002266:	4610      	mov	r0, r2
 8002268:	f7ff fee0 	bl	800202c <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800226c:	4602      	mov	r2, r0
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	4413      	add	r3, r2
 8002272:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	441a      	add	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	330c      	adds	r3, #12
 800227e:	4619      	mov	r1, r3
 8002280:	4610      	mov	r0, r2
 8002282:	f7ff fed3 	bl	800202c <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8002286:	4602      	mov	r2, r0
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	4413      	add	r3, r2
 800228c:	60fb      	str	r3, [r7, #12]
     return offset;
 800228e:	68fb      	ldr	r3, [r7, #12]
    }
 8002290:	4618      	mov	r0, r3
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	4b03      	ldr	r3, [pc, #12]	; (80022b0 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 80022a2:	4618      	mov	r0, r3
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	0800ed74 	.word	0x0800ed74

080022b4 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	4b03      	ldr	r3, [pc, #12]	; (80022cc <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 80022be:	4618      	mov	r0, r3
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	0800ed8c 	.word	0x0800ed8c

080022d0 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff ff42 	bl	8002164 <_ZN3ros3MsgC1Ev>
 80022e0:	4a08      	ldr	r2, [pc, #32]	; (8002304 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3304      	adds	r3, #4
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff ff4a 	bl	8002184 <_ZN13geometry_msgs7Vector3C1Ev>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3314      	adds	r3, #20
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff ff45 	bl	8002184 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4618      	mov	r0, r3
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	0800f2a8 	.word	0x0800f2a8

08002308 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	1d18      	adds	r0, r3, #4
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	4413      	add	r3, r2
 8002320:	4619      	mov	r1, r3
 8002322:	f7ff ff4d 	bl	80021c0 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002326:	4602      	mov	r2, r0
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4413      	add	r3, r2
 800232c:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f103 0014 	add.w	r0, r3, #20
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	4413      	add	r3, r2
 800233a:	4619      	mov	r1, r3
 800233c:	f7ff ff40 	bl	80021c0 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002340:	4602      	mov	r2, r0
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	4413      	add	r3, r2
 8002346:	60fb      	str	r3, [r7, #12]
      return offset;
 8002348:	68fb      	ldr	r3, [r7, #12]
    }
 800234a:	4618      	mov	r0, r3
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002352:	b580      	push	{r7, lr}
 8002354:	b084      	sub	sp, #16
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
 800235a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800235c:	2300      	movs	r3, #0
 800235e:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	1d18      	adds	r0, r3, #4
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	4413      	add	r3, r2
 800236a:	4619      	mov	r1, r3
 800236c:	f7ff ff61 	bl	8002232 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002370:	4602      	mov	r2, r0
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	4413      	add	r3, r2
 8002376:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f103 0014 	add.w	r0, r3, #20
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	4413      	add	r3, r2
 8002384:	4619      	mov	r1, r3
 8002386:	f7ff ff54 	bl	8002232 <_ZN13geometry_msgs7Vector311deserializeEPh>
 800238a:	4602      	mov	r2, r0
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	4413      	add	r3, r2
 8002390:	60fb      	str	r3, [r7, #12]
     return offset;
 8002392:	68fb      	ldr	r3, [r7, #12]
    }
 8002394:	4618      	mov	r0, r3
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <_ZN13geometry_msgs5Twist7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Twist"; };
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	4b03      	ldr	r3, [pc, #12]	; (80023b4 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 80023a6:	4618      	mov	r0, r3
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	0800edb0 	.word	0x0800edb0

080023b8 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    virtual const char * getMD5() override { return "9f195f881246fdfa2798d1d3eebca84a"; };
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	4b03      	ldr	r3, [pc, #12]	; (80023d0 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 80023c2:	4618      	mov	r0, r3
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	0800edc4 	.word	0x0800edc4

080023d4 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
      data()
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff fec0 	bl	8002164 <_ZN3ros3MsgC1Ev>
 80023e4:	4a06      	ldr	r2, [pc, #24]	; (8002400 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	3304      	adds	r3, #4
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff fd6f 	bl	8001ed2 <_ZN3ros4TimeC1Ev>
    {
    }
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	0800f290 	.word	0x0800f290

08002404 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800240e:	2300      	movs	r3, #0
 8002410:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6859      	ldr	r1, [r3, #4]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	4413      	add	r3, r2
 800241c:	b2ca      	uxtb	r2, r1
 800241e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	0a19      	lsrs	r1, r3, #8
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	3301      	adds	r3, #1
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	4413      	add	r3, r2
 800242e:	b2ca      	uxtb	r2, r1
 8002430:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	0c19      	lsrs	r1, r3, #16
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	3302      	adds	r3, #2
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	4413      	add	r3, r2
 8002440:	b2ca      	uxtb	r2, r1
 8002442:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	0e19      	lsrs	r1, r3, #24
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	3303      	adds	r3, #3
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	4413      	add	r3, r2
 8002452:	b2ca      	uxtb	r2, r1
 8002454:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	3304      	adds	r3, #4
 800245a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6899      	ldr	r1, [r3, #8]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	4413      	add	r3, r2
 8002466:	b2ca      	uxtb	r2, r1
 8002468:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	0a19      	lsrs	r1, r3, #8
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	3301      	adds	r3, #1
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	4413      	add	r3, r2
 8002478:	b2ca      	uxtb	r2, r1
 800247a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	0c19      	lsrs	r1, r3, #16
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	3302      	adds	r3, #2
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	4413      	add	r3, r2
 800248a:	b2ca      	uxtb	r2, r1
 800248c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	0e19      	lsrs	r1, r3, #24
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	3303      	adds	r3, #3
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	4413      	add	r3, r2
 800249c:	b2ca      	uxtb	r2, r1
 800249e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	3304      	adds	r3, #4
 80024a4:	60fb      	str	r3, [r7, #12]
      return offset;
 80024a6:	68fb      	ldr	r3, [r7, #12]
    }
 80024a8:	4618      	mov	r0, r3
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80024be:	2300      	movs	r3, #0
 80024c0:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	4413      	add	r3, r2
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	461a      	mov	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685a      	ldr	r2, [r3, #4]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	3301      	adds	r3, #1
 80024d8:	6839      	ldr	r1, [r7, #0]
 80024da:	440b      	add	r3, r1
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	021b      	lsls	r3, r3, #8
 80024e0:	431a      	orrs	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	3302      	adds	r3, #2
 80024ee:	6839      	ldr	r1, [r7, #0]
 80024f0:	440b      	add	r3, r1
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	041b      	lsls	r3, r3, #16
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	3303      	adds	r3, #3
 8002504:	6839      	ldr	r1, [r7, #0]
 8002506:	440b      	add	r3, r1
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	061b      	lsls	r3, r3, #24
 800250c:	431a      	orrs	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	3304      	adds	r3, #4
 8002516:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	4413      	add	r3, r2
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	461a      	mov	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689a      	ldr	r2, [r3, #8]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	3301      	adds	r3, #1
 800252e:	6839      	ldr	r1, [r7, #0]
 8002530:	440b      	add	r3, r1
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	021b      	lsls	r3, r3, #8
 8002536:	431a      	orrs	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	3302      	adds	r3, #2
 8002544:	6839      	ldr	r1, [r7, #0]
 8002546:	440b      	add	r3, r1
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	041b      	lsls	r3, r3, #16
 800254c:	431a      	orrs	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689a      	ldr	r2, [r3, #8]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	3303      	adds	r3, #3
 800255a:	6839      	ldr	r1, [r7, #0]
 800255c:	440b      	add	r3, r1
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	061b      	lsls	r3, r3, #24
 8002562:	431a      	orrs	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	3304      	adds	r3, #4
 800256c:	60fb      	str	r3, [r7, #12]
     return offset;
 800256e:	68fb      	ldr	r3, [r7, #12]
    }
 8002570:	4618      	mov	r0, r3
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	4b03      	ldr	r3, [pc, #12]	; (8002594 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8002586:	4618      	mov	r0, r3
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	0800ede8 	.word	0x0800ede8

08002598 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	4b03      	ldr	r3, [pc, #12]	; (80025b0 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80025a2:	4618      	mov	r0, r3
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	0800edf8 	.word	0x0800edf8

080025b4 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff fdd0 	bl	8002164 <_ZN3ros3MsgC1Ev>
 80025c4:	4a0b      	ldr	r2, [pc, #44]	; (80025f4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	809a      	strh	r2, [r3, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a09      	ldr	r2, [pc, #36]	; (80025f8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80025d4:	609a      	str	r2, [r3, #8]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a07      	ldr	r2, [pc, #28]	; (80025f8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80025da:	60da      	str	r2, [r3, #12]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a06      	ldr	r2, [pc, #24]	; (80025f8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80025e0:	611a      	str	r2, [r3, #16]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	615a      	str	r2, [r3, #20]
    {
    }
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4618      	mov	r0, r3
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	0800f278 	.word	0x0800f278
 80025f8:	0800ee1c 	.word	0x0800ee1c

080025fc <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b088      	sub	sp, #32
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002606:	2300      	movs	r3, #0
 8002608:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	8899      	ldrh	r1, [r3, #4]
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	4413      	add	r3, r2
 8002614:	b2ca      	uxtb	r2, r1
 8002616:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	889b      	ldrh	r3, [r3, #4]
 800261c:	0a1b      	lsrs	r3, r3, #8
 800261e:	b299      	uxth	r1, r3
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	3301      	adds	r3, #1
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	4413      	add	r3, r2
 8002628:	b2ca      	uxtb	r2, r1
 800262a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	3302      	adds	r3, #2
 8002630:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	4618      	mov	r0, r3
 8002638:	f7fd fdca 	bl	80001d0 <strlen>
 800263c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	4413      	add	r3, r2
 8002644:	69b9      	ldr	r1, [r7, #24]
 8002646:	4618      	mov	r0, r3
 8002648:	f001 f900 	bl	800384c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	3304      	adds	r3, #4
 8002650:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	18d0      	adds	r0, r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4619      	mov	r1, r3
 8002660:	f00c f938 	bl	800e8d4 <memcpy>
      offset += length_topic_name;
 8002664:	69fa      	ldr	r2, [r7, #28]
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	4413      	add	r3, r2
 800266a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	4618      	mov	r0, r3
 8002672:	f7fd fdad 	bl	80001d0 <strlen>
 8002676:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	4413      	add	r3, r2
 800267e:	6979      	ldr	r1, [r7, #20]
 8002680:	4618      	mov	r0, r3
 8002682:	f001 f8e3 	bl	800384c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	3304      	adds	r3, #4
 800268a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	18d0      	adds	r0, r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	4619      	mov	r1, r3
 800269a:	f00c f91b 	bl	800e8d4 <memcpy>
      offset += length_message_type;
 800269e:	69fa      	ldr	r2, [r7, #28]
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	4413      	add	r3, r2
 80026a4:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fd fd90 	bl	80001d0 <strlen>
 80026b0:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	4413      	add	r3, r2
 80026b8:	6939      	ldr	r1, [r7, #16]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f001 f8c6 	bl	800384c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	3304      	adds	r3, #4
 80026c4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	18d0      	adds	r0, r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	4619      	mov	r1, r3
 80026d4:	f00c f8fe 	bl	800e8d4 <memcpy>
      offset += length_md5sum;
 80026d8:	69fa      	ldr	r2, [r7, #28]
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	4413      	add	r3, r2
 80026de:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80026e6:	68f9      	ldr	r1, [r7, #12]
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	4413      	add	r3, r2
 80026ee:	b2ca      	uxtb	r2, r1
 80026f0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	0a19      	lsrs	r1, r3, #8
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3301      	adds	r3, #1
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	4413      	add	r3, r2
 80026fe:	b2ca      	uxtb	r2, r1
 8002700:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	0c19      	lsrs	r1, r3, #16
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	3302      	adds	r3, #2
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	4413      	add	r3, r2
 800270e:	b2ca      	uxtb	r2, r1
 8002710:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	0e19      	lsrs	r1, r3, #24
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	3303      	adds	r3, #3
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	4413      	add	r3, r2
 800271e:	b2ca      	uxtb	r2, r1
 8002720:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	3304      	adds	r3, #4
 8002726:	61fb      	str	r3, [r7, #28]
      return offset;
 8002728:	69fb      	ldr	r3, [r7, #28]
    }
 800272a:	4618      	mov	r0, r3
 800272c:	3720      	adds	r7, #32
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002732:	b580      	push	{r7, lr}
 8002734:	b08a      	sub	sp, #40	; 0x28
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
 800273a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800273c:	2300      	movs	r3, #0
 800273e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	4413      	add	r3, r2
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	b29a      	uxth	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	889b      	ldrh	r3, [r3, #4]
 8002752:	b21a      	sxth	r2, r3
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	3301      	adds	r3, #1
 8002758:	6839      	ldr	r1, [r7, #0]
 800275a:	440b      	add	r3, r1
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	021b      	lsls	r3, r3, #8
 8002760:	b21b      	sxth	r3, r3
 8002762:	4313      	orrs	r3, r2
 8002764:	b21b      	sxth	r3, r3
 8002766:	b29a      	uxth	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	3302      	adds	r3, #2
 8002770:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	441a      	add	r2, r3
 8002778:	f107 0314 	add.w	r3, r7, #20
 800277c:	4611      	mov	r1, r2
 800277e:	4618      	mov	r0, r3
 8002780:	f001 f882 	bl	8003888 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	3304      	adds	r3, #4
 8002788:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	627b      	str	r3, [r7, #36]	; 0x24
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	4413      	add	r3, r2
 8002794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002796:	429a      	cmp	r2, r3
 8002798:	d20c      	bcs.n	80027b4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	441a      	add	r2, r3
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	3b01      	subs	r3, #1
 80027a4:	6839      	ldr	r1, [r7, #0]
 80027a6:	440b      	add	r3, r1
 80027a8:	7812      	ldrb	r2, [r2, #0]
 80027aa:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80027ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ae:	3301      	adds	r3, #1
 80027b0:	627b      	str	r3, [r7, #36]	; 0x24
 80027b2:	e7ec      	b.n	800278e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	4413      	add	r3, r2
 80027ba:	3b01      	subs	r3, #1
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	4413      	add	r3, r2
 80027c0:	2200      	movs	r2, #0
 80027c2:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	441a      	add	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	4413      	add	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	441a      	add	r2, r3
 80027de:	f107 0310 	add.w	r3, r7, #16
 80027e2:	4611      	mov	r1, r2
 80027e4:	4618      	mov	r0, r3
 80027e6:	f001 f84f 	bl	8003888 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	3304      	adds	r3, #4
 80027ee:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	623b      	str	r3, [r7, #32]
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	4413      	add	r3, r2
 80027fa:	6a3a      	ldr	r2, [r7, #32]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d20c      	bcs.n	800281a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	6a3b      	ldr	r3, [r7, #32]
 8002804:	441a      	add	r2, r3
 8002806:	6a3b      	ldr	r3, [r7, #32]
 8002808:	3b01      	subs	r3, #1
 800280a:	6839      	ldr	r1, [r7, #0]
 800280c:	440b      	add	r3, r1
 800280e:	7812      	ldrb	r2, [r2, #0]
 8002810:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002812:	6a3b      	ldr	r3, [r7, #32]
 8002814:	3301      	adds	r3, #1
 8002816:	623b      	str	r3, [r7, #32]
 8002818:	e7ec      	b.n	80027f4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4413      	add	r3, r2
 8002820:	3b01      	subs	r3, #1
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	4413      	add	r3, r2
 8002826:	2200      	movs	r2, #0
 8002828:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	3b01      	subs	r3, #1
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	441a      	add	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	4413      	add	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	441a      	add	r2, r3
 8002844:	f107 030c 	add.w	r3, r7, #12
 8002848:	4611      	mov	r1, r2
 800284a:	4618      	mov	r0, r3
 800284c:	f001 f81c 	bl	8003888 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	3304      	adds	r3, #4
 8002854:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	61fb      	str	r3, [r7, #28]
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4413      	add	r3, r2
 8002860:	69fa      	ldr	r2, [r7, #28]
 8002862:	429a      	cmp	r2, r3
 8002864:	d20c      	bcs.n	8002880 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	441a      	add	r2, r3
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	3b01      	subs	r3, #1
 8002870:	6839      	ldr	r1, [r7, #0]
 8002872:	440b      	add	r3, r1
 8002874:	7812      	ldrb	r2, [r2, #0]
 8002876:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	3301      	adds	r3, #1
 800287c:	61fb      	str	r3, [r7, #28]
 800287e:	e7ec      	b.n	800285a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	4413      	add	r3, r2
 8002886:	3b01      	subs	r3, #1
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	4413      	add	r3, r2
 800288c:	2200      	movs	r2, #0
 800288e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	3b01      	subs	r3, #1
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	441a      	add	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	4413      	add	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80028a4:	2300      	movs	r3, #0
 80028a6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	6839      	ldr	r1, [r7, #0]
 80028ae:	440a      	add	r2, r1
 80028b0:	7812      	ldrb	r2, [r2, #0]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80028b6:	68ba      	ldr	r2, [r7, #8]
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	3301      	adds	r3, #1
 80028bc:	6839      	ldr	r1, [r7, #0]
 80028be:	440b      	add	r3, r1
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	021b      	lsls	r3, r3, #8
 80028c4:	4313      	orrs	r3, r2
 80028c6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80028c8:	68ba      	ldr	r2, [r7, #8]
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	3302      	adds	r3, #2
 80028ce:	6839      	ldr	r1, [r7, #0]
 80028d0:	440b      	add	r3, r1
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	041b      	lsls	r3, r3, #16
 80028d6:	4313      	orrs	r3, r2
 80028d8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	3303      	adds	r3, #3
 80028e0:	6839      	ldr	r1, [r7, #0]
 80028e2:	440b      	add	r3, r1
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	061b      	lsls	r3, r3, #24
 80028e8:	4313      	orrs	r3, r2
 80028ea:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	3304      	adds	r3, #4
 80028f6:	61bb      	str	r3, [r7, #24]
     return offset;
 80028f8:	69bb      	ldr	r3, [r7, #24]
    }
 80028fa:	4618      	mov	r0, r3
 80028fc:	3728      	adds	r7, #40	; 0x28
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
	...

08002904 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	4b03      	ldr	r3, [pc, #12]	; (800291c <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800290e:	4618      	mov	r0, r3
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	0800ee20 	.word	0x0800ee20

08002920 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	4b03      	ldr	r3, [pc, #12]	; (8002938 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 800292a:	4618      	mov	r0, r3
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	0800ee3c 	.word	0x0800ee3c

0800293c <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff fc0c 	bl	8002164 <_ZN3ros3MsgC1Ev>
 800294c:	4a06      	ldr	r2, [pc, #24]	; (8002968 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	711a      	strb	r2, [r3, #4]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a04      	ldr	r2, [pc, #16]	; (800296c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 800295c:	609a      	str	r2, [r3, #8]
    {
    }
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4618      	mov	r0, r3
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	0800f260 	.word	0x0800f260
 800296c:	0800ee1c 	.word	0x0800ee1c

08002970 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800297a:	2300      	movs	r3, #0
 800297c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	4413      	add	r3, r2
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	7912      	ldrb	r2, [r2, #4]
 8002988:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	3301      	adds	r3, #1
 800298e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	4618      	mov	r0, r3
 8002996:	f7fd fc1b 	bl	80001d0 <strlen>
 800299a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	4413      	add	r3, r2
 80029a2:	68b9      	ldr	r1, [r7, #8]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f000 ff51 	bl	800384c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	3304      	adds	r3, #4
 80029ae:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	18d0      	adds	r0, r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	4619      	mov	r1, r3
 80029be:	f00b ff89 	bl	800e8d4 <memcpy>
      offset += length_msg;
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	4413      	add	r3, r2
 80029c8:	60fb      	str	r3, [r7, #12]
      return offset;
 80029ca:	68fb      	ldr	r3, [r7, #12]
    }
 80029cc:	4618      	mov	r0, r3
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80029de:	2300      	movs	r3, #0
 80029e0:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	4413      	add	r3, r2
 80029e8:	781a      	ldrb	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	3301      	adds	r3, #1
 80029f2:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	441a      	add	r2, r3
 80029fa:	f107 030c 	add.w	r3, r7, #12
 80029fe:	4611      	mov	r1, r2
 8002a00:	4618      	mov	r0, r3
 8002a02:	f000 ff41 	bl	8003888 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	3304      	adds	r3, #4
 8002a0a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	617b      	str	r3, [r7, #20]
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	4413      	add	r3, r2
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d20c      	bcs.n	8002a36 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	441a      	add	r2, r3
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	3b01      	subs	r3, #1
 8002a26:	6839      	ldr	r1, [r7, #0]
 8002a28:	440b      	add	r3, r1
 8002a2a:	7812      	ldrb	r2, [r2, #0]
 8002a2c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	3301      	adds	r3, #1
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	e7ec      	b.n	8002a10 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	4413      	add	r3, r2
 8002a42:	2200      	movs	r2, #0
 8002a44:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	441a      	add	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	4413      	add	r3, r2
 8002a58:	613b      	str	r3, [r7, #16]
     return offset;
 8002a5a:	693b      	ldr	r3, [r7, #16]
    }
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3718      	adds	r7, #24
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	4b03      	ldr	r3, [pc, #12]	; (8002a7c <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8002a6e:	4618      	mov	r0, r3
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	0800ee60 	.word	0x0800ee60

08002a80 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	4b03      	ldr	r3, [pc, #12]	; (8002a98 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	0800ee74 	.word	0x0800ee74

08002a9c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff fb5c 	bl	8002164 <_ZN3ros3MsgC1Ev>
 8002aac:	4a11      	ldr	r2, [pc, #68]	; (8002af4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	605a      	str	r2, [r3, #4]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	609a      	str	r2, [r3, #8]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	60da      	str	r2, [r3, #12]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	611a      	str	r2, [r3, #16]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f04f 0200 	mov.w	r2, #0
 8002ad0:	615a      	str	r2, [r3, #20]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	619a      	str	r2, [r3, #24]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	61da      	str	r2, [r3, #28]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	621a      	str	r2, [r3, #32]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4618      	mov	r0, r3
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	0800f248 	.word	0x0800f248

08002af8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b08a      	sub	sp, #40	; 0x28
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002b02:	2300      	movs	r3, #0
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6859      	ldr	r1, [r3, #4]
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	4413      	add	r3, r2
 8002b10:	b2ca      	uxtb	r2, r1
 8002b12:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	0a19      	lsrs	r1, r3, #8
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	683a      	ldr	r2, [r7, #0]
 8002b20:	4413      	add	r3, r2
 8002b22:	b2ca      	uxtb	r2, r1
 8002b24:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	0c19      	lsrs	r1, r3, #16
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2e:	3302      	adds	r3, #2
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	4413      	add	r3, r2
 8002b34:	b2ca      	uxtb	r2, r1
 8002b36:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	0e19      	lsrs	r1, r3, #24
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	3303      	adds	r3, #3
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	4413      	add	r3, r2
 8002b46:	b2ca      	uxtb	r2, r1
 8002b48:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	3304      	adds	r3, #4
 8002b4e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002b50:	2300      	movs	r3, #0
 8002b52:	623b      	str	r3, [r7, #32]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	6a3a      	ldr	r2, [r7, #32]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d22b      	bcs.n	8002bb6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68da      	ldr	r2, [r3, #12]
 8002b62:	6a3b      	ldr	r3, [r7, #32]
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002b6c:	6939      	ldr	r1, [r7, #16]
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	4413      	add	r3, r2
 8002b74:	b2ca      	uxtb	r2, r1
 8002b76:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	0a19      	lsrs	r1, r3, #8
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	3301      	adds	r3, #1
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	4413      	add	r3, r2
 8002b84:	b2ca      	uxtb	r2, r1
 8002b86:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	0c19      	lsrs	r1, r3, #16
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8e:	3302      	adds	r3, #2
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	4413      	add	r3, r2
 8002b94:	b2ca      	uxtb	r2, r1
 8002b96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	0e19      	lsrs	r1, r3, #24
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9e:	3303      	adds	r3, #3
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	b2ca      	uxtb	r2, r1
 8002ba6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002baa:	3304      	adds	r3, #4
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002bae:	6a3b      	ldr	r3, [r7, #32]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	623b      	str	r3, [r7, #32]
 8002bb4:	e7ce      	b.n	8002b54 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6919      	ldr	r1, [r3, #16]
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	b2ca      	uxtb	r2, r1
 8002bc2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	0a19      	lsrs	r1, r3, #8
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	3301      	adds	r3, #1
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	b2ca      	uxtb	r2, r1
 8002bd4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	0c19      	lsrs	r1, r3, #16
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	3302      	adds	r3, #2
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	4413      	add	r3, r2
 8002be4:	b2ca      	uxtb	r2, r1
 8002be6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	0e19      	lsrs	r1, r3, #24
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	3303      	adds	r3, #3
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	b2ca      	uxtb	r2, r1
 8002bf8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002c00:	2300      	movs	r3, #0
 8002c02:	61fb      	str	r3, [r7, #28]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	69fa      	ldr	r2, [r7, #28]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d22b      	bcs.n	8002c66 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	699a      	ldr	r2, [r3, #24]
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4413      	add	r3, r2
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002c1c:	68f9      	ldr	r1, [r7, #12]
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	4413      	add	r3, r2
 8002c24:	b2ca      	uxtb	r2, r1
 8002c26:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	0a19      	lsrs	r1, r3, #8
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	3301      	adds	r3, #1
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	4413      	add	r3, r2
 8002c34:	b2ca      	uxtb	r2, r1
 8002c36:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	0c19      	lsrs	r1, r3, #16
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	3302      	adds	r3, #2
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	4413      	add	r3, r2
 8002c44:	b2ca      	uxtb	r2, r1
 8002c46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	0e19      	lsrs	r1, r3, #24
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4e:	3303      	adds	r3, #3
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	4413      	add	r3, r2
 8002c54:	b2ca      	uxtb	r2, r1
 8002c56:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	3304      	adds	r3, #4
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	3301      	adds	r3, #1
 8002c62:	61fb      	str	r3, [r7, #28]
 8002c64:	e7ce      	b.n	8002c04 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69d9      	ldr	r1, [r3, #28]
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	4413      	add	r3, r2
 8002c70:	b2ca      	uxtb	r2, r1
 8002c72:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	69db      	ldr	r3, [r3, #28]
 8002c78:	0a19      	lsrs	r1, r3, #8
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	4413      	add	r3, r2
 8002c82:	b2ca      	uxtb	r2, r1
 8002c84:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	0c19      	lsrs	r1, r3, #16
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8e:	3302      	adds	r3, #2
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	4413      	add	r3, r2
 8002c94:	b2ca      	uxtb	r2, r1
 8002c96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	0e19      	lsrs	r1, r3, #24
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca0:	3303      	adds	r3, #3
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	b2ca      	uxtb	r2, r1
 8002ca8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	3304      	adds	r3, #4
 8002cae:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	61bb      	str	r3, [r7, #24]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	69db      	ldr	r3, [r3, #28]
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d228      	bcs.n	8002d10 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4413      	add	r3, r2
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fd fa80 	bl	80001d0 <strlen>
 8002cd0:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	6979      	ldr	r1, [r7, #20]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 fdb6 	bl	800384c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	18d0      	adds	r0, r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4413      	add	r3, r2
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	f00b fdea 	bl	800e8d4 <memcpy>
      offset += length_stringsi;
 8002d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	4413      	add	r3, r2
 8002d06:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	61bb      	str	r3, [r7, #24]
 8002d0e:	e7d1      	b.n	8002cb4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8002d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002d12:	4618      	mov	r0, r3
 8002d14:	3728      	adds	r7, #40	; 0x28
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b08e      	sub	sp, #56	; 0x38
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
 8002d22:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d34:	3301      	adds	r3, #1
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	4413      	add	r3, r2
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	021b      	lsls	r3, r3, #8
 8002d3e:	6a3a      	ldr	r2, [r7, #32]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d46:	3302      	adds	r3, #2
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	041b      	lsls	r3, r3, #16
 8002d50:	6a3a      	ldr	r2, [r7, #32]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d58:	3303      	adds	r3, #3
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	061b      	lsls	r3, r3, #24
 8002d62:	6a3a      	ldr	r2, [r7, #32]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d6a:	3304      	adds	r3, #4
 8002d6c:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	6a3a      	ldr	r2, [r7, #32]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d90a      	bls.n	8002d8e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68da      	ldr	r2, [r3, #12]
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4619      	mov	r1, r3
 8002d82:	4610      	mov	r0, r2
 8002d84:	f00b fe50 	bl	800ea28 <realloc>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a3a      	ldr	r2, [r7, #32]
 8002d92:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002d94:	2300      	movs	r3, #0
 8002d96:	633b      	str	r3, [r7, #48]	; 0x30
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d236      	bcs.n	8002e10 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8002da2:	2300      	movs	r3, #0
 8002da4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002daa:	6839      	ldr	r1, [r7, #0]
 8002dac:	440a      	add	r2, r1
 8002dae:	7812      	ldrb	r2, [r2, #0]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002db4:	697a      	ldr	r2, [r7, #20]
 8002db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002db8:	3301      	adds	r3, #1
 8002dba:	6839      	ldr	r1, [r7, #0]
 8002dbc:	440b      	add	r3, r1
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	021b      	lsls	r3, r3, #8
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dca:	3302      	adds	r3, #2
 8002dcc:	6839      	ldr	r1, [r7, #0]
 8002dce:	440b      	add	r3, r1
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	041b      	lsls	r3, r3, #16
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002dd8:	697a      	ldr	r2, [r7, #20]
 8002dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ddc:	3303      	adds	r3, #3
 8002dde:	6839      	ldr	r1, [r7, #0]
 8002de0:	440b      	add	r3, r1
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	061b      	lsls	r3, r3, #24
 8002de6:	4313      	orrs	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002df2:	3304      	adds	r3, #4
 8002df4:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	68da      	ldr	r2, [r3, #12]
 8002dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	3208      	adds	r2, #8
 8002e04:	6812      	ldr	r2, [r2, #0]
 8002e06:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	633b      	str	r3, [r7, #48]	; 0x30
 8002e0e:	e7c3      	b.n	8002d98 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	4413      	add	r3, r2
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	4413      	add	r3, r2
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	021b      	lsls	r3, r3, #8
 8002e26:	69fa      	ldr	r2, [r7, #28]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e2e:	3302      	adds	r3, #2
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	4413      	add	r3, r2
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	041b      	lsls	r3, r3, #16
 8002e38:	69fa      	ldr	r2, [r7, #28]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e40:	3303      	adds	r3, #3
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	4413      	add	r3, r2
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	061b      	lsls	r3, r3, #24
 8002e4a:	69fa      	ldr	r2, [r7, #28]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e52:	3304      	adds	r3, #4
 8002e54:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	69fa      	ldr	r2, [r7, #28]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d90a      	bls.n	8002e76 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	699a      	ldr	r2, [r3, #24]
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4619      	mov	r1, r3
 8002e6a:	4610      	mov	r0, r2
 8002e6c:	f00b fddc 	bl	800ea28 <realloc>
 8002e70:	4602      	mov	r2, r0
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	69fa      	ldr	r2, [r7, #28]
 8002e7a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d236      	bcs.n	8002ef8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e92:	6839      	ldr	r1, [r7, #0]
 8002e94:	440a      	add	r2, r1
 8002e96:	7812      	ldrb	r2, [r2, #0]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	6839      	ldr	r1, [r7, #0]
 8002ea4:	440b      	add	r3, r1
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	021b      	lsls	r3, r3, #8
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb2:	3302      	adds	r3, #2
 8002eb4:	6839      	ldr	r1, [r7, #0]
 8002eb6:	440b      	add	r3, r1
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	041b      	lsls	r3, r3, #16
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec4:	3303      	adds	r3, #3
 8002ec6:	6839      	ldr	r1, [r7, #0]
 8002ec8:	440b      	add	r3, r1
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	061b      	lsls	r3, r3, #24
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eda:	3304      	adds	r3, #4
 8002edc:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699a      	ldr	r2, [r3, #24]
 8002ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	3214      	adds	r2, #20
 8002eec:	6812      	ldr	r2, [r2, #0]
 8002eee:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ef6:	e7c3      	b.n	8002e80 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	4413      	add	r3, r2
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f04:	3301      	adds	r3, #1
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	4413      	add	r3, r2
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	021b      	lsls	r3, r3, #8
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f16:	3302      	adds	r3, #2
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	041b      	lsls	r3, r3, #16
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f28:	3303      	adds	r3, #3
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	061b      	lsls	r3, r3, #24
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f3a:	3304      	adds	r3, #4
 8002f3c:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d90a      	bls.n	8002f5e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4619      	mov	r1, r3
 8002f52:	4610      	mov	r0, r2
 8002f54:	f00b fd68 	bl	800ea28 <realloc>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002f64:	2300      	movs	r3, #0
 8002f66:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	69db      	ldr	r3, [r3, #28]
 8002f6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d23f      	bcs.n	8002ff2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	441a      	add	r2, r3
 8002f78:	f107 030c 	add.w	r3, r7, #12
 8002f7c:	4611      	mov	r1, r2
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f000 fc82 	bl	8003888 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f86:	3304      	adds	r3, #4
 8002f88:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4413      	add	r3, r2
 8002f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d20c      	bcs.n	8002fb4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9e:	441a      	add	r2, r3
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	6839      	ldr	r1, [r7, #0]
 8002fa6:	440b      	add	r3, r1
 8002fa8:	7812      	ldrb	r2, [r2, #0]
 8002faa:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fae:	3301      	adds	r3, #1
 8002fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb2:	e7ec      	b.n	8002f8e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002fb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	4413      	add	r3, r2
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	441a      	add	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002fd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	4413      	add	r3, r2
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	3220      	adds	r2, #32
 8002fe6:	6812      	ldr	r2, [r2, #0]
 8002fe8:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fec:	3301      	adds	r3, #1
 8002fee:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ff0:	e7ba      	b.n	8002f68 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8002ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3738      	adds	r7, #56	; 0x38
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	4b03      	ldr	r3, [pc, #12]	; (8003014 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8003006:	4618      	mov	r0, r3
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	0800f1cc 	.word	0x0800f1cc

08003018 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	4b03      	ldr	r3, [pc, #12]	; (8003030 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8003022:	4618      	mov	r0, r3
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	0800ee98 	.word	0x0800ee98

08003034 <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	691b      	ldr	r3, [r3, #16]
  }
 8003040:	4618      	mov	r0, r3
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 2048;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8003062:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003066:	4618      	mov	r0, r3
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
	...

08003074 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 2048;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
      huart(&huart5), rind(0), twind(0), tfind(0){
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a0c      	ldr	r2, [pc, #48]	; (80030b0 <_ZN13STM32HardwareC1Ev+0x3c>)
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003090:	461a      	mov	r2, r3
 8003092:	2300      	movs	r3, #0
 8003094:	6093      	str	r3, [r2, #8]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800309c:	461a      	mov	r2, r3
 800309e:	2300      	movs	r3, #0
 80030a0:	60d3      	str	r3, [r2, #12]
    }
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4618      	mov	r0, r3
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	20002cbc 	.word	0x20002cbc

080030b4 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 f804 	bl	80030ca <_ZN13STM32Hardware10reset_rbufEv>
    }
 80030c2:	bf00      	nop
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b082      	sub	sp, #8
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6818      	ldr	r0, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	3304      	adds	r3, #4
 80030da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030de:	4619      	mov	r1, r3
 80030e0:	f007 f9e4 	bl	800a4ac <HAL_UART_Receive_DMA>
    }
 80030e4:	bf00      	nop
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <_ZN13STM32Hardware4readEv>:

    int read(){
 80030ec:	b590      	push	{r4, r7, lr}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
      int c = -1;
 80030f4:	f04f 33ff 	mov.w	r3, #4294967295
 80030f8:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f7ff ffa3 	bl	800304c <_ZN13STM32Hardware10getRdmaIndEv>
 8003106:	4603      	mov	r3, r0
 8003108:	429c      	cmp	r4, r3
 800310a:	bf14      	ite	ne
 800310c:	2301      	movne	r3, #1
 800310e:	2300      	moveq	r3, #0
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d012      	beq.n	800313c <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800311c:	1c59      	adds	r1, r3, #1
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	f8c2 1804 	str.w	r1, [r2, #2052]	; 0x804
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	4413      	add	r3, r2
 8003128:	791b      	ldrb	r3, [r3, #4]
 800312a:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8003132:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
      }
      return c;
 800313c:	68fb      	ldr	r3, [r7, #12]
    }
 800313e:	4618      	mov	r0, r3
 8003140:	3714      	adds	r7, #20
 8003142:	46bd      	mov	sp, r7
 8003144:	bd90      	pop	{r4, r7, pc}
	...

08003148 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b20      	cmp	r3, #32
 800315c:	d108      	bne.n	8003170 <_ZN13STM32Hardware5flushEv+0x28>
 800315e:	4b2d      	ldr	r3, [pc, #180]	; (8003214 <_ZN13STM32Hardware5flushEv+0xcc>)
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	f083 0301 	eor.w	r3, r3, #1
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <_ZN13STM32Hardware5flushEv+0x28>
 800316c:	2301      	movs	r3, #1
 800316e:	e000      	b.n	8003172 <_ZN13STM32Hardware5flushEv+0x2a>
 8003170:	2300      	movs	r3, #0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d049      	beq.n	800320a <_ZN13STM32Hardware5flushEv+0xc2>
        mutex = true;
 8003176:	4b27      	ldr	r3, [pc, #156]	; (8003214 <_ZN13STM32Hardware5flushEv+0xcc>)
 8003178:	2201      	movs	r2, #1
 800317a:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003182:	689a      	ldr	r2, [r3, #8]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	429a      	cmp	r2, r3
 800318e:	d039      	beq.n	8003204 <_ZN13STM32Hardware5flushEv+0xbc>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003196:	68da      	ldr	r2, [r3, #12]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d20c      	bcs.n	80031be <_ZN13STM32Hardware5flushEv+0x76>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	e007      	b.n	80031ce <_ZN13STM32Hardware5flushEv+0x86>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6818      	ldr	r0, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	f603 0308 	addw	r3, r3, #2056	; 0x808
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	4413      	add	r3, r2
 80031e4:	89fa      	ldrh	r2, [r7, #14]
 80031e6:	4619      	mov	r1, r3
 80031e8:	f007 f8e2 	bl	800a3b0 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031f2:	68da      	ldr	r2, [r3, #12]
 80031f4:	89fb      	ldrh	r3, [r7, #14]
 80031f6:	4413      	add	r3, r2
 80031f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003202:	60d3      	str	r3, [r2, #12]
        }
        mutex = false;
 8003204:	4b03      	ldr	r3, [pc, #12]	; (8003214 <_ZN13STM32Hardware5flushEv+0xcc>)
 8003206:	2200      	movs	r2, #0
 8003208:	701a      	strb	r2, [r3, #0]
      }
    }
 800320a:	bf00      	nop
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	20000478 	.word	0x20000478

08003218 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
      int n = length;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800322e:	bfa8      	it	ge
 8003230:	f44f 6300 	movge.w	r3, #2048	; 0x800
 8003234:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f5c3 6200 	rsb	r2, r3, #2048	; 0x800
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	4293      	cmp	r3, r2
 8003246:	bf28      	it	cs
 8003248:	4613      	movcs	r3, r2
 800324a:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	4413      	add	r3, r2
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	68b9      	ldr	r1, [r7, #8]
 8003260:	4618      	mov	r0, r3
 8003262:	f00b fb37 	bl	800e8d4 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800326c:	689a      	ldr	r2, [r3, #8]
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	4413      	add	r3, r2
 8003272:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800327c:	6093      	str	r3, [r2, #8]

      if(n != n_tail){
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	429a      	cmp	r2, r3
 8003284:	d00b      	beq.n	800329e <_ZN13STM32Hardware5writeEPhi+0x86>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f603 0008 	addw	r0, r3, #2056	; 0x808
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	68ba      	ldr	r2, [r7, #8]
 8003290:	18d1      	adds	r1, r2, r3
 8003292:	697a      	ldr	r2, [r7, #20]
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	461a      	mov	r2, r3
 800329a:	f00b fb1b 	bl	800e8d4 <memcpy>
      }

      flush();
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f7ff ff52 	bl	8003148 <_ZN13STM32Hardware5flushEv>
    }
 80032a4:	bf00      	nop
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	f004 fb38 	bl	8007928 <HAL_GetTick>
 80032b8:	4603      	mov	r3, r0
 80032ba:	4618      	mov	r0, r3
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
	...

080032c4 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	4a04      	ldr	r2, [pc, #16]	; (80032e0 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4618      	mov	r0, r3
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr
 80032e0:	0800f234 	.word	0x0800f234

080032e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 2048,
         int OUTPUT_SIZE = 2048>
class NodeHandle_ : public NodeHandleBase_
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7ff ffe8 	bl	80032c4 <_ZN3ros15NodeHandleBase_C1Ev>
 80032f4:	4a4b      	ldr	r2, [pc, #300]	; (8003424 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev+0x140>)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	3304      	adds	r3, #4
 80032fe:	4618      	mov	r0, r3
 8003300:	f7ff feb8 	bl	8003074 <_ZN13STM32HardwareC1Ev>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800330a:	461a      	mov	r2, r3
 800330c:	2300      	movs	r3, #0
 800330e:	6153      	str	r3, [r2, #20]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003316:	461a      	mov	r2, r3
 8003318:	2300      	movs	r3, #0
 800331a:	6193      	str	r3, [r2, #24]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003322:	461a      	mov	r2, r3
 8003324:	2300      	movs	r3, #0
 8003326:	61d3      	str	r3, [r2, #28]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800332e:	461a      	mov	r2, r3
 8003330:	2300      	movs	r3, #0
 8003332:	6213      	str	r3, [r2, #32]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800333a:	3324      	adds	r3, #36	; 0x24
 800333c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003340:	2100      	movs	r1, #0
 8003342:	4618      	mov	r0, r3
 8003344:	f00b fad4 	bl	800e8f0 <memset>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800334e:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8003352:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003356:	2100      	movs	r1, #0
 8003358:	4618      	mov	r0, r3
 800335a:	f00b fac9 	bl	800e8f0 <memset>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003364:	3324      	adds	r3, #36	; 0x24
 8003366:	2264      	movs	r2, #100	; 0x64
 8003368:	2100      	movs	r1, #0
 800336a:	4618      	mov	r0, r3
 800336c:	f00b fac0 	bl	800e8f0 <memset>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003376:	3388      	adds	r3, #136	; 0x88
 8003378:	2264      	movs	r2, #100	; 0x64
 800337a:	2100      	movs	r1, #0
 800337c:	4618      	mov	r0, r3
 800337e:	f00b fab7 	bl	800e8f0 <memset>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003388:	461a      	mov	r2, r3
 800338a:	2300      	movs	r3, #0
 800338c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003396:	461a      	mov	r2, r3
 8003398:	2300      	movs	r3, #0
 800339a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80033a4:	461a      	mov	r2, r3
 80033a6:	2300      	movs	r3, #0
 80033a8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80033b2:	461a      	mov	r2, r3
 80033b4:	2300      	movs	r3, #0
 80033b6:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80033c0:	461a      	mov	r2, r3
 80033c2:	2300      	movs	r3, #0
 80033c4:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80033da:	461a      	mov	r2, r3
 80033dc:	2300      	movs	r3, #0
 80033de:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80033e8:	461a      	mov	r2, r3
 80033ea:	2300      	movs	r3, #0
 80033ec:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80033f6:	461a      	mov	r2, r3
 80033f8:	2300      	movs	r3, #0
 80033fa:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8003410:	3314      	adds	r3, #20
 8003412:	4618      	mov	r0, r3
 8003414:	f7ff fb42 	bl	8002a9c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4618      	mov	r0, r3
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	0800f208 	.word	0x0800f208

08003428 <HAL_UART_TxCpltCallback>:
void MotorTest();

// Subscribe to Twist messages on cmd_vel.
ros::Subscriber<geometry_msgs::Twist> sub_cmd_vel("cmd_vel", &cmd_velCallback);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 8003430:	4805      	ldr	r0, [pc, #20]	; (8003448 <HAL_UART_TxCpltCallback+0x20>)
 8003432:	f000 fa83 	bl	800393c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE11getHardwareEv>
 8003436:	4603      	mov	r3, r0
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff fe85 	bl	8003148 <_ZN13STM32Hardware5flushEv>
}
 800343e:	bf00      	nop
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	2000047c 	.word	0x2000047c

0800344c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8003454:	4805      	ldr	r0, [pc, #20]	; (800346c <HAL_UART_RxCpltCallback+0x20>)
 8003456:	f000 fa71 	bl	800393c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE11getHardwareEv>
 800345a:	4603      	mov	r3, r0
 800345c:	4618      	mov	r0, r3
 800345e:	f7ff fe34 	bl	80030ca <_ZN13STM32Hardware10reset_rbufEv>
}
 8003462:	bf00      	nop
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	2000047c 	.word	0x2000047c

08003470 <setup>:

// This is an Arduino convention.  Place everything that needs to run just
// once in the setup() funtion.  The environment will call setup()

void setup(void) {
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0

  leftWheelPID.SetSampleTime(PID_PERIOD);
 8003474:	2132      	movs	r1, #50	; 0x32
 8003476:	481c      	ldr	r0, [pc, #112]	; (80034e8 <setup+0x78>)
 8003478:	f002 feba 	bl	80061f0 <_ZN3PID13SetSampleTimeEi>
  rightWheelPID.SetSampleTime(PID_PERIOD);
 800347c:	2132      	movs	r1, #50	; 0x32
 800347e:	481b      	ldr	r0, [pc, #108]	; (80034ec <setup+0x7c>)
 8003480:	f002 feb6 	bl	80061f0 <_ZN3PID13SetSampleTimeEi>
  leftWheelPID.SetOutputLimits(-255, 255);
 8003484:	ed9f 1b14 	vldr	d1, [pc, #80]	; 80034d8 <setup+0x68>
 8003488:	ed9f 0b15 	vldr	d0, [pc, #84]	; 80034e0 <setup+0x70>
 800348c:	4816      	ldr	r0, [pc, #88]	; (80034e8 <setup+0x78>)
 800348e:	f002 feea 	bl	8006266 <_ZN3PID15SetOutputLimitsEdd>
  rightWheelPID.SetOutputLimits(-255, 255);
 8003492:	ed9f 1b11 	vldr	d1, [pc, #68]	; 80034d8 <setup+0x68>
 8003496:	ed9f 0b12 	vldr	d0, [pc, #72]	; 80034e0 <setup+0x70>
 800349a:	4814      	ldr	r0, [pc, #80]	; (80034ec <setup+0x7c>)
 800349c:	f002 fee3 	bl	8006266 <_ZN3PID15SetOutputLimitsEdd>
  leftWheelPID.SetMode(AUTOMATIC);
 80034a0:	2101      	movs	r1, #1
 80034a2:	4811      	ldr	r0, [pc, #68]	; (80034e8 <setup+0x78>)
 80034a4:	f002 ff4e 	bl	8006344 <_ZN3PID7SetModeEi>
  rightWheelPID.SetMode(AUTOMATIC);
 80034a8:	2101      	movs	r1, #1
 80034aa:	4810      	ldr	r0, [pc, #64]	; (80034ec <setup+0x7c>)
 80034ac:	f002 ff4a 	bl	8006344 <_ZN3PID7SetModeEi>

  // Connect to ROS computer and wait for connection
  nh.initNode();
 80034b0:	480f      	ldr	r0, [pc, #60]	; (80034f0 <setup+0x80>)
 80034b2:	f000 fa4f 	bl	8003954 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8initNodeEv>

  // Advertize odometry and transform
  odo.setupPubs(nh);
 80034b6:	490e      	ldr	r1, [pc, #56]	; (80034f0 <setup+0x80>)
 80034b8:	480e      	ldr	r0, [pc, #56]	; (80034f4 <setup+0x84>)
 80034ba:	f002 f9bf 	bl	800583c <_ZN8Odometer9setupPubsERN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEE>

  // Subscribe to cmd_vel
  nh.subscribe(sub_cmd_vel);
 80034be:	490e      	ldr	r1, [pc, #56]	; (80034f8 <setup+0x88>)
 80034c0:	480b      	ldr	r0, [pc, #44]	; (80034f0 <setup+0x80>)
 80034c2:	f000 fa70 	bl	80039a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9subscribeERNS_11Subscriber_E>

  nh.loginfo("starting...");
 80034c6:	490d      	ldr	r1, [pc, #52]	; (80034fc <setup+0x8c>)
 80034c8:	4809      	ldr	r0, [pc, #36]	; (80034f0 <setup+0x80>)
 80034ca:	f000 fa97 	bl	80039fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7loginfoEPKc>
}
 80034ce:	bf00      	nop
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	f3af 8000 	nop.w
 80034d8:	00000000 	.word	0x00000000
 80034dc:	406fe000 	.word	0x406fe000
 80034e0:	00000000 	.word	0x00000000
 80034e4:	c06fe000 	.word	0xc06fe000
 80034e8:	20002610 	.word	0x20002610
 80034ec:	20002688 	.word	0x20002688
 80034f0:	2000047c 	.word	0x2000047c
 80034f4:	200025e8 	.word	0x200025e8
 80034f8:	20002700 	.word	0x20002700
 80034fc:	0800eebc 	.word	0x0800eebc

08003500 <loop>:

// This loop() funtion is an arduino convention.  It is called by the environment
// inside a tight loop and runs forever or until the CPU is reset or powered off.
//

void loop(void) {
 8003500:	b580      	push	{r7, lr}
 8003502:	b08a      	sub	sp, #40	; 0x28
 8003504:	af00      	add	r7, sp, #0
  //  3.  The Odometry and TF publisher
  // Each wheel has it's own PID control and might do it's computation at
  // different times.

  // Get encoder values
  long encLeft  = odometry[0];
 8003506:	4b6a      	ldr	r3, [pc, #424]	; (80036b0 <loop+0x1b0>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	627b      	str	r3, [r7, #36]	; 0x24
  long encRight = odometry[1];
 800350c:	4b68      	ldr	r3, [pc, #416]	; (80036b0 <loop+0x1b0>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	623b      	str	r3, [r7, #32]
  long curMillis = tick;  // capture time when encoders are sampled
 8003512:	4b68      	ldr	r3, [pc, #416]	; (80036b4 <loop+0x1b4>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	61fb      	str	r3, [r7, #28]


  //=========> LEFT PID Controler
  //
  // Figure out how far we have gone in meters from last PID computation
  distLeft  = meterPerTick * float(encLeft  - encoderLeftLastValuePid);
 8003518:	4b67      	ldr	r3, [pc, #412]	; (80036b8 <loop+0x1b8>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	ee07 3a90 	vmov	s15, r3
 8003524:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003528:	ed9f 7a64 	vldr	s14, [pc, #400]	; 80036bc <loop+0x1bc>
 800352c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003530:	edc7 7a06 	vstr	s15, [r7, #24]

  //figure out how fast the LEFT wheel went, in meters per second
  millis_from_last  = curMillis - millis_last_LEFT;
 8003534:	69fa      	ldr	r2, [r7, #28]
 8003536:	4b62      	ldr	r3, [pc, #392]	; (80036c0 <loop+0x1c0>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	617b      	str	r3, [r7, #20]
  seconds_from_last = float(millis_from_last) / 1000.0;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	ee07 3a90 	vmov	s15, r3
 8003544:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003548:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80036c4 <loop+0x1c4>
 800354c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003550:	edc7 7a04 	vstr	s15, [r7, #16]
  leftInput  = distLeft  / seconds_from_last;
 8003554:	ed97 7a06 	vldr	s14, [r7, #24]
 8003558:	edd7 7a04 	vldr	s15, [r7, #16]
 800355c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003560:	ee16 0a90 	vmov	r0, s13
 8003564:	f7fc ffa0 	bl	80004a8 <__aeabi_f2d>
 8003568:	4602      	mov	r2, r0
 800356a:	460b      	mov	r3, r1
 800356c:	4956      	ldr	r1, [pc, #344]	; (80036c8 <loop+0x1c8>)
 800356e:	e9c1 2300 	strd	r2, r3, [r1]
  // The PID.Compute() method will look at the millis() clock and determine if it is
  // time to calculate new output.   If so it returns true and then we update the
  // motor speed.  Note the motor update speed update rate is independent of the /tf
  // and /odom publication rate.

  if (leftWheelPID.Compute()) {
 8003572:	4856      	ldr	r0, [pc, #344]	; (80036cc <loop+0x1cc>)
 8003574:	f002 fca0 	bl	8005eb8 <_ZN3PID7ComputeEv>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d005      	beq.n	800358a <loop+0x8a>
      encoderLeftLastValuePid = encLeft;
 800357e:	4a4e      	ldr	r2, [pc, #312]	; (80036b8 <loop+0x1b8>)
 8003580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003582:	6013      	str	r3, [r2, #0]
      millis_last_LEFT = curMillis;
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	4a4e      	ldr	r2, [pc, #312]	; (80036c0 <loop+0x1c0>)
 8003588:	6013      	str	r3, [r2, #0]


  //==========> RIGHT PID Controler
  //
  // Figure out how far we have gone in meters from last PID computation
  distRight = meterPerTick * float(encRight - encoderRightLastValuePid);
 800358a:	4b51      	ldr	r3, [pc, #324]	; (80036d0 <loop+0x1d0>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6a3a      	ldr	r2, [r7, #32]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	ee07 3a90 	vmov	s15, r3
 8003596:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800359a:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80036bc <loop+0x1bc>
 800359e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035a2:	edc7 7a03 	vstr	s15, [r7, #12]

  //figure out how fast the RIGHT wheel went, in meters per second
  millis_from_last  = curMillis - millis_last_RIGHT;
 80035a6:	69fa      	ldr	r2, [r7, #28]
 80035a8:	4b4a      	ldr	r3, [pc, #296]	; (80036d4 <loop+0x1d4>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	617b      	str	r3, [r7, #20]
  seconds_from_last = float(millis_from_last) / 1000.0;
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	ee07 3a90 	vmov	s15, r3
 80035b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035ba:	eddf 6a42 	vldr	s13, [pc, #264]	; 80036c4 <loop+0x1c4>
 80035be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035c2:	edc7 7a04 	vstr	s15, [r7, #16]
  rightInput  = distRight  / seconds_from_last;
 80035c6:	ed97 7a03 	vldr	s14, [r7, #12]
 80035ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80035ce:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80035d2:	ee16 0a90 	vmov	r0, s13
 80035d6:	f7fc ff67 	bl	80004a8 <__aeabi_f2d>
 80035da:	4602      	mov	r2, r0
 80035dc:	460b      	mov	r3, r1
 80035de:	493e      	ldr	r1, [pc, #248]	; (80036d8 <loop+0x1d8>)
 80035e0:	e9c1 2300 	strd	r2, r3, [r1]
  // The PID.Compute() method will look at the millis() clock and determine if it is
  // time to calculate new output.   If so it returns true and then we update the
  // motor speed.  Note the motor update speed update rate is independent of the /tf
  // and /odom publication rate.

  if (rightWheelPID.Compute()) {
 80035e4:	483d      	ldr	r0, [pc, #244]	; (80036dc <loop+0x1dc>)
 80035e6:	f002 fc67 	bl	8005eb8 <_ZN3PID7ComputeEv>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d005      	beq.n	80035fc <loop+0xfc>
      encoderRightLastValuePid = encRight;
 80035f0:	4a37      	ldr	r2, [pc, #220]	; (80036d0 <loop+0x1d0>)
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	6013      	str	r3, [r2, #0]
      millis_last_RIGHT = curMillis;
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	4a36      	ldr	r2, [pc, #216]	; (80036d4 <loop+0x1d4>)
 80035fa:	6013      	str	r3, [r2, #0]
    }

  //==========> OdometryPublsher
  //
  // Check if it is time to publish /odom and /tf
  if (curMillis >= NextPubMillis) {
 80035fc:	69fa      	ldr	r2, [r7, #28]
 80035fe:	4b38      	ldr	r3, [pc, #224]	; (80036e0 <loop+0x1e0>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	429a      	cmp	r2, r3
 8003604:	d34d      	bcc.n	80036a2 <loop+0x1a2>
    NextPubMillis = curMillis + ODO_PERIOD;
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	330a      	adds	r3, #10
 800360a:	461a      	mov	r2, r3
 800360c:	4b34      	ldr	r3, [pc, #208]	; (80036e0 <loop+0x1e0>)
 800360e:	601a      	str	r2, [r3, #0]

    // Figure out how far we have gone in meters from last PID computation
    distLeft  = meterPerTick * float(encLeft  - encoderLeftLastValueOdo);
 8003610:	4b34      	ldr	r3, [pc, #208]	; (80036e4 <loop+0x1e4>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	ee07 3a90 	vmov	s15, r3
 800361c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003620:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80036bc <loop+0x1bc>
 8003624:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003628:	edc7 7a06 	vstr	s15, [r7, #24]
    distRight = meterPerTick * float(encRight - encoderRightLastValueOdo);
 800362c:	4b2e      	ldr	r3, [pc, #184]	; (80036e8 <loop+0x1e8>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6a3a      	ldr	r2, [r7, #32]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	ee07 3a90 	vmov	s15, r3
 8003638:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800363c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80036bc <loop+0x1bc>
 8003640:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003644:	edc7 7a03 	vstr	s15, [r7, #12]

    // Publish odometry
    float odoInterval = float(curMillis - timeLastOdo) / 1000.0;
 8003648:	4b28      	ldr	r3, [pc, #160]	; (80036ec <loop+0x1ec>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	69fa      	ldr	r2, [r7, #28]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	ee07 3a90 	vmov	s15, r3
 8003654:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003658:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80036c4 <loop+0x1c4>
 800365c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003660:	edc7 7a02 	vstr	s15, [r7, #8]
    odo.update_publish(nh.now(), odoInterval, distLeft, distRight);
 8003664:	463b      	mov	r3, r7
 8003666:	4922      	ldr	r1, [pc, #136]	; (80036f0 <loop+0x1f0>)
 8003668:	4618      	mov	r0, r3
 800366a:	f000 f9d5 	bl	8003a18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3nowEv>
 800366e:	ed97 1a03 	vldr	s2, [r7, #12]
 8003672:	edd7 0a06 	vldr	s1, [r7, #24]
 8003676:	ed97 0a02 	vldr	s0, [r7, #8]
 800367a:	463b      	mov	r3, r7
 800367c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003680:	481c      	ldr	r0, [pc, #112]	; (80036f4 <loop+0x1f4>)
 8003682:	f002 f8f1 	bl	8005868 <_ZN8Odometer14update_publishEN3ros4TimeEfff>

    encoderLeftLastValueOdo  = encLeft;
 8003686:	4a17      	ldr	r2, [pc, #92]	; (80036e4 <loop+0x1e4>)
 8003688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368a:	6013      	str	r3, [r2, #0]
    encoderRightLastValueOdo = encRight;
 800368c:	4a16      	ldr	r2, [pc, #88]	; (80036e8 <loop+0x1e8>)
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	6013      	str	r3, [r2, #0]
    timeLastOdo = curMillis;
 8003692:	4a16      	ldr	r2, [pc, #88]	; (80036ec <loop+0x1ec>)
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	6013      	str	r3, [r2, #0]
    test++;
 8003698:	4b17      	ldr	r3, [pc, #92]	; (80036f8 <loop+0x1f8>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	3301      	adds	r3, #1
 800369e:	4a16      	ldr	r2, [pc, #88]	; (80036f8 <loop+0x1f8>)
 80036a0:	6013      	str	r3, [r2, #0]
    }


  // handle any data movements across the serial interface
  nh.spinOnce();
 80036a2:	4813      	ldr	r0, [pc, #76]	; (80036f0 <loop+0x1f0>)
 80036a4:	f000 f9f6 	bl	8003a94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv>

}
 80036a8:	bf00      	nop
 80036aa:	3728      	adds	r7, #40	; 0x28
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	20000460 	.word	0x20000460
 80036b4:	20000470 	.word	0x20000470
 80036b8:	20002738 	.word	0x20002738
 80036bc:	39c8b439 	.word	0x39c8b439
 80036c0:	2000273c 	.word	0x2000273c
 80036c4:	447a0000 	.word	0x447a0000
 80036c8:	200025c0 	.word	0x200025c0
 80036cc:	20002610 	.word	0x20002610
 80036d0:	20002740 	.word	0x20002740
 80036d4:	20002744 	.word	0x20002744
 80036d8:	200025d8 	.word	0x200025d8
 80036dc:	20002688 	.word	0x20002688
 80036e0:	20002748 	.word	0x20002748
 80036e4:	2000274c 	.word	0x2000274c
 80036e8:	20002750 	.word	0x20002750
 80036ec:	20002754 	.word	0x20002754
 80036f0:	2000047c 	.word	0x2000047c
 80036f4:	200025e8 	.word	0x200025e8
 80036f8:	20000474 	.word	0x20000474
 80036fc:	00000000 	.word	0x00000000

08003700 <_Z15cmd_velCallbackRKN13geometry_msgs5TwistE>:

// This funtion is called every time we receive a Twist message.
// We do not send the commanded speed to the wheels.  Rather we set
// thePID loops set point to the commanded sprrd.
void cmd_velCallback(const geometry_msgs::Twist& twist_msg) {
 8003700:	b5b0      	push	{r4, r5, r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  //    linear.x  is the forward speed in meters per second.
  //              (The "x" axis points forward.)
  //    angular.y is the rotation about the z or vertical
  //              axis in radians per second.
  //
  float vel_x   = twist_msg.linear.x;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	617b      	str	r3, [r7, #20]
  float vel_th  = twist_msg.angular.z;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	613b      	str	r3, [r7, #16]

  // This is a "hack".  It turns ou the motors have a minimum
  // speed because of internal friction.   If the commanded speed is
  // below a threshold we replace the commanded speed with zero.
  // TODO:  Find a better threshold, make it a parameter
  if (fabs(vel_x)  < 0.001) vel_x  = 0.0;
 8003714:	ed97 0a05 	vldr	s0, [r7, #20]
 8003718:	f7fe fbcb 	bl	8001eb2 <_ZSt4fabsf>
 800371c:	ee10 3a10 	vmov	r3, s0
 8003720:	4618      	mov	r0, r3
 8003722:	f7fc fec1 	bl	80004a8 <__aeabi_f2d>
 8003726:	2301      	movs	r3, #1
 8003728:	461c      	mov	r4, r3
 800372a:	a346      	add	r3, pc, #280	; (adr r3, 8003844 <_Z15cmd_velCallbackRKN13geometry_msgs5TwistE+0x144>)
 800372c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003730:	f7fd f984 	bl	8000a3c <__aeabi_dcmplt>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <_Z15cmd_velCallbackRKN13geometry_msgs5TwistE+0x3e>
 800373a:	2300      	movs	r3, #0
 800373c:	461c      	mov	r4, r3
 800373e:	b2e3      	uxtb	r3, r4
 8003740:	2b00      	cmp	r3, #0
 8003742:	d002      	beq.n	800374a <_Z15cmd_velCallbackRKN13geometry_msgs5TwistE+0x4a>
 8003744:	f04f 0300 	mov.w	r3, #0
 8003748:	617b      	str	r3, [r7, #20]
  if (fabs(vel_th) < 0.001) vel_th = 0.0;
 800374a:	ed97 0a04 	vldr	s0, [r7, #16]
 800374e:	f7fe fbb0 	bl	8001eb2 <_ZSt4fabsf>
 8003752:	ee10 3a10 	vmov	r3, s0
 8003756:	4618      	mov	r0, r3
 8003758:	f7fc fea6 	bl	80004a8 <__aeabi_f2d>
 800375c:	2301      	movs	r3, #1
 800375e:	461c      	mov	r4, r3
 8003760:	a338      	add	r3, pc, #224	; (adr r3, 8003844 <_Z15cmd_velCallbackRKN13geometry_msgs5TwistE+0x144>)
 8003762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003766:	f7fd f969 	bl	8000a3c <__aeabi_dcmplt>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <_Z15cmd_velCallbackRKN13geometry_msgs5TwistE+0x74>
 8003770:	2300      	movs	r3, #0
 8003772:	461c      	mov	r4, r3
 8003774:	b2e3      	uxtb	r3, r4
 8003776:	2b00      	cmp	r3, #0
 8003778:	d002      	beq.n	8003780 <_Z15cmd_velCallbackRKN13geometry_msgs5TwistE+0x80>
 800377a:	f04f 0300 	mov.w	r3, #0
 800377e:	613b      	str	r3, [r7, #16]

  // Compute the wheel speeds in meters per second.
  float left_vel  =  vel_x - (vel_th * base_width / 2.0);
 8003780:	6978      	ldr	r0, [r7, #20]
 8003782:	f7fc fe91 	bl	80004a8 <__aeabi_f2d>
 8003786:	4604      	mov	r4, r0
 8003788:	460d      	mov	r5, r1
 800378a:	edd7 7a04 	vldr	s15, [r7, #16]
 800378e:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003838 <_Z15cmd_velCallbackRKN13geometry_msgs5TwistE+0x138>
 8003792:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003796:	ee17 0a90 	vmov	r0, s15
 800379a:	f7fc fe85 	bl	80004a8 <__aeabi_f2d>
 800379e:	f04f 0200 	mov.w	r2, #0
 80037a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80037a6:	f7fd f801 	bl	80007ac <__aeabi_ddiv>
 80037aa:	4602      	mov	r2, r0
 80037ac:	460b      	mov	r3, r1
 80037ae:	4620      	mov	r0, r4
 80037b0:	4629      	mov	r1, r5
 80037b2:	f7fc fd19 	bl	80001e8 <__aeabi_dsub>
 80037b6:	4602      	mov	r2, r0
 80037b8:	460b      	mov	r3, r1
 80037ba:	4610      	mov	r0, r2
 80037bc:	4619      	mov	r1, r3
 80037be:	f7fd f98d 	bl	8000adc <__aeabi_d2f>
 80037c2:	4603      	mov	r3, r0
 80037c4:	60fb      	str	r3, [r7, #12]
  float right_vel =  vel_x + (vel_th * base_width / 2.0);
 80037c6:	6978      	ldr	r0, [r7, #20]
 80037c8:	f7fc fe6e 	bl	80004a8 <__aeabi_f2d>
 80037cc:	4604      	mov	r4, r0
 80037ce:	460d      	mov	r5, r1
 80037d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80037d4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003838 <_Z15cmd_velCallbackRKN13geometry_msgs5TwistE+0x138>
 80037d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037dc:	ee17 0a90 	vmov	r0, s15
 80037e0:	f7fc fe62 	bl	80004a8 <__aeabi_f2d>
 80037e4:	f04f 0200 	mov.w	r2, #0
 80037e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80037ec:	f7fc ffde 	bl	80007ac <__aeabi_ddiv>
 80037f0:	4602      	mov	r2, r0
 80037f2:	460b      	mov	r3, r1
 80037f4:	4620      	mov	r0, r4
 80037f6:	4629      	mov	r1, r5
 80037f8:	f7fc fcf8 	bl	80001ec <__adddf3>
 80037fc:	4602      	mov	r2, r0
 80037fe:	460b      	mov	r3, r1
 8003800:	4610      	mov	r0, r2
 8003802:	4619      	mov	r1, r3
 8003804:	f7fd f96a 	bl	8000adc <__aeabi_d2f>
 8003808:	4603      	mov	r3, r0
 800380a:	60bb      	str	r3, [r7, #8]
  // Show the Twist message on the LCD.
  //displayStatus(&vel_x, &vel_th);

  // The PID works in units of meters per second, so no
  // conversion is needed.
  leftSetpoint  = left_vel;
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f7fc fe4b 	bl	80004a8 <__aeabi_f2d>
 8003812:	4602      	mov	r2, r0
 8003814:	460b      	mov	r3, r1
 8003816:	4909      	ldr	r1, [pc, #36]	; (800383c <_Z15cmd_velCallbackRKN13geometry_msgs5TwistE+0x13c>)
 8003818:	e9c1 2300 	strd	r2, r3, [r1]
  rightSetpoint = right_vel;
 800381c:	68b8      	ldr	r0, [r7, #8]
 800381e:	f7fc fe43 	bl	80004a8 <__aeabi_f2d>
 8003822:	4602      	mov	r2, r0
 8003824:	460b      	mov	r3, r1
 8003826:	4906      	ldr	r1, [pc, #24]	; (8003840 <_Z15cmd_velCallbackRKN13geometry_msgs5TwistE+0x140>)
 8003828:	e9c1 2300 	strd	r2, r3, [r1]
}
 800382c:	bf00      	nop
 800382e:	3718      	adds	r7, #24
 8003830:	46bd      	mov	sp, r7
 8003832:	bdb0      	pop	{r4, r5, r7, pc}
 8003834:	f3af 8000 	nop.w
 8003838:	3e47ae14 	.word	0x3e47ae14
 800383c:	200025b8 	.word	0x200025b8
 8003840:	200025d0 	.word	0x200025d0
 8003844:	d2f1a9fc 	.word	0xd2f1a9fc
 8003848:	3f50624d 	.word	0x3f50624d

0800384c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003856:	2300      	movs	r3, #0
 8003858:	60fb      	str	r3, [r7, #12]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2b03      	cmp	r3, #3
 800385e:	d80d      	bhi.n	800387c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	fa22 f103 	lsr.w	r1, r2, r3
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	4413      	add	r3, r2
 8003870:	b2ca      	uxtb	r2, r1
 8003872:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	3301      	adds	r3, #1
 8003878:	60fb      	str	r3, [r7, #12]
 800387a:	e7ee      	b.n	800385a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 800387c:	bf00      	nop
 800387e:	3714      	adds	r7, #20
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003898:	2300      	movs	r3, #0
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2b03      	cmp	r3, #3
 80038a0:	d811      	bhi.n	80038c6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6839      	ldr	r1, [r7, #0]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	440a      	add	r2, r1
 80038ac:	7812      	ldrb	r2, [r2, #0]
 80038ae:	4611      	mov	r1, r2
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	00d2      	lsls	r2, r2, #3
 80038b4:	fa01 f202 	lsl.w	r2, r1, r2
 80038b8:	431a      	orrs	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	3301      	adds	r3, #1
 80038c2:	60fb      	str	r3, [r7, #12]
 80038c4:	e7ea      	b.n	800389c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 80038c6:	bf00      	nop
 80038c8:	3714      	adds	r7, #20
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
	...

080038d4 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	4a04      	ldr	r2, [pc, #16]	; (80038f0 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4618      	mov	r0, r3
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	0800f21c 	.word	0x0800f21c

080038f4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
 8003900:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	4618      	mov	r0, r3
 8003906:	f7ff ffe5 	bl	80038d4 <_ZN3ros11Subscriber_C1Ev>
 800390a:	4a0b      	ldr	r2, [pc, #44]	; (8003938 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	330c      	adds	r3, #12
 8003914:	4618      	mov	r0, r3
 8003916:	f7fe fcdb 	bl	80022d0 <_ZN13geometry_msgs5TwistC1Ev>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	631a      	str	r2, [r3, #48]	; 0x30
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	683a      	ldr	r2, [r7, #0]
 8003924:	635a      	str	r2, [r3, #52]	; 0x34
  {
    topic_ = topic_name;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	68ba      	ldr	r2, [r7, #8]
 800392a:	609a      	str	r2, [r3, #8]
  };
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	4618      	mov	r0, r3
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	0800f1f0 	.word	0x0800f1f0

0800393c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3304      	adds	r3, #4
  }
 8003948:	4618      	mov	r0, r3
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	3304      	adds	r3, #4
 8003960:	4618      	mov	r0, r3
 8003962:	f7ff fba7 	bl	80030b4 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800396c:	461a      	mov	r2, r3
 800396e:	2300      	movs	r3, #0
 8003970:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
    bytes_ = 0;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800397a:	461a      	mov	r2, r3
 800397c:	2300      	movs	r3, #0
 800397e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    index_ = 0;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003988:	461a      	mov	r2, r3
 800398a:	2300      	movs	r3, #0
 800398c:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    topic_ = 0;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003996:	461a      	mov	r2, r3
 8003998:	2300      	movs	r3, #0
 800399a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
  };
 800399e:	bf00      	nop
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9subscribeERNS_11Subscriber_E>:
    }
    return false;
  }

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 80039a6:	b480      	push	{r7}
 80039a8:	b085      	sub	sp, #20
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
 80039ae:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80039b0:	2300      	movs	r3, #0
 80039b2:	60fb      	str	r3, [r7, #12]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2b18      	cmp	r3, #24
 80039b8:	dc19      	bgt.n	80039ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9subscribeERNS_11Subscriber_E+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	f602 0222 	addw	r2, r2, #2082	; 0x822
 80039c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10d      	bne.n	80039e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9subscribeERNS_11Subscriber_E+0x40>
      {
        subscribers[i] = &s;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	f602 0222 	addw	r2, r2, #2082	; 0x822
 80039d2:	6839      	ldr	r1, [r7, #0]
 80039d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	605a      	str	r2, [r3, #4]
        return true;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e004      	b.n	80039f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	3301      	adds	r3, #1
 80039ea:	60fb      	str	r3, [r7, #12]
 80039ec:	e7e2      	b.n	80039b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9subscribeERNS_11Subscriber_E+0xe>
      }
    }
    return false;
 80039ee:	2300      	movs	r3, #0
  }
 80039f0:	4618      	mov	r0, r3
 80039f2:	3714      	adds	r7, #20
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7loginfoEPKc>:
public:
  void logdebug(const char* msg)
  {
    log(rosserial_msgs::Log::ROSDEBUG, msg);
  }
  void loginfo(const char * msg)
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::INFO, msg);
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	2101      	movs	r1, #1
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 faba 	bl	8003f84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3logEcPKc>
  }
 8003a10:	bf00      	nop
 8003a12:	3708      	adds	r7, #8
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3nowEv>:
  Time now()
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	3304      	adds	r3, #4
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7ff fc40 	bl	80032ac <_ZN13STM32Hardware4timeEv>
 8003a2c:	60f8      	str	r0, [r7, #12]
    Time current_time;
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f7fe fa4f 	bl	8001ed2 <_ZN3ros4TimeC1Ev>
    current_time.sec = ms / 1000 + sec_offset;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	4a15      	ldr	r2, [pc, #84]	; (8003a8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3nowEv+0x74>)
 8003a38:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3c:	099a      	lsrs	r2, r3, #6
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	441a      	add	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	601a      	str	r2, [r3, #0]
    current_time.nsec = (ms % 1000) * 1000000UL + nsec_offset;
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	4b0f      	ldr	r3, [pc, #60]	; (8003a8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3nowEv+0x74>)
 8003a50:	fba3 1302 	umull	r1, r3, r3, r2
 8003a54:	099b      	lsrs	r3, r3, #6
 8003a56:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003a5a:	fb01 f303 	mul.w	r3, r1, r3
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	4a0b      	ldr	r2, [pc, #44]	; (8003a90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3nowEv+0x78>)
 8003a62:	fb03 f202 	mul.w	r2, r3, r2
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	441a      	add	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	605a      	str	r2, [r3, #4]
    normalizeSecNSec(current_time.sec, current_time.nsec);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3304      	adds	r3, #4
 8003a78:	4619      	mov	r1, r3
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f003 fbca 	bl	8007214 <_ZN3ros16normalizeSecNSecERmS0_>
    return current_time;
 8003a80:	bf00      	nop
  }
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	10624dd3 	.word	0x10624dd3
 8003a90:	000f4240 	.word	0x000f4240

08003a94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv>:
  virtual int spinOnce() override
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	3304      	adds	r3, #4
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7ff fc03 	bl	80032ac <_ZN13STM32Hardware4timeEv>
 8003aa6:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003aae:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d905      	bls.n	8003aca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x36>
      configured_ = false;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
    if (mode_ != MODE_FIRST_FF)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003ad0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00e      	beq.n	8003af6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003ade:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d906      	bls.n	8003af6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003aee:	461a      	mov	r2, r3
 8003af0:	2300      	movs	r3, #0
 8003af2:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
      if (spin_timeout_ > 0)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d015      	beq.n	8003b2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x9a>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	3304      	adds	r3, #4
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7ff fbd0 	bl	80032ac <_ZN13STM32Hardware4timeEv>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	1ad2      	subs	r2, r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b18:	6a1b      	ldr	r3, [r3, #32]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	bf8c      	ite	hi
 8003b1e:	2301      	movhi	r3, #1
 8003b20:	2300      	movls	r3, #0
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d002      	beq.n	8003b2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x9a>
          return SPIN_TIMEOUT;
 8003b28:	f06f 0301 	mvn.w	r3, #1
 8003b2c:	e226      	b.n	8003f7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x4e8>
      int data = hardware_.read();
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	3304      	adds	r3, #4
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7ff fada 	bl	80030ec <_ZN13STM32Hardware4readEv>
 8003b38:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f2c0 81ff 	blt.w	8003f40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x4ac>
      checksum_ += data;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003b48:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	4413      	add	r3, r2
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8003b56:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003b60:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003b64:	2b07      	cmp	r3, #7
 8003b66:	d12d      	bne.n	8003bc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x130>
        message_in[index_++] = data;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003b6e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003b72:	1c5a      	adds	r2, r3, #1
 8003b74:	6879      	ldr	r1, [r7, #4]
 8003b76:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 8003b7a:	f8c1 20f8 	str.w	r2, [r1, #248]	; 0xf8
 8003b7e:	68ba      	ldr	r2, [r7, #8]
 8003b80:	b2d1      	uxtb	r1, r2
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	4413      	add	r3, r2
 8003b86:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003b8a:	3304      	adds	r3, #4
 8003b8c:	460a      	mov	r2, r1
 8003b8e:	701a      	strb	r2, [r3, #0]
        bytes_--;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003b96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8003ba2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003bac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1a0      	bne.n	8003af6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003bba:	461a      	mov	r2, r3
 8003bbc:	2308      	movs	r3, #8
 8003bbe:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003bc2:	e798      	b.n	8003af6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003bca:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d130      	bne.n	8003c34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x1a0>
        if (data == 0xff)
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	2bff      	cmp	r3, #255	; 0xff
 8003bd6:	d112      	bne.n	8003bfe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x16a>
          mode_++;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003bde:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003be2:	3301      	adds	r3, #1
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8003bea:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	3314      	adds	r3, #20
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8003bf8:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 8003bfc:	e77b      	b.n	8003af6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	3304      	adds	r3, #4
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7ff fb52 	bl	80032ac <_ZN13STM32Hardware4timeEv>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c12:	4293      	cmp	r3, r2
 8003c14:	bf8c      	ite	hi
 8003c16:	2301      	movhi	r3, #1
 8003c18:	2300      	movls	r3, #0
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f43f af6a 	beq.w	8003af6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
          configured_ = false;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
          return SPIN_TIMEOUT;
 8003c2e:	f06f 0301 	mvn.w	r3, #1
 8003c32:	e1a3      	b.n	8003f7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x4e8>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003c3a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d121      	bne.n	8003c86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x1f2>
        if (data == PROTOCOL_VER)
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	2bfe      	cmp	r3, #254	; 0xfe
 8003c46:	d10b      	bne.n	8003c60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x1cc>
          mode_++;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003c4e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003c52:	3301      	adds	r3, #1
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8003c5a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003c5e:	e74a      	b.n	8003af6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003c66:	461a      	mov	r2, r3
 8003c68:	2300      	movs	r3, #0
 8003c6a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
          if (configured_ == false)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003c74:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f47f af3c 	bne.w	8003af6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f99c 	bl	8003fbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15requestSyncTimeEv>
 8003c84:	e737      	b.n	8003af6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003c8c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d120      	bne.n	8003cd6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x242>
        bytes_ = data;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        index_ = 0;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003ca8:	461a      	mov	r2, r3
 8003caa:	2300      	movs	r3, #0
 8003cac:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
        mode_++;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003cb6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003cba:	3301      	adds	r3, #1
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8003cc2:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        checksum_ = data;               /* first byte for calculating size checksum */
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003ccc:	461a      	mov	r2, r3
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 8003cd4:	e70f      	b.n	8003af6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003cdc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003ce0:	2b03      	cmp	r3, #3
 8003ce2:	d118      	bne.n	8003d16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x282>
        bytes_ += data << 8;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003cea:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	021b      	lsls	r3, r3, #8
 8003cf2:	4413      	add	r3, r2
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8003cfa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        mode_++;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003d04:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003d08:	3301      	adds	r3, #1
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8003d10:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003d14:	e6ef      	b.n	8003af6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003d1c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003d20:	2b04      	cmp	r3, #4
 8003d22:	d11f      	bne.n	8003d64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x2d0>
        if ((checksum_ % 256) == 255)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003d2a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8003d2e:	425a      	negs	r2, r3
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	b2d2      	uxtb	r2, r2
 8003d34:	bf58      	it	pl
 8003d36:	4253      	negpl	r3, r2
 8003d38:	2bff      	cmp	r3, #255	; 0xff
 8003d3a:	d10b      	bne.n	8003d54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x2c0>
          mode_++;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003d42:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003d46:	3301      	adds	r3, #1
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8003d4e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003d52:	e6d0      	b.n	8003af6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003d62:	e6c8      	b.n	8003af6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003d6a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003d6e:	2b05      	cmp	r3, #5
 8003d70:	d119      	bne.n	8003da6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x312>
        topic_ = data;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003d78:	461a      	mov	r2, r3
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        mode_++;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003d86:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8003d92:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        checksum_ = data;               /* first byte included in checksum */
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 8003da4:	e6a7      	b.n	8003af6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003dac:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003db0:	2b06      	cmp	r3, #6
 8003db2:	d123      	bne.n	8003dfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x368>
        topic_ += data << 8;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003dba:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	021b      	lsls	r3, r3, #8
 8003dc2:	4413      	add	r3, r2
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8003dca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        mode_ = MODE_MESSAGE;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	2307      	movs	r3, #7
 8003dd8:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        if (bytes_ == 0)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003de2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f47f ae85 	bne.w	8003af6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003df2:	461a      	mov	r2, r3
 8003df4:	2308      	movs	r3, #8
 8003df6:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003dfa:	e67c      	b.n	8003af6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003e02:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003e06:	2b08      	cmp	r3, #8
 8003e08:	f47f ae75 	bne.w	8003af6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003e12:	461a      	mov	r2, r3
 8003e14:	2300      	movs	r3, #0
 8003e16:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        if ((checksum_ % 256) == 255)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003e20:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8003e24:	425a      	negs	r2, r3
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	b2d2      	uxtb	r2, r2
 8003e2a:	bf58      	it	pl
 8003e2c:	4253      	negpl	r3, r2
 8003e2e:	2bff      	cmp	r3, #255	; 0xff
 8003e30:	f47f ae61 	bne.w	8003af6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003e3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d116      	bne.n	8003e70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x3dc>
            requestSyncTime();
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 f8ba 	bl	8003fbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15requestSyncTimeEv>
            negotiateTopics();
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 f8d6 	bl	8003ffa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003e54:	461a      	mov	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
            last_sync_receive_time = c_time;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003e62:	461a      	mov	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            return SPIN_ERR;
 8003e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e6e:	e085      	b.n	8003f7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x4e8>
          else if (topic_ == TopicInfo::ID_TIME)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003e76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e7a:	2b0a      	cmp	r3, #10
 8003e7c:	d108      	bne.n	8003e90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x3fc>
            syncTime(message_in);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003e84:	3304      	adds	r3, #4
 8003e86:	4619      	mov	r1, r3
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 f997 	bl	80041bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8syncTimeEPh>
 8003e8e:	e632      	b.n	8003af6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003e96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e9a:	2b06      	cmp	r3, #6
 8003e9c:	d112      	bne.n	8003ec4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x430>
            req_param_resp.deserialize(message_in);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8003ea4:	3314      	adds	r3, #20
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	f502 5281 	add.w	r2, r2, #4128	; 0x1020
 8003eac:	3204      	adds	r2, #4
 8003eae:	4611      	mov	r1, r2
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7fe ff32 	bl	8002d1a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 8003ec2:	e618      	b.n	8003af6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003eca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ece:	2b0b      	cmp	r3, #11
 8003ed0:	d106      	bne.n	8003ee0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x44c>
            configured_ = false;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 8003ede:	e60a      	b.n	8003af6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003ee6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003eea:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f602 0222 	addw	r2, r2, #2082	; 0x822
 8003ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f43f adfc 	beq.w	8003af6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003f04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f08:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f602 0222 	addw	r2, r2, #2082	; 0x822
 8003f12:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003f1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f20:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f602 0222 	addw	r2, r2, #2082	; 0x822
 8003f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003f38:	3304      	adds	r3, #4
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	4790      	blx	r2
    while (true)
 8003f3e:	e5da      	b.n	8003af6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
        break;
 8003f40:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003f48:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d014      	beq.n	8003f7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x4e6>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003f56:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d909      	bls.n	8003f7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x4e6>
      requestSyncTime();
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f828 	bl	8003fbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003f72:	461a      	mov	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    return SPIN_OK;
 8003f7a:	2300      	movs	r3, #0
  }
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b088      	sub	sp, #32
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	607a      	str	r2, [r7, #4]
 8003f90:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003f92:	f107 0314 	add.w	r3, r7, #20
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fe fcd0 	bl	800293c <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003f9c:	7afb      	ldrb	r3, [r7, #11]
 8003f9e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f107 0214 	add.w	r2, r7, #20
 8003fae:	2107      	movs	r1, #7
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	4798      	blx	r3
  }
 8003fb4:	bf00      	nop
 8003fb6:	3720      	adds	r7, #32
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15requestSyncTimeEv>:
  void requestSyncTime()
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8003fc4:	f107 030c 	add.w	r3, r7, #12
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7fe fa03 	bl	80023d4 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f107 020c 	add.w	r2, r7, #12
 8003fd8:	210a      	movs	r1, #10
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	4798      	blx	r3
    rt_time = hardware_.time();
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	3304      	adds	r3, #4
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7ff f962 	bl	80032ac <_ZN13STM32Hardware4timeEv>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ff0:	615a      	str	r2, [r3, #20]
  }
 8003ff2:	bf00      	nop
 8003ff4:	3718      	adds	r7, #24
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv>:
  void negotiateTopics()
 8003ffa:	b590      	push	{r4, r7, lr}
 8003ffc:	b08b      	sub	sp, #44	; 0x2c
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
    rosserial_msgs::TopicInfo ti;
 8004002:	f107 030c 	add.w	r3, r7, #12
 8004006:	4618      	mov	r0, r3
 8004008:	f7fe fad4 	bl	80025b4 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800400c:	2300      	movs	r3, #0
 800400e:	627b      	str	r3, [r7, #36]	; 0x24
 8004010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004012:	2b18      	cmp	r3, #24
 8004014:	dc63      	bgt.n	80040de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv+0xe4>
      if (publishers[i] != 0) // non-empty slot
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401a:	f603 0308 	addw	r3, r3, #2056	; 0x808
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	4413      	add	r3, r2
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d056      	beq.n	80040d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv+0xdc>
        ti.topic_id = publishers[i]->id_;
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402c:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4413      	add	r3, r2
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	b29b      	uxth	r3, r3
 800403a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	4413      	add	r3, r2
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004052:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4413      	add	r3, r2
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	6859      	ldr	r1, [r3, #4]
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4413      	add	r3, r2
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	3308      	adds	r3, #8
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4608      	mov	r0, r1
 8004076:	4798      	blx	r3
 8004078:	4603      	mov	r3, r0
 800407a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004080:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	4413      	add	r3, r2
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	6859      	ldr	r1, [r3, #4]
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	4413      	add	r3, r2
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	330c      	adds	r3, #12
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4608      	mov	r0, r1
 80040a4:	4798      	blx	r3
 80040a6:	4603      	mov	r3, r0
 80040a8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80040aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80040ae:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681c      	ldr	r4, [r3, #0]
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ba:	f603 0308 	addw	r3, r3, #2056	; 0x808
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	4413      	add	r3, r2
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7fe ffb5 	bl	8003034 <_ZN3ros9Publisher15getEndpointTypeEv>
 80040ca:	4601      	mov	r1, r0
 80040cc:	f107 030c 	add.w	r3, r7, #12
 80040d0:	461a      	mov	r2, r3
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80040d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d8:	3301      	adds	r3, #1
 80040da:	627b      	str	r3, [r7, #36]	; 0x24
 80040dc:	e798      	b.n	8004010 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv+0x16>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80040de:	2300      	movs	r3, #0
 80040e0:	627b      	str	r3, [r7, #36]	; 0x24
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	2b18      	cmp	r3, #24
 80040e6:	dc5f      	bgt.n	80041a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv+0x1ae>
      if (subscribers[i] != 0) // non-empty slot
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ec:	f602 0222 	addw	r2, r2, #2082	; 0x822
 80040f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d053      	beq.n	80041a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv+0x1a6>
        ti.topic_id = subscribers[i]->id_;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040fc:	f602 0222 	addw	r2, r2, #2082	; 0x822
 8004100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	b29b      	uxth	r3, r3
 8004108:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800410e:	f602 0222 	addw	r2, r2, #2082	; 0x822
 8004112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800411e:	f602 0222 	addw	r2, r2, #2082	; 0x822
 8004122:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800412a:	f602 0222 	addw	r2, r2, #2082	; 0x822
 800412e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	3308      	adds	r3, #8
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4608      	mov	r0, r1
 800413a:	4798      	blx	r3
 800413c:	4603      	mov	r3, r0
 800413e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004144:	f602 0222 	addw	r2, r2, #2082	; 0x822
 8004148:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004150:	f602 0222 	addw	r2, r2, #2082	; 0x822
 8004154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	330c      	adds	r3, #12
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4608      	mov	r0, r1
 8004160:	4798      	blx	r3
 8004162:	4603      	mov	r3, r0
 8004164:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8004166:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800416a:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681c      	ldr	r4, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004176:	f602 0222 	addw	r2, r2, #2082	; 0x822
 800417a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004182:	f602 0222 	addw	r2, r2, #2082	; 0x822
 8004186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	3304      	adds	r3, #4
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4608      	mov	r0, r1
 8004192:	4798      	blx	r3
 8004194:	4601      	mov	r1, r0
 8004196:	f107 030c 	add.w	r3, r7, #12
 800419a:	461a      	mov	r2, r3
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80041a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a2:	3301      	adds	r3, #1
 80041a4:	627b      	str	r3, [r7, #36]	; 0x24
 80041a6:	e79c      	b.n	80040e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv+0xe8>
    configured_ = true;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
  }
 80041b4:	bf00      	nop
 80041b6:	372c      	adds	r7, #44	; 0x2c
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd90      	pop	{r4, r7, pc}

080041bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80041c6:	f107 0308 	add.w	r3, r7, #8
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7fe f902 	bl	80023d4 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	3304      	adds	r3, #4
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7ff f869 	bl	80032ac <_ZN13STM32Hardware4timeEv>
 80041da:	4602      	mov	r2, r0
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80041e8:	f107 0308 	add.w	r3, r7, #8
 80041ec:	6839      	ldr	r1, [r7, #0]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7fe f960 	bl	80024b4 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	4915      	ldr	r1, [pc, #84]	; (8004250 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8syncTimeEPh+0x94>)
 80041fa:	fba1 1303 	umull	r1, r3, r1, r3
 80041fe:	099b      	lsrs	r3, r3, #6
 8004200:	4413      	add	r3, r2
 8004202:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004204:	6939      	ldr	r1, [r7, #16]
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	4b11      	ldr	r3, [pc, #68]	; (8004250 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8syncTimeEPh+0x94>)
 800420a:	fba3 0302 	umull	r0, r3, r3, r2
 800420e:	099b      	lsrs	r3, r3, #6
 8004210:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004214:	fb00 f303 	mul.w	r3, r0, r3
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	4a0e      	ldr	r2, [pc, #56]	; (8004254 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8syncTimeEPh+0x98>)
 800421c:	fb02 f303 	mul.w	r3, r2, r3
 8004220:	440b      	add	r3, r1
 8004222:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004224:	f107 0308 	add.w	r3, r7, #8
 8004228:	3304      	adds	r3, #4
 800422a:	4619      	mov	r1, r3
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 f8bf 	bl	80043b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	3304      	adds	r3, #4
 8004236:	4618      	mov	r0, r3
 8004238:	f7ff f838 	bl	80032ac <_ZN13STM32Hardware4timeEv>
 800423c:	4602      	mov	r2, r0
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004244:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  }
 8004248:	bf00      	nop
 800424a:	3718      	adds	r7, #24
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	10624dd3 	.word	0x10624dd3
 8004254:	000f4240 	.word	0x000f4240

08004258 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE>:
  virtual int publish(int id, const Msg * msg) override
 8004258:	b580      	push	{r7, lr}
 800425a:	b088      	sub	sp, #32
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
    if (id >= 100 && !configured_)
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	2b63      	cmp	r3, #99	; 0x63
 8004268:	dd0b      	ble.n	8004282 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x2a>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004270:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8004274:	f083 0301 	eor.w	r3, r3, #1
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 800427e:	2300      	movs	r3, #0
 8004280:	e090      	b.n	80043a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x14c>
    int l = msg->serialize(message_out + 7);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 800428e:	3304      	adds	r3, #4
 8004290:	3307      	adds	r3, #7
 8004292:	4619      	mov	r1, r3
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	4790      	blx	r2
 8004298:	6178      	str	r0, [r7, #20]
    message_out[0] = 0xff;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042a0:	22ff      	movs	r2, #255	; 0xff
 80042a2:	f883 2824 	strb.w	r2, [r3, #2084]	; 0x824
    message_out[1] = PROTOCOL_VER;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042ac:	22fe      	movs	r2, #254	; 0xfe
 80042ae:	f883 2825 	strb.w	r2, [r3, #2085]	; 0x825
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	b2da      	uxtb	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042bc:	f883 2826 	strb.w	r2, [r3, #2086]	; 0x826
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	0a1b      	lsrs	r3, r3, #8
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	b2da      	uxtb	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042d0:	f883 2827 	strb.w	r2, [r3, #2087]	; 0x827
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042da:	f893 2826 	ldrb.w	r2, [r3, #2086]	; 0x826
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042e4:	f893 3827 	ldrb.w	r3, [r3, #2087]	; 0x827
 80042e8:	4413      	add	r3, r2
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	43db      	mvns	r3, r3
 80042ee:	b2da      	uxtb	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042f6:	f883 2828 	strb.w	r2, [r3, #2088]	; 0x828
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	b2da      	uxtb	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004304:	f883 2829 	strb.w	r2, [r3, #2089]	; 0x829
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	b21b      	sxth	r3, r3
 800430c:	121b      	asrs	r3, r3, #8
 800430e:	b21b      	sxth	r3, r3
 8004310:	b2da      	uxtb	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004318:	f883 282a 	strb.w	r2, [r3, #2090]	; 0x82a
    int chk = 0;
 800431c:	2300      	movs	r3, #0
 800431e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004320:	2305      	movs	r3, #5
 8004322:	61bb      	str	r3, [r7, #24]
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	3306      	adds	r3, #6
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	429a      	cmp	r2, r3
 800432c:	dc0e      	bgt.n	800434c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0xf4>
      chk += message_out[i];
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	4413      	add	r3, r2
 8004334:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8004338:	3304      	adds	r3, #4
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	461a      	mov	r2, r3
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	4413      	add	r3, r2
 8004342:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	3301      	adds	r3, #1
 8004348:	61bb      	str	r3, [r7, #24]
 800434a:	e7eb      	b.n	8004324 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0xcc>
    l += 7;
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	3307      	adds	r3, #7
 8004350:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	425a      	negs	r2, r3
 8004356:	b2db      	uxtb	r3, r3
 8004358:	b2d2      	uxtb	r2, r2
 800435a:	bf58      	it	pl
 800435c:	4253      	negpl	r3, r2
 800435e:	b2da      	uxtb	r2, r3
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	1c59      	adds	r1, r3, #1
 8004364:	6179      	str	r1, [r7, #20]
 8004366:	43d2      	mvns	r2, r2
 8004368:	b2d1      	uxtb	r1, r2
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	4413      	add	r3, r2
 800436e:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8004372:	3304      	adds	r3, #4
 8004374:	460a      	mov	r2, r1
 8004376:	701a      	strb	r2, [r3, #0]
    if (l <= OUTPUT_SIZE)
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800437e:	dc0b      	bgt.n	8004398 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x140>
      hardware_.write(message_out, l);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	1d18      	adds	r0, r3, #4
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 800438a:	3304      	adds	r3, #4
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	4619      	mov	r1, r3
 8004390:	f7fe ff42 	bl	8003218 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	e005      	b.n	80043a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x14c>
      logerror("Message from device dropped: message larger than buffer.");
 8004398:	4904      	ldr	r1, [pc, #16]	; (80043ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x154>)
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f000 f84c 	bl	8004438 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8logerrorEPKc>
      return -1;
 80043a0:	f04f 33ff 	mov.w	r3, #4294967295
  }
 80043a4:	4618      	mov	r0, r3
 80043a6:	3720      	adds	r7, #32
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	0800eec8 	.word	0x0800eec8

080043b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	3304      	adds	r3, #4
 80043be:	4618      	mov	r0, r3
 80043c0:	f7fe ff74 	bl	80032ac <_ZN13STM32Hardware4timeEv>
 80043c4:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	4917      	ldr	r1, [pc, #92]	; (800442c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE6setNowERKNS_4TimeE+0x7c>)
 80043ce:	fba1 1303 	umull	r1, r3, r1, r3
 80043d2:	099b      	lsrs	r3, r3, #6
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	3b01      	subs	r3, #1
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80043de:	6193      	str	r3, [r2, #24]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	6859      	ldr	r1, [r3, #4]
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	4b11      	ldr	r3, [pc, #68]	; (800442c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE6setNowERKNS_4TimeE+0x7c>)
 80043e8:	fba3 0302 	umull	r0, r3, r3, r2
 80043ec:	099b      	lsrs	r3, r3, #6
 80043ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80043f2:	fb00 f303 	mul.w	r3, r0, r3
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	4a0d      	ldr	r2, [pc, #52]	; (8004430 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE6setNowERKNS_4TimeE+0x80>)
 80043fa:	fb02 f303 	mul.w	r3, r2, r3
 80043fe:	1aca      	subs	r2, r1, r3
 8004400:	4b0c      	ldr	r3, [pc, #48]	; (8004434 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE6setNowERKNS_4TimeE+0x84>)
 8004402:	4413      	add	r3, r2
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800440a:	61d3      	str	r3, [r2, #28]
    normalizeSecNSec(sec_offset, nsec_offset);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004412:	3318      	adds	r3, #24
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800441a:	321c      	adds	r2, #28
 800441c:	4611      	mov	r1, r2
 800441e:	4618      	mov	r0, r3
 8004420:	f002 fef8 	bl	8007214 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004424:	bf00      	nop
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	10624dd3 	.word	0x10624dd3
 8004430:	000f4240 	.word	0x000f4240
 8004434:	3b9aca00 	.word	0x3b9aca00

08004438 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8logerrorEPKc>:
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004442:	683a      	ldr	r2, [r7, #0]
 8004444:	2103      	movs	r1, #3
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7ff fd9c 	bl	8003f84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3logEcPKc>
  }
 800444c:	bf00      	nop
 800444e:	3708      	adds	r7, #8
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <_Z41__static_initialization_and_destruction_0ii>:
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af02      	add	r7, sp, #8
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d14e      	bne.n	8004502 <_Z41__static_initialization_and_destruction_0ii+0xae>
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800446a:	4293      	cmp	r3, r2
 800446c:	d149      	bne.n	8004502 <_Z41__static_initialization_and_destruction_0ii+0xae>
ros::NodeHandle  nh;
 800446e:	4827      	ldr	r0, [pc, #156]	; (800450c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8004470:	f7fe ff38 	bl	80032e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev>
Odometer odo(meterPerTick, base_width);
 8004474:	eddf 0a26 	vldr	s1, [pc, #152]	; 8004510 <_Z41__static_initialization_and_destruction_0ii+0xbc>
 8004478:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8004514 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 800447c:	4826      	ldr	r0, [pc, #152]	; (8004518 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 800447e:	f001 f9bb 	bl	80057f8 <_ZN8OdometerC1Eff>
PID leftWheelPID( &leftInput,  &leftOutput,  &leftSetpoint,  Kp, Ki, Kd, DIRECT);
 8004482:	4b26      	ldr	r3, [pc, #152]	; (800451c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8004484:	ed93 7b00 	vldr	d7, [r3]
 8004488:	4b25      	ldr	r3, [pc, #148]	; (8004520 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 800448a:	ed93 6b00 	vldr	d6, [r3]
 800448e:	4b25      	ldr	r3, [pc, #148]	; (8004524 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8004490:	ed93 5b00 	vldr	d5, [r3]
 8004494:	2300      	movs	r3, #0
 8004496:	9300      	str	r3, [sp, #0]
 8004498:	eeb0 2a45 	vmov.f32	s4, s10
 800449c:	eef0 2a65 	vmov.f32	s5, s11
 80044a0:	eeb0 1a46 	vmov.f32	s2, s12
 80044a4:	eef0 1a66 	vmov.f32	s3, s13
 80044a8:	eeb0 0a47 	vmov.f32	s0, s14
 80044ac:	eef0 0a67 	vmov.f32	s1, s15
 80044b0:	4b1d      	ldr	r3, [pc, #116]	; (8004528 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 80044b2:	4a1e      	ldr	r2, [pc, #120]	; (800452c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 80044b4:	491e      	ldr	r1, [pc, #120]	; (8004530 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 80044b6:	481f      	ldr	r0, [pc, #124]	; (8004534 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 80044b8:	f001 fcdc 	bl	8005e74 <_ZN3PIDC1EPdS0_S0_dddi>
PID rightWheelPID(&rightInput, &rightOutput, &rightSetpoint, Kp, Ki, Kd, DIRECT);
 80044bc:	4b17      	ldr	r3, [pc, #92]	; (800451c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 80044be:	ed93 7b00 	vldr	d7, [r3]
 80044c2:	4b17      	ldr	r3, [pc, #92]	; (8004520 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 80044c4:	ed93 6b00 	vldr	d6, [r3]
 80044c8:	4b16      	ldr	r3, [pc, #88]	; (8004524 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 80044ca:	ed93 5b00 	vldr	d5, [r3]
 80044ce:	2300      	movs	r3, #0
 80044d0:	9300      	str	r3, [sp, #0]
 80044d2:	eeb0 2a45 	vmov.f32	s4, s10
 80044d6:	eef0 2a65 	vmov.f32	s5, s11
 80044da:	eeb0 1a46 	vmov.f32	s2, s12
 80044de:	eef0 1a66 	vmov.f32	s3, s13
 80044e2:	eeb0 0a47 	vmov.f32	s0, s14
 80044e6:	eef0 0a67 	vmov.f32	s1, s15
 80044ea:	4b13      	ldr	r3, [pc, #76]	; (8004538 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 80044ec:	4a13      	ldr	r2, [pc, #76]	; (800453c <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 80044ee:	4914      	ldr	r1, [pc, #80]	; (8004540 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 80044f0:	4814      	ldr	r0, [pc, #80]	; (8004544 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 80044f2:	f001 fcbf 	bl	8005e74 <_ZN3PIDC1EPdS0_S0_dddi>
ros::Subscriber<geometry_msgs::Twist> sub_cmd_vel("cmd_vel", &cmd_velCallback);
 80044f6:	2301      	movs	r3, #1
 80044f8:	4a13      	ldr	r2, [pc, #76]	; (8004548 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 80044fa:	4914      	ldr	r1, [pc, #80]	; (800454c <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 80044fc:	4814      	ldr	r0, [pc, #80]	; (8004550 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 80044fe:	f7ff f9f9 	bl	80038f4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
}
 8004502:	bf00      	nop
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	2000047c 	.word	0x2000047c
 8004510:	3e47ae14 	.word	0x3e47ae14
 8004514:	39c8b439 	.word	0x39c8b439
 8004518:	200025e8 	.word	0x200025e8
 800451c:	20000008 	.word	0x20000008
 8004520:	20002600 	.word	0x20002600
 8004524:	20002608 	.word	0x20002608
 8004528:	200025b8 	.word	0x200025b8
 800452c:	200025c8 	.word	0x200025c8
 8004530:	200025c0 	.word	0x200025c0
 8004534:	20002610 	.word	0x20002610
 8004538:	200025d0 	.word	0x200025d0
 800453c:	200025e0 	.word	0x200025e0
 8004540:	200025d8 	.word	0x200025d8
 8004544:	20002688 	.word	0x20002688
 8004548:	08003701 	.word	0x08003701
 800454c:	0800ef04 	.word	0x0800ef04
 8004550:	20002700 	.word	0x20002700

08004554 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	330c      	adds	r3, #12
 8004562:	6839      	ldr	r1, [r7, #0]
 8004564:	4618      	mov	r0, r3
 8004566:	f7fd fef4 	bl	8002352 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	320c      	adds	r2, #12
 8004572:	4610      	mov	r0, r2
 8004574:	4798      	blx	r3
  }
 8004576:	bf00      	nop
 8004578:	3708      	adds	r7, #8
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 800457e:	b480      	push	{r7}
 8004580:	b083      	sub	sp, #12
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  }
 800458a:	4618      	mov	r0, r3
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr

08004596 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8004596:	b580      	push	{r7, lr}
 8004598:	b082      	sub	sp, #8
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	330c      	adds	r3, #12
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7fd fefa 	bl	800239c <_ZN13geometry_msgs5Twist7getTypeEv>
 80045a8:	4603      	mov	r3, r0
  }
 80045aa:	4618      	mov	r0, r3
 80045ac:	3708      	adds	r7, #8
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b082      	sub	sp, #8
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	330c      	adds	r3, #12
 80045be:	4618      	mov	r0, r3
 80045c0:	f7fd fefa 	bl	80023b8 <_ZN13geometry_msgs5Twist6getMD5Ev>
 80045c4:	4603      	mov	r3, r0
  }
 80045c6:	4618      	mov	r0, r3
 80045c8:	3708      	adds	r7, #8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9connectedEv>:
  virtual bool connected() override
 80045ce:	b480      	push	{r7}
 80045d0:	b083      	sub	sp, #12
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
    return configured_;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80045dc:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
  };
 80045e0:	4618      	mov	r0, r3
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <_GLOBAL__sub_I_nh>:
 80045ec:	b580      	push	{r7, lr}
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80045f4:	2001      	movs	r0, #1
 80045f6:	f7ff ff2d 	bl	8004454 <_Z41__static_initialization_and_destruction_0ii>
 80045fa:	bd80      	pop	{r7, pc}

080045fc <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	ed87 0a01 	vstr	s0, [r7, #4]
 8004606:	edd7 7a01 	vldr	s15, [r7, #4]
 800460a:	eef0 7ae7 	vabs.f32	s15, s15
 800460e:	eeb0 0a67 	vmov.f32	s0, s15
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <_ZSt3cosf>:
  { return __builtin_cosf(__x); }
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	ed87 0a01 	vstr	s0, [r7, #4]
 8004626:	ed97 0a01 	vldr	s0, [r7, #4]
 800462a:	f008 fb89 	bl	800cd40 <cosf>
 800462e:	eef0 7a40 	vmov.f32	s15, s0
 8004632:	eeb0 0a67 	vmov.f32	s0, s15
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	ed87 0a01 	vstr	s0, [r7, #4]
 8004646:	ed97 0a01 	vldr	s0, [r7, #4]
 800464a:	f008 fbbd 	bl	800cdc8 <sinf>
 800464e:	eef0 7a40 	vmov.f32	s15, s0
 8004652:	eeb0 0a67 	vmov.f32	s0, s15
 8004656:	3708      	adds	r7, #8
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <_ZN8std_msgs6HeaderC1Ev>:
      typedef ros::Time _stamp_type;
      _stamp_type stamp;
      typedef const char* _frame_id_type;
      _frame_id_type frame_id;

    Header():
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
      seq(0),
      stamp(),
      frame_id("")
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4618      	mov	r0, r3
 8004668:	f7fd fd7c 	bl	8002164 <_ZN3ros3MsgC1Ev>
 800466c:	4a09      	ldr	r2, [pc, #36]	; (8004694 <_ZN8std_msgs6HeaderC1Ev+0x38>)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	601a      	str	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	605a      	str	r2, [r3, #4]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	3308      	adds	r3, #8
 800467c:	4618      	mov	r0, r3
 800467e:	f7fd fc28 	bl	8001ed2 <_ZN3ros4TimeC1Ev>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a04      	ldr	r2, [pc, #16]	; (8004698 <_ZN8std_msgs6HeaderC1Ev+0x3c>)
 8004686:	611a      	str	r2, [r3, #16]
    {
    }
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4618      	mov	r0, r3
 800468c:	3708      	adds	r7, #8
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	0800f3c8 	.word	0x0800f3c8
 8004698:	0800ef0c 	.word	0x0800ef0c

0800469c <_ZNK8std_msgs6Header9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80046a6:	2300      	movs	r3, #0
 80046a8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6859      	ldr	r1, [r3, #4]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	4413      	add	r3, r2
 80046b4:	b2ca      	uxtb	r2, r1
 80046b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	0a19      	lsrs	r1, r3, #8
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	3301      	adds	r3, #1
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	4413      	add	r3, r2
 80046c6:	b2ca      	uxtb	r2, r1
 80046c8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	0c19      	lsrs	r1, r3, #16
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	3302      	adds	r3, #2
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	4413      	add	r3, r2
 80046d8:	b2ca      	uxtb	r2, r1
 80046da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	0e19      	lsrs	r1, r3, #24
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	3303      	adds	r3, #3
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	4413      	add	r3, r2
 80046ea:	b2ca      	uxtb	r2, r1
 80046ec:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->seq);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	3304      	adds	r3, #4
 80046f2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6899      	ldr	r1, [r3, #8]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	4413      	add	r3, r2
 80046fe:	b2ca      	uxtb	r2, r1
 8004700:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	0a19      	lsrs	r1, r3, #8
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	3301      	adds	r3, #1
 800470c:	683a      	ldr	r2, [r7, #0]
 800470e:	4413      	add	r3, r2
 8004710:	b2ca      	uxtb	r2, r1
 8004712:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	0c19      	lsrs	r1, r3, #16
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	3302      	adds	r3, #2
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	4413      	add	r3, r2
 8004722:	b2ca      	uxtb	r2, r1
 8004724:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	0e19      	lsrs	r1, r3, #24
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	3303      	adds	r3, #3
 8004730:	683a      	ldr	r2, [r7, #0]
 8004732:	4413      	add	r3, r2
 8004734:	b2ca      	uxtb	r2, r1
 8004736:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	3304      	adds	r3, #4
 800473c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	68d9      	ldr	r1, [r3, #12]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	683a      	ldr	r2, [r7, #0]
 8004746:	4413      	add	r3, r2
 8004748:	b2ca      	uxtb	r2, r1
 800474a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	0a19      	lsrs	r1, r3, #8
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	3301      	adds	r3, #1
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	4413      	add	r3, r2
 800475a:	b2ca      	uxtb	r2, r1
 800475c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	0c19      	lsrs	r1, r3, #16
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	3302      	adds	r3, #2
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	4413      	add	r3, r2
 800476c:	b2ca      	uxtb	r2, r1
 800476e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	0e19      	lsrs	r1, r3, #24
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	3303      	adds	r3, #3
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	4413      	add	r3, r2
 800477e:	b2ca      	uxtb	r2, r1
 8004780:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	3304      	adds	r3, #4
 8004786:	60fb      	str	r3, [r7, #12]
      uint32_t length_frame_id = strlen(this->frame_id);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	4618      	mov	r0, r3
 800478e:	f7fb fd1f 	bl	80001d0 <strlen>
 8004792:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_frame_id);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	4413      	add	r3, r2
 800479a:	68b9      	ldr	r1, [r7, #8]
 800479c:	4618      	mov	r0, r3
 800479e:	f7ff f855 	bl	800384c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	3304      	adds	r3, #4
 80047a6:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	18d0      	adds	r0, r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	4619      	mov	r1, r3
 80047b6:	f00a f88d 	bl	800e8d4 <memcpy>
      offset += length_frame_id;
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	4413      	add	r3, r2
 80047c0:	60fb      	str	r3, [r7, #12]
      return offset;
 80047c2:	68fb      	ldr	r3, [r7, #12]
    }
 80047c4:	4618      	mov	r0, r3
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <_ZN8std_msgs6Header11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b086      	sub	sp, #24
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80047d6:	2300      	movs	r3, #0
 80047d8:	613b      	str	r3, [r7, #16]
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	683a      	ldr	r2, [r7, #0]
 80047de:	4413      	add	r3, r2
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	461a      	mov	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	3301      	adds	r3, #1
 80047f0:	6839      	ldr	r1, [r7, #0]
 80047f2:	440b      	add	r3, r1
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	021b      	lsls	r3, r3, #8
 80047f8:	431a      	orrs	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685a      	ldr	r2, [r3, #4]
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	3302      	adds	r3, #2
 8004806:	6839      	ldr	r1, [r7, #0]
 8004808:	440b      	add	r3, r1
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	041b      	lsls	r3, r3, #16
 800480e:	431a      	orrs	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	3303      	adds	r3, #3
 800481c:	6839      	ldr	r1, [r7, #0]
 800481e:	440b      	add	r3, r1
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	061b      	lsls	r3, r3, #24
 8004824:	431a      	orrs	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	3304      	adds	r3, #4
 800482e:	613b      	str	r3, [r7, #16]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	4413      	add	r3, r2
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	461a      	mov	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689a      	ldr	r2, [r3, #8]
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	3301      	adds	r3, #1
 8004846:	6839      	ldr	r1, [r7, #0]
 8004848:	440b      	add	r3, r1
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	021b      	lsls	r3, r3, #8
 800484e:	431a      	orrs	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689a      	ldr	r2, [r3, #8]
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	3302      	adds	r3, #2
 800485c:	6839      	ldr	r1, [r7, #0]
 800485e:	440b      	add	r3, r1
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	041b      	lsls	r3, r3, #16
 8004864:	431a      	orrs	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	689a      	ldr	r2, [r3, #8]
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	3303      	adds	r3, #3
 8004872:	6839      	ldr	r1, [r7, #0]
 8004874:	440b      	add	r3, r1
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	061b      	lsls	r3, r3, #24
 800487a:	431a      	orrs	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	3304      	adds	r3, #4
 8004884:	613b      	str	r3, [r7, #16]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	4413      	add	r3, r2
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	461a      	mov	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68da      	ldr	r2, [r3, #12]
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	3301      	adds	r3, #1
 800489c:	6839      	ldr	r1, [r7, #0]
 800489e:	440b      	add	r3, r1
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	021b      	lsls	r3, r3, #8
 80048a4:	431a      	orrs	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	68da      	ldr	r2, [r3, #12]
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	3302      	adds	r3, #2
 80048b2:	6839      	ldr	r1, [r7, #0]
 80048b4:	440b      	add	r3, r1
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	041b      	lsls	r3, r3, #16
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68da      	ldr	r2, [r3, #12]
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	3303      	adds	r3, #3
 80048c8:	6839      	ldr	r1, [r7, #0]
 80048ca:	440b      	add	r3, r1
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	061b      	lsls	r3, r3, #24
 80048d0:	431a      	orrs	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	3304      	adds	r3, #4
 80048da:	613b      	str	r3, [r7, #16]
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	683a      	ldr	r2, [r7, #0]
 80048e0:	441a      	add	r2, r3
 80048e2:	f107 030c 	add.w	r3, r7, #12
 80048e6:	4611      	mov	r1, r2
 80048e8:	4618      	mov	r0, r3
 80048ea:	f7fe ffcd 	bl	8003888 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	3304      	adds	r3, #4
 80048f2:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	617b      	str	r3, [r7, #20]
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	4413      	add	r3, r2
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	429a      	cmp	r2, r3
 8004902:	d20c      	bcs.n	800491e <_ZN8std_msgs6Header11deserializeEPh+0x152>
          inbuffer[k-1]=inbuffer[k];
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	441a      	add	r2, r3
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	3b01      	subs	r3, #1
 800490e:	6839      	ldr	r1, [r7, #0]
 8004910:	440b      	add	r3, r1
 8004912:	7812      	ldrb	r2, [r2, #0]
 8004914:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	3301      	adds	r3, #1
 800491a:	617b      	str	r3, [r7, #20]
 800491c:	e7ec      	b.n	80048f8 <_ZN8std_msgs6Header11deserializeEPh+0x12c>
      }
      inbuffer[offset+length_frame_id-1]=0;
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	4413      	add	r3, r2
 8004924:	3b01      	subs	r3, #1
 8004926:	683a      	ldr	r2, [r7, #0]
 8004928:	4413      	add	r3, r2
 800492a:	2200      	movs	r2, #0
 800492c:	701a      	strb	r2, [r3, #0]
      this->frame_id = (char *)(inbuffer + offset-1);
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	3b01      	subs	r3, #1
 8004932:	683a      	ldr	r2, [r7, #0]
 8004934:	441a      	add	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	611a      	str	r2, [r3, #16]
      offset += length_frame_id;
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4413      	add	r3, r2
 8004940:	613b      	str	r3, [r7, #16]
     return offset;
 8004942:	693b      	ldr	r3, [r7, #16]
    }
 8004944:	4618      	mov	r0, r3
 8004946:	3718      	adds	r7, #24
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <_ZN8std_msgs6Header7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Header"; };
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	4b03      	ldr	r3, [pc, #12]	; (8004964 <_ZN8std_msgs6Header7getTypeEv+0x18>)
 8004956:	4618      	mov	r0, r3
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	0800ef10 	.word	0x0800ef10

08004968 <_ZN8std_msgs6Header6getMD5Ev>:
    virtual const char * getMD5() override { return "2176decaecbce78abc3b96ef049fabed"; };
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	4b03      	ldr	r3, [pc, #12]	; (8004980 <_ZN8std_msgs6Header6getMD5Ev+0x18>)
 8004972:	4618      	mov	r0, r3
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	0800ef20 	.word	0x0800ef20

08004984 <_ZN13geometry_msgs5PointC1Ev>:
      typedef float _y_type;
      _y_type y;
      typedef float _z_type;
      _z_type z;

    Point():
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4618      	mov	r0, r3
 8004990:	f7fd fbe8 	bl	8002164 <_ZN3ros3MsgC1Ev>
 8004994:	4a09      	ldr	r2, [pc, #36]	; (80049bc <_ZN13geometry_msgs5PointC1Ev+0x38>)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	601a      	str	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f04f 0200 	mov.w	r2, #0
 80049a0:	605a      	str	r2, [r3, #4]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f04f 0200 	mov.w	r2, #0
 80049a8:	609a      	str	r2, [r3, #8]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f04f 0200 	mov.w	r2, #0
 80049b0:	60da      	str	r2, [r3, #12]
    {
    }
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4618      	mov	r0, r3
 80049b6:	3708      	adds	r7, #8
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	0800f3b0 	.word	0x0800f3b0

080049c0 <_ZNK13geometry_msgs5Point9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80049ca:	2300      	movs	r3, #0
 80049cc:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	441a      	add	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80049da:	eeb0 0a67 	vmov.f32	s0, s15
 80049de:	4610      	mov	r0, r2
 80049e0:	f7fd fa88 	bl	8001ef4 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80049e4:	4602      	mov	r2, r0
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	4413      	add	r3, r2
 80049ea:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	441a      	add	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80049f8:	eeb0 0a67 	vmov.f32	s0, s15
 80049fc:	4610      	mov	r0, r2
 80049fe:	f7fd fa79 	bl	8001ef4 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004a02:	4602      	mov	r2, r0
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	4413      	add	r3, r2
 8004a08:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	441a      	add	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	edd3 7a03 	vldr	s15, [r3, #12]
 8004a16:	eeb0 0a67 	vmov.f32	s0, s15
 8004a1a:	4610      	mov	r0, r2
 8004a1c:	f7fd fa6a 	bl	8001ef4 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004a20:	4602      	mov	r2, r0
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	4413      	add	r3, r2
 8004a26:	60fb      	str	r3, [r7, #12]
      return offset;
 8004a28:	68fb      	ldr	r3, [r7, #12]
    }
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3710      	adds	r7, #16
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <_ZN13geometry_msgs5Point11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b084      	sub	sp, #16
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
 8004a3a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	441a      	add	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	3304      	adds	r3, #4
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	4610      	mov	r0, r2
 8004a4e:	f7fd faed 	bl	800202c <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004a52:	4602      	mov	r2, r0
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	4413      	add	r3, r2
 8004a58:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	683a      	ldr	r2, [r7, #0]
 8004a5e:	441a      	add	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	3308      	adds	r3, #8
 8004a64:	4619      	mov	r1, r3
 8004a66:	4610      	mov	r0, r2
 8004a68:	f7fd fae0 	bl	800202c <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	4413      	add	r3, r2
 8004a72:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	441a      	add	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	330c      	adds	r3, #12
 8004a7e:	4619      	mov	r1, r3
 8004a80:	4610      	mov	r0, r2
 8004a82:	f7fd fad3 	bl	800202c <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004a86:	4602      	mov	r2, r0
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	60fb      	str	r3, [r7, #12]
     return offset;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
    }
 8004a90:	4618      	mov	r0, r3
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <_ZN13geometry_msgs5Point7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Point"; };
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	4b03      	ldr	r3, [pc, #12]	; (8004ab0 <_ZN13geometry_msgs5Point7getTypeEv+0x18>)
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	0800ef44 	.word	0x0800ef44

08004ab4 <_ZN13geometry_msgs5Point6getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	4b03      	ldr	r3, [pc, #12]	; (8004acc <_ZN13geometry_msgs5Point6getMD5Ev+0x18>)
 8004abe:	4618      	mov	r0, r3
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	0800ef58 	.word	0x0800ef58

08004ad0 <_ZN13geometry_msgs10QuaternionC1Ev>:
      typedef float _z_type;
      _z_type z;
      typedef float _w_type;
      _w_type w;

    Quaternion():
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0),
      w(0)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7fd fb42 	bl	8002164 <_ZN3ros3MsgC1Ev>
 8004ae0:	4a0b      	ldr	r2, [pc, #44]	; (8004b10 <_ZN13geometry_msgs10QuaternionC1Ev+0x40>)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	601a      	str	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f04f 0200 	mov.w	r2, #0
 8004aec:	605a      	str	r2, [r3, #4]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f04f 0200 	mov.w	r2, #0
 8004af4:	609a      	str	r2, [r3, #8]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f04f 0200 	mov.w	r2, #0
 8004afc:	60da      	str	r2, [r3, #12]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f04f 0200 	mov.w	r2, #0
 8004b04:	611a      	str	r2, [r3, #16]
    {
    }
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3708      	adds	r7, #8
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	0800f398 	.word	0x0800f398

08004b14 <_ZNK13geometry_msgs10Quaternion9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	441a      	add	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	edd3 7a01 	vldr	s15, [r3, #4]
 8004b2e:	eeb0 0a67 	vmov.f32	s0, s15
 8004b32:	4610      	mov	r0, r2
 8004b34:	f7fd f9de 	bl	8001ef4 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	683a      	ldr	r2, [r7, #0]
 8004b44:	441a      	add	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	edd3 7a02 	vldr	s15, [r3, #8]
 8004b4c:	eeb0 0a67 	vmov.f32	s0, s15
 8004b50:	4610      	mov	r0, r2
 8004b52:	f7fd f9cf 	bl	8001ef4 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004b56:	4602      	mov	r2, r0
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	441a      	add	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	edd3 7a03 	vldr	s15, [r3, #12]
 8004b6a:	eeb0 0a67 	vmov.f32	s0, s15
 8004b6e:	4610      	mov	r0, r2
 8004b70:	f7fd f9c0 	bl	8001ef4 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004b74:	4602      	mov	r2, r0
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	4413      	add	r3, r2
 8004b7a:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->w);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	683a      	ldr	r2, [r7, #0]
 8004b80:	441a      	add	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	edd3 7a04 	vldr	s15, [r3, #16]
 8004b88:	eeb0 0a67 	vmov.f32	s0, s15
 8004b8c:	4610      	mov	r0, r2
 8004b8e:	f7fd f9b1 	bl	8001ef4 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004b92:	4602      	mov	r2, r0
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	4413      	add	r3, r2
 8004b98:	60fb      	str	r3, [r7, #12]
      return offset;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
    }
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <_ZN13geometry_msgs10Quaternion11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	683a      	ldr	r2, [r7, #0]
 8004bb6:	441a      	add	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	3304      	adds	r3, #4
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	4610      	mov	r0, r2
 8004bc0:	f7fd fa34 	bl	800202c <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	4413      	add	r3, r2
 8004bca:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	683a      	ldr	r2, [r7, #0]
 8004bd0:	441a      	add	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	3308      	adds	r3, #8
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	4610      	mov	r0, r2
 8004bda:	f7fd fa27 	bl	800202c <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004bde:	4602      	mov	r2, r0
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4413      	add	r3, r2
 8004be4:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	441a      	add	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	330c      	adds	r3, #12
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	4610      	mov	r0, r2
 8004bf4:	f7fd fa1a 	bl	800202c <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->w));
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	683a      	ldr	r2, [r7, #0]
 8004c04:	441a      	add	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	3310      	adds	r3, #16
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	4610      	mov	r0, r2
 8004c0e:	f7fd fa0d 	bl	800202c <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004c12:	4602      	mov	r2, r0
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	4413      	add	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]
     return offset;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
    }
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <_ZN13geometry_msgs10Quaternion7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Quaternion"; };
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	4b03      	ldr	r3, [pc, #12]	; (8004c3c <_ZN13geometry_msgs10Quaternion7getTypeEv+0x18>)
 8004c2e:	4618      	mov	r0, r3
 8004c30:	370c      	adds	r7, #12
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	0800ef7c 	.word	0x0800ef7c

08004c40 <_ZN13geometry_msgs10Quaternion6getMD5Ev>:
    virtual const char * getMD5() override { return "a779879fadf0160734f906b8c19c7004"; };
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	4b03      	ldr	r3, [pc, #12]	; (8004c58 <_ZN13geometry_msgs10Quaternion6getMD5Ev+0x18>)
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	370c      	adds	r7, #12
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	0800ef98 	.word	0x0800ef98

08004c5c <_ZN13geometry_msgs4PoseC1Ev>:
      typedef geometry_msgs::Point _position_type;
      _position_type position;
      typedef geometry_msgs::Quaternion _orientation_type;
      _orientation_type orientation;

    Pose():
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
      position(),
      orientation()
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7fd fa7c 	bl	8002164 <_ZN3ros3MsgC1Ev>
 8004c6c:	4a08      	ldr	r2, [pc, #32]	; (8004c90 <_ZN13geometry_msgs4PoseC1Ev+0x34>)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	601a      	str	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	3304      	adds	r3, #4
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7ff fe84 	bl	8004984 <_ZN13geometry_msgs5PointC1Ev>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	3314      	adds	r3, #20
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7ff ff25 	bl	8004ad0 <_ZN13geometry_msgs10QuaternionC1Ev>
    {
    }
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3708      	adds	r7, #8
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	0800f380 	.word	0x0800f380

08004c94 <_ZNK13geometry_msgs4Pose9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	60fb      	str	r3, [r7, #12]
      offset += this->position.serialize(outbuffer + offset);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	1d18      	adds	r0, r3, #4
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	4413      	add	r3, r2
 8004cac:	4619      	mov	r1, r3
 8004cae:	f7ff fe87 	bl	80049c0 <_ZNK13geometry_msgs5Point9serializeEPh>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	60fb      	str	r3, [r7, #12]
      offset += this->orientation.serialize(outbuffer + offset);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f103 0014 	add.w	r0, r3, #20
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	f7ff ff24 	bl	8004b14 <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	60fb      	str	r3, [r7, #12]
      return offset;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
    }
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3710      	adds	r7, #16
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <_ZN13geometry_msgs4Pose11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b084      	sub	sp, #16
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
 8004ce6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	60fb      	str	r3, [r7, #12]
      offset += this->position.deserialize(inbuffer + offset);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	1d18      	adds	r0, r3, #4
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	f7ff fe9b 	bl	8004a32 <_ZN13geometry_msgs5Point11deserializeEPh>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	4413      	add	r3, r2
 8004d02:	60fb      	str	r3, [r7, #12]
      offset += this->orientation.deserialize(inbuffer + offset);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f103 0014 	add.w	r0, r3, #20
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	683a      	ldr	r2, [r7, #0]
 8004d0e:	4413      	add	r3, r2
 8004d10:	4619      	mov	r1, r3
 8004d12:	f7ff ff47 	bl	8004ba4 <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 8004d16:	4602      	mov	r2, r0
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	60fb      	str	r3, [r7, #12]
     return offset;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
    }
 8004d20:	4618      	mov	r0, r3
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <_ZN13geometry_msgs4Pose7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Pose"; };
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	4b03      	ldr	r3, [pc, #12]	; (8004d40 <_ZN13geometry_msgs4Pose7getTypeEv+0x18>)
 8004d32:	4618      	mov	r0, r3
 8004d34:	370c      	adds	r7, #12
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	0800efbc 	.word	0x0800efbc

08004d44 <_ZN13geometry_msgs4Pose6getMD5Ev>:
    virtual const char * getMD5() override { return "e45d45a5a1ce597b249e23fb30fc871f"; };
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	4b03      	ldr	r3, [pc, #12]	; (8004d5c <_ZN13geometry_msgs4Pose6getMD5Ev+0x18>)
 8004d4e:	4618      	mov	r0, r3
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	0800efd0 	.word	0x0800efd0

08004d60 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev>:
    public:
      typedef geometry_msgs::Pose _pose_type;
      _pose_type pose;
      float covariance[36];

    PoseWithCovariance():
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
      pose(),
      covariance()
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7fd f9fa 	bl	8002164 <_ZN3ros3MsgC1Ev>
 8004d70:	4a0c      	ldr	r2, [pc, #48]	; (8004da4 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x44>)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	601a      	str	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	3304      	adds	r3, #4
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7ff ff6e 	bl	8004c5c <_ZN13geometry_msgs4PoseC1Ev>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8004d86:	2323      	movs	r3, #35	; 0x23
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	db05      	blt.n	8004d98 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x38>
 8004d8c:	f04f 0100 	mov.w	r1, #0
 8004d90:	6011      	str	r1, [r2, #0]
 8004d92:	3204      	adds	r2, #4
 8004d94:	3b01      	subs	r3, #1
 8004d96:	e7f7      	b.n	8004d88 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x28>
    {
    }
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	0800f368 	.word	0x0800f368

08004da8 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004db2:	2300      	movs	r3, #0
 8004db4:	60fb      	str	r3, [r7, #12]
      offset += this->pose.serialize(outbuffer + offset);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	1d18      	adds	r0, r3, #4
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	f7ff ff67 	bl	8004c94 <_ZNK13geometry_msgs4Pose9serializeEPh>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	4413      	add	r3, r2
 8004dcc:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 8004dce:	2300      	movs	r3, #0
 8004dd0:	60bb      	str	r3, [r7, #8]
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	2b23      	cmp	r3, #35	; 0x23
 8004dd6:	d817      	bhi.n	8004e08 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh+0x60>
      offset += serializeAvrFloat64(outbuffer + offset, this->covariance[i]);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	683a      	ldr	r2, [r7, #0]
 8004ddc:	18d1      	adds	r1, r2, r3
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	330a      	adds	r3, #10
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4413      	add	r3, r2
 8004de8:	3304      	adds	r3, #4
 8004dea:	edd3 7a00 	vldr	s15, [r3]
 8004dee:	eeb0 0a67 	vmov.f32	s0, s15
 8004df2:	4608      	mov	r0, r1
 8004df4:	f7fd f87e 	bl	8001ef4 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	3301      	adds	r3, #1
 8004e04:	60bb      	str	r3, [r7, #8]
 8004e06:	e7e4      	b.n	8004dd2 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh+0x2a>
      }
      return offset;
 8004e08:	68fb      	ldr	r3, [r7, #12]
    }
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b084      	sub	sp, #16
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
 8004e1a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	60fb      	str	r3, [r7, #12]
      offset += this->pose.deserialize(inbuffer + offset);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	1d18      	adds	r0, r3, #4
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	683a      	ldr	r2, [r7, #0]
 8004e28:	4413      	add	r3, r2
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	f7ff ff57 	bl	8004cde <_ZN13geometry_msgs4Pose11deserializeEPh>
 8004e30:	4602      	mov	r2, r0
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	4413      	add	r3, r2
 8004e36:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 8004e38:	2300      	movs	r3, #0
 8004e3a:	60bb      	str	r3, [r7, #8]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	2b23      	cmp	r3, #35	; 0x23
 8004e40:	d813      	bhi.n	8004e6a <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh+0x58>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->covariance[i]));
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	683a      	ldr	r2, [r7, #0]
 8004e46:	18d0      	adds	r0, r2, r3
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	330a      	adds	r3, #10
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	4413      	add	r3, r2
 8004e52:	3304      	adds	r3, #4
 8004e54:	4619      	mov	r1, r3
 8004e56:	f7fd f8e9 	bl	800202c <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	4413      	add	r3, r2
 8004e60:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	3301      	adds	r3, #1
 8004e66:	60bb      	str	r3, [r7, #8]
 8004e68:	e7e8      	b.n	8004e3c <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh+0x2a>
      }
     return offset;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
    }
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <_ZN13geometry_msgs18PoseWithCovariance7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/PoseWithCovariance"; };
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	4b03      	ldr	r3, [pc, #12]	; (8004e8c <_ZN13geometry_msgs18PoseWithCovariance7getTypeEv+0x18>)
 8004e7e:	4618      	mov	r0, r3
 8004e80:	370c      	adds	r7, #12
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	0800eff4 	.word	0x0800eff4

08004e90 <_ZN13geometry_msgs18PoseWithCovariance6getMD5Ev>:
    virtual const char * getMD5() override { return "c23e848cf1b7533a8d7c259073a97e6f"; };
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	4b03      	ldr	r3, [pc, #12]	; (8004ea8 <_ZN13geometry_msgs18PoseWithCovariance6getMD5Ev+0x18>)
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	0800f018 	.word	0x0800f018

08004eac <_ZN13geometry_msgs19TwistWithCovarianceC1Ev>:
    public:
      typedef geometry_msgs::Twist _twist_type;
      _twist_type twist;
      float covariance[36];

    TwistWithCovariance():
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
      twist(),
      covariance()
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7fd f954 	bl	8002164 <_ZN3ros3MsgC1Ev>
 8004ebc:	4a0c      	ldr	r2, [pc, #48]	; (8004ef0 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x44>)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	3304      	adds	r3, #4
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7fd fa02 	bl	80022d0 <_ZN13geometry_msgs5TwistC1Ev>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8004ed2:	2323      	movs	r3, #35	; 0x23
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	db05      	blt.n	8004ee4 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x38>
 8004ed8:	f04f 0100 	mov.w	r1, #0
 8004edc:	6011      	str	r1, [r2, #0]
 8004ede:	3204      	adds	r2, #4
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	e7f7      	b.n	8004ed4 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x28>
    {
    }
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3708      	adds	r7, #8
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	0800f350 	.word	0x0800f350

08004ef4 <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004efe:	2300      	movs	r3, #0
 8004f00:	60fb      	str	r3, [r7, #12]
      offset += this->twist.serialize(outbuffer + offset);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	1d18      	adds	r0, r3, #4
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	683a      	ldr	r2, [r7, #0]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	f7fd f9fb 	bl	8002308 <_ZNK13geometry_msgs5Twist9serializeEPh>
 8004f12:	4602      	mov	r2, r0
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	4413      	add	r3, r2
 8004f18:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	60bb      	str	r3, [r7, #8]
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	2b23      	cmp	r3, #35	; 0x23
 8004f22:	d816      	bhi.n	8004f52 <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh+0x5e>
      offset += serializeAvrFloat64(outbuffer + offset, this->covariance[i]);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	683a      	ldr	r2, [r7, #0]
 8004f28:	18d1      	adds	r1, r2, r3
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	330a      	adds	r3, #10
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4413      	add	r3, r2
 8004f34:	edd3 7a00 	vldr	s15, [r3]
 8004f38:	eeb0 0a67 	vmov.f32	s0, s15
 8004f3c:	4608      	mov	r0, r1
 8004f3e:	f7fc ffd9 	bl	8001ef4 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004f42:	4602      	mov	r2, r0
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	4413      	add	r3, r2
 8004f48:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	60bb      	str	r3, [r7, #8]
 8004f50:	e7e5      	b.n	8004f1e <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh+0x2a>
      }
      return offset;
 8004f52:	68fb      	ldr	r3, [r7, #12]
    }
 8004f54:	4618      	mov	r0, r3
 8004f56:	3710      	adds	r7, #16
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004f66:	2300      	movs	r3, #0
 8004f68:	60fb      	str	r3, [r7, #12]
      offset += this->twist.deserialize(inbuffer + offset);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	1d18      	adds	r0, r3, #4
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	683a      	ldr	r2, [r7, #0]
 8004f72:	4413      	add	r3, r2
 8004f74:	4619      	mov	r1, r3
 8004f76:	f7fd f9ec 	bl	8002352 <_ZN13geometry_msgs5Twist11deserializeEPh>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4413      	add	r3, r2
 8004f80:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 8004f82:	2300      	movs	r3, #0
 8004f84:	60bb      	str	r3, [r7, #8]
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	2b23      	cmp	r3, #35	; 0x23
 8004f8a:	d812      	bhi.n	8004fb2 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh+0x56>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->covariance[i]));
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	683a      	ldr	r2, [r7, #0]
 8004f90:	18d0      	adds	r0, r2, r3
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	330a      	adds	r3, #10
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	f7fd f845 	bl	800202c <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	3301      	adds	r3, #1
 8004fae:	60bb      	str	r3, [r7, #8]
 8004fb0:	e7e9      	b.n	8004f86 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh+0x2a>
      }
     return offset;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
    }
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3710      	adds	r7, #16
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <_ZN13geometry_msgs19TwistWithCovariance7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/TwistWithCovariance"; };
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	4b03      	ldr	r3, [pc, #12]	; (8004fd4 <_ZN13geometry_msgs19TwistWithCovariance7getTypeEv+0x18>)
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	370c      	adds	r7, #12
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	0800f08c 	.word	0x0800f08c

08004fd8 <_ZN13geometry_msgs19TwistWithCovariance6getMD5Ev>:
    virtual const char * getMD5() override { return "1fe8a28e6890a4cc3ae4c3ca5c7d82e6"; };
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	4b03      	ldr	r3, [pc, #12]	; (8004ff0 <_ZN13geometry_msgs19TwistWithCovariance6getMD5Ev+0x18>)
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	0800f0b0 	.word	0x0800f0b0

08004ff4 <_ZN8nav_msgs8OdometryC1Ev>:
      typedef geometry_msgs::PoseWithCovariance _pose_type;
      _pose_type pose;
      typedef geometry_msgs::TwistWithCovariance _twist_type;
      _twist_type twist;

    Odometry():
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
      header(),
      child_frame_id(""),
      pose(),
      twist()
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fd f8b0 	bl	8002164 <_ZN3ros3MsgC1Ev>
 8005004:	4a0c      	ldr	r2, [pc, #48]	; (8005038 <_ZN8nav_msgs8OdometryC1Ev+0x44>)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	601a      	str	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	3304      	adds	r3, #4
 800500e:	4618      	mov	r0, r3
 8005010:	f7ff fb24 	bl	800465c <_ZN8std_msgs6HeaderC1Ev>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a09      	ldr	r2, [pc, #36]	; (800503c <_ZN8nav_msgs8OdometryC1Ev+0x48>)
 8005018:	619a      	str	r2, [r3, #24]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	331c      	adds	r3, #28
 800501e:	4618      	mov	r0, r3
 8005020:	f7ff fe9e 	bl	8004d60 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	33d8      	adds	r3, #216	; 0xd8
 8005028:	4618      	mov	r0, r3
 800502a:	f7ff ff3f 	bl	8004eac <_ZN13geometry_msgs19TwistWithCovarianceC1Ev>
    {
    }
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4618      	mov	r0, r3
 8005032:	3708      	adds	r7, #8
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	0800f338 	.word	0x0800f338
 800503c:	0800ef0c 	.word	0x0800ef0c

08005040 <_ZNK8nav_msgs8Odometry9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800504a:	2300      	movs	r3, #0
 800504c:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	1d18      	adds	r0, r3, #4
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	683a      	ldr	r2, [r7, #0]
 8005056:	4413      	add	r3, r2
 8005058:	4619      	mov	r1, r3
 800505a:	f7ff fb1f 	bl	800469c <_ZNK8std_msgs6Header9serializeEPh>
 800505e:	4602      	mov	r2, r0
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	4413      	add	r3, r2
 8005064:	60fb      	str	r3, [r7, #12]
      uint32_t length_child_frame_id = strlen(this->child_frame_id);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	4618      	mov	r0, r3
 800506c:	f7fb f8b0 	bl	80001d0 <strlen>
 8005070:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_child_frame_id);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	683a      	ldr	r2, [r7, #0]
 8005076:	4413      	add	r3, r2
 8005078:	68b9      	ldr	r1, [r7, #8]
 800507a:	4618      	mov	r0, r3
 800507c:	f7fe fbe6 	bl	800384c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	3304      	adds	r3, #4
 8005084:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->child_frame_id, length_child_frame_id);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	683a      	ldr	r2, [r7, #0]
 800508a:	18d0      	adds	r0, r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	4619      	mov	r1, r3
 8005094:	f009 fc1e 	bl	800e8d4 <memcpy>
      offset += length_child_frame_id;
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	4413      	add	r3, r2
 800509e:	60fb      	str	r3, [r7, #12]
      offset += this->pose.serialize(outbuffer + offset);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f103 001c 	add.w	r0, r3, #28
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	683a      	ldr	r2, [r7, #0]
 80050aa:	4413      	add	r3, r2
 80050ac:	4619      	mov	r1, r3
 80050ae:	f7ff fe7b 	bl	8004da8 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh>
 80050b2:	4602      	mov	r2, r0
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	4413      	add	r3, r2
 80050b8:	60fb      	str	r3, [r7, #12]
      offset += this->twist.serialize(outbuffer + offset);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	683a      	ldr	r2, [r7, #0]
 80050c4:	4413      	add	r3, r2
 80050c6:	4619      	mov	r1, r3
 80050c8:	f7ff ff14 	bl	8004ef4 <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh>
 80050cc:	4602      	mov	r2, r0
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	4413      	add	r3, r2
 80050d2:	60fb      	str	r3, [r7, #12]
      return offset;
 80050d4:	68fb      	ldr	r3, [r7, #12]
    }
 80050d6:	4618      	mov	r0, r3
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <_ZN8nav_msgs8Odometry11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80050de:	b580      	push	{r7, lr}
 80050e0:	b086      	sub	sp, #24
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
 80050e6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80050e8:	2300      	movs	r3, #0
 80050ea:	613b      	str	r3, [r7, #16]
      offset += this->header.deserialize(inbuffer + offset);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	1d18      	adds	r0, r3, #4
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	683a      	ldr	r2, [r7, #0]
 80050f4:	4413      	add	r3, r2
 80050f6:	4619      	mov	r1, r3
 80050f8:	f7ff fb68 	bl	80047cc <_ZN8std_msgs6Header11deserializeEPh>
 80050fc:	4602      	mov	r2, r0
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	4413      	add	r3, r2
 8005102:	613b      	str	r3, [r7, #16]
      uint32_t length_child_frame_id;
      arrToVar(length_child_frame_id, (inbuffer + offset));
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	683a      	ldr	r2, [r7, #0]
 8005108:	441a      	add	r2, r3
 800510a:	f107 030c 	add.w	r3, r7, #12
 800510e:	4611      	mov	r1, r2
 8005110:	4618      	mov	r0, r3
 8005112:	f7fe fbb9 	bl	8003888 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	3304      	adds	r3, #4
 800511a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	617b      	str	r3, [r7, #20]
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	4413      	add	r3, r2
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	429a      	cmp	r2, r3
 800512a:	d20c      	bcs.n	8005146 <_ZN8nav_msgs8Odometry11deserializeEPh+0x68>
          inbuffer[k-1]=inbuffer[k];
 800512c:	683a      	ldr	r2, [r7, #0]
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	441a      	add	r2, r3
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	3b01      	subs	r3, #1
 8005136:	6839      	ldr	r1, [r7, #0]
 8005138:	440b      	add	r3, r1
 800513a:	7812      	ldrb	r2, [r2, #0]
 800513c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	3301      	adds	r3, #1
 8005142:	617b      	str	r3, [r7, #20]
 8005144:	e7ec      	b.n	8005120 <_ZN8nav_msgs8Odometry11deserializeEPh+0x42>
      }
      inbuffer[offset+length_child_frame_id-1]=0;
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	4413      	add	r3, r2
 800514c:	3b01      	subs	r3, #1
 800514e:	683a      	ldr	r2, [r7, #0]
 8005150:	4413      	add	r3, r2
 8005152:	2200      	movs	r2, #0
 8005154:	701a      	strb	r2, [r3, #0]
      this->child_frame_id = (char *)(inbuffer + offset-1);
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	3b01      	subs	r3, #1
 800515a:	683a      	ldr	r2, [r7, #0]
 800515c:	441a      	add	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	619a      	str	r2, [r3, #24]
      offset += length_child_frame_id;
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	4413      	add	r3, r2
 8005168:	613b      	str	r3, [r7, #16]
      offset += this->pose.deserialize(inbuffer + offset);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f103 001c 	add.w	r0, r3, #28
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	683a      	ldr	r2, [r7, #0]
 8005174:	4413      	add	r3, r2
 8005176:	4619      	mov	r1, r3
 8005178:	f7ff fe4b 	bl	8004e12 <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh>
 800517c:	4602      	mov	r2, r0
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	4413      	add	r3, r2
 8005182:	613b      	str	r3, [r7, #16]
      offset += this->twist.deserialize(inbuffer + offset);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	4413      	add	r3, r2
 8005190:	4619      	mov	r1, r3
 8005192:	f7ff fee3 	bl	8004f5c <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh>
 8005196:	4602      	mov	r2, r0
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	4413      	add	r3, r2
 800519c:	613b      	str	r3, [r7, #16]
     return offset;
 800519e:	693b      	ldr	r3, [r7, #16]
    }
 80051a0:	4618      	mov	r0, r3
 80051a2:	3718      	adds	r7, #24
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <_ZN8nav_msgs8Odometry7getTypeEv>:

    virtual const char * getType() override { return "nav_msgs/Odometry"; };
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	4b03      	ldr	r3, [pc, #12]	; (80051c0 <_ZN8nav_msgs8Odometry7getTypeEv+0x18>)
 80051b2:	4618      	mov	r0, r3
 80051b4:	370c      	adds	r7, #12
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	0800f0d4 	.word	0x0800f0d4

080051c4 <_ZN8nav_msgs8Odometry6getMD5Ev>:
    virtual const char * getMD5() override { return "cd5e73d190d741a2f92e81eda573aca7"; };
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	4b03      	ldr	r3, [pc, #12]	; (80051dc <_ZN8nav_msgs8Odometry6getMD5Ev+0x18>)
 80051ce:	4618      	mov	r0, r3
 80051d0:	370c      	adds	r7, #12
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	0800f0e8 	.word	0x0800f0e8

080051e0 <_ZN13geometry_msgs9TransformC1Ev>:
      typedef geometry_msgs::Vector3 _translation_type;
      _translation_type translation;
      typedef geometry_msgs::Quaternion _rotation_type;
      _rotation_type rotation;

    Transform():
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
      translation(),
      rotation()
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7fc ffba 	bl	8002164 <_ZN3ros3MsgC1Ev>
 80051f0:	4a08      	ldr	r2, [pc, #32]	; (8005214 <_ZN13geometry_msgs9TransformC1Ev+0x34>)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	601a      	str	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	3304      	adds	r3, #4
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7fc ffc2 	bl	8002184 <_ZN13geometry_msgs7Vector3C1Ev>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	3314      	adds	r3, #20
 8005204:	4618      	mov	r0, r3
 8005206:	f7ff fc63 	bl	8004ad0 <_ZN13geometry_msgs10QuaternionC1Ev>
    {
    }
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4618      	mov	r0, r3
 800520e:	3708      	adds	r7, #8
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	0800f320 	.word	0x0800f320

08005218 <_ZNK13geometry_msgs9Transform9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005222:	2300      	movs	r3, #0
 8005224:	60fb      	str	r3, [r7, #12]
      offset += this->translation.serialize(outbuffer + offset);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	1d18      	adds	r0, r3, #4
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	683a      	ldr	r2, [r7, #0]
 800522e:	4413      	add	r3, r2
 8005230:	4619      	mov	r1, r3
 8005232:	f7fc ffc5 	bl	80021c0 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8005236:	4602      	mov	r2, r0
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	4413      	add	r3, r2
 800523c:	60fb      	str	r3, [r7, #12]
      offset += this->rotation.serialize(outbuffer + offset);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f103 0014 	add.w	r0, r3, #20
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	4413      	add	r3, r2
 800524a:	4619      	mov	r1, r3
 800524c:	f7ff fc62 	bl	8004b14 <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 8005250:	4602      	mov	r2, r0
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	4413      	add	r3, r2
 8005256:	60fb      	str	r3, [r7, #12]
      return offset;
 8005258:	68fb      	ldr	r3, [r7, #12]
    }
 800525a:	4618      	mov	r0, r3
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}

08005262 <_ZN13geometry_msgs9Transform11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8005262:	b580      	push	{r7, lr}
 8005264:	b084      	sub	sp, #16
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
 800526a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800526c:	2300      	movs	r3, #0
 800526e:	60fb      	str	r3, [r7, #12]
      offset += this->translation.deserialize(inbuffer + offset);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	1d18      	adds	r0, r3, #4
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	683a      	ldr	r2, [r7, #0]
 8005278:	4413      	add	r3, r2
 800527a:	4619      	mov	r1, r3
 800527c:	f7fc ffd9 	bl	8002232 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8005280:	4602      	mov	r2, r0
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	4413      	add	r3, r2
 8005286:	60fb      	str	r3, [r7, #12]
      offset += this->rotation.deserialize(inbuffer + offset);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f103 0014 	add.w	r0, r3, #20
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	683a      	ldr	r2, [r7, #0]
 8005292:	4413      	add	r3, r2
 8005294:	4619      	mov	r1, r3
 8005296:	f7ff fc85 	bl	8004ba4 <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 800529a:	4602      	mov	r2, r0
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	4413      	add	r3, r2
 80052a0:	60fb      	str	r3, [r7, #12]
     return offset;
 80052a2:	68fb      	ldr	r3, [r7, #12]
    }
 80052a4:	4618      	mov	r0, r3
 80052a6:	3710      	adds	r7, #16
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <_ZN13geometry_msgs9Transform7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Transform"; };
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	4b03      	ldr	r3, [pc, #12]	; (80052c4 <_ZN13geometry_msgs9Transform7getTypeEv+0x18>)
 80052b6:	4618      	mov	r0, r3
 80052b8:	370c      	adds	r7, #12
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	0800f10c 	.word	0x0800f10c

080052c8 <_ZN13geometry_msgs9Transform6getMD5Ev>:
    virtual const char * getMD5() override { return "ac9eff44abf714214112b05d54a3cf9b"; };
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	4b03      	ldr	r3, [pc, #12]	; (80052e0 <_ZN13geometry_msgs9Transform6getMD5Ev+0x18>)
 80052d2:	4618      	mov	r0, r3
 80052d4:	370c      	adds	r7, #12
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	0800f124 	.word	0x0800f124

080052e4 <_ZN13geometry_msgs16TransformStampedC1Ev>:
      typedef const char* _child_frame_id_type;
      _child_frame_id_type child_frame_id;
      typedef geometry_msgs::Transform _transform_type;
      _transform_type transform;

    TransformStamped():
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
      header(),
      child_frame_id(""),
      transform()
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7fc ff38 	bl	8002164 <_ZN3ros3MsgC1Ev>
 80052f4:	4a0a      	ldr	r2, [pc, #40]	; (8005320 <_ZN13geometry_msgs16TransformStampedC1Ev+0x3c>)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	601a      	str	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	3304      	adds	r3, #4
 80052fe:	4618      	mov	r0, r3
 8005300:	f7ff f9ac 	bl	800465c <_ZN8std_msgs6HeaderC1Ev>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a07      	ldr	r2, [pc, #28]	; (8005324 <_ZN13geometry_msgs16TransformStampedC1Ev+0x40>)
 8005308:	619a      	str	r2, [r3, #24]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	331c      	adds	r3, #28
 800530e:	4618      	mov	r0, r3
 8005310:	f7ff ff66 	bl	80051e0 <_ZN13geometry_msgs9TransformC1Ev>
    {
    }
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4618      	mov	r0, r3
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	0800f308 	.word	0x0800f308
 8005324:	0800ef0c 	.word	0x0800ef0c

08005328 <_ZNK13geometry_msgs16TransformStamped9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005332:	2300      	movs	r3, #0
 8005334:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	1d18      	adds	r0, r3, #4
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	683a      	ldr	r2, [r7, #0]
 800533e:	4413      	add	r3, r2
 8005340:	4619      	mov	r1, r3
 8005342:	f7ff f9ab 	bl	800469c <_ZNK8std_msgs6Header9serializeEPh>
 8005346:	4602      	mov	r2, r0
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	4413      	add	r3, r2
 800534c:	60fb      	str	r3, [r7, #12]
      uint32_t length_child_frame_id = strlen(this->child_frame_id);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	4618      	mov	r0, r3
 8005354:	f7fa ff3c 	bl	80001d0 <strlen>
 8005358:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_child_frame_id);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	4413      	add	r3, r2
 8005360:	68b9      	ldr	r1, [r7, #8]
 8005362:	4618      	mov	r0, r3
 8005364:	f7fe fa72 	bl	800384c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	3304      	adds	r3, #4
 800536c:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->child_frame_id, length_child_frame_id);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	683a      	ldr	r2, [r7, #0]
 8005372:	18d0      	adds	r0, r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	68ba      	ldr	r2, [r7, #8]
 800537a:	4619      	mov	r1, r3
 800537c:	f009 faaa 	bl	800e8d4 <memcpy>
      offset += length_child_frame_id;
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	4413      	add	r3, r2
 8005386:	60fb      	str	r3, [r7, #12]
      offset += this->transform.serialize(outbuffer + offset);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f103 001c 	add.w	r0, r3, #28
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	683a      	ldr	r2, [r7, #0]
 8005392:	4413      	add	r3, r2
 8005394:	4619      	mov	r1, r3
 8005396:	f7ff ff3f 	bl	8005218 <_ZNK13geometry_msgs9Transform9serializeEPh>
 800539a:	4602      	mov	r2, r0
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	4413      	add	r3, r2
 80053a0:	60fb      	str	r3, [r7, #12]
      return offset;
 80053a2:	68fb      	ldr	r3, [r7, #12]
    }
 80053a4:	4618      	mov	r0, r3
 80053a6:	3710      	adds	r7, #16
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <_ZN13geometry_msgs16TransformStamped11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b086      	sub	sp, #24
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80053b6:	2300      	movs	r3, #0
 80053b8:	613b      	str	r3, [r7, #16]
      offset += this->header.deserialize(inbuffer + offset);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	1d18      	adds	r0, r3, #4
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	683a      	ldr	r2, [r7, #0]
 80053c2:	4413      	add	r3, r2
 80053c4:	4619      	mov	r1, r3
 80053c6:	f7ff fa01 	bl	80047cc <_ZN8std_msgs6Header11deserializeEPh>
 80053ca:	4602      	mov	r2, r0
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	4413      	add	r3, r2
 80053d0:	613b      	str	r3, [r7, #16]
      uint32_t length_child_frame_id;
      arrToVar(length_child_frame_id, (inbuffer + offset));
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	683a      	ldr	r2, [r7, #0]
 80053d6:	441a      	add	r2, r3
 80053d8:	f107 030c 	add.w	r3, r7, #12
 80053dc:	4611      	mov	r1, r2
 80053de:	4618      	mov	r0, r3
 80053e0:	f7fe fa52 	bl	8003888 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	3304      	adds	r3, #4
 80053e8:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	617b      	str	r3, [r7, #20]
 80053ee:	693a      	ldr	r2, [r7, #16]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	4413      	add	r3, r2
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d20c      	bcs.n	8005414 <_ZN13geometry_msgs16TransformStamped11deserializeEPh+0x68>
          inbuffer[k-1]=inbuffer[k];
 80053fa:	683a      	ldr	r2, [r7, #0]
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	441a      	add	r2, r3
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	3b01      	subs	r3, #1
 8005404:	6839      	ldr	r1, [r7, #0]
 8005406:	440b      	add	r3, r1
 8005408:	7812      	ldrb	r2, [r2, #0]
 800540a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	3301      	adds	r3, #1
 8005410:	617b      	str	r3, [r7, #20]
 8005412:	e7ec      	b.n	80053ee <_ZN13geometry_msgs16TransformStamped11deserializeEPh+0x42>
      }
      inbuffer[offset+length_child_frame_id-1]=0;
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	4413      	add	r3, r2
 800541a:	3b01      	subs	r3, #1
 800541c:	683a      	ldr	r2, [r7, #0]
 800541e:	4413      	add	r3, r2
 8005420:	2200      	movs	r2, #0
 8005422:	701a      	strb	r2, [r3, #0]
      this->child_frame_id = (char *)(inbuffer + offset-1);
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	3b01      	subs	r3, #1
 8005428:	683a      	ldr	r2, [r7, #0]
 800542a:	441a      	add	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	619a      	str	r2, [r3, #24]
      offset += length_child_frame_id;
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	4413      	add	r3, r2
 8005436:	613b      	str	r3, [r7, #16]
      offset += this->transform.deserialize(inbuffer + offset);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f103 001c 	add.w	r0, r3, #28
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	683a      	ldr	r2, [r7, #0]
 8005442:	4413      	add	r3, r2
 8005444:	4619      	mov	r1, r3
 8005446:	f7ff ff0c 	bl	8005262 <_ZN13geometry_msgs9Transform11deserializeEPh>
 800544a:	4602      	mov	r2, r0
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	4413      	add	r3, r2
 8005450:	613b      	str	r3, [r7, #16]
     return offset;
 8005452:	693b      	ldr	r3, [r7, #16]
    }
 8005454:	4618      	mov	r0, r3
 8005456:	3718      	adds	r7, #24
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <_ZN13geometry_msgs16TransformStamped7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/TransformStamped"; };
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	4b03      	ldr	r3, [pc, #12]	; (8005474 <_ZN13geometry_msgs16TransformStamped7getTypeEv+0x18>)
 8005466:	4618      	mov	r0, r3
 8005468:	370c      	adds	r7, #12
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	0800f148 	.word	0x0800f148

08005478 <_ZN13geometry_msgs16TransformStamped6getMD5Ev>:
    virtual const char * getMD5() override { return "b5764a33bfeb3588febc2682852579b0"; };
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	4b03      	ldr	r3, [pc, #12]	; (8005490 <_ZN13geometry_msgs16TransformStamped6getMD5Ev+0x18>)
 8005482:	4618      	mov	r0, r3
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	0800f168 	.word	0x0800f168

08005494 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
 80054a0:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint) {};
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	68ba      	ldr	r2, [r7, #8]
 80054a6:	601a      	str	r2, [r3, #0]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	605a      	str	r2, [r3, #4]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	683a      	ldr	r2, [r7, #0]
 80054b2:	611a      	str	r2, [r3, #16]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	4618      	mov	r0, r3
 80054b8:	3714      	adds	r7, #20
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:
  int publish(const Msg * msg)
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b082      	sub	sp, #8
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
 80054ca:	6039      	str	r1, [r7, #0]
    return nh_->publish(id_, msg);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	68d8      	ldr	r0, [r3, #12]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	6891      	ldr	r1, [r2, #8]
 80054dc:	683a      	ldr	r2, [r7, #0]
 80054de:	4798      	blx	r3
 80054e0:	4603      	mov	r3, r0
  };
 80054e2:	4618      	mov	r0, r3
 80054e4:	3708      	adds	r7, #8
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
	...

080054ec <_ZN2tf9tfMessageC1Ev>:
      uint32_t transforms_length;
      typedef geometry_msgs::TransformStamped _transforms_type;
      _transforms_type st_transforms;
      _transforms_type * transforms;

    tfMessage():
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
      transforms_length(0), st_transforms(), transforms(nullptr)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7fc fe34 	bl	8002164 <_ZN3ros3MsgC1Ev>
 80054fc:	4a09      	ldr	r2, [pc, #36]	; (8005524 <_ZN2tf9tfMessageC1Ev+0x38>)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	601a      	str	r2, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	605a      	str	r2, [r3, #4]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	3308      	adds	r3, #8
 800550c:	4618      	mov	r0, r3
 800550e:	f7ff fee9 	bl	80052e4 <_ZN13geometry_msgs16TransformStampedC1Ev>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	64da      	str	r2, [r3, #76]	; 0x4c
    {
    }
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4618      	mov	r0, r3
 800551c:	3708      	adds	r7, #8
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	0800f2f0 	.word	0x0800f2f0

08005528 <_ZNK2tf9tfMessage9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005532:	2300      	movs	r3, #0
 8005534:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->transforms_length >> (8 * 0)) & 0xFF;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6859      	ldr	r1, [r3, #4]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	683a      	ldr	r2, [r7, #0]
 800553e:	4413      	add	r3, r2
 8005540:	b2ca      	uxtb	r2, r1
 8005542:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->transforms_length >> (8 * 1)) & 0xFF;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	0a19      	lsrs	r1, r3, #8
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	3301      	adds	r3, #1
 800554e:	683a      	ldr	r2, [r7, #0]
 8005550:	4413      	add	r3, r2
 8005552:	b2ca      	uxtb	r2, r1
 8005554:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->transforms_length >> (8 * 2)) & 0xFF;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	0c19      	lsrs	r1, r3, #16
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	3302      	adds	r3, #2
 8005560:	683a      	ldr	r2, [r7, #0]
 8005562:	4413      	add	r3, r2
 8005564:	b2ca      	uxtb	r2, r1
 8005566:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->transforms_length >> (8 * 3)) & 0xFF;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	0e19      	lsrs	r1, r3, #24
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	3303      	adds	r3, #3
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	4413      	add	r3, r2
 8005576:	b2ca      	uxtb	r2, r1
 8005578:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->transforms_length);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	3304      	adds	r3, #4
 800557e:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < transforms_length; i++){
 8005580:	2300      	movs	r3, #0
 8005582:	60bb      	str	r3, [r7, #8]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	68ba      	ldr	r2, [r7, #8]
 800558a:	429a      	cmp	r2, r3
 800558c:	d21e      	bcs.n	80055cc <_ZNK2tf9tfMessage9serializeEPh+0xa4>
      offset += this->transforms[i].serialize(outbuffer + offset);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	4613      	mov	r3, r2
 8005596:	011b      	lsls	r3, r3, #4
 8005598:	4413      	add	r3, r2
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	18c8      	adds	r0, r1, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80055a2:	68ba      	ldr	r2, [r7, #8]
 80055a4:	4613      	mov	r3, r2
 80055a6:	011b      	lsls	r3, r3, #4
 80055a8:	4413      	add	r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	440b      	add	r3, r1
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	6839      	ldr	r1, [r7, #0]
 80055b6:	440a      	add	r2, r1
 80055b8:	4611      	mov	r1, r2
 80055ba:	4798      	blx	r3
 80055bc:	4602      	mov	r2, r0
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	4413      	add	r3, r2
 80055c2:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < transforms_length; i++){
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	3301      	adds	r3, #1
 80055c8:	60bb      	str	r3, [r7, #8]
 80055ca:	e7db      	b.n	8005584 <_ZNK2tf9tfMessage9serializeEPh+0x5c>
      }
      return offset;
 80055cc:	68fb      	ldr	r3, [r7, #12]
    }
 80055ce:	4618      	mov	r0, r3
 80055d0:	3710      	adds	r7, #16
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <_ZN2tf9tfMessage11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b086      	sub	sp, #24
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
 80055de:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80055e0:	2300      	movs	r3, #0
 80055e2:	617b      	str	r3, [r7, #20]
      uint32_t transforms_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	683a      	ldr	r2, [r7, #0]
 80055e8:	4413      	add	r3, r2
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	60fb      	str	r3, [r7, #12]
      transforms_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	3301      	adds	r3, #1
 80055f2:	683a      	ldr	r2, [r7, #0]
 80055f4:	4413      	add	r3, r2
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	021b      	lsls	r3, r3, #8
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	60fb      	str	r3, [r7, #12]
      transforms_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	3302      	adds	r3, #2
 8005604:	683a      	ldr	r2, [r7, #0]
 8005606:	4413      	add	r3, r2
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	041b      	lsls	r3, r3, #16
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	4313      	orrs	r3, r2
 8005610:	60fb      	str	r3, [r7, #12]
      transforms_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	3303      	adds	r3, #3
 8005616:	683a      	ldr	r2, [r7, #0]
 8005618:	4413      	add	r3, r2
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	061b      	lsls	r3, r3, #24
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	4313      	orrs	r3, r2
 8005622:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->transforms_length);
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	3304      	adds	r3, #4
 8005628:	617b      	str	r3, [r7, #20]
      if(transforms_lengthT > transforms_length)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	429a      	cmp	r2, r3
 8005632:	d90c      	bls.n	800564e <_ZN2tf9tfMessage11deserializeEPh+0x78>
        this->transforms = (geometry_msgs::TransformStamped*)realloc(this->transforms, transforms_lengthT * sizeof(geometry_msgs::TransformStamped));
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	4613      	mov	r3, r2
 800563c:	011b      	lsls	r3, r3, #4
 800563e:	4413      	add	r3, r2
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	4619      	mov	r1, r3
 8005644:	f009 f9f0 	bl	800ea28 <realloc>
 8005648:	4602      	mov	r2, r0
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	64da      	str	r2, [r3, #76]	; 0x4c
      transforms_length = transforms_lengthT;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < transforms_length; i++){
 8005654:	2300      	movs	r3, #0
 8005656:	613b      	str	r3, [r7, #16]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	429a      	cmp	r2, r3
 8005660:	d21e      	bcs.n	80056a0 <_ZN2tf9tfMessage11deserializeEPh+0xca>
      offset += this->st_transforms.deserialize(inbuffer + offset);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f103 0008 	add.w	r0, r3, #8
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	683a      	ldr	r2, [r7, #0]
 800566c:	4413      	add	r3, r2
 800566e:	4619      	mov	r1, r3
 8005670:	f7ff fe9c 	bl	80053ac <_ZN13geometry_msgs16TransformStamped11deserializeEPh>
 8005674:	4602      	mov	r2, r0
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	4413      	add	r3, r2
 800567a:	617b      	str	r3, [r7, #20]
        memcpy( &(this->transforms[i]), &(this->st_transforms), sizeof(geometry_msgs::TransformStamped));
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	4613      	mov	r3, r2
 8005684:	011b      	lsls	r3, r3, #4
 8005686:	4413      	add	r3, r2
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	18c8      	adds	r0, r1, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	3308      	adds	r3, #8
 8005690:	2244      	movs	r2, #68	; 0x44
 8005692:	4619      	mov	r1, r3
 8005694:	f009 f91e 	bl	800e8d4 <memcpy>
      for( uint32_t i = 0; i < transforms_length; i++){
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	3301      	adds	r3, #1
 800569c:	613b      	str	r3, [r7, #16]
 800569e:	e7db      	b.n	8005658 <_ZN2tf9tfMessage11deserializeEPh+0x82>
      }
     return offset;
 80056a0:	697b      	ldr	r3, [r7, #20]
    }
 80056a2:	4618      	mov	r0, r3
 80056a4:	3718      	adds	r7, #24
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
	...

080056ac <_ZN2tf9tfMessage7getTypeEv>:

    virtual const char * getType() override { return "tf/tfMessage"; };
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	4b03      	ldr	r3, [pc, #12]	; (80056c4 <_ZN2tf9tfMessage7getTypeEv+0x18>)
 80056b6:	4618      	mov	r0, r3
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	0800f18c 	.word	0x0800f18c

080056c8 <_ZN2tf9tfMessage6getMD5Ev>:
    virtual const char * getMD5() override { return "94810edda583a504dfda3829e70d7eec"; };
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	4b03      	ldr	r3, [pc, #12]	; (80056e0 <_ZN2tf9tfMessage6getMD5Ev+0x18>)
 80056d2:	4618      	mov	r0, r3
 80056d4:	370c      	adds	r7, #12
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	0800f19c 	.word	0x0800f19c

080056e4 <_ZN2tf20TransformBroadcasterC1Ev>:
{

class TransformBroadcaster
{
public:
  TransformBroadcaster() : publisher_("/tf", &internal_msg) {}
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7ff fefc 	bl	80054ec <_ZN2tf9tfMessageC1Ev>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f103 0050 	add.w	r0, r3, #80	; 0x50
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	2300      	movs	r3, #0
 80056fe:	4904      	ldr	r1, [pc, #16]	; (8005710 <_ZN2tf20TransformBroadcasterC1Ev+0x2c>)
 8005700:	f7ff fec8 	bl	8005494 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4618      	mov	r0, r3
 8005708:	3708      	adds	r7, #8
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	0800f1c0 	.word	0x0800f1c0

08005714 <_ZN2tf20TransformBroadcaster4initERN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEE>:

  void init(ros::NodeHandle &nh)
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  {
    nh.advertise(publisher_);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	3350      	adds	r3, #80	; 0x50
 8005722:	4619      	mov	r1, r3
 8005724:	6838      	ldr	r0, [r7, #0]
 8005726:	f000 faf7 	bl	8005d18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE>
  }
 800572a:	bf00      	nop
 800572c:	3708      	adds	r7, #8
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <_ZN2tf20TransformBroadcaster13sendTransformERN13geometry_msgs16TransformStampedE>:

  void sendTransform(geometry_msgs::TransformStamped &transform)
 8005732:	b580      	push	{r7, lr}
 8005734:	b082      	sub	sp, #8
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
 800573a:	6039      	str	r1, [r7, #0]
  {
    internal_msg.transforms_length = 1;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	605a      	str	r2, [r3, #4]
    internal_msg.transforms = &transform;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	683a      	ldr	r2, [r7, #0]
 8005746:	64da      	str	r2, [r3, #76]	; 0x4c
    publisher_.publish(&internal_msg);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	3350      	adds	r3, #80	; 0x50
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	4611      	mov	r1, r2
 8005750:	4618      	mov	r0, r3
 8005752:	f7ff feb6 	bl	80054c2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  }
 8005756:	bf00      	nop
 8005758:	3708      	adds	r7, #8
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
	...

08005760 <_ZN2tfL23createQuaternionFromYawEd>:

namespace tf
{

static inline geometry_msgs::Quaternion createQuaternionFromYaw(double yaw)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	e9c7 2300 	strd	r2, r3, [r7]
  geometry_msgs::Quaternion q;
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	f7ff f9af 	bl	8004ad0 <_ZN13geometry_msgs10QuaternionC1Ev>
  q.x = 0;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f04f 0200 	mov.w	r2, #0
 8005778:	605a      	str	r2, [r3, #4]
  q.y = 0;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f04f 0200 	mov.w	r2, #0
 8005780:	609a      	str	r2, [r3, #8]
  q.z = sin(yaw * 0.5);
 8005782:	f04f 0200 	mov.w	r2, #0
 8005786:	4b1b      	ldr	r3, [pc, #108]	; (80057f4 <_ZN2tfL23createQuaternionFromYawEd+0x94>)
 8005788:	e9d7 0100 	ldrd	r0, r1, [r7]
 800578c:	f7fa fee4 	bl	8000558 <__aeabi_dmul>
 8005790:	4602      	mov	r2, r0
 8005792:	460b      	mov	r3, r1
 8005794:	ec43 2b17 	vmov	d7, r2, r3
 8005798:	eeb0 0a47 	vmov.f32	s0, s14
 800579c:	eef0 0a67 	vmov.f32	s1, s15
 80057a0:	f007 fa76 	bl	800cc90 <sin>
 80057a4:	ec53 2b10 	vmov	r2, r3, d0
 80057a8:	4610      	mov	r0, r2
 80057aa:	4619      	mov	r1, r3
 80057ac:	f7fb f996 	bl	8000adc <__aeabi_d2f>
 80057b0:	4602      	mov	r2, r0
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	60da      	str	r2, [r3, #12]
  q.w = cos(yaw * 0.5);
 80057b6:	f04f 0200 	mov.w	r2, #0
 80057ba:	4b0e      	ldr	r3, [pc, #56]	; (80057f4 <_ZN2tfL23createQuaternionFromYawEd+0x94>)
 80057bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057c0:	f7fa feca 	bl	8000558 <__aeabi_dmul>
 80057c4:	4602      	mov	r2, r0
 80057c6:	460b      	mov	r3, r1
 80057c8:	ec43 2b17 	vmov	d7, r2, r3
 80057cc:	eeb0 0a47 	vmov.f32	s0, s14
 80057d0:	eef0 0a67 	vmov.f32	s1, s15
 80057d4:	f007 fa08 	bl	800cbe8 <cos>
 80057d8:	ec53 2b10 	vmov	r2, r3, d0
 80057dc:	4610      	mov	r0, r2
 80057de:	4619      	mov	r1, r3
 80057e0:	f7fb f97c 	bl	8000adc <__aeabi_d2f>
 80057e4:	4602      	mov	r2, r0
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	611a      	str	r2, [r3, #16]
  return q;
 80057ea:	bf00      	nop
}
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	3710      	adds	r7, #16
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	3fe00000 	.word	0x3fe00000

080057f8 <_ZN8OdometerC1Eff>:

geometry_msgs::TransformStamped t;
tf::TransformBroadcaster tfBroadcaster;


Odometer::Odometer(const float metersPerTick, const float base_width) {
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	ed87 0a02 	vstr	s0, [r7, #8]
 8005804:	edc7 0a01 	vstr	s1, [r7, #4]
  _metersPerTick = metersPerTick;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	68ba      	ldr	r2, [r7, #8]
 800580c:	601a      	str	r2, [r3, #0]
  _base_width    = base_width;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	605a      	str	r2, [r3, #4]
  _cur_x         = 0.0;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f04f 0200 	mov.w	r2, #0
 800581a:	609a      	str	r2, [r3, #8]
  _cur_y         = 0.0;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f04f 0200 	mov.w	r2, #0
 8005822:	60da      	str	r2, [r3, #12]
  _cur_theta     = 0.0;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f04f 0200 	mov.w	r2, #0
 800582a:	611a      	str	r2, [r3, #16]
}
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	4618      	mov	r0, r3
 8005830:	3714      	adds	r7, #20
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
	...

0800583c <_ZN8Odometer9setupPubsERN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEE>:

void Odometer::setupPubs(ros::NodeHandle &nh) {
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  nh.advertise(odom_pub);
 8005846:	4906      	ldr	r1, [pc, #24]	; (8005860 <_ZN8Odometer9setupPubsERN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEE+0x24>)
 8005848:	6838      	ldr	r0, [r7, #0]
 800584a:	f000 fa65 	bl	8005d18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE>
  tfBroadcaster.init(nh);
 800584e:	6839      	ldr	r1, [r7, #0]
 8005850:	4804      	ldr	r0, [pc, #16]	; (8005864 <_ZN8Odometer9setupPubsERN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEE+0x28>)
 8005852:	f7ff ff5f 	bl	8005714 <_ZN2tf20TransformBroadcaster4initERN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEE>
}
 8005856:	bf00      	nop
 8005858:	3708      	adds	r7, #8
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	200028e8 	.word	0x200028e8
 8005864:	20002940 	.word	0x20002940

08005868 <_ZN8Odometer14update_publishEN3ros4TimeEfff>:


void Odometer::update_publish(ros::Time current_time, const float odoInterval,
                              const float distLeft, const float distRight) {
 8005868:	b580      	push	{r7, lr}
 800586a:	b088      	sub	sp, #32
 800586c:	af00      	add	r7, sp, #0
 800586e:	6178      	str	r0, [r7, #20]
 8005870:	f107 030c 	add.w	r3, r7, #12
 8005874:	e883 0006 	stmia.w	r3, {r1, r2}
 8005878:	ed87 0a02 	vstr	s0, [r7, #8]
 800587c:	edc7 0a01 	vstr	s1, [r7, #4]
 8005880:	ed87 1a00 	vstr	s2, [r7]

  float vel_x;
  float vel_theta;

  update_odom(odoInterval, distLeft, distRight, vel_x, vel_theta);
 8005884:	f107 0218 	add.w	r2, r7, #24
 8005888:	f107 031c 	add.w	r3, r7, #28
 800588c:	4619      	mov	r1, r3
 800588e:	ed97 1a00 	vldr	s2, [r7]
 8005892:	edd7 0a01 	vldr	s1, [r7, #4]
 8005896:	ed97 0a02 	vldr	s0, [r7, #8]
 800589a:	6978      	ldr	r0, [r7, #20]
 800589c:	f000 f81c 	bl	80058d8 <_ZN8Odometer11update_odomEfffRfS0_>
  publish_odom(current_time, vel_x, vel_theta);
 80058a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80058a4:	ed97 7a06 	vldr	s14, [r7, #24]
 80058a8:	eef0 0a47 	vmov.f32	s1, s14
 80058ac:	eeb0 0a67 	vmov.f32	s0, s15
 80058b0:	f107 030c 	add.w	r3, r7, #12
 80058b4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80058b8:	6978      	ldr	r0, [r7, #20]
 80058ba:	f000 f935 	bl	8005b28 <_ZN8Odometer12publish_odomEN3ros4TimeEff>
  broadcastTf(current_time);
 80058be:	f107 030c 	add.w	r3, r7, #12
 80058c2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80058c6:	6978      	ldr	r0, [r7, #20]
 80058c8:	f000 f986 	bl	8005bd8 <_ZN8Odometer11broadcastTfEN3ros4TimeE>
}
 80058cc:	bf00      	nop
 80058ce:	3720      	adds	r7, #32
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	0000      	movs	r0, r0
	...

080058d8 <_ZN8Odometer11update_odomEfffRfS0_>:

void Odometer::update_odom(const float odoInterval, const float distLeft,const float distRight,
                          float& vel_x, float& vel_theta) {
 80058d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058da:	ed2d 8b02 	vpush	{d8}
 80058de:	b08b      	sub	sp, #44	; 0x2c
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6178      	str	r0, [r7, #20]
 80058e4:	ed87 0a04 	vstr	s0, [r7, #16]
 80058e8:	edc7 0a03 	vstr	s1, [r7, #12]
 80058ec:	ed87 1a02 	vstr	s2, [r7, #8]
 80058f0:	6079      	str	r1, [r7, #4]
 80058f2:	603a      	str	r2, [r7, #0]

  float dist;
  float d_theta;

  dist = (distRight + distLeft) / 2.0;
 80058f4:	ed97 7a02 	vldr	s14, [r7, #8]
 80058f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80058fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005900:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005904:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005908:	edc7 7a08 	vstr	s15, [r7, #32]

  // Check for the special case of driving in a straight line
  // then compute current loation relative to previous location

  // If the difference in distance is under 2mm/Second we call it a straight line
  if (abs(distRight - distLeft) < (0.002 * odoInterval)) {
 800590c:	ed97 7a02 	vldr	s14, [r7, #8]
 8005910:	edd7 7a03 	vldr	s15, [r7, #12]
 8005914:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005918:	eeb0 0a67 	vmov.f32	s0, s15
 800591c:	f7fe fe6e 	bl	80045fc <_ZSt3absf>
 8005920:	ee10 3a10 	vmov	r3, s0
 8005924:	4618      	mov	r0, r3
 8005926:	f7fa fdbf 	bl	80004a8 <__aeabi_f2d>
 800592a:	4604      	mov	r4, r0
 800592c:	460d      	mov	r5, r1
 800592e:	6938      	ldr	r0, [r7, #16]
 8005930:	f7fa fdba 	bl	80004a8 <__aeabi_f2d>
 8005934:	a364      	add	r3, pc, #400	; (adr r3, 8005ac8 <_ZN8Odometer11update_odomEfffRfS0_+0x1f0>)
 8005936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593a:	f7fa fe0d 	bl	8000558 <__aeabi_dmul>
 800593e:	4602      	mov	r2, r0
 8005940:	460b      	mov	r3, r1
 8005942:	2101      	movs	r1, #1
 8005944:	460e      	mov	r6, r1
 8005946:	4620      	mov	r0, r4
 8005948:	4629      	mov	r1, r5
 800594a:	f7fb f877 	bl	8000a3c <__aeabi_dcmplt>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d101      	bne.n	8005958 <_ZN8Odometer11update_odomEfffRfS0_+0x80>
 8005954:	2300      	movs	r3, #0
 8005956:	461e      	mov	r6, r3
 8005958:	b2f3      	uxtb	r3, r6
 800595a:	2b00      	cmp	r3, #0
 800595c:	d02d      	beq.n	80059ba <_ZN8Odometer11update_odomEfffRfS0_+0xe2>

    // drove in sraight line
    d_theta = 0.0;
 800595e:	f04f 0300 	mov.w	r3, #0
 8005962:	627b      	str	r3, [r7, #36]	; 0x24
    _cur_x += dist * cos(_cur_theta);
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	edd3 7a04 	vldr	s15, [r3, #16]
 800596a:	eeb0 0a67 	vmov.f32	s0, s15
 800596e:	f7fe fe55 	bl	800461c <_ZSt3cosf>
 8005972:	eeb0 7a40 	vmov.f32	s14, s0
 8005976:	edd7 7a08 	vldr	s15, [r7, #32]
 800597a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	edd3 7a02 	vldr	s15, [r3, #8]
 8005984:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	edc3 7a02 	vstr	s15, [r3, #8]
    _cur_y += dist * sin(_cur_theta);
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	edd3 7a04 	vldr	s15, [r3, #16]
 8005994:	eeb0 0a67 	vmov.f32	s0, s15
 8005998:	f7fe fe50 	bl	800463c <_ZSt3sinf>
 800599c:	eeb0 7a40 	vmov.f32	s14, s0
 80059a0:	edd7 7a08 	vldr	s15, [r7, #32]
 80059a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	edd3 7a03 	vldr	s15, [r3, #12]
 80059ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	edc3 7a03 	vstr	s15, [r3, #12]
 80059b8:	e06d      	b.n	8005a96 <_ZN8Odometer11update_odomEfffRfS0_+0x1be>
  }
  else {

    // The path was along an arc
    d_theta = (distRight - distLeft) / _base_width;
 80059ba:	ed97 7a02 	vldr	s14, [r7, #8]
 80059be:	edd7 7a03 	vldr	s15, [r7, #12]
 80059c2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	ed93 7a01 	vldr	s14, [r3, #4]
 80059cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059d0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float r = dist / d_theta;
 80059d4:	edd7 6a08 	vldr	s13, [r7, #32]
 80059d8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80059dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059e0:	edc7 7a07 	vstr	s15, [r7, #28]

    _cur_x += r * (sin(d_theta + _cur_theta) - sin(_cur_theta));
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	ed93 7a04 	vldr	s14, [r3, #16]
 80059ea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80059ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059f2:	eeb0 0a67 	vmov.f32	s0, s15
 80059f6:	f7fe fe21 	bl	800463c <_ZSt3sinf>
 80059fa:	eeb0 8a40 	vmov.f32	s16, s0
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	edd3 7a04 	vldr	s15, [r3, #16]
 8005a04:	eeb0 0a67 	vmov.f32	s0, s15
 8005a08:	f7fe fe18 	bl	800463c <_ZSt3sinf>
 8005a0c:	eef0 7a40 	vmov.f32	s15, s0
 8005a10:	ee38 7a67 	vsub.f32	s14, s16, s15
 8005a14:	edd7 7a07 	vldr	s15, [r7, #28]
 8005a18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	edd3 7a02 	vldr	s15, [r3, #8]
 8005a22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	edc3 7a02 	vstr	s15, [r3, #8]
    _cur_y -= r * (cos(d_theta + _cur_theta) - cos(_cur_theta));
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	ed93 7a04 	vldr	s14, [r3, #16]
 8005a32:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005a36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a3a:	eeb0 0a67 	vmov.f32	s0, s15
 8005a3e:	f7fe fded 	bl	800461c <_ZSt3cosf>
 8005a42:	eeb0 8a40 	vmov.f32	s16, s0
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	edd3 7a04 	vldr	s15, [r3, #16]
 8005a4c:	eeb0 0a67 	vmov.f32	s0, s15
 8005a50:	f7fe fde4 	bl	800461c <_ZSt3cosf>
 8005a54:	eef0 7a40 	vmov.f32	s15, s0
 8005a58:	ee38 7a67 	vsub.f32	s14, s16, s15
 8005a5c:	edd7 7a07 	vldr	s15, [r7, #28]
 8005a60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	ed93 7a03 	vldr	s14, [r3, #12]
 8005a6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	edc3 7a03 	vstr	s15, [r3, #12]
    _cur_theta = normalize_angle(_cur_theta + d_theta);
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	ed93 7a04 	vldr	s14, [r3, #16]
 8005a7a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005a7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a82:	eeb0 0a67 	vmov.f32	s0, s15
 8005a86:	6978      	ldr	r0, [r7, #20]
 8005a88:	f000 f8f2 	bl	8005c70 <_ZN8Odometer15normalize_angleEf>
 8005a8c:	eef0 7a40 	vmov.f32	s15, s0
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	edc3 7a04 	vstr	s15, [r3, #16]
  }

  vel_x     = dist    / odoInterval;
 8005a96:	edd7 6a08 	vldr	s13, [r7, #32]
 8005a9a:	ed97 7a04 	vldr	s14, [r7, #16]
 8005a9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	edc3 7a00 	vstr	s15, [r3]
  vel_theta = d_theta / odoInterval;
 8005aa8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005aac:	ed97 7a04 	vldr	s14, [r7, #16]
 8005ab0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	edc3 7a00 	vstr	s15, [r3]

  return;
 8005aba:	bf00      	nop
}
 8005abc:	372c      	adds	r7, #44	; 0x2c
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	ecbd 8b02 	vpop	{d8}
 8005ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	d2f1a9fc 	.word	0xd2f1a9fc
 8005acc:	3f60624d 	.word	0x3f60624d

08005ad0 <_ZN3ros3MsgaSEOS0_>:
class Msg
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4618      	mov	r0, r3
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <_ZN13geometry_msgs10QuaternionaSEOS0_>:
  class Quaternion : public ros::Msg
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	683a      	ldr	r2, [r7, #0]
 8005af6:	4611      	mov	r1, r2
 8005af8:	4618      	mov	r0, r3
 8005afa:	f7ff ffe9 	bl	8005ad0 <_ZN3ros3MsgaSEOS0_>
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	685a      	ldr	r2, [r3, #4]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	605a      	str	r2, [r3, #4]
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	689a      	ldr	r2, [r3, #8]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	609a      	str	r2, [r3, #8]
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	68da      	ldr	r2, [r3, #12]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	60da      	str	r2, [r3, #12]
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	691a      	ldr	r2, [r3, #16]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	611a      	str	r2, [r3, #16]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4618      	mov	r0, r3
 8005b22:	3708      	adds	r7, #8
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <_ZN8Odometer12publish_odomEN3ros4TimeEff>:
    new_y = y - R * (cos(wd + heading) + cos(heading));
    new_heading = normalize_angle(heading + wd);
  }
}

void Odometer::publish_odom(ros::Time current_time, const float vx, const float vth) {
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b08c      	sub	sp, #48	; 0x30
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6178      	str	r0, [r7, #20]
 8005b30:	f107 030c 	add.w	r3, r7, #12
 8005b34:	e883 0006 	stmia.w	r3, {r1, r2}
 8005b38:	ed87 0a02 	vstr	s0, [r7, #8]
 8005b3c:	edc7 0a01 	vstr	s1, [r7, #4]

    odomMsg.header.stamp          = current_time;
 8005b40:	4b20      	ldr	r3, [pc, #128]	; (8005bc4 <_ZN8Odometer12publish_odomEN3ros4TimeEff+0x9c>)
 8005b42:	330c      	adds	r3, #12
 8005b44:	f107 020c 	add.w	r2, r7, #12
 8005b48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005b4c:	e883 0003 	stmia.w	r3, {r0, r1}
    odomMsg.header.frame_id       = odom;
 8005b50:	4b1c      	ldr	r3, [pc, #112]	; (8005bc4 <_ZN8Odometer12publish_odomEN3ros4TimeEff+0x9c>)
 8005b52:	4a1d      	ldr	r2, [pc, #116]	; (8005bc8 <_ZN8Odometer12publish_odomEN3ros4TimeEff+0xa0>)
 8005b54:	615a      	str	r2, [r3, #20]
    odomMsg.child_frame_id        = base_link;
 8005b56:	4b1b      	ldr	r3, [pc, #108]	; (8005bc4 <_ZN8Odometer12publish_odomEN3ros4TimeEff+0x9c>)
 8005b58:	4a1c      	ldr	r2, [pc, #112]	; (8005bcc <_ZN8Odometer12publish_odomEN3ros4TimeEff+0xa4>)
 8005b5a:	619a      	str	r2, [r3, #24]

    odomMsg.pose.pose.position.x  = _cur_x;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	4a18      	ldr	r2, [pc, #96]	; (8005bc4 <_ZN8Odometer12publish_odomEN3ros4TimeEff+0x9c>)
 8005b62:	6293      	str	r3, [r2, #40]	; 0x28
    odomMsg.pose.pose.position.y  = _cur_y;
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	4a16      	ldr	r2, [pc, #88]	; (8005bc4 <_ZN8Odometer12publish_odomEN3ros4TimeEff+0x9c>)
 8005b6a:	62d3      	str	r3, [r2, #44]	; 0x2c
    odomMsg.pose.pose.position.z  = 0.0;
 8005b6c:	4b15      	ldr	r3, [pc, #84]	; (8005bc4 <_ZN8Odometer12publish_odomEN3ros4TimeEff+0x9c>)
 8005b6e:	f04f 0200 	mov.w	r2, #0
 8005b72:	631a      	str	r2, [r3, #48]	; 0x30
    odomMsg.pose.pose.orientation = tf::createQuaternionFromYaw(_cur_theta);
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7fa fc95 	bl	80004a8 <__aeabi_f2d>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	460b      	mov	r3, r1
 8005b82:	f107 011c 	add.w	r1, r7, #28
 8005b86:	4608      	mov	r0, r1
 8005b88:	f7ff fdea 	bl	8005760 <_ZN2tfL23createQuaternionFromYawEd>
 8005b8c:	f107 031c 	add.w	r3, r7, #28
 8005b90:	4619      	mov	r1, r3
 8005b92:	480f      	ldr	r0, [pc, #60]	; (8005bd0 <_ZN8Odometer12publish_odomEN3ros4TimeEff+0xa8>)
 8005b94:	f7ff ffa8 	bl	8005ae8 <_ZN13geometry_msgs10QuaternionaSEOS0_>

    odomMsg.twist.twist.linear.x  = vx;
 8005b98:	4a0a      	ldr	r2, [pc, #40]	; (8005bc4 <_ZN8Odometer12publish_odomEN3ros4TimeEff+0x9c>)
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    odomMsg.twist.twist.linear.y  = 0;
 8005ba0:	4b08      	ldr	r3, [pc, #32]	; (8005bc4 <_ZN8Odometer12publish_odomEN3ros4TimeEff+0x9c>)
 8005ba2:	f04f 0200 	mov.w	r2, #0
 8005ba6:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    odomMsg.twist.twist.angular.z = vth;
 8005baa:	4a06      	ldr	r2, [pc, #24]	; (8005bc4 <_ZN8Odometer12publish_odomEN3ros4TimeEff+0x9c>)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc

    odom_pub.publish(&odomMsg);
 8005bb2:	4904      	ldr	r1, [pc, #16]	; (8005bc4 <_ZN8Odometer12publish_odomEN3ros4TimeEff+0x9c>)
 8005bb4:	4807      	ldr	r0, [pc, #28]	; (8005bd4 <_ZN8Odometer12publish_odomEN3ros4TimeEff+0xac>)
 8005bb6:	f7ff fc84 	bl	80054c2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  }
 8005bba:	bf00      	nop
 8005bbc:	3730      	adds	r7, #48	; 0x30
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	20002758 	.word	0x20002758
 8005bc8:	2000001c 	.word	0x2000001c
 8005bcc:	20000010 	.word	0x20000010
 8005bd0:	2000278c 	.word	0x2000278c
 8005bd4:	200028e8 	.word	0x200028e8

08005bd8 <_ZN8Odometer11broadcastTfEN3ros4TimeE>:


  void Odometer::broadcastTf(ros::Time current_time) {
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b08a      	sub	sp, #40	; 0x28
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	1d3b      	adds	r3, r7, #4
 8005be2:	e883 0006 	stmia.w	r3, {r1, r2}
    t.header.stamp            = current_time;
 8005be6:	4b1c      	ldr	r3, [pc, #112]	; (8005c58 <_ZN8Odometer11broadcastTfEN3ros4TimeE+0x80>)
 8005be8:	330c      	adds	r3, #12
 8005bea:	1d3a      	adds	r2, r7, #4
 8005bec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005bf0:	e883 0003 	stmia.w	r3, {r0, r1}
    t.header.frame_id         = odom;
 8005bf4:	4b18      	ldr	r3, [pc, #96]	; (8005c58 <_ZN8Odometer11broadcastTfEN3ros4TimeE+0x80>)
 8005bf6:	4a19      	ldr	r2, [pc, #100]	; (8005c5c <_ZN8Odometer11broadcastTfEN3ros4TimeE+0x84>)
 8005bf8:	615a      	str	r2, [r3, #20]
    t.child_frame_id          = base_link;
 8005bfa:	4b17      	ldr	r3, [pc, #92]	; (8005c58 <_ZN8Odometer11broadcastTfEN3ros4TimeE+0x80>)
 8005bfc:	4a18      	ldr	r2, [pc, #96]	; (8005c60 <_ZN8Odometer11broadcastTfEN3ros4TimeE+0x88>)
 8005bfe:	619a      	str	r2, [r3, #24]

    t.transform.translation.x = _cur_x;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	4a14      	ldr	r2, [pc, #80]	; (8005c58 <_ZN8Odometer11broadcastTfEN3ros4TimeE+0x80>)
 8005c06:	6253      	str	r3, [r2, #36]	; 0x24
    t.transform.translation.y = _cur_y;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	4a12      	ldr	r2, [pc, #72]	; (8005c58 <_ZN8Odometer11broadcastTfEN3ros4TimeE+0x80>)
 8005c0e:	6293      	str	r3, [r2, #40]	; 0x28
    t.transform.translation.z = 0.0;
 8005c10:	4b11      	ldr	r3, [pc, #68]	; (8005c58 <_ZN8Odometer11broadcastTfEN3ros4TimeE+0x80>)
 8005c12:	f04f 0200 	mov.w	r2, #0
 8005c16:	62da      	str	r2, [r3, #44]	; 0x2c
    t.transform.rotation      = tf::createQuaternionFromYaw(-_cur_theta);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	edd3 7a04 	vldr	s15, [r3, #16]
 8005c1e:	eef1 7a67 	vneg.f32	s15, s15
 8005c22:	ee17 3a90 	vmov	r3, s15
 8005c26:	4618      	mov	r0, r3
 8005c28:	f7fa fc3e 	bl	80004a8 <__aeabi_f2d>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	460b      	mov	r3, r1
 8005c30:	f107 0114 	add.w	r1, r7, #20
 8005c34:	4608      	mov	r0, r1
 8005c36:	f7ff fd93 	bl	8005760 <_ZN2tfL23createQuaternionFromYawEd>
 8005c3a:	f107 0314 	add.w	r3, r7, #20
 8005c3e:	4619      	mov	r1, r3
 8005c40:	4808      	ldr	r0, [pc, #32]	; (8005c64 <_ZN8Odometer11broadcastTfEN3ros4TimeE+0x8c>)
 8005c42:	f7ff ff51 	bl	8005ae8 <_ZN13geometry_msgs10QuaternionaSEOS0_>


    tfBroadcaster.sendTransform(t);
 8005c46:	4904      	ldr	r1, [pc, #16]	; (8005c58 <_ZN8Odometer11broadcastTfEN3ros4TimeE+0x80>)
 8005c48:	4807      	ldr	r0, [pc, #28]	; (8005c68 <_ZN8Odometer11broadcastTfEN3ros4TimeE+0x90>)
 8005c4a:	f7ff fd72 	bl	8005732 <_ZN2tf20TransformBroadcaster13sendTransformERN13geometry_msgs16TransformStampedE>
  }
 8005c4e:	bf00      	nop
 8005c50:	3728      	adds	r7, #40	; 0x28
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	200028fc 	.word	0x200028fc
 8005c5c:	2000001c 	.word	0x2000001c
 8005c60:	20000010 	.word	0x20000010
 8005c64:	2000292c 	.word	0x2000292c
 8005c68:	20002940 	.word	0x20002940
 8005c6c:	00000000 	.word	0x00000000

08005c70 <_ZN8Odometer15normalize_angleEf>:


  float Odometer::normalize_angle(float angle) {
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	ed87 0a00 	vstr	s0, [r7]
    while (angle > M_PI) {
 8005c7c:	6838      	ldr	r0, [r7, #0]
 8005c7e:	f7fa fc13 	bl	80004a8 <__aeabi_f2d>
 8005c82:	a31f      	add	r3, pc, #124	; (adr r3, 8005d00 <_ZN8Odometer15normalize_angleEf+0x90>)
 8005c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c88:	f7fa fef6 	bl	8000a78 <__aeabi_dcmpgt>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d100      	bne.n	8005c94 <_ZN8Odometer15normalize_angleEf+0x24>
 8005c92:	e010      	b.n	8005cb6 <_ZN8Odometer15normalize_angleEf+0x46>
      angle -= 2.0 * M_PI;
 8005c94:	6838      	ldr	r0, [r7, #0]
 8005c96:	f7fa fc07 	bl	80004a8 <__aeabi_f2d>
 8005c9a:	a31b      	add	r3, pc, #108	; (adr r3, 8005d08 <_ZN8Odometer15normalize_angleEf+0x98>)
 8005c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca0:	f7fa faa2 	bl	80001e8 <__aeabi_dsub>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	4610      	mov	r0, r2
 8005caa:	4619      	mov	r1, r3
 8005cac:	f7fa ff16 	bl	8000adc <__aeabi_d2f>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	603b      	str	r3, [r7, #0]
    while (angle > M_PI) {
 8005cb4:	e7e2      	b.n	8005c7c <_ZN8Odometer15normalize_angleEf+0xc>
    }
    while (angle < -M_PI) {
 8005cb6:	6838      	ldr	r0, [r7, #0]
 8005cb8:	f7fa fbf6 	bl	80004a8 <__aeabi_f2d>
 8005cbc:	a314      	add	r3, pc, #80	; (adr r3, 8005d10 <_ZN8Odometer15normalize_angleEf+0xa0>)
 8005cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc2:	f7fa febb 	bl	8000a3c <__aeabi_dcmplt>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d010      	beq.n	8005cee <_ZN8Odometer15normalize_angleEf+0x7e>
      angle += 2.0 * M_PI;
 8005ccc:	6838      	ldr	r0, [r7, #0]
 8005cce:	f7fa fbeb 	bl	80004a8 <__aeabi_f2d>
 8005cd2:	a30d      	add	r3, pc, #52	; (adr r3, 8005d08 <_ZN8Odometer15normalize_angleEf+0x98>)
 8005cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd8:	f7fa fa88 	bl	80001ec <__adddf3>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	460b      	mov	r3, r1
 8005ce0:	4610      	mov	r0, r2
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	f7fa fefa 	bl	8000adc <__aeabi_d2f>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	603b      	str	r3, [r7, #0]
    while (angle < -M_PI) {
 8005cec:	e7e3      	b.n	8005cb6 <_ZN8Odometer15normalize_angleEf+0x46>
    }
    return angle;
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	ee07 3a90 	vmov	s15, r3
  }
 8005cf4:	eeb0 0a67 	vmov.f32	s0, s15
 8005cf8:	3708      	adds	r7, #8
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	54442d18 	.word	0x54442d18
 8005d04:	400921fb 	.word	0x400921fb
 8005d08:	54442d18 	.word	0x54442d18
 8005d0c:	401921fb 	.word	0x401921fb
 8005d10:	54442d18 	.word	0x54442d18
 8005d14:	c00921fb 	.word	0xc00921fb

08005d18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8005d22:	2300      	movs	r3, #0
 8005d24:	60fb      	str	r3, [r7, #12]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2b18      	cmp	r3, #24
 8005d2a:	dc1e      	bgt.n	8005d6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	4413      	add	r3, r2
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d111      	bne.n	8005d62 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4413      	add	r3, r2
 8005d4a:	683a      	ldr	r2, [r7, #0]
 8005d4c:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	60da      	str	r2, [r3, #12]
        return true;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e004      	b.n	8005d6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	3301      	adds	r3, #1
 8005d66:	60fb      	str	r3, [r7, #12]
 8005d68:	e7dd      	b.n	8005d26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE+0xe>
    return false;
 8005d6a:	2300      	movs	r3, #0
  }
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3714      	adds	r7, #20
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <_Z41__static_initialization_and_destruction_0ii>:
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d113      	bne.n	8005db0 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d10e      	bne.n	8005db0 <_Z41__static_initialization_and_destruction_0ii+0x38>
nav_msgs::Odometry odomMsg;
 8005d92:	4809      	ldr	r0, [pc, #36]	; (8005db8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8005d94:	f7ff f92e 	bl	8004ff4 <_ZN8nav_msgs8OdometryC1Ev>
ros::Publisher     odom_pub(odom, &odomMsg);
 8005d98:	2300      	movs	r3, #0
 8005d9a:	4a07      	ldr	r2, [pc, #28]	; (8005db8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8005d9c:	4907      	ldr	r1, [pc, #28]	; (8005dbc <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8005d9e:	4808      	ldr	r0, [pc, #32]	; (8005dc0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8005da0:	f7ff fb78 	bl	8005494 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
geometry_msgs::TransformStamped t;
 8005da4:	4807      	ldr	r0, [pc, #28]	; (8005dc4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8005da6:	f7ff fa9d 	bl	80052e4 <_ZN13geometry_msgs16TransformStampedC1Ev>
tf::TransformBroadcaster tfBroadcaster;
 8005daa:	4807      	ldr	r0, [pc, #28]	; (8005dc8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8005dac:	f7ff fc9a 	bl	80056e4 <_ZN2tf20TransformBroadcasterC1Ev>
  }
 8005db0:	bf00      	nop
 8005db2:	3708      	adds	r7, #8
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	20002758 	.word	0x20002758
 8005dbc:	2000001c 	.word	0x2000001c
 8005dc0:	200028e8 	.word	0x200028e8
 8005dc4:	200028fc 	.word	0x200028fc
 8005dc8:	20002940 	.word	0x20002940

08005dcc <_GLOBAL__sub_I_base_link>:
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005dd4:	2001      	movs	r0, #1
 8005dd6:	f7ff ffcf 	bl	8005d78 <_Z41__static_initialization_and_destruction_0ii>
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	0000      	movs	r0, r0
	...

08005de0 <_ZN3PIDC1EPdS0_S0_dddii>:

/*Constructor (...)*********************************************************
 *    The parameters specified here are those for for which we can't set up
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b08a      	sub	sp, #40	; 0x28
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6278      	str	r0, [r7, #36]	; 0x24
 8005de8:	6239      	str	r1, [r7, #32]
 8005dea:	61fa      	str	r2, [r7, #28]
 8005dec:	61bb      	str	r3, [r7, #24]
 8005dee:	ed87 0b04 	vstr	d0, [r7, #16]
 8005df2:	ed87 1b02 	vstr	d1, [r7, #8]
 8005df6:	ed87 2b00 	vstr	d2, [r7]
        double Kp, double Ki, double Kd, int POn, int ControllerDirection)
{
    myOutput = Output;
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfc:	69fa      	ldr	r2, [r7, #28]
 8005dfe:	63da      	str	r2, [r3, #60]	; 0x3c
    myInput = Input;
 8005e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e02:	6a3a      	ldr	r2, [r7, #32]
 8005e04:	639a      	str	r2, [r3, #56]	; 0x38
    mySetpoint = Setpoint;
 8005e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e08:	69ba      	ldr	r2, [r7, #24]
 8005e0a:	641a      	str	r2, [r3, #64]	; 0x40
    inAuto = false;
 8005e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    PID::SetOutputLimits(0, 255);				//default output limit corresponds to
 8005e14:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8005e60 <_ZN3PIDC1EPdS0_S0_dddii+0x80>
 8005e18:	ed9f 0b13 	vldr	d0, [pc, #76]	; 8005e68 <_ZN3PIDC1EPdS0_S0_dddii+0x88>
 8005e1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e1e:	f000 fa22 	bl	8006266 <_ZN3PID15SetOutputLimitsEdd>
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
 8005e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e24:	2264      	movs	r2, #100	; 0x64
 8005e26:	659a      	str	r2, [r3, #88]	; 0x58

    PID::SetControllerDirection(ControllerDirection);
 8005e28:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005e2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e2c:	f000 fae5 	bl	80063fa <_ZN3PID22SetControllerDirectionEi>
    PID::SetTunings(Kp, Ki, Kd, POn);
 8005e30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e32:	ed97 2b00 	vldr	d2, [r7]
 8005e36:	ed97 1b02 	vldr	d1, [r7, #8]
 8005e3a:	ed97 0b04 	vldr	d0, [r7, #16]
 8005e3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e40:	f000 f930 	bl	80060a4 <_ZN3PID10SetTuningsEdddi>

    lastTime = tick-SampleTime;
 8005e44:	4b0a      	ldr	r3, [pc, #40]	; (8005e70 <_ZN3PIDC1EPdS0_S0_dddii+0x90>)
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e4c:	1ad2      	subs	r2, r2, r3
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e50:	645a      	str	r2, [r3, #68]	; 0x44
}
 8005e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e54:	4618      	mov	r0, r3
 8005e56:	3728      	adds	r7, #40	; 0x28
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	f3af 8000 	nop.w
 8005e60:	00000000 	.word	0x00000000
 8005e64:	406fe000 	.word	0x406fe000
	...
 8005e70:	20000470 	.word	0x20000470

08005e74 <_ZN3PIDC1EPdS0_S0_dddi>:
/*Constructor (...)*********************************************************
 *    To allow backwards compatability for v1.1, or for people that just want
 *    to use Proportional on Error without explicitly saying so
 ***************************************************************************/

PID::PID(double* Input, double* Output, double* Setpoint,
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b08c      	sub	sp, #48	; 0x30
 8005e78:	af02      	add	r7, sp, #8
 8005e7a:	6278      	str	r0, [r7, #36]	; 0x24
 8005e7c:	6239      	str	r1, [r7, #32]
 8005e7e:	61fa      	str	r2, [r7, #28]
 8005e80:	61bb      	str	r3, [r7, #24]
 8005e82:	ed87 0b04 	vstr	d0, [r7, #16]
 8005e86:	ed87 1b02 	vstr	d1, [r7, #8]
 8005e8a:	ed87 2b00 	vstr	d2, [r7]
        double Kp, double Ki, double Kd, int ControllerDirection)
    :PID::PID(Input, Output, Setpoint, Kp, Ki, Kd, P_ON_E, ControllerDirection)
 8005e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e90:	9301      	str	r3, [sp, #4]
 8005e92:	2301      	movs	r3, #1
 8005e94:	9300      	str	r3, [sp, #0]
 8005e96:	ed97 2b00 	vldr	d2, [r7]
 8005e9a:	ed97 1b02 	vldr	d1, [r7, #8]
 8005e9e:	ed97 0b04 	vldr	d0, [r7, #16]
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	69fa      	ldr	r2, [r7, #28]
 8005ea6:	6a39      	ldr	r1, [r7, #32]
 8005ea8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005eaa:	f7ff ff99 	bl	8005de0 <_ZN3PIDC1EPdS0_S0_dddii>
{

}
 8005eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3728      	adds	r7, #40	; 0x28
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <_ZN3PID7ComputeEv>:
 *   every time "void loop()" executes.  the function will decide for itself whether a new
 *   pid Output needs to be computed.  returns true when the output is computed,
 *   false when nothing has been done.
 **********************************************************************************/
bool PID::Compute()
{
 8005eb8:	b5b0      	push	{r4, r5, r7, lr}
 8005eba:	b08c      	sub	sp, #48	; 0x30
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
   if(!inAuto) return false;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005ec6:	f083 0301 	eor.w	r3, r3, #1
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d001      	beq.n	8005ed4 <_ZN3PID7ComputeEv+0x1c>
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	e0e0      	b.n	8006096 <_ZN3PID7ComputeEv+0x1de>
   unsigned long now = tick;
 8005ed4:	4b72      	ldr	r3, [pc, #456]	; (80060a0 <_ZN3PID7ComputeEv+0x1e8>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	627b      	str	r3, [r7, #36]	; 0x24
   unsigned long timeChange = (now - lastTime);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	623b      	str	r3, [r7, #32]
   if(timeChange>=SampleTime)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ee8:	6a3a      	ldr	r2, [r7, #32]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	f0c0 80d2 	bcc.w	8006094 <_ZN3PID7ComputeEv+0x1dc>
   {
      /*Compute all the working error variables*/
      double input = *myInput;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef8:	e9c7 2306 	strd	r2, r3, [r7, #24]
      double error = *mySetpoint - input;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f08:	f7fa f96e 	bl	80001e8 <__aeabi_dsub>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	460b      	mov	r3, r1
 8005f10:	e9c7 2304 	strd	r2, r3, [r7, #16]
      double dInput = (input - lastInput);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8005f1a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005f1e:	f7fa f963 	bl	80001e8 <__aeabi_dsub>
 8005f22:	4602      	mov	r2, r0
 8005f24:	460b      	mov	r3, r1
 8005f26:	e9c7 2302 	strd	r2, r3, [r7, #8]
      outputSum+= (ki * error);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8005f36:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005f3a:	f7fa fb0d 	bl	8000558 <__aeabi_dmul>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	460b      	mov	r3, r1
 8005f42:	4620      	mov	r0, r4
 8005f44:	4629      	mov	r1, r5
 8005f46:	f7fa f951 	bl	80001ec <__adddf3>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	6879      	ldr	r1, [r7, #4]
 8005f50:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

      /*Add Proportional on Measurement, if P_ON_M is specified*/
      if(!pOnE) outputSum-= kp * dInput;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8005f5a:	f083 0301 	eor.w	r3, r3, #1
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d014      	beq.n	8005f8e <_ZN3PID7ComputeEv+0xd6>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8005f70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f74:	f7fa faf0 	bl	8000558 <__aeabi_dmul>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	4620      	mov	r0, r4
 8005f7e:	4629      	mov	r1, r5
 8005f80:	f7fa f932 	bl	80001e8 <__aeabi_dsub>
 8005f84:	4602      	mov	r2, r0
 8005f86:	460b      	mov	r3, r1
 8005f88:	6879      	ldr	r1, [r7, #4]
 8005f8a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

      if(outputSum > outMax) outputSum= outMax;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8005f9a:	f7fa fd6d 	bl	8000a78 <__aeabi_dcmpgt>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d006      	beq.n	8005fb2 <_ZN3PID7ComputeEv+0xfa>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8005faa:	6879      	ldr	r1, [r7, #4]
 8005fac:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8005fb0:	e010      	b.n	8005fd4 <_ZN3PID7ComputeEv+0x11c>
      else if(outputSum < outMin) outputSum= outMin;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8005fbe:	f7fa fd3d 	bl	8000a3c <__aeabi_dcmplt>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d005      	beq.n	8005fd4 <_ZN3PID7ComputeEv+0x11c>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8005fce:	6879      	ldr	r1, [r7, #4]
 8005fd0:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

      /*Add Proportional on Error, if P_ON_E is specified*/
	   double output;
      if(pOnE) output = kp * error;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00b      	beq.n	8005ff6 <_ZN3PID7ComputeEv+0x13e>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005fe4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005fe8:	f7fa fab6 	bl	8000558 <__aeabi_dmul>
 8005fec:	4602      	mov	r2, r0
 8005fee:	460b      	mov	r3, r1
 8005ff0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8005ff4:	e005      	b.n	8006002 <_ZN3PID7ComputeEv+0x14a>
      else output = 0;
 8005ff6:	f04f 0200 	mov.w	r2, #0
 8005ffa:	f04f 0300 	mov.w	r3, #0
 8005ffe:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

      /*Compute Rest of PID Output*/
      output += outputSum - kd * dInput;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800600e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006012:	f7fa faa1 	bl	8000558 <__aeabi_dmul>
 8006016:	4602      	mov	r2, r0
 8006018:	460b      	mov	r3, r1
 800601a:	4620      	mov	r0, r4
 800601c:	4629      	mov	r1, r5
 800601e:	f7fa f8e3 	bl	80001e8 <__aeabi_dsub>
 8006022:	4602      	mov	r2, r0
 8006024:	460b      	mov	r3, r1
 8006026:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800602a:	f7fa f8df 	bl	80001ec <__adddf3>
 800602e:	4602      	mov	r2, r0
 8006030:	460b      	mov	r3, r1
 8006032:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	    if(output > outMax) output = outMax;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800603c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006040:	f7fa fd1a 	bl	8000a78 <__aeabi_dcmpgt>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d005      	beq.n	8006056 <_ZN3PID7ComputeEv+0x19e>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8006050:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8006054:	e00e      	b.n	8006074 <_ZN3PID7ComputeEv+0x1bc>
      else if(output < outMin) output = outMin;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800605c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006060:	f7fa fcec 	bl	8000a3c <__aeabi_dcmplt>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d004      	beq.n	8006074 <_ZN3PID7ComputeEv+0x1bc>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8006070:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	    *myOutput = output;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006078:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800607c:	e9c1 2300 	strd	r2, r3, [r1]

      /*Remember some variables for next time*/
      lastInput = input;
 8006080:	6879      	ldr	r1, [r7, #4]
 8006082:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006086:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
      lastTime = now;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800608e:	645a      	str	r2, [r3, #68]	; 0x44
	    return true;
 8006090:	2301      	movs	r3, #1
 8006092:	e000      	b.n	8006096 <_ZN3PID7ComputeEv+0x1de>
   }
   else return false;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3730      	adds	r7, #48	; 0x30
 800609a:	46bd      	mov	sp, r7
 800609c:	bdb0      	pop	{r4, r5, r7, pc}
 800609e:	bf00      	nop
 80060a0:	20000470 	.word	0x20000470

080060a4 <_ZN3PID10SetTuningsEdddi>:
 * This function allows the controller's dynamic performance to be adjusted.
 * it's called automatically from the constructor, but tunings can also
 * be adjusted on the fly during normal operation
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b08a      	sub	sp, #40	; 0x28
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	61f8      	str	r0, [r7, #28]
 80060ac:	ed87 0b04 	vstr	d0, [r7, #16]
 80060b0:	ed87 1b02 	vstr	d1, [r7, #8]
 80060b4:	ed87 2b00 	vstr	d2, [r7]
 80060b8:	61b9      	str	r1, [r7, #24]
   if (Kp<0 || Ki<0 || Kd<0) return;
 80060ba:	f04f 0200 	mov.w	r2, #0
 80060be:	f04f 0300 	mov.w	r3, #0
 80060c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80060c6:	f7fa fcb9 	bl	8000a3c <__aeabi_dcmplt>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	f040 8089 	bne.w	80061e4 <_ZN3PID10SetTuningsEdddi+0x140>
 80060d2:	f04f 0200 	mov.w	r2, #0
 80060d6:	f04f 0300 	mov.w	r3, #0
 80060da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80060de:	f7fa fcad 	bl	8000a3c <__aeabi_dcmplt>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d17d      	bne.n	80061e4 <_ZN3PID10SetTuningsEdddi+0x140>
 80060e8:	f04f 0200 	mov.w	r2, #0
 80060ec:	f04f 0300 	mov.w	r3, #0
 80060f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060f4:	f7fa fca2 	bl	8000a3c <__aeabi_dcmplt>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d172      	bne.n	80061e4 <_ZN3PID10SetTuningsEdddi+0x140>

   pOn = POn;
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	69ba      	ldr	r2, [r7, #24]
 8006102:	635a      	str	r2, [r3, #52]	; 0x34
   pOnE = POn == P_ON_E;
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	2b01      	cmp	r3, #1
 8006108:	bf0c      	ite	eq
 800610a:	2301      	moveq	r3, #1
 800610c:	2300      	movne	r3, #0
 800610e:	b2da      	uxtb	r2, r3
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

   dispKp = Kp; dispKi = Ki; dispKd = Kd;
 8006116:	69f9      	ldr	r1, [r7, #28]
 8006118:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800611c:	e9c1 2300 	strd	r2, r3, [r1]
 8006120:	69f9      	ldr	r1, [r7, #28]
 8006122:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006126:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800612a:	69f9      	ldr	r1, [r7, #28]
 800612c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006130:	e9c1 2304 	strd	r2, r3, [r1, #16]

   double SampleTimeInSec = ((double)SampleTime)/1000;
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006138:	4618      	mov	r0, r3
 800613a:	f7fa f993 	bl	8000464 <__aeabi_ui2d>
 800613e:	f04f 0200 	mov.w	r2, #0
 8006142:	4b2a      	ldr	r3, [pc, #168]	; (80061ec <_ZN3PID10SetTuningsEdddi+0x148>)
 8006144:	f7fa fb32 	bl	80007ac <__aeabi_ddiv>
 8006148:	4602      	mov	r2, r0
 800614a:	460b      	mov	r3, r1
 800614c:	e9c7 2308 	strd	r2, r3, [r7, #32]
   kp = Kp;
 8006150:	69f9      	ldr	r1, [r7, #28]
 8006152:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006156:	e9c1 2306 	strd	r2, r3, [r1, #24]
   ki = Ki * SampleTimeInSec;
 800615a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800615e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006162:	f7fa f9f9 	bl	8000558 <__aeabi_dmul>
 8006166:	4602      	mov	r2, r0
 8006168:	460b      	mov	r3, r1
 800616a:	69f9      	ldr	r1, [r7, #28]
 800616c:	e9c1 2308 	strd	r2, r3, [r1, #32]
   kd = Kd / SampleTimeInSec;
 8006170:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006174:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006178:	f7fa fb18 	bl	80007ac <__aeabi_ddiv>
 800617c:	4602      	mov	r2, r0
 800617e:	460b      	mov	r3, r1
 8006180:	69f9      	ldr	r1, [r7, #28]
 8006182:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

  if(controllerDirection ==REVERSE)
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618a:	2b01      	cmp	r3, #1
 800618c:	d12b      	bne.n	80061e6 <_ZN3PID10SetTuningsEdddi+0x142>
   {
      kp = (0 - kp);
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006194:	f04f 0000 	mov.w	r0, #0
 8006198:	f04f 0100 	mov.w	r1, #0
 800619c:	f7fa f824 	bl	80001e8 <__aeabi_dsub>
 80061a0:	4602      	mov	r2, r0
 80061a2:	460b      	mov	r3, r1
 80061a4:	69f9      	ldr	r1, [r7, #28]
 80061a6:	e9c1 2306 	strd	r2, r3, [r1, #24]
      ki = (0 - ki);
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80061b0:	f04f 0000 	mov.w	r0, #0
 80061b4:	f04f 0100 	mov.w	r1, #0
 80061b8:	f7fa f816 	bl	80001e8 <__aeabi_dsub>
 80061bc:	4602      	mov	r2, r0
 80061be:	460b      	mov	r3, r1
 80061c0:	69f9      	ldr	r1, [r7, #28]
 80061c2:	e9c1 2308 	strd	r2, r3, [r1, #32]
      kd = (0 - kd);
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80061cc:	f04f 0000 	mov.w	r0, #0
 80061d0:	f04f 0100 	mov.w	r1, #0
 80061d4:	f7fa f808 	bl	80001e8 <__aeabi_dsub>
 80061d8:	4602      	mov	r2, r0
 80061da:	460b      	mov	r3, r1
 80061dc:	69f9      	ldr	r1, [r7, #28]
 80061de:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 80061e2:	e000      	b.n	80061e6 <_ZN3PID10SetTuningsEdddi+0x142>
   if (Kp<0 || Ki<0 || Kd<0) return;
 80061e4:	bf00      	nop
   }
}
 80061e6:	3728      	adds	r7, #40	; 0x28
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	408f4000 	.word	0x408f4000

080061f0 <_ZN3PID13SetSampleTimeEi>:

/* SetSampleTime(...) *********************************************************
 * sets the period, in Milliseconds, at which the calculation is performed
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
 80061f0:	b5b0      	push	{r4, r5, r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
   if (NewSampleTime > 0)
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	dd2e      	ble.n	800625e <_ZN3PID13SetSampleTimeEi+0x6e>
   {
      double ratio  = (double)NewSampleTime
 8006200:	6838      	ldr	r0, [r7, #0]
 8006202:	f7fa f93f 	bl	8000484 <__aeabi_i2d>
 8006206:	4604      	mov	r4, r0
 8006208:	460d      	mov	r5, r1
                      / (double)SampleTime;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800620e:	4618      	mov	r0, r3
 8006210:	f7fa f928 	bl	8000464 <__aeabi_ui2d>
 8006214:	4602      	mov	r2, r0
 8006216:	460b      	mov	r3, r1
      double ratio  = (double)NewSampleTime
 8006218:	4620      	mov	r0, r4
 800621a:	4629      	mov	r1, r5
 800621c:	f7fa fac6 	bl	80007ac <__aeabi_ddiv>
 8006220:	4602      	mov	r2, r0
 8006222:	460b      	mov	r3, r1
 8006224:	e9c7 2302 	strd	r2, r3, [r7, #8]
      ki *= ratio;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800622e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006232:	f7fa f991 	bl	8000558 <__aeabi_dmul>
 8006236:	4602      	mov	r2, r0
 8006238:	460b      	mov	r3, r1
 800623a:	6879      	ldr	r1, [r7, #4]
 800623c:	e9c1 2308 	strd	r2, r3, [r1, #32]
      kd /= ratio;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8006246:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800624a:	f7fa faaf 	bl	80007ac <__aeabi_ddiv>
 800624e:	4602      	mov	r2, r0
 8006250:	460b      	mov	r3, r1
 8006252:	6879      	ldr	r1, [r7, #4]
 8006254:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
      SampleTime = (unsigned long)NewSampleTime;
 8006258:	683a      	ldr	r2, [r7, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	659a      	str	r2, [r3, #88]	; 0x58
   }
}
 800625e:	bf00      	nop
 8006260:	3710      	adds	r7, #16
 8006262:	46bd      	mov	sp, r7
 8006264:	bdb0      	pop	{r4, r5, r7, pc}

08006266 <_ZN3PID15SetOutputLimitsEdd>:
 *  be doing a time window and will need 0-8000 or something.  or maybe they'll
 *  want to clamp it from 0-125.  who knows.  at any rate, that can all be done
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b086      	sub	sp, #24
 800626a:	af00      	add	r7, sp, #0
 800626c:	6178      	str	r0, [r7, #20]
 800626e:	ed87 0b02 	vstr	d0, [r7, #8]
 8006272:	ed87 1b00 	vstr	d1, [r7]
   if(Min >= Max) return;
 8006276:	e9d7 2300 	ldrd	r2, r3, [r7]
 800627a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800627e:	f7fa fbf1 	bl	8000a64 <__aeabi_dcmpge>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d159      	bne.n	800633c <_ZN3PID15SetOutputLimitsEdd+0xd6>
   outMin = Min;
 8006288:	6979      	ldr	r1, [r7, #20]
 800628a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800628e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
   outMax = Max;
 8006292:	6979      	ldr	r1, [r7, #20]
 8006294:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006298:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

   if(inAuto)
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d04b      	beq.n	800633e <_ZN3PID15SetOutputLimitsEdd+0xd8>
   {
	   if(*myOutput > outMax) *myOutput = outMax;
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80062b4:	f7fa fbe0 	bl	8000a78 <__aeabi_dcmpgt>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d007      	beq.n	80062ce <_ZN3PID15SetOutputLimitsEdd+0x68>
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80062c8:	e9c1 2300 	strd	r2, r3, [r1]
 80062cc:	e012      	b.n	80062f4 <_ZN3PID15SetOutputLimitsEdd+0x8e>
	   else if(*myOutput < outMin) *myOutput = outMin;
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80062dc:	f7fa fbae 	bl	8000a3c <__aeabi_dcmplt>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d006      	beq.n	80062f4 <_ZN3PID15SetOutputLimitsEdd+0x8e>
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80062f0:	e9c1 2300 	strd	r2, r3, [r1]

	   if(outputSum > outMax) outputSum= outMax;
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8006300:	f7fa fbba 	bl	8000a78 <__aeabi_dcmpgt>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d006      	beq.n	8006318 <_ZN3PID15SetOutputLimitsEdd+0xb2>
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8006310:	6979      	ldr	r1, [r7, #20]
 8006312:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8006316:	e012      	b.n	800633e <_ZN3PID15SetOutputLimitsEdd+0xd8>
	   else if(outputSum < outMin) outputSum= outMin;
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8006324:	f7fa fb8a 	bl	8000a3c <__aeabi_dcmplt>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d007      	beq.n	800633e <_ZN3PID15SetOutputLimitsEdd+0xd8>
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8006334:	6979      	ldr	r1, [r7, #20]
 8006336:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 800633a:	e000      	b.n	800633e <_ZN3PID15SetOutputLimitsEdd+0xd8>
   if(Min >= Max) return;
 800633c:	bf00      	nop
   }
}
 800633e:	3718      	adds	r7, #24
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <_ZN3PID7SetModeEi>:
 * Allows the controller Mode to be set to manual (0) or Automatic (non-zero)
 * when the transition from manual to auto occurs, the controller is
 * automatically initialized
 ******************************************************************************/
void PID::SetMode(int Mode)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
    bool newAuto = (Mode == AUTOMATIC);
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	2b01      	cmp	r3, #1
 8006352:	bf0c      	ite	eq
 8006354:	2301      	moveq	r3, #1
 8006356:	2300      	movne	r3, #0
 8006358:	73fb      	strb	r3, [r7, #15]
    if(newAuto && !inAuto)
 800635a:	7bfb      	ldrb	r3, [r7, #15]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00a      	beq.n	8006376 <_ZN3PID7SetModeEi+0x32>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006366:	f083 0301 	eor.w	r3, r3, #1
 800636a:	b2db      	uxtb	r3, r3
 800636c:	2b00      	cmp	r3, #0
 800636e:	d002      	beq.n	8006376 <_ZN3PID7SetModeEi+0x32>
    {  /*we just went from manual to auto*/
        PID::Initialize();
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 f808 	bl	8006386 <_ZN3PID10InitializeEv>
    }
    inAuto = newAuto;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	7bfa      	ldrb	r2, [r7, #15]
 800637a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
}
 800637e:	bf00      	nop
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <_ZN3PID10InitializeEv>:
/* Initialize()****************************************************************
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/
void PID::Initialize()
{
 8006386:	b580      	push	{r7, lr}
 8006388:	b082      	sub	sp, #8
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
   outputSum = *myOutput;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006396:	6879      	ldr	r1, [r7, #4]
 8006398:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
   lastInput = *myInput;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a4:	6879      	ldr	r1, [r7, #4]
 80063a6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
   if(outputSum > outMax) outputSum = outMax;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80063b6:	f7fa fb5f 	bl	8000a78 <__aeabi_dcmpgt>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d006      	beq.n	80063ce <_ZN3PID10InitializeEv+0x48>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80063c6:	6879      	ldr	r1, [r7, #4]
 80063c8:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
   else if(outputSum < outMin) outputSum = outMin;
}
 80063cc:	e011      	b.n	80063f2 <_ZN3PID10InitializeEv+0x6c>
   else if(outputSum < outMin) outputSum = outMin;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80063da:	f7fa fb2f 	bl	8000a3c <__aeabi_dcmplt>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d100      	bne.n	80063e6 <_ZN3PID10InitializeEv+0x60>
}
 80063e4:	e005      	b.n	80063f2 <_ZN3PID10InitializeEv+0x6c>
   else if(outputSum < outMin) outputSum = outMin;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80063ec:	6879      	ldr	r1, [r7, #4]
 80063ee:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 80063f2:	bf00      	nop
 80063f4:	3708      	adds	r7, #8
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <_ZN3PID22SetControllerDirectionEi>:
 * to +Input) or a REVERSE acting process(+Output leads to -Input.)  we need to
 * know which one, because otherwise we may increase the output when we should
 * be decreasing.  This is called from the constructor.
 ******************************************************************************/
void PID::SetControllerDirection(int Direction)
{
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b082      	sub	sp, #8
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
 8006402:	6039      	str	r1, [r7, #0]
   if(inAuto && Direction !=controllerDirection)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800640a:	2b00      	cmp	r3, #0
 800640c:	d02e      	beq.n	800646c <_ZN3PID22SetControllerDirectionEi+0x72>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006412:	683a      	ldr	r2, [r7, #0]
 8006414:	429a      	cmp	r2, r3
 8006416:	d029      	beq.n	800646c <_ZN3PID22SetControllerDirectionEi+0x72>
   {
	    kp = (0 - kp);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800641e:	f04f 0000 	mov.w	r0, #0
 8006422:	f04f 0100 	mov.w	r1, #0
 8006426:	f7f9 fedf 	bl	80001e8 <__aeabi_dsub>
 800642a:	4602      	mov	r2, r0
 800642c:	460b      	mov	r3, r1
 800642e:	6879      	ldr	r1, [r7, #4]
 8006430:	e9c1 2306 	strd	r2, r3, [r1, #24]
      ki = (0 - ki);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800643a:	f04f 0000 	mov.w	r0, #0
 800643e:	f04f 0100 	mov.w	r1, #0
 8006442:	f7f9 fed1 	bl	80001e8 <__aeabi_dsub>
 8006446:	4602      	mov	r2, r0
 8006448:	460b      	mov	r3, r1
 800644a:	6879      	ldr	r1, [r7, #4]
 800644c:	e9c1 2308 	strd	r2, r3, [r1, #32]
      kd = (0 - kd);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8006456:	f04f 0000 	mov.w	r0, #0
 800645a:	f04f 0100 	mov.w	r1, #0
 800645e:	f7f9 fec3 	bl	80001e8 <__aeabi_dsub>
 8006462:	4602      	mov	r2, r0
 8006464:	460b      	mov	r3, r1
 8006466:	6879      	ldr	r1, [r7, #4]
 8006468:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
   }
   controllerDirection = Direction;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	683a      	ldr	r2, [r7, #0]
 8006470:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006472:	bf00      	nop
 8006474:	3708      	adds	r7, #8
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
	...

0800647c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006482:	2300      	movs	r3, #0
 8006484:	607b      	str	r3, [r7, #4]
 8006486:	4b12      	ldr	r3, [pc, #72]	; (80064d0 <HAL_MspInit+0x54>)
 8006488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800648a:	4a11      	ldr	r2, [pc, #68]	; (80064d0 <HAL_MspInit+0x54>)
 800648c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006490:	6453      	str	r3, [r2, #68]	; 0x44
 8006492:	4b0f      	ldr	r3, [pc, #60]	; (80064d0 <HAL_MspInit+0x54>)
 8006494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800649a:	607b      	str	r3, [r7, #4]
 800649c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800649e:	2300      	movs	r3, #0
 80064a0:	603b      	str	r3, [r7, #0]
 80064a2:	4b0b      	ldr	r3, [pc, #44]	; (80064d0 <HAL_MspInit+0x54>)
 80064a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a6:	4a0a      	ldr	r2, [pc, #40]	; (80064d0 <HAL_MspInit+0x54>)
 80064a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064ac:	6413      	str	r3, [r2, #64]	; 0x40
 80064ae:	4b08      	ldr	r3, [pc, #32]	; (80064d0 <HAL_MspInit+0x54>)
 80064b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064b6:	603b      	str	r3, [r7, #0]
 80064b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80064ba:	2200      	movs	r2, #0
 80064bc:	210f      	movs	r1, #15
 80064be:	f06f 0001 	mvn.w	r0, #1
 80064c2:	f001 faf5 	bl	8007ab0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80064c6:	bf00      	nop
 80064c8:	3708      	adds	r7, #8
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	40023800 	.word	0x40023800

080064d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b08e      	sub	sp, #56	; 0x38
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80064dc:	2300      	movs	r3, #0
 80064de:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80064e0:	2300      	movs	r3, #0
 80064e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80064e4:	2300      	movs	r3, #0
 80064e6:	60fb      	str	r3, [r7, #12]
 80064e8:	4b33      	ldr	r3, [pc, #204]	; (80065b8 <HAL_InitTick+0xe4>)
 80064ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ec:	4a32      	ldr	r2, [pc, #200]	; (80065b8 <HAL_InitTick+0xe4>)
 80064ee:	f043 0310 	orr.w	r3, r3, #16
 80064f2:	6413      	str	r3, [r2, #64]	; 0x40
 80064f4:	4b30      	ldr	r3, [pc, #192]	; (80065b8 <HAL_InitTick+0xe4>)
 80064f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f8:	f003 0310 	and.w	r3, r3, #16
 80064fc:	60fb      	str	r3, [r7, #12]
 80064fe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006500:	f107 0210 	add.w	r2, r7, #16
 8006504:	f107 0314 	add.w	r3, r7, #20
 8006508:	4611      	mov	r1, r2
 800650a:	4618      	mov	r0, r3
 800650c:	f002 fd4a 	bl	8008fa4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8006510:	6a3b      	ldr	r3, [r7, #32]
 8006512:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8006514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006516:	2b00      	cmp	r3, #0
 8006518:	d103      	bne.n	8006522 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800651a:	f002 fd1b 	bl	8008f54 <HAL_RCC_GetPCLK1Freq>
 800651e:	6378      	str	r0, [r7, #52]	; 0x34
 8006520:	e004      	b.n	800652c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8006522:	f002 fd17 	bl	8008f54 <HAL_RCC_GetPCLK1Freq>
 8006526:	4603      	mov	r3, r0
 8006528:	005b      	lsls	r3, r3, #1
 800652a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800652c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800652e:	4a23      	ldr	r2, [pc, #140]	; (80065bc <HAL_InitTick+0xe8>)
 8006530:	fba2 2303 	umull	r2, r3, r2, r3
 8006534:	0c9b      	lsrs	r3, r3, #18
 8006536:	3b01      	subs	r3, #1
 8006538:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800653a:	4b21      	ldr	r3, [pc, #132]	; (80065c0 <HAL_InitTick+0xec>)
 800653c:	4a21      	ldr	r2, [pc, #132]	; (80065c4 <HAL_InitTick+0xf0>)
 800653e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8006540:	4b1f      	ldr	r3, [pc, #124]	; (80065c0 <HAL_InitTick+0xec>)
 8006542:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006546:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8006548:	4a1d      	ldr	r2, [pc, #116]	; (80065c0 <HAL_InitTick+0xec>)
 800654a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800654e:	4b1c      	ldr	r3, [pc, #112]	; (80065c0 <HAL_InitTick+0xec>)
 8006550:	2200      	movs	r2, #0
 8006552:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006554:	4b1a      	ldr	r3, [pc, #104]	; (80065c0 <HAL_InitTick+0xec>)
 8006556:	2200      	movs	r2, #0
 8006558:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800655a:	4b19      	ldr	r3, [pc, #100]	; (80065c0 <HAL_InitTick+0xec>)
 800655c:	2200      	movs	r2, #0
 800655e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8006560:	4817      	ldr	r0, [pc, #92]	; (80065c0 <HAL_InitTick+0xec>)
 8006562:	f002 fd51 	bl	8009008 <HAL_TIM_Base_Init>
 8006566:	4603      	mov	r3, r0
 8006568:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800656c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006570:	2b00      	cmp	r3, #0
 8006572:	d11b      	bne.n	80065ac <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8006574:	4812      	ldr	r0, [pc, #72]	; (80065c0 <HAL_InitTick+0xec>)
 8006576:	f002 fd97 	bl	80090a8 <HAL_TIM_Base_Start_IT>
 800657a:	4603      	mov	r3, r0
 800657c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8006580:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006584:	2b00      	cmp	r3, #0
 8006586:	d111      	bne.n	80065ac <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006588:	2036      	movs	r0, #54	; 0x36
 800658a:	f001 faad 	bl	8007ae8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2b0f      	cmp	r3, #15
 8006592:	d808      	bhi.n	80065a6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8006594:	2200      	movs	r2, #0
 8006596:	6879      	ldr	r1, [r7, #4]
 8006598:	2036      	movs	r0, #54	; 0x36
 800659a:	f001 fa89 	bl	8007ab0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800659e:	4a0a      	ldr	r2, [pc, #40]	; (80065c8 <HAL_InitTick+0xf4>)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6013      	str	r3, [r2, #0]
 80065a4:	e002      	b.n	80065ac <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80065ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3738      	adds	r7, #56	; 0x38
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	40023800 	.word	0x40023800
 80065bc:	431bde83 	.word	0x431bde83
 80065c0:	200029a4 	.word	0x200029a4
 80065c4:	40001000 	.word	0x40001000
 80065c8:	20000028 	.word	0x20000028

080065cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80065cc:	b480      	push	{r7}
 80065ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80065d0:	e7fe      	b.n	80065d0 <NMI_Handler+0x4>

080065d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80065d2:	b480      	push	{r7}
 80065d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80065d6:	e7fe      	b.n	80065d6 <HardFault_Handler+0x4>

080065d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80065d8:	b480      	push	{r7}
 80065da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80065dc:	e7fe      	b.n	80065dc <MemManage_Handler+0x4>

080065de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80065de:	b480      	push	{r7}
 80065e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80065e2:	e7fe      	b.n	80065e2 <BusFault_Handler+0x4>

080065e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80065e4:	b480      	push	{r7}
 80065e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80065e8:	e7fe      	b.n	80065e8 <UsageFault_Handler+0x4>

080065ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80065ea:	b480      	push	{r7}
 80065ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80065ee:	bf00      	nop
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80065fc:	4802      	ldr	r0, [pc, #8]	; (8006608 <DMA1_Stream0_IRQHandler+0x10>)
 80065fe:	f001 fc19 	bl	8007e34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8006602:	bf00      	nop
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	20002e2c 	.word	0x20002e2c

0800660c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8006610:	4802      	ldr	r0, [pc, #8]	; (800661c <DMA1_Stream2_IRQHandler+0x10>)
 8006612:	f001 fc0f 	bl	8007e34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8006616:	bf00      	nop
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	20002dcc 	.word	0x20002dcc

08006620 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006624:	4802      	ldr	r0, [pc, #8]	; (8006630 <DMA1_Stream5_IRQHandler+0x10>)
 8006626:	f001 fc05 	bl	8007e34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800662a:	bf00      	nop
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	20002eec 	.word	0x20002eec

08006634 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006638:	4802      	ldr	r0, [pc, #8]	; (8006644 <TIM1_CC_IRQHandler+0x10>)
 800663a:	f003 f81b 	bl	8009674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800663e:	bf00      	nop
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	200029f0 	.word	0x200029f0

08006648 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800664c:	4802      	ldr	r0, [pc, #8]	; (8006658 <TIM2_IRQHandler+0x10>)
 800664e:	f003 f811 	bl	8009674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006652:	bf00      	nop
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	20002a38 	.word	0x20002a38

0800665c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006660:	4802      	ldr	r0, [pc, #8]	; (800666c <TIM3_IRQHandler+0x10>)
 8006662:	f003 f807 	bl	8009674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006666:	bf00      	nop
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	20002a80 	.word	0x20002a80

08006670 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8006674:	4802      	ldr	r0, [pc, #8]	; (8006680 <TIM4_IRQHandler+0x10>)
 8006676:	f002 fffd 	bl	8009674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800667a:	bf00      	nop
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	20002ac8 	.word	0x20002ac8

08006684 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006688:	4802      	ldr	r0, [pc, #8]	; (8006694 <USART1_IRQHandler+0x10>)
 800668a:	f003 ff3f 	bl	800a50c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800668e:	bf00      	nop
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	20002d00 	.word	0x20002d00

08006698 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800669c:	4802      	ldr	r0, [pc, #8]	; (80066a8 <USART2_IRQHandler+0x10>)
 800669e:	f003 ff35 	bl	800a50c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80066a2:	bf00      	nop
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	20002d44 	.word	0x20002d44

080066ac <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80066b0:	4802      	ldr	r0, [pc, #8]	; (80066bc <TIM8_CC_IRQHandler+0x10>)
 80066b2:	f002 ffdf 	bl	8009674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80066b6:	bf00      	nop
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	20002b58 	.word	0x20002b58

080066c0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 80066c4:	4802      	ldr	r0, [pc, #8]	; (80066d0 <DMA1_Stream7_IRQHandler+0x10>)
 80066c6:	f001 fbb5 	bl	8007e34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80066ca:	bf00      	nop
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	20002e8c 	.word	0x20002e8c

080066d4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80066d8:	4802      	ldr	r0, [pc, #8]	; (80066e4 <UART4_IRQHandler+0x10>)
 80066da:	f003 ff17 	bl	800a50c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80066de:	bf00      	nop
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	20002c78 	.word	0x20002c78

080066e8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80066ec:	4802      	ldr	r0, [pc, #8]	; (80066f8 <UART5_IRQHandler+0x10>)
 80066ee:	f003 ff0d 	bl	800a50c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80066f2:	bf00      	nop
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	20002cbc 	.word	0x20002cbc

080066fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006700:	4802      	ldr	r0, [pc, #8]	; (800670c <TIM6_DAC_IRQHandler+0x10>)
 8006702:	f002 ffb7 	bl	8009674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006706:	bf00      	nop
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	200029a4 	.word	0x200029a4

08006710 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006714:	4802      	ldr	r0, [pc, #8]	; (8006720 <TIM7_IRQHandler+0x10>)
 8006716:	f002 ffad 	bl	8009674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800671a:	bf00      	nop
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	20002b10 	.word	0x20002b10

08006724 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006724:	b480      	push	{r7}
 8006726:	af00      	add	r7, sp, #0
  return 1;
 8006728:	2301      	movs	r3, #1
}
 800672a:	4618      	mov	r0, r3
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <_kill>:

int _kill(int pid, int sig)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800673e:	f008 f89d 	bl	800e87c <__errno>
 8006742:	4603      	mov	r3, r0
 8006744:	2216      	movs	r2, #22
 8006746:	601a      	str	r2, [r3, #0]
  return -1;
 8006748:	f04f 33ff 	mov.w	r3, #4294967295
}
 800674c:	4618      	mov	r0, r3
 800674e:	3708      	adds	r7, #8
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <_exit>:

void _exit (int status)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800675c:	f04f 31ff 	mov.w	r1, #4294967295
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f7ff ffe7 	bl	8006734 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006766:	e7fe      	b.n	8006766 <_exit+0x12>

08006768 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b086      	sub	sp, #24
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006770:	4a14      	ldr	r2, [pc, #80]	; (80067c4 <_sbrk+0x5c>)
 8006772:	4b15      	ldr	r3, [pc, #84]	; (80067c8 <_sbrk+0x60>)
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800677c:	4b13      	ldr	r3, [pc, #76]	; (80067cc <_sbrk+0x64>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d102      	bne.n	800678a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006784:	4b11      	ldr	r3, [pc, #68]	; (80067cc <_sbrk+0x64>)
 8006786:	4a12      	ldr	r2, [pc, #72]	; (80067d0 <_sbrk+0x68>)
 8006788:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800678a:	4b10      	ldr	r3, [pc, #64]	; (80067cc <_sbrk+0x64>)
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4413      	add	r3, r2
 8006792:	693a      	ldr	r2, [r7, #16]
 8006794:	429a      	cmp	r2, r3
 8006796:	d207      	bcs.n	80067a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006798:	f008 f870 	bl	800e87c <__errno>
 800679c:	4603      	mov	r3, r0
 800679e:	220c      	movs	r2, #12
 80067a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80067a2:	f04f 33ff 	mov.w	r3, #4294967295
 80067a6:	e009      	b.n	80067bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80067a8:	4b08      	ldr	r3, [pc, #32]	; (80067cc <_sbrk+0x64>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80067ae:	4b07      	ldr	r3, [pc, #28]	; (80067cc <_sbrk+0x64>)
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4413      	add	r3, r2
 80067b6:	4a05      	ldr	r2, [pc, #20]	; (80067cc <_sbrk+0x64>)
 80067b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80067ba:	68fb      	ldr	r3, [r7, #12]
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3718      	adds	r7, #24
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	20020000 	.word	0x20020000
 80067c8:	00000400 	.word	0x00000400
 80067cc:	200029ec 	.word	0x200029ec
 80067d0:	20006cb8 	.word	0x20006cb8

080067d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80067d4:	b480      	push	{r7}
 80067d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80067d8:	4b06      	ldr	r3, [pc, #24]	; (80067f4 <SystemInit+0x20>)
 80067da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067de:	4a05      	ldr	r2, [pc, #20]	; (80067f4 <SystemInit+0x20>)
 80067e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80067e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80067e8:	bf00      	nop
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop
 80067f4:	e000ed00 	.word	0xe000ed00

080067f8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim12;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b08c      	sub	sp, #48	; 0x30
 80067fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80067fe:	f107 030c 	add.w	r3, r7, #12
 8006802:	2224      	movs	r2, #36	; 0x24
 8006804:	2100      	movs	r1, #0
 8006806:	4618      	mov	r0, r3
 8006808:	f008 f872 	bl	800e8f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800680c:	1d3b      	adds	r3, r7, #4
 800680e:	2200      	movs	r2, #0
 8006810:	601a      	str	r2, [r3, #0]
 8006812:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006814:	4b22      	ldr	r3, [pc, #136]	; (80068a0 <MX_TIM1_Init+0xa8>)
 8006816:	4a23      	ldr	r2, [pc, #140]	; (80068a4 <MX_TIM1_Init+0xac>)
 8006818:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800681a:	4b21      	ldr	r3, [pc, #132]	; (80068a0 <MX_TIM1_Init+0xa8>)
 800681c:	2200      	movs	r2, #0
 800681e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006820:	4b1f      	ldr	r3, [pc, #124]	; (80068a0 <MX_TIM1_Init+0xa8>)
 8006822:	2200      	movs	r2, #0
 8006824:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8006826:	4b1e      	ldr	r3, [pc, #120]	; (80068a0 <MX_TIM1_Init+0xa8>)
 8006828:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800682c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800682e:	4b1c      	ldr	r3, [pc, #112]	; (80068a0 <MX_TIM1_Init+0xa8>)
 8006830:	2200      	movs	r2, #0
 8006832:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006834:	4b1a      	ldr	r3, [pc, #104]	; (80068a0 <MX_TIM1_Init+0xa8>)
 8006836:	2200      	movs	r2, #0
 8006838:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800683a:	4b19      	ldr	r3, [pc, #100]	; (80068a0 <MX_TIM1_Init+0xa8>)
 800683c:	2200      	movs	r2, #0
 800683e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8006840:	2301      	movs	r3, #1
 8006842:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006844:	2300      	movs	r3, #0
 8006846:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006848:	2301      	movs	r3, #1
 800684a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800684c:	2300      	movs	r3, #0
 800684e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006850:	2300      	movs	r3, #0
 8006852:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006854:	2300      	movs	r3, #0
 8006856:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006858:	2301      	movs	r3, #1
 800685a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800685c:	2300      	movs	r3, #0
 800685e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006860:	2300      	movs	r3, #0
 8006862:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8006864:	f107 030c 	add.w	r3, r7, #12
 8006868:	4619      	mov	r1, r3
 800686a:	480d      	ldr	r0, [pc, #52]	; (80068a0 <MX_TIM1_Init+0xa8>)
 800686c:	f002 fdae 	bl	80093cc <HAL_TIM_Encoder_Init>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d001      	beq.n	800687a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8006876:	f7fb fb17 	bl	8001ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800687a:	2300      	movs	r3, #0
 800687c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800687e:	2300      	movs	r3, #0
 8006880:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006882:	1d3b      	adds	r3, r7, #4
 8006884:	4619      	mov	r1, r3
 8006886:	4806      	ldr	r0, [pc, #24]	; (80068a0 <MX_TIM1_Init+0xa8>)
 8006888:	f003 fcb4 	bl	800a1f4 <HAL_TIMEx_MasterConfigSynchronization>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d001      	beq.n	8006896 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8006892:	f7fb fb09 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8006896:	bf00      	nop
 8006898:	3730      	adds	r7, #48	; 0x30
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	200029f0 	.word	0x200029f0
 80068a4:	40010000 	.word	0x40010000

080068a8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b08c      	sub	sp, #48	; 0x30
 80068ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80068ae:	f107 030c 	add.w	r3, r7, #12
 80068b2:	2224      	movs	r2, #36	; 0x24
 80068b4:	2100      	movs	r1, #0
 80068b6:	4618      	mov	r0, r3
 80068b8:	f008 f81a 	bl	800e8f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80068bc:	1d3b      	adds	r3, r7, #4
 80068be:	2200      	movs	r2, #0
 80068c0:	601a      	str	r2, [r3, #0]
 80068c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80068c4:	4b21      	ldr	r3, [pc, #132]	; (800694c <MX_TIM2_Init+0xa4>)
 80068c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80068ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80068cc:	4b1f      	ldr	r3, [pc, #124]	; (800694c <MX_TIM2_Init+0xa4>)
 80068ce:	2200      	movs	r2, #0
 80068d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80068d2:	4b1e      	ldr	r3, [pc, #120]	; (800694c <MX_TIM2_Init+0xa4>)
 80068d4:	2200      	movs	r2, #0
 80068d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80068d8:	4b1c      	ldr	r3, [pc, #112]	; (800694c <MX_TIM2_Init+0xa4>)
 80068da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80068de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80068e0:	4b1a      	ldr	r3, [pc, #104]	; (800694c <MX_TIM2_Init+0xa4>)
 80068e2:	2200      	movs	r2, #0
 80068e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80068e6:	4b19      	ldr	r3, [pc, #100]	; (800694c <MX_TIM2_Init+0xa4>)
 80068e8:	2200      	movs	r2, #0
 80068ea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80068ec:	2301      	movs	r3, #1
 80068ee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80068f0:	2300      	movs	r3, #0
 80068f2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80068f4:	2301      	movs	r3, #1
 80068f6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80068f8:	2300      	movs	r3, #0
 80068fa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80068fc:	2300      	movs	r3, #0
 80068fe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006900:	2300      	movs	r3, #0
 8006902:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006904:	2301      	movs	r3, #1
 8006906:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006908:	2300      	movs	r3, #0
 800690a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800690c:	2300      	movs	r3, #0
 800690e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8006910:	f107 030c 	add.w	r3, r7, #12
 8006914:	4619      	mov	r1, r3
 8006916:	480d      	ldr	r0, [pc, #52]	; (800694c <MX_TIM2_Init+0xa4>)
 8006918:	f002 fd58 	bl	80093cc <HAL_TIM_Encoder_Init>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d001      	beq.n	8006926 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8006922:	f7fb fac1 	bl	8001ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006926:	2300      	movs	r3, #0
 8006928:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800692a:	2300      	movs	r3, #0
 800692c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800692e:	1d3b      	adds	r3, r7, #4
 8006930:	4619      	mov	r1, r3
 8006932:	4806      	ldr	r0, [pc, #24]	; (800694c <MX_TIM2_Init+0xa4>)
 8006934:	f003 fc5e 	bl	800a1f4 <HAL_TIMEx_MasterConfigSynchronization>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d001      	beq.n	8006942 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800693e:	f7fb fab3 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006942:	bf00      	nop
 8006944:	3730      	adds	r7, #48	; 0x30
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	20002a38 	.word	0x20002a38

08006950 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b08c      	sub	sp, #48	; 0x30
 8006954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006956:	f107 030c 	add.w	r3, r7, #12
 800695a:	2224      	movs	r2, #36	; 0x24
 800695c:	2100      	movs	r1, #0
 800695e:	4618      	mov	r0, r3
 8006960:	f007 ffc6 	bl	800e8f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006964:	1d3b      	adds	r3, r7, #4
 8006966:	2200      	movs	r2, #0
 8006968:	601a      	str	r2, [r3, #0]
 800696a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800696c:	4b20      	ldr	r3, [pc, #128]	; (80069f0 <MX_TIM3_Init+0xa0>)
 800696e:	4a21      	ldr	r2, [pc, #132]	; (80069f4 <MX_TIM3_Init+0xa4>)
 8006970:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8006972:	4b1f      	ldr	r3, [pc, #124]	; (80069f0 <MX_TIM3_Init+0xa0>)
 8006974:	2200      	movs	r2, #0
 8006976:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006978:	4b1d      	ldr	r3, [pc, #116]	; (80069f0 <MX_TIM3_Init+0xa0>)
 800697a:	2200      	movs	r2, #0
 800697c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800697e:	4b1c      	ldr	r3, [pc, #112]	; (80069f0 <MX_TIM3_Init+0xa0>)
 8006980:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006984:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006986:	4b1a      	ldr	r3, [pc, #104]	; (80069f0 <MX_TIM3_Init+0xa0>)
 8006988:	2200      	movs	r2, #0
 800698a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800698c:	4b18      	ldr	r3, [pc, #96]	; (80069f0 <MX_TIM3_Init+0xa0>)
 800698e:	2200      	movs	r2, #0
 8006990:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8006992:	2301      	movs	r3, #1
 8006994:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006996:	2300      	movs	r3, #0
 8006998:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800699a:	2301      	movs	r3, #1
 800699c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800699e:	2300      	movs	r3, #0
 80069a0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80069a2:	2300      	movs	r3, #0
 80069a4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80069a6:	2300      	movs	r3, #0
 80069a8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80069aa:	2301      	movs	r3, #1
 80069ac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80069ae:	2300      	movs	r3, #0
 80069b0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80069b2:	2300      	movs	r3, #0
 80069b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80069b6:	f107 030c 	add.w	r3, r7, #12
 80069ba:	4619      	mov	r1, r3
 80069bc:	480c      	ldr	r0, [pc, #48]	; (80069f0 <MX_TIM3_Init+0xa0>)
 80069be:	f002 fd05 	bl	80093cc <HAL_TIM_Encoder_Init>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d001      	beq.n	80069cc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80069c8:	f7fb fa6e 	bl	8001ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80069cc:	2300      	movs	r3, #0
 80069ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80069d0:	2300      	movs	r3, #0
 80069d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80069d4:	1d3b      	adds	r3, r7, #4
 80069d6:	4619      	mov	r1, r3
 80069d8:	4805      	ldr	r0, [pc, #20]	; (80069f0 <MX_TIM3_Init+0xa0>)
 80069da:	f003 fc0b 	bl	800a1f4 <HAL_TIMEx_MasterConfigSynchronization>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d001      	beq.n	80069e8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80069e4:	f7fb fa60 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80069e8:	bf00      	nop
 80069ea:	3730      	adds	r7, #48	; 0x30
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	20002a80 	.word	0x20002a80
 80069f4:	40000400 	.word	0x40000400

080069f8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b08c      	sub	sp, #48	; 0x30
 80069fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80069fe:	f107 030c 	add.w	r3, r7, #12
 8006a02:	2224      	movs	r2, #36	; 0x24
 8006a04:	2100      	movs	r1, #0
 8006a06:	4618      	mov	r0, r3
 8006a08:	f007 ff72 	bl	800e8f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006a0c:	1d3b      	adds	r3, r7, #4
 8006a0e:	2200      	movs	r2, #0
 8006a10:	601a      	str	r2, [r3, #0]
 8006a12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8006a14:	4b20      	ldr	r3, [pc, #128]	; (8006a98 <MX_TIM4_Init+0xa0>)
 8006a16:	4a21      	ldr	r2, [pc, #132]	; (8006a9c <MX_TIM4_Init+0xa4>)
 8006a18:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8006a1a:	4b1f      	ldr	r3, [pc, #124]	; (8006a98 <MX_TIM4_Init+0xa0>)
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a20:	4b1d      	ldr	r3, [pc, #116]	; (8006a98 <MX_TIM4_Init+0xa0>)
 8006a22:	2200      	movs	r2, #0
 8006a24:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8006a26:	4b1c      	ldr	r3, [pc, #112]	; (8006a98 <MX_TIM4_Init+0xa0>)
 8006a28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a2c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006a2e:	4b1a      	ldr	r3, [pc, #104]	; (8006a98 <MX_TIM4_Init+0xa0>)
 8006a30:	2200      	movs	r2, #0
 8006a32:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006a34:	4b18      	ldr	r3, [pc, #96]	; (8006a98 <MX_TIM4_Init+0xa0>)
 8006a36:	2200      	movs	r2, #0
 8006a38:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006a42:	2301      	movs	r3, #1
 8006a44:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006a46:	2300      	movs	r3, #0
 8006a48:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006a52:	2301      	movs	r3, #1
 8006a54:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006a56:	2300      	movs	r3, #0
 8006a58:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8006a5e:	f107 030c 	add.w	r3, r7, #12
 8006a62:	4619      	mov	r1, r3
 8006a64:	480c      	ldr	r0, [pc, #48]	; (8006a98 <MX_TIM4_Init+0xa0>)
 8006a66:	f002 fcb1 	bl	80093cc <HAL_TIM_Encoder_Init>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d001      	beq.n	8006a74 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8006a70:	f7fb fa1a 	bl	8001ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006a74:	2300      	movs	r3, #0
 8006a76:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006a7c:	1d3b      	adds	r3, r7, #4
 8006a7e:	4619      	mov	r1, r3
 8006a80:	4805      	ldr	r0, [pc, #20]	; (8006a98 <MX_TIM4_Init+0xa0>)
 8006a82:	f003 fbb7 	bl	800a1f4 <HAL_TIMEx_MasterConfigSynchronization>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d001      	beq.n	8006a90 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8006a8c:	f7fb fa0c 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8006a90:	bf00      	nop
 8006a92:	3730      	adds	r7, #48	; 0x30
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	20002ac8 	.word	0x20002ac8
 8006a9c:	40000800 	.word	0x40000800

08006aa0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006aa6:	463b      	mov	r3, r7
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	601a      	str	r2, [r3, #0]
 8006aac:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8006aae:	4b15      	ldr	r3, [pc, #84]	; (8006b04 <MX_TIM7_Init+0x64>)
 8006ab0:	4a15      	ldr	r2, [pc, #84]	; (8006b08 <MX_TIM7_Init+0x68>)
 8006ab2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 4000-1;
 8006ab4:	4b13      	ldr	r3, [pc, #76]	; (8006b04 <MX_TIM7_Init+0x64>)
 8006ab6:	f640 729f 	movw	r2, #3999	; 0xf9f
 8006aba:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006abc:	4b11      	ldr	r3, [pc, #68]	; (8006b04 <MX_TIM7_Init+0x64>)
 8006abe:	2200      	movs	r2, #0
 8006ac0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 200-1;
 8006ac2:	4b10      	ldr	r3, [pc, #64]	; (8006b04 <MX_TIM7_Init+0x64>)
 8006ac4:	22c7      	movs	r2, #199	; 0xc7
 8006ac6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006ac8:	4b0e      	ldr	r3, [pc, #56]	; (8006b04 <MX_TIM7_Init+0x64>)
 8006aca:	2200      	movs	r2, #0
 8006acc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8006ace:	480d      	ldr	r0, [pc, #52]	; (8006b04 <MX_TIM7_Init+0x64>)
 8006ad0:	f002 fa9a 	bl	8009008 <HAL_TIM_Base_Init>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d001      	beq.n	8006ade <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8006ada:	f7fb f9e5 	bl	8001ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006ae6:	463b      	mov	r3, r7
 8006ae8:	4619      	mov	r1, r3
 8006aea:	4806      	ldr	r0, [pc, #24]	; (8006b04 <MX_TIM7_Init+0x64>)
 8006aec:	f003 fb82 	bl	800a1f4 <HAL_TIMEx_MasterConfigSynchronization>
 8006af0:	4603      	mov	r3, r0
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d001      	beq.n	8006afa <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8006af6:	f7fb f9d7 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8006afa:	bf00      	nop
 8006afc:	3708      	adds	r7, #8
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	20002b10 	.word	0x20002b10
 8006b08:	40001400 	.word	0x40001400

08006b0c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b08c      	sub	sp, #48	; 0x30
 8006b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006b12:	f107 030c 	add.w	r3, r7, #12
 8006b16:	2224      	movs	r2, #36	; 0x24
 8006b18:	2100      	movs	r1, #0
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f007 fee8 	bl	800e8f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006b20:	1d3b      	adds	r3, r7, #4
 8006b22:	2200      	movs	r2, #0
 8006b24:	601a      	str	r2, [r3, #0]
 8006b26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8006b28:	4b22      	ldr	r3, [pc, #136]	; (8006bb4 <MX_TIM8_Init+0xa8>)
 8006b2a:	4a23      	ldr	r2, [pc, #140]	; (8006bb8 <MX_TIM8_Init+0xac>)
 8006b2c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8006b2e:	4b21      	ldr	r3, [pc, #132]	; (8006bb4 <MX_TIM8_Init+0xa8>)
 8006b30:	2200      	movs	r2, #0
 8006b32:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b34:	4b1f      	ldr	r3, [pc, #124]	; (8006bb4 <MX_TIM8_Init+0xa8>)
 8006b36:	2200      	movs	r2, #0
 8006b38:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8006b3a:	4b1e      	ldr	r3, [pc, #120]	; (8006bb4 <MX_TIM8_Init+0xa8>)
 8006b3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006b40:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006b42:	4b1c      	ldr	r3, [pc, #112]	; (8006bb4 <MX_TIM8_Init+0xa8>)
 8006b44:	2200      	movs	r2, #0
 8006b46:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006b48:	4b1a      	ldr	r3, [pc, #104]	; (8006bb4 <MX_TIM8_Init+0xa8>)
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006b4e:	4b19      	ldr	r3, [pc, #100]	; (8006bb4 <MX_TIM8_Init+0xa8>)
 8006b50:	2200      	movs	r2, #0
 8006b52:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8006b54:	2301      	movs	r3, #1
 8006b56:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006b60:	2300      	movs	r3, #0
 8006b62:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006b64:	2300      	movs	r3, #0
 8006b66:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006b70:	2300      	movs	r3, #0
 8006b72:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006b74:	2300      	movs	r3, #0
 8006b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8006b78:	f107 030c 	add.w	r3, r7, #12
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	480d      	ldr	r0, [pc, #52]	; (8006bb4 <MX_TIM8_Init+0xa8>)
 8006b80:	f002 fc24 	bl	80093cc <HAL_TIM_Encoder_Init>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d001      	beq.n	8006b8e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8006b8a:	f7fb f98d 	bl	8001ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006b92:	2300      	movs	r3, #0
 8006b94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8006b96:	1d3b      	adds	r3, r7, #4
 8006b98:	4619      	mov	r1, r3
 8006b9a:	4806      	ldr	r0, [pc, #24]	; (8006bb4 <MX_TIM8_Init+0xa8>)
 8006b9c:	f003 fb2a 	bl	800a1f4 <HAL_TIMEx_MasterConfigSynchronization>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d001      	beq.n	8006baa <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8006ba6:	f7fb f97f 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8006baa:	bf00      	nop
 8006bac:	3730      	adds	r7, #48	; 0x30
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	20002b58 	.word	0x20002b58
 8006bb8:	40010400 	.word	0x40010400

08006bbc <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b08c      	sub	sp, #48	; 0x30
 8006bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006bc2:	f107 0320 	add.w	r3, r7, #32
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	601a      	str	r2, [r3, #0]
 8006bca:	605a      	str	r2, [r3, #4]
 8006bcc:	609a      	str	r2, [r3, #8]
 8006bce:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006bd0:	1d3b      	adds	r3, r7, #4
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	601a      	str	r2, [r3, #0]
 8006bd6:	605a      	str	r2, [r3, #4]
 8006bd8:	609a      	str	r2, [r3, #8]
 8006bda:	60da      	str	r2, [r3, #12]
 8006bdc:	611a      	str	r2, [r3, #16]
 8006bde:	615a      	str	r2, [r3, #20]
 8006be0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8006be2:	4b2a      	ldr	r3, [pc, #168]	; (8006c8c <MX_TIM9_Init+0xd0>)
 8006be4:	4a2a      	ldr	r2, [pc, #168]	; (8006c90 <MX_TIM9_Init+0xd4>)
 8006be6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 84-1;
 8006be8:	4b28      	ldr	r3, [pc, #160]	; (8006c8c <MX_TIM9_Init+0xd0>)
 8006bea:	2253      	movs	r2, #83	; 0x53
 8006bec:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006bee:	4b27      	ldr	r3, [pc, #156]	; (8006c8c <MX_TIM9_Init+0xd0>)
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 200-1;
 8006bf4:	4b25      	ldr	r3, [pc, #148]	; (8006c8c <MX_TIM9_Init+0xd0>)
 8006bf6:	22c7      	movs	r2, #199	; 0xc7
 8006bf8:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006bfa:	4b24      	ldr	r3, [pc, #144]	; (8006c8c <MX_TIM9_Init+0xd0>)
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006c00:	4b22      	ldr	r3, [pc, #136]	; (8006c8c <MX_TIM9_Init+0xd0>)
 8006c02:	2200      	movs	r2, #0
 8006c04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8006c06:	4821      	ldr	r0, [pc, #132]	; (8006c8c <MX_TIM9_Init+0xd0>)
 8006c08:	f002 f9fe 	bl	8009008 <HAL_TIM_Base_Init>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d001      	beq.n	8006c16 <MX_TIM9_Init+0x5a>
  {
    Error_Handler();
 8006c12:	f7fb f949 	bl	8001ea8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c1a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8006c1c:	f107 0320 	add.w	r3, r7, #32
 8006c20:	4619      	mov	r1, r3
 8006c22:	481a      	ldr	r0, [pc, #104]	; (8006c8c <MX_TIM9_Init+0xd0>)
 8006c24:	f002 fef0 	bl	8009a08 <HAL_TIM_ConfigClockSource>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d001      	beq.n	8006c32 <MX_TIM9_Init+0x76>
  {
    Error_Handler();
 8006c2e:	f7fb f93b 	bl	8001ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8006c32:	4816      	ldr	r0, [pc, #88]	; (8006c8c <MX_TIM9_Init+0xd0>)
 8006c34:	f002 faa8 	bl	8009188 <HAL_TIM_PWM_Init>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d001      	beq.n	8006c42 <MX_TIM9_Init+0x86>
  {
    Error_Handler();
 8006c3e:	f7fb f933 	bl	8001ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006c42:	2360      	movs	r3, #96	; 0x60
 8006c44:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006c46:	2300      	movs	r3, #0
 8006c48:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006c52:	1d3b      	adds	r3, r7, #4
 8006c54:	2200      	movs	r2, #0
 8006c56:	4619      	mov	r1, r3
 8006c58:	480c      	ldr	r0, [pc, #48]	; (8006c8c <MX_TIM9_Init+0xd0>)
 8006c5a:	f002 fe13 	bl	8009884 <HAL_TIM_PWM_ConfigChannel>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d001      	beq.n	8006c68 <MX_TIM9_Init+0xac>
  {
    Error_Handler();
 8006c64:	f7fb f920 	bl	8001ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006c68:	1d3b      	adds	r3, r7, #4
 8006c6a:	2204      	movs	r2, #4
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	4807      	ldr	r0, [pc, #28]	; (8006c8c <MX_TIM9_Init+0xd0>)
 8006c70:	f002 fe08 	bl	8009884 <HAL_TIM_PWM_ConfigChannel>
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d001      	beq.n	8006c7e <MX_TIM9_Init+0xc2>
  {
    Error_Handler();
 8006c7a:	f7fb f915 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8006c7e:	4803      	ldr	r0, [pc, #12]	; (8006c8c <MX_TIM9_Init+0xd0>)
 8006c80:	f000 fa66 	bl	8007150 <HAL_TIM_MspPostInit>

}
 8006c84:	bf00      	nop
 8006c86:	3730      	adds	r7, #48	; 0x30
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	20002ba0 	.word	0x20002ba0
 8006c90:	40014000 	.word	0x40014000

08006c94 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b08c      	sub	sp, #48	; 0x30
 8006c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006c9a:	f107 0320 	add.w	r3, r7, #32
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	601a      	str	r2, [r3, #0]
 8006ca2:	605a      	str	r2, [r3, #4]
 8006ca4:	609a      	str	r2, [r3, #8]
 8006ca6:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006ca8:	1d3b      	adds	r3, r7, #4
 8006caa:	2200      	movs	r2, #0
 8006cac:	601a      	str	r2, [r3, #0]
 8006cae:	605a      	str	r2, [r3, #4]
 8006cb0:	609a      	str	r2, [r3, #8]
 8006cb2:	60da      	str	r2, [r3, #12]
 8006cb4:	611a      	str	r2, [r3, #16]
 8006cb6:	615a      	str	r2, [r3, #20]
 8006cb8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8006cba:	4b2a      	ldr	r3, [pc, #168]	; (8006d64 <MX_TIM12_Init+0xd0>)
 8006cbc:	4a2a      	ldr	r2, [pc, #168]	; (8006d68 <MX_TIM12_Init+0xd4>)
 8006cbe:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 168-1;
 8006cc0:	4b28      	ldr	r3, [pc, #160]	; (8006d64 <MX_TIM12_Init+0xd0>)
 8006cc2:	22a7      	movs	r2, #167	; 0xa7
 8006cc4:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006cc6:	4b27      	ldr	r3, [pc, #156]	; (8006d64 <MX_TIM12_Init+0xd0>)
 8006cc8:	2200      	movs	r2, #0
 8006cca:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 200-1;
 8006ccc:	4b25      	ldr	r3, [pc, #148]	; (8006d64 <MX_TIM12_Init+0xd0>)
 8006cce:	22c7      	movs	r2, #199	; 0xc7
 8006cd0:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006cd2:	4b24      	ldr	r3, [pc, #144]	; (8006d64 <MX_TIM12_Init+0xd0>)
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006cd8:	4b22      	ldr	r3, [pc, #136]	; (8006d64 <MX_TIM12_Init+0xd0>)
 8006cda:	2200      	movs	r2, #0
 8006cdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8006cde:	4821      	ldr	r0, [pc, #132]	; (8006d64 <MX_TIM12_Init+0xd0>)
 8006ce0:	f002 f992 	bl	8009008 <HAL_TIM_Base_Init>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d001      	beq.n	8006cee <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 8006cea:	f7fb f8dd 	bl	8001ea8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006cee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006cf2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8006cf4:	f107 0320 	add.w	r3, r7, #32
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	481a      	ldr	r0, [pc, #104]	; (8006d64 <MX_TIM12_Init+0xd0>)
 8006cfc:	f002 fe84 	bl	8009a08 <HAL_TIM_ConfigClockSource>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d001      	beq.n	8006d0a <MX_TIM12_Init+0x76>
  {
    Error_Handler();
 8006d06:	f7fb f8cf 	bl	8001ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8006d0a:	4816      	ldr	r0, [pc, #88]	; (8006d64 <MX_TIM12_Init+0xd0>)
 8006d0c:	f002 fa3c 	bl	8009188 <HAL_TIM_PWM_Init>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d001      	beq.n	8006d1a <MX_TIM12_Init+0x86>
  {
    Error_Handler();
 8006d16:	f7fb f8c7 	bl	8001ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006d1a:	2360      	movs	r3, #96	; 0x60
 8006d1c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006d22:	2300      	movs	r3, #0
 8006d24:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006d26:	2300      	movs	r3, #0
 8006d28:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006d2a:	1d3b      	adds	r3, r7, #4
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	4619      	mov	r1, r3
 8006d30:	480c      	ldr	r0, [pc, #48]	; (8006d64 <MX_TIM12_Init+0xd0>)
 8006d32:	f002 fda7 	bl	8009884 <HAL_TIM_PWM_ConfigChannel>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d001      	beq.n	8006d40 <MX_TIM12_Init+0xac>
  {
    Error_Handler();
 8006d3c:	f7fb f8b4 	bl	8001ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006d40:	1d3b      	adds	r3, r7, #4
 8006d42:	2204      	movs	r2, #4
 8006d44:	4619      	mov	r1, r3
 8006d46:	4807      	ldr	r0, [pc, #28]	; (8006d64 <MX_TIM12_Init+0xd0>)
 8006d48:	f002 fd9c 	bl	8009884 <HAL_TIM_PWM_ConfigChannel>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d001      	beq.n	8006d56 <MX_TIM12_Init+0xc2>
  {
    Error_Handler();
 8006d52:	f7fb f8a9 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8006d56:	4803      	ldr	r0, [pc, #12]	; (8006d64 <MX_TIM12_Init+0xd0>)
 8006d58:	f000 f9fa 	bl	8007150 <HAL_TIM_MspPostInit>

}
 8006d5c:	bf00      	nop
 8006d5e:	3730      	adds	r7, #48	; 0x30
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	20002be8 	.word	0x20002be8
 8006d68:	40001800 	.word	0x40001800

08006d6c <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8006d70:	4b0d      	ldr	r3, [pc, #52]	; (8006da8 <MX_TIM13_Init+0x3c>)
 8006d72:	4a0e      	ldr	r2, [pc, #56]	; (8006dac <MX_TIM13_Init+0x40>)
 8006d74:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 168-1;
 8006d76:	4b0c      	ldr	r3, [pc, #48]	; (8006da8 <MX_TIM13_Init+0x3c>)
 8006d78:	22a7      	movs	r2, #167	; 0xa7
 8006d7a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006d7c:	4b0a      	ldr	r3, [pc, #40]	; (8006da8 <MX_TIM13_Init+0x3c>)
 8006d7e:	2200      	movs	r2, #0
 8006d80:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 200-1;
 8006d82:	4b09      	ldr	r3, [pc, #36]	; (8006da8 <MX_TIM13_Init+0x3c>)
 8006d84:	22c7      	movs	r2, #199	; 0xc7
 8006d86:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006d88:	4b07      	ldr	r3, [pc, #28]	; (8006da8 <MX_TIM13_Init+0x3c>)
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006d8e:	4b06      	ldr	r3, [pc, #24]	; (8006da8 <MX_TIM13_Init+0x3c>)
 8006d90:	2200      	movs	r2, #0
 8006d92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8006d94:	4804      	ldr	r0, [pc, #16]	; (8006da8 <MX_TIM13_Init+0x3c>)
 8006d96:	f002 f937 	bl	8009008 <HAL_TIM_Base_Init>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d001      	beq.n	8006da4 <MX_TIM13_Init+0x38>
  {
    Error_Handler();
 8006da0:	f7fb f882 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8006da4:	bf00      	nop
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	20002c30 	.word	0x20002c30
 8006dac:	40001c00 	.word	0x40001c00

08006db0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b092      	sub	sp, #72	; 0x48
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006db8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	601a      	str	r2, [r3, #0]
 8006dc0:	605a      	str	r2, [r3, #4]
 8006dc2:	609a      	str	r2, [r3, #8]
 8006dc4:	60da      	str	r2, [r3, #12]
 8006dc6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4aa1      	ldr	r2, [pc, #644]	; (8007054 <HAL_TIM_Encoder_MspInit+0x2a4>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d135      	bne.n	8006e3e <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	633b      	str	r3, [r7, #48]	; 0x30
 8006dd6:	4ba0      	ldr	r3, [pc, #640]	; (8007058 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dda:	4a9f      	ldr	r2, [pc, #636]	; (8007058 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006ddc:	f043 0301 	orr.w	r3, r3, #1
 8006de0:	6453      	str	r3, [r2, #68]	; 0x44
 8006de2:	4b9d      	ldr	r3, [pc, #628]	; (8007058 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006de6:	f003 0301 	and.w	r3, r3, #1
 8006dea:	633b      	str	r3, [r7, #48]	; 0x30
 8006dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006dee:	2300      	movs	r3, #0
 8006df0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006df2:	4b99      	ldr	r3, [pc, #612]	; (8007058 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df6:	4a98      	ldr	r2, [pc, #608]	; (8007058 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006df8:	f043 0310 	orr.w	r3, r3, #16
 8006dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8006dfe:	4b96      	ldr	r3, [pc, #600]	; (8007058 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e02:	f003 0310 	and.w	r3, r3, #16
 8006e06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8006e0a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8006e0e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e10:	2302      	movs	r3, #2
 8006e12:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e14:	2300      	movs	r3, #0
 8006e16:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006e20:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006e24:	4619      	mov	r1, r3
 8006e26:	488d      	ldr	r0, [pc, #564]	; (800705c <HAL_TIM_Encoder_MspInit+0x2ac>)
 8006e28:	f001 fa6e 	bl	8008308 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	2105      	movs	r1, #5
 8006e30:	201b      	movs	r0, #27
 8006e32:	f000 fe3d 	bl	8007ab0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8006e36:	201b      	movs	r0, #27
 8006e38:	f000 fe56 	bl	8007ae8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8006e3c:	e106      	b.n	800704c <HAL_TIM_Encoder_MspInit+0x29c>
  else if(tim_encoderHandle->Instance==TIM2)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e46:	d153      	bne.n	8006ef0 <HAL_TIM_Encoder_MspInit+0x140>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006e48:	2300      	movs	r3, #0
 8006e4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e4c:	4b82      	ldr	r3, [pc, #520]	; (8007058 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e50:	4a81      	ldr	r2, [pc, #516]	; (8007058 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006e52:	f043 0301 	orr.w	r3, r3, #1
 8006e56:	6413      	str	r3, [r2, #64]	; 0x40
 8006e58:	4b7f      	ldr	r3, [pc, #508]	; (8007058 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e5c:	f003 0301 	and.w	r3, r3, #1
 8006e60:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e64:	2300      	movs	r3, #0
 8006e66:	627b      	str	r3, [r7, #36]	; 0x24
 8006e68:	4b7b      	ldr	r3, [pc, #492]	; (8007058 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e6c:	4a7a      	ldr	r2, [pc, #488]	; (8007058 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006e6e:	f043 0301 	orr.w	r3, r3, #1
 8006e72:	6313      	str	r3, [r2, #48]	; 0x30
 8006e74:	4b78      	ldr	r3, [pc, #480]	; (8007058 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e78:	f003 0301 	and.w	r3, r3, #1
 8006e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e80:	2300      	movs	r3, #0
 8006e82:	623b      	str	r3, [r7, #32]
 8006e84:	4b74      	ldr	r3, [pc, #464]	; (8007058 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e88:	4a73      	ldr	r2, [pc, #460]	; (8007058 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006e8a:	f043 0302 	orr.w	r3, r3, #2
 8006e8e:	6313      	str	r3, [r2, #48]	; 0x30
 8006e90:	4b71      	ldr	r3, [pc, #452]	; (8007058 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e94:	f003 0302 	and.w	r3, r3, #2
 8006e98:	623b      	str	r3, [r7, #32]
 8006e9a:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006e9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ea0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ea2:	2302      	movs	r3, #2
 8006ea4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006eb2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	4869      	ldr	r0, [pc, #420]	; (8007060 <HAL_TIM_Encoder_MspInit+0x2b0>)
 8006eba:	f001 fa25 	bl	8008308 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006ebe:	2308      	movs	r3, #8
 8006ec0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ec2:	2302      	movs	r3, #2
 8006ec4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ed2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	4862      	ldr	r0, [pc, #392]	; (8007064 <HAL_TIM_Encoder_MspInit+0x2b4>)
 8006eda:	f001 fa15 	bl	8008308 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8006ede:	2200      	movs	r2, #0
 8006ee0:	2105      	movs	r1, #5
 8006ee2:	201c      	movs	r0, #28
 8006ee4:	f000 fde4 	bl	8007ab0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006ee8:	201c      	movs	r0, #28
 8006eea:	f000 fdfd 	bl	8007ae8 <HAL_NVIC_EnableIRQ>
}
 8006eee:	e0ad      	b.n	800704c <HAL_TIM_Encoder_MspInit+0x29c>
  else if(tim_encoderHandle->Instance==TIM3)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a5c      	ldr	r2, [pc, #368]	; (8007068 <HAL_TIM_Encoder_MspInit+0x2b8>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d134      	bne.n	8006f64 <HAL_TIM_Encoder_MspInit+0x1b4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006efa:	2300      	movs	r3, #0
 8006efc:	61fb      	str	r3, [r7, #28]
 8006efe:	4b56      	ldr	r3, [pc, #344]	; (8007058 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f02:	4a55      	ldr	r2, [pc, #340]	; (8007058 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006f04:	f043 0302 	orr.w	r3, r3, #2
 8006f08:	6413      	str	r3, [r2, #64]	; 0x40
 8006f0a:	4b53      	ldr	r3, [pc, #332]	; (8007058 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f0e:	f003 0302 	and.w	r3, r3, #2
 8006f12:	61fb      	str	r3, [r7, #28]
 8006f14:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f16:	2300      	movs	r3, #0
 8006f18:	61bb      	str	r3, [r7, #24]
 8006f1a:	4b4f      	ldr	r3, [pc, #316]	; (8007058 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f1e:	4a4e      	ldr	r2, [pc, #312]	; (8007058 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006f20:	f043 0301 	orr.w	r3, r3, #1
 8006f24:	6313      	str	r3, [r2, #48]	; 0x30
 8006f26:	4b4c      	ldr	r3, [pc, #304]	; (8007058 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f2a:	f003 0301 	and.w	r3, r3, #1
 8006f2e:	61bb      	str	r3, [r7, #24]
 8006f30:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006f32:	23c0      	movs	r3, #192	; 0xc0
 8006f34:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f36:	2302      	movs	r3, #2
 8006f38:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006f42:	2302      	movs	r3, #2
 8006f44:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f46:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	4844      	ldr	r0, [pc, #272]	; (8007060 <HAL_TIM_Encoder_MspInit+0x2b0>)
 8006f4e:	f001 f9db 	bl	8008308 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8006f52:	2200      	movs	r2, #0
 8006f54:	2105      	movs	r1, #5
 8006f56:	201d      	movs	r0, #29
 8006f58:	f000 fdaa 	bl	8007ab0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006f5c:	201d      	movs	r0, #29
 8006f5e:	f000 fdc3 	bl	8007ae8 <HAL_NVIC_EnableIRQ>
}
 8006f62:	e073      	b.n	800704c <HAL_TIM_Encoder_MspInit+0x29c>
  else if(tim_encoderHandle->Instance==TIM4)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a40      	ldr	r2, [pc, #256]	; (800706c <HAL_TIM_Encoder_MspInit+0x2bc>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d135      	bne.n	8006fda <HAL_TIM_Encoder_MspInit+0x22a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006f6e:	2300      	movs	r3, #0
 8006f70:	617b      	str	r3, [r7, #20]
 8006f72:	4b39      	ldr	r3, [pc, #228]	; (8007058 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f76:	4a38      	ldr	r2, [pc, #224]	; (8007058 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006f78:	f043 0304 	orr.w	r3, r3, #4
 8006f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8006f7e:	4b36      	ldr	r3, [pc, #216]	; (8007058 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f82:	f003 0304 	and.w	r3, r3, #4
 8006f86:	617b      	str	r3, [r7, #20]
 8006f88:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	613b      	str	r3, [r7, #16]
 8006f8e:	4b32      	ldr	r3, [pc, #200]	; (8007058 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f92:	4a31      	ldr	r2, [pc, #196]	; (8007058 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006f94:	f043 0308 	orr.w	r3, r3, #8
 8006f98:	6313      	str	r3, [r2, #48]	; 0x30
 8006f9a:	4b2f      	ldr	r3, [pc, #188]	; (8007058 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f9e:	f003 0308 	and.w	r3, r3, #8
 8006fa2:	613b      	str	r3, [r7, #16]
 8006fa4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8006fa6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006faa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fac:	2302      	movs	r3, #2
 8006fae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006fb8:	2302      	movs	r3, #2
 8006fba:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006fbc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	482b      	ldr	r0, [pc, #172]	; (8007070 <HAL_TIM_Encoder_MspInit+0x2c0>)
 8006fc4:	f001 f9a0 	bl	8008308 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8006fc8:	2200      	movs	r2, #0
 8006fca:	2105      	movs	r1, #5
 8006fcc:	201e      	movs	r0, #30
 8006fce:	f000 fd6f 	bl	8007ab0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8006fd2:	201e      	movs	r0, #30
 8006fd4:	f000 fd88 	bl	8007ae8 <HAL_NVIC_EnableIRQ>
}
 8006fd8:	e038      	b.n	800704c <HAL_TIM_Encoder_MspInit+0x29c>
  else if(tim_encoderHandle->Instance==TIM8)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a25      	ldr	r2, [pc, #148]	; (8007074 <HAL_TIM_Encoder_MspInit+0x2c4>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d133      	bne.n	800704c <HAL_TIM_Encoder_MspInit+0x29c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	60fb      	str	r3, [r7, #12]
 8006fe8:	4b1b      	ldr	r3, [pc, #108]	; (8007058 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fec:	4a1a      	ldr	r2, [pc, #104]	; (8007058 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006fee:	f043 0302 	orr.w	r3, r3, #2
 8006ff2:	6453      	str	r3, [r2, #68]	; 0x44
 8006ff4:	4b18      	ldr	r3, [pc, #96]	; (8007058 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ff8:	f003 0302 	and.w	r3, r3, #2
 8006ffc:	60fb      	str	r3, [r7, #12]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007000:	2300      	movs	r3, #0
 8007002:	60bb      	str	r3, [r7, #8]
 8007004:	4b14      	ldr	r3, [pc, #80]	; (8007058 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8007006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007008:	4a13      	ldr	r2, [pc, #76]	; (8007058 <HAL_TIM_Encoder_MspInit+0x2a8>)
 800700a:	f043 0304 	orr.w	r3, r3, #4
 800700e:	6313      	str	r3, [r2, #48]	; 0x30
 8007010:	4b11      	ldr	r3, [pc, #68]	; (8007058 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8007012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007014:	f003 0304 	and.w	r3, r3, #4
 8007018:	60bb      	str	r3, [r7, #8]
 800701a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800701c:	23c0      	movs	r3, #192	; 0xc0
 800701e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007020:	2302      	movs	r3, #2
 8007022:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007024:	2300      	movs	r3, #0
 8007026:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007028:	2300      	movs	r3, #0
 800702a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800702c:	2303      	movs	r3, #3
 800702e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007030:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007034:	4619      	mov	r1, r3
 8007036:	4810      	ldr	r0, [pc, #64]	; (8007078 <HAL_TIM_Encoder_MspInit+0x2c8>)
 8007038:	f001 f966 	bl	8008308 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 800703c:	2200      	movs	r2, #0
 800703e:	2105      	movs	r1, #5
 8007040:	202e      	movs	r0, #46	; 0x2e
 8007042:	f000 fd35 	bl	8007ab0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8007046:	202e      	movs	r0, #46	; 0x2e
 8007048:	f000 fd4e 	bl	8007ae8 <HAL_NVIC_EnableIRQ>
}
 800704c:	bf00      	nop
 800704e:	3748      	adds	r7, #72	; 0x48
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}
 8007054:	40010000 	.word	0x40010000
 8007058:	40023800 	.word	0x40023800
 800705c:	40021000 	.word	0x40021000
 8007060:	40020000 	.word	0x40020000
 8007064:	40020400 	.word	0x40020400
 8007068:	40000400 	.word	0x40000400
 800706c:	40000800 	.word	0x40000800
 8007070:	40020c00 	.word	0x40020c00
 8007074:	40010400 	.word	0x40010400
 8007078:	40020800 	.word	0x40020800

0800707c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b086      	sub	sp, #24
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a2c      	ldr	r2, [pc, #176]	; (800713c <HAL_TIM_Base_MspInit+0xc0>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d116      	bne.n	80070bc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800708e:	2300      	movs	r3, #0
 8007090:	617b      	str	r3, [r7, #20]
 8007092:	4b2b      	ldr	r3, [pc, #172]	; (8007140 <HAL_TIM_Base_MspInit+0xc4>)
 8007094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007096:	4a2a      	ldr	r2, [pc, #168]	; (8007140 <HAL_TIM_Base_MspInit+0xc4>)
 8007098:	f043 0320 	orr.w	r3, r3, #32
 800709c:	6413      	str	r3, [r2, #64]	; 0x40
 800709e:	4b28      	ldr	r3, [pc, #160]	; (8007140 <HAL_TIM_Base_MspInit+0xc4>)
 80070a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a2:	f003 0320 	and.w	r3, r3, #32
 80070a6:	617b      	str	r3, [r7, #20]
 80070a8:	697b      	ldr	r3, [r7, #20]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80070aa:	2200      	movs	r2, #0
 80070ac:	2105      	movs	r1, #5
 80070ae:	2037      	movs	r0, #55	; 0x37
 80070b0:	f000 fcfe 	bl	8007ab0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80070b4:	2037      	movs	r0, #55	; 0x37
 80070b6:	f000 fd17 	bl	8007ae8 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 80070ba:	e03a      	b.n	8007132 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM9)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a20      	ldr	r2, [pc, #128]	; (8007144 <HAL_TIM_Base_MspInit+0xc8>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d10e      	bne.n	80070e4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80070c6:	2300      	movs	r3, #0
 80070c8:	613b      	str	r3, [r7, #16]
 80070ca:	4b1d      	ldr	r3, [pc, #116]	; (8007140 <HAL_TIM_Base_MspInit+0xc4>)
 80070cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ce:	4a1c      	ldr	r2, [pc, #112]	; (8007140 <HAL_TIM_Base_MspInit+0xc4>)
 80070d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070d4:	6453      	str	r3, [r2, #68]	; 0x44
 80070d6:	4b1a      	ldr	r3, [pc, #104]	; (8007140 <HAL_TIM_Base_MspInit+0xc4>)
 80070d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070de:	613b      	str	r3, [r7, #16]
 80070e0:	693b      	ldr	r3, [r7, #16]
}
 80070e2:	e026      	b.n	8007132 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM12)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a17      	ldr	r2, [pc, #92]	; (8007148 <HAL_TIM_Base_MspInit+0xcc>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d10e      	bne.n	800710c <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80070ee:	2300      	movs	r3, #0
 80070f0:	60fb      	str	r3, [r7, #12]
 80070f2:	4b13      	ldr	r3, [pc, #76]	; (8007140 <HAL_TIM_Base_MspInit+0xc4>)
 80070f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f6:	4a12      	ldr	r2, [pc, #72]	; (8007140 <HAL_TIM_Base_MspInit+0xc4>)
 80070f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070fc:	6413      	str	r3, [r2, #64]	; 0x40
 80070fe:	4b10      	ldr	r3, [pc, #64]	; (8007140 <HAL_TIM_Base_MspInit+0xc4>)
 8007100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007106:	60fb      	str	r3, [r7, #12]
 8007108:	68fb      	ldr	r3, [r7, #12]
}
 800710a:	e012      	b.n	8007132 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM13)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a0e      	ldr	r2, [pc, #56]	; (800714c <HAL_TIM_Base_MspInit+0xd0>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d10d      	bne.n	8007132 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8007116:	2300      	movs	r3, #0
 8007118:	60bb      	str	r3, [r7, #8]
 800711a:	4b09      	ldr	r3, [pc, #36]	; (8007140 <HAL_TIM_Base_MspInit+0xc4>)
 800711c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711e:	4a08      	ldr	r2, [pc, #32]	; (8007140 <HAL_TIM_Base_MspInit+0xc4>)
 8007120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007124:	6413      	str	r3, [r2, #64]	; 0x40
 8007126:	4b06      	ldr	r3, [pc, #24]	; (8007140 <HAL_TIM_Base_MspInit+0xc4>)
 8007128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800712e:	60bb      	str	r3, [r7, #8]
 8007130:	68bb      	ldr	r3, [r7, #8]
}
 8007132:	bf00      	nop
 8007134:	3718      	adds	r7, #24
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	40001400 	.word	0x40001400
 8007140:	40023800 	.word	0x40023800
 8007144:	40014000 	.word	0x40014000
 8007148:	40001800 	.word	0x40001800
 800714c:	40001c00 	.word	0x40001c00

08007150 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b08a      	sub	sp, #40	; 0x28
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007158:	f107 0314 	add.w	r3, r7, #20
 800715c:	2200      	movs	r2, #0
 800715e:	601a      	str	r2, [r3, #0]
 8007160:	605a      	str	r2, [r3, #4]
 8007162:	609a      	str	r2, [r3, #8]
 8007164:	60da      	str	r2, [r3, #12]
 8007166:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM9)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a24      	ldr	r2, [pc, #144]	; (8007200 <HAL_TIM_MspPostInit+0xb0>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d11e      	bne.n	80071b0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007172:	2300      	movs	r3, #0
 8007174:	613b      	str	r3, [r7, #16]
 8007176:	4b23      	ldr	r3, [pc, #140]	; (8007204 <HAL_TIM_MspPostInit+0xb4>)
 8007178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800717a:	4a22      	ldr	r2, [pc, #136]	; (8007204 <HAL_TIM_MspPostInit+0xb4>)
 800717c:	f043 0310 	orr.w	r3, r3, #16
 8007180:	6313      	str	r3, [r2, #48]	; 0x30
 8007182:	4b20      	ldr	r3, [pc, #128]	; (8007204 <HAL_TIM_MspPostInit+0xb4>)
 8007184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007186:	f003 0310 	and.w	r3, r3, #16
 800718a:	613b      	str	r3, [r7, #16]
 800718c:	693b      	ldr	r3, [r7, #16]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    PE6     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800718e:	2360      	movs	r3, #96	; 0x60
 8007190:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007192:	2302      	movs	r3, #2
 8007194:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007196:	2300      	movs	r3, #0
 8007198:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800719a:	2300      	movs	r3, #0
 800719c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800719e:	2303      	movs	r3, #3
 80071a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80071a2:	f107 0314 	add.w	r3, r7, #20
 80071a6:	4619      	mov	r1, r3
 80071a8:	4817      	ldr	r0, [pc, #92]	; (8007208 <HAL_TIM_MspPostInit+0xb8>)
 80071aa:	f001 f8ad 	bl	8008308 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80071ae:	e023      	b.n	80071f8 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM12)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a15      	ldr	r2, [pc, #84]	; (800720c <HAL_TIM_MspPostInit+0xbc>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d11e      	bne.n	80071f8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80071ba:	2300      	movs	r3, #0
 80071bc:	60fb      	str	r3, [r7, #12]
 80071be:	4b11      	ldr	r3, [pc, #68]	; (8007204 <HAL_TIM_MspPostInit+0xb4>)
 80071c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c2:	4a10      	ldr	r2, [pc, #64]	; (8007204 <HAL_TIM_MspPostInit+0xb4>)
 80071c4:	f043 0302 	orr.w	r3, r3, #2
 80071c8:	6313      	str	r3, [r2, #48]	; 0x30
 80071ca:	4b0e      	ldr	r3, [pc, #56]	; (8007204 <HAL_TIM_MspPostInit+0xb4>)
 80071cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ce:	f003 0302 	and.w	r3, r3, #2
 80071d2:	60fb      	str	r3, [r7, #12]
 80071d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80071d6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80071da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071dc:	2302      	movs	r3, #2
 80071de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071e0:	2300      	movs	r3, #0
 80071e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071e4:	2300      	movs	r3, #0
 80071e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80071e8:	2309      	movs	r3, #9
 80071ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071ec:	f107 0314 	add.w	r3, r7, #20
 80071f0:	4619      	mov	r1, r3
 80071f2:	4807      	ldr	r0, [pc, #28]	; (8007210 <HAL_TIM_MspPostInit+0xc0>)
 80071f4:	f001 f888 	bl	8008308 <HAL_GPIO_Init>
}
 80071f8:	bf00      	nop
 80071fa:	3728      	adds	r7, #40	; 0x28
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	40014000 	.word	0x40014000
 8007204:	40023800 	.word	0x40023800
 8007208:	40021000 	.word	0x40021000
 800720c:	40001800 	.word	0x40001800
 8007210:	40020400 	.word	0x40020400

08007214 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	0a5a      	lsrs	r2, r3, #9
 8007224:	490f      	ldr	r1, [pc, #60]	; (8007264 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8007226:	fba1 1202 	umull	r1, r2, r1, r2
 800722a:	09d2      	lsrs	r2, r2, #7
 800722c:	490e      	ldr	r1, [pc, #56]	; (8007268 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800722e:	fb01 f202 	mul.w	r2, r1, r2
 8007232:	1a9b      	subs	r3, r3, r2
 8007234:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	0a5b      	lsrs	r3, r3, #9
 800723c:	4a09      	ldr	r2, [pc, #36]	; (8007264 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800723e:	fba2 2303 	umull	r2, r3, r2, r3
 8007242:	09db      	lsrs	r3, r3, #7
 8007244:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	441a      	add	r2, r3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	601a      	str	r2, [r3, #0]
}
 8007258:	bf00      	nop
 800725a:	3714      	adds	r7, #20
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr
 8007264:	00044b83 	.word	0x00044b83
 8007268:	3b9aca00 	.word	0x3b9aca00

0800726c <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart5_tx;
DMA_HandleTypeDef hdma_usart2_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8007270:	4b11      	ldr	r3, [pc, #68]	; (80072b8 <MX_UART4_Init+0x4c>)
 8007272:	4a12      	ldr	r2, [pc, #72]	; (80072bc <MX_UART4_Init+0x50>)
 8007274:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8007276:	4b10      	ldr	r3, [pc, #64]	; (80072b8 <MX_UART4_Init+0x4c>)
 8007278:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800727c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800727e:	4b0e      	ldr	r3, [pc, #56]	; (80072b8 <MX_UART4_Init+0x4c>)
 8007280:	2200      	movs	r2, #0
 8007282:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8007284:	4b0c      	ldr	r3, [pc, #48]	; (80072b8 <MX_UART4_Init+0x4c>)
 8007286:	2200      	movs	r2, #0
 8007288:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800728a:	4b0b      	ldr	r3, [pc, #44]	; (80072b8 <MX_UART4_Init+0x4c>)
 800728c:	2200      	movs	r2, #0
 800728e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8007290:	4b09      	ldr	r3, [pc, #36]	; (80072b8 <MX_UART4_Init+0x4c>)
 8007292:	220c      	movs	r2, #12
 8007294:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007296:	4b08      	ldr	r3, [pc, #32]	; (80072b8 <MX_UART4_Init+0x4c>)
 8007298:	2200      	movs	r2, #0
 800729a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800729c:	4b06      	ldr	r3, [pc, #24]	; (80072b8 <MX_UART4_Init+0x4c>)
 800729e:	2200      	movs	r2, #0
 80072a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80072a2:	4805      	ldr	r0, [pc, #20]	; (80072b8 <MX_UART4_Init+0x4c>)
 80072a4:	f003 f836 	bl	800a314 <HAL_UART_Init>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d001      	beq.n	80072b2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80072ae:	f7fa fdfb 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80072b2:	bf00      	nop
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	20002c78 	.word	0x20002c78
 80072bc:	40004c00 	.word	0x40004c00

080072c0 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80072c4:	4b11      	ldr	r3, [pc, #68]	; (800730c <MX_UART5_Init+0x4c>)
 80072c6:	4a12      	ldr	r2, [pc, #72]	; (8007310 <MX_UART5_Init+0x50>)
 80072c8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 57600;
 80072ca:	4b10      	ldr	r3, [pc, #64]	; (800730c <MX_UART5_Init+0x4c>)
 80072cc:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80072d0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80072d2:	4b0e      	ldr	r3, [pc, #56]	; (800730c <MX_UART5_Init+0x4c>)
 80072d4:	2200      	movs	r2, #0
 80072d6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80072d8:	4b0c      	ldr	r3, [pc, #48]	; (800730c <MX_UART5_Init+0x4c>)
 80072da:	2200      	movs	r2, #0
 80072dc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80072de:	4b0b      	ldr	r3, [pc, #44]	; (800730c <MX_UART5_Init+0x4c>)
 80072e0:	2200      	movs	r2, #0
 80072e2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80072e4:	4b09      	ldr	r3, [pc, #36]	; (800730c <MX_UART5_Init+0x4c>)
 80072e6:	220c      	movs	r2, #12
 80072e8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80072ea:	4b08      	ldr	r3, [pc, #32]	; (800730c <MX_UART5_Init+0x4c>)
 80072ec:	2200      	movs	r2, #0
 80072ee:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80072f0:	4b06      	ldr	r3, [pc, #24]	; (800730c <MX_UART5_Init+0x4c>)
 80072f2:	2200      	movs	r2, #0
 80072f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80072f6:	4805      	ldr	r0, [pc, #20]	; (800730c <MX_UART5_Init+0x4c>)
 80072f8:	f003 f80c 	bl	800a314 <HAL_UART_Init>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d001      	beq.n	8007306 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8007302:	f7fa fdd1 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8007306:	bf00      	nop
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	20002cbc 	.word	0x20002cbc
 8007310:	40005000 	.word	0x40005000

08007314 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007318:	4b11      	ldr	r3, [pc, #68]	; (8007360 <MX_USART1_UART_Init+0x4c>)
 800731a:	4a12      	ldr	r2, [pc, #72]	; (8007364 <MX_USART1_UART_Init+0x50>)
 800731c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 800731e:	4b10      	ldr	r3, [pc, #64]	; (8007360 <MX_USART1_UART_Init+0x4c>)
 8007320:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8007324:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007326:	4b0e      	ldr	r3, [pc, #56]	; (8007360 <MX_USART1_UART_Init+0x4c>)
 8007328:	2200      	movs	r2, #0
 800732a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800732c:	4b0c      	ldr	r3, [pc, #48]	; (8007360 <MX_USART1_UART_Init+0x4c>)
 800732e:	2200      	movs	r2, #0
 8007330:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007332:	4b0b      	ldr	r3, [pc, #44]	; (8007360 <MX_USART1_UART_Init+0x4c>)
 8007334:	2200      	movs	r2, #0
 8007336:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007338:	4b09      	ldr	r3, [pc, #36]	; (8007360 <MX_USART1_UART_Init+0x4c>)
 800733a:	220c      	movs	r2, #12
 800733c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800733e:	4b08      	ldr	r3, [pc, #32]	; (8007360 <MX_USART1_UART_Init+0x4c>)
 8007340:	2200      	movs	r2, #0
 8007342:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007344:	4b06      	ldr	r3, [pc, #24]	; (8007360 <MX_USART1_UART_Init+0x4c>)
 8007346:	2200      	movs	r2, #0
 8007348:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800734a:	4805      	ldr	r0, [pc, #20]	; (8007360 <MX_USART1_UART_Init+0x4c>)
 800734c:	f002 ffe2 	bl	800a314 <HAL_UART_Init>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d001      	beq.n	800735a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8007356:	f7fa fda7 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800735a:	bf00      	nop
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	20002d00 	.word	0x20002d00
 8007364:	40011000 	.word	0x40011000

08007368 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800736c:	4b11      	ldr	r3, [pc, #68]	; (80073b4 <MX_USART2_UART_Init+0x4c>)
 800736e:	4a12      	ldr	r2, [pc, #72]	; (80073b8 <MX_USART2_UART_Init+0x50>)
 8007370:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8007372:	4b10      	ldr	r3, [pc, #64]	; (80073b4 <MX_USART2_UART_Init+0x4c>)
 8007374:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007378:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800737a:	4b0e      	ldr	r3, [pc, #56]	; (80073b4 <MX_USART2_UART_Init+0x4c>)
 800737c:	2200      	movs	r2, #0
 800737e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007380:	4b0c      	ldr	r3, [pc, #48]	; (80073b4 <MX_USART2_UART_Init+0x4c>)
 8007382:	2200      	movs	r2, #0
 8007384:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007386:	4b0b      	ldr	r3, [pc, #44]	; (80073b4 <MX_USART2_UART_Init+0x4c>)
 8007388:	2200      	movs	r2, #0
 800738a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800738c:	4b09      	ldr	r3, [pc, #36]	; (80073b4 <MX_USART2_UART_Init+0x4c>)
 800738e:	220c      	movs	r2, #12
 8007390:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007392:	4b08      	ldr	r3, [pc, #32]	; (80073b4 <MX_USART2_UART_Init+0x4c>)
 8007394:	2200      	movs	r2, #0
 8007396:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007398:	4b06      	ldr	r3, [pc, #24]	; (80073b4 <MX_USART2_UART_Init+0x4c>)
 800739a:	2200      	movs	r2, #0
 800739c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800739e:	4805      	ldr	r0, [pc, #20]	; (80073b4 <MX_USART2_UART_Init+0x4c>)
 80073a0:	f002 ffb8 	bl	800a314 <HAL_UART_Init>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d001      	beq.n	80073ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80073aa:	f7fa fd7d 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80073ae:	bf00      	nop
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	20002d44 	.word	0x20002d44
 80073b8:	40004400 	.word	0x40004400

080073bc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80073c0:	4b11      	ldr	r3, [pc, #68]	; (8007408 <MX_USART3_UART_Init+0x4c>)
 80073c2:	4a12      	ldr	r2, [pc, #72]	; (800740c <MX_USART3_UART_Init+0x50>)
 80073c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80073c6:	4b10      	ldr	r3, [pc, #64]	; (8007408 <MX_USART3_UART_Init+0x4c>)
 80073c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80073cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80073ce:	4b0e      	ldr	r3, [pc, #56]	; (8007408 <MX_USART3_UART_Init+0x4c>)
 80073d0:	2200      	movs	r2, #0
 80073d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80073d4:	4b0c      	ldr	r3, [pc, #48]	; (8007408 <MX_USART3_UART_Init+0x4c>)
 80073d6:	2200      	movs	r2, #0
 80073d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80073da:	4b0b      	ldr	r3, [pc, #44]	; (8007408 <MX_USART3_UART_Init+0x4c>)
 80073dc:	2200      	movs	r2, #0
 80073de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80073e0:	4b09      	ldr	r3, [pc, #36]	; (8007408 <MX_USART3_UART_Init+0x4c>)
 80073e2:	220c      	movs	r2, #12
 80073e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80073e6:	4b08      	ldr	r3, [pc, #32]	; (8007408 <MX_USART3_UART_Init+0x4c>)
 80073e8:	2200      	movs	r2, #0
 80073ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80073ec:	4b06      	ldr	r3, [pc, #24]	; (8007408 <MX_USART3_UART_Init+0x4c>)
 80073ee:	2200      	movs	r2, #0
 80073f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80073f2:	4805      	ldr	r0, [pc, #20]	; (8007408 <MX_USART3_UART_Init+0x4c>)
 80073f4:	f002 ff8e 	bl	800a314 <HAL_UART_Init>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d001      	beq.n	8007402 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80073fe:	f7fa fd53 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8007402:	bf00      	nop
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	20002d88 	.word	0x20002d88
 800740c:	40004800 	.word	0x40004800

08007410 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b092      	sub	sp, #72	; 0x48
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007418:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800741c:	2200      	movs	r2, #0
 800741e:	601a      	str	r2, [r3, #0]
 8007420:	605a      	str	r2, [r3, #4]
 8007422:	609a      	str	r2, [r3, #8]
 8007424:	60da      	str	r2, [r3, #12]
 8007426:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a8e      	ldr	r2, [pc, #568]	; (8007668 <HAL_UART_MspInit+0x258>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d163      	bne.n	80074fa <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8007432:	2300      	movs	r3, #0
 8007434:	633b      	str	r3, [r7, #48]	; 0x30
 8007436:	4b8d      	ldr	r3, [pc, #564]	; (800766c <HAL_UART_MspInit+0x25c>)
 8007438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743a:	4a8c      	ldr	r2, [pc, #560]	; (800766c <HAL_UART_MspInit+0x25c>)
 800743c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007440:	6413      	str	r3, [r2, #64]	; 0x40
 8007442:	4b8a      	ldr	r3, [pc, #552]	; (800766c <HAL_UART_MspInit+0x25c>)
 8007444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007446:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800744a:	633b      	str	r3, [r7, #48]	; 0x30
 800744c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800744e:	2300      	movs	r3, #0
 8007450:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007452:	4b86      	ldr	r3, [pc, #536]	; (800766c <HAL_UART_MspInit+0x25c>)
 8007454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007456:	4a85      	ldr	r2, [pc, #532]	; (800766c <HAL_UART_MspInit+0x25c>)
 8007458:	f043 0304 	orr.w	r3, r3, #4
 800745c:	6313      	str	r3, [r2, #48]	; 0x30
 800745e:	4b83      	ldr	r3, [pc, #524]	; (800766c <HAL_UART_MspInit+0x25c>)
 8007460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007462:	f003 0304 	and.w	r3, r3, #4
 8007466:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800746a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800746e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007470:	2302      	movs	r3, #2
 8007472:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007474:	2300      	movs	r3, #0
 8007476:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007478:	2303      	movs	r3, #3
 800747a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800747c:	2308      	movs	r3, #8
 800747e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007480:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007484:	4619      	mov	r1, r3
 8007486:	487a      	ldr	r0, [pc, #488]	; (8007670 <HAL_UART_MspInit+0x260>)
 8007488:	f000 ff3e 	bl	8008308 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800748c:	4b79      	ldr	r3, [pc, #484]	; (8007674 <HAL_UART_MspInit+0x264>)
 800748e:	4a7a      	ldr	r2, [pc, #488]	; (8007678 <HAL_UART_MspInit+0x268>)
 8007490:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8007492:	4b78      	ldr	r3, [pc, #480]	; (8007674 <HAL_UART_MspInit+0x264>)
 8007494:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007498:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800749a:	4b76      	ldr	r3, [pc, #472]	; (8007674 <HAL_UART_MspInit+0x264>)
 800749c:	2200      	movs	r2, #0
 800749e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80074a0:	4b74      	ldr	r3, [pc, #464]	; (8007674 <HAL_UART_MspInit+0x264>)
 80074a2:	2200      	movs	r2, #0
 80074a4:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80074a6:	4b73      	ldr	r3, [pc, #460]	; (8007674 <HAL_UART_MspInit+0x264>)
 80074a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80074ac:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80074ae:	4b71      	ldr	r3, [pc, #452]	; (8007674 <HAL_UART_MspInit+0x264>)
 80074b0:	2200      	movs	r2, #0
 80074b2:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80074b4:	4b6f      	ldr	r3, [pc, #444]	; (8007674 <HAL_UART_MspInit+0x264>)
 80074b6:	2200      	movs	r2, #0
 80074b8:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80074ba:	4b6e      	ldr	r3, [pc, #440]	; (8007674 <HAL_UART_MspInit+0x264>)
 80074bc:	2200      	movs	r2, #0
 80074be:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80074c0:	4b6c      	ldr	r3, [pc, #432]	; (8007674 <HAL_UART_MspInit+0x264>)
 80074c2:	2200      	movs	r2, #0
 80074c4:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80074c6:	4b6b      	ldr	r3, [pc, #428]	; (8007674 <HAL_UART_MspInit+0x264>)
 80074c8:	2200      	movs	r2, #0
 80074ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80074cc:	4869      	ldr	r0, [pc, #420]	; (8007674 <HAL_UART_MspInit+0x264>)
 80074ce:	f000 fb19 	bl	8007b04 <HAL_DMA_Init>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d001      	beq.n	80074dc <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80074d8:	f7fa fce6 	bl	8001ea8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4a65      	ldr	r2, [pc, #404]	; (8007674 <HAL_UART_MspInit+0x264>)
 80074e0:	639a      	str	r2, [r3, #56]	; 0x38
 80074e2:	4a64      	ldr	r2, [pc, #400]	; (8007674 <HAL_UART_MspInit+0x264>)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80074e8:	2200      	movs	r2, #0
 80074ea:	2105      	movs	r1, #5
 80074ec:	2034      	movs	r0, #52	; 0x34
 80074ee:	f000 fadf 	bl	8007ab0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80074f2:	2034      	movs	r0, #52	; 0x34
 80074f4:	f000 faf8 	bl	8007ae8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80074f8:	e1a1      	b.n	800783e <HAL_UART_MspInit+0x42e>
  else if(uartHandle->Instance==UART5)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a5f      	ldr	r2, [pc, #380]	; (800767c <HAL_UART_MspInit+0x26c>)
 8007500:	4293      	cmp	r3, r2
 8007502:	f040 80c7 	bne.w	8007694 <HAL_UART_MspInit+0x284>
    __HAL_RCC_UART5_CLK_ENABLE();
 8007506:	2300      	movs	r3, #0
 8007508:	62bb      	str	r3, [r7, #40]	; 0x28
 800750a:	4b58      	ldr	r3, [pc, #352]	; (800766c <HAL_UART_MspInit+0x25c>)
 800750c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750e:	4a57      	ldr	r2, [pc, #348]	; (800766c <HAL_UART_MspInit+0x25c>)
 8007510:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007514:	6413      	str	r3, [r2, #64]	; 0x40
 8007516:	4b55      	ldr	r3, [pc, #340]	; (800766c <HAL_UART_MspInit+0x25c>)
 8007518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800751e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007520:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007522:	2300      	movs	r3, #0
 8007524:	627b      	str	r3, [r7, #36]	; 0x24
 8007526:	4b51      	ldr	r3, [pc, #324]	; (800766c <HAL_UART_MspInit+0x25c>)
 8007528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800752a:	4a50      	ldr	r2, [pc, #320]	; (800766c <HAL_UART_MspInit+0x25c>)
 800752c:	f043 0304 	orr.w	r3, r3, #4
 8007530:	6313      	str	r3, [r2, #48]	; 0x30
 8007532:	4b4e      	ldr	r3, [pc, #312]	; (800766c <HAL_UART_MspInit+0x25c>)
 8007534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007536:	f003 0304 	and.w	r3, r3, #4
 800753a:	627b      	str	r3, [r7, #36]	; 0x24
 800753c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800753e:	2300      	movs	r3, #0
 8007540:	623b      	str	r3, [r7, #32]
 8007542:	4b4a      	ldr	r3, [pc, #296]	; (800766c <HAL_UART_MspInit+0x25c>)
 8007544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007546:	4a49      	ldr	r2, [pc, #292]	; (800766c <HAL_UART_MspInit+0x25c>)
 8007548:	f043 0308 	orr.w	r3, r3, #8
 800754c:	6313      	str	r3, [r2, #48]	; 0x30
 800754e:	4b47      	ldr	r3, [pc, #284]	; (800766c <HAL_UART_MspInit+0x25c>)
 8007550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007552:	f003 0308 	and.w	r3, r3, #8
 8007556:	623b      	str	r3, [r7, #32]
 8007558:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800755a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800755e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007560:	2302      	movs	r3, #2
 8007562:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007564:	2300      	movs	r3, #0
 8007566:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007568:	2303      	movs	r3, #3
 800756a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800756c:	2308      	movs	r3, #8
 800756e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007570:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007574:	4619      	mov	r1, r3
 8007576:	483e      	ldr	r0, [pc, #248]	; (8007670 <HAL_UART_MspInit+0x260>)
 8007578:	f000 fec6 	bl	8008308 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800757c:	2304      	movs	r3, #4
 800757e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007580:	2302      	movs	r3, #2
 8007582:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007584:	2300      	movs	r3, #0
 8007586:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007588:	2303      	movs	r3, #3
 800758a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800758c:	2308      	movs	r3, #8
 800758e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007590:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007594:	4619      	mov	r1, r3
 8007596:	483a      	ldr	r0, [pc, #232]	; (8007680 <HAL_UART_MspInit+0x270>)
 8007598:	f000 feb6 	bl	8008308 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 800759c:	4b39      	ldr	r3, [pc, #228]	; (8007684 <HAL_UART_MspInit+0x274>)
 800759e:	4a3a      	ldr	r2, [pc, #232]	; (8007688 <HAL_UART_MspInit+0x278>)
 80075a0:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80075a2:	4b38      	ldr	r3, [pc, #224]	; (8007684 <HAL_UART_MspInit+0x274>)
 80075a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80075a8:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80075aa:	4b36      	ldr	r3, [pc, #216]	; (8007684 <HAL_UART_MspInit+0x274>)
 80075ac:	2200      	movs	r2, #0
 80075ae:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80075b0:	4b34      	ldr	r3, [pc, #208]	; (8007684 <HAL_UART_MspInit+0x274>)
 80075b2:	2200      	movs	r2, #0
 80075b4:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80075b6:	4b33      	ldr	r3, [pc, #204]	; (8007684 <HAL_UART_MspInit+0x274>)
 80075b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80075bc:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80075be:	4b31      	ldr	r3, [pc, #196]	; (8007684 <HAL_UART_MspInit+0x274>)
 80075c0:	2200      	movs	r2, #0
 80075c2:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80075c4:	4b2f      	ldr	r3, [pc, #188]	; (8007684 <HAL_UART_MspInit+0x274>)
 80075c6:	2200      	movs	r2, #0
 80075c8:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 80075ca:	4b2e      	ldr	r3, [pc, #184]	; (8007684 <HAL_UART_MspInit+0x274>)
 80075cc:	2200      	movs	r2, #0
 80075ce:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80075d0:	4b2c      	ldr	r3, [pc, #176]	; (8007684 <HAL_UART_MspInit+0x274>)
 80075d2:	2200      	movs	r2, #0
 80075d4:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80075d6:	4b2b      	ldr	r3, [pc, #172]	; (8007684 <HAL_UART_MspInit+0x274>)
 80075d8:	2200      	movs	r2, #0
 80075da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80075dc:	4829      	ldr	r0, [pc, #164]	; (8007684 <HAL_UART_MspInit+0x274>)
 80075de:	f000 fa91 	bl	8007b04 <HAL_DMA_Init>
 80075e2:	4603      	mov	r3, r0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d001      	beq.n	80075ec <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 80075e8:	f7fa fc5e 	bl	8001ea8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4a25      	ldr	r2, [pc, #148]	; (8007684 <HAL_UART_MspInit+0x274>)
 80075f0:	639a      	str	r2, [r3, #56]	; 0x38
 80075f2:	4a24      	ldr	r2, [pc, #144]	; (8007684 <HAL_UART_MspInit+0x274>)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart5_tx.Instance = DMA1_Stream7;
 80075f8:	4b24      	ldr	r3, [pc, #144]	; (800768c <HAL_UART_MspInit+0x27c>)
 80075fa:	4a25      	ldr	r2, [pc, #148]	; (8007690 <HAL_UART_MspInit+0x280>)
 80075fc:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 80075fe:	4b23      	ldr	r3, [pc, #140]	; (800768c <HAL_UART_MspInit+0x27c>)
 8007600:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007604:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007606:	4b21      	ldr	r3, [pc, #132]	; (800768c <HAL_UART_MspInit+0x27c>)
 8007608:	2240      	movs	r2, #64	; 0x40
 800760a:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800760c:	4b1f      	ldr	r3, [pc, #124]	; (800768c <HAL_UART_MspInit+0x27c>)
 800760e:	2200      	movs	r2, #0
 8007610:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007612:	4b1e      	ldr	r3, [pc, #120]	; (800768c <HAL_UART_MspInit+0x27c>)
 8007614:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007618:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800761a:	4b1c      	ldr	r3, [pc, #112]	; (800768c <HAL_UART_MspInit+0x27c>)
 800761c:	2200      	movs	r2, #0
 800761e:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007620:	4b1a      	ldr	r3, [pc, #104]	; (800768c <HAL_UART_MspInit+0x27c>)
 8007622:	2200      	movs	r2, #0
 8007624:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8007626:	4b19      	ldr	r3, [pc, #100]	; (800768c <HAL_UART_MspInit+0x27c>)
 8007628:	2200      	movs	r2, #0
 800762a:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 800762c:	4b17      	ldr	r3, [pc, #92]	; (800768c <HAL_UART_MspInit+0x27c>)
 800762e:	2200      	movs	r2, #0
 8007630:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007632:	4b16      	ldr	r3, [pc, #88]	; (800768c <HAL_UART_MspInit+0x27c>)
 8007634:	2200      	movs	r2, #0
 8007636:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8007638:	4814      	ldr	r0, [pc, #80]	; (800768c <HAL_UART_MspInit+0x27c>)
 800763a:	f000 fa63 	bl	8007b04 <HAL_DMA_Init>
 800763e:	4603      	mov	r3, r0
 8007640:	2b00      	cmp	r3, #0
 8007642:	d001      	beq.n	8007648 <HAL_UART_MspInit+0x238>
      Error_Handler();
 8007644:	f7fa fc30 	bl	8001ea8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a10      	ldr	r2, [pc, #64]	; (800768c <HAL_UART_MspInit+0x27c>)
 800764c:	635a      	str	r2, [r3, #52]	; 0x34
 800764e:	4a0f      	ldr	r2, [pc, #60]	; (800768c <HAL_UART_MspInit+0x27c>)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8007654:	2200      	movs	r2, #0
 8007656:	2105      	movs	r1, #5
 8007658:	2035      	movs	r0, #53	; 0x35
 800765a:	f000 fa29 	bl	8007ab0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800765e:	2035      	movs	r0, #53	; 0x35
 8007660:	f000 fa42 	bl	8007ae8 <HAL_NVIC_EnableIRQ>
}
 8007664:	e0eb      	b.n	800783e <HAL_UART_MspInit+0x42e>
 8007666:	bf00      	nop
 8007668:	40004c00 	.word	0x40004c00
 800766c:	40023800 	.word	0x40023800
 8007670:	40020800 	.word	0x40020800
 8007674:	20002dcc 	.word	0x20002dcc
 8007678:	40026040 	.word	0x40026040
 800767c:	40005000 	.word	0x40005000
 8007680:	40020c00 	.word	0x40020c00
 8007684:	20002e2c 	.word	0x20002e2c
 8007688:	40026010 	.word	0x40026010
 800768c:	20002e8c 	.word	0x20002e8c
 8007690:	400260b8 	.word	0x400260b8
  else if(uartHandle->Instance==USART1)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a6b      	ldr	r2, [pc, #428]	; (8007848 <HAL_UART_MspInit+0x438>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d135      	bne.n	800770a <HAL_UART_MspInit+0x2fa>
    __HAL_RCC_USART1_CLK_ENABLE();
 800769e:	2300      	movs	r3, #0
 80076a0:	61fb      	str	r3, [r7, #28]
 80076a2:	4b6a      	ldr	r3, [pc, #424]	; (800784c <HAL_UART_MspInit+0x43c>)
 80076a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076a6:	4a69      	ldr	r2, [pc, #420]	; (800784c <HAL_UART_MspInit+0x43c>)
 80076a8:	f043 0310 	orr.w	r3, r3, #16
 80076ac:	6453      	str	r3, [r2, #68]	; 0x44
 80076ae:	4b67      	ldr	r3, [pc, #412]	; (800784c <HAL_UART_MspInit+0x43c>)
 80076b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076b2:	f003 0310 	and.w	r3, r3, #16
 80076b6:	61fb      	str	r3, [r7, #28]
 80076b8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80076ba:	2300      	movs	r3, #0
 80076bc:	61bb      	str	r3, [r7, #24]
 80076be:	4b63      	ldr	r3, [pc, #396]	; (800784c <HAL_UART_MspInit+0x43c>)
 80076c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c2:	4a62      	ldr	r2, [pc, #392]	; (800784c <HAL_UART_MspInit+0x43c>)
 80076c4:	f043 0301 	orr.w	r3, r3, #1
 80076c8:	6313      	str	r3, [r2, #48]	; 0x30
 80076ca:	4b60      	ldr	r3, [pc, #384]	; (800784c <HAL_UART_MspInit+0x43c>)
 80076cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ce:	f003 0301 	and.w	r3, r3, #1
 80076d2:	61bb      	str	r3, [r7, #24]
 80076d4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80076d6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80076da:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076dc:	2302      	movs	r3, #2
 80076de:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076e0:	2300      	movs	r3, #0
 80076e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80076e4:	2303      	movs	r3, #3
 80076e6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80076e8:	2307      	movs	r3, #7
 80076ea:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80076ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80076f0:	4619      	mov	r1, r3
 80076f2:	4857      	ldr	r0, [pc, #348]	; (8007850 <HAL_UART_MspInit+0x440>)
 80076f4:	f000 fe08 	bl	8008308 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80076f8:	2200      	movs	r2, #0
 80076fa:	2105      	movs	r1, #5
 80076fc:	2025      	movs	r0, #37	; 0x25
 80076fe:	f000 f9d7 	bl	8007ab0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007702:	2025      	movs	r0, #37	; 0x25
 8007704:	f000 f9f0 	bl	8007ae8 <HAL_NVIC_EnableIRQ>
}
 8007708:	e099      	b.n	800783e <HAL_UART_MspInit+0x42e>
  else if(uartHandle->Instance==USART2)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a51      	ldr	r2, [pc, #324]	; (8007854 <HAL_UART_MspInit+0x444>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d162      	bne.n	80077da <HAL_UART_MspInit+0x3ca>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007714:	2300      	movs	r3, #0
 8007716:	617b      	str	r3, [r7, #20]
 8007718:	4b4c      	ldr	r3, [pc, #304]	; (800784c <HAL_UART_MspInit+0x43c>)
 800771a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771c:	4a4b      	ldr	r2, [pc, #300]	; (800784c <HAL_UART_MspInit+0x43c>)
 800771e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007722:	6413      	str	r3, [r2, #64]	; 0x40
 8007724:	4b49      	ldr	r3, [pc, #292]	; (800784c <HAL_UART_MspInit+0x43c>)
 8007726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800772c:	617b      	str	r3, [r7, #20]
 800772e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007730:	2300      	movs	r3, #0
 8007732:	613b      	str	r3, [r7, #16]
 8007734:	4b45      	ldr	r3, [pc, #276]	; (800784c <HAL_UART_MspInit+0x43c>)
 8007736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007738:	4a44      	ldr	r2, [pc, #272]	; (800784c <HAL_UART_MspInit+0x43c>)
 800773a:	f043 0301 	orr.w	r3, r3, #1
 800773e:	6313      	str	r3, [r2, #48]	; 0x30
 8007740:	4b42      	ldr	r3, [pc, #264]	; (800784c <HAL_UART_MspInit+0x43c>)
 8007742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007744:	f003 0301 	and.w	r3, r3, #1
 8007748:	613b      	str	r3, [r7, #16]
 800774a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800774c:	230c      	movs	r3, #12
 800774e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007750:	2302      	movs	r3, #2
 8007752:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007754:	2300      	movs	r3, #0
 8007756:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007758:	2303      	movs	r3, #3
 800775a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800775c:	2307      	movs	r3, #7
 800775e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007760:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007764:	4619      	mov	r1, r3
 8007766:	483a      	ldr	r0, [pc, #232]	; (8007850 <HAL_UART_MspInit+0x440>)
 8007768:	f000 fdce 	bl	8008308 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800776c:	4b3a      	ldr	r3, [pc, #232]	; (8007858 <HAL_UART_MspInit+0x448>)
 800776e:	4a3b      	ldr	r2, [pc, #236]	; (800785c <HAL_UART_MspInit+0x44c>)
 8007770:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8007772:	4b39      	ldr	r3, [pc, #228]	; (8007858 <HAL_UART_MspInit+0x448>)
 8007774:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007778:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800777a:	4b37      	ldr	r3, [pc, #220]	; (8007858 <HAL_UART_MspInit+0x448>)
 800777c:	2200      	movs	r2, #0
 800777e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007780:	4b35      	ldr	r3, [pc, #212]	; (8007858 <HAL_UART_MspInit+0x448>)
 8007782:	2200      	movs	r2, #0
 8007784:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007786:	4b34      	ldr	r3, [pc, #208]	; (8007858 <HAL_UART_MspInit+0x448>)
 8007788:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800778c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800778e:	4b32      	ldr	r3, [pc, #200]	; (8007858 <HAL_UART_MspInit+0x448>)
 8007790:	2200      	movs	r2, #0
 8007792:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007794:	4b30      	ldr	r3, [pc, #192]	; (8007858 <HAL_UART_MspInit+0x448>)
 8007796:	2200      	movs	r2, #0
 8007798:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800779a:	4b2f      	ldr	r3, [pc, #188]	; (8007858 <HAL_UART_MspInit+0x448>)
 800779c:	2200      	movs	r2, #0
 800779e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80077a0:	4b2d      	ldr	r3, [pc, #180]	; (8007858 <HAL_UART_MspInit+0x448>)
 80077a2:	2200      	movs	r2, #0
 80077a4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80077a6:	4b2c      	ldr	r3, [pc, #176]	; (8007858 <HAL_UART_MspInit+0x448>)
 80077a8:	2200      	movs	r2, #0
 80077aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80077ac:	482a      	ldr	r0, [pc, #168]	; (8007858 <HAL_UART_MspInit+0x448>)
 80077ae:	f000 f9a9 	bl	8007b04 <HAL_DMA_Init>
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d001      	beq.n	80077bc <HAL_UART_MspInit+0x3ac>
      Error_Handler();
 80077b8:	f7fa fb76 	bl	8001ea8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a26      	ldr	r2, [pc, #152]	; (8007858 <HAL_UART_MspInit+0x448>)
 80077c0:	639a      	str	r2, [r3, #56]	; 0x38
 80077c2:	4a25      	ldr	r2, [pc, #148]	; (8007858 <HAL_UART_MspInit+0x448>)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80077c8:	2200      	movs	r2, #0
 80077ca:	2105      	movs	r1, #5
 80077cc:	2026      	movs	r0, #38	; 0x26
 80077ce:	f000 f96f 	bl	8007ab0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80077d2:	2026      	movs	r0, #38	; 0x26
 80077d4:	f000 f988 	bl	8007ae8 <HAL_NVIC_EnableIRQ>
}
 80077d8:	e031      	b.n	800783e <HAL_UART_MspInit+0x42e>
  else if(uartHandle->Instance==USART3)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a20      	ldr	r2, [pc, #128]	; (8007860 <HAL_UART_MspInit+0x450>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d12c      	bne.n	800783e <HAL_UART_MspInit+0x42e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80077e4:	2300      	movs	r3, #0
 80077e6:	60fb      	str	r3, [r7, #12]
 80077e8:	4b18      	ldr	r3, [pc, #96]	; (800784c <HAL_UART_MspInit+0x43c>)
 80077ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ec:	4a17      	ldr	r2, [pc, #92]	; (800784c <HAL_UART_MspInit+0x43c>)
 80077ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80077f2:	6413      	str	r3, [r2, #64]	; 0x40
 80077f4:	4b15      	ldr	r3, [pc, #84]	; (800784c <HAL_UART_MspInit+0x43c>)
 80077f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077fc:	60fb      	str	r3, [r7, #12]
 80077fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007800:	2300      	movs	r3, #0
 8007802:	60bb      	str	r3, [r7, #8]
 8007804:	4b11      	ldr	r3, [pc, #68]	; (800784c <HAL_UART_MspInit+0x43c>)
 8007806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007808:	4a10      	ldr	r2, [pc, #64]	; (800784c <HAL_UART_MspInit+0x43c>)
 800780a:	f043 0308 	orr.w	r3, r3, #8
 800780e:	6313      	str	r3, [r2, #48]	; 0x30
 8007810:	4b0e      	ldr	r3, [pc, #56]	; (800784c <HAL_UART_MspInit+0x43c>)
 8007812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007814:	f003 0308 	and.w	r3, r3, #8
 8007818:	60bb      	str	r3, [r7, #8]
 800781a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800781c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007820:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007822:	2302      	movs	r3, #2
 8007824:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007826:	2300      	movs	r3, #0
 8007828:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800782a:	2303      	movs	r3, #3
 800782c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800782e:	2307      	movs	r3, #7
 8007830:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007832:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007836:	4619      	mov	r1, r3
 8007838:	480a      	ldr	r0, [pc, #40]	; (8007864 <HAL_UART_MspInit+0x454>)
 800783a:	f000 fd65 	bl	8008308 <HAL_GPIO_Init>
}
 800783e:	bf00      	nop
 8007840:	3748      	adds	r7, #72	; 0x48
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	40011000 	.word	0x40011000
 800784c:	40023800 	.word	0x40023800
 8007850:	40020000 	.word	0x40020000
 8007854:	40004400 	.word	0x40004400
 8007858:	20002eec 	.word	0x20002eec
 800785c:	40026088 	.word	0x40026088
 8007860:	40004800 	.word	0x40004800
 8007864:	40020c00 	.word	0x40020c00

08007868 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007868:	f8df d034 	ldr.w	sp, [pc, #52]	; 80078a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800786c:	480d      	ldr	r0, [pc, #52]	; (80078a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800786e:	490e      	ldr	r1, [pc, #56]	; (80078a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007870:	4a0e      	ldr	r2, [pc, #56]	; (80078ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007872:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007874:	e002      	b.n	800787c <LoopCopyDataInit>

08007876 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007876:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007878:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800787a:	3304      	adds	r3, #4

0800787c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800787c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800787e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007880:	d3f9      	bcc.n	8007876 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007882:	4a0b      	ldr	r2, [pc, #44]	; (80078b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8007884:	4c0b      	ldr	r4, [pc, #44]	; (80078b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8007886:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007888:	e001      	b.n	800788e <LoopFillZerobss>

0800788a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800788a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800788c:	3204      	adds	r2, #4

0800788e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800788e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007890:	d3fb      	bcc.n	800788a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007892:	f7fe ff9f 	bl	80067d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007896:	f006 fff7 	bl	800e888 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800789a:	f7fa fa19 	bl	8001cd0 <main>
  bx  lr    
 800789e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80078a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80078a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80078a8:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 80078ac:	0800fa18 	.word	0x0800fa18
  ldr r2, =_sbss
 80078b0:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80078b4:	20006cb4 	.word	0x20006cb4

080078b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80078b8:	e7fe      	b.n	80078b8 <ADC_IRQHandler>
	...

080078bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80078c0:	4b0e      	ldr	r3, [pc, #56]	; (80078fc <HAL_Init+0x40>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a0d      	ldr	r2, [pc, #52]	; (80078fc <HAL_Init+0x40>)
 80078c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80078ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80078cc:	4b0b      	ldr	r3, [pc, #44]	; (80078fc <HAL_Init+0x40>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a0a      	ldr	r2, [pc, #40]	; (80078fc <HAL_Init+0x40>)
 80078d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80078d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80078d8:	4b08      	ldr	r3, [pc, #32]	; (80078fc <HAL_Init+0x40>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a07      	ldr	r2, [pc, #28]	; (80078fc <HAL_Init+0x40>)
 80078de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80078e4:	2003      	movs	r0, #3
 80078e6:	f000 f8d8 	bl	8007a9a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80078ea:	200f      	movs	r0, #15
 80078ec:	f7fe fdf2 	bl	80064d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80078f0:	f7fe fdc4 	bl	800647c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	40023c00 	.word	0x40023c00

08007900 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007900:	b480      	push	{r7}
 8007902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007904:	4b06      	ldr	r3, [pc, #24]	; (8007920 <HAL_IncTick+0x20>)
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	461a      	mov	r2, r3
 800790a:	4b06      	ldr	r3, [pc, #24]	; (8007924 <HAL_IncTick+0x24>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4413      	add	r3, r2
 8007910:	4a04      	ldr	r2, [pc, #16]	; (8007924 <HAL_IncTick+0x24>)
 8007912:	6013      	str	r3, [r2, #0]
}
 8007914:	bf00      	nop
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	2000002c 	.word	0x2000002c
 8007924:	20002f4c 	.word	0x20002f4c

08007928 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007928:	b480      	push	{r7}
 800792a:	af00      	add	r7, sp, #0
  return uwTick;
 800792c:	4b03      	ldr	r3, [pc, #12]	; (800793c <HAL_GetTick+0x14>)
 800792e:	681b      	ldr	r3, [r3, #0]
}
 8007930:	4618      	mov	r0, r3
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop
 800793c:	20002f4c 	.word	0x20002f4c

08007940 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007940:	b480      	push	{r7}
 8007942:	b085      	sub	sp, #20
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f003 0307 	and.w	r3, r3, #7
 800794e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007950:	4b0c      	ldr	r3, [pc, #48]	; (8007984 <__NVIC_SetPriorityGrouping+0x44>)
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007956:	68ba      	ldr	r2, [r7, #8]
 8007958:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800795c:	4013      	ands	r3, r2
 800795e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007968:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800796c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007970:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007972:	4a04      	ldr	r2, [pc, #16]	; (8007984 <__NVIC_SetPriorityGrouping+0x44>)
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	60d3      	str	r3, [r2, #12]
}
 8007978:	bf00      	nop
 800797a:	3714      	adds	r7, #20
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr
 8007984:	e000ed00 	.word	0xe000ed00

08007988 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007988:	b480      	push	{r7}
 800798a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800798c:	4b04      	ldr	r3, [pc, #16]	; (80079a0 <__NVIC_GetPriorityGrouping+0x18>)
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	0a1b      	lsrs	r3, r3, #8
 8007992:	f003 0307 	and.w	r3, r3, #7
}
 8007996:	4618      	mov	r0, r3
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr
 80079a0:	e000ed00 	.word	0xe000ed00

080079a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	4603      	mov	r3, r0
 80079ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	db0b      	blt.n	80079ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80079b6:	79fb      	ldrb	r3, [r7, #7]
 80079b8:	f003 021f 	and.w	r2, r3, #31
 80079bc:	4907      	ldr	r1, [pc, #28]	; (80079dc <__NVIC_EnableIRQ+0x38>)
 80079be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079c2:	095b      	lsrs	r3, r3, #5
 80079c4:	2001      	movs	r0, #1
 80079c6:	fa00 f202 	lsl.w	r2, r0, r2
 80079ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80079ce:	bf00      	nop
 80079d0:	370c      	adds	r7, #12
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr
 80079da:	bf00      	nop
 80079dc:	e000e100 	.word	0xe000e100

080079e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	4603      	mov	r3, r0
 80079e8:	6039      	str	r1, [r7, #0]
 80079ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	db0a      	blt.n	8007a0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	b2da      	uxtb	r2, r3
 80079f8:	490c      	ldr	r1, [pc, #48]	; (8007a2c <__NVIC_SetPriority+0x4c>)
 80079fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079fe:	0112      	lsls	r2, r2, #4
 8007a00:	b2d2      	uxtb	r2, r2
 8007a02:	440b      	add	r3, r1
 8007a04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007a08:	e00a      	b.n	8007a20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	b2da      	uxtb	r2, r3
 8007a0e:	4908      	ldr	r1, [pc, #32]	; (8007a30 <__NVIC_SetPriority+0x50>)
 8007a10:	79fb      	ldrb	r3, [r7, #7]
 8007a12:	f003 030f 	and.w	r3, r3, #15
 8007a16:	3b04      	subs	r3, #4
 8007a18:	0112      	lsls	r2, r2, #4
 8007a1a:	b2d2      	uxtb	r2, r2
 8007a1c:	440b      	add	r3, r1
 8007a1e:	761a      	strb	r2, [r3, #24]
}
 8007a20:	bf00      	nop
 8007a22:	370c      	adds	r7, #12
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr
 8007a2c:	e000e100 	.word	0xe000e100
 8007a30:	e000ed00 	.word	0xe000ed00

08007a34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b089      	sub	sp, #36	; 0x24
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f003 0307 	and.w	r3, r3, #7
 8007a46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	f1c3 0307 	rsb	r3, r3, #7
 8007a4e:	2b04      	cmp	r3, #4
 8007a50:	bf28      	it	cs
 8007a52:	2304      	movcs	r3, #4
 8007a54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007a56:	69fb      	ldr	r3, [r7, #28]
 8007a58:	3304      	adds	r3, #4
 8007a5a:	2b06      	cmp	r3, #6
 8007a5c:	d902      	bls.n	8007a64 <NVIC_EncodePriority+0x30>
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	3b03      	subs	r3, #3
 8007a62:	e000      	b.n	8007a66 <NVIC_EncodePriority+0x32>
 8007a64:	2300      	movs	r3, #0
 8007a66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a68:	f04f 32ff 	mov.w	r2, #4294967295
 8007a6c:	69bb      	ldr	r3, [r7, #24]
 8007a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a72:	43da      	mvns	r2, r3
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	401a      	ands	r2, r3
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	fa01 f303 	lsl.w	r3, r1, r3
 8007a86:	43d9      	mvns	r1, r3
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a8c:	4313      	orrs	r3, r2
         );
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3724      	adds	r7, #36	; 0x24
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr

08007a9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b082      	sub	sp, #8
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f7ff ff4c 	bl	8007940 <__NVIC_SetPriorityGrouping>
}
 8007aa8:	bf00      	nop
 8007aaa:	3708      	adds	r7, #8
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b086      	sub	sp, #24
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	607a      	str	r2, [r7, #4]
 8007abc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007ac2:	f7ff ff61 	bl	8007988 <__NVIC_GetPriorityGrouping>
 8007ac6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	68b9      	ldr	r1, [r7, #8]
 8007acc:	6978      	ldr	r0, [r7, #20]
 8007ace:	f7ff ffb1 	bl	8007a34 <NVIC_EncodePriority>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ad8:	4611      	mov	r1, r2
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7ff ff80 	bl	80079e0 <__NVIC_SetPriority>
}
 8007ae0:	bf00      	nop
 8007ae2:	3718      	adds	r7, #24
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	4603      	mov	r3, r0
 8007af0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7ff ff54 	bl	80079a4 <__NVIC_EnableIRQ>
}
 8007afc:	bf00      	nop
 8007afe:	3708      	adds	r7, #8
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b086      	sub	sp, #24
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007b10:	f7ff ff0a 	bl	8007928 <HAL_GetTick>
 8007b14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d101      	bne.n	8007b20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	e099      	b.n	8007c54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2202      	movs	r2, #2
 8007b24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f022 0201 	bic.w	r2, r2, #1
 8007b3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007b40:	e00f      	b.n	8007b62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007b42:	f7ff fef1 	bl	8007928 <HAL_GetTick>
 8007b46:	4602      	mov	r2, r0
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	1ad3      	subs	r3, r2, r3
 8007b4c:	2b05      	cmp	r3, #5
 8007b4e:	d908      	bls.n	8007b62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2220      	movs	r2, #32
 8007b54:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2203      	movs	r2, #3
 8007b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007b5e:	2303      	movs	r3, #3
 8007b60:	e078      	b.n	8007c54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f003 0301 	and.w	r3, r3, #1
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d1e8      	bne.n	8007b42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007b78:	697a      	ldr	r2, [r7, #20]
 8007b7a:	4b38      	ldr	r3, [pc, #224]	; (8007c5c <HAL_DMA_Init+0x158>)
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	685a      	ldr	r2, [r3, #4]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	699b      	ldr	r3, [r3, #24]
 8007ba0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ba6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6a1b      	ldr	r3, [r3, #32]
 8007bac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007bae:	697a      	ldr	r2, [r7, #20]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb8:	2b04      	cmp	r3, #4
 8007bba:	d107      	bne.n	8007bcc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	697a      	ldr	r2, [r7, #20]
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	697a      	ldr	r2, [r7, #20]
 8007bd2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	695b      	ldr	r3, [r3, #20]
 8007bda:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	f023 0307 	bic.w	r3, r3, #7
 8007be2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be8:	697a      	ldr	r2, [r7, #20]
 8007bea:	4313      	orrs	r3, r2
 8007bec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf2:	2b04      	cmp	r3, #4
 8007bf4:	d117      	bne.n	8007c26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bfa:	697a      	ldr	r2, [r7, #20]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00e      	beq.n	8007c26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 fb01 	bl	8008210 <DMA_CheckFifoParam>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d008      	beq.n	8007c26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2240      	movs	r2, #64	; 0x40
 8007c18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007c22:	2301      	movs	r3, #1
 8007c24:	e016      	b.n	8007c54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	697a      	ldr	r2, [r7, #20]
 8007c2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 fab8 	bl	80081a4 <DMA_CalcBaseAndBitshift>
 8007c34:	4603      	mov	r3, r0
 8007c36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c3c:	223f      	movs	r2, #63	; 0x3f
 8007c3e:	409a      	lsls	r2, r3
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007c52:	2300      	movs	r3, #0
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3718      	adds	r7, #24
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}
 8007c5c:	f010803f 	.word	0xf010803f

08007c60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b086      	sub	sp, #24
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	60b9      	str	r1, [r7, #8]
 8007c6a:	607a      	str	r2, [r7, #4]
 8007c6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c76:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d101      	bne.n	8007c86 <HAL_DMA_Start_IT+0x26>
 8007c82:	2302      	movs	r3, #2
 8007c84:	e040      	b.n	8007d08 <HAL_DMA_Start_IT+0xa8>
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d12f      	bne.n	8007cfa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2202      	movs	r2, #2
 8007c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	68b9      	ldr	r1, [r7, #8]
 8007cae:	68f8      	ldr	r0, [r7, #12]
 8007cb0:	f000 fa4a 	bl	8008148 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cb8:	223f      	movs	r2, #63	; 0x3f
 8007cba:	409a      	lsls	r2, r3
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f042 0216 	orr.w	r2, r2, #22
 8007cce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d007      	beq.n	8007ce8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f042 0208 	orr.w	r2, r2, #8
 8007ce6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f042 0201 	orr.w	r2, r2, #1
 8007cf6:	601a      	str	r2, [r3, #0]
 8007cf8:	e005      	b.n	8007d06 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007d02:	2302      	movs	r3, #2
 8007d04:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3718      	adds	r7, #24
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b084      	sub	sp, #16
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d1c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007d1e:	f7ff fe03 	bl	8007928 <HAL_GetTick>
 8007d22:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	2b02      	cmp	r3, #2
 8007d2e:	d008      	beq.n	8007d42 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2280      	movs	r2, #128	; 0x80
 8007d34:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e052      	b.n	8007de8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f022 0216 	bic.w	r2, r2, #22
 8007d50:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	695a      	ldr	r2, [r3, #20]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d60:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d103      	bne.n	8007d72 <HAL_DMA_Abort+0x62>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d007      	beq.n	8007d82 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f022 0208 	bic.w	r2, r2, #8
 8007d80:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f022 0201 	bic.w	r2, r2, #1
 8007d90:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007d92:	e013      	b.n	8007dbc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007d94:	f7ff fdc8 	bl	8007928 <HAL_GetTick>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	1ad3      	subs	r3, r2, r3
 8007d9e:	2b05      	cmp	r3, #5
 8007da0:	d90c      	bls.n	8007dbc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2220      	movs	r2, #32
 8007da6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2203      	movs	r2, #3
 8007dac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007db8:	2303      	movs	r3, #3
 8007dba:	e015      	b.n	8007de8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f003 0301 	and.w	r3, r3, #1
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d1e4      	bne.n	8007d94 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dce:	223f      	movs	r2, #63	; 0x3f
 8007dd0:	409a      	lsls	r2, r3
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2201      	movs	r2, #1
 8007dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3710      	adds	r7, #16
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	2b02      	cmp	r3, #2
 8007e02:	d004      	beq.n	8007e0e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2280      	movs	r2, #128	; 0x80
 8007e08:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e00c      	b.n	8007e28 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2205      	movs	r2, #5
 8007e12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f022 0201 	bic.w	r2, r2, #1
 8007e24:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007e26:	2300      	movs	r3, #0
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	370c      	adds	r7, #12
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b086      	sub	sp, #24
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007e40:	4b8e      	ldr	r3, [pc, #568]	; (800807c <HAL_DMA_IRQHandler+0x248>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a8e      	ldr	r2, [pc, #568]	; (8008080 <HAL_DMA_IRQHandler+0x24c>)
 8007e46:	fba2 2303 	umull	r2, r3, r2, r3
 8007e4a:	0a9b      	lsrs	r3, r3, #10
 8007e4c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e52:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e5e:	2208      	movs	r2, #8
 8007e60:	409a      	lsls	r2, r3
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	4013      	ands	r3, r2
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d01a      	beq.n	8007ea0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f003 0304 	and.w	r3, r3, #4
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d013      	beq.n	8007ea0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f022 0204 	bic.w	r2, r2, #4
 8007e86:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e8c:	2208      	movs	r2, #8
 8007e8e:	409a      	lsls	r2, r3
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e98:	f043 0201 	orr.w	r2, r3, #1
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	409a      	lsls	r2, r3
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	4013      	ands	r3, r2
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d012      	beq.n	8007ed6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	695b      	ldr	r3, [r3, #20]
 8007eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d00b      	beq.n	8007ed6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	409a      	lsls	r2, r3
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ece:	f043 0202 	orr.w	r2, r3, #2
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eda:	2204      	movs	r2, #4
 8007edc:	409a      	lsls	r2, r3
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	4013      	ands	r3, r2
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d012      	beq.n	8007f0c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f003 0302 	and.w	r3, r3, #2
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00b      	beq.n	8007f0c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ef8:	2204      	movs	r2, #4
 8007efa:	409a      	lsls	r2, r3
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f04:	f043 0204 	orr.w	r2, r3, #4
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f10:	2210      	movs	r2, #16
 8007f12:	409a      	lsls	r2, r3
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	4013      	ands	r3, r2
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d043      	beq.n	8007fa4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f003 0308 	and.w	r3, r3, #8
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d03c      	beq.n	8007fa4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f2e:	2210      	movs	r2, #16
 8007f30:	409a      	lsls	r2, r3
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d018      	beq.n	8007f76 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d108      	bne.n	8007f64 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d024      	beq.n	8007fa4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	4798      	blx	r3
 8007f62:	e01f      	b.n	8007fa4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d01b      	beq.n	8007fa4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	4798      	blx	r3
 8007f74:	e016      	b.n	8007fa4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d107      	bne.n	8007f94 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f022 0208 	bic.w	r2, r2, #8
 8007f92:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d003      	beq.n	8007fa4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fa8:	2220      	movs	r2, #32
 8007faa:	409a      	lsls	r2, r3
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	4013      	ands	r3, r2
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	f000 808f 	beq.w	80080d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f003 0310 	and.w	r3, r3, #16
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	f000 8087 	beq.w	80080d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fca:	2220      	movs	r2, #32
 8007fcc:	409a      	lsls	r2, r3
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	2b05      	cmp	r3, #5
 8007fdc:	d136      	bne.n	800804c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f022 0216 	bic.w	r2, r2, #22
 8007fec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	695a      	ldr	r2, [r3, #20]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ffc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008002:	2b00      	cmp	r3, #0
 8008004:	d103      	bne.n	800800e <HAL_DMA_IRQHandler+0x1da>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800800a:	2b00      	cmp	r3, #0
 800800c:	d007      	beq.n	800801e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f022 0208 	bic.w	r2, r2, #8
 800801c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008022:	223f      	movs	r2, #63	; 0x3f
 8008024:	409a      	lsls	r2, r3
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2201      	movs	r2, #1
 800802e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800803e:	2b00      	cmp	r3, #0
 8008040:	d07e      	beq.n	8008140 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	4798      	blx	r3
        }
        return;
 800804a:	e079      	b.n	8008140 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008056:	2b00      	cmp	r3, #0
 8008058:	d01d      	beq.n	8008096 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008064:	2b00      	cmp	r3, #0
 8008066:	d10d      	bne.n	8008084 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800806c:	2b00      	cmp	r3, #0
 800806e:	d031      	beq.n	80080d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	4798      	blx	r3
 8008078:	e02c      	b.n	80080d4 <HAL_DMA_IRQHandler+0x2a0>
 800807a:	bf00      	nop
 800807c:	20000024 	.word	0x20000024
 8008080:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008088:	2b00      	cmp	r3, #0
 800808a:	d023      	beq.n	80080d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	4798      	blx	r3
 8008094:	e01e      	b.n	80080d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d10f      	bne.n	80080c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f022 0210 	bic.w	r2, r2, #16
 80080b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d003      	beq.n	80080d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d032      	beq.n	8008142 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080e0:	f003 0301 	and.w	r3, r3, #1
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d022      	beq.n	800812e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2205      	movs	r2, #5
 80080ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f022 0201 	bic.w	r2, r2, #1
 80080fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	3301      	adds	r3, #1
 8008104:	60bb      	str	r3, [r7, #8]
 8008106:	697a      	ldr	r2, [r7, #20]
 8008108:	429a      	cmp	r2, r3
 800810a:	d307      	bcc.n	800811c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f003 0301 	and.w	r3, r3, #1
 8008116:	2b00      	cmp	r3, #0
 8008118:	d1f2      	bne.n	8008100 <HAL_DMA_IRQHandler+0x2cc>
 800811a:	e000      	b.n	800811e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800811c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2201      	movs	r2, #1
 8008122:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008132:	2b00      	cmp	r3, #0
 8008134:	d005      	beq.n	8008142 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	4798      	blx	r3
 800813e:	e000      	b.n	8008142 <HAL_DMA_IRQHandler+0x30e>
        return;
 8008140:	bf00      	nop
    }
  }
}
 8008142:	3718      	adds	r7, #24
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008148:	b480      	push	{r7}
 800814a:	b085      	sub	sp, #20
 800814c:	af00      	add	r7, sp, #0
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	60b9      	str	r1, [r7, #8]
 8008152:	607a      	str	r2, [r7, #4]
 8008154:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008164:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	683a      	ldr	r2, [r7, #0]
 800816c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	2b40      	cmp	r3, #64	; 0x40
 8008174:	d108      	bne.n	8008188 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	68ba      	ldr	r2, [r7, #8]
 8008184:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008186:	e007      	b.n	8008198 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	68ba      	ldr	r2, [r7, #8]
 800818e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	60da      	str	r2, [r3, #12]
}
 8008198:	bf00      	nop
 800819a:	3714      	adds	r7, #20
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b085      	sub	sp, #20
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	3b10      	subs	r3, #16
 80081b4:	4a14      	ldr	r2, [pc, #80]	; (8008208 <DMA_CalcBaseAndBitshift+0x64>)
 80081b6:	fba2 2303 	umull	r2, r3, r2, r3
 80081ba:	091b      	lsrs	r3, r3, #4
 80081bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80081be:	4a13      	ldr	r2, [pc, #76]	; (800820c <DMA_CalcBaseAndBitshift+0x68>)
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	4413      	add	r3, r2
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	461a      	mov	r2, r3
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2b03      	cmp	r3, #3
 80081d0:	d909      	bls.n	80081e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80081da:	f023 0303 	bic.w	r3, r3, #3
 80081de:	1d1a      	adds	r2, r3, #4
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	659a      	str	r2, [r3, #88]	; 0x58
 80081e4:	e007      	b.n	80081f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80081ee:	f023 0303 	bic.w	r3, r3, #3
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3714      	adds	r7, #20
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr
 8008206:	bf00      	nop
 8008208:	aaaaaaab 	.word	0xaaaaaaab
 800820c:	0800f3f0 	.word	0x0800f3f0

08008210 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008210:	b480      	push	{r7}
 8008212:	b085      	sub	sp, #20
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008218:	2300      	movs	r3, #0
 800821a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008220:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	699b      	ldr	r3, [r3, #24]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d11f      	bne.n	800826a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	2b03      	cmp	r3, #3
 800822e:	d856      	bhi.n	80082de <DMA_CheckFifoParam+0xce>
 8008230:	a201      	add	r2, pc, #4	; (adr r2, 8008238 <DMA_CheckFifoParam+0x28>)
 8008232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008236:	bf00      	nop
 8008238:	08008249 	.word	0x08008249
 800823c:	0800825b 	.word	0x0800825b
 8008240:	08008249 	.word	0x08008249
 8008244:	080082df 	.word	0x080082df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800824c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008250:	2b00      	cmp	r3, #0
 8008252:	d046      	beq.n	80082e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008254:	2301      	movs	r3, #1
 8008256:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008258:	e043      	b.n	80082e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800825e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008262:	d140      	bne.n	80082e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008264:	2301      	movs	r3, #1
 8008266:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008268:	e03d      	b.n	80082e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	699b      	ldr	r3, [r3, #24]
 800826e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008272:	d121      	bne.n	80082b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	2b03      	cmp	r3, #3
 8008278:	d837      	bhi.n	80082ea <DMA_CheckFifoParam+0xda>
 800827a:	a201      	add	r2, pc, #4	; (adr r2, 8008280 <DMA_CheckFifoParam+0x70>)
 800827c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008280:	08008291 	.word	0x08008291
 8008284:	08008297 	.word	0x08008297
 8008288:	08008291 	.word	0x08008291
 800828c:	080082a9 	.word	0x080082a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	73fb      	strb	r3, [r7, #15]
      break;
 8008294:	e030      	b.n	80082f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800829a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d025      	beq.n	80082ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80082a2:	2301      	movs	r3, #1
 80082a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80082a6:	e022      	b.n	80082ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80082b0:	d11f      	bne.n	80082f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80082b6:	e01c      	b.n	80082f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	2b02      	cmp	r3, #2
 80082bc:	d903      	bls.n	80082c6 <DMA_CheckFifoParam+0xb6>
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	2b03      	cmp	r3, #3
 80082c2:	d003      	beq.n	80082cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80082c4:	e018      	b.n	80082f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	73fb      	strb	r3, [r7, #15]
      break;
 80082ca:	e015      	b.n	80082f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d00e      	beq.n	80082f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	73fb      	strb	r3, [r7, #15]
      break;
 80082dc:	e00b      	b.n	80082f6 <DMA_CheckFifoParam+0xe6>
      break;
 80082de:	bf00      	nop
 80082e0:	e00a      	b.n	80082f8 <DMA_CheckFifoParam+0xe8>
      break;
 80082e2:	bf00      	nop
 80082e4:	e008      	b.n	80082f8 <DMA_CheckFifoParam+0xe8>
      break;
 80082e6:	bf00      	nop
 80082e8:	e006      	b.n	80082f8 <DMA_CheckFifoParam+0xe8>
      break;
 80082ea:	bf00      	nop
 80082ec:	e004      	b.n	80082f8 <DMA_CheckFifoParam+0xe8>
      break;
 80082ee:	bf00      	nop
 80082f0:	e002      	b.n	80082f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80082f2:	bf00      	nop
 80082f4:	e000      	b.n	80082f8 <DMA_CheckFifoParam+0xe8>
      break;
 80082f6:	bf00      	nop
    }
  } 
  
  return status; 
 80082f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3714      	adds	r7, #20
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr
 8008306:	bf00      	nop

08008308 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008308:	b480      	push	{r7}
 800830a:	b089      	sub	sp, #36	; 0x24
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008312:	2300      	movs	r3, #0
 8008314:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008316:	2300      	movs	r3, #0
 8008318:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800831a:	2300      	movs	r3, #0
 800831c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800831e:	2300      	movs	r3, #0
 8008320:	61fb      	str	r3, [r7, #28]
 8008322:	e16b      	b.n	80085fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008324:	2201      	movs	r2, #1
 8008326:	69fb      	ldr	r3, [r7, #28]
 8008328:	fa02 f303 	lsl.w	r3, r2, r3
 800832c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	697a      	ldr	r2, [r7, #20]
 8008334:	4013      	ands	r3, r2
 8008336:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008338:	693a      	ldr	r2, [r7, #16]
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	429a      	cmp	r2, r3
 800833e:	f040 815a 	bne.w	80085f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	f003 0303 	and.w	r3, r3, #3
 800834a:	2b01      	cmp	r3, #1
 800834c:	d005      	beq.n	800835a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008356:	2b02      	cmp	r3, #2
 8008358:	d130      	bne.n	80083bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	005b      	lsls	r3, r3, #1
 8008364:	2203      	movs	r2, #3
 8008366:	fa02 f303 	lsl.w	r3, r2, r3
 800836a:	43db      	mvns	r3, r3
 800836c:	69ba      	ldr	r2, [r7, #24]
 800836e:	4013      	ands	r3, r2
 8008370:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	68da      	ldr	r2, [r3, #12]
 8008376:	69fb      	ldr	r3, [r7, #28]
 8008378:	005b      	lsls	r3, r3, #1
 800837a:	fa02 f303 	lsl.w	r3, r2, r3
 800837e:	69ba      	ldr	r2, [r7, #24]
 8008380:	4313      	orrs	r3, r2
 8008382:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	69ba      	ldr	r2, [r7, #24]
 8008388:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008390:	2201      	movs	r2, #1
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	fa02 f303 	lsl.w	r3, r2, r3
 8008398:	43db      	mvns	r3, r3
 800839a:	69ba      	ldr	r2, [r7, #24]
 800839c:	4013      	ands	r3, r2
 800839e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	091b      	lsrs	r3, r3, #4
 80083a6:	f003 0201 	and.w	r2, r3, #1
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	fa02 f303 	lsl.w	r3, r2, r3
 80083b0:	69ba      	ldr	r2, [r7, #24]
 80083b2:	4313      	orrs	r3, r2
 80083b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	69ba      	ldr	r2, [r7, #24]
 80083ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	f003 0303 	and.w	r3, r3, #3
 80083c4:	2b03      	cmp	r3, #3
 80083c6:	d017      	beq.n	80083f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	68db      	ldr	r3, [r3, #12]
 80083cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80083ce:	69fb      	ldr	r3, [r7, #28]
 80083d0:	005b      	lsls	r3, r3, #1
 80083d2:	2203      	movs	r2, #3
 80083d4:	fa02 f303 	lsl.w	r3, r2, r3
 80083d8:	43db      	mvns	r3, r3
 80083da:	69ba      	ldr	r2, [r7, #24]
 80083dc:	4013      	ands	r3, r2
 80083de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	689a      	ldr	r2, [r3, #8]
 80083e4:	69fb      	ldr	r3, [r7, #28]
 80083e6:	005b      	lsls	r3, r3, #1
 80083e8:	fa02 f303 	lsl.w	r3, r2, r3
 80083ec:	69ba      	ldr	r2, [r7, #24]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	69ba      	ldr	r2, [r7, #24]
 80083f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	f003 0303 	and.w	r3, r3, #3
 8008400:	2b02      	cmp	r3, #2
 8008402:	d123      	bne.n	800844c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008404:	69fb      	ldr	r3, [r7, #28]
 8008406:	08da      	lsrs	r2, r3, #3
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	3208      	adds	r2, #8
 800840c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008410:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008412:	69fb      	ldr	r3, [r7, #28]
 8008414:	f003 0307 	and.w	r3, r3, #7
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	220f      	movs	r2, #15
 800841c:	fa02 f303 	lsl.w	r3, r2, r3
 8008420:	43db      	mvns	r3, r3
 8008422:	69ba      	ldr	r2, [r7, #24]
 8008424:	4013      	ands	r3, r2
 8008426:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	691a      	ldr	r2, [r3, #16]
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	f003 0307 	and.w	r3, r3, #7
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	fa02 f303 	lsl.w	r3, r2, r3
 8008438:	69ba      	ldr	r2, [r7, #24]
 800843a:	4313      	orrs	r3, r2
 800843c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800843e:	69fb      	ldr	r3, [r7, #28]
 8008440:	08da      	lsrs	r2, r3, #3
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	3208      	adds	r2, #8
 8008446:	69b9      	ldr	r1, [r7, #24]
 8008448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008452:	69fb      	ldr	r3, [r7, #28]
 8008454:	005b      	lsls	r3, r3, #1
 8008456:	2203      	movs	r2, #3
 8008458:	fa02 f303 	lsl.w	r3, r2, r3
 800845c:	43db      	mvns	r3, r3
 800845e:	69ba      	ldr	r2, [r7, #24]
 8008460:	4013      	ands	r3, r2
 8008462:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	f003 0203 	and.w	r2, r3, #3
 800846c:	69fb      	ldr	r3, [r7, #28]
 800846e:	005b      	lsls	r3, r3, #1
 8008470:	fa02 f303 	lsl.w	r3, r2, r3
 8008474:	69ba      	ldr	r2, [r7, #24]
 8008476:	4313      	orrs	r3, r2
 8008478:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	69ba      	ldr	r2, [r7, #24]
 800847e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008488:	2b00      	cmp	r3, #0
 800848a:	f000 80b4 	beq.w	80085f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800848e:	2300      	movs	r3, #0
 8008490:	60fb      	str	r3, [r7, #12]
 8008492:	4b60      	ldr	r3, [pc, #384]	; (8008614 <HAL_GPIO_Init+0x30c>)
 8008494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008496:	4a5f      	ldr	r2, [pc, #380]	; (8008614 <HAL_GPIO_Init+0x30c>)
 8008498:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800849c:	6453      	str	r3, [r2, #68]	; 0x44
 800849e:	4b5d      	ldr	r3, [pc, #372]	; (8008614 <HAL_GPIO_Init+0x30c>)
 80084a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084a6:	60fb      	str	r3, [r7, #12]
 80084a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80084aa:	4a5b      	ldr	r2, [pc, #364]	; (8008618 <HAL_GPIO_Init+0x310>)
 80084ac:	69fb      	ldr	r3, [r7, #28]
 80084ae:	089b      	lsrs	r3, r3, #2
 80084b0:	3302      	adds	r3, #2
 80084b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80084b8:	69fb      	ldr	r3, [r7, #28]
 80084ba:	f003 0303 	and.w	r3, r3, #3
 80084be:	009b      	lsls	r3, r3, #2
 80084c0:	220f      	movs	r2, #15
 80084c2:	fa02 f303 	lsl.w	r3, r2, r3
 80084c6:	43db      	mvns	r3, r3
 80084c8:	69ba      	ldr	r2, [r7, #24]
 80084ca:	4013      	ands	r3, r2
 80084cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	4a52      	ldr	r2, [pc, #328]	; (800861c <HAL_GPIO_Init+0x314>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d02b      	beq.n	800852e <HAL_GPIO_Init+0x226>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	4a51      	ldr	r2, [pc, #324]	; (8008620 <HAL_GPIO_Init+0x318>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d025      	beq.n	800852a <HAL_GPIO_Init+0x222>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	4a50      	ldr	r2, [pc, #320]	; (8008624 <HAL_GPIO_Init+0x31c>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d01f      	beq.n	8008526 <HAL_GPIO_Init+0x21e>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	4a4f      	ldr	r2, [pc, #316]	; (8008628 <HAL_GPIO_Init+0x320>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d019      	beq.n	8008522 <HAL_GPIO_Init+0x21a>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4a4e      	ldr	r2, [pc, #312]	; (800862c <HAL_GPIO_Init+0x324>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d013      	beq.n	800851e <HAL_GPIO_Init+0x216>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	4a4d      	ldr	r2, [pc, #308]	; (8008630 <HAL_GPIO_Init+0x328>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d00d      	beq.n	800851a <HAL_GPIO_Init+0x212>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	4a4c      	ldr	r2, [pc, #304]	; (8008634 <HAL_GPIO_Init+0x32c>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d007      	beq.n	8008516 <HAL_GPIO_Init+0x20e>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	4a4b      	ldr	r2, [pc, #300]	; (8008638 <HAL_GPIO_Init+0x330>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d101      	bne.n	8008512 <HAL_GPIO_Init+0x20a>
 800850e:	2307      	movs	r3, #7
 8008510:	e00e      	b.n	8008530 <HAL_GPIO_Init+0x228>
 8008512:	2308      	movs	r3, #8
 8008514:	e00c      	b.n	8008530 <HAL_GPIO_Init+0x228>
 8008516:	2306      	movs	r3, #6
 8008518:	e00a      	b.n	8008530 <HAL_GPIO_Init+0x228>
 800851a:	2305      	movs	r3, #5
 800851c:	e008      	b.n	8008530 <HAL_GPIO_Init+0x228>
 800851e:	2304      	movs	r3, #4
 8008520:	e006      	b.n	8008530 <HAL_GPIO_Init+0x228>
 8008522:	2303      	movs	r3, #3
 8008524:	e004      	b.n	8008530 <HAL_GPIO_Init+0x228>
 8008526:	2302      	movs	r3, #2
 8008528:	e002      	b.n	8008530 <HAL_GPIO_Init+0x228>
 800852a:	2301      	movs	r3, #1
 800852c:	e000      	b.n	8008530 <HAL_GPIO_Init+0x228>
 800852e:	2300      	movs	r3, #0
 8008530:	69fa      	ldr	r2, [r7, #28]
 8008532:	f002 0203 	and.w	r2, r2, #3
 8008536:	0092      	lsls	r2, r2, #2
 8008538:	4093      	lsls	r3, r2
 800853a:	69ba      	ldr	r2, [r7, #24]
 800853c:	4313      	orrs	r3, r2
 800853e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008540:	4935      	ldr	r1, [pc, #212]	; (8008618 <HAL_GPIO_Init+0x310>)
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	089b      	lsrs	r3, r3, #2
 8008546:	3302      	adds	r3, #2
 8008548:	69ba      	ldr	r2, [r7, #24]
 800854a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800854e:	4b3b      	ldr	r3, [pc, #236]	; (800863c <HAL_GPIO_Init+0x334>)
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	43db      	mvns	r3, r3
 8008558:	69ba      	ldr	r2, [r7, #24]
 800855a:	4013      	ands	r3, r2
 800855c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008566:	2b00      	cmp	r3, #0
 8008568:	d003      	beq.n	8008572 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800856a:	69ba      	ldr	r2, [r7, #24]
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	4313      	orrs	r3, r2
 8008570:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008572:	4a32      	ldr	r2, [pc, #200]	; (800863c <HAL_GPIO_Init+0x334>)
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008578:	4b30      	ldr	r3, [pc, #192]	; (800863c <HAL_GPIO_Init+0x334>)
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	43db      	mvns	r3, r3
 8008582:	69ba      	ldr	r2, [r7, #24]
 8008584:	4013      	ands	r3, r2
 8008586:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008590:	2b00      	cmp	r3, #0
 8008592:	d003      	beq.n	800859c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008594:	69ba      	ldr	r2, [r7, #24]
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	4313      	orrs	r3, r2
 800859a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800859c:	4a27      	ldr	r2, [pc, #156]	; (800863c <HAL_GPIO_Init+0x334>)
 800859e:	69bb      	ldr	r3, [r7, #24]
 80085a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80085a2:	4b26      	ldr	r3, [pc, #152]	; (800863c <HAL_GPIO_Init+0x334>)
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	43db      	mvns	r3, r3
 80085ac:	69ba      	ldr	r2, [r7, #24]
 80085ae:	4013      	ands	r3, r2
 80085b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d003      	beq.n	80085c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80085be:	69ba      	ldr	r2, [r7, #24]
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	4313      	orrs	r3, r2
 80085c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80085c6:	4a1d      	ldr	r2, [pc, #116]	; (800863c <HAL_GPIO_Init+0x334>)
 80085c8:	69bb      	ldr	r3, [r7, #24]
 80085ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80085cc:	4b1b      	ldr	r3, [pc, #108]	; (800863c <HAL_GPIO_Init+0x334>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	43db      	mvns	r3, r3
 80085d6:	69ba      	ldr	r2, [r7, #24]
 80085d8:	4013      	ands	r3, r2
 80085da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d003      	beq.n	80085f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80085e8:	69ba      	ldr	r2, [r7, #24]
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	4313      	orrs	r3, r2
 80085ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80085f0:	4a12      	ldr	r2, [pc, #72]	; (800863c <HAL_GPIO_Init+0x334>)
 80085f2:	69bb      	ldr	r3, [r7, #24]
 80085f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80085f6:	69fb      	ldr	r3, [r7, #28]
 80085f8:	3301      	adds	r3, #1
 80085fa:	61fb      	str	r3, [r7, #28]
 80085fc:	69fb      	ldr	r3, [r7, #28]
 80085fe:	2b0f      	cmp	r3, #15
 8008600:	f67f ae90 	bls.w	8008324 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008604:	bf00      	nop
 8008606:	bf00      	nop
 8008608:	3724      	adds	r7, #36	; 0x24
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr
 8008612:	bf00      	nop
 8008614:	40023800 	.word	0x40023800
 8008618:	40013800 	.word	0x40013800
 800861c:	40020000 	.word	0x40020000
 8008620:	40020400 	.word	0x40020400
 8008624:	40020800 	.word	0x40020800
 8008628:	40020c00 	.word	0x40020c00
 800862c:	40021000 	.word	0x40021000
 8008630:	40021400 	.word	0x40021400
 8008634:	40021800 	.word	0x40021800
 8008638:	40021c00 	.word	0x40021c00
 800863c:	40013c00 	.word	0x40013c00

08008640 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	460b      	mov	r3, r1
 800864a:	807b      	strh	r3, [r7, #2]
 800864c:	4613      	mov	r3, r2
 800864e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008650:	787b      	ldrb	r3, [r7, #1]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d003      	beq.n	800865e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008656:	887a      	ldrh	r2, [r7, #2]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800865c:	e003      	b.n	8008666 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800865e:	887b      	ldrh	r3, [r7, #2]
 8008660:	041a      	lsls	r2, r3, #16
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	619a      	str	r2, [r3, #24]
}
 8008666:	bf00      	nop
 8008668:	370c      	adds	r7, #12
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr
	...

08008674 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b086      	sub	sp, #24
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d101      	bne.n	8008686 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008682:	2301      	movs	r3, #1
 8008684:	e267      	b.n	8008b56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f003 0301 	and.w	r3, r3, #1
 800868e:	2b00      	cmp	r3, #0
 8008690:	d075      	beq.n	800877e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008692:	4b88      	ldr	r3, [pc, #544]	; (80088b4 <HAL_RCC_OscConfig+0x240>)
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	f003 030c 	and.w	r3, r3, #12
 800869a:	2b04      	cmp	r3, #4
 800869c:	d00c      	beq.n	80086b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800869e:	4b85      	ldr	r3, [pc, #532]	; (80088b4 <HAL_RCC_OscConfig+0x240>)
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80086a6:	2b08      	cmp	r3, #8
 80086a8:	d112      	bne.n	80086d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80086aa:	4b82      	ldr	r3, [pc, #520]	; (80088b4 <HAL_RCC_OscConfig+0x240>)
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086b6:	d10b      	bne.n	80086d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086b8:	4b7e      	ldr	r3, [pc, #504]	; (80088b4 <HAL_RCC_OscConfig+0x240>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d05b      	beq.n	800877c <HAL_RCC_OscConfig+0x108>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d157      	bne.n	800877c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80086cc:	2301      	movs	r3, #1
 80086ce:	e242      	b.n	8008b56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086d8:	d106      	bne.n	80086e8 <HAL_RCC_OscConfig+0x74>
 80086da:	4b76      	ldr	r3, [pc, #472]	; (80088b4 <HAL_RCC_OscConfig+0x240>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a75      	ldr	r2, [pc, #468]	; (80088b4 <HAL_RCC_OscConfig+0x240>)
 80086e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086e4:	6013      	str	r3, [r2, #0]
 80086e6:	e01d      	b.n	8008724 <HAL_RCC_OscConfig+0xb0>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80086f0:	d10c      	bne.n	800870c <HAL_RCC_OscConfig+0x98>
 80086f2:	4b70      	ldr	r3, [pc, #448]	; (80088b4 <HAL_RCC_OscConfig+0x240>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a6f      	ldr	r2, [pc, #444]	; (80088b4 <HAL_RCC_OscConfig+0x240>)
 80086f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80086fc:	6013      	str	r3, [r2, #0]
 80086fe:	4b6d      	ldr	r3, [pc, #436]	; (80088b4 <HAL_RCC_OscConfig+0x240>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a6c      	ldr	r2, [pc, #432]	; (80088b4 <HAL_RCC_OscConfig+0x240>)
 8008704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008708:	6013      	str	r3, [r2, #0]
 800870a:	e00b      	b.n	8008724 <HAL_RCC_OscConfig+0xb0>
 800870c:	4b69      	ldr	r3, [pc, #420]	; (80088b4 <HAL_RCC_OscConfig+0x240>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a68      	ldr	r2, [pc, #416]	; (80088b4 <HAL_RCC_OscConfig+0x240>)
 8008712:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008716:	6013      	str	r3, [r2, #0]
 8008718:	4b66      	ldr	r3, [pc, #408]	; (80088b4 <HAL_RCC_OscConfig+0x240>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a65      	ldr	r2, [pc, #404]	; (80088b4 <HAL_RCC_OscConfig+0x240>)
 800871e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008722:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d013      	beq.n	8008754 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800872c:	f7ff f8fc 	bl	8007928 <HAL_GetTick>
 8008730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008732:	e008      	b.n	8008746 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008734:	f7ff f8f8 	bl	8007928 <HAL_GetTick>
 8008738:	4602      	mov	r2, r0
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	1ad3      	subs	r3, r2, r3
 800873e:	2b64      	cmp	r3, #100	; 0x64
 8008740:	d901      	bls.n	8008746 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008742:	2303      	movs	r3, #3
 8008744:	e207      	b.n	8008b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008746:	4b5b      	ldr	r3, [pc, #364]	; (80088b4 <HAL_RCC_OscConfig+0x240>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800874e:	2b00      	cmp	r3, #0
 8008750:	d0f0      	beq.n	8008734 <HAL_RCC_OscConfig+0xc0>
 8008752:	e014      	b.n	800877e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008754:	f7ff f8e8 	bl	8007928 <HAL_GetTick>
 8008758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800875a:	e008      	b.n	800876e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800875c:	f7ff f8e4 	bl	8007928 <HAL_GetTick>
 8008760:	4602      	mov	r2, r0
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	1ad3      	subs	r3, r2, r3
 8008766:	2b64      	cmp	r3, #100	; 0x64
 8008768:	d901      	bls.n	800876e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800876a:	2303      	movs	r3, #3
 800876c:	e1f3      	b.n	8008b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800876e:	4b51      	ldr	r3, [pc, #324]	; (80088b4 <HAL_RCC_OscConfig+0x240>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008776:	2b00      	cmp	r3, #0
 8008778:	d1f0      	bne.n	800875c <HAL_RCC_OscConfig+0xe8>
 800877a:	e000      	b.n	800877e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800877c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f003 0302 	and.w	r3, r3, #2
 8008786:	2b00      	cmp	r3, #0
 8008788:	d063      	beq.n	8008852 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800878a:	4b4a      	ldr	r3, [pc, #296]	; (80088b4 <HAL_RCC_OscConfig+0x240>)
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	f003 030c 	and.w	r3, r3, #12
 8008792:	2b00      	cmp	r3, #0
 8008794:	d00b      	beq.n	80087ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008796:	4b47      	ldr	r3, [pc, #284]	; (80088b4 <HAL_RCC_OscConfig+0x240>)
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800879e:	2b08      	cmp	r3, #8
 80087a0:	d11c      	bne.n	80087dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80087a2:	4b44      	ldr	r3, [pc, #272]	; (80088b4 <HAL_RCC_OscConfig+0x240>)
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d116      	bne.n	80087dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80087ae:	4b41      	ldr	r3, [pc, #260]	; (80088b4 <HAL_RCC_OscConfig+0x240>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f003 0302 	and.w	r3, r3, #2
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d005      	beq.n	80087c6 <HAL_RCC_OscConfig+0x152>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	68db      	ldr	r3, [r3, #12]
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d001      	beq.n	80087c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
 80087c4:	e1c7      	b.n	8008b56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087c6:	4b3b      	ldr	r3, [pc, #236]	; (80088b4 <HAL_RCC_OscConfig+0x240>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	691b      	ldr	r3, [r3, #16]
 80087d2:	00db      	lsls	r3, r3, #3
 80087d4:	4937      	ldr	r1, [pc, #220]	; (80088b4 <HAL_RCC_OscConfig+0x240>)
 80087d6:	4313      	orrs	r3, r2
 80087d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80087da:	e03a      	b.n	8008852 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	68db      	ldr	r3, [r3, #12]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d020      	beq.n	8008826 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80087e4:	4b34      	ldr	r3, [pc, #208]	; (80088b8 <HAL_RCC_OscConfig+0x244>)
 80087e6:	2201      	movs	r2, #1
 80087e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087ea:	f7ff f89d 	bl	8007928 <HAL_GetTick>
 80087ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087f0:	e008      	b.n	8008804 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80087f2:	f7ff f899 	bl	8007928 <HAL_GetTick>
 80087f6:	4602      	mov	r2, r0
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	1ad3      	subs	r3, r2, r3
 80087fc:	2b02      	cmp	r3, #2
 80087fe:	d901      	bls.n	8008804 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008800:	2303      	movs	r3, #3
 8008802:	e1a8      	b.n	8008b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008804:	4b2b      	ldr	r3, [pc, #172]	; (80088b4 <HAL_RCC_OscConfig+0x240>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f003 0302 	and.w	r3, r3, #2
 800880c:	2b00      	cmp	r3, #0
 800880e:	d0f0      	beq.n	80087f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008810:	4b28      	ldr	r3, [pc, #160]	; (80088b4 <HAL_RCC_OscConfig+0x240>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	691b      	ldr	r3, [r3, #16]
 800881c:	00db      	lsls	r3, r3, #3
 800881e:	4925      	ldr	r1, [pc, #148]	; (80088b4 <HAL_RCC_OscConfig+0x240>)
 8008820:	4313      	orrs	r3, r2
 8008822:	600b      	str	r3, [r1, #0]
 8008824:	e015      	b.n	8008852 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008826:	4b24      	ldr	r3, [pc, #144]	; (80088b8 <HAL_RCC_OscConfig+0x244>)
 8008828:	2200      	movs	r2, #0
 800882a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800882c:	f7ff f87c 	bl	8007928 <HAL_GetTick>
 8008830:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008832:	e008      	b.n	8008846 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008834:	f7ff f878 	bl	8007928 <HAL_GetTick>
 8008838:	4602      	mov	r2, r0
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	1ad3      	subs	r3, r2, r3
 800883e:	2b02      	cmp	r3, #2
 8008840:	d901      	bls.n	8008846 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008842:	2303      	movs	r3, #3
 8008844:	e187      	b.n	8008b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008846:	4b1b      	ldr	r3, [pc, #108]	; (80088b4 <HAL_RCC_OscConfig+0x240>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f003 0302 	and.w	r3, r3, #2
 800884e:	2b00      	cmp	r3, #0
 8008850:	d1f0      	bne.n	8008834 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f003 0308 	and.w	r3, r3, #8
 800885a:	2b00      	cmp	r3, #0
 800885c:	d036      	beq.n	80088cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	695b      	ldr	r3, [r3, #20]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d016      	beq.n	8008894 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008866:	4b15      	ldr	r3, [pc, #84]	; (80088bc <HAL_RCC_OscConfig+0x248>)
 8008868:	2201      	movs	r2, #1
 800886a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800886c:	f7ff f85c 	bl	8007928 <HAL_GetTick>
 8008870:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008872:	e008      	b.n	8008886 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008874:	f7ff f858 	bl	8007928 <HAL_GetTick>
 8008878:	4602      	mov	r2, r0
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	1ad3      	subs	r3, r2, r3
 800887e:	2b02      	cmp	r3, #2
 8008880:	d901      	bls.n	8008886 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008882:	2303      	movs	r3, #3
 8008884:	e167      	b.n	8008b56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008886:	4b0b      	ldr	r3, [pc, #44]	; (80088b4 <HAL_RCC_OscConfig+0x240>)
 8008888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800888a:	f003 0302 	and.w	r3, r3, #2
 800888e:	2b00      	cmp	r3, #0
 8008890:	d0f0      	beq.n	8008874 <HAL_RCC_OscConfig+0x200>
 8008892:	e01b      	b.n	80088cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008894:	4b09      	ldr	r3, [pc, #36]	; (80088bc <HAL_RCC_OscConfig+0x248>)
 8008896:	2200      	movs	r2, #0
 8008898:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800889a:	f7ff f845 	bl	8007928 <HAL_GetTick>
 800889e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80088a0:	e00e      	b.n	80088c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80088a2:	f7ff f841 	bl	8007928 <HAL_GetTick>
 80088a6:	4602      	mov	r2, r0
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	1ad3      	subs	r3, r2, r3
 80088ac:	2b02      	cmp	r3, #2
 80088ae:	d907      	bls.n	80088c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80088b0:	2303      	movs	r3, #3
 80088b2:	e150      	b.n	8008b56 <HAL_RCC_OscConfig+0x4e2>
 80088b4:	40023800 	.word	0x40023800
 80088b8:	42470000 	.word	0x42470000
 80088bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80088c0:	4b88      	ldr	r3, [pc, #544]	; (8008ae4 <HAL_RCC_OscConfig+0x470>)
 80088c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088c4:	f003 0302 	and.w	r3, r3, #2
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d1ea      	bne.n	80088a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f003 0304 	and.w	r3, r3, #4
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	f000 8097 	beq.w	8008a08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80088da:	2300      	movs	r3, #0
 80088dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80088de:	4b81      	ldr	r3, [pc, #516]	; (8008ae4 <HAL_RCC_OscConfig+0x470>)
 80088e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d10f      	bne.n	800890a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80088ea:	2300      	movs	r3, #0
 80088ec:	60bb      	str	r3, [r7, #8]
 80088ee:	4b7d      	ldr	r3, [pc, #500]	; (8008ae4 <HAL_RCC_OscConfig+0x470>)
 80088f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088f2:	4a7c      	ldr	r2, [pc, #496]	; (8008ae4 <HAL_RCC_OscConfig+0x470>)
 80088f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088f8:	6413      	str	r3, [r2, #64]	; 0x40
 80088fa:	4b7a      	ldr	r3, [pc, #488]	; (8008ae4 <HAL_RCC_OscConfig+0x470>)
 80088fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008902:	60bb      	str	r3, [r7, #8]
 8008904:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008906:	2301      	movs	r3, #1
 8008908:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800890a:	4b77      	ldr	r3, [pc, #476]	; (8008ae8 <HAL_RCC_OscConfig+0x474>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008912:	2b00      	cmp	r3, #0
 8008914:	d118      	bne.n	8008948 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008916:	4b74      	ldr	r3, [pc, #464]	; (8008ae8 <HAL_RCC_OscConfig+0x474>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a73      	ldr	r2, [pc, #460]	; (8008ae8 <HAL_RCC_OscConfig+0x474>)
 800891c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008920:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008922:	f7ff f801 	bl	8007928 <HAL_GetTick>
 8008926:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008928:	e008      	b.n	800893c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800892a:	f7fe fffd 	bl	8007928 <HAL_GetTick>
 800892e:	4602      	mov	r2, r0
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	1ad3      	subs	r3, r2, r3
 8008934:	2b02      	cmp	r3, #2
 8008936:	d901      	bls.n	800893c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008938:	2303      	movs	r3, #3
 800893a:	e10c      	b.n	8008b56 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800893c:	4b6a      	ldr	r3, [pc, #424]	; (8008ae8 <HAL_RCC_OscConfig+0x474>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008944:	2b00      	cmp	r3, #0
 8008946:	d0f0      	beq.n	800892a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	2b01      	cmp	r3, #1
 800894e:	d106      	bne.n	800895e <HAL_RCC_OscConfig+0x2ea>
 8008950:	4b64      	ldr	r3, [pc, #400]	; (8008ae4 <HAL_RCC_OscConfig+0x470>)
 8008952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008954:	4a63      	ldr	r2, [pc, #396]	; (8008ae4 <HAL_RCC_OscConfig+0x470>)
 8008956:	f043 0301 	orr.w	r3, r3, #1
 800895a:	6713      	str	r3, [r2, #112]	; 0x70
 800895c:	e01c      	b.n	8008998 <HAL_RCC_OscConfig+0x324>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	2b05      	cmp	r3, #5
 8008964:	d10c      	bne.n	8008980 <HAL_RCC_OscConfig+0x30c>
 8008966:	4b5f      	ldr	r3, [pc, #380]	; (8008ae4 <HAL_RCC_OscConfig+0x470>)
 8008968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800896a:	4a5e      	ldr	r2, [pc, #376]	; (8008ae4 <HAL_RCC_OscConfig+0x470>)
 800896c:	f043 0304 	orr.w	r3, r3, #4
 8008970:	6713      	str	r3, [r2, #112]	; 0x70
 8008972:	4b5c      	ldr	r3, [pc, #368]	; (8008ae4 <HAL_RCC_OscConfig+0x470>)
 8008974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008976:	4a5b      	ldr	r2, [pc, #364]	; (8008ae4 <HAL_RCC_OscConfig+0x470>)
 8008978:	f043 0301 	orr.w	r3, r3, #1
 800897c:	6713      	str	r3, [r2, #112]	; 0x70
 800897e:	e00b      	b.n	8008998 <HAL_RCC_OscConfig+0x324>
 8008980:	4b58      	ldr	r3, [pc, #352]	; (8008ae4 <HAL_RCC_OscConfig+0x470>)
 8008982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008984:	4a57      	ldr	r2, [pc, #348]	; (8008ae4 <HAL_RCC_OscConfig+0x470>)
 8008986:	f023 0301 	bic.w	r3, r3, #1
 800898a:	6713      	str	r3, [r2, #112]	; 0x70
 800898c:	4b55      	ldr	r3, [pc, #340]	; (8008ae4 <HAL_RCC_OscConfig+0x470>)
 800898e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008990:	4a54      	ldr	r2, [pc, #336]	; (8008ae4 <HAL_RCC_OscConfig+0x470>)
 8008992:	f023 0304 	bic.w	r3, r3, #4
 8008996:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	689b      	ldr	r3, [r3, #8]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d015      	beq.n	80089cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089a0:	f7fe ffc2 	bl	8007928 <HAL_GetTick>
 80089a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80089a6:	e00a      	b.n	80089be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80089a8:	f7fe ffbe 	bl	8007928 <HAL_GetTick>
 80089ac:	4602      	mov	r2, r0
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	1ad3      	subs	r3, r2, r3
 80089b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d901      	bls.n	80089be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80089ba:	2303      	movs	r3, #3
 80089bc:	e0cb      	b.n	8008b56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80089be:	4b49      	ldr	r3, [pc, #292]	; (8008ae4 <HAL_RCC_OscConfig+0x470>)
 80089c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089c2:	f003 0302 	and.w	r3, r3, #2
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d0ee      	beq.n	80089a8 <HAL_RCC_OscConfig+0x334>
 80089ca:	e014      	b.n	80089f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80089cc:	f7fe ffac 	bl	8007928 <HAL_GetTick>
 80089d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80089d2:	e00a      	b.n	80089ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80089d4:	f7fe ffa8 	bl	8007928 <HAL_GetTick>
 80089d8:	4602      	mov	r2, r0
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	1ad3      	subs	r3, r2, r3
 80089de:	f241 3288 	movw	r2, #5000	; 0x1388
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d901      	bls.n	80089ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80089e6:	2303      	movs	r3, #3
 80089e8:	e0b5      	b.n	8008b56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80089ea:	4b3e      	ldr	r3, [pc, #248]	; (8008ae4 <HAL_RCC_OscConfig+0x470>)
 80089ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089ee:	f003 0302 	and.w	r3, r3, #2
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d1ee      	bne.n	80089d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80089f6:	7dfb      	ldrb	r3, [r7, #23]
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d105      	bne.n	8008a08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80089fc:	4b39      	ldr	r3, [pc, #228]	; (8008ae4 <HAL_RCC_OscConfig+0x470>)
 80089fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a00:	4a38      	ldr	r2, [pc, #224]	; (8008ae4 <HAL_RCC_OscConfig+0x470>)
 8008a02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	699b      	ldr	r3, [r3, #24]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	f000 80a1 	beq.w	8008b54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008a12:	4b34      	ldr	r3, [pc, #208]	; (8008ae4 <HAL_RCC_OscConfig+0x470>)
 8008a14:	689b      	ldr	r3, [r3, #8]
 8008a16:	f003 030c 	and.w	r3, r3, #12
 8008a1a:	2b08      	cmp	r3, #8
 8008a1c:	d05c      	beq.n	8008ad8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	699b      	ldr	r3, [r3, #24]
 8008a22:	2b02      	cmp	r3, #2
 8008a24:	d141      	bne.n	8008aaa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a26:	4b31      	ldr	r3, [pc, #196]	; (8008aec <HAL_RCC_OscConfig+0x478>)
 8008a28:	2200      	movs	r2, #0
 8008a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a2c:	f7fe ff7c 	bl	8007928 <HAL_GetTick>
 8008a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a32:	e008      	b.n	8008a46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a34:	f7fe ff78 	bl	8007928 <HAL_GetTick>
 8008a38:	4602      	mov	r2, r0
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	1ad3      	subs	r3, r2, r3
 8008a3e:	2b02      	cmp	r3, #2
 8008a40:	d901      	bls.n	8008a46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008a42:	2303      	movs	r3, #3
 8008a44:	e087      	b.n	8008b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a46:	4b27      	ldr	r3, [pc, #156]	; (8008ae4 <HAL_RCC_OscConfig+0x470>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d1f0      	bne.n	8008a34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	69da      	ldr	r2, [r3, #28]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6a1b      	ldr	r3, [r3, #32]
 8008a5a:	431a      	orrs	r2, r3
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a60:	019b      	lsls	r3, r3, #6
 8008a62:	431a      	orrs	r2, r3
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a68:	085b      	lsrs	r3, r3, #1
 8008a6a:	3b01      	subs	r3, #1
 8008a6c:	041b      	lsls	r3, r3, #16
 8008a6e:	431a      	orrs	r2, r3
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a74:	061b      	lsls	r3, r3, #24
 8008a76:	491b      	ldr	r1, [pc, #108]	; (8008ae4 <HAL_RCC_OscConfig+0x470>)
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a7c:	4b1b      	ldr	r3, [pc, #108]	; (8008aec <HAL_RCC_OscConfig+0x478>)
 8008a7e:	2201      	movs	r2, #1
 8008a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a82:	f7fe ff51 	bl	8007928 <HAL_GetTick>
 8008a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a88:	e008      	b.n	8008a9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a8a:	f7fe ff4d 	bl	8007928 <HAL_GetTick>
 8008a8e:	4602      	mov	r2, r0
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	1ad3      	subs	r3, r2, r3
 8008a94:	2b02      	cmp	r3, #2
 8008a96:	d901      	bls.n	8008a9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008a98:	2303      	movs	r3, #3
 8008a9a:	e05c      	b.n	8008b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a9c:	4b11      	ldr	r3, [pc, #68]	; (8008ae4 <HAL_RCC_OscConfig+0x470>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d0f0      	beq.n	8008a8a <HAL_RCC_OscConfig+0x416>
 8008aa8:	e054      	b.n	8008b54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008aaa:	4b10      	ldr	r3, [pc, #64]	; (8008aec <HAL_RCC_OscConfig+0x478>)
 8008aac:	2200      	movs	r2, #0
 8008aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ab0:	f7fe ff3a 	bl	8007928 <HAL_GetTick>
 8008ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ab6:	e008      	b.n	8008aca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ab8:	f7fe ff36 	bl	8007928 <HAL_GetTick>
 8008abc:	4602      	mov	r2, r0
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	1ad3      	subs	r3, r2, r3
 8008ac2:	2b02      	cmp	r3, #2
 8008ac4:	d901      	bls.n	8008aca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008ac6:	2303      	movs	r3, #3
 8008ac8:	e045      	b.n	8008b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008aca:	4b06      	ldr	r3, [pc, #24]	; (8008ae4 <HAL_RCC_OscConfig+0x470>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d1f0      	bne.n	8008ab8 <HAL_RCC_OscConfig+0x444>
 8008ad6:	e03d      	b.n	8008b54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	699b      	ldr	r3, [r3, #24]
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d107      	bne.n	8008af0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	e038      	b.n	8008b56 <HAL_RCC_OscConfig+0x4e2>
 8008ae4:	40023800 	.word	0x40023800
 8008ae8:	40007000 	.word	0x40007000
 8008aec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008af0:	4b1b      	ldr	r3, [pc, #108]	; (8008b60 <HAL_RCC_OscConfig+0x4ec>)
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	699b      	ldr	r3, [r3, #24]
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d028      	beq.n	8008b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d121      	bne.n	8008b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d11a      	bne.n	8008b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008b1a:	68fa      	ldr	r2, [r7, #12]
 8008b1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008b20:	4013      	ands	r3, r2
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008b26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d111      	bne.n	8008b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b36:	085b      	lsrs	r3, r3, #1
 8008b38:	3b01      	subs	r3, #1
 8008b3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d107      	bne.n	8008b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d001      	beq.n	8008b54 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	e000      	b.n	8008b56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008b54:	2300      	movs	r3, #0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3718      	adds	r7, #24
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
 8008b5e:	bf00      	nop
 8008b60:	40023800 	.word	0x40023800

08008b64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d101      	bne.n	8008b78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008b74:	2301      	movs	r3, #1
 8008b76:	e0cc      	b.n	8008d12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008b78:	4b68      	ldr	r3, [pc, #416]	; (8008d1c <HAL_RCC_ClockConfig+0x1b8>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f003 0307 	and.w	r3, r3, #7
 8008b80:	683a      	ldr	r2, [r7, #0]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d90c      	bls.n	8008ba0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b86:	4b65      	ldr	r3, [pc, #404]	; (8008d1c <HAL_RCC_ClockConfig+0x1b8>)
 8008b88:	683a      	ldr	r2, [r7, #0]
 8008b8a:	b2d2      	uxtb	r2, r2
 8008b8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b8e:	4b63      	ldr	r3, [pc, #396]	; (8008d1c <HAL_RCC_ClockConfig+0x1b8>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f003 0307 	and.w	r3, r3, #7
 8008b96:	683a      	ldr	r2, [r7, #0]
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d001      	beq.n	8008ba0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	e0b8      	b.n	8008d12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f003 0302 	and.w	r3, r3, #2
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d020      	beq.n	8008bee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f003 0304 	and.w	r3, r3, #4
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d005      	beq.n	8008bc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008bb8:	4b59      	ldr	r3, [pc, #356]	; (8008d20 <HAL_RCC_ClockConfig+0x1bc>)
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	4a58      	ldr	r2, [pc, #352]	; (8008d20 <HAL_RCC_ClockConfig+0x1bc>)
 8008bbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008bc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f003 0308 	and.w	r3, r3, #8
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d005      	beq.n	8008bdc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008bd0:	4b53      	ldr	r3, [pc, #332]	; (8008d20 <HAL_RCC_ClockConfig+0x1bc>)
 8008bd2:	689b      	ldr	r3, [r3, #8]
 8008bd4:	4a52      	ldr	r2, [pc, #328]	; (8008d20 <HAL_RCC_ClockConfig+0x1bc>)
 8008bd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008bda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008bdc:	4b50      	ldr	r3, [pc, #320]	; (8008d20 <HAL_RCC_ClockConfig+0x1bc>)
 8008bde:	689b      	ldr	r3, [r3, #8]
 8008be0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	494d      	ldr	r1, [pc, #308]	; (8008d20 <HAL_RCC_ClockConfig+0x1bc>)
 8008bea:	4313      	orrs	r3, r2
 8008bec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f003 0301 	and.w	r3, r3, #1
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d044      	beq.n	8008c84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	d107      	bne.n	8008c12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c02:	4b47      	ldr	r3, [pc, #284]	; (8008d20 <HAL_RCC_ClockConfig+0x1bc>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d119      	bne.n	8008c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e07f      	b.n	8008d12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	2b02      	cmp	r3, #2
 8008c18:	d003      	beq.n	8008c22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008c1e:	2b03      	cmp	r3, #3
 8008c20:	d107      	bne.n	8008c32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c22:	4b3f      	ldr	r3, [pc, #252]	; (8008d20 <HAL_RCC_ClockConfig+0x1bc>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d109      	bne.n	8008c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	e06f      	b.n	8008d12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c32:	4b3b      	ldr	r3, [pc, #236]	; (8008d20 <HAL_RCC_ClockConfig+0x1bc>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f003 0302 	and.w	r3, r3, #2
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d101      	bne.n	8008c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e067      	b.n	8008d12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008c42:	4b37      	ldr	r3, [pc, #220]	; (8008d20 <HAL_RCC_ClockConfig+0x1bc>)
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	f023 0203 	bic.w	r2, r3, #3
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	4934      	ldr	r1, [pc, #208]	; (8008d20 <HAL_RCC_ClockConfig+0x1bc>)
 8008c50:	4313      	orrs	r3, r2
 8008c52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008c54:	f7fe fe68 	bl	8007928 <HAL_GetTick>
 8008c58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c5a:	e00a      	b.n	8008c72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c5c:	f7fe fe64 	bl	8007928 <HAL_GetTick>
 8008c60:	4602      	mov	r2, r0
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	1ad3      	subs	r3, r2, r3
 8008c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d901      	bls.n	8008c72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008c6e:	2303      	movs	r3, #3
 8008c70:	e04f      	b.n	8008d12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c72:	4b2b      	ldr	r3, [pc, #172]	; (8008d20 <HAL_RCC_ClockConfig+0x1bc>)
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	f003 020c 	and.w	r2, r3, #12
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	009b      	lsls	r3, r3, #2
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d1eb      	bne.n	8008c5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008c84:	4b25      	ldr	r3, [pc, #148]	; (8008d1c <HAL_RCC_ClockConfig+0x1b8>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f003 0307 	and.w	r3, r3, #7
 8008c8c:	683a      	ldr	r2, [r7, #0]
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d20c      	bcs.n	8008cac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c92:	4b22      	ldr	r3, [pc, #136]	; (8008d1c <HAL_RCC_ClockConfig+0x1b8>)
 8008c94:	683a      	ldr	r2, [r7, #0]
 8008c96:	b2d2      	uxtb	r2, r2
 8008c98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c9a:	4b20      	ldr	r3, [pc, #128]	; (8008d1c <HAL_RCC_ClockConfig+0x1b8>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f003 0307 	and.w	r3, r3, #7
 8008ca2:	683a      	ldr	r2, [r7, #0]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d001      	beq.n	8008cac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	e032      	b.n	8008d12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f003 0304 	and.w	r3, r3, #4
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d008      	beq.n	8008cca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008cb8:	4b19      	ldr	r3, [pc, #100]	; (8008d20 <HAL_RCC_ClockConfig+0x1bc>)
 8008cba:	689b      	ldr	r3, [r3, #8]
 8008cbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	68db      	ldr	r3, [r3, #12]
 8008cc4:	4916      	ldr	r1, [pc, #88]	; (8008d20 <HAL_RCC_ClockConfig+0x1bc>)
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f003 0308 	and.w	r3, r3, #8
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d009      	beq.n	8008cea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008cd6:	4b12      	ldr	r3, [pc, #72]	; (8008d20 <HAL_RCC_ClockConfig+0x1bc>)
 8008cd8:	689b      	ldr	r3, [r3, #8]
 8008cda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	691b      	ldr	r3, [r3, #16]
 8008ce2:	00db      	lsls	r3, r3, #3
 8008ce4:	490e      	ldr	r1, [pc, #56]	; (8008d20 <HAL_RCC_ClockConfig+0x1bc>)
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008cea:	f000 f821 	bl	8008d30 <HAL_RCC_GetSysClockFreq>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	4b0b      	ldr	r3, [pc, #44]	; (8008d20 <HAL_RCC_ClockConfig+0x1bc>)
 8008cf2:	689b      	ldr	r3, [r3, #8]
 8008cf4:	091b      	lsrs	r3, r3, #4
 8008cf6:	f003 030f 	and.w	r3, r3, #15
 8008cfa:	490a      	ldr	r1, [pc, #40]	; (8008d24 <HAL_RCC_ClockConfig+0x1c0>)
 8008cfc:	5ccb      	ldrb	r3, [r1, r3]
 8008cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8008d02:	4a09      	ldr	r2, [pc, #36]	; (8008d28 <HAL_RCC_ClockConfig+0x1c4>)
 8008d04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008d06:	4b09      	ldr	r3, [pc, #36]	; (8008d2c <HAL_RCC_ClockConfig+0x1c8>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f7fd fbe2 	bl	80064d4 <HAL_InitTick>

  return HAL_OK;
 8008d10:	2300      	movs	r3, #0
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3710      	adds	r7, #16
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
 8008d1a:	bf00      	nop
 8008d1c:	40023c00 	.word	0x40023c00
 8008d20:	40023800 	.word	0x40023800
 8008d24:	0800f3d8 	.word	0x0800f3d8
 8008d28:	20000024 	.word	0x20000024
 8008d2c:	20000028 	.word	0x20000028

08008d30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d34:	b094      	sub	sp, #80	; 0x50
 8008d36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	647b      	str	r3, [r7, #68]	; 0x44
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d40:	2300      	movs	r3, #0
 8008d42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008d44:	2300      	movs	r3, #0
 8008d46:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008d48:	4b79      	ldr	r3, [pc, #484]	; (8008f30 <HAL_RCC_GetSysClockFreq+0x200>)
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	f003 030c 	and.w	r3, r3, #12
 8008d50:	2b08      	cmp	r3, #8
 8008d52:	d00d      	beq.n	8008d70 <HAL_RCC_GetSysClockFreq+0x40>
 8008d54:	2b08      	cmp	r3, #8
 8008d56:	f200 80e1 	bhi.w	8008f1c <HAL_RCC_GetSysClockFreq+0x1ec>
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d002      	beq.n	8008d64 <HAL_RCC_GetSysClockFreq+0x34>
 8008d5e:	2b04      	cmp	r3, #4
 8008d60:	d003      	beq.n	8008d6a <HAL_RCC_GetSysClockFreq+0x3a>
 8008d62:	e0db      	b.n	8008f1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008d64:	4b73      	ldr	r3, [pc, #460]	; (8008f34 <HAL_RCC_GetSysClockFreq+0x204>)
 8008d66:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008d68:	e0db      	b.n	8008f22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008d6a:	4b73      	ldr	r3, [pc, #460]	; (8008f38 <HAL_RCC_GetSysClockFreq+0x208>)
 8008d6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008d6e:	e0d8      	b.n	8008f22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008d70:	4b6f      	ldr	r3, [pc, #444]	; (8008f30 <HAL_RCC_GetSysClockFreq+0x200>)
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d78:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008d7a:	4b6d      	ldr	r3, [pc, #436]	; (8008f30 <HAL_RCC_GetSysClockFreq+0x200>)
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d063      	beq.n	8008e4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d86:	4b6a      	ldr	r3, [pc, #424]	; (8008f30 <HAL_RCC_GetSysClockFreq+0x200>)
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	099b      	lsrs	r3, r3, #6
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d98:	633b      	str	r3, [r7, #48]	; 0x30
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	637b      	str	r3, [r7, #52]	; 0x34
 8008d9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008da2:	4622      	mov	r2, r4
 8008da4:	462b      	mov	r3, r5
 8008da6:	f04f 0000 	mov.w	r0, #0
 8008daa:	f04f 0100 	mov.w	r1, #0
 8008dae:	0159      	lsls	r1, r3, #5
 8008db0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008db4:	0150      	lsls	r0, r2, #5
 8008db6:	4602      	mov	r2, r0
 8008db8:	460b      	mov	r3, r1
 8008dba:	4621      	mov	r1, r4
 8008dbc:	1a51      	subs	r1, r2, r1
 8008dbe:	6139      	str	r1, [r7, #16]
 8008dc0:	4629      	mov	r1, r5
 8008dc2:	eb63 0301 	sbc.w	r3, r3, r1
 8008dc6:	617b      	str	r3, [r7, #20]
 8008dc8:	f04f 0200 	mov.w	r2, #0
 8008dcc:	f04f 0300 	mov.w	r3, #0
 8008dd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008dd4:	4659      	mov	r1, fp
 8008dd6:	018b      	lsls	r3, r1, #6
 8008dd8:	4651      	mov	r1, sl
 8008dda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008dde:	4651      	mov	r1, sl
 8008de0:	018a      	lsls	r2, r1, #6
 8008de2:	4651      	mov	r1, sl
 8008de4:	ebb2 0801 	subs.w	r8, r2, r1
 8008de8:	4659      	mov	r1, fp
 8008dea:	eb63 0901 	sbc.w	r9, r3, r1
 8008dee:	f04f 0200 	mov.w	r2, #0
 8008df2:	f04f 0300 	mov.w	r3, #0
 8008df6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008dfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008dfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008e02:	4690      	mov	r8, r2
 8008e04:	4699      	mov	r9, r3
 8008e06:	4623      	mov	r3, r4
 8008e08:	eb18 0303 	adds.w	r3, r8, r3
 8008e0c:	60bb      	str	r3, [r7, #8]
 8008e0e:	462b      	mov	r3, r5
 8008e10:	eb49 0303 	adc.w	r3, r9, r3
 8008e14:	60fb      	str	r3, [r7, #12]
 8008e16:	f04f 0200 	mov.w	r2, #0
 8008e1a:	f04f 0300 	mov.w	r3, #0
 8008e1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008e22:	4629      	mov	r1, r5
 8008e24:	024b      	lsls	r3, r1, #9
 8008e26:	4621      	mov	r1, r4
 8008e28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008e2c:	4621      	mov	r1, r4
 8008e2e:	024a      	lsls	r2, r1, #9
 8008e30:	4610      	mov	r0, r2
 8008e32:	4619      	mov	r1, r3
 8008e34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e36:	2200      	movs	r2, #0
 8008e38:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e40:	f7f7 fe9c 	bl	8000b7c <__aeabi_uldivmod>
 8008e44:	4602      	mov	r2, r0
 8008e46:	460b      	mov	r3, r1
 8008e48:	4613      	mov	r3, r2
 8008e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e4c:	e058      	b.n	8008f00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e4e:	4b38      	ldr	r3, [pc, #224]	; (8008f30 <HAL_RCC_GetSysClockFreq+0x200>)
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	099b      	lsrs	r3, r3, #6
 8008e54:	2200      	movs	r2, #0
 8008e56:	4618      	mov	r0, r3
 8008e58:	4611      	mov	r1, r2
 8008e5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008e5e:	623b      	str	r3, [r7, #32]
 8008e60:	2300      	movs	r3, #0
 8008e62:	627b      	str	r3, [r7, #36]	; 0x24
 8008e64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008e68:	4642      	mov	r2, r8
 8008e6a:	464b      	mov	r3, r9
 8008e6c:	f04f 0000 	mov.w	r0, #0
 8008e70:	f04f 0100 	mov.w	r1, #0
 8008e74:	0159      	lsls	r1, r3, #5
 8008e76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008e7a:	0150      	lsls	r0, r2, #5
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	460b      	mov	r3, r1
 8008e80:	4641      	mov	r1, r8
 8008e82:	ebb2 0a01 	subs.w	sl, r2, r1
 8008e86:	4649      	mov	r1, r9
 8008e88:	eb63 0b01 	sbc.w	fp, r3, r1
 8008e8c:	f04f 0200 	mov.w	r2, #0
 8008e90:	f04f 0300 	mov.w	r3, #0
 8008e94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008e98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008e9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008ea0:	ebb2 040a 	subs.w	r4, r2, sl
 8008ea4:	eb63 050b 	sbc.w	r5, r3, fp
 8008ea8:	f04f 0200 	mov.w	r2, #0
 8008eac:	f04f 0300 	mov.w	r3, #0
 8008eb0:	00eb      	lsls	r3, r5, #3
 8008eb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008eb6:	00e2      	lsls	r2, r4, #3
 8008eb8:	4614      	mov	r4, r2
 8008eba:	461d      	mov	r5, r3
 8008ebc:	4643      	mov	r3, r8
 8008ebe:	18e3      	adds	r3, r4, r3
 8008ec0:	603b      	str	r3, [r7, #0]
 8008ec2:	464b      	mov	r3, r9
 8008ec4:	eb45 0303 	adc.w	r3, r5, r3
 8008ec8:	607b      	str	r3, [r7, #4]
 8008eca:	f04f 0200 	mov.w	r2, #0
 8008ece:	f04f 0300 	mov.w	r3, #0
 8008ed2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008ed6:	4629      	mov	r1, r5
 8008ed8:	028b      	lsls	r3, r1, #10
 8008eda:	4621      	mov	r1, r4
 8008edc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008ee0:	4621      	mov	r1, r4
 8008ee2:	028a      	lsls	r2, r1, #10
 8008ee4:	4610      	mov	r0, r2
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008eea:	2200      	movs	r2, #0
 8008eec:	61bb      	str	r3, [r7, #24]
 8008eee:	61fa      	str	r2, [r7, #28]
 8008ef0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008ef4:	f7f7 fe42 	bl	8000b7c <__aeabi_uldivmod>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	460b      	mov	r3, r1
 8008efc:	4613      	mov	r3, r2
 8008efe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008f00:	4b0b      	ldr	r3, [pc, #44]	; (8008f30 <HAL_RCC_GetSysClockFreq+0x200>)
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	0c1b      	lsrs	r3, r3, #16
 8008f06:	f003 0303 	and.w	r3, r3, #3
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	005b      	lsls	r3, r3, #1
 8008f0e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008f10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008f12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008f1a:	e002      	b.n	8008f22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008f1c:	4b05      	ldr	r3, [pc, #20]	; (8008f34 <HAL_RCC_GetSysClockFreq+0x204>)
 8008f1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008f20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008f22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3750      	adds	r7, #80	; 0x50
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f2e:	bf00      	nop
 8008f30:	40023800 	.word	0x40023800
 8008f34:	00f42400 	.word	0x00f42400
 8008f38:	007a1200 	.word	0x007a1200

08008f3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008f40:	4b03      	ldr	r3, [pc, #12]	; (8008f50 <HAL_RCC_GetHCLKFreq+0x14>)
 8008f42:	681b      	ldr	r3, [r3, #0]
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr
 8008f4e:	bf00      	nop
 8008f50:	20000024 	.word	0x20000024

08008f54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008f58:	f7ff fff0 	bl	8008f3c <HAL_RCC_GetHCLKFreq>
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	4b05      	ldr	r3, [pc, #20]	; (8008f74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	0a9b      	lsrs	r3, r3, #10
 8008f64:	f003 0307 	and.w	r3, r3, #7
 8008f68:	4903      	ldr	r1, [pc, #12]	; (8008f78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f6a:	5ccb      	ldrb	r3, [r1, r3]
 8008f6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	bd80      	pop	{r7, pc}
 8008f74:	40023800 	.word	0x40023800
 8008f78:	0800f3e8 	.word	0x0800f3e8

08008f7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008f80:	f7ff ffdc 	bl	8008f3c <HAL_RCC_GetHCLKFreq>
 8008f84:	4602      	mov	r2, r0
 8008f86:	4b05      	ldr	r3, [pc, #20]	; (8008f9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	0b5b      	lsrs	r3, r3, #13
 8008f8c:	f003 0307 	and.w	r3, r3, #7
 8008f90:	4903      	ldr	r1, [pc, #12]	; (8008fa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008f92:	5ccb      	ldrb	r3, [r1, r3]
 8008f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	bd80      	pop	{r7, pc}
 8008f9c:	40023800 	.word	0x40023800
 8008fa0:	0800f3e8 	.word	0x0800f3e8

08008fa4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b083      	sub	sp, #12
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	220f      	movs	r2, #15
 8008fb2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008fb4:	4b12      	ldr	r3, [pc, #72]	; (8009000 <HAL_RCC_GetClockConfig+0x5c>)
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	f003 0203 	and.w	r2, r3, #3
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008fc0:	4b0f      	ldr	r3, [pc, #60]	; (8009000 <HAL_RCC_GetClockConfig+0x5c>)
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008fcc:	4b0c      	ldr	r3, [pc, #48]	; (8009000 <HAL_RCC_GetClockConfig+0x5c>)
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008fd8:	4b09      	ldr	r3, [pc, #36]	; (8009000 <HAL_RCC_GetClockConfig+0x5c>)
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	08db      	lsrs	r3, r3, #3
 8008fde:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008fe6:	4b07      	ldr	r3, [pc, #28]	; (8009004 <HAL_RCC_GetClockConfig+0x60>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f003 0207 	and.w	r2, r3, #7
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	601a      	str	r2, [r3, #0]
}
 8008ff2:	bf00      	nop
 8008ff4:	370c      	adds	r7, #12
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr
 8008ffe:	bf00      	nop
 8009000:	40023800 	.word	0x40023800
 8009004:	40023c00 	.word	0x40023c00

08009008 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b082      	sub	sp, #8
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d101      	bne.n	800901a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009016:	2301      	movs	r3, #1
 8009018:	e041      	b.n	800909e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009020:	b2db      	uxtb	r3, r3
 8009022:	2b00      	cmp	r3, #0
 8009024:	d106      	bne.n	8009034 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2200      	movs	r2, #0
 800902a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f7fe f824 	bl	800707c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2202      	movs	r2, #2
 8009038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	3304      	adds	r3, #4
 8009044:	4619      	mov	r1, r3
 8009046:	4610      	mov	r0, r2
 8009048:	f000 fdc4 	bl	8009bd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2201      	movs	r2, #1
 8009050:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2201      	movs	r2, #1
 8009058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2201      	movs	r2, #1
 8009060:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2201      	movs	r2, #1
 8009068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2201      	movs	r2, #1
 8009070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2201      	movs	r2, #1
 8009078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2201      	movs	r2, #1
 8009080:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2201      	movs	r2, #1
 8009088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2201      	movs	r2, #1
 8009090:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2201      	movs	r2, #1
 8009098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800909c:	2300      	movs	r3, #0
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3708      	adds	r7, #8
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
	...

080090a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b085      	sub	sp, #20
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090b6:	b2db      	uxtb	r3, r3
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d001      	beq.n	80090c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80090bc:	2301      	movs	r3, #1
 80090be:	e04e      	b.n	800915e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2202      	movs	r2, #2
 80090c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	68da      	ldr	r2, [r3, #12]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f042 0201 	orr.w	r2, r2, #1
 80090d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4a23      	ldr	r2, [pc, #140]	; (800916c <HAL_TIM_Base_Start_IT+0xc4>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d022      	beq.n	8009128 <HAL_TIM_Base_Start_IT+0x80>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090ea:	d01d      	beq.n	8009128 <HAL_TIM_Base_Start_IT+0x80>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a1f      	ldr	r2, [pc, #124]	; (8009170 <HAL_TIM_Base_Start_IT+0xc8>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d018      	beq.n	8009128 <HAL_TIM_Base_Start_IT+0x80>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a1e      	ldr	r2, [pc, #120]	; (8009174 <HAL_TIM_Base_Start_IT+0xcc>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d013      	beq.n	8009128 <HAL_TIM_Base_Start_IT+0x80>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a1c      	ldr	r2, [pc, #112]	; (8009178 <HAL_TIM_Base_Start_IT+0xd0>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d00e      	beq.n	8009128 <HAL_TIM_Base_Start_IT+0x80>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4a1b      	ldr	r2, [pc, #108]	; (800917c <HAL_TIM_Base_Start_IT+0xd4>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d009      	beq.n	8009128 <HAL_TIM_Base_Start_IT+0x80>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a19      	ldr	r2, [pc, #100]	; (8009180 <HAL_TIM_Base_Start_IT+0xd8>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d004      	beq.n	8009128 <HAL_TIM_Base_Start_IT+0x80>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4a18      	ldr	r2, [pc, #96]	; (8009184 <HAL_TIM_Base_Start_IT+0xdc>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d111      	bne.n	800914c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	f003 0307 	and.w	r3, r3, #7
 8009132:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2b06      	cmp	r3, #6
 8009138:	d010      	beq.n	800915c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f042 0201 	orr.w	r2, r2, #1
 8009148:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800914a:	e007      	b.n	800915c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f042 0201 	orr.w	r2, r2, #1
 800915a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800915c:	2300      	movs	r3, #0
}
 800915e:	4618      	mov	r0, r3
 8009160:	3714      	adds	r7, #20
 8009162:	46bd      	mov	sp, r7
 8009164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009168:	4770      	bx	lr
 800916a:	bf00      	nop
 800916c:	40010000 	.word	0x40010000
 8009170:	40000400 	.word	0x40000400
 8009174:	40000800 	.word	0x40000800
 8009178:	40000c00 	.word	0x40000c00
 800917c:	40010400 	.word	0x40010400
 8009180:	40014000 	.word	0x40014000
 8009184:	40001800 	.word	0x40001800

08009188 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d101      	bne.n	800919a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	e041      	b.n	800921e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d106      	bne.n	80091b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2200      	movs	r2, #0
 80091aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 f839 	bl	8009226 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2202      	movs	r2, #2
 80091b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	3304      	adds	r3, #4
 80091c4:	4619      	mov	r1, r3
 80091c6:	4610      	mov	r0, r2
 80091c8:	f000 fd04 	bl	8009bd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2201      	movs	r2, #1
 80091d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2201      	movs	r2, #1
 80091d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2201      	movs	r2, #1
 80091e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2201      	movs	r2, #1
 80091e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2201      	movs	r2, #1
 80091f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2201      	movs	r2, #1
 80091f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2201      	movs	r2, #1
 8009200:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2201      	movs	r2, #1
 8009208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2201      	movs	r2, #1
 8009210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2201      	movs	r2, #1
 8009218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800921c:	2300      	movs	r3, #0
}
 800921e:	4618      	mov	r0, r3
 8009220:	3708      	adds	r7, #8
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}

08009226 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009226:	b480      	push	{r7}
 8009228:	b083      	sub	sp, #12
 800922a:	af00      	add	r7, sp, #0
 800922c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800922e:	bf00      	nop
 8009230:	370c      	adds	r7, #12
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr
	...

0800923c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d109      	bne.n	8009260 <HAL_TIM_PWM_Start+0x24>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009252:	b2db      	uxtb	r3, r3
 8009254:	2b01      	cmp	r3, #1
 8009256:	bf14      	ite	ne
 8009258:	2301      	movne	r3, #1
 800925a:	2300      	moveq	r3, #0
 800925c:	b2db      	uxtb	r3, r3
 800925e:	e022      	b.n	80092a6 <HAL_TIM_PWM_Start+0x6a>
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	2b04      	cmp	r3, #4
 8009264:	d109      	bne.n	800927a <HAL_TIM_PWM_Start+0x3e>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800926c:	b2db      	uxtb	r3, r3
 800926e:	2b01      	cmp	r3, #1
 8009270:	bf14      	ite	ne
 8009272:	2301      	movne	r3, #1
 8009274:	2300      	moveq	r3, #0
 8009276:	b2db      	uxtb	r3, r3
 8009278:	e015      	b.n	80092a6 <HAL_TIM_PWM_Start+0x6a>
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	2b08      	cmp	r3, #8
 800927e:	d109      	bne.n	8009294 <HAL_TIM_PWM_Start+0x58>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009286:	b2db      	uxtb	r3, r3
 8009288:	2b01      	cmp	r3, #1
 800928a:	bf14      	ite	ne
 800928c:	2301      	movne	r3, #1
 800928e:	2300      	moveq	r3, #0
 8009290:	b2db      	uxtb	r3, r3
 8009292:	e008      	b.n	80092a6 <HAL_TIM_PWM_Start+0x6a>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800929a:	b2db      	uxtb	r3, r3
 800929c:	2b01      	cmp	r3, #1
 800929e:	bf14      	ite	ne
 80092a0:	2301      	movne	r3, #1
 80092a2:	2300      	moveq	r3, #0
 80092a4:	b2db      	uxtb	r3, r3
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d001      	beq.n	80092ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80092aa:	2301      	movs	r3, #1
 80092ac:	e07c      	b.n	80093a8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d104      	bne.n	80092be <HAL_TIM_PWM_Start+0x82>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2202      	movs	r2, #2
 80092b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092bc:	e013      	b.n	80092e6 <HAL_TIM_PWM_Start+0xaa>
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	2b04      	cmp	r3, #4
 80092c2:	d104      	bne.n	80092ce <HAL_TIM_PWM_Start+0x92>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2202      	movs	r2, #2
 80092c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092cc:	e00b      	b.n	80092e6 <HAL_TIM_PWM_Start+0xaa>
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	2b08      	cmp	r3, #8
 80092d2:	d104      	bne.n	80092de <HAL_TIM_PWM_Start+0xa2>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2202      	movs	r2, #2
 80092d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092dc:	e003      	b.n	80092e6 <HAL_TIM_PWM_Start+0xaa>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2202      	movs	r2, #2
 80092e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	2201      	movs	r2, #1
 80092ec:	6839      	ldr	r1, [r7, #0]
 80092ee:	4618      	mov	r0, r3
 80092f0:	f000 ff5a 	bl	800a1a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a2d      	ldr	r2, [pc, #180]	; (80093b0 <HAL_TIM_PWM_Start+0x174>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d004      	beq.n	8009308 <HAL_TIM_PWM_Start+0xcc>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a2c      	ldr	r2, [pc, #176]	; (80093b4 <HAL_TIM_PWM_Start+0x178>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d101      	bne.n	800930c <HAL_TIM_PWM_Start+0xd0>
 8009308:	2301      	movs	r3, #1
 800930a:	e000      	b.n	800930e <HAL_TIM_PWM_Start+0xd2>
 800930c:	2300      	movs	r3, #0
 800930e:	2b00      	cmp	r3, #0
 8009310:	d007      	beq.n	8009322 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009320:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a22      	ldr	r2, [pc, #136]	; (80093b0 <HAL_TIM_PWM_Start+0x174>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d022      	beq.n	8009372 <HAL_TIM_PWM_Start+0x136>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009334:	d01d      	beq.n	8009372 <HAL_TIM_PWM_Start+0x136>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a1f      	ldr	r2, [pc, #124]	; (80093b8 <HAL_TIM_PWM_Start+0x17c>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d018      	beq.n	8009372 <HAL_TIM_PWM_Start+0x136>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a1d      	ldr	r2, [pc, #116]	; (80093bc <HAL_TIM_PWM_Start+0x180>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d013      	beq.n	8009372 <HAL_TIM_PWM_Start+0x136>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a1c      	ldr	r2, [pc, #112]	; (80093c0 <HAL_TIM_PWM_Start+0x184>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d00e      	beq.n	8009372 <HAL_TIM_PWM_Start+0x136>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a16      	ldr	r2, [pc, #88]	; (80093b4 <HAL_TIM_PWM_Start+0x178>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d009      	beq.n	8009372 <HAL_TIM_PWM_Start+0x136>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4a18      	ldr	r2, [pc, #96]	; (80093c4 <HAL_TIM_PWM_Start+0x188>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d004      	beq.n	8009372 <HAL_TIM_PWM_Start+0x136>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a16      	ldr	r2, [pc, #88]	; (80093c8 <HAL_TIM_PWM_Start+0x18c>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d111      	bne.n	8009396 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	689b      	ldr	r3, [r3, #8]
 8009378:	f003 0307 	and.w	r3, r3, #7
 800937c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2b06      	cmp	r3, #6
 8009382:	d010      	beq.n	80093a6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f042 0201 	orr.w	r2, r2, #1
 8009392:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009394:	e007      	b.n	80093a6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f042 0201 	orr.w	r2, r2, #1
 80093a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80093a6:	2300      	movs	r3, #0
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3710      	adds	r7, #16
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}
 80093b0:	40010000 	.word	0x40010000
 80093b4:	40010400 	.word	0x40010400
 80093b8:	40000400 	.word	0x40000400
 80093bc:	40000800 	.word	0x40000800
 80093c0:	40000c00 	.word	0x40000c00
 80093c4:	40014000 	.word	0x40014000
 80093c8:	40001800 	.word	0x40001800

080093cc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b086      	sub	sp, #24
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d101      	bne.n	80093e0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80093dc:	2301      	movs	r3, #1
 80093de:	e097      	b.n	8009510 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093e6:	b2db      	uxtb	r3, r3
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d106      	bne.n	80093fa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2200      	movs	r2, #0
 80093f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f7fd fcdb 	bl	8006db0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2202      	movs	r2, #2
 80093fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	6812      	ldr	r2, [r2, #0]
 800940c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009410:	f023 0307 	bic.w	r3, r3, #7
 8009414:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	3304      	adds	r3, #4
 800941e:	4619      	mov	r1, r3
 8009420:	4610      	mov	r0, r2
 8009422:	f000 fbd7 	bl	8009bd4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	689b      	ldr	r3, [r3, #8]
 800942c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	699b      	ldr	r3, [r3, #24]
 8009434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	6a1b      	ldr	r3, [r3, #32]
 800943c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	697a      	ldr	r2, [r7, #20]
 8009444:	4313      	orrs	r3, r2
 8009446:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800944e:	f023 0303 	bic.w	r3, r3, #3
 8009452:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	689a      	ldr	r2, [r3, #8]
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	699b      	ldr	r3, [r3, #24]
 800945c:	021b      	lsls	r3, r3, #8
 800945e:	4313      	orrs	r3, r2
 8009460:	693a      	ldr	r2, [r7, #16]
 8009462:	4313      	orrs	r3, r2
 8009464:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800946c:	f023 030c 	bic.w	r3, r3, #12
 8009470:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009478:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800947c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	68da      	ldr	r2, [r3, #12]
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	69db      	ldr	r3, [r3, #28]
 8009486:	021b      	lsls	r3, r3, #8
 8009488:	4313      	orrs	r3, r2
 800948a:	693a      	ldr	r2, [r7, #16]
 800948c:	4313      	orrs	r3, r2
 800948e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	691b      	ldr	r3, [r3, #16]
 8009494:	011a      	lsls	r2, r3, #4
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	6a1b      	ldr	r3, [r3, #32]
 800949a:	031b      	lsls	r3, r3, #12
 800949c:	4313      	orrs	r3, r2
 800949e:	693a      	ldr	r2, [r7, #16]
 80094a0:	4313      	orrs	r3, r2
 80094a2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80094aa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80094b2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	685a      	ldr	r2, [r3, #4]
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	695b      	ldr	r3, [r3, #20]
 80094bc:	011b      	lsls	r3, r3, #4
 80094be:	4313      	orrs	r3, r2
 80094c0:	68fa      	ldr	r2, [r7, #12]
 80094c2:	4313      	orrs	r3, r2
 80094c4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	697a      	ldr	r2, [r7, #20]
 80094cc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	693a      	ldr	r2, [r7, #16]
 80094d4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	68fa      	ldr	r2, [r7, #12]
 80094dc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2201      	movs	r2, #1
 80094e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2201      	movs	r2, #1
 80094ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2201      	movs	r2, #1
 80094f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2201      	movs	r2, #1
 80094fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2201      	movs	r2, #1
 8009502:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2201      	movs	r2, #1
 800950a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800950e:	2300      	movs	r3, #0
}
 8009510:	4618      	mov	r0, r3
 8009512:	3718      	adds	r7, #24
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}

08009518 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b084      	sub	sp, #16
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009528:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009530:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009538:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009540:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d110      	bne.n	800956a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009548:	7bfb      	ldrb	r3, [r7, #15]
 800954a:	2b01      	cmp	r3, #1
 800954c:	d102      	bne.n	8009554 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800954e:	7b7b      	ldrb	r3, [r7, #13]
 8009550:	2b01      	cmp	r3, #1
 8009552:	d001      	beq.n	8009558 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8009554:	2301      	movs	r3, #1
 8009556:	e089      	b.n	800966c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2202      	movs	r2, #2
 800955c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2202      	movs	r2, #2
 8009564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009568:	e031      	b.n	80095ce <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	2b04      	cmp	r3, #4
 800956e:	d110      	bne.n	8009592 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009570:	7bbb      	ldrb	r3, [r7, #14]
 8009572:	2b01      	cmp	r3, #1
 8009574:	d102      	bne.n	800957c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009576:	7b3b      	ldrb	r3, [r7, #12]
 8009578:	2b01      	cmp	r3, #1
 800957a:	d001      	beq.n	8009580 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800957c:	2301      	movs	r3, #1
 800957e:	e075      	b.n	800966c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2202      	movs	r2, #2
 8009584:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2202      	movs	r2, #2
 800958c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009590:	e01d      	b.n	80095ce <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009592:	7bfb      	ldrb	r3, [r7, #15]
 8009594:	2b01      	cmp	r3, #1
 8009596:	d108      	bne.n	80095aa <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009598:	7bbb      	ldrb	r3, [r7, #14]
 800959a:	2b01      	cmp	r3, #1
 800959c:	d105      	bne.n	80095aa <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800959e:	7b7b      	ldrb	r3, [r7, #13]
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d102      	bne.n	80095aa <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80095a4:	7b3b      	ldrb	r3, [r7, #12]
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d001      	beq.n	80095ae <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80095aa:	2301      	movs	r3, #1
 80095ac:	e05e      	b.n	800966c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2202      	movs	r2, #2
 80095b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2202      	movs	r2, #2
 80095ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2202      	movs	r2, #2
 80095c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2202      	movs	r2, #2
 80095ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d003      	beq.n	80095dc <HAL_TIM_Encoder_Start_IT+0xc4>
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	2b04      	cmp	r3, #4
 80095d8:	d010      	beq.n	80095fc <HAL_TIM_Encoder_Start_IT+0xe4>
 80095da:	e01f      	b.n	800961c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	2201      	movs	r2, #1
 80095e2:	2100      	movs	r1, #0
 80095e4:	4618      	mov	r0, r3
 80095e6:	f000 fddf 	bl	800a1a8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	68da      	ldr	r2, [r3, #12]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f042 0202 	orr.w	r2, r2, #2
 80095f8:	60da      	str	r2, [r3, #12]
      break;
 80095fa:	e02e      	b.n	800965a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	2201      	movs	r2, #1
 8009602:	2104      	movs	r1, #4
 8009604:	4618      	mov	r0, r3
 8009606:	f000 fdcf 	bl	800a1a8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	68da      	ldr	r2, [r3, #12]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f042 0204 	orr.w	r2, r2, #4
 8009618:	60da      	str	r2, [r3, #12]
      break;
 800961a:	e01e      	b.n	800965a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	2201      	movs	r2, #1
 8009622:	2100      	movs	r1, #0
 8009624:	4618      	mov	r0, r3
 8009626:	f000 fdbf 	bl	800a1a8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	2201      	movs	r2, #1
 8009630:	2104      	movs	r1, #4
 8009632:	4618      	mov	r0, r3
 8009634:	f000 fdb8 	bl	800a1a8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	68da      	ldr	r2, [r3, #12]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f042 0202 	orr.w	r2, r2, #2
 8009646:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	68da      	ldr	r2, [r3, #12]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f042 0204 	orr.w	r2, r2, #4
 8009656:	60da      	str	r2, [r3, #12]
      break;
 8009658:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f042 0201 	orr.w	r2, r2, #1
 8009668:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800966a:	2300      	movs	r3, #0
}
 800966c:	4618      	mov	r0, r3
 800966e:	3710      	adds	r7, #16
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	691b      	ldr	r3, [r3, #16]
 8009682:	f003 0302 	and.w	r3, r3, #2
 8009686:	2b02      	cmp	r3, #2
 8009688:	d122      	bne.n	80096d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	68db      	ldr	r3, [r3, #12]
 8009690:	f003 0302 	and.w	r3, r3, #2
 8009694:	2b02      	cmp	r3, #2
 8009696:	d11b      	bne.n	80096d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f06f 0202 	mvn.w	r2, #2
 80096a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2201      	movs	r2, #1
 80096a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	699b      	ldr	r3, [r3, #24]
 80096ae:	f003 0303 	and.w	r3, r3, #3
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d003      	beq.n	80096be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f7f8 fab2 	bl	8001c20 <HAL_TIM_IC_CaptureCallback>
 80096bc:	e005      	b.n	80096ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f000 fa69 	bl	8009b96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f000 fa70 	bl	8009baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2200      	movs	r2, #0
 80096ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	691b      	ldr	r3, [r3, #16]
 80096d6:	f003 0304 	and.w	r3, r3, #4
 80096da:	2b04      	cmp	r3, #4
 80096dc:	d122      	bne.n	8009724 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	68db      	ldr	r3, [r3, #12]
 80096e4:	f003 0304 	and.w	r3, r3, #4
 80096e8:	2b04      	cmp	r3, #4
 80096ea:	d11b      	bne.n	8009724 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f06f 0204 	mvn.w	r2, #4
 80096f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2202      	movs	r2, #2
 80096fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	699b      	ldr	r3, [r3, #24]
 8009702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009706:	2b00      	cmp	r3, #0
 8009708:	d003      	beq.n	8009712 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f7f8 fa88 	bl	8001c20 <HAL_TIM_IC_CaptureCallback>
 8009710:	e005      	b.n	800971e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 fa3f 	bl	8009b96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 fa46 	bl	8009baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2200      	movs	r2, #0
 8009722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	691b      	ldr	r3, [r3, #16]
 800972a:	f003 0308 	and.w	r3, r3, #8
 800972e:	2b08      	cmp	r3, #8
 8009730:	d122      	bne.n	8009778 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	68db      	ldr	r3, [r3, #12]
 8009738:	f003 0308 	and.w	r3, r3, #8
 800973c:	2b08      	cmp	r3, #8
 800973e:	d11b      	bne.n	8009778 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f06f 0208 	mvn.w	r2, #8
 8009748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2204      	movs	r2, #4
 800974e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	69db      	ldr	r3, [r3, #28]
 8009756:	f003 0303 	and.w	r3, r3, #3
 800975a:	2b00      	cmp	r3, #0
 800975c:	d003      	beq.n	8009766 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f7f8 fa5e 	bl	8001c20 <HAL_TIM_IC_CaptureCallback>
 8009764:	e005      	b.n	8009772 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 fa15 	bl	8009b96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f000 fa1c 	bl	8009baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2200      	movs	r2, #0
 8009776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	691b      	ldr	r3, [r3, #16]
 800977e:	f003 0310 	and.w	r3, r3, #16
 8009782:	2b10      	cmp	r3, #16
 8009784:	d122      	bne.n	80097cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	68db      	ldr	r3, [r3, #12]
 800978c:	f003 0310 	and.w	r3, r3, #16
 8009790:	2b10      	cmp	r3, #16
 8009792:	d11b      	bne.n	80097cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f06f 0210 	mvn.w	r2, #16
 800979c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2208      	movs	r2, #8
 80097a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	69db      	ldr	r3, [r3, #28]
 80097aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d003      	beq.n	80097ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f7f8 fa34 	bl	8001c20 <HAL_TIM_IC_CaptureCallback>
 80097b8:	e005      	b.n	80097c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f000 f9eb 	bl	8009b96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f000 f9f2 	bl	8009baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2200      	movs	r2, #0
 80097ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	691b      	ldr	r3, [r3, #16]
 80097d2:	f003 0301 	and.w	r3, r3, #1
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d10e      	bne.n	80097f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	68db      	ldr	r3, [r3, #12]
 80097e0:	f003 0301 	and.w	r3, r3, #1
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	d107      	bne.n	80097f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f06f 0201 	mvn.w	r2, #1
 80097f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f7f8 fb3e 	bl	8001e74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	691b      	ldr	r3, [r3, #16]
 80097fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009802:	2b80      	cmp	r3, #128	; 0x80
 8009804:	d10e      	bne.n	8009824 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	68db      	ldr	r3, [r3, #12]
 800980c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009810:	2b80      	cmp	r3, #128	; 0x80
 8009812:	d107      	bne.n	8009824 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800981c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 fd6e 	bl	800a300 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	691b      	ldr	r3, [r3, #16]
 800982a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800982e:	2b40      	cmp	r3, #64	; 0x40
 8009830:	d10e      	bne.n	8009850 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	68db      	ldr	r3, [r3, #12]
 8009838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800983c:	2b40      	cmp	r3, #64	; 0x40
 800983e:	d107      	bne.n	8009850 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 f9b7 	bl	8009bbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	691b      	ldr	r3, [r3, #16]
 8009856:	f003 0320 	and.w	r3, r3, #32
 800985a:	2b20      	cmp	r3, #32
 800985c:	d10e      	bne.n	800987c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	68db      	ldr	r3, [r3, #12]
 8009864:	f003 0320 	and.w	r3, r3, #32
 8009868:	2b20      	cmp	r3, #32
 800986a:	d107      	bne.n	800987c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f06f 0220 	mvn.w	r2, #32
 8009874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f000 fd38 	bl	800a2ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800987c:	bf00      	nop
 800987e:	3708      	adds	r7, #8
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b086      	sub	sp, #24
 8009888:	af00      	add	r7, sp, #0
 800988a:	60f8      	str	r0, [r7, #12]
 800988c:	60b9      	str	r1, [r7, #8]
 800988e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009890:	2300      	movs	r3, #0
 8009892:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800989a:	2b01      	cmp	r3, #1
 800989c:	d101      	bne.n	80098a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800989e:	2302      	movs	r3, #2
 80098a0:	e0ae      	b.n	8009a00 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2201      	movs	r2, #1
 80098a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2b0c      	cmp	r3, #12
 80098ae:	f200 809f 	bhi.w	80099f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80098b2:	a201      	add	r2, pc, #4	; (adr r2, 80098b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80098b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098b8:	080098ed 	.word	0x080098ed
 80098bc:	080099f1 	.word	0x080099f1
 80098c0:	080099f1 	.word	0x080099f1
 80098c4:	080099f1 	.word	0x080099f1
 80098c8:	0800992d 	.word	0x0800992d
 80098cc:	080099f1 	.word	0x080099f1
 80098d0:	080099f1 	.word	0x080099f1
 80098d4:	080099f1 	.word	0x080099f1
 80098d8:	0800996f 	.word	0x0800996f
 80098dc:	080099f1 	.word	0x080099f1
 80098e0:	080099f1 	.word	0x080099f1
 80098e4:	080099f1 	.word	0x080099f1
 80098e8:	080099af 	.word	0x080099af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	68b9      	ldr	r1, [r7, #8]
 80098f2:	4618      	mov	r0, r3
 80098f4:	f000 fa0e 	bl	8009d14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	699a      	ldr	r2, [r3, #24]
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f042 0208 	orr.w	r2, r2, #8
 8009906:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	699a      	ldr	r2, [r3, #24]
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f022 0204 	bic.w	r2, r2, #4
 8009916:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	6999      	ldr	r1, [r3, #24]
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	691a      	ldr	r2, [r3, #16]
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	430a      	orrs	r2, r1
 8009928:	619a      	str	r2, [r3, #24]
      break;
 800992a:	e064      	b.n	80099f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	68b9      	ldr	r1, [r7, #8]
 8009932:	4618      	mov	r0, r3
 8009934:	f000 fa5e 	bl	8009df4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	699a      	ldr	r2, [r3, #24]
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009946:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	699a      	ldr	r2, [r3, #24]
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009956:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	6999      	ldr	r1, [r3, #24]
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	691b      	ldr	r3, [r3, #16]
 8009962:	021a      	lsls	r2, r3, #8
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	430a      	orrs	r2, r1
 800996a:	619a      	str	r2, [r3, #24]
      break;
 800996c:	e043      	b.n	80099f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	68b9      	ldr	r1, [r7, #8]
 8009974:	4618      	mov	r0, r3
 8009976:	f000 fab3 	bl	8009ee0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	69da      	ldr	r2, [r3, #28]
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f042 0208 	orr.w	r2, r2, #8
 8009988:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	69da      	ldr	r2, [r3, #28]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f022 0204 	bic.w	r2, r2, #4
 8009998:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	69d9      	ldr	r1, [r3, #28]
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	691a      	ldr	r2, [r3, #16]
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	430a      	orrs	r2, r1
 80099aa:	61da      	str	r2, [r3, #28]
      break;
 80099ac:	e023      	b.n	80099f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	68b9      	ldr	r1, [r7, #8]
 80099b4:	4618      	mov	r0, r3
 80099b6:	f000 fb07 	bl	8009fc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	69da      	ldr	r2, [r3, #28]
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80099c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	69da      	ldr	r2, [r3, #28]
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80099d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	69d9      	ldr	r1, [r3, #28]
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	691b      	ldr	r3, [r3, #16]
 80099e4:	021a      	lsls	r2, r3, #8
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	430a      	orrs	r2, r1
 80099ec:	61da      	str	r2, [r3, #28]
      break;
 80099ee:	e002      	b.n	80099f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80099f0:	2301      	movs	r3, #1
 80099f2:	75fb      	strb	r3, [r7, #23]
      break;
 80099f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2200      	movs	r2, #0
 80099fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80099fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3718      	adds	r7, #24
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b084      	sub	sp, #16
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a12:	2300      	movs	r3, #0
 8009a14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a1c:	2b01      	cmp	r3, #1
 8009a1e:	d101      	bne.n	8009a24 <HAL_TIM_ConfigClockSource+0x1c>
 8009a20:	2302      	movs	r3, #2
 8009a22:	e0b4      	b.n	8009b8e <HAL_TIM_ConfigClockSource+0x186>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2201      	movs	r2, #1
 8009a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2202      	movs	r2, #2
 8009a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	689b      	ldr	r3, [r3, #8]
 8009a3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009a42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	68ba      	ldr	r2, [r7, #8]
 8009a52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a5c:	d03e      	beq.n	8009adc <HAL_TIM_ConfigClockSource+0xd4>
 8009a5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a62:	f200 8087 	bhi.w	8009b74 <HAL_TIM_ConfigClockSource+0x16c>
 8009a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a6a:	f000 8086 	beq.w	8009b7a <HAL_TIM_ConfigClockSource+0x172>
 8009a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a72:	d87f      	bhi.n	8009b74 <HAL_TIM_ConfigClockSource+0x16c>
 8009a74:	2b70      	cmp	r3, #112	; 0x70
 8009a76:	d01a      	beq.n	8009aae <HAL_TIM_ConfigClockSource+0xa6>
 8009a78:	2b70      	cmp	r3, #112	; 0x70
 8009a7a:	d87b      	bhi.n	8009b74 <HAL_TIM_ConfigClockSource+0x16c>
 8009a7c:	2b60      	cmp	r3, #96	; 0x60
 8009a7e:	d050      	beq.n	8009b22 <HAL_TIM_ConfigClockSource+0x11a>
 8009a80:	2b60      	cmp	r3, #96	; 0x60
 8009a82:	d877      	bhi.n	8009b74 <HAL_TIM_ConfigClockSource+0x16c>
 8009a84:	2b50      	cmp	r3, #80	; 0x50
 8009a86:	d03c      	beq.n	8009b02 <HAL_TIM_ConfigClockSource+0xfa>
 8009a88:	2b50      	cmp	r3, #80	; 0x50
 8009a8a:	d873      	bhi.n	8009b74 <HAL_TIM_ConfigClockSource+0x16c>
 8009a8c:	2b40      	cmp	r3, #64	; 0x40
 8009a8e:	d058      	beq.n	8009b42 <HAL_TIM_ConfigClockSource+0x13a>
 8009a90:	2b40      	cmp	r3, #64	; 0x40
 8009a92:	d86f      	bhi.n	8009b74 <HAL_TIM_ConfigClockSource+0x16c>
 8009a94:	2b30      	cmp	r3, #48	; 0x30
 8009a96:	d064      	beq.n	8009b62 <HAL_TIM_ConfigClockSource+0x15a>
 8009a98:	2b30      	cmp	r3, #48	; 0x30
 8009a9a:	d86b      	bhi.n	8009b74 <HAL_TIM_ConfigClockSource+0x16c>
 8009a9c:	2b20      	cmp	r3, #32
 8009a9e:	d060      	beq.n	8009b62 <HAL_TIM_ConfigClockSource+0x15a>
 8009aa0:	2b20      	cmp	r3, #32
 8009aa2:	d867      	bhi.n	8009b74 <HAL_TIM_ConfigClockSource+0x16c>
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d05c      	beq.n	8009b62 <HAL_TIM_ConfigClockSource+0x15a>
 8009aa8:	2b10      	cmp	r3, #16
 8009aaa:	d05a      	beq.n	8009b62 <HAL_TIM_ConfigClockSource+0x15a>
 8009aac:	e062      	b.n	8009b74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6818      	ldr	r0, [r3, #0]
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	6899      	ldr	r1, [r3, #8]
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	685a      	ldr	r2, [r3, #4]
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	68db      	ldr	r3, [r3, #12]
 8009abe:	f000 fb53 	bl	800a168 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	689b      	ldr	r3, [r3, #8]
 8009ac8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009ad0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	68ba      	ldr	r2, [r7, #8]
 8009ad8:	609a      	str	r2, [r3, #8]
      break;
 8009ada:	e04f      	b.n	8009b7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6818      	ldr	r0, [r3, #0]
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	6899      	ldr	r1, [r3, #8]
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	685a      	ldr	r2, [r3, #4]
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	68db      	ldr	r3, [r3, #12]
 8009aec:	f000 fb3c 	bl	800a168 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	689a      	ldr	r2, [r3, #8]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009afe:	609a      	str	r2, [r3, #8]
      break;
 8009b00:	e03c      	b.n	8009b7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6818      	ldr	r0, [r3, #0]
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	6859      	ldr	r1, [r3, #4]
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	68db      	ldr	r3, [r3, #12]
 8009b0e:	461a      	mov	r2, r3
 8009b10:	f000 fab0 	bl	800a074 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	2150      	movs	r1, #80	; 0x50
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f000 fb09 	bl	800a132 <TIM_ITRx_SetConfig>
      break;
 8009b20:	e02c      	b.n	8009b7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6818      	ldr	r0, [r3, #0]
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	6859      	ldr	r1, [r3, #4]
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	68db      	ldr	r3, [r3, #12]
 8009b2e:	461a      	mov	r2, r3
 8009b30:	f000 facf 	bl	800a0d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	2160      	movs	r1, #96	; 0x60
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f000 faf9 	bl	800a132 <TIM_ITRx_SetConfig>
      break;
 8009b40:	e01c      	b.n	8009b7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6818      	ldr	r0, [r3, #0]
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	6859      	ldr	r1, [r3, #4]
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	68db      	ldr	r3, [r3, #12]
 8009b4e:	461a      	mov	r2, r3
 8009b50:	f000 fa90 	bl	800a074 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	2140      	movs	r1, #64	; 0x40
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f000 fae9 	bl	800a132 <TIM_ITRx_SetConfig>
      break;
 8009b60:	e00c      	b.n	8009b7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681a      	ldr	r2, [r3, #0]
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4619      	mov	r1, r3
 8009b6c:	4610      	mov	r0, r2
 8009b6e:	f000 fae0 	bl	800a132 <TIM_ITRx_SetConfig>
      break;
 8009b72:	e003      	b.n	8009b7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009b74:	2301      	movs	r3, #1
 8009b76:	73fb      	strb	r3, [r7, #15]
      break;
 8009b78:	e000      	b.n	8009b7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009b7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3710      	adds	r7, #16
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}

08009b96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009b96:	b480      	push	{r7}
 8009b98:	b083      	sub	sp, #12
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009b9e:	bf00      	nop
 8009ba0:	370c      	adds	r7, #12
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba8:	4770      	bx	lr

08009baa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009baa:	b480      	push	{r7}
 8009bac:	b083      	sub	sp, #12
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009bb2:	bf00      	nop
 8009bb4:	370c      	adds	r7, #12
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbc:	4770      	bx	lr

08009bbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009bbe:	b480      	push	{r7}
 8009bc0:	b083      	sub	sp, #12
 8009bc2:	af00      	add	r7, sp, #0
 8009bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009bc6:	bf00      	nop
 8009bc8:	370c      	adds	r7, #12
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr
	...

08009bd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b085      	sub	sp, #20
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	4a40      	ldr	r2, [pc, #256]	; (8009ce8 <TIM_Base_SetConfig+0x114>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d013      	beq.n	8009c14 <TIM_Base_SetConfig+0x40>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bf2:	d00f      	beq.n	8009c14 <TIM_Base_SetConfig+0x40>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	4a3d      	ldr	r2, [pc, #244]	; (8009cec <TIM_Base_SetConfig+0x118>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d00b      	beq.n	8009c14 <TIM_Base_SetConfig+0x40>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	4a3c      	ldr	r2, [pc, #240]	; (8009cf0 <TIM_Base_SetConfig+0x11c>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d007      	beq.n	8009c14 <TIM_Base_SetConfig+0x40>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	4a3b      	ldr	r2, [pc, #236]	; (8009cf4 <TIM_Base_SetConfig+0x120>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d003      	beq.n	8009c14 <TIM_Base_SetConfig+0x40>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	4a3a      	ldr	r2, [pc, #232]	; (8009cf8 <TIM_Base_SetConfig+0x124>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d108      	bne.n	8009c26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	685b      	ldr	r3, [r3, #4]
 8009c20:	68fa      	ldr	r2, [r7, #12]
 8009c22:	4313      	orrs	r3, r2
 8009c24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	4a2f      	ldr	r2, [pc, #188]	; (8009ce8 <TIM_Base_SetConfig+0x114>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d02b      	beq.n	8009c86 <TIM_Base_SetConfig+0xb2>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c34:	d027      	beq.n	8009c86 <TIM_Base_SetConfig+0xb2>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	4a2c      	ldr	r2, [pc, #176]	; (8009cec <TIM_Base_SetConfig+0x118>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d023      	beq.n	8009c86 <TIM_Base_SetConfig+0xb2>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	4a2b      	ldr	r2, [pc, #172]	; (8009cf0 <TIM_Base_SetConfig+0x11c>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d01f      	beq.n	8009c86 <TIM_Base_SetConfig+0xb2>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	4a2a      	ldr	r2, [pc, #168]	; (8009cf4 <TIM_Base_SetConfig+0x120>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d01b      	beq.n	8009c86 <TIM_Base_SetConfig+0xb2>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	4a29      	ldr	r2, [pc, #164]	; (8009cf8 <TIM_Base_SetConfig+0x124>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d017      	beq.n	8009c86 <TIM_Base_SetConfig+0xb2>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	4a28      	ldr	r2, [pc, #160]	; (8009cfc <TIM_Base_SetConfig+0x128>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d013      	beq.n	8009c86 <TIM_Base_SetConfig+0xb2>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	4a27      	ldr	r2, [pc, #156]	; (8009d00 <TIM_Base_SetConfig+0x12c>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d00f      	beq.n	8009c86 <TIM_Base_SetConfig+0xb2>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	4a26      	ldr	r2, [pc, #152]	; (8009d04 <TIM_Base_SetConfig+0x130>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d00b      	beq.n	8009c86 <TIM_Base_SetConfig+0xb2>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	4a25      	ldr	r2, [pc, #148]	; (8009d08 <TIM_Base_SetConfig+0x134>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d007      	beq.n	8009c86 <TIM_Base_SetConfig+0xb2>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	4a24      	ldr	r2, [pc, #144]	; (8009d0c <TIM_Base_SetConfig+0x138>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d003      	beq.n	8009c86 <TIM_Base_SetConfig+0xb2>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	4a23      	ldr	r2, [pc, #140]	; (8009d10 <TIM_Base_SetConfig+0x13c>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d108      	bne.n	8009c98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	68db      	ldr	r3, [r3, #12]
 8009c92:	68fa      	ldr	r2, [r7, #12]
 8009c94:	4313      	orrs	r3, r2
 8009c96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	695b      	ldr	r3, [r3, #20]
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	68fa      	ldr	r2, [r7, #12]
 8009caa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	689a      	ldr	r2, [r3, #8]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	681a      	ldr	r2, [r3, #0]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	4a0a      	ldr	r2, [pc, #40]	; (8009ce8 <TIM_Base_SetConfig+0x114>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d003      	beq.n	8009ccc <TIM_Base_SetConfig+0xf8>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	4a0c      	ldr	r2, [pc, #48]	; (8009cf8 <TIM_Base_SetConfig+0x124>)
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	d103      	bne.n	8009cd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	691a      	ldr	r2, [r3, #16]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	615a      	str	r2, [r3, #20]
}
 8009cda:	bf00      	nop
 8009cdc:	3714      	adds	r7, #20
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce4:	4770      	bx	lr
 8009ce6:	bf00      	nop
 8009ce8:	40010000 	.word	0x40010000
 8009cec:	40000400 	.word	0x40000400
 8009cf0:	40000800 	.word	0x40000800
 8009cf4:	40000c00 	.word	0x40000c00
 8009cf8:	40010400 	.word	0x40010400
 8009cfc:	40014000 	.word	0x40014000
 8009d00:	40014400 	.word	0x40014400
 8009d04:	40014800 	.word	0x40014800
 8009d08:	40001800 	.word	0x40001800
 8009d0c:	40001c00 	.word	0x40001c00
 8009d10:	40002000 	.word	0x40002000

08009d14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b087      	sub	sp, #28
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6a1b      	ldr	r3, [r3, #32]
 8009d22:	f023 0201 	bic.w	r2, r3, #1
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6a1b      	ldr	r3, [r3, #32]
 8009d2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	699b      	ldr	r3, [r3, #24]
 8009d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f023 0303 	bic.w	r3, r3, #3
 8009d4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	68fa      	ldr	r2, [r7, #12]
 8009d52:	4313      	orrs	r3, r2
 8009d54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	f023 0302 	bic.w	r3, r3, #2
 8009d5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	689b      	ldr	r3, [r3, #8]
 8009d62:	697a      	ldr	r2, [r7, #20]
 8009d64:	4313      	orrs	r3, r2
 8009d66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	4a20      	ldr	r2, [pc, #128]	; (8009dec <TIM_OC1_SetConfig+0xd8>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d003      	beq.n	8009d78 <TIM_OC1_SetConfig+0x64>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	4a1f      	ldr	r2, [pc, #124]	; (8009df0 <TIM_OC1_SetConfig+0xdc>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d10c      	bne.n	8009d92 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	f023 0308 	bic.w	r3, r3, #8
 8009d7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	68db      	ldr	r3, [r3, #12]
 8009d84:	697a      	ldr	r2, [r7, #20]
 8009d86:	4313      	orrs	r3, r2
 8009d88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	f023 0304 	bic.w	r3, r3, #4
 8009d90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	4a15      	ldr	r2, [pc, #84]	; (8009dec <TIM_OC1_SetConfig+0xd8>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d003      	beq.n	8009da2 <TIM_OC1_SetConfig+0x8e>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	4a14      	ldr	r2, [pc, #80]	; (8009df0 <TIM_OC1_SetConfig+0xdc>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d111      	bne.n	8009dc6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009da8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009db0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	695b      	ldr	r3, [r3, #20]
 8009db6:	693a      	ldr	r2, [r7, #16]
 8009db8:	4313      	orrs	r3, r2
 8009dba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	699b      	ldr	r3, [r3, #24]
 8009dc0:	693a      	ldr	r2, [r7, #16]
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	693a      	ldr	r2, [r7, #16]
 8009dca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	68fa      	ldr	r2, [r7, #12]
 8009dd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	685a      	ldr	r2, [r3, #4]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	697a      	ldr	r2, [r7, #20]
 8009dde:	621a      	str	r2, [r3, #32]
}
 8009de0:	bf00      	nop
 8009de2:	371c      	adds	r7, #28
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr
 8009dec:	40010000 	.word	0x40010000
 8009df0:	40010400 	.word	0x40010400

08009df4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b087      	sub	sp, #28
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6a1b      	ldr	r3, [r3, #32]
 8009e02:	f023 0210 	bic.w	r2, r3, #16
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6a1b      	ldr	r3, [r3, #32]
 8009e0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	699b      	ldr	r3, [r3, #24]
 8009e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	021b      	lsls	r3, r3, #8
 8009e32:	68fa      	ldr	r2, [r7, #12]
 8009e34:	4313      	orrs	r3, r2
 8009e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	f023 0320 	bic.w	r3, r3, #32
 8009e3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	689b      	ldr	r3, [r3, #8]
 8009e44:	011b      	lsls	r3, r3, #4
 8009e46:	697a      	ldr	r2, [r7, #20]
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	4a22      	ldr	r2, [pc, #136]	; (8009ed8 <TIM_OC2_SetConfig+0xe4>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d003      	beq.n	8009e5c <TIM_OC2_SetConfig+0x68>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	4a21      	ldr	r2, [pc, #132]	; (8009edc <TIM_OC2_SetConfig+0xe8>)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d10d      	bne.n	8009e78 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	68db      	ldr	r3, [r3, #12]
 8009e68:	011b      	lsls	r3, r3, #4
 8009e6a:	697a      	ldr	r2, [r7, #20]
 8009e6c:	4313      	orrs	r3, r2
 8009e6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	4a17      	ldr	r2, [pc, #92]	; (8009ed8 <TIM_OC2_SetConfig+0xe4>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d003      	beq.n	8009e88 <TIM_OC2_SetConfig+0x94>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	4a16      	ldr	r2, [pc, #88]	; (8009edc <TIM_OC2_SetConfig+0xe8>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d113      	bne.n	8009eb0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009e8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009e96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	695b      	ldr	r3, [r3, #20]
 8009e9c:	009b      	lsls	r3, r3, #2
 8009e9e:	693a      	ldr	r2, [r7, #16]
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	699b      	ldr	r3, [r3, #24]
 8009ea8:	009b      	lsls	r3, r3, #2
 8009eaa:	693a      	ldr	r2, [r7, #16]
 8009eac:	4313      	orrs	r3, r2
 8009eae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	693a      	ldr	r2, [r7, #16]
 8009eb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	68fa      	ldr	r2, [r7, #12]
 8009eba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	685a      	ldr	r2, [r3, #4]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	697a      	ldr	r2, [r7, #20]
 8009ec8:	621a      	str	r2, [r3, #32]
}
 8009eca:	bf00      	nop
 8009ecc:	371c      	adds	r7, #28
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed4:	4770      	bx	lr
 8009ed6:	bf00      	nop
 8009ed8:	40010000 	.word	0x40010000
 8009edc:	40010400 	.word	0x40010400

08009ee0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b087      	sub	sp, #28
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6a1b      	ldr	r3, [r3, #32]
 8009eee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6a1b      	ldr	r3, [r3, #32]
 8009efa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	69db      	ldr	r3, [r3, #28]
 8009f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	f023 0303 	bic.w	r3, r3, #3
 8009f16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	68fa      	ldr	r2, [r7, #12]
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009f28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	689b      	ldr	r3, [r3, #8]
 8009f2e:	021b      	lsls	r3, r3, #8
 8009f30:	697a      	ldr	r2, [r7, #20]
 8009f32:	4313      	orrs	r3, r2
 8009f34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	4a21      	ldr	r2, [pc, #132]	; (8009fc0 <TIM_OC3_SetConfig+0xe0>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d003      	beq.n	8009f46 <TIM_OC3_SetConfig+0x66>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	4a20      	ldr	r2, [pc, #128]	; (8009fc4 <TIM_OC3_SetConfig+0xe4>)
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d10d      	bne.n	8009f62 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	68db      	ldr	r3, [r3, #12]
 8009f52:	021b      	lsls	r3, r3, #8
 8009f54:	697a      	ldr	r2, [r7, #20]
 8009f56:	4313      	orrs	r3, r2
 8009f58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	4a16      	ldr	r2, [pc, #88]	; (8009fc0 <TIM_OC3_SetConfig+0xe0>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d003      	beq.n	8009f72 <TIM_OC3_SetConfig+0x92>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	4a15      	ldr	r2, [pc, #84]	; (8009fc4 <TIM_OC3_SetConfig+0xe4>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d113      	bne.n	8009f9a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009f80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	695b      	ldr	r3, [r3, #20]
 8009f86:	011b      	lsls	r3, r3, #4
 8009f88:	693a      	ldr	r2, [r7, #16]
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	699b      	ldr	r3, [r3, #24]
 8009f92:	011b      	lsls	r3, r3, #4
 8009f94:	693a      	ldr	r2, [r7, #16]
 8009f96:	4313      	orrs	r3, r2
 8009f98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	693a      	ldr	r2, [r7, #16]
 8009f9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	68fa      	ldr	r2, [r7, #12]
 8009fa4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	685a      	ldr	r2, [r3, #4]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	697a      	ldr	r2, [r7, #20]
 8009fb2:	621a      	str	r2, [r3, #32]
}
 8009fb4:	bf00      	nop
 8009fb6:	371c      	adds	r7, #28
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbe:	4770      	bx	lr
 8009fc0:	40010000 	.word	0x40010000
 8009fc4:	40010400 	.word	0x40010400

08009fc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b087      	sub	sp, #28
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6a1b      	ldr	r3, [r3, #32]
 8009fd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6a1b      	ldr	r3, [r3, #32]
 8009fe2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	69db      	ldr	r3, [r3, #28]
 8009fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ffe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	021b      	lsls	r3, r3, #8
 800a006:	68fa      	ldr	r2, [r7, #12]
 800a008:	4313      	orrs	r3, r2
 800a00a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a012:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	689b      	ldr	r3, [r3, #8]
 800a018:	031b      	lsls	r3, r3, #12
 800a01a:	693a      	ldr	r2, [r7, #16]
 800a01c:	4313      	orrs	r3, r2
 800a01e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	4a12      	ldr	r2, [pc, #72]	; (800a06c <TIM_OC4_SetConfig+0xa4>)
 800a024:	4293      	cmp	r3, r2
 800a026:	d003      	beq.n	800a030 <TIM_OC4_SetConfig+0x68>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	4a11      	ldr	r2, [pc, #68]	; (800a070 <TIM_OC4_SetConfig+0xa8>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d109      	bne.n	800a044 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a036:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	695b      	ldr	r3, [r3, #20]
 800a03c:	019b      	lsls	r3, r3, #6
 800a03e:	697a      	ldr	r2, [r7, #20]
 800a040:	4313      	orrs	r3, r2
 800a042:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	697a      	ldr	r2, [r7, #20]
 800a048:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	68fa      	ldr	r2, [r7, #12]
 800a04e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	685a      	ldr	r2, [r3, #4]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	693a      	ldr	r2, [r7, #16]
 800a05c:	621a      	str	r2, [r3, #32]
}
 800a05e:	bf00      	nop
 800a060:	371c      	adds	r7, #28
 800a062:	46bd      	mov	sp, r7
 800a064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a068:	4770      	bx	lr
 800a06a:	bf00      	nop
 800a06c:	40010000 	.word	0x40010000
 800a070:	40010400 	.word	0x40010400

0800a074 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a074:	b480      	push	{r7}
 800a076:	b087      	sub	sp, #28
 800a078:	af00      	add	r7, sp, #0
 800a07a:	60f8      	str	r0, [r7, #12]
 800a07c:	60b9      	str	r1, [r7, #8]
 800a07e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	6a1b      	ldr	r3, [r3, #32]
 800a084:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	6a1b      	ldr	r3, [r3, #32]
 800a08a:	f023 0201 	bic.w	r2, r3, #1
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	699b      	ldr	r3, [r3, #24]
 800a096:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a09e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	011b      	lsls	r3, r3, #4
 800a0a4:	693a      	ldr	r2, [r7, #16]
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	f023 030a 	bic.w	r3, r3, #10
 800a0b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a0b2:	697a      	ldr	r2, [r7, #20]
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	693a      	ldr	r2, [r7, #16]
 800a0be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	697a      	ldr	r2, [r7, #20]
 800a0c4:	621a      	str	r2, [r3, #32]
}
 800a0c6:	bf00      	nop
 800a0c8:	371c      	adds	r7, #28
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr

0800a0d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a0d2:	b480      	push	{r7}
 800a0d4:	b087      	sub	sp, #28
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	60f8      	str	r0, [r7, #12]
 800a0da:	60b9      	str	r1, [r7, #8]
 800a0dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	6a1b      	ldr	r3, [r3, #32]
 800a0e2:	f023 0210 	bic.w	r2, r3, #16
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	699b      	ldr	r3, [r3, #24]
 800a0ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	6a1b      	ldr	r3, [r3, #32]
 800a0f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a0fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	031b      	lsls	r3, r3, #12
 800a102:	697a      	ldr	r2, [r7, #20]
 800a104:	4313      	orrs	r3, r2
 800a106:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a10e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	011b      	lsls	r3, r3, #4
 800a114:	693a      	ldr	r2, [r7, #16]
 800a116:	4313      	orrs	r3, r2
 800a118:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	697a      	ldr	r2, [r7, #20]
 800a11e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	693a      	ldr	r2, [r7, #16]
 800a124:	621a      	str	r2, [r3, #32]
}
 800a126:	bf00      	nop
 800a128:	371c      	adds	r7, #28
 800a12a:	46bd      	mov	sp, r7
 800a12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a130:	4770      	bx	lr

0800a132 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a132:	b480      	push	{r7}
 800a134:	b085      	sub	sp, #20
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
 800a13a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	689b      	ldr	r3, [r3, #8]
 800a140:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a148:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a14a:	683a      	ldr	r2, [r7, #0]
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	4313      	orrs	r3, r2
 800a150:	f043 0307 	orr.w	r3, r3, #7
 800a154:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	68fa      	ldr	r2, [r7, #12]
 800a15a:	609a      	str	r2, [r3, #8]
}
 800a15c:	bf00      	nop
 800a15e:	3714      	adds	r7, #20
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr

0800a168 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a168:	b480      	push	{r7}
 800a16a:	b087      	sub	sp, #28
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	60f8      	str	r0, [r7, #12]
 800a170:	60b9      	str	r1, [r7, #8]
 800a172:	607a      	str	r2, [r7, #4]
 800a174:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	689b      	ldr	r3, [r3, #8]
 800a17a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a182:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	021a      	lsls	r2, r3, #8
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	431a      	orrs	r2, r3
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	4313      	orrs	r3, r2
 800a190:	697a      	ldr	r2, [r7, #20]
 800a192:	4313      	orrs	r3, r2
 800a194:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	697a      	ldr	r2, [r7, #20]
 800a19a:	609a      	str	r2, [r3, #8]
}
 800a19c:	bf00      	nop
 800a19e:	371c      	adds	r7, #28
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a6:	4770      	bx	lr

0800a1a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b087      	sub	sp, #28
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	60f8      	str	r0, [r7, #12]
 800a1b0:	60b9      	str	r1, [r7, #8]
 800a1b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	f003 031f 	and.w	r3, r3, #31
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	fa02 f303 	lsl.w	r3, r2, r3
 800a1c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	6a1a      	ldr	r2, [r3, #32]
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	43db      	mvns	r3, r3
 800a1ca:	401a      	ands	r2, r3
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	6a1a      	ldr	r2, [r3, #32]
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	f003 031f 	and.w	r3, r3, #31
 800a1da:	6879      	ldr	r1, [r7, #4]
 800a1dc:	fa01 f303 	lsl.w	r3, r1, r3
 800a1e0:	431a      	orrs	r2, r3
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	621a      	str	r2, [r3, #32]
}
 800a1e6:	bf00      	nop
 800a1e8:	371c      	adds	r7, #28
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f0:	4770      	bx	lr
	...

0800a1f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b085      	sub	sp, #20
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a204:	2b01      	cmp	r3, #1
 800a206:	d101      	bne.n	800a20c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a208:	2302      	movs	r3, #2
 800a20a:	e05a      	b.n	800a2c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2201      	movs	r2, #1
 800a210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2202      	movs	r2, #2
 800a218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	685b      	ldr	r3, [r3, #4]
 800a222:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	689b      	ldr	r3, [r3, #8]
 800a22a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a232:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	68fa      	ldr	r2, [r7, #12]
 800a23a:	4313      	orrs	r3, r2
 800a23c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	68fa      	ldr	r2, [r7, #12]
 800a244:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	4a21      	ldr	r2, [pc, #132]	; (800a2d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a24c:	4293      	cmp	r3, r2
 800a24e:	d022      	beq.n	800a296 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a258:	d01d      	beq.n	800a296 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	4a1d      	ldr	r2, [pc, #116]	; (800a2d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a260:	4293      	cmp	r3, r2
 800a262:	d018      	beq.n	800a296 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	4a1b      	ldr	r2, [pc, #108]	; (800a2d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d013      	beq.n	800a296 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	4a1a      	ldr	r2, [pc, #104]	; (800a2dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d00e      	beq.n	800a296 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	4a18      	ldr	r2, [pc, #96]	; (800a2e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d009      	beq.n	800a296 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4a17      	ldr	r2, [pc, #92]	; (800a2e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d004      	beq.n	800a296 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4a15      	ldr	r2, [pc, #84]	; (800a2e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d10c      	bne.n	800a2b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a29c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	685b      	ldr	r3, [r3, #4]
 800a2a2:	68ba      	ldr	r2, [r7, #8]
 800a2a4:	4313      	orrs	r3, r2
 800a2a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	68ba      	ldr	r2, [r7, #8]
 800a2ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a2c0:	2300      	movs	r3, #0
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3714      	adds	r7, #20
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2cc:	4770      	bx	lr
 800a2ce:	bf00      	nop
 800a2d0:	40010000 	.word	0x40010000
 800a2d4:	40000400 	.word	0x40000400
 800a2d8:	40000800 	.word	0x40000800
 800a2dc:	40000c00 	.word	0x40000c00
 800a2e0:	40010400 	.word	0x40010400
 800a2e4:	40014000 	.word	0x40014000
 800a2e8:	40001800 	.word	0x40001800

0800a2ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b083      	sub	sp, #12
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a2f4:	bf00      	nop
 800a2f6:	370c      	adds	r7, #12
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr

0800a300 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a300:	b480      	push	{r7}
 800a302:	b083      	sub	sp, #12
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a308:	bf00      	nop
 800a30a:	370c      	adds	r7, #12
 800a30c:	46bd      	mov	sp, r7
 800a30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a312:	4770      	bx	lr

0800a314 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b082      	sub	sp, #8
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d101      	bne.n	800a326 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a322:	2301      	movs	r3, #1
 800a324:	e03f      	b.n	800a3a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a32c:	b2db      	uxtb	r3, r3
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d106      	bne.n	800a340 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2200      	movs	r2, #0
 800a336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f7fd f868 	bl	8007410 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2224      	movs	r2, #36	; 0x24
 800a344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	68da      	ldr	r2, [r3, #12]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a356:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f000 ff43 	bl	800b1e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	691a      	ldr	r2, [r3, #16]
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a36c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	695a      	ldr	r2, [r3, #20]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a37c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	68da      	ldr	r2, [r3, #12]
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a38c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2200      	movs	r2, #0
 800a392:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2220      	movs	r2, #32
 800a398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2220      	movs	r2, #32
 800a3a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a3a4:	2300      	movs	r3, #0
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3708      	adds	r7, #8
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}
	...

0800a3b0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b08c      	sub	sp, #48	; 0x30
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	60f8      	str	r0, [r7, #12]
 800a3b8:	60b9      	str	r1, [r7, #8]
 800a3ba:	4613      	mov	r3, r2
 800a3bc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3c4:	b2db      	uxtb	r3, r3
 800a3c6:	2b20      	cmp	r3, #32
 800a3c8:	d165      	bne.n	800a496 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d002      	beq.n	800a3d6 <HAL_UART_Transmit_DMA+0x26>
 800a3d0:	88fb      	ldrh	r3, [r7, #6]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d101      	bne.n	800a3da <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	e05e      	b.n	800a498 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3e0:	2b01      	cmp	r3, #1
 800a3e2:	d101      	bne.n	800a3e8 <HAL_UART_Transmit_DMA+0x38>
 800a3e4:	2302      	movs	r3, #2
 800a3e6:	e057      	b.n	800a498 <HAL_UART_Transmit_DMA+0xe8>
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a3f0:	68ba      	ldr	r2, [r7, #8]
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	88fa      	ldrh	r2, [r7, #6]
 800a3fa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	88fa      	ldrh	r2, [r7, #6]
 800a400:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	2200      	movs	r2, #0
 800a406:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2221      	movs	r2, #33	; 0x21
 800a40c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a414:	4a22      	ldr	r2, [pc, #136]	; (800a4a0 <HAL_UART_Transmit_DMA+0xf0>)
 800a416:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a41c:	4a21      	ldr	r2, [pc, #132]	; (800a4a4 <HAL_UART_Transmit_DMA+0xf4>)
 800a41e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a424:	4a20      	ldr	r2, [pc, #128]	; (800a4a8 <HAL_UART_Transmit_DMA+0xf8>)
 800a426:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a42c:	2200      	movs	r2, #0
 800a42e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800a430:	f107 0308 	add.w	r3, r7, #8
 800a434:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a43c:	6819      	ldr	r1, [r3, #0]
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	3304      	adds	r3, #4
 800a444:	461a      	mov	r2, r3
 800a446:	88fb      	ldrh	r3, [r7, #6]
 800a448:	f7fd fc0a 	bl	8007c60 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a454:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2200      	movs	r2, #0
 800a45a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	3314      	adds	r3, #20
 800a464:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a466:	69bb      	ldr	r3, [r7, #24]
 800a468:	e853 3f00 	ldrex	r3, [r3]
 800a46c:	617b      	str	r3, [r7, #20]
   return(result);
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a474:	62bb      	str	r3, [r7, #40]	; 0x28
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	3314      	adds	r3, #20
 800a47c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a47e:	627a      	str	r2, [r7, #36]	; 0x24
 800a480:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a482:	6a39      	ldr	r1, [r7, #32]
 800a484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a486:	e841 2300 	strex	r3, r2, [r1]
 800a48a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a48c:	69fb      	ldr	r3, [r7, #28]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d1e5      	bne.n	800a45e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800a492:	2300      	movs	r3, #0
 800a494:	e000      	b.n	800a498 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800a496:	2302      	movs	r3, #2
  }
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3730      	adds	r7, #48	; 0x30
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}
 800a4a0:	0800aa7d 	.word	0x0800aa7d
 800a4a4:	0800ab17 	.word	0x0800ab17
 800a4a8:	0800ac8f 	.word	0x0800ac8f

0800a4ac <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b084      	sub	sp, #16
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	60f8      	str	r0, [r7, #12]
 800a4b4:	60b9      	str	r1, [r7, #8]
 800a4b6:	4613      	mov	r3, r2
 800a4b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a4c0:	b2db      	uxtb	r3, r3
 800a4c2:	2b20      	cmp	r3, #32
 800a4c4:	d11d      	bne.n	800a502 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d002      	beq.n	800a4d2 <HAL_UART_Receive_DMA+0x26>
 800a4cc:	88fb      	ldrh	r3, [r7, #6]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d101      	bne.n	800a4d6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	e016      	b.n	800a504 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	d101      	bne.n	800a4e4 <HAL_UART_Receive_DMA+0x38>
 800a4e0:	2302      	movs	r3, #2
 800a4e2:	e00f      	b.n	800a504 <HAL_UART_Receive_DMA+0x58>
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a4f2:	88fb      	ldrh	r3, [r7, #6]
 800a4f4:	461a      	mov	r2, r3
 800a4f6:	68b9      	ldr	r1, [r7, #8]
 800a4f8:	68f8      	ldr	r0, [r7, #12]
 800a4fa:	f000 fc13 	bl	800ad24 <UART_Start_Receive_DMA>
 800a4fe:	4603      	mov	r3, r0
 800a500:	e000      	b.n	800a504 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a502:	2302      	movs	r3, #2
  }
}
 800a504:	4618      	mov	r0, r3
 800a506:	3710      	adds	r7, #16
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b0ba      	sub	sp, #232	; 0xe8
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	68db      	ldr	r3, [r3, #12]
 800a524:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	695b      	ldr	r3, [r3, #20]
 800a52e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a532:	2300      	movs	r3, #0
 800a534:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a538:	2300      	movs	r3, #0
 800a53a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a53e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a542:	f003 030f 	and.w	r3, r3, #15
 800a546:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a54a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d10f      	bne.n	800a572 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a556:	f003 0320 	and.w	r3, r3, #32
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d009      	beq.n	800a572 <HAL_UART_IRQHandler+0x66>
 800a55e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a562:	f003 0320 	and.w	r3, r3, #32
 800a566:	2b00      	cmp	r3, #0
 800a568:	d003      	beq.n	800a572 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f000 fd7f 	bl	800b06e <UART_Receive_IT>
      return;
 800a570:	e256      	b.n	800aa20 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a572:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a576:	2b00      	cmp	r3, #0
 800a578:	f000 80de 	beq.w	800a738 <HAL_UART_IRQHandler+0x22c>
 800a57c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a580:	f003 0301 	and.w	r3, r3, #1
 800a584:	2b00      	cmp	r3, #0
 800a586:	d106      	bne.n	800a596 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a58c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a590:	2b00      	cmp	r3, #0
 800a592:	f000 80d1 	beq.w	800a738 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a59a:	f003 0301 	and.w	r3, r3, #1
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d00b      	beq.n	800a5ba <HAL_UART_IRQHandler+0xae>
 800a5a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d005      	beq.n	800a5ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5b2:	f043 0201 	orr.w	r2, r3, #1
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a5ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5be:	f003 0304 	and.w	r3, r3, #4
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d00b      	beq.n	800a5de <HAL_UART_IRQHandler+0xd2>
 800a5c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a5ca:	f003 0301 	and.w	r3, r3, #1
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d005      	beq.n	800a5de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5d6:	f043 0202 	orr.w	r2, r3, #2
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a5de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5e2:	f003 0302 	and.w	r3, r3, #2
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d00b      	beq.n	800a602 <HAL_UART_IRQHandler+0xf6>
 800a5ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a5ee:	f003 0301 	and.w	r3, r3, #1
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d005      	beq.n	800a602 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5fa:	f043 0204 	orr.w	r2, r3, #4
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a606:	f003 0308 	and.w	r3, r3, #8
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d011      	beq.n	800a632 <HAL_UART_IRQHandler+0x126>
 800a60e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a612:	f003 0320 	and.w	r3, r3, #32
 800a616:	2b00      	cmp	r3, #0
 800a618:	d105      	bne.n	800a626 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a61a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a61e:	f003 0301 	and.w	r3, r3, #1
 800a622:	2b00      	cmp	r3, #0
 800a624:	d005      	beq.n	800a632 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a62a:	f043 0208 	orr.w	r2, r3, #8
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a636:	2b00      	cmp	r3, #0
 800a638:	f000 81ed 	beq.w	800aa16 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a63c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a640:	f003 0320 	and.w	r3, r3, #32
 800a644:	2b00      	cmp	r3, #0
 800a646:	d008      	beq.n	800a65a <HAL_UART_IRQHandler+0x14e>
 800a648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a64c:	f003 0320 	and.w	r3, r3, #32
 800a650:	2b00      	cmp	r3, #0
 800a652:	d002      	beq.n	800a65a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f000 fd0a 	bl	800b06e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	695b      	ldr	r3, [r3, #20]
 800a660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a664:	2b40      	cmp	r3, #64	; 0x40
 800a666:	bf0c      	ite	eq
 800a668:	2301      	moveq	r3, #1
 800a66a:	2300      	movne	r3, #0
 800a66c:	b2db      	uxtb	r3, r3
 800a66e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a676:	f003 0308 	and.w	r3, r3, #8
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d103      	bne.n	800a686 <HAL_UART_IRQHandler+0x17a>
 800a67e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a682:	2b00      	cmp	r3, #0
 800a684:	d04f      	beq.n	800a726 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f000 fc12 	bl	800aeb0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	695b      	ldr	r3, [r3, #20]
 800a692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a696:	2b40      	cmp	r3, #64	; 0x40
 800a698:	d141      	bne.n	800a71e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	3314      	adds	r3, #20
 800a6a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a6a8:	e853 3f00 	ldrex	r3, [r3]
 800a6ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a6b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a6b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	3314      	adds	r3, #20
 800a6c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a6c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a6ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a6d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a6d6:	e841 2300 	strex	r3, r2, [r1]
 800a6da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a6de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d1d9      	bne.n	800a69a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d013      	beq.n	800a716 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6f2:	4a7d      	ldr	r2, [pc, #500]	; (800a8e8 <HAL_UART_IRQHandler+0x3dc>)
 800a6f4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f7fd fb78 	bl	8007df0 <HAL_DMA_Abort_IT>
 800a700:	4603      	mov	r3, r0
 800a702:	2b00      	cmp	r3, #0
 800a704:	d016      	beq.n	800a734 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a70a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a70c:	687a      	ldr	r2, [r7, #4]
 800a70e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a710:	4610      	mov	r0, r2
 800a712:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a714:	e00e      	b.n	800a734 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f000 f99a 	bl	800aa50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a71c:	e00a      	b.n	800a734 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f000 f996 	bl	800aa50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a724:	e006      	b.n	800a734 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f000 f992 	bl	800aa50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2200      	movs	r2, #0
 800a730:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a732:	e170      	b.n	800aa16 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a734:	bf00      	nop
    return;
 800a736:	e16e      	b.n	800aa16 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	f040 814a 	bne.w	800a9d6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a746:	f003 0310 	and.w	r3, r3, #16
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	f000 8143 	beq.w	800a9d6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a754:	f003 0310 	and.w	r3, r3, #16
 800a758:	2b00      	cmp	r3, #0
 800a75a:	f000 813c 	beq.w	800a9d6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a75e:	2300      	movs	r3, #0
 800a760:	60bb      	str	r3, [r7, #8]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	60bb      	str	r3, [r7, #8]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	685b      	ldr	r3, [r3, #4]
 800a770:	60bb      	str	r3, [r7, #8]
 800a772:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	695b      	ldr	r3, [r3, #20]
 800a77a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a77e:	2b40      	cmp	r3, #64	; 0x40
 800a780:	f040 80b4 	bne.w	800a8ec <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	685b      	ldr	r3, [r3, #4]
 800a78c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a790:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a794:	2b00      	cmp	r3, #0
 800a796:	f000 8140 	beq.w	800aa1a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a79e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a7a2:	429a      	cmp	r2, r3
 800a7a4:	f080 8139 	bcs.w	800aa1a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a7ae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7b4:	69db      	ldr	r3, [r3, #28]
 800a7b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7ba:	f000 8088 	beq.w	800a8ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	330c      	adds	r3, #12
 800a7c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a7cc:	e853 3f00 	ldrex	r3, [r3]
 800a7d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a7d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a7d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a7dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	330c      	adds	r3, #12
 800a7e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a7ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a7ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a7f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a7fa:	e841 2300 	strex	r3, r2, [r1]
 800a7fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a802:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a806:	2b00      	cmp	r3, #0
 800a808:	d1d9      	bne.n	800a7be <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	3314      	adds	r3, #20
 800a810:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a812:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a814:	e853 3f00 	ldrex	r3, [r3]
 800a818:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a81a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a81c:	f023 0301 	bic.w	r3, r3, #1
 800a820:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	3314      	adds	r3, #20
 800a82a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a82e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a832:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a834:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a836:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a83a:	e841 2300 	strex	r3, r2, [r1]
 800a83e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a840:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a842:	2b00      	cmp	r3, #0
 800a844:	d1e1      	bne.n	800a80a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	3314      	adds	r3, #20
 800a84c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a84e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a850:	e853 3f00 	ldrex	r3, [r3]
 800a854:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a856:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a858:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a85c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	3314      	adds	r3, #20
 800a866:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a86a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a86c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a86e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a870:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a872:	e841 2300 	strex	r3, r2, [r1]
 800a876:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a878:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d1e3      	bne.n	800a846 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2220      	movs	r2, #32
 800a882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2200      	movs	r2, #0
 800a88a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	330c      	adds	r3, #12
 800a892:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a896:	e853 3f00 	ldrex	r3, [r3]
 800a89a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a89c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a89e:	f023 0310 	bic.w	r3, r3, #16
 800a8a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	330c      	adds	r3, #12
 800a8ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a8b0:	65ba      	str	r2, [r7, #88]	; 0x58
 800a8b2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a8b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a8b8:	e841 2300 	strex	r3, r2, [r1]
 800a8bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a8be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d1e3      	bne.n	800a88c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f7fd fa21 	bl	8007d10 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a8d6:	b29b      	uxth	r3, r3
 800a8d8:	1ad3      	subs	r3, r2, r3
 800a8da:	b29b      	uxth	r3, r3
 800a8dc:	4619      	mov	r1, r3
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f000 f8c0 	bl	800aa64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a8e4:	e099      	b.n	800aa1a <HAL_UART_IRQHandler+0x50e>
 800a8e6:	bf00      	nop
 800a8e8:	0800af77 	.word	0x0800af77
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a8f4:	b29b      	uxth	r3, r3
 800a8f6:	1ad3      	subs	r3, r2, r3
 800a8f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a900:	b29b      	uxth	r3, r3
 800a902:	2b00      	cmp	r3, #0
 800a904:	f000 808b 	beq.w	800aa1e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a908:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	f000 8086 	beq.w	800aa1e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	330c      	adds	r3, #12
 800a918:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a91a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a91c:	e853 3f00 	ldrex	r3, [r3]
 800a920:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a924:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a928:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	330c      	adds	r3, #12
 800a932:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a936:	647a      	str	r2, [r7, #68]	; 0x44
 800a938:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a93a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a93c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a93e:	e841 2300 	strex	r3, r2, [r1]
 800a942:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a946:	2b00      	cmp	r3, #0
 800a948:	d1e3      	bne.n	800a912 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	3314      	adds	r3, #20
 800a950:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a954:	e853 3f00 	ldrex	r3, [r3]
 800a958:	623b      	str	r3, [r7, #32]
   return(result);
 800a95a:	6a3b      	ldr	r3, [r7, #32]
 800a95c:	f023 0301 	bic.w	r3, r3, #1
 800a960:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	3314      	adds	r3, #20
 800a96a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a96e:	633a      	str	r2, [r7, #48]	; 0x30
 800a970:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a972:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a976:	e841 2300 	strex	r3, r2, [r1]
 800a97a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d1e3      	bne.n	800a94a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2220      	movs	r2, #32
 800a986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2200      	movs	r2, #0
 800a98e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	330c      	adds	r3, #12
 800a996:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	e853 3f00 	ldrex	r3, [r3]
 800a99e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	f023 0310 	bic.w	r3, r3, #16
 800a9a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	330c      	adds	r3, #12
 800a9b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a9b4:	61fa      	str	r2, [r7, #28]
 800a9b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9b8:	69b9      	ldr	r1, [r7, #24]
 800a9ba:	69fa      	ldr	r2, [r7, #28]
 800a9bc:	e841 2300 	strex	r3, r2, [r1]
 800a9c0:	617b      	str	r3, [r7, #20]
   return(result);
 800a9c2:	697b      	ldr	r3, [r7, #20]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d1e3      	bne.n	800a990 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a9c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a9cc:	4619      	mov	r1, r3
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f000 f848 	bl	800aa64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a9d4:	e023      	b.n	800aa1e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a9d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d009      	beq.n	800a9f6 <HAL_UART_IRQHandler+0x4ea>
 800a9e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d003      	beq.n	800a9f6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 fad5 	bl	800af9e <UART_Transmit_IT>
    return;
 800a9f4:	e014      	b.n	800aa20 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a9f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d00e      	beq.n	800aa20 <HAL_UART_IRQHandler+0x514>
 800aa02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d008      	beq.n	800aa20 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f000 fb15 	bl	800b03e <UART_EndTransmit_IT>
    return;
 800aa14:	e004      	b.n	800aa20 <HAL_UART_IRQHandler+0x514>
    return;
 800aa16:	bf00      	nop
 800aa18:	e002      	b.n	800aa20 <HAL_UART_IRQHandler+0x514>
      return;
 800aa1a:	bf00      	nop
 800aa1c:	e000      	b.n	800aa20 <HAL_UART_IRQHandler+0x514>
      return;
 800aa1e:	bf00      	nop
  }
}
 800aa20:	37e8      	adds	r7, #232	; 0xe8
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}
 800aa26:	bf00      	nop

0800aa28 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b083      	sub	sp, #12
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800aa30:	bf00      	nop
 800aa32:	370c      	adds	r7, #12
 800aa34:	46bd      	mov	sp, r7
 800aa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3a:	4770      	bx	lr

0800aa3c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b083      	sub	sp, #12
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800aa44:	bf00      	nop
 800aa46:	370c      	adds	r7, #12
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr

0800aa50 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b083      	sub	sp, #12
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800aa58:	bf00      	nop
 800aa5a:	370c      	adds	r7, #12
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr

0800aa64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b083      	sub	sp, #12
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	460b      	mov	r3, r1
 800aa6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aa70:	bf00      	nop
 800aa72:	370c      	adds	r7, #12
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr

0800aa7c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b090      	sub	sp, #64	; 0x40
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa88:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d137      	bne.n	800ab08 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800aa98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aa9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	3314      	adds	r3, #20
 800aaa4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa8:	e853 3f00 	ldrex	r3, [r3]
 800aaac:	623b      	str	r3, [r7, #32]
   return(result);
 800aaae:	6a3b      	ldr	r3, [r7, #32]
 800aab0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aab4:	63bb      	str	r3, [r7, #56]	; 0x38
 800aab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	3314      	adds	r3, #20
 800aabc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aabe:	633a      	str	r2, [r7, #48]	; 0x30
 800aac0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aac2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aac6:	e841 2300 	strex	r3, r2, [r1]
 800aaca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d1e5      	bne.n	800aa9e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	330c      	adds	r3, #12
 800aad8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	e853 3f00 	ldrex	r3, [r3]
 800aae0:	60fb      	str	r3, [r7, #12]
   return(result);
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aae8:	637b      	str	r3, [r7, #52]	; 0x34
 800aaea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	330c      	adds	r3, #12
 800aaf0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aaf2:	61fa      	str	r2, [r7, #28]
 800aaf4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf6:	69b9      	ldr	r1, [r7, #24]
 800aaf8:	69fa      	ldr	r2, [r7, #28]
 800aafa:	e841 2300 	strex	r3, r2, [r1]
 800aafe:	617b      	str	r3, [r7, #20]
   return(result);
 800ab00:	697b      	ldr	r3, [r7, #20]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d1e5      	bne.n	800aad2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ab06:	e002      	b.n	800ab0e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800ab08:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ab0a:	f7f8 fc8d 	bl	8003428 <HAL_UART_TxCpltCallback>
}
 800ab0e:	bf00      	nop
 800ab10:	3740      	adds	r7, #64	; 0x40
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}

0800ab16 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ab16:	b580      	push	{r7, lr}
 800ab18:	b084      	sub	sp, #16
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab22:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ab24:	68f8      	ldr	r0, [r7, #12]
 800ab26:	f7ff ff7f 	bl	800aa28 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab2a:	bf00      	nop
 800ab2c:	3710      	adds	r7, #16
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}

0800ab32 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ab32:	b580      	push	{r7, lr}
 800ab34:	b09c      	sub	sp, #112	; 0x70
 800ab36:	af00      	add	r7, sp, #0
 800ab38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab3e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d172      	bne.n	800ac34 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800ab4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab50:	2200      	movs	r2, #0
 800ab52:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	330c      	adds	r3, #12
 800ab5a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab5e:	e853 3f00 	ldrex	r3, [r3]
 800ab62:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ab64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab6a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	330c      	adds	r3, #12
 800ab72:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ab74:	65ba      	str	r2, [r7, #88]	; 0x58
 800ab76:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ab7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ab7c:	e841 2300 	strex	r3, r2, [r1]
 800ab80:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ab82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d1e5      	bne.n	800ab54 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	3314      	adds	r3, #20
 800ab8e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab92:	e853 3f00 	ldrex	r3, [r3]
 800ab96:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ab98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab9a:	f023 0301 	bic.w	r3, r3, #1
 800ab9e:	667b      	str	r3, [r7, #100]	; 0x64
 800aba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	3314      	adds	r3, #20
 800aba6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800aba8:	647a      	str	r2, [r7, #68]	; 0x44
 800abaa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800abae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800abb0:	e841 2300 	strex	r3, r2, [r1]
 800abb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800abb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d1e5      	bne.n	800ab88 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800abbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	3314      	adds	r3, #20
 800abc2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc6:	e853 3f00 	ldrex	r3, [r3]
 800abca:	623b      	str	r3, [r7, #32]
   return(result);
 800abcc:	6a3b      	ldr	r3, [r7, #32]
 800abce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800abd2:	663b      	str	r3, [r7, #96]	; 0x60
 800abd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	3314      	adds	r3, #20
 800abda:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800abdc:	633a      	str	r2, [r7, #48]	; 0x30
 800abde:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abe0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800abe2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abe4:	e841 2300 	strex	r3, r2, [r1]
 800abe8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800abea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abec:	2b00      	cmp	r3, #0
 800abee:	d1e5      	bne.n	800abbc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800abf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abf2:	2220      	movs	r2, #32
 800abf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abfc:	2b01      	cmp	r3, #1
 800abfe:	d119      	bne.n	800ac34 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	330c      	adds	r3, #12
 800ac06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac08:	693b      	ldr	r3, [r7, #16]
 800ac0a:	e853 3f00 	ldrex	r3, [r3]
 800ac0e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	f023 0310 	bic.w	r3, r3, #16
 800ac16:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ac18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	330c      	adds	r3, #12
 800ac1e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ac20:	61fa      	str	r2, [r7, #28]
 800ac22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac24:	69b9      	ldr	r1, [r7, #24]
 800ac26:	69fa      	ldr	r2, [r7, #28]
 800ac28:	e841 2300 	strex	r3, r2, [r1]
 800ac2c:	617b      	str	r3, [r7, #20]
   return(result);
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d1e5      	bne.n	800ac00 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac38:	2b01      	cmp	r3, #1
 800ac3a:	d106      	bne.n	800ac4a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ac3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac3e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ac40:	4619      	mov	r1, r3
 800ac42:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ac44:	f7ff ff0e 	bl	800aa64 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ac48:	e002      	b.n	800ac50 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800ac4a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ac4c:	f7f8 fbfe 	bl	800344c <HAL_UART_RxCpltCallback>
}
 800ac50:	bf00      	nop
 800ac52:	3770      	adds	r7, #112	; 0x70
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}

0800ac58 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b084      	sub	sp, #16
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac64:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac6a:	2b01      	cmp	r3, #1
 800ac6c:	d108      	bne.n	800ac80 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ac72:	085b      	lsrs	r3, r3, #1
 800ac74:	b29b      	uxth	r3, r3
 800ac76:	4619      	mov	r1, r3
 800ac78:	68f8      	ldr	r0, [r7, #12]
 800ac7a:	f7ff fef3 	bl	800aa64 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ac7e:	e002      	b.n	800ac86 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800ac80:	68f8      	ldr	r0, [r7, #12]
 800ac82:	f7ff fedb 	bl	800aa3c <HAL_UART_RxHalfCpltCallback>
}
 800ac86:	bf00      	nop
 800ac88:	3710      	adds	r7, #16
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}

0800ac8e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ac8e:	b580      	push	{r7, lr}
 800ac90:	b084      	sub	sp, #16
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ac96:	2300      	movs	r3, #0
 800ac98:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac9e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	695b      	ldr	r3, [r3, #20]
 800aca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acaa:	2b80      	cmp	r3, #128	; 0x80
 800acac:	bf0c      	ite	eq
 800acae:	2301      	moveq	r3, #1
 800acb0:	2300      	movne	r3, #0
 800acb2:	b2db      	uxtb	r3, r3
 800acb4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800acbc:	b2db      	uxtb	r3, r3
 800acbe:	2b21      	cmp	r3, #33	; 0x21
 800acc0:	d108      	bne.n	800acd4 <UART_DMAError+0x46>
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d005      	beq.n	800acd4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	2200      	movs	r2, #0
 800accc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800acce:	68b8      	ldr	r0, [r7, #8]
 800acd0:	f000 f8c6 	bl	800ae60 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	695b      	ldr	r3, [r3, #20]
 800acda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acde:	2b40      	cmp	r3, #64	; 0x40
 800ace0:	bf0c      	ite	eq
 800ace2:	2301      	moveq	r3, #1
 800ace4:	2300      	movne	r3, #0
 800ace6:	b2db      	uxtb	r3, r3
 800ace8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800acf0:	b2db      	uxtb	r3, r3
 800acf2:	2b22      	cmp	r3, #34	; 0x22
 800acf4:	d108      	bne.n	800ad08 <UART_DMAError+0x7a>
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d005      	beq.n	800ad08 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	2200      	movs	r2, #0
 800ad00:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800ad02:	68b8      	ldr	r0, [r7, #8]
 800ad04:	f000 f8d4 	bl	800aeb0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad0c:	f043 0210 	orr.w	r2, r3, #16
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ad14:	68b8      	ldr	r0, [r7, #8]
 800ad16:	f7ff fe9b 	bl	800aa50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad1a:	bf00      	nop
 800ad1c:	3710      	adds	r7, #16
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}
	...

0800ad24 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b098      	sub	sp, #96	; 0x60
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	60f8      	str	r0, [r7, #12]
 800ad2c:	60b9      	str	r1, [r7, #8]
 800ad2e:	4613      	mov	r3, r2
 800ad30:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800ad32:	68ba      	ldr	r2, [r7, #8]
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	88fa      	ldrh	r2, [r7, #6]
 800ad3c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	2200      	movs	r2, #0
 800ad42:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2222      	movs	r2, #34	; 0x22
 800ad48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad50:	4a40      	ldr	r2, [pc, #256]	; (800ae54 <UART_Start_Receive_DMA+0x130>)
 800ad52:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad58:	4a3f      	ldr	r2, [pc, #252]	; (800ae58 <UART_Start_Receive_DMA+0x134>)
 800ad5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad60:	4a3e      	ldr	r2, [pc, #248]	; (800ae5c <UART_Start_Receive_DMA+0x138>)
 800ad62:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad68:	2200      	movs	r2, #0
 800ad6a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800ad6c:	f107 0308 	add.w	r3, r7, #8
 800ad70:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	3304      	adds	r3, #4
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad80:	681a      	ldr	r2, [r3, #0]
 800ad82:	88fb      	ldrh	r3, [r7, #6]
 800ad84:	f7fc ff6c 	bl	8007c60 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800ad88:	2300      	movs	r3, #0
 800ad8a:	613b      	str	r3, [r7, #16]
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	613b      	str	r3, [r7, #16]
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	685b      	ldr	r3, [r3, #4]
 800ad9a:	613b      	str	r3, [r7, #16]
 800ad9c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	2200      	movs	r2, #0
 800ada2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	691b      	ldr	r3, [r3, #16]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d019      	beq.n	800ade2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	330c      	adds	r3, #12
 800adb4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adb8:	e853 3f00 	ldrex	r3, [r3]
 800adbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800adbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800adc4:	65bb      	str	r3, [r7, #88]	; 0x58
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	330c      	adds	r3, #12
 800adcc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800adce:	64fa      	str	r2, [r7, #76]	; 0x4c
 800add0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800add2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800add4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800add6:	e841 2300 	strex	r3, r2, [r1]
 800adda:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800addc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d1e5      	bne.n	800adae <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	3314      	adds	r3, #20
 800ade8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adec:	e853 3f00 	ldrex	r3, [r3]
 800adf0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800adf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf4:	f043 0301 	orr.w	r3, r3, #1
 800adf8:	657b      	str	r3, [r7, #84]	; 0x54
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	3314      	adds	r3, #20
 800ae00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ae02:	63ba      	str	r2, [r7, #56]	; 0x38
 800ae04:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae06:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ae08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae0a:	e841 2300 	strex	r3, r2, [r1]
 800ae0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ae10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d1e5      	bne.n	800ade2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	3314      	adds	r3, #20
 800ae1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae1e:	69bb      	ldr	r3, [r7, #24]
 800ae20:	e853 3f00 	ldrex	r3, [r3]
 800ae24:	617b      	str	r3, [r7, #20]
   return(result);
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae2c:	653b      	str	r3, [r7, #80]	; 0x50
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	3314      	adds	r3, #20
 800ae34:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ae36:	627a      	str	r2, [r7, #36]	; 0x24
 800ae38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae3a:	6a39      	ldr	r1, [r7, #32]
 800ae3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae3e:	e841 2300 	strex	r3, r2, [r1]
 800ae42:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae44:	69fb      	ldr	r3, [r7, #28]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d1e5      	bne.n	800ae16 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800ae4a:	2300      	movs	r3, #0
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3760      	adds	r7, #96	; 0x60
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}
 800ae54:	0800ab33 	.word	0x0800ab33
 800ae58:	0800ac59 	.word	0x0800ac59
 800ae5c:	0800ac8f 	.word	0x0800ac8f

0800ae60 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ae60:	b480      	push	{r7}
 800ae62:	b089      	sub	sp, #36	; 0x24
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	330c      	adds	r3, #12
 800ae6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	e853 3f00 	ldrex	r3, [r3]
 800ae76:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ae7e:	61fb      	str	r3, [r7, #28]
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	330c      	adds	r3, #12
 800ae86:	69fa      	ldr	r2, [r7, #28]
 800ae88:	61ba      	str	r2, [r7, #24]
 800ae8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae8c:	6979      	ldr	r1, [r7, #20]
 800ae8e:	69ba      	ldr	r2, [r7, #24]
 800ae90:	e841 2300 	strex	r3, r2, [r1]
 800ae94:	613b      	str	r3, [r7, #16]
   return(result);
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d1e5      	bne.n	800ae68 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2220      	movs	r2, #32
 800aea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800aea4:	bf00      	nop
 800aea6:	3724      	adds	r7, #36	; 0x24
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr

0800aeb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b095      	sub	sp, #84	; 0x54
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	330c      	adds	r3, #12
 800aebe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aec2:	e853 3f00 	ldrex	r3, [r3]
 800aec6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aece:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	330c      	adds	r3, #12
 800aed6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aed8:	643a      	str	r2, [r7, #64]	; 0x40
 800aeda:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aedc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aede:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aee0:	e841 2300 	strex	r3, r2, [r1]
 800aee4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d1e5      	bne.n	800aeb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	3314      	adds	r3, #20
 800aef2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aef4:	6a3b      	ldr	r3, [r7, #32]
 800aef6:	e853 3f00 	ldrex	r3, [r3]
 800aefa:	61fb      	str	r3, [r7, #28]
   return(result);
 800aefc:	69fb      	ldr	r3, [r7, #28]
 800aefe:	f023 0301 	bic.w	r3, r3, #1
 800af02:	64bb      	str	r3, [r7, #72]	; 0x48
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	3314      	adds	r3, #20
 800af0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800af0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800af12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af14:	e841 2300 	strex	r3, r2, [r1]
 800af18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800af1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d1e5      	bne.n	800aeec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af24:	2b01      	cmp	r3, #1
 800af26:	d119      	bne.n	800af5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	330c      	adds	r3, #12
 800af2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	e853 3f00 	ldrex	r3, [r3]
 800af36:	60bb      	str	r3, [r7, #8]
   return(result);
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	f023 0310 	bic.w	r3, r3, #16
 800af3e:	647b      	str	r3, [r7, #68]	; 0x44
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	330c      	adds	r3, #12
 800af46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af48:	61ba      	str	r2, [r7, #24]
 800af4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af4c:	6979      	ldr	r1, [r7, #20]
 800af4e:	69ba      	ldr	r2, [r7, #24]
 800af50:	e841 2300 	strex	r3, r2, [r1]
 800af54:	613b      	str	r3, [r7, #16]
   return(result);
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d1e5      	bne.n	800af28 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2220      	movs	r2, #32
 800af60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2200      	movs	r2, #0
 800af68:	631a      	str	r2, [r3, #48]	; 0x30
}
 800af6a:	bf00      	nop
 800af6c:	3754      	adds	r7, #84	; 0x54
 800af6e:	46bd      	mov	sp, r7
 800af70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af74:	4770      	bx	lr

0800af76 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800af76:	b580      	push	{r7, lr}
 800af78:	b084      	sub	sp, #16
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	2200      	movs	r2, #0
 800af88:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	2200      	movs	r2, #0
 800af8e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800af90:	68f8      	ldr	r0, [r7, #12]
 800af92:	f7ff fd5d 	bl	800aa50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af96:	bf00      	nop
 800af98:	3710      	adds	r7, #16
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}

0800af9e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800af9e:	b480      	push	{r7}
 800afa0:	b085      	sub	sp, #20
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afac:	b2db      	uxtb	r3, r3
 800afae:	2b21      	cmp	r3, #33	; 0x21
 800afb0:	d13e      	bne.n	800b030 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	689b      	ldr	r3, [r3, #8]
 800afb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afba:	d114      	bne.n	800afe6 <UART_Transmit_IT+0x48>
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	691b      	ldr	r3, [r3, #16]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d110      	bne.n	800afe6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6a1b      	ldr	r3, [r3, #32]
 800afc8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	881b      	ldrh	r3, [r3, #0]
 800afce:	461a      	mov	r2, r3
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800afd8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6a1b      	ldr	r3, [r3, #32]
 800afde:	1c9a      	adds	r2, r3, #2
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	621a      	str	r2, [r3, #32]
 800afe4:	e008      	b.n	800aff8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6a1b      	ldr	r3, [r3, #32]
 800afea:	1c59      	adds	r1, r3, #1
 800afec:	687a      	ldr	r2, [r7, #4]
 800afee:	6211      	str	r1, [r2, #32]
 800aff0:	781a      	ldrb	r2, [r3, #0]
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800affc:	b29b      	uxth	r3, r3
 800affe:	3b01      	subs	r3, #1
 800b000:	b29b      	uxth	r3, r3
 800b002:	687a      	ldr	r2, [r7, #4]
 800b004:	4619      	mov	r1, r3
 800b006:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d10f      	bne.n	800b02c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	68da      	ldr	r2, [r3, #12]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b01a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	68da      	ldr	r2, [r3, #12]
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b02a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b02c:	2300      	movs	r3, #0
 800b02e:	e000      	b.n	800b032 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b030:	2302      	movs	r3, #2
  }
}
 800b032:	4618      	mov	r0, r3
 800b034:	3714      	adds	r7, #20
 800b036:	46bd      	mov	sp, r7
 800b038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03c:	4770      	bx	lr

0800b03e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b03e:	b580      	push	{r7, lr}
 800b040:	b082      	sub	sp, #8
 800b042:	af00      	add	r7, sp, #0
 800b044:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	68da      	ldr	r2, [r3, #12]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b054:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2220      	movs	r2, #32
 800b05a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f7f8 f9e2 	bl	8003428 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b064:	2300      	movs	r3, #0
}
 800b066:	4618      	mov	r0, r3
 800b068:	3708      	adds	r7, #8
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}

0800b06e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b06e:	b580      	push	{r7, lr}
 800b070:	b08c      	sub	sp, #48	; 0x30
 800b072:	af00      	add	r7, sp, #0
 800b074:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b07c:	b2db      	uxtb	r3, r3
 800b07e:	2b22      	cmp	r3, #34	; 0x22
 800b080:	f040 80ab 	bne.w	800b1da <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	689b      	ldr	r3, [r3, #8]
 800b088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b08c:	d117      	bne.n	800b0be <UART_Receive_IT+0x50>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	691b      	ldr	r3, [r3, #16]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d113      	bne.n	800b0be <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b096:	2300      	movs	r3, #0
 800b098:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b09e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	685b      	ldr	r3, [r3, #4]
 800b0a6:	b29b      	uxth	r3, r3
 800b0a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0ac:	b29a      	uxth	r2, r3
 800b0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0b6:	1c9a      	adds	r2, r3, #2
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	629a      	str	r2, [r3, #40]	; 0x28
 800b0bc:	e026      	b.n	800b10c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	689b      	ldr	r3, [r3, #8]
 800b0cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0d0:	d007      	beq.n	800b0e2 <UART_Receive_IT+0x74>
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	689b      	ldr	r3, [r3, #8]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d10a      	bne.n	800b0f0 <UART_Receive_IT+0x82>
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	691b      	ldr	r3, [r3, #16]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d106      	bne.n	800b0f0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	685b      	ldr	r3, [r3, #4]
 800b0e8:	b2da      	uxtb	r2, r3
 800b0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ec:	701a      	strb	r2, [r3, #0]
 800b0ee:	e008      	b.n	800b102 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	b2db      	uxtb	r3, r3
 800b0f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0fc:	b2da      	uxtb	r2, r3
 800b0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b100:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b106:	1c5a      	adds	r2, r3, #1
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b110:	b29b      	uxth	r3, r3
 800b112:	3b01      	subs	r3, #1
 800b114:	b29b      	uxth	r3, r3
 800b116:	687a      	ldr	r2, [r7, #4]
 800b118:	4619      	mov	r1, r3
 800b11a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d15a      	bne.n	800b1d6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	68da      	ldr	r2, [r3, #12]
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f022 0220 	bic.w	r2, r2, #32
 800b12e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	68da      	ldr	r2, [r3, #12]
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b13e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	695a      	ldr	r2, [r3, #20]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f022 0201 	bic.w	r2, r2, #1
 800b14e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2220      	movs	r2, #32
 800b154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b15c:	2b01      	cmp	r3, #1
 800b15e:	d135      	bne.n	800b1cc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2200      	movs	r2, #0
 800b164:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	330c      	adds	r3, #12
 800b16c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	e853 3f00 	ldrex	r3, [r3]
 800b174:	613b      	str	r3, [r7, #16]
   return(result);
 800b176:	693b      	ldr	r3, [r7, #16]
 800b178:	f023 0310 	bic.w	r3, r3, #16
 800b17c:	627b      	str	r3, [r7, #36]	; 0x24
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	330c      	adds	r3, #12
 800b184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b186:	623a      	str	r2, [r7, #32]
 800b188:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b18a:	69f9      	ldr	r1, [r7, #28]
 800b18c:	6a3a      	ldr	r2, [r7, #32]
 800b18e:	e841 2300 	strex	r3, r2, [r1]
 800b192:	61bb      	str	r3, [r7, #24]
   return(result);
 800b194:	69bb      	ldr	r3, [r7, #24]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d1e5      	bne.n	800b166 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f003 0310 	and.w	r3, r3, #16
 800b1a4:	2b10      	cmp	r3, #16
 800b1a6:	d10a      	bne.n	800b1be <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	60fb      	str	r3, [r7, #12]
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	60fb      	str	r3, [r7, #12]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	685b      	ldr	r3, [r3, #4]
 800b1ba:	60fb      	str	r3, [r7, #12]
 800b1bc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f7ff fc4d 	bl	800aa64 <HAL_UARTEx_RxEventCallback>
 800b1ca:	e002      	b.n	800b1d2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f7f8 f93d 	bl	800344c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	e002      	b.n	800b1dc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	e000      	b.n	800b1dc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b1da:	2302      	movs	r3, #2
  }
}
 800b1dc:	4618      	mov	r0, r3
 800b1de:	3730      	adds	r7, #48	; 0x30
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}

0800b1e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b1e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b1e8:	b0c0      	sub	sp, #256	; 0x100
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b1f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	691b      	ldr	r3, [r3, #16]
 800b1f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b1fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b200:	68d9      	ldr	r1, [r3, #12]
 800b202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b206:	681a      	ldr	r2, [r3, #0]
 800b208:	ea40 0301 	orr.w	r3, r0, r1
 800b20c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b20e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b212:	689a      	ldr	r2, [r3, #8]
 800b214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b218:	691b      	ldr	r3, [r3, #16]
 800b21a:	431a      	orrs	r2, r3
 800b21c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b220:	695b      	ldr	r3, [r3, #20]
 800b222:	431a      	orrs	r2, r3
 800b224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b228:	69db      	ldr	r3, [r3, #28]
 800b22a:	4313      	orrs	r3, r2
 800b22c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	68db      	ldr	r3, [r3, #12]
 800b238:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b23c:	f021 010c 	bic.w	r1, r1, #12
 800b240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b244:	681a      	ldr	r2, [r3, #0]
 800b246:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b24a:	430b      	orrs	r3, r1
 800b24c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b24e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	695b      	ldr	r3, [r3, #20]
 800b256:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b25a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b25e:	6999      	ldr	r1, [r3, #24]
 800b260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b264:	681a      	ldr	r2, [r3, #0]
 800b266:	ea40 0301 	orr.w	r3, r0, r1
 800b26a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b26c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b270:	681a      	ldr	r2, [r3, #0]
 800b272:	4b8f      	ldr	r3, [pc, #572]	; (800b4b0 <UART_SetConfig+0x2cc>)
 800b274:	429a      	cmp	r2, r3
 800b276:	d005      	beq.n	800b284 <UART_SetConfig+0xa0>
 800b278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b27c:	681a      	ldr	r2, [r3, #0]
 800b27e:	4b8d      	ldr	r3, [pc, #564]	; (800b4b4 <UART_SetConfig+0x2d0>)
 800b280:	429a      	cmp	r2, r3
 800b282:	d104      	bne.n	800b28e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b284:	f7fd fe7a 	bl	8008f7c <HAL_RCC_GetPCLK2Freq>
 800b288:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b28c:	e003      	b.n	800b296 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b28e:	f7fd fe61 	bl	8008f54 <HAL_RCC_GetPCLK1Freq>
 800b292:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b29a:	69db      	ldr	r3, [r3, #28]
 800b29c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b2a0:	f040 810c 	bne.w	800b4bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b2a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b2ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b2b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b2b6:	4622      	mov	r2, r4
 800b2b8:	462b      	mov	r3, r5
 800b2ba:	1891      	adds	r1, r2, r2
 800b2bc:	65b9      	str	r1, [r7, #88]	; 0x58
 800b2be:	415b      	adcs	r3, r3
 800b2c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b2c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b2c6:	4621      	mov	r1, r4
 800b2c8:	eb12 0801 	adds.w	r8, r2, r1
 800b2cc:	4629      	mov	r1, r5
 800b2ce:	eb43 0901 	adc.w	r9, r3, r1
 800b2d2:	f04f 0200 	mov.w	r2, #0
 800b2d6:	f04f 0300 	mov.w	r3, #0
 800b2da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b2de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b2e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b2e6:	4690      	mov	r8, r2
 800b2e8:	4699      	mov	r9, r3
 800b2ea:	4623      	mov	r3, r4
 800b2ec:	eb18 0303 	adds.w	r3, r8, r3
 800b2f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b2f4:	462b      	mov	r3, r5
 800b2f6:	eb49 0303 	adc.w	r3, r9, r3
 800b2fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b2fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b302:	685b      	ldr	r3, [r3, #4]
 800b304:	2200      	movs	r2, #0
 800b306:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b30a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b30e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b312:	460b      	mov	r3, r1
 800b314:	18db      	adds	r3, r3, r3
 800b316:	653b      	str	r3, [r7, #80]	; 0x50
 800b318:	4613      	mov	r3, r2
 800b31a:	eb42 0303 	adc.w	r3, r2, r3
 800b31e:	657b      	str	r3, [r7, #84]	; 0x54
 800b320:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b324:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b328:	f7f5 fc28 	bl	8000b7c <__aeabi_uldivmod>
 800b32c:	4602      	mov	r2, r0
 800b32e:	460b      	mov	r3, r1
 800b330:	4b61      	ldr	r3, [pc, #388]	; (800b4b8 <UART_SetConfig+0x2d4>)
 800b332:	fba3 2302 	umull	r2, r3, r3, r2
 800b336:	095b      	lsrs	r3, r3, #5
 800b338:	011c      	lsls	r4, r3, #4
 800b33a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b33e:	2200      	movs	r2, #0
 800b340:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b344:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b348:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b34c:	4642      	mov	r2, r8
 800b34e:	464b      	mov	r3, r9
 800b350:	1891      	adds	r1, r2, r2
 800b352:	64b9      	str	r1, [r7, #72]	; 0x48
 800b354:	415b      	adcs	r3, r3
 800b356:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b358:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b35c:	4641      	mov	r1, r8
 800b35e:	eb12 0a01 	adds.w	sl, r2, r1
 800b362:	4649      	mov	r1, r9
 800b364:	eb43 0b01 	adc.w	fp, r3, r1
 800b368:	f04f 0200 	mov.w	r2, #0
 800b36c:	f04f 0300 	mov.w	r3, #0
 800b370:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b374:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b378:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b37c:	4692      	mov	sl, r2
 800b37e:	469b      	mov	fp, r3
 800b380:	4643      	mov	r3, r8
 800b382:	eb1a 0303 	adds.w	r3, sl, r3
 800b386:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b38a:	464b      	mov	r3, r9
 800b38c:	eb4b 0303 	adc.w	r3, fp, r3
 800b390:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b398:	685b      	ldr	r3, [r3, #4]
 800b39a:	2200      	movs	r2, #0
 800b39c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b3a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b3a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b3a8:	460b      	mov	r3, r1
 800b3aa:	18db      	adds	r3, r3, r3
 800b3ac:	643b      	str	r3, [r7, #64]	; 0x40
 800b3ae:	4613      	mov	r3, r2
 800b3b0:	eb42 0303 	adc.w	r3, r2, r3
 800b3b4:	647b      	str	r3, [r7, #68]	; 0x44
 800b3b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b3ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b3be:	f7f5 fbdd 	bl	8000b7c <__aeabi_uldivmod>
 800b3c2:	4602      	mov	r2, r0
 800b3c4:	460b      	mov	r3, r1
 800b3c6:	4611      	mov	r1, r2
 800b3c8:	4b3b      	ldr	r3, [pc, #236]	; (800b4b8 <UART_SetConfig+0x2d4>)
 800b3ca:	fba3 2301 	umull	r2, r3, r3, r1
 800b3ce:	095b      	lsrs	r3, r3, #5
 800b3d0:	2264      	movs	r2, #100	; 0x64
 800b3d2:	fb02 f303 	mul.w	r3, r2, r3
 800b3d6:	1acb      	subs	r3, r1, r3
 800b3d8:	00db      	lsls	r3, r3, #3
 800b3da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b3de:	4b36      	ldr	r3, [pc, #216]	; (800b4b8 <UART_SetConfig+0x2d4>)
 800b3e0:	fba3 2302 	umull	r2, r3, r3, r2
 800b3e4:	095b      	lsrs	r3, r3, #5
 800b3e6:	005b      	lsls	r3, r3, #1
 800b3e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b3ec:	441c      	add	r4, r3
 800b3ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b3f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b3fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b400:	4642      	mov	r2, r8
 800b402:	464b      	mov	r3, r9
 800b404:	1891      	adds	r1, r2, r2
 800b406:	63b9      	str	r1, [r7, #56]	; 0x38
 800b408:	415b      	adcs	r3, r3
 800b40a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b40c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b410:	4641      	mov	r1, r8
 800b412:	1851      	adds	r1, r2, r1
 800b414:	6339      	str	r1, [r7, #48]	; 0x30
 800b416:	4649      	mov	r1, r9
 800b418:	414b      	adcs	r3, r1
 800b41a:	637b      	str	r3, [r7, #52]	; 0x34
 800b41c:	f04f 0200 	mov.w	r2, #0
 800b420:	f04f 0300 	mov.w	r3, #0
 800b424:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b428:	4659      	mov	r1, fp
 800b42a:	00cb      	lsls	r3, r1, #3
 800b42c:	4651      	mov	r1, sl
 800b42e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b432:	4651      	mov	r1, sl
 800b434:	00ca      	lsls	r2, r1, #3
 800b436:	4610      	mov	r0, r2
 800b438:	4619      	mov	r1, r3
 800b43a:	4603      	mov	r3, r0
 800b43c:	4642      	mov	r2, r8
 800b43e:	189b      	adds	r3, r3, r2
 800b440:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b444:	464b      	mov	r3, r9
 800b446:	460a      	mov	r2, r1
 800b448:	eb42 0303 	adc.w	r3, r2, r3
 800b44c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b454:	685b      	ldr	r3, [r3, #4]
 800b456:	2200      	movs	r2, #0
 800b458:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b45c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b460:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b464:	460b      	mov	r3, r1
 800b466:	18db      	adds	r3, r3, r3
 800b468:	62bb      	str	r3, [r7, #40]	; 0x28
 800b46a:	4613      	mov	r3, r2
 800b46c:	eb42 0303 	adc.w	r3, r2, r3
 800b470:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b472:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b476:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b47a:	f7f5 fb7f 	bl	8000b7c <__aeabi_uldivmod>
 800b47e:	4602      	mov	r2, r0
 800b480:	460b      	mov	r3, r1
 800b482:	4b0d      	ldr	r3, [pc, #52]	; (800b4b8 <UART_SetConfig+0x2d4>)
 800b484:	fba3 1302 	umull	r1, r3, r3, r2
 800b488:	095b      	lsrs	r3, r3, #5
 800b48a:	2164      	movs	r1, #100	; 0x64
 800b48c:	fb01 f303 	mul.w	r3, r1, r3
 800b490:	1ad3      	subs	r3, r2, r3
 800b492:	00db      	lsls	r3, r3, #3
 800b494:	3332      	adds	r3, #50	; 0x32
 800b496:	4a08      	ldr	r2, [pc, #32]	; (800b4b8 <UART_SetConfig+0x2d4>)
 800b498:	fba2 2303 	umull	r2, r3, r2, r3
 800b49c:	095b      	lsrs	r3, r3, #5
 800b49e:	f003 0207 	and.w	r2, r3, #7
 800b4a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	4422      	add	r2, r4
 800b4aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b4ac:	e105      	b.n	800b6ba <UART_SetConfig+0x4d6>
 800b4ae:	bf00      	nop
 800b4b0:	40011000 	.word	0x40011000
 800b4b4:	40011400 	.word	0x40011400
 800b4b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b4bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b4c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b4ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b4ce:	4642      	mov	r2, r8
 800b4d0:	464b      	mov	r3, r9
 800b4d2:	1891      	adds	r1, r2, r2
 800b4d4:	6239      	str	r1, [r7, #32]
 800b4d6:	415b      	adcs	r3, r3
 800b4d8:	627b      	str	r3, [r7, #36]	; 0x24
 800b4da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b4de:	4641      	mov	r1, r8
 800b4e0:	1854      	adds	r4, r2, r1
 800b4e2:	4649      	mov	r1, r9
 800b4e4:	eb43 0501 	adc.w	r5, r3, r1
 800b4e8:	f04f 0200 	mov.w	r2, #0
 800b4ec:	f04f 0300 	mov.w	r3, #0
 800b4f0:	00eb      	lsls	r3, r5, #3
 800b4f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b4f6:	00e2      	lsls	r2, r4, #3
 800b4f8:	4614      	mov	r4, r2
 800b4fa:	461d      	mov	r5, r3
 800b4fc:	4643      	mov	r3, r8
 800b4fe:	18e3      	adds	r3, r4, r3
 800b500:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b504:	464b      	mov	r3, r9
 800b506:	eb45 0303 	adc.w	r3, r5, r3
 800b50a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b50e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b512:	685b      	ldr	r3, [r3, #4]
 800b514:	2200      	movs	r2, #0
 800b516:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b51a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b51e:	f04f 0200 	mov.w	r2, #0
 800b522:	f04f 0300 	mov.w	r3, #0
 800b526:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b52a:	4629      	mov	r1, r5
 800b52c:	008b      	lsls	r3, r1, #2
 800b52e:	4621      	mov	r1, r4
 800b530:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b534:	4621      	mov	r1, r4
 800b536:	008a      	lsls	r2, r1, #2
 800b538:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b53c:	f7f5 fb1e 	bl	8000b7c <__aeabi_uldivmod>
 800b540:	4602      	mov	r2, r0
 800b542:	460b      	mov	r3, r1
 800b544:	4b60      	ldr	r3, [pc, #384]	; (800b6c8 <UART_SetConfig+0x4e4>)
 800b546:	fba3 2302 	umull	r2, r3, r3, r2
 800b54a:	095b      	lsrs	r3, r3, #5
 800b54c:	011c      	lsls	r4, r3, #4
 800b54e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b552:	2200      	movs	r2, #0
 800b554:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b558:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b55c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b560:	4642      	mov	r2, r8
 800b562:	464b      	mov	r3, r9
 800b564:	1891      	adds	r1, r2, r2
 800b566:	61b9      	str	r1, [r7, #24]
 800b568:	415b      	adcs	r3, r3
 800b56a:	61fb      	str	r3, [r7, #28]
 800b56c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b570:	4641      	mov	r1, r8
 800b572:	1851      	adds	r1, r2, r1
 800b574:	6139      	str	r1, [r7, #16]
 800b576:	4649      	mov	r1, r9
 800b578:	414b      	adcs	r3, r1
 800b57a:	617b      	str	r3, [r7, #20]
 800b57c:	f04f 0200 	mov.w	r2, #0
 800b580:	f04f 0300 	mov.w	r3, #0
 800b584:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b588:	4659      	mov	r1, fp
 800b58a:	00cb      	lsls	r3, r1, #3
 800b58c:	4651      	mov	r1, sl
 800b58e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b592:	4651      	mov	r1, sl
 800b594:	00ca      	lsls	r2, r1, #3
 800b596:	4610      	mov	r0, r2
 800b598:	4619      	mov	r1, r3
 800b59a:	4603      	mov	r3, r0
 800b59c:	4642      	mov	r2, r8
 800b59e:	189b      	adds	r3, r3, r2
 800b5a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b5a4:	464b      	mov	r3, r9
 800b5a6:	460a      	mov	r2, r1
 800b5a8:	eb42 0303 	adc.w	r3, r2, r3
 800b5ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b5b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5b4:	685b      	ldr	r3, [r3, #4]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	67bb      	str	r3, [r7, #120]	; 0x78
 800b5ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b5bc:	f04f 0200 	mov.w	r2, #0
 800b5c0:	f04f 0300 	mov.w	r3, #0
 800b5c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b5c8:	4649      	mov	r1, r9
 800b5ca:	008b      	lsls	r3, r1, #2
 800b5cc:	4641      	mov	r1, r8
 800b5ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b5d2:	4641      	mov	r1, r8
 800b5d4:	008a      	lsls	r2, r1, #2
 800b5d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b5da:	f7f5 facf 	bl	8000b7c <__aeabi_uldivmod>
 800b5de:	4602      	mov	r2, r0
 800b5e0:	460b      	mov	r3, r1
 800b5e2:	4b39      	ldr	r3, [pc, #228]	; (800b6c8 <UART_SetConfig+0x4e4>)
 800b5e4:	fba3 1302 	umull	r1, r3, r3, r2
 800b5e8:	095b      	lsrs	r3, r3, #5
 800b5ea:	2164      	movs	r1, #100	; 0x64
 800b5ec:	fb01 f303 	mul.w	r3, r1, r3
 800b5f0:	1ad3      	subs	r3, r2, r3
 800b5f2:	011b      	lsls	r3, r3, #4
 800b5f4:	3332      	adds	r3, #50	; 0x32
 800b5f6:	4a34      	ldr	r2, [pc, #208]	; (800b6c8 <UART_SetConfig+0x4e4>)
 800b5f8:	fba2 2303 	umull	r2, r3, r2, r3
 800b5fc:	095b      	lsrs	r3, r3, #5
 800b5fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b602:	441c      	add	r4, r3
 800b604:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b608:	2200      	movs	r2, #0
 800b60a:	673b      	str	r3, [r7, #112]	; 0x70
 800b60c:	677a      	str	r2, [r7, #116]	; 0x74
 800b60e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b612:	4642      	mov	r2, r8
 800b614:	464b      	mov	r3, r9
 800b616:	1891      	adds	r1, r2, r2
 800b618:	60b9      	str	r1, [r7, #8]
 800b61a:	415b      	adcs	r3, r3
 800b61c:	60fb      	str	r3, [r7, #12]
 800b61e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b622:	4641      	mov	r1, r8
 800b624:	1851      	adds	r1, r2, r1
 800b626:	6039      	str	r1, [r7, #0]
 800b628:	4649      	mov	r1, r9
 800b62a:	414b      	adcs	r3, r1
 800b62c:	607b      	str	r3, [r7, #4]
 800b62e:	f04f 0200 	mov.w	r2, #0
 800b632:	f04f 0300 	mov.w	r3, #0
 800b636:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b63a:	4659      	mov	r1, fp
 800b63c:	00cb      	lsls	r3, r1, #3
 800b63e:	4651      	mov	r1, sl
 800b640:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b644:	4651      	mov	r1, sl
 800b646:	00ca      	lsls	r2, r1, #3
 800b648:	4610      	mov	r0, r2
 800b64a:	4619      	mov	r1, r3
 800b64c:	4603      	mov	r3, r0
 800b64e:	4642      	mov	r2, r8
 800b650:	189b      	adds	r3, r3, r2
 800b652:	66bb      	str	r3, [r7, #104]	; 0x68
 800b654:	464b      	mov	r3, r9
 800b656:	460a      	mov	r2, r1
 800b658:	eb42 0303 	adc.w	r3, r2, r3
 800b65c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b65e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b662:	685b      	ldr	r3, [r3, #4]
 800b664:	2200      	movs	r2, #0
 800b666:	663b      	str	r3, [r7, #96]	; 0x60
 800b668:	667a      	str	r2, [r7, #100]	; 0x64
 800b66a:	f04f 0200 	mov.w	r2, #0
 800b66e:	f04f 0300 	mov.w	r3, #0
 800b672:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b676:	4649      	mov	r1, r9
 800b678:	008b      	lsls	r3, r1, #2
 800b67a:	4641      	mov	r1, r8
 800b67c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b680:	4641      	mov	r1, r8
 800b682:	008a      	lsls	r2, r1, #2
 800b684:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b688:	f7f5 fa78 	bl	8000b7c <__aeabi_uldivmod>
 800b68c:	4602      	mov	r2, r0
 800b68e:	460b      	mov	r3, r1
 800b690:	4b0d      	ldr	r3, [pc, #52]	; (800b6c8 <UART_SetConfig+0x4e4>)
 800b692:	fba3 1302 	umull	r1, r3, r3, r2
 800b696:	095b      	lsrs	r3, r3, #5
 800b698:	2164      	movs	r1, #100	; 0x64
 800b69a:	fb01 f303 	mul.w	r3, r1, r3
 800b69e:	1ad3      	subs	r3, r2, r3
 800b6a0:	011b      	lsls	r3, r3, #4
 800b6a2:	3332      	adds	r3, #50	; 0x32
 800b6a4:	4a08      	ldr	r2, [pc, #32]	; (800b6c8 <UART_SetConfig+0x4e4>)
 800b6a6:	fba2 2303 	umull	r2, r3, r2, r3
 800b6aa:	095b      	lsrs	r3, r3, #5
 800b6ac:	f003 020f 	and.w	r2, r3, #15
 800b6b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	4422      	add	r2, r4
 800b6b8:	609a      	str	r2, [r3, #8]
}
 800b6ba:	bf00      	nop
 800b6bc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b6c6:	bf00      	nop
 800b6c8:	51eb851f 	.word	0x51eb851f

0800b6cc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b085      	sub	sp, #20
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b6da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b6de:	2b84      	cmp	r3, #132	; 0x84
 800b6e0:	d005      	beq.n	800b6ee <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b6e2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	4413      	add	r3, r2
 800b6ea:	3303      	adds	r3, #3
 800b6ec:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	3714      	adds	r7, #20
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fa:	4770      	bx	lr

0800b6fc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b700:	f000 faf6 	bl	800bcf0 <vTaskStartScheduler>
  
  return osOK;
 800b704:	2300      	movs	r3, #0
}
 800b706:	4618      	mov	r0, r3
 800b708:	bd80      	pop	{r7, pc}

0800b70a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b70a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b70c:	b089      	sub	sp, #36	; 0x24
 800b70e:	af04      	add	r7, sp, #16
 800b710:	6078      	str	r0, [r7, #4]
 800b712:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	695b      	ldr	r3, [r3, #20]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d020      	beq.n	800b75e <osThreadCreate+0x54>
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	699b      	ldr	r3, [r3, #24]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d01c      	beq.n	800b75e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	685c      	ldr	r4, [r3, #4]
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681d      	ldr	r5, [r3, #0]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	691e      	ldr	r6, [r3, #16]
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b736:	4618      	mov	r0, r3
 800b738:	f7ff ffc8 	bl	800b6cc <makeFreeRtosPriority>
 800b73c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	695b      	ldr	r3, [r3, #20]
 800b742:	687a      	ldr	r2, [r7, #4]
 800b744:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b746:	9202      	str	r2, [sp, #8]
 800b748:	9301      	str	r3, [sp, #4]
 800b74a:	9100      	str	r1, [sp, #0]
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	4632      	mov	r2, r6
 800b750:	4629      	mov	r1, r5
 800b752:	4620      	mov	r0, r4
 800b754:	f000 f8ed 	bl	800b932 <xTaskCreateStatic>
 800b758:	4603      	mov	r3, r0
 800b75a:	60fb      	str	r3, [r7, #12]
 800b75c:	e01c      	b.n	800b798 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	685c      	ldr	r4, [r3, #4]
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b76a:	b29e      	uxth	r6, r3
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b772:	4618      	mov	r0, r3
 800b774:	f7ff ffaa 	bl	800b6cc <makeFreeRtosPriority>
 800b778:	4602      	mov	r2, r0
 800b77a:	f107 030c 	add.w	r3, r7, #12
 800b77e:	9301      	str	r3, [sp, #4]
 800b780:	9200      	str	r2, [sp, #0]
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	4632      	mov	r2, r6
 800b786:	4629      	mov	r1, r5
 800b788:	4620      	mov	r0, r4
 800b78a:	f000 f92f 	bl	800b9ec <xTaskCreate>
 800b78e:	4603      	mov	r3, r0
 800b790:	2b01      	cmp	r3, #1
 800b792:	d001      	beq.n	800b798 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b794:	2300      	movs	r3, #0
 800b796:	e000      	b.n	800b79a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b798:	68fb      	ldr	r3, [r7, #12]
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3714      	adds	r7, #20
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b7a2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b7a2:	b580      	push	{r7, lr}
 800b7a4:	b084      	sub	sp, #16
 800b7a6:	af00      	add	r7, sp, #0
 800b7a8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d001      	beq.n	800b7b8 <osDelay+0x16>
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	e000      	b.n	800b7ba <osDelay+0x18>
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f000 fa64 	bl	800bc88 <vTaskDelay>
  
  return osOK;
 800b7c0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3710      	adds	r7, #16
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}

0800b7ca <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b7ca:	b480      	push	{r7}
 800b7cc:	b083      	sub	sp, #12
 800b7ce:	af00      	add	r7, sp, #0
 800b7d0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f103 0208 	add.w	r2, r3, #8
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f04f 32ff 	mov.w	r2, #4294967295
 800b7e2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f103 0208 	add.w	r2, r3, #8
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f103 0208 	add.w	r2, r3, #8
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b7fe:	bf00      	nop
 800b800:	370c      	adds	r7, #12
 800b802:	46bd      	mov	sp, r7
 800b804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b808:	4770      	bx	lr

0800b80a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b80a:	b480      	push	{r7}
 800b80c:	b083      	sub	sp, #12
 800b80e:	af00      	add	r7, sp, #0
 800b810:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2200      	movs	r2, #0
 800b816:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b818:	bf00      	nop
 800b81a:	370c      	adds	r7, #12
 800b81c:	46bd      	mov	sp, r7
 800b81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b822:	4770      	bx	lr

0800b824 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b824:	b480      	push	{r7}
 800b826:	b085      	sub	sp, #20
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
 800b82c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	685b      	ldr	r3, [r3, #4]
 800b832:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	68fa      	ldr	r2, [r7, #12]
 800b838:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	689a      	ldr	r2, [r3, #8]
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	689b      	ldr	r3, [r3, #8]
 800b846:	683a      	ldr	r2, [r7, #0]
 800b848:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	683a      	ldr	r2, [r7, #0]
 800b84e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	687a      	ldr	r2, [r7, #4]
 800b854:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	1c5a      	adds	r2, r3, #1
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	601a      	str	r2, [r3, #0]
}
 800b860:	bf00      	nop
 800b862:	3714      	adds	r7, #20
 800b864:	46bd      	mov	sp, r7
 800b866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86a:	4770      	bx	lr

0800b86c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b86c:	b480      	push	{r7}
 800b86e:	b085      	sub	sp, #20
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
 800b874:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b882:	d103      	bne.n	800b88c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	691b      	ldr	r3, [r3, #16]
 800b888:	60fb      	str	r3, [r7, #12]
 800b88a:	e00c      	b.n	800b8a6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	3308      	adds	r3, #8
 800b890:	60fb      	str	r3, [r7, #12]
 800b892:	e002      	b.n	800b89a <vListInsert+0x2e>
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	685b      	ldr	r3, [r3, #4]
 800b898:	60fb      	str	r3, [r7, #12]
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	685b      	ldr	r3, [r3, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	68ba      	ldr	r2, [r7, #8]
 800b8a2:	429a      	cmp	r2, r3
 800b8a4:	d2f6      	bcs.n	800b894 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	685a      	ldr	r2, [r3, #4]
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	685b      	ldr	r3, [r3, #4]
 800b8b2:	683a      	ldr	r2, [r7, #0]
 800b8b4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	68fa      	ldr	r2, [r7, #12]
 800b8ba:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	683a      	ldr	r2, [r7, #0]
 800b8c0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	687a      	ldr	r2, [r7, #4]
 800b8c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	1c5a      	adds	r2, r3, #1
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	601a      	str	r2, [r3, #0]
}
 800b8d2:	bf00      	nop
 800b8d4:	3714      	adds	r7, #20
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8dc:	4770      	bx	lr

0800b8de <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b8de:	b480      	push	{r7}
 800b8e0:	b085      	sub	sp, #20
 800b8e2:	af00      	add	r7, sp, #0
 800b8e4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	691b      	ldr	r3, [r3, #16]
 800b8ea:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	685b      	ldr	r3, [r3, #4]
 800b8f0:	687a      	ldr	r2, [r7, #4]
 800b8f2:	6892      	ldr	r2, [r2, #8]
 800b8f4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	689b      	ldr	r3, [r3, #8]
 800b8fa:	687a      	ldr	r2, [r7, #4]
 800b8fc:	6852      	ldr	r2, [r2, #4]
 800b8fe:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	685b      	ldr	r3, [r3, #4]
 800b904:	687a      	ldr	r2, [r7, #4]
 800b906:	429a      	cmp	r2, r3
 800b908:	d103      	bne.n	800b912 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	689a      	ldr	r2, [r3, #8]
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2200      	movs	r2, #0
 800b916:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	1e5a      	subs	r2, r3, #1
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	681b      	ldr	r3, [r3, #0]
}
 800b926:	4618      	mov	r0, r3
 800b928:	3714      	adds	r7, #20
 800b92a:	46bd      	mov	sp, r7
 800b92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b930:	4770      	bx	lr

0800b932 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b932:	b580      	push	{r7, lr}
 800b934:	b08e      	sub	sp, #56	; 0x38
 800b936:	af04      	add	r7, sp, #16
 800b938:	60f8      	str	r0, [r7, #12]
 800b93a:	60b9      	str	r1, [r7, #8]
 800b93c:	607a      	str	r2, [r7, #4]
 800b93e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b942:	2b00      	cmp	r3, #0
 800b944:	d10a      	bne.n	800b95c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b94a:	f383 8811 	msr	BASEPRI, r3
 800b94e:	f3bf 8f6f 	isb	sy
 800b952:	f3bf 8f4f 	dsb	sy
 800b956:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b958:	bf00      	nop
 800b95a:	e7fe      	b.n	800b95a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d10a      	bne.n	800b978 <xTaskCreateStatic+0x46>
	__asm volatile
 800b962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b966:	f383 8811 	msr	BASEPRI, r3
 800b96a:	f3bf 8f6f 	isb	sy
 800b96e:	f3bf 8f4f 	dsb	sy
 800b972:	61fb      	str	r3, [r7, #28]
}
 800b974:	bf00      	nop
 800b976:	e7fe      	b.n	800b976 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b978:	23b4      	movs	r3, #180	; 0xb4
 800b97a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b97c:	693b      	ldr	r3, [r7, #16]
 800b97e:	2bb4      	cmp	r3, #180	; 0xb4
 800b980:	d00a      	beq.n	800b998 <xTaskCreateStatic+0x66>
	__asm volatile
 800b982:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b986:	f383 8811 	msr	BASEPRI, r3
 800b98a:	f3bf 8f6f 	isb	sy
 800b98e:	f3bf 8f4f 	dsb	sy
 800b992:	61bb      	str	r3, [r7, #24]
}
 800b994:	bf00      	nop
 800b996:	e7fe      	b.n	800b996 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b998:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d01e      	beq.n	800b9de <xTaskCreateStatic+0xac>
 800b9a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d01b      	beq.n	800b9de <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b9a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b9ae:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b2:	2202      	movs	r2, #2
 800b9b4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	9303      	str	r3, [sp, #12]
 800b9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9be:	9302      	str	r3, [sp, #8]
 800b9c0:	f107 0314 	add.w	r3, r7, #20
 800b9c4:	9301      	str	r3, [sp, #4]
 800b9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c8:	9300      	str	r3, [sp, #0]
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	687a      	ldr	r2, [r7, #4]
 800b9ce:	68b9      	ldr	r1, [r7, #8]
 800b9d0:	68f8      	ldr	r0, [r7, #12]
 800b9d2:	f000 f851 	bl	800ba78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b9d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b9d8:	f000 f8ec 	bl	800bbb4 <prvAddNewTaskToReadyList>
 800b9dc:	e001      	b.n	800b9e2 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b9e2:	697b      	ldr	r3, [r7, #20]
	}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3728      	adds	r7, #40	; 0x28
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}

0800b9ec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b08c      	sub	sp, #48	; 0x30
 800b9f0:	af04      	add	r7, sp, #16
 800b9f2:	60f8      	str	r0, [r7, #12]
 800b9f4:	60b9      	str	r1, [r7, #8]
 800b9f6:	603b      	str	r3, [r7, #0]
 800b9f8:	4613      	mov	r3, r2
 800b9fa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b9fc:	88fb      	ldrh	r3, [r7, #6]
 800b9fe:	009b      	lsls	r3, r3, #2
 800ba00:	4618      	mov	r0, r3
 800ba02:	f000 fef1 	bl	800c7e8 <pvPortMalloc>
 800ba06:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ba08:	697b      	ldr	r3, [r7, #20]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d00e      	beq.n	800ba2c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ba0e:	20b4      	movs	r0, #180	; 0xb4
 800ba10:	f000 feea 	bl	800c7e8 <pvPortMalloc>
 800ba14:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ba16:	69fb      	ldr	r3, [r7, #28]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d003      	beq.n	800ba24 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ba1c:	69fb      	ldr	r3, [r7, #28]
 800ba1e:	697a      	ldr	r2, [r7, #20]
 800ba20:	631a      	str	r2, [r3, #48]	; 0x30
 800ba22:	e005      	b.n	800ba30 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ba24:	6978      	ldr	r0, [r7, #20]
 800ba26:	f000 ffab 	bl	800c980 <vPortFree>
 800ba2a:	e001      	b.n	800ba30 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ba30:	69fb      	ldr	r3, [r7, #28]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d017      	beq.n	800ba66 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ba36:	69fb      	ldr	r3, [r7, #28]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ba3e:	88fa      	ldrh	r2, [r7, #6]
 800ba40:	2300      	movs	r3, #0
 800ba42:	9303      	str	r3, [sp, #12]
 800ba44:	69fb      	ldr	r3, [r7, #28]
 800ba46:	9302      	str	r3, [sp, #8]
 800ba48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba4a:	9301      	str	r3, [sp, #4]
 800ba4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba4e:	9300      	str	r3, [sp, #0]
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	68b9      	ldr	r1, [r7, #8]
 800ba54:	68f8      	ldr	r0, [r7, #12]
 800ba56:	f000 f80f 	bl	800ba78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ba5a:	69f8      	ldr	r0, [r7, #28]
 800ba5c:	f000 f8aa 	bl	800bbb4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ba60:	2301      	movs	r3, #1
 800ba62:	61bb      	str	r3, [r7, #24]
 800ba64:	e002      	b.n	800ba6c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ba66:	f04f 33ff 	mov.w	r3, #4294967295
 800ba6a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ba6c:	69bb      	ldr	r3, [r7, #24]
	}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3720      	adds	r7, #32
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}
	...

0800ba78 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b088      	sub	sp, #32
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	60f8      	str	r0, [r7, #12]
 800ba80:	60b9      	str	r1, [r7, #8]
 800ba82:	607a      	str	r2, [r7, #4]
 800ba84:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ba86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ba90:	3b01      	subs	r3, #1
 800ba92:	009b      	lsls	r3, r3, #2
 800ba94:	4413      	add	r3, r2
 800ba96:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ba98:	69bb      	ldr	r3, [r7, #24]
 800ba9a:	f023 0307 	bic.w	r3, r3, #7
 800ba9e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800baa0:	69bb      	ldr	r3, [r7, #24]
 800baa2:	f003 0307 	and.w	r3, r3, #7
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d00a      	beq.n	800bac0 <prvInitialiseNewTask+0x48>
	__asm volatile
 800baaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baae:	f383 8811 	msr	BASEPRI, r3
 800bab2:	f3bf 8f6f 	isb	sy
 800bab6:	f3bf 8f4f 	dsb	sy
 800baba:	617b      	str	r3, [r7, #20]
}
 800babc:	bf00      	nop
 800babe:	e7fe      	b.n	800babe <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bac0:	68bb      	ldr	r3, [r7, #8]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d01f      	beq.n	800bb06 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bac6:	2300      	movs	r3, #0
 800bac8:	61fb      	str	r3, [r7, #28]
 800baca:	e012      	b.n	800baf2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bacc:	68ba      	ldr	r2, [r7, #8]
 800bace:	69fb      	ldr	r3, [r7, #28]
 800bad0:	4413      	add	r3, r2
 800bad2:	7819      	ldrb	r1, [r3, #0]
 800bad4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bad6:	69fb      	ldr	r3, [r7, #28]
 800bad8:	4413      	add	r3, r2
 800bada:	3334      	adds	r3, #52	; 0x34
 800badc:	460a      	mov	r2, r1
 800bade:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bae0:	68ba      	ldr	r2, [r7, #8]
 800bae2:	69fb      	ldr	r3, [r7, #28]
 800bae4:	4413      	add	r3, r2
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d006      	beq.n	800bafa <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800baec:	69fb      	ldr	r3, [r7, #28]
 800baee:	3301      	adds	r3, #1
 800baf0:	61fb      	str	r3, [r7, #28]
 800baf2:	69fb      	ldr	r3, [r7, #28]
 800baf4:	2b0f      	cmp	r3, #15
 800baf6:	d9e9      	bls.n	800bacc <prvInitialiseNewTask+0x54>
 800baf8:	e000      	b.n	800bafc <prvInitialiseNewTask+0x84>
			{
				break;
 800bafa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bafc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bafe:	2200      	movs	r2, #0
 800bb00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bb04:	e003      	b.n	800bb0e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bb06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb08:	2200      	movs	r2, #0
 800bb0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bb0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb10:	2b06      	cmp	r3, #6
 800bb12:	d901      	bls.n	800bb18 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bb14:	2306      	movs	r3, #6
 800bb16:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bb18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb1c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bb1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb22:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800bb24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb26:	2200      	movs	r2, #0
 800bb28:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bb2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb2c:	3304      	adds	r3, #4
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f7ff fe6b 	bl	800b80a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bb34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb36:	3318      	adds	r3, #24
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f7ff fe66 	bl	800b80a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bb3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb42:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb46:	f1c3 0207 	rsb	r2, r3, #7
 800bb4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb4c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bb4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb52:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bb54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb56:	2200      	movs	r2, #0
 800bb58:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bb5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb5e:	2200      	movs	r2, #0
 800bb60:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bb64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb66:	334c      	adds	r3, #76	; 0x4c
 800bb68:	2260      	movs	r2, #96	; 0x60
 800bb6a:	2100      	movs	r1, #0
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	f002 febf 	bl	800e8f0 <memset>
 800bb72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb74:	4a0c      	ldr	r2, [pc, #48]	; (800bba8 <prvInitialiseNewTask+0x130>)
 800bb76:	651a      	str	r2, [r3, #80]	; 0x50
 800bb78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb7a:	4a0c      	ldr	r2, [pc, #48]	; (800bbac <prvInitialiseNewTask+0x134>)
 800bb7c:	655a      	str	r2, [r3, #84]	; 0x54
 800bb7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb80:	4a0b      	ldr	r2, [pc, #44]	; (800bbb0 <prvInitialiseNewTask+0x138>)
 800bb82:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bb84:	683a      	ldr	r2, [r7, #0]
 800bb86:	68f9      	ldr	r1, [r7, #12]
 800bb88:	69b8      	ldr	r0, [r7, #24]
 800bb8a:	f000 fc1f 	bl	800c3cc <pxPortInitialiseStack>
 800bb8e:	4602      	mov	r2, r0
 800bb90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb92:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bb94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d002      	beq.n	800bba0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bb9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb9e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bba0:	bf00      	nop
 800bba2:	3720      	adds	r7, #32
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}
 800bba8:	0800f9c0 	.word	0x0800f9c0
 800bbac:	0800f9e0 	.word	0x0800f9e0
 800bbb0:	0800f9a0 	.word	0x0800f9a0

0800bbb4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b082      	sub	sp, #8
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bbbc:	f000 fd32 	bl	800c624 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bbc0:	4b2a      	ldr	r3, [pc, #168]	; (800bc6c <prvAddNewTaskToReadyList+0xb8>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	3301      	adds	r3, #1
 800bbc6:	4a29      	ldr	r2, [pc, #164]	; (800bc6c <prvAddNewTaskToReadyList+0xb8>)
 800bbc8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bbca:	4b29      	ldr	r3, [pc, #164]	; (800bc70 <prvAddNewTaskToReadyList+0xbc>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d109      	bne.n	800bbe6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bbd2:	4a27      	ldr	r2, [pc, #156]	; (800bc70 <prvAddNewTaskToReadyList+0xbc>)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bbd8:	4b24      	ldr	r3, [pc, #144]	; (800bc6c <prvAddNewTaskToReadyList+0xb8>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	2b01      	cmp	r3, #1
 800bbde:	d110      	bne.n	800bc02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bbe0:	f000 facc 	bl	800c17c <prvInitialiseTaskLists>
 800bbe4:	e00d      	b.n	800bc02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bbe6:	4b23      	ldr	r3, [pc, #140]	; (800bc74 <prvAddNewTaskToReadyList+0xc0>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d109      	bne.n	800bc02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bbee:	4b20      	ldr	r3, [pc, #128]	; (800bc70 <prvAddNewTaskToReadyList+0xbc>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbf8:	429a      	cmp	r2, r3
 800bbfa:	d802      	bhi.n	800bc02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bbfc:	4a1c      	ldr	r2, [pc, #112]	; (800bc70 <prvAddNewTaskToReadyList+0xbc>)
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bc02:	4b1d      	ldr	r3, [pc, #116]	; (800bc78 <prvAddNewTaskToReadyList+0xc4>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	3301      	adds	r3, #1
 800bc08:	4a1b      	ldr	r2, [pc, #108]	; (800bc78 <prvAddNewTaskToReadyList+0xc4>)
 800bc0a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc10:	2201      	movs	r2, #1
 800bc12:	409a      	lsls	r2, r3
 800bc14:	4b19      	ldr	r3, [pc, #100]	; (800bc7c <prvAddNewTaskToReadyList+0xc8>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	4313      	orrs	r3, r2
 800bc1a:	4a18      	ldr	r2, [pc, #96]	; (800bc7c <prvAddNewTaskToReadyList+0xc8>)
 800bc1c:	6013      	str	r3, [r2, #0]
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc22:	4613      	mov	r3, r2
 800bc24:	009b      	lsls	r3, r3, #2
 800bc26:	4413      	add	r3, r2
 800bc28:	009b      	lsls	r3, r3, #2
 800bc2a:	4a15      	ldr	r2, [pc, #84]	; (800bc80 <prvAddNewTaskToReadyList+0xcc>)
 800bc2c:	441a      	add	r2, r3
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	3304      	adds	r3, #4
 800bc32:	4619      	mov	r1, r3
 800bc34:	4610      	mov	r0, r2
 800bc36:	f7ff fdf5 	bl	800b824 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bc3a:	f000 fd23 	bl	800c684 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bc3e:	4b0d      	ldr	r3, [pc, #52]	; (800bc74 <prvAddNewTaskToReadyList+0xc0>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d00e      	beq.n	800bc64 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bc46:	4b0a      	ldr	r3, [pc, #40]	; (800bc70 <prvAddNewTaskToReadyList+0xbc>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc50:	429a      	cmp	r2, r3
 800bc52:	d207      	bcs.n	800bc64 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bc54:	4b0b      	ldr	r3, [pc, #44]	; (800bc84 <prvAddNewTaskToReadyList+0xd0>)
 800bc56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc5a:	601a      	str	r2, [r3, #0]
 800bc5c:	f3bf 8f4f 	dsb	sy
 800bc60:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bc64:	bf00      	nop
 800bc66:	3708      	adds	r7, #8
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}
 800bc6c:	20003050 	.word	0x20003050
 800bc70:	20002f50 	.word	0x20002f50
 800bc74:	2000305c 	.word	0x2000305c
 800bc78:	2000306c 	.word	0x2000306c
 800bc7c:	20003058 	.word	0x20003058
 800bc80:	20002f54 	.word	0x20002f54
 800bc84:	e000ed04 	.word	0xe000ed04

0800bc88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b084      	sub	sp, #16
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bc90:	2300      	movs	r3, #0
 800bc92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d017      	beq.n	800bcca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bc9a:	4b13      	ldr	r3, [pc, #76]	; (800bce8 <vTaskDelay+0x60>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d00a      	beq.n	800bcb8 <vTaskDelay+0x30>
	__asm volatile
 800bca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca6:	f383 8811 	msr	BASEPRI, r3
 800bcaa:	f3bf 8f6f 	isb	sy
 800bcae:	f3bf 8f4f 	dsb	sy
 800bcb2:	60bb      	str	r3, [r7, #8]
}
 800bcb4:	bf00      	nop
 800bcb6:	e7fe      	b.n	800bcb6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bcb8:	f000 f884 	bl	800bdc4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bcbc:	2100      	movs	r1, #0
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f000 fb1e 	bl	800c300 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bcc4:	f000 f88c 	bl	800bde0 <xTaskResumeAll>
 800bcc8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d107      	bne.n	800bce0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800bcd0:	4b06      	ldr	r3, [pc, #24]	; (800bcec <vTaskDelay+0x64>)
 800bcd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcd6:	601a      	str	r2, [r3, #0]
 800bcd8:	f3bf 8f4f 	dsb	sy
 800bcdc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bce0:	bf00      	nop
 800bce2:	3710      	adds	r7, #16
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}
 800bce8:	20003078 	.word	0x20003078
 800bcec:	e000ed04 	.word	0xe000ed04

0800bcf0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b08a      	sub	sp, #40	; 0x28
 800bcf4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bcfe:	463a      	mov	r2, r7
 800bd00:	1d39      	adds	r1, r7, #4
 800bd02:	f107 0308 	add.w	r3, r7, #8
 800bd06:	4618      	mov	r0, r3
 800bd08:	f7f5 fad2 	bl	80012b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bd0c:	6839      	ldr	r1, [r7, #0]
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	68ba      	ldr	r2, [r7, #8]
 800bd12:	9202      	str	r2, [sp, #8]
 800bd14:	9301      	str	r3, [sp, #4]
 800bd16:	2300      	movs	r3, #0
 800bd18:	9300      	str	r3, [sp, #0]
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	460a      	mov	r2, r1
 800bd1e:	4921      	ldr	r1, [pc, #132]	; (800bda4 <vTaskStartScheduler+0xb4>)
 800bd20:	4821      	ldr	r0, [pc, #132]	; (800bda8 <vTaskStartScheduler+0xb8>)
 800bd22:	f7ff fe06 	bl	800b932 <xTaskCreateStatic>
 800bd26:	4603      	mov	r3, r0
 800bd28:	4a20      	ldr	r2, [pc, #128]	; (800bdac <vTaskStartScheduler+0xbc>)
 800bd2a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bd2c:	4b1f      	ldr	r3, [pc, #124]	; (800bdac <vTaskStartScheduler+0xbc>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d002      	beq.n	800bd3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bd34:	2301      	movs	r3, #1
 800bd36:	617b      	str	r3, [r7, #20]
 800bd38:	e001      	b.n	800bd3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bd3e:	697b      	ldr	r3, [r7, #20]
 800bd40:	2b01      	cmp	r3, #1
 800bd42:	d11b      	bne.n	800bd7c <vTaskStartScheduler+0x8c>
	__asm volatile
 800bd44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd48:	f383 8811 	msr	BASEPRI, r3
 800bd4c:	f3bf 8f6f 	isb	sy
 800bd50:	f3bf 8f4f 	dsb	sy
 800bd54:	613b      	str	r3, [r7, #16]
}
 800bd56:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bd58:	4b15      	ldr	r3, [pc, #84]	; (800bdb0 <vTaskStartScheduler+0xc0>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	334c      	adds	r3, #76	; 0x4c
 800bd5e:	4a15      	ldr	r2, [pc, #84]	; (800bdb4 <vTaskStartScheduler+0xc4>)
 800bd60:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bd62:	4b15      	ldr	r3, [pc, #84]	; (800bdb8 <vTaskStartScheduler+0xc8>)
 800bd64:	f04f 32ff 	mov.w	r2, #4294967295
 800bd68:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bd6a:	4b14      	ldr	r3, [pc, #80]	; (800bdbc <vTaskStartScheduler+0xcc>)
 800bd6c:	2201      	movs	r2, #1
 800bd6e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bd70:	4b13      	ldr	r3, [pc, #76]	; (800bdc0 <vTaskStartScheduler+0xd0>)
 800bd72:	2200      	movs	r2, #0
 800bd74:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bd76:	f000 fbb3 	bl	800c4e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bd7a:	e00e      	b.n	800bd9a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bd7c:	697b      	ldr	r3, [r7, #20]
 800bd7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd82:	d10a      	bne.n	800bd9a <vTaskStartScheduler+0xaa>
	__asm volatile
 800bd84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd88:	f383 8811 	msr	BASEPRI, r3
 800bd8c:	f3bf 8f6f 	isb	sy
 800bd90:	f3bf 8f4f 	dsb	sy
 800bd94:	60fb      	str	r3, [r7, #12]
}
 800bd96:	bf00      	nop
 800bd98:	e7fe      	b.n	800bd98 <vTaskStartScheduler+0xa8>
}
 800bd9a:	bf00      	nop
 800bd9c:	3718      	adds	r7, #24
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}
 800bda2:	bf00      	nop
 800bda4:	0800f1c4 	.word	0x0800f1c4
 800bda8:	0800c14d 	.word	0x0800c14d
 800bdac:	20003074 	.word	0x20003074
 800bdb0:	20002f50 	.word	0x20002f50
 800bdb4:	20000038 	.word	0x20000038
 800bdb8:	20003070 	.word	0x20003070
 800bdbc:	2000305c 	.word	0x2000305c
 800bdc0:	20003054 	.word	0x20003054

0800bdc4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bdc4:	b480      	push	{r7}
 800bdc6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bdc8:	4b04      	ldr	r3, [pc, #16]	; (800bddc <vTaskSuspendAll+0x18>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	3301      	adds	r3, #1
 800bdce:	4a03      	ldr	r2, [pc, #12]	; (800bddc <vTaskSuspendAll+0x18>)
 800bdd0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bdd2:	bf00      	nop
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdda:	4770      	bx	lr
 800bddc:	20003078 	.word	0x20003078

0800bde0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b084      	sub	sp, #16
 800bde4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bde6:	2300      	movs	r3, #0
 800bde8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bdea:	2300      	movs	r3, #0
 800bdec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bdee:	4b41      	ldr	r3, [pc, #260]	; (800bef4 <xTaskResumeAll+0x114>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d10a      	bne.n	800be0c <xTaskResumeAll+0x2c>
	__asm volatile
 800bdf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdfa:	f383 8811 	msr	BASEPRI, r3
 800bdfe:	f3bf 8f6f 	isb	sy
 800be02:	f3bf 8f4f 	dsb	sy
 800be06:	603b      	str	r3, [r7, #0]
}
 800be08:	bf00      	nop
 800be0a:	e7fe      	b.n	800be0a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800be0c:	f000 fc0a 	bl	800c624 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800be10:	4b38      	ldr	r3, [pc, #224]	; (800bef4 <xTaskResumeAll+0x114>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	3b01      	subs	r3, #1
 800be16:	4a37      	ldr	r2, [pc, #220]	; (800bef4 <xTaskResumeAll+0x114>)
 800be18:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be1a:	4b36      	ldr	r3, [pc, #216]	; (800bef4 <xTaskResumeAll+0x114>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d161      	bne.n	800bee6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800be22:	4b35      	ldr	r3, [pc, #212]	; (800bef8 <xTaskResumeAll+0x118>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d05d      	beq.n	800bee6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800be2a:	e02e      	b.n	800be8a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be2c:	4b33      	ldr	r3, [pc, #204]	; (800befc <xTaskResumeAll+0x11c>)
 800be2e:	68db      	ldr	r3, [r3, #12]
 800be30:	68db      	ldr	r3, [r3, #12]
 800be32:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	3318      	adds	r3, #24
 800be38:	4618      	mov	r0, r3
 800be3a:	f7ff fd50 	bl	800b8de <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	3304      	adds	r3, #4
 800be42:	4618      	mov	r0, r3
 800be44:	f7ff fd4b 	bl	800b8de <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be4c:	2201      	movs	r2, #1
 800be4e:	409a      	lsls	r2, r3
 800be50:	4b2b      	ldr	r3, [pc, #172]	; (800bf00 <xTaskResumeAll+0x120>)
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	4313      	orrs	r3, r2
 800be56:	4a2a      	ldr	r2, [pc, #168]	; (800bf00 <xTaskResumeAll+0x120>)
 800be58:	6013      	str	r3, [r2, #0]
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be5e:	4613      	mov	r3, r2
 800be60:	009b      	lsls	r3, r3, #2
 800be62:	4413      	add	r3, r2
 800be64:	009b      	lsls	r3, r3, #2
 800be66:	4a27      	ldr	r2, [pc, #156]	; (800bf04 <xTaskResumeAll+0x124>)
 800be68:	441a      	add	r2, r3
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	3304      	adds	r3, #4
 800be6e:	4619      	mov	r1, r3
 800be70:	4610      	mov	r0, r2
 800be72:	f7ff fcd7 	bl	800b824 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be7a:	4b23      	ldr	r3, [pc, #140]	; (800bf08 <xTaskResumeAll+0x128>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be80:	429a      	cmp	r2, r3
 800be82:	d302      	bcc.n	800be8a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800be84:	4b21      	ldr	r3, [pc, #132]	; (800bf0c <xTaskResumeAll+0x12c>)
 800be86:	2201      	movs	r2, #1
 800be88:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800be8a:	4b1c      	ldr	r3, [pc, #112]	; (800befc <xTaskResumeAll+0x11c>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d1cc      	bne.n	800be2c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d001      	beq.n	800be9c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800be98:	f000 fa12 	bl	800c2c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800be9c:	4b1c      	ldr	r3, [pc, #112]	; (800bf10 <xTaskResumeAll+0x130>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d010      	beq.n	800beca <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bea8:	f000 f836 	bl	800bf18 <xTaskIncrementTick>
 800beac:	4603      	mov	r3, r0
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d002      	beq.n	800beb8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800beb2:	4b16      	ldr	r3, [pc, #88]	; (800bf0c <xTaskResumeAll+0x12c>)
 800beb4:	2201      	movs	r2, #1
 800beb6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	3b01      	subs	r3, #1
 800bebc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d1f1      	bne.n	800bea8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800bec4:	4b12      	ldr	r3, [pc, #72]	; (800bf10 <xTaskResumeAll+0x130>)
 800bec6:	2200      	movs	r2, #0
 800bec8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800beca:	4b10      	ldr	r3, [pc, #64]	; (800bf0c <xTaskResumeAll+0x12c>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d009      	beq.n	800bee6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bed2:	2301      	movs	r3, #1
 800bed4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bed6:	4b0f      	ldr	r3, [pc, #60]	; (800bf14 <xTaskResumeAll+0x134>)
 800bed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bedc:	601a      	str	r2, [r3, #0]
 800bede:	f3bf 8f4f 	dsb	sy
 800bee2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bee6:	f000 fbcd 	bl	800c684 <vPortExitCritical>

	return xAlreadyYielded;
 800beea:	68bb      	ldr	r3, [r7, #8]
}
 800beec:	4618      	mov	r0, r3
 800beee:	3710      	adds	r7, #16
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}
 800bef4:	20003078 	.word	0x20003078
 800bef8:	20003050 	.word	0x20003050
 800befc:	20003010 	.word	0x20003010
 800bf00:	20003058 	.word	0x20003058
 800bf04:	20002f54 	.word	0x20002f54
 800bf08:	20002f50 	.word	0x20002f50
 800bf0c:	20003064 	.word	0x20003064
 800bf10:	20003060 	.word	0x20003060
 800bf14:	e000ed04 	.word	0xe000ed04

0800bf18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b086      	sub	sp, #24
 800bf1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf22:	4b4e      	ldr	r3, [pc, #312]	; (800c05c <xTaskIncrementTick+0x144>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	f040 808e 	bne.w	800c048 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bf2c:	4b4c      	ldr	r3, [pc, #304]	; (800c060 <xTaskIncrementTick+0x148>)
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	3301      	adds	r3, #1
 800bf32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bf34:	4a4a      	ldr	r2, [pc, #296]	; (800c060 <xTaskIncrementTick+0x148>)
 800bf36:	693b      	ldr	r3, [r7, #16]
 800bf38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bf3a:	693b      	ldr	r3, [r7, #16]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d120      	bne.n	800bf82 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bf40:	4b48      	ldr	r3, [pc, #288]	; (800c064 <xTaskIncrementTick+0x14c>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d00a      	beq.n	800bf60 <xTaskIncrementTick+0x48>
	__asm volatile
 800bf4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf4e:	f383 8811 	msr	BASEPRI, r3
 800bf52:	f3bf 8f6f 	isb	sy
 800bf56:	f3bf 8f4f 	dsb	sy
 800bf5a:	603b      	str	r3, [r7, #0]
}
 800bf5c:	bf00      	nop
 800bf5e:	e7fe      	b.n	800bf5e <xTaskIncrementTick+0x46>
 800bf60:	4b40      	ldr	r3, [pc, #256]	; (800c064 <xTaskIncrementTick+0x14c>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	60fb      	str	r3, [r7, #12]
 800bf66:	4b40      	ldr	r3, [pc, #256]	; (800c068 <xTaskIncrementTick+0x150>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	4a3e      	ldr	r2, [pc, #248]	; (800c064 <xTaskIncrementTick+0x14c>)
 800bf6c:	6013      	str	r3, [r2, #0]
 800bf6e:	4a3e      	ldr	r2, [pc, #248]	; (800c068 <xTaskIncrementTick+0x150>)
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	6013      	str	r3, [r2, #0]
 800bf74:	4b3d      	ldr	r3, [pc, #244]	; (800c06c <xTaskIncrementTick+0x154>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	3301      	adds	r3, #1
 800bf7a:	4a3c      	ldr	r2, [pc, #240]	; (800c06c <xTaskIncrementTick+0x154>)
 800bf7c:	6013      	str	r3, [r2, #0]
 800bf7e:	f000 f99f 	bl	800c2c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bf82:	4b3b      	ldr	r3, [pc, #236]	; (800c070 <xTaskIncrementTick+0x158>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	693a      	ldr	r2, [r7, #16]
 800bf88:	429a      	cmp	r2, r3
 800bf8a:	d348      	bcc.n	800c01e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf8c:	4b35      	ldr	r3, [pc, #212]	; (800c064 <xTaskIncrementTick+0x14c>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d104      	bne.n	800bfa0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf96:	4b36      	ldr	r3, [pc, #216]	; (800c070 <xTaskIncrementTick+0x158>)
 800bf98:	f04f 32ff 	mov.w	r2, #4294967295
 800bf9c:	601a      	str	r2, [r3, #0]
					break;
 800bf9e:	e03e      	b.n	800c01e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfa0:	4b30      	ldr	r3, [pc, #192]	; (800c064 <xTaskIncrementTick+0x14c>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	68db      	ldr	r3, [r3, #12]
 800bfa6:	68db      	ldr	r3, [r3, #12]
 800bfa8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	685b      	ldr	r3, [r3, #4]
 800bfae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bfb0:	693a      	ldr	r2, [r7, #16]
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	429a      	cmp	r2, r3
 800bfb6:	d203      	bcs.n	800bfc0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bfb8:	4a2d      	ldr	r2, [pc, #180]	; (800c070 <xTaskIncrementTick+0x158>)
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bfbe:	e02e      	b.n	800c01e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	3304      	adds	r3, #4
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f7ff fc8a 	bl	800b8de <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d004      	beq.n	800bfdc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	3318      	adds	r3, #24
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f7ff fc81 	bl	800b8de <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfe0:	2201      	movs	r2, #1
 800bfe2:	409a      	lsls	r2, r3
 800bfe4:	4b23      	ldr	r3, [pc, #140]	; (800c074 <xTaskIncrementTick+0x15c>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	4313      	orrs	r3, r2
 800bfea:	4a22      	ldr	r2, [pc, #136]	; (800c074 <xTaskIncrementTick+0x15c>)
 800bfec:	6013      	str	r3, [r2, #0]
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bff2:	4613      	mov	r3, r2
 800bff4:	009b      	lsls	r3, r3, #2
 800bff6:	4413      	add	r3, r2
 800bff8:	009b      	lsls	r3, r3, #2
 800bffa:	4a1f      	ldr	r2, [pc, #124]	; (800c078 <xTaskIncrementTick+0x160>)
 800bffc:	441a      	add	r2, r3
 800bffe:	68bb      	ldr	r3, [r7, #8]
 800c000:	3304      	adds	r3, #4
 800c002:	4619      	mov	r1, r3
 800c004:	4610      	mov	r0, r2
 800c006:	f7ff fc0d 	bl	800b824 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c00e:	4b1b      	ldr	r3, [pc, #108]	; (800c07c <xTaskIncrementTick+0x164>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c014:	429a      	cmp	r2, r3
 800c016:	d3b9      	bcc.n	800bf8c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c018:	2301      	movs	r3, #1
 800c01a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c01c:	e7b6      	b.n	800bf8c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c01e:	4b17      	ldr	r3, [pc, #92]	; (800c07c <xTaskIncrementTick+0x164>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c024:	4914      	ldr	r1, [pc, #80]	; (800c078 <xTaskIncrementTick+0x160>)
 800c026:	4613      	mov	r3, r2
 800c028:	009b      	lsls	r3, r3, #2
 800c02a:	4413      	add	r3, r2
 800c02c:	009b      	lsls	r3, r3, #2
 800c02e:	440b      	add	r3, r1
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	2b01      	cmp	r3, #1
 800c034:	d901      	bls.n	800c03a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800c036:	2301      	movs	r3, #1
 800c038:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c03a:	4b11      	ldr	r3, [pc, #68]	; (800c080 <xTaskIncrementTick+0x168>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d007      	beq.n	800c052 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800c042:	2301      	movs	r3, #1
 800c044:	617b      	str	r3, [r7, #20]
 800c046:	e004      	b.n	800c052 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c048:	4b0e      	ldr	r3, [pc, #56]	; (800c084 <xTaskIncrementTick+0x16c>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	3301      	adds	r3, #1
 800c04e:	4a0d      	ldr	r2, [pc, #52]	; (800c084 <xTaskIncrementTick+0x16c>)
 800c050:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c052:	697b      	ldr	r3, [r7, #20]
}
 800c054:	4618      	mov	r0, r3
 800c056:	3718      	adds	r7, #24
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}
 800c05c:	20003078 	.word	0x20003078
 800c060:	20003054 	.word	0x20003054
 800c064:	20003008 	.word	0x20003008
 800c068:	2000300c 	.word	0x2000300c
 800c06c:	20003068 	.word	0x20003068
 800c070:	20003070 	.word	0x20003070
 800c074:	20003058 	.word	0x20003058
 800c078:	20002f54 	.word	0x20002f54
 800c07c:	20002f50 	.word	0x20002f50
 800c080:	20003064 	.word	0x20003064
 800c084:	20003060 	.word	0x20003060

0800c088 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c088:	b480      	push	{r7}
 800c08a:	b087      	sub	sp, #28
 800c08c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c08e:	4b29      	ldr	r3, [pc, #164]	; (800c134 <vTaskSwitchContext+0xac>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d003      	beq.n	800c09e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c096:	4b28      	ldr	r3, [pc, #160]	; (800c138 <vTaskSwitchContext+0xb0>)
 800c098:	2201      	movs	r2, #1
 800c09a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c09c:	e044      	b.n	800c128 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800c09e:	4b26      	ldr	r3, [pc, #152]	; (800c138 <vTaskSwitchContext+0xb0>)
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0a4:	4b25      	ldr	r3, [pc, #148]	; (800c13c <vTaskSwitchContext+0xb4>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	fab3 f383 	clz	r3, r3
 800c0b0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c0b2:	7afb      	ldrb	r3, [r7, #11]
 800c0b4:	f1c3 031f 	rsb	r3, r3, #31
 800c0b8:	617b      	str	r3, [r7, #20]
 800c0ba:	4921      	ldr	r1, [pc, #132]	; (800c140 <vTaskSwitchContext+0xb8>)
 800c0bc:	697a      	ldr	r2, [r7, #20]
 800c0be:	4613      	mov	r3, r2
 800c0c0:	009b      	lsls	r3, r3, #2
 800c0c2:	4413      	add	r3, r2
 800c0c4:	009b      	lsls	r3, r3, #2
 800c0c6:	440b      	add	r3, r1
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d10a      	bne.n	800c0e4 <vTaskSwitchContext+0x5c>
	__asm volatile
 800c0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d2:	f383 8811 	msr	BASEPRI, r3
 800c0d6:	f3bf 8f6f 	isb	sy
 800c0da:	f3bf 8f4f 	dsb	sy
 800c0de:	607b      	str	r3, [r7, #4]
}
 800c0e0:	bf00      	nop
 800c0e2:	e7fe      	b.n	800c0e2 <vTaskSwitchContext+0x5a>
 800c0e4:	697a      	ldr	r2, [r7, #20]
 800c0e6:	4613      	mov	r3, r2
 800c0e8:	009b      	lsls	r3, r3, #2
 800c0ea:	4413      	add	r3, r2
 800c0ec:	009b      	lsls	r3, r3, #2
 800c0ee:	4a14      	ldr	r2, [pc, #80]	; (800c140 <vTaskSwitchContext+0xb8>)
 800c0f0:	4413      	add	r3, r2
 800c0f2:	613b      	str	r3, [r7, #16]
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	685b      	ldr	r3, [r3, #4]
 800c0f8:	685a      	ldr	r2, [r3, #4]
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	605a      	str	r2, [r3, #4]
 800c0fe:	693b      	ldr	r3, [r7, #16]
 800c100:	685a      	ldr	r2, [r3, #4]
 800c102:	693b      	ldr	r3, [r7, #16]
 800c104:	3308      	adds	r3, #8
 800c106:	429a      	cmp	r2, r3
 800c108:	d104      	bne.n	800c114 <vTaskSwitchContext+0x8c>
 800c10a:	693b      	ldr	r3, [r7, #16]
 800c10c:	685b      	ldr	r3, [r3, #4]
 800c10e:	685a      	ldr	r2, [r3, #4]
 800c110:	693b      	ldr	r3, [r7, #16]
 800c112:	605a      	str	r2, [r3, #4]
 800c114:	693b      	ldr	r3, [r7, #16]
 800c116:	685b      	ldr	r3, [r3, #4]
 800c118:	68db      	ldr	r3, [r3, #12]
 800c11a:	4a0a      	ldr	r2, [pc, #40]	; (800c144 <vTaskSwitchContext+0xbc>)
 800c11c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c11e:	4b09      	ldr	r3, [pc, #36]	; (800c144 <vTaskSwitchContext+0xbc>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	334c      	adds	r3, #76	; 0x4c
 800c124:	4a08      	ldr	r2, [pc, #32]	; (800c148 <vTaskSwitchContext+0xc0>)
 800c126:	6013      	str	r3, [r2, #0]
}
 800c128:	bf00      	nop
 800c12a:	371c      	adds	r7, #28
 800c12c:	46bd      	mov	sp, r7
 800c12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c132:	4770      	bx	lr
 800c134:	20003078 	.word	0x20003078
 800c138:	20003064 	.word	0x20003064
 800c13c:	20003058 	.word	0x20003058
 800c140:	20002f54 	.word	0x20002f54
 800c144:	20002f50 	.word	0x20002f50
 800c148:	20000038 	.word	0x20000038

0800c14c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b082      	sub	sp, #8
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c154:	f000 f852 	bl	800c1fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c158:	4b06      	ldr	r3, [pc, #24]	; (800c174 <prvIdleTask+0x28>)
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	2b01      	cmp	r3, #1
 800c15e:	d9f9      	bls.n	800c154 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c160:	4b05      	ldr	r3, [pc, #20]	; (800c178 <prvIdleTask+0x2c>)
 800c162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c166:	601a      	str	r2, [r3, #0]
 800c168:	f3bf 8f4f 	dsb	sy
 800c16c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c170:	e7f0      	b.n	800c154 <prvIdleTask+0x8>
 800c172:	bf00      	nop
 800c174:	20002f54 	.word	0x20002f54
 800c178:	e000ed04 	.word	0xe000ed04

0800c17c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b082      	sub	sp, #8
 800c180:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c182:	2300      	movs	r3, #0
 800c184:	607b      	str	r3, [r7, #4]
 800c186:	e00c      	b.n	800c1a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c188:	687a      	ldr	r2, [r7, #4]
 800c18a:	4613      	mov	r3, r2
 800c18c:	009b      	lsls	r3, r3, #2
 800c18e:	4413      	add	r3, r2
 800c190:	009b      	lsls	r3, r3, #2
 800c192:	4a12      	ldr	r2, [pc, #72]	; (800c1dc <prvInitialiseTaskLists+0x60>)
 800c194:	4413      	add	r3, r2
 800c196:	4618      	mov	r0, r3
 800c198:	f7ff fb17 	bl	800b7ca <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	3301      	adds	r3, #1
 800c1a0:	607b      	str	r3, [r7, #4]
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2b06      	cmp	r3, #6
 800c1a6:	d9ef      	bls.n	800c188 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c1a8:	480d      	ldr	r0, [pc, #52]	; (800c1e0 <prvInitialiseTaskLists+0x64>)
 800c1aa:	f7ff fb0e 	bl	800b7ca <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c1ae:	480d      	ldr	r0, [pc, #52]	; (800c1e4 <prvInitialiseTaskLists+0x68>)
 800c1b0:	f7ff fb0b 	bl	800b7ca <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c1b4:	480c      	ldr	r0, [pc, #48]	; (800c1e8 <prvInitialiseTaskLists+0x6c>)
 800c1b6:	f7ff fb08 	bl	800b7ca <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c1ba:	480c      	ldr	r0, [pc, #48]	; (800c1ec <prvInitialiseTaskLists+0x70>)
 800c1bc:	f7ff fb05 	bl	800b7ca <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c1c0:	480b      	ldr	r0, [pc, #44]	; (800c1f0 <prvInitialiseTaskLists+0x74>)
 800c1c2:	f7ff fb02 	bl	800b7ca <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c1c6:	4b0b      	ldr	r3, [pc, #44]	; (800c1f4 <prvInitialiseTaskLists+0x78>)
 800c1c8:	4a05      	ldr	r2, [pc, #20]	; (800c1e0 <prvInitialiseTaskLists+0x64>)
 800c1ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c1cc:	4b0a      	ldr	r3, [pc, #40]	; (800c1f8 <prvInitialiseTaskLists+0x7c>)
 800c1ce:	4a05      	ldr	r2, [pc, #20]	; (800c1e4 <prvInitialiseTaskLists+0x68>)
 800c1d0:	601a      	str	r2, [r3, #0]
}
 800c1d2:	bf00      	nop
 800c1d4:	3708      	adds	r7, #8
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}
 800c1da:	bf00      	nop
 800c1dc:	20002f54 	.word	0x20002f54
 800c1e0:	20002fe0 	.word	0x20002fe0
 800c1e4:	20002ff4 	.word	0x20002ff4
 800c1e8:	20003010 	.word	0x20003010
 800c1ec:	20003024 	.word	0x20003024
 800c1f0:	2000303c 	.word	0x2000303c
 800c1f4:	20003008 	.word	0x20003008
 800c1f8:	2000300c 	.word	0x2000300c

0800c1fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b082      	sub	sp, #8
 800c200:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c202:	e019      	b.n	800c238 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c204:	f000 fa0e 	bl	800c624 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c208:	4b10      	ldr	r3, [pc, #64]	; (800c24c <prvCheckTasksWaitingTermination+0x50>)
 800c20a:	68db      	ldr	r3, [r3, #12]
 800c20c:	68db      	ldr	r3, [r3, #12]
 800c20e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	3304      	adds	r3, #4
 800c214:	4618      	mov	r0, r3
 800c216:	f7ff fb62 	bl	800b8de <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c21a:	4b0d      	ldr	r3, [pc, #52]	; (800c250 <prvCheckTasksWaitingTermination+0x54>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	3b01      	subs	r3, #1
 800c220:	4a0b      	ldr	r2, [pc, #44]	; (800c250 <prvCheckTasksWaitingTermination+0x54>)
 800c222:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c224:	4b0b      	ldr	r3, [pc, #44]	; (800c254 <prvCheckTasksWaitingTermination+0x58>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	3b01      	subs	r3, #1
 800c22a:	4a0a      	ldr	r2, [pc, #40]	; (800c254 <prvCheckTasksWaitingTermination+0x58>)
 800c22c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c22e:	f000 fa29 	bl	800c684 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f000 f810 	bl	800c258 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c238:	4b06      	ldr	r3, [pc, #24]	; (800c254 <prvCheckTasksWaitingTermination+0x58>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d1e1      	bne.n	800c204 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c240:	bf00      	nop
 800c242:	bf00      	nop
 800c244:	3708      	adds	r7, #8
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}
 800c24a:	bf00      	nop
 800c24c:	20003024 	.word	0x20003024
 800c250:	20003050 	.word	0x20003050
 800c254:	20003038 	.word	0x20003038

0800c258 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b084      	sub	sp, #16
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	334c      	adds	r3, #76	; 0x4c
 800c264:	4618      	mov	r0, r3
 800c266:	f002 fbf5 	bl	800ea54 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c270:	2b00      	cmp	r3, #0
 800c272:	d108      	bne.n	800c286 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c278:	4618      	mov	r0, r3
 800c27a:	f000 fb81 	bl	800c980 <vPortFree>
				vPortFree( pxTCB );
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f000 fb7e 	bl	800c980 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c284:	e018      	b.n	800c2b8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c28c:	2b01      	cmp	r3, #1
 800c28e:	d103      	bne.n	800c298 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c290:	6878      	ldr	r0, [r7, #4]
 800c292:	f000 fb75 	bl	800c980 <vPortFree>
	}
 800c296:	e00f      	b.n	800c2b8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c29e:	2b02      	cmp	r3, #2
 800c2a0:	d00a      	beq.n	800c2b8 <prvDeleteTCB+0x60>
	__asm volatile
 800c2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a6:	f383 8811 	msr	BASEPRI, r3
 800c2aa:	f3bf 8f6f 	isb	sy
 800c2ae:	f3bf 8f4f 	dsb	sy
 800c2b2:	60fb      	str	r3, [r7, #12]
}
 800c2b4:	bf00      	nop
 800c2b6:	e7fe      	b.n	800c2b6 <prvDeleteTCB+0x5e>
	}
 800c2b8:	bf00      	nop
 800c2ba:	3710      	adds	r7, #16
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}

0800c2c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c2c0:	b480      	push	{r7}
 800c2c2:	b083      	sub	sp, #12
 800c2c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c2c6:	4b0c      	ldr	r3, [pc, #48]	; (800c2f8 <prvResetNextTaskUnblockTime+0x38>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d104      	bne.n	800c2da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c2d0:	4b0a      	ldr	r3, [pc, #40]	; (800c2fc <prvResetNextTaskUnblockTime+0x3c>)
 800c2d2:	f04f 32ff 	mov.w	r2, #4294967295
 800c2d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c2d8:	e008      	b.n	800c2ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2da:	4b07      	ldr	r3, [pc, #28]	; (800c2f8 <prvResetNextTaskUnblockTime+0x38>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	68db      	ldr	r3, [r3, #12]
 800c2e0:	68db      	ldr	r3, [r3, #12]
 800c2e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	685b      	ldr	r3, [r3, #4]
 800c2e8:	4a04      	ldr	r2, [pc, #16]	; (800c2fc <prvResetNextTaskUnblockTime+0x3c>)
 800c2ea:	6013      	str	r3, [r2, #0]
}
 800c2ec:	bf00      	nop
 800c2ee:	370c      	adds	r7, #12
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f6:	4770      	bx	lr
 800c2f8:	20003008 	.word	0x20003008
 800c2fc:	20003070 	.word	0x20003070

0800c300 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b084      	sub	sp, #16
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c30a:	4b29      	ldr	r3, [pc, #164]	; (800c3b0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c310:	4b28      	ldr	r3, [pc, #160]	; (800c3b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	3304      	adds	r3, #4
 800c316:	4618      	mov	r0, r3
 800c318:	f7ff fae1 	bl	800b8de <uxListRemove>
 800c31c:	4603      	mov	r3, r0
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d10b      	bne.n	800c33a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c322:	4b24      	ldr	r3, [pc, #144]	; (800c3b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c328:	2201      	movs	r2, #1
 800c32a:	fa02 f303 	lsl.w	r3, r2, r3
 800c32e:	43da      	mvns	r2, r3
 800c330:	4b21      	ldr	r3, [pc, #132]	; (800c3b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	4013      	ands	r3, r2
 800c336:	4a20      	ldr	r2, [pc, #128]	; (800c3b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c338:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c340:	d10a      	bne.n	800c358 <prvAddCurrentTaskToDelayedList+0x58>
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d007      	beq.n	800c358 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c348:	4b1a      	ldr	r3, [pc, #104]	; (800c3b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	3304      	adds	r3, #4
 800c34e:	4619      	mov	r1, r3
 800c350:	481a      	ldr	r0, [pc, #104]	; (800c3bc <prvAddCurrentTaskToDelayedList+0xbc>)
 800c352:	f7ff fa67 	bl	800b824 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c356:	e026      	b.n	800c3a6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c358:	68fa      	ldr	r2, [r7, #12]
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	4413      	add	r3, r2
 800c35e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c360:	4b14      	ldr	r3, [pc, #80]	; (800c3b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	68ba      	ldr	r2, [r7, #8]
 800c366:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c368:	68ba      	ldr	r2, [r7, #8]
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	429a      	cmp	r2, r3
 800c36e:	d209      	bcs.n	800c384 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c370:	4b13      	ldr	r3, [pc, #76]	; (800c3c0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c372:	681a      	ldr	r2, [r3, #0]
 800c374:	4b0f      	ldr	r3, [pc, #60]	; (800c3b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	3304      	adds	r3, #4
 800c37a:	4619      	mov	r1, r3
 800c37c:	4610      	mov	r0, r2
 800c37e:	f7ff fa75 	bl	800b86c <vListInsert>
}
 800c382:	e010      	b.n	800c3a6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c384:	4b0f      	ldr	r3, [pc, #60]	; (800c3c4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c386:	681a      	ldr	r2, [r3, #0]
 800c388:	4b0a      	ldr	r3, [pc, #40]	; (800c3b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	3304      	adds	r3, #4
 800c38e:	4619      	mov	r1, r3
 800c390:	4610      	mov	r0, r2
 800c392:	f7ff fa6b 	bl	800b86c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c396:	4b0c      	ldr	r3, [pc, #48]	; (800c3c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	68ba      	ldr	r2, [r7, #8]
 800c39c:	429a      	cmp	r2, r3
 800c39e:	d202      	bcs.n	800c3a6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c3a0:	4a09      	ldr	r2, [pc, #36]	; (800c3c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c3a2:	68bb      	ldr	r3, [r7, #8]
 800c3a4:	6013      	str	r3, [r2, #0]
}
 800c3a6:	bf00      	nop
 800c3a8:	3710      	adds	r7, #16
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}
 800c3ae:	bf00      	nop
 800c3b0:	20003054 	.word	0x20003054
 800c3b4:	20002f50 	.word	0x20002f50
 800c3b8:	20003058 	.word	0x20003058
 800c3bc:	2000303c 	.word	0x2000303c
 800c3c0:	2000300c 	.word	0x2000300c
 800c3c4:	20003008 	.word	0x20003008
 800c3c8:	20003070 	.word	0x20003070

0800c3cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b085      	sub	sp, #20
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	60f8      	str	r0, [r7, #12]
 800c3d4:	60b9      	str	r1, [r7, #8]
 800c3d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	3b04      	subs	r3, #4
 800c3dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c3e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	3b04      	subs	r3, #4
 800c3ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	f023 0201 	bic.w	r2, r3, #1
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	3b04      	subs	r3, #4
 800c3fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c3fc:	4a0c      	ldr	r2, [pc, #48]	; (800c430 <pxPortInitialiseStack+0x64>)
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	3b14      	subs	r3, #20
 800c406:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c408:	687a      	ldr	r2, [r7, #4]
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	3b04      	subs	r3, #4
 800c412:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	f06f 0202 	mvn.w	r2, #2
 800c41a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	3b20      	subs	r3, #32
 800c420:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c422:	68fb      	ldr	r3, [r7, #12]
}
 800c424:	4618      	mov	r0, r3
 800c426:	3714      	adds	r7, #20
 800c428:	46bd      	mov	sp, r7
 800c42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42e:	4770      	bx	lr
 800c430:	0800c435 	.word	0x0800c435

0800c434 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c434:	b480      	push	{r7}
 800c436:	b085      	sub	sp, #20
 800c438:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c43a:	2300      	movs	r3, #0
 800c43c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c43e:	4b12      	ldr	r3, [pc, #72]	; (800c488 <prvTaskExitError+0x54>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c446:	d00a      	beq.n	800c45e <prvTaskExitError+0x2a>
	__asm volatile
 800c448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c44c:	f383 8811 	msr	BASEPRI, r3
 800c450:	f3bf 8f6f 	isb	sy
 800c454:	f3bf 8f4f 	dsb	sy
 800c458:	60fb      	str	r3, [r7, #12]
}
 800c45a:	bf00      	nop
 800c45c:	e7fe      	b.n	800c45c <prvTaskExitError+0x28>
	__asm volatile
 800c45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c462:	f383 8811 	msr	BASEPRI, r3
 800c466:	f3bf 8f6f 	isb	sy
 800c46a:	f3bf 8f4f 	dsb	sy
 800c46e:	60bb      	str	r3, [r7, #8]
}
 800c470:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c472:	bf00      	nop
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d0fc      	beq.n	800c474 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c47a:	bf00      	nop
 800c47c:	bf00      	nop
 800c47e:	3714      	adds	r7, #20
 800c480:	46bd      	mov	sp, r7
 800c482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c486:	4770      	bx	lr
 800c488:	20000030 	.word	0x20000030
 800c48c:	00000000 	.word	0x00000000

0800c490 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c490:	4b07      	ldr	r3, [pc, #28]	; (800c4b0 <pxCurrentTCBConst2>)
 800c492:	6819      	ldr	r1, [r3, #0]
 800c494:	6808      	ldr	r0, [r1, #0]
 800c496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c49a:	f380 8809 	msr	PSP, r0
 800c49e:	f3bf 8f6f 	isb	sy
 800c4a2:	f04f 0000 	mov.w	r0, #0
 800c4a6:	f380 8811 	msr	BASEPRI, r0
 800c4aa:	4770      	bx	lr
 800c4ac:	f3af 8000 	nop.w

0800c4b0 <pxCurrentTCBConst2>:
 800c4b0:	20002f50 	.word	0x20002f50
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c4b4:	bf00      	nop
 800c4b6:	bf00      	nop

0800c4b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c4b8:	4808      	ldr	r0, [pc, #32]	; (800c4dc <prvPortStartFirstTask+0x24>)
 800c4ba:	6800      	ldr	r0, [r0, #0]
 800c4bc:	6800      	ldr	r0, [r0, #0]
 800c4be:	f380 8808 	msr	MSP, r0
 800c4c2:	f04f 0000 	mov.w	r0, #0
 800c4c6:	f380 8814 	msr	CONTROL, r0
 800c4ca:	b662      	cpsie	i
 800c4cc:	b661      	cpsie	f
 800c4ce:	f3bf 8f4f 	dsb	sy
 800c4d2:	f3bf 8f6f 	isb	sy
 800c4d6:	df00      	svc	0
 800c4d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c4da:	bf00      	nop
 800c4dc:	e000ed08 	.word	0xe000ed08

0800c4e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b086      	sub	sp, #24
 800c4e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c4e6:	4b46      	ldr	r3, [pc, #280]	; (800c600 <xPortStartScheduler+0x120>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	4a46      	ldr	r2, [pc, #280]	; (800c604 <xPortStartScheduler+0x124>)
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	d10a      	bne.n	800c506 <xPortStartScheduler+0x26>
	__asm volatile
 800c4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f4:	f383 8811 	msr	BASEPRI, r3
 800c4f8:	f3bf 8f6f 	isb	sy
 800c4fc:	f3bf 8f4f 	dsb	sy
 800c500:	613b      	str	r3, [r7, #16]
}
 800c502:	bf00      	nop
 800c504:	e7fe      	b.n	800c504 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c506:	4b3e      	ldr	r3, [pc, #248]	; (800c600 <xPortStartScheduler+0x120>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	4a3f      	ldr	r2, [pc, #252]	; (800c608 <xPortStartScheduler+0x128>)
 800c50c:	4293      	cmp	r3, r2
 800c50e:	d10a      	bne.n	800c526 <xPortStartScheduler+0x46>
	__asm volatile
 800c510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c514:	f383 8811 	msr	BASEPRI, r3
 800c518:	f3bf 8f6f 	isb	sy
 800c51c:	f3bf 8f4f 	dsb	sy
 800c520:	60fb      	str	r3, [r7, #12]
}
 800c522:	bf00      	nop
 800c524:	e7fe      	b.n	800c524 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c526:	4b39      	ldr	r3, [pc, #228]	; (800c60c <xPortStartScheduler+0x12c>)
 800c528:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c52a:	697b      	ldr	r3, [r7, #20]
 800c52c:	781b      	ldrb	r3, [r3, #0]
 800c52e:	b2db      	uxtb	r3, r3
 800c530:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c532:	697b      	ldr	r3, [r7, #20]
 800c534:	22ff      	movs	r2, #255	; 0xff
 800c536:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c538:	697b      	ldr	r3, [r7, #20]
 800c53a:	781b      	ldrb	r3, [r3, #0]
 800c53c:	b2db      	uxtb	r3, r3
 800c53e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c540:	78fb      	ldrb	r3, [r7, #3]
 800c542:	b2db      	uxtb	r3, r3
 800c544:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c548:	b2da      	uxtb	r2, r3
 800c54a:	4b31      	ldr	r3, [pc, #196]	; (800c610 <xPortStartScheduler+0x130>)
 800c54c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c54e:	4b31      	ldr	r3, [pc, #196]	; (800c614 <xPortStartScheduler+0x134>)
 800c550:	2207      	movs	r2, #7
 800c552:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c554:	e009      	b.n	800c56a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c556:	4b2f      	ldr	r3, [pc, #188]	; (800c614 <xPortStartScheduler+0x134>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	3b01      	subs	r3, #1
 800c55c:	4a2d      	ldr	r2, [pc, #180]	; (800c614 <xPortStartScheduler+0x134>)
 800c55e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c560:	78fb      	ldrb	r3, [r7, #3]
 800c562:	b2db      	uxtb	r3, r3
 800c564:	005b      	lsls	r3, r3, #1
 800c566:	b2db      	uxtb	r3, r3
 800c568:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c56a:	78fb      	ldrb	r3, [r7, #3]
 800c56c:	b2db      	uxtb	r3, r3
 800c56e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c572:	2b80      	cmp	r3, #128	; 0x80
 800c574:	d0ef      	beq.n	800c556 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c576:	4b27      	ldr	r3, [pc, #156]	; (800c614 <xPortStartScheduler+0x134>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	f1c3 0307 	rsb	r3, r3, #7
 800c57e:	2b04      	cmp	r3, #4
 800c580:	d00a      	beq.n	800c598 <xPortStartScheduler+0xb8>
	__asm volatile
 800c582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c586:	f383 8811 	msr	BASEPRI, r3
 800c58a:	f3bf 8f6f 	isb	sy
 800c58e:	f3bf 8f4f 	dsb	sy
 800c592:	60bb      	str	r3, [r7, #8]
}
 800c594:	bf00      	nop
 800c596:	e7fe      	b.n	800c596 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c598:	4b1e      	ldr	r3, [pc, #120]	; (800c614 <xPortStartScheduler+0x134>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	021b      	lsls	r3, r3, #8
 800c59e:	4a1d      	ldr	r2, [pc, #116]	; (800c614 <xPortStartScheduler+0x134>)
 800c5a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c5a2:	4b1c      	ldr	r3, [pc, #112]	; (800c614 <xPortStartScheduler+0x134>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c5aa:	4a1a      	ldr	r2, [pc, #104]	; (800c614 <xPortStartScheduler+0x134>)
 800c5ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	b2da      	uxtb	r2, r3
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c5b6:	4b18      	ldr	r3, [pc, #96]	; (800c618 <xPortStartScheduler+0x138>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	4a17      	ldr	r2, [pc, #92]	; (800c618 <xPortStartScheduler+0x138>)
 800c5bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c5c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c5c2:	4b15      	ldr	r3, [pc, #84]	; (800c618 <xPortStartScheduler+0x138>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	4a14      	ldr	r2, [pc, #80]	; (800c618 <xPortStartScheduler+0x138>)
 800c5c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c5cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c5ce:	f000 f8dd 	bl	800c78c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c5d2:	4b12      	ldr	r3, [pc, #72]	; (800c61c <xPortStartScheduler+0x13c>)
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c5d8:	f000 f8fc 	bl	800c7d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c5dc:	4b10      	ldr	r3, [pc, #64]	; (800c620 <xPortStartScheduler+0x140>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	4a0f      	ldr	r2, [pc, #60]	; (800c620 <xPortStartScheduler+0x140>)
 800c5e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c5e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c5e8:	f7ff ff66 	bl	800c4b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c5ec:	f7ff fd4c 	bl	800c088 <vTaskSwitchContext>
	prvTaskExitError();
 800c5f0:	f7ff ff20 	bl	800c434 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c5f4:	2300      	movs	r3, #0
}
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	3718      	adds	r7, #24
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}
 800c5fe:	bf00      	nop
 800c600:	e000ed00 	.word	0xe000ed00
 800c604:	410fc271 	.word	0x410fc271
 800c608:	410fc270 	.word	0x410fc270
 800c60c:	e000e400 	.word	0xe000e400
 800c610:	2000307c 	.word	0x2000307c
 800c614:	20003080 	.word	0x20003080
 800c618:	e000ed20 	.word	0xe000ed20
 800c61c:	20000030 	.word	0x20000030
 800c620:	e000ef34 	.word	0xe000ef34

0800c624 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c624:	b480      	push	{r7}
 800c626:	b083      	sub	sp, #12
 800c628:	af00      	add	r7, sp, #0
	__asm volatile
 800c62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c62e:	f383 8811 	msr	BASEPRI, r3
 800c632:	f3bf 8f6f 	isb	sy
 800c636:	f3bf 8f4f 	dsb	sy
 800c63a:	607b      	str	r3, [r7, #4]
}
 800c63c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c63e:	4b0f      	ldr	r3, [pc, #60]	; (800c67c <vPortEnterCritical+0x58>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	3301      	adds	r3, #1
 800c644:	4a0d      	ldr	r2, [pc, #52]	; (800c67c <vPortEnterCritical+0x58>)
 800c646:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c648:	4b0c      	ldr	r3, [pc, #48]	; (800c67c <vPortEnterCritical+0x58>)
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	2b01      	cmp	r3, #1
 800c64e:	d10f      	bne.n	800c670 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c650:	4b0b      	ldr	r3, [pc, #44]	; (800c680 <vPortEnterCritical+0x5c>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	b2db      	uxtb	r3, r3
 800c656:	2b00      	cmp	r3, #0
 800c658:	d00a      	beq.n	800c670 <vPortEnterCritical+0x4c>
	__asm volatile
 800c65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c65e:	f383 8811 	msr	BASEPRI, r3
 800c662:	f3bf 8f6f 	isb	sy
 800c666:	f3bf 8f4f 	dsb	sy
 800c66a:	603b      	str	r3, [r7, #0]
}
 800c66c:	bf00      	nop
 800c66e:	e7fe      	b.n	800c66e <vPortEnterCritical+0x4a>
	}
}
 800c670:	bf00      	nop
 800c672:	370c      	adds	r7, #12
 800c674:	46bd      	mov	sp, r7
 800c676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67a:	4770      	bx	lr
 800c67c:	20000030 	.word	0x20000030
 800c680:	e000ed04 	.word	0xe000ed04

0800c684 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c684:	b480      	push	{r7}
 800c686:	b083      	sub	sp, #12
 800c688:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c68a:	4b12      	ldr	r3, [pc, #72]	; (800c6d4 <vPortExitCritical+0x50>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d10a      	bne.n	800c6a8 <vPortExitCritical+0x24>
	__asm volatile
 800c692:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c696:	f383 8811 	msr	BASEPRI, r3
 800c69a:	f3bf 8f6f 	isb	sy
 800c69e:	f3bf 8f4f 	dsb	sy
 800c6a2:	607b      	str	r3, [r7, #4]
}
 800c6a4:	bf00      	nop
 800c6a6:	e7fe      	b.n	800c6a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c6a8:	4b0a      	ldr	r3, [pc, #40]	; (800c6d4 <vPortExitCritical+0x50>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	3b01      	subs	r3, #1
 800c6ae:	4a09      	ldr	r2, [pc, #36]	; (800c6d4 <vPortExitCritical+0x50>)
 800c6b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c6b2:	4b08      	ldr	r3, [pc, #32]	; (800c6d4 <vPortExitCritical+0x50>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d105      	bne.n	800c6c6 <vPortExitCritical+0x42>
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c6c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c6c6:	bf00      	nop
 800c6c8:	370c      	adds	r7, #12
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d0:	4770      	bx	lr
 800c6d2:	bf00      	nop
 800c6d4:	20000030 	.word	0x20000030
	...

0800c6e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c6e0:	f3ef 8009 	mrs	r0, PSP
 800c6e4:	f3bf 8f6f 	isb	sy
 800c6e8:	4b15      	ldr	r3, [pc, #84]	; (800c740 <pxCurrentTCBConst>)
 800c6ea:	681a      	ldr	r2, [r3, #0]
 800c6ec:	f01e 0f10 	tst.w	lr, #16
 800c6f0:	bf08      	it	eq
 800c6f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c6f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6fa:	6010      	str	r0, [r2, #0]
 800c6fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c700:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c704:	f380 8811 	msr	BASEPRI, r0
 800c708:	f3bf 8f4f 	dsb	sy
 800c70c:	f3bf 8f6f 	isb	sy
 800c710:	f7ff fcba 	bl	800c088 <vTaskSwitchContext>
 800c714:	f04f 0000 	mov.w	r0, #0
 800c718:	f380 8811 	msr	BASEPRI, r0
 800c71c:	bc09      	pop	{r0, r3}
 800c71e:	6819      	ldr	r1, [r3, #0]
 800c720:	6808      	ldr	r0, [r1, #0]
 800c722:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c726:	f01e 0f10 	tst.w	lr, #16
 800c72a:	bf08      	it	eq
 800c72c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c730:	f380 8809 	msr	PSP, r0
 800c734:	f3bf 8f6f 	isb	sy
 800c738:	4770      	bx	lr
 800c73a:	bf00      	nop
 800c73c:	f3af 8000 	nop.w

0800c740 <pxCurrentTCBConst>:
 800c740:	20002f50 	.word	0x20002f50
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c744:	bf00      	nop
 800c746:	bf00      	nop

0800c748 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b082      	sub	sp, #8
 800c74c:	af00      	add	r7, sp, #0
	__asm volatile
 800c74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c752:	f383 8811 	msr	BASEPRI, r3
 800c756:	f3bf 8f6f 	isb	sy
 800c75a:	f3bf 8f4f 	dsb	sy
 800c75e:	607b      	str	r3, [r7, #4]
}
 800c760:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c762:	f7ff fbd9 	bl	800bf18 <xTaskIncrementTick>
 800c766:	4603      	mov	r3, r0
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d003      	beq.n	800c774 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c76c:	4b06      	ldr	r3, [pc, #24]	; (800c788 <SysTick_Handler+0x40>)
 800c76e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c772:	601a      	str	r2, [r3, #0]
 800c774:	2300      	movs	r3, #0
 800c776:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	f383 8811 	msr	BASEPRI, r3
}
 800c77e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c780:	bf00      	nop
 800c782:	3708      	adds	r7, #8
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}
 800c788:	e000ed04 	.word	0xe000ed04

0800c78c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c78c:	b480      	push	{r7}
 800c78e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c790:	4b0b      	ldr	r3, [pc, #44]	; (800c7c0 <vPortSetupTimerInterrupt+0x34>)
 800c792:	2200      	movs	r2, #0
 800c794:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c796:	4b0b      	ldr	r3, [pc, #44]	; (800c7c4 <vPortSetupTimerInterrupt+0x38>)
 800c798:	2200      	movs	r2, #0
 800c79a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c79c:	4b0a      	ldr	r3, [pc, #40]	; (800c7c8 <vPortSetupTimerInterrupt+0x3c>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	4a0a      	ldr	r2, [pc, #40]	; (800c7cc <vPortSetupTimerInterrupt+0x40>)
 800c7a2:	fba2 2303 	umull	r2, r3, r2, r3
 800c7a6:	099b      	lsrs	r3, r3, #6
 800c7a8:	4a09      	ldr	r2, [pc, #36]	; (800c7d0 <vPortSetupTimerInterrupt+0x44>)
 800c7aa:	3b01      	subs	r3, #1
 800c7ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c7ae:	4b04      	ldr	r3, [pc, #16]	; (800c7c0 <vPortSetupTimerInterrupt+0x34>)
 800c7b0:	2207      	movs	r2, #7
 800c7b2:	601a      	str	r2, [r3, #0]
}
 800c7b4:	bf00      	nop
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7bc:	4770      	bx	lr
 800c7be:	bf00      	nop
 800c7c0:	e000e010 	.word	0xe000e010
 800c7c4:	e000e018 	.word	0xe000e018
 800c7c8:	20000024 	.word	0x20000024
 800c7cc:	10624dd3 	.word	0x10624dd3
 800c7d0:	e000e014 	.word	0xe000e014

0800c7d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c7d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c7e4 <vPortEnableVFP+0x10>
 800c7d8:	6801      	ldr	r1, [r0, #0]
 800c7da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c7de:	6001      	str	r1, [r0, #0]
 800c7e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c7e2:	bf00      	nop
 800c7e4:	e000ed88 	.word	0xe000ed88

0800c7e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b08a      	sub	sp, #40	; 0x28
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c7f4:	f7ff fae6 	bl	800bdc4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c7f8:	4b5b      	ldr	r3, [pc, #364]	; (800c968 <pvPortMalloc+0x180>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d101      	bne.n	800c804 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c800:	f000 f920 	bl	800ca44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c804:	4b59      	ldr	r3, [pc, #356]	; (800c96c <pvPortMalloc+0x184>)
 800c806:	681a      	ldr	r2, [r3, #0]
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	4013      	ands	r3, r2
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	f040 8093 	bne.w	800c938 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d01d      	beq.n	800c854 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c818:	2208      	movs	r2, #8
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	4413      	add	r3, r2
 800c81e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f003 0307 	and.w	r3, r3, #7
 800c826:	2b00      	cmp	r3, #0
 800c828:	d014      	beq.n	800c854 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f023 0307 	bic.w	r3, r3, #7
 800c830:	3308      	adds	r3, #8
 800c832:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f003 0307 	and.w	r3, r3, #7
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d00a      	beq.n	800c854 <pvPortMalloc+0x6c>
	__asm volatile
 800c83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c842:	f383 8811 	msr	BASEPRI, r3
 800c846:	f3bf 8f6f 	isb	sy
 800c84a:	f3bf 8f4f 	dsb	sy
 800c84e:	617b      	str	r3, [r7, #20]
}
 800c850:	bf00      	nop
 800c852:	e7fe      	b.n	800c852 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d06e      	beq.n	800c938 <pvPortMalloc+0x150>
 800c85a:	4b45      	ldr	r3, [pc, #276]	; (800c970 <pvPortMalloc+0x188>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	687a      	ldr	r2, [r7, #4]
 800c860:	429a      	cmp	r2, r3
 800c862:	d869      	bhi.n	800c938 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c864:	4b43      	ldr	r3, [pc, #268]	; (800c974 <pvPortMalloc+0x18c>)
 800c866:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c868:	4b42      	ldr	r3, [pc, #264]	; (800c974 <pvPortMalloc+0x18c>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c86e:	e004      	b.n	800c87a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c872:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c87c:	685b      	ldr	r3, [r3, #4]
 800c87e:	687a      	ldr	r2, [r7, #4]
 800c880:	429a      	cmp	r2, r3
 800c882:	d903      	bls.n	800c88c <pvPortMalloc+0xa4>
 800c884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d1f1      	bne.n	800c870 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c88c:	4b36      	ldr	r3, [pc, #216]	; (800c968 <pvPortMalloc+0x180>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c892:	429a      	cmp	r2, r3
 800c894:	d050      	beq.n	800c938 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c896:	6a3b      	ldr	r3, [r7, #32]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	2208      	movs	r2, #8
 800c89c:	4413      	add	r3, r2
 800c89e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a2:	681a      	ldr	r2, [r3, #0]
 800c8a4:	6a3b      	ldr	r3, [r7, #32]
 800c8a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8aa:	685a      	ldr	r2, [r3, #4]
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	1ad2      	subs	r2, r2, r3
 800c8b0:	2308      	movs	r3, #8
 800c8b2:	005b      	lsls	r3, r3, #1
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	d91f      	bls.n	800c8f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c8b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	4413      	add	r3, r2
 800c8be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c8c0:	69bb      	ldr	r3, [r7, #24]
 800c8c2:	f003 0307 	and.w	r3, r3, #7
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d00a      	beq.n	800c8e0 <pvPortMalloc+0xf8>
	__asm volatile
 800c8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ce:	f383 8811 	msr	BASEPRI, r3
 800c8d2:	f3bf 8f6f 	isb	sy
 800c8d6:	f3bf 8f4f 	dsb	sy
 800c8da:	613b      	str	r3, [r7, #16]
}
 800c8dc:	bf00      	nop
 800c8de:	e7fe      	b.n	800c8de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e2:	685a      	ldr	r2, [r3, #4]
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	1ad2      	subs	r2, r2, r3
 800c8e8:	69bb      	ldr	r3, [r7, #24]
 800c8ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ee:	687a      	ldr	r2, [r7, #4]
 800c8f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c8f2:	69b8      	ldr	r0, [r7, #24]
 800c8f4:	f000 f908 	bl	800cb08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c8f8:	4b1d      	ldr	r3, [pc, #116]	; (800c970 <pvPortMalloc+0x188>)
 800c8fa:	681a      	ldr	r2, [r3, #0]
 800c8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8fe:	685b      	ldr	r3, [r3, #4]
 800c900:	1ad3      	subs	r3, r2, r3
 800c902:	4a1b      	ldr	r2, [pc, #108]	; (800c970 <pvPortMalloc+0x188>)
 800c904:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c906:	4b1a      	ldr	r3, [pc, #104]	; (800c970 <pvPortMalloc+0x188>)
 800c908:	681a      	ldr	r2, [r3, #0]
 800c90a:	4b1b      	ldr	r3, [pc, #108]	; (800c978 <pvPortMalloc+0x190>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	429a      	cmp	r2, r3
 800c910:	d203      	bcs.n	800c91a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c912:	4b17      	ldr	r3, [pc, #92]	; (800c970 <pvPortMalloc+0x188>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	4a18      	ldr	r2, [pc, #96]	; (800c978 <pvPortMalloc+0x190>)
 800c918:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c91c:	685a      	ldr	r2, [r3, #4]
 800c91e:	4b13      	ldr	r3, [pc, #76]	; (800c96c <pvPortMalloc+0x184>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	431a      	orrs	r2, r3
 800c924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c926:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c92a:	2200      	movs	r2, #0
 800c92c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c92e:	4b13      	ldr	r3, [pc, #76]	; (800c97c <pvPortMalloc+0x194>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	3301      	adds	r3, #1
 800c934:	4a11      	ldr	r2, [pc, #68]	; (800c97c <pvPortMalloc+0x194>)
 800c936:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c938:	f7ff fa52 	bl	800bde0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c93c:	69fb      	ldr	r3, [r7, #28]
 800c93e:	f003 0307 	and.w	r3, r3, #7
 800c942:	2b00      	cmp	r3, #0
 800c944:	d00a      	beq.n	800c95c <pvPortMalloc+0x174>
	__asm volatile
 800c946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c94a:	f383 8811 	msr	BASEPRI, r3
 800c94e:	f3bf 8f6f 	isb	sy
 800c952:	f3bf 8f4f 	dsb	sy
 800c956:	60fb      	str	r3, [r7, #12]
}
 800c958:	bf00      	nop
 800c95a:	e7fe      	b.n	800c95a <pvPortMalloc+0x172>
	return pvReturn;
 800c95c:	69fb      	ldr	r3, [r7, #28]
}
 800c95e:	4618      	mov	r0, r3
 800c960:	3728      	adds	r7, #40	; 0x28
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}
 800c966:	bf00      	nop
 800c968:	20006c8c 	.word	0x20006c8c
 800c96c:	20006ca0 	.word	0x20006ca0
 800c970:	20006c90 	.word	0x20006c90
 800c974:	20006c84 	.word	0x20006c84
 800c978:	20006c94 	.word	0x20006c94
 800c97c:	20006c98 	.word	0x20006c98

0800c980 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b086      	sub	sp, #24
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d04d      	beq.n	800ca2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c992:	2308      	movs	r3, #8
 800c994:	425b      	negs	r3, r3
 800c996:	697a      	ldr	r2, [r7, #20]
 800c998:	4413      	add	r3, r2
 800c99a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c99c:	697b      	ldr	r3, [r7, #20]
 800c99e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c9a0:	693b      	ldr	r3, [r7, #16]
 800c9a2:	685a      	ldr	r2, [r3, #4]
 800c9a4:	4b24      	ldr	r3, [pc, #144]	; (800ca38 <vPortFree+0xb8>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	4013      	ands	r3, r2
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d10a      	bne.n	800c9c4 <vPortFree+0x44>
	__asm volatile
 800c9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b2:	f383 8811 	msr	BASEPRI, r3
 800c9b6:	f3bf 8f6f 	isb	sy
 800c9ba:	f3bf 8f4f 	dsb	sy
 800c9be:	60fb      	str	r3, [r7, #12]
}
 800c9c0:	bf00      	nop
 800c9c2:	e7fe      	b.n	800c9c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c9c4:	693b      	ldr	r3, [r7, #16]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d00a      	beq.n	800c9e2 <vPortFree+0x62>
	__asm volatile
 800c9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9d0:	f383 8811 	msr	BASEPRI, r3
 800c9d4:	f3bf 8f6f 	isb	sy
 800c9d8:	f3bf 8f4f 	dsb	sy
 800c9dc:	60bb      	str	r3, [r7, #8]
}
 800c9de:	bf00      	nop
 800c9e0:	e7fe      	b.n	800c9e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c9e2:	693b      	ldr	r3, [r7, #16]
 800c9e4:	685a      	ldr	r2, [r3, #4]
 800c9e6:	4b14      	ldr	r3, [pc, #80]	; (800ca38 <vPortFree+0xb8>)
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	4013      	ands	r3, r2
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d01e      	beq.n	800ca2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c9f0:	693b      	ldr	r3, [r7, #16]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d11a      	bne.n	800ca2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c9f8:	693b      	ldr	r3, [r7, #16]
 800c9fa:	685a      	ldr	r2, [r3, #4]
 800c9fc:	4b0e      	ldr	r3, [pc, #56]	; (800ca38 <vPortFree+0xb8>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	43db      	mvns	r3, r3
 800ca02:	401a      	ands	r2, r3
 800ca04:	693b      	ldr	r3, [r7, #16]
 800ca06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ca08:	f7ff f9dc 	bl	800bdc4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ca0c:	693b      	ldr	r3, [r7, #16]
 800ca0e:	685a      	ldr	r2, [r3, #4]
 800ca10:	4b0a      	ldr	r3, [pc, #40]	; (800ca3c <vPortFree+0xbc>)
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	4413      	add	r3, r2
 800ca16:	4a09      	ldr	r2, [pc, #36]	; (800ca3c <vPortFree+0xbc>)
 800ca18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ca1a:	6938      	ldr	r0, [r7, #16]
 800ca1c:	f000 f874 	bl	800cb08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ca20:	4b07      	ldr	r3, [pc, #28]	; (800ca40 <vPortFree+0xc0>)
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	3301      	adds	r3, #1
 800ca26:	4a06      	ldr	r2, [pc, #24]	; (800ca40 <vPortFree+0xc0>)
 800ca28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ca2a:	f7ff f9d9 	bl	800bde0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ca2e:	bf00      	nop
 800ca30:	3718      	adds	r7, #24
 800ca32:	46bd      	mov	sp, r7
 800ca34:	bd80      	pop	{r7, pc}
 800ca36:	bf00      	nop
 800ca38:	20006ca0 	.word	0x20006ca0
 800ca3c:	20006c90 	.word	0x20006c90
 800ca40:	20006c9c 	.word	0x20006c9c

0800ca44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ca44:	b480      	push	{r7}
 800ca46:	b085      	sub	sp, #20
 800ca48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ca4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ca4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ca50:	4b27      	ldr	r3, [pc, #156]	; (800caf0 <prvHeapInit+0xac>)
 800ca52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	f003 0307 	and.w	r3, r3, #7
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d00c      	beq.n	800ca78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	3307      	adds	r3, #7
 800ca62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	f023 0307 	bic.w	r3, r3, #7
 800ca6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ca6c:	68ba      	ldr	r2, [r7, #8]
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	1ad3      	subs	r3, r2, r3
 800ca72:	4a1f      	ldr	r2, [pc, #124]	; (800caf0 <prvHeapInit+0xac>)
 800ca74:	4413      	add	r3, r2
 800ca76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ca7c:	4a1d      	ldr	r2, [pc, #116]	; (800caf4 <prvHeapInit+0xb0>)
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ca82:	4b1c      	ldr	r3, [pc, #112]	; (800caf4 <prvHeapInit+0xb0>)
 800ca84:	2200      	movs	r2, #0
 800ca86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	68ba      	ldr	r2, [r7, #8]
 800ca8c:	4413      	add	r3, r2
 800ca8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ca90:	2208      	movs	r2, #8
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	1a9b      	subs	r3, r3, r2
 800ca96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	f023 0307 	bic.w	r3, r3, #7
 800ca9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	4a15      	ldr	r2, [pc, #84]	; (800caf8 <prvHeapInit+0xb4>)
 800caa4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800caa6:	4b14      	ldr	r3, [pc, #80]	; (800caf8 <prvHeapInit+0xb4>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	2200      	movs	r2, #0
 800caac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800caae:	4b12      	ldr	r3, [pc, #72]	; (800caf8 <prvHeapInit+0xb4>)
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	2200      	movs	r2, #0
 800cab4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	68fa      	ldr	r2, [r7, #12]
 800cabe:	1ad2      	subs	r2, r2, r3
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cac4:	4b0c      	ldr	r3, [pc, #48]	; (800caf8 <prvHeapInit+0xb4>)
 800cac6:	681a      	ldr	r2, [r3, #0]
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	685b      	ldr	r3, [r3, #4]
 800cad0:	4a0a      	ldr	r2, [pc, #40]	; (800cafc <prvHeapInit+0xb8>)
 800cad2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	685b      	ldr	r3, [r3, #4]
 800cad8:	4a09      	ldr	r2, [pc, #36]	; (800cb00 <prvHeapInit+0xbc>)
 800cada:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cadc:	4b09      	ldr	r3, [pc, #36]	; (800cb04 <prvHeapInit+0xc0>)
 800cade:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cae2:	601a      	str	r2, [r3, #0]
}
 800cae4:	bf00      	nop
 800cae6:	3714      	adds	r7, #20
 800cae8:	46bd      	mov	sp, r7
 800caea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caee:	4770      	bx	lr
 800caf0:	20003084 	.word	0x20003084
 800caf4:	20006c84 	.word	0x20006c84
 800caf8:	20006c8c 	.word	0x20006c8c
 800cafc:	20006c94 	.word	0x20006c94
 800cb00:	20006c90 	.word	0x20006c90
 800cb04:	20006ca0 	.word	0x20006ca0

0800cb08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cb08:	b480      	push	{r7}
 800cb0a:	b085      	sub	sp, #20
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cb10:	4b28      	ldr	r3, [pc, #160]	; (800cbb4 <prvInsertBlockIntoFreeList+0xac>)
 800cb12:	60fb      	str	r3, [r7, #12]
 800cb14:	e002      	b.n	800cb1c <prvInsertBlockIntoFreeList+0x14>
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	60fb      	str	r3, [r7, #12]
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	687a      	ldr	r2, [r7, #4]
 800cb22:	429a      	cmp	r2, r3
 800cb24:	d8f7      	bhi.n	800cb16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	685b      	ldr	r3, [r3, #4]
 800cb2e:	68ba      	ldr	r2, [r7, #8]
 800cb30:	4413      	add	r3, r2
 800cb32:	687a      	ldr	r2, [r7, #4]
 800cb34:	429a      	cmp	r2, r3
 800cb36:	d108      	bne.n	800cb4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	685a      	ldr	r2, [r3, #4]
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	685b      	ldr	r3, [r3, #4]
 800cb40:	441a      	add	r2, r3
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	685b      	ldr	r3, [r3, #4]
 800cb52:	68ba      	ldr	r2, [r7, #8]
 800cb54:	441a      	add	r2, r3
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	429a      	cmp	r2, r3
 800cb5c:	d118      	bne.n	800cb90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	681a      	ldr	r2, [r3, #0]
 800cb62:	4b15      	ldr	r3, [pc, #84]	; (800cbb8 <prvInsertBlockIntoFreeList+0xb0>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	429a      	cmp	r2, r3
 800cb68:	d00d      	beq.n	800cb86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	685a      	ldr	r2, [r3, #4]
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	685b      	ldr	r3, [r3, #4]
 800cb74:	441a      	add	r2, r3
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	681a      	ldr	r2, [r3, #0]
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	601a      	str	r2, [r3, #0]
 800cb84:	e008      	b.n	800cb98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cb86:	4b0c      	ldr	r3, [pc, #48]	; (800cbb8 <prvInsertBlockIntoFreeList+0xb0>)
 800cb88:	681a      	ldr	r2, [r3, #0]
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	601a      	str	r2, [r3, #0]
 800cb8e:	e003      	b.n	800cb98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	681a      	ldr	r2, [r3, #0]
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cb98:	68fa      	ldr	r2, [r7, #12]
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	429a      	cmp	r2, r3
 800cb9e:	d002      	beq.n	800cba6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	687a      	ldr	r2, [r7, #4]
 800cba4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cba6:	bf00      	nop
 800cba8:	3714      	adds	r7, #20
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb0:	4770      	bx	lr
 800cbb2:	bf00      	nop
 800cbb4:	20006c84 	.word	0x20006c84
 800cbb8:	20006c8c 	.word	0x20006c8c

0800cbbc <__cxa_pure_virtual>:
 800cbbc:	b508      	push	{r3, lr}
 800cbbe:	f000 f80d 	bl	800cbdc <_ZSt9terminatev>

0800cbc2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800cbc2:	b508      	push	{r3, lr}
 800cbc4:	4780      	blx	r0
 800cbc6:	f001 fe51 	bl	800e86c <abort>
	...

0800cbcc <_ZSt13get_terminatev>:
 800cbcc:	4b02      	ldr	r3, [pc, #8]	; (800cbd8 <_ZSt13get_terminatev+0xc>)
 800cbce:	6818      	ldr	r0, [r3, #0]
 800cbd0:	f3bf 8f5b 	dmb	ish
 800cbd4:	4770      	bx	lr
 800cbd6:	bf00      	nop
 800cbd8:	20000034 	.word	0x20000034

0800cbdc <_ZSt9terminatev>:
 800cbdc:	b508      	push	{r3, lr}
 800cbde:	f7ff fff5 	bl	800cbcc <_ZSt13get_terminatev>
 800cbe2:	f7ff ffee 	bl	800cbc2 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800cbe8 <cos>:
 800cbe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cbea:	ec53 2b10 	vmov	r2, r3, d0
 800cbee:	4826      	ldr	r0, [pc, #152]	; (800cc88 <cos+0xa0>)
 800cbf0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cbf4:	4281      	cmp	r1, r0
 800cbf6:	dc06      	bgt.n	800cc06 <cos+0x1e>
 800cbf8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800cc80 <cos+0x98>
 800cbfc:	b005      	add	sp, #20
 800cbfe:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc02:	f000 bc71 	b.w	800d4e8 <__kernel_cos>
 800cc06:	4821      	ldr	r0, [pc, #132]	; (800cc8c <cos+0xa4>)
 800cc08:	4281      	cmp	r1, r0
 800cc0a:	dd09      	ble.n	800cc20 <cos+0x38>
 800cc0c:	ee10 0a10 	vmov	r0, s0
 800cc10:	4619      	mov	r1, r3
 800cc12:	f7f3 fae9 	bl	80001e8 <__aeabi_dsub>
 800cc16:	ec41 0b10 	vmov	d0, r0, r1
 800cc1a:	b005      	add	sp, #20
 800cc1c:	f85d fb04 	ldr.w	pc, [sp], #4
 800cc20:	4668      	mov	r0, sp
 800cc22:	f000 f919 	bl	800ce58 <__ieee754_rem_pio2>
 800cc26:	f000 0003 	and.w	r0, r0, #3
 800cc2a:	2801      	cmp	r0, #1
 800cc2c:	d00b      	beq.n	800cc46 <cos+0x5e>
 800cc2e:	2802      	cmp	r0, #2
 800cc30:	d016      	beq.n	800cc60 <cos+0x78>
 800cc32:	b9e0      	cbnz	r0, 800cc6e <cos+0x86>
 800cc34:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cc38:	ed9d 0b00 	vldr	d0, [sp]
 800cc3c:	f000 fc54 	bl	800d4e8 <__kernel_cos>
 800cc40:	ec51 0b10 	vmov	r0, r1, d0
 800cc44:	e7e7      	b.n	800cc16 <cos+0x2e>
 800cc46:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cc4a:	ed9d 0b00 	vldr	d0, [sp]
 800cc4e:	f001 f863 	bl	800dd18 <__kernel_sin>
 800cc52:	ec53 2b10 	vmov	r2, r3, d0
 800cc56:	ee10 0a10 	vmov	r0, s0
 800cc5a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800cc5e:	e7da      	b.n	800cc16 <cos+0x2e>
 800cc60:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cc64:	ed9d 0b00 	vldr	d0, [sp]
 800cc68:	f000 fc3e 	bl	800d4e8 <__kernel_cos>
 800cc6c:	e7f1      	b.n	800cc52 <cos+0x6a>
 800cc6e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cc72:	ed9d 0b00 	vldr	d0, [sp]
 800cc76:	2001      	movs	r0, #1
 800cc78:	f001 f84e 	bl	800dd18 <__kernel_sin>
 800cc7c:	e7e0      	b.n	800cc40 <cos+0x58>
 800cc7e:	bf00      	nop
	...
 800cc88:	3fe921fb 	.word	0x3fe921fb
 800cc8c:	7fefffff 	.word	0x7fefffff

0800cc90 <sin>:
 800cc90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cc92:	ec53 2b10 	vmov	r2, r3, d0
 800cc96:	4828      	ldr	r0, [pc, #160]	; (800cd38 <sin+0xa8>)
 800cc98:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cc9c:	4281      	cmp	r1, r0
 800cc9e:	dc07      	bgt.n	800ccb0 <sin+0x20>
 800cca0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800cd30 <sin+0xa0>
 800cca4:	2000      	movs	r0, #0
 800cca6:	b005      	add	sp, #20
 800cca8:	f85d eb04 	ldr.w	lr, [sp], #4
 800ccac:	f001 b834 	b.w	800dd18 <__kernel_sin>
 800ccb0:	4822      	ldr	r0, [pc, #136]	; (800cd3c <sin+0xac>)
 800ccb2:	4281      	cmp	r1, r0
 800ccb4:	dd09      	ble.n	800ccca <sin+0x3a>
 800ccb6:	ee10 0a10 	vmov	r0, s0
 800ccba:	4619      	mov	r1, r3
 800ccbc:	f7f3 fa94 	bl	80001e8 <__aeabi_dsub>
 800ccc0:	ec41 0b10 	vmov	d0, r0, r1
 800ccc4:	b005      	add	sp, #20
 800ccc6:	f85d fb04 	ldr.w	pc, [sp], #4
 800ccca:	4668      	mov	r0, sp
 800cccc:	f000 f8c4 	bl	800ce58 <__ieee754_rem_pio2>
 800ccd0:	f000 0003 	and.w	r0, r0, #3
 800ccd4:	2801      	cmp	r0, #1
 800ccd6:	d00c      	beq.n	800ccf2 <sin+0x62>
 800ccd8:	2802      	cmp	r0, #2
 800ccda:	d011      	beq.n	800cd00 <sin+0x70>
 800ccdc:	b9f0      	cbnz	r0, 800cd1c <sin+0x8c>
 800ccde:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cce2:	ed9d 0b00 	vldr	d0, [sp]
 800cce6:	2001      	movs	r0, #1
 800cce8:	f001 f816 	bl	800dd18 <__kernel_sin>
 800ccec:	ec51 0b10 	vmov	r0, r1, d0
 800ccf0:	e7e6      	b.n	800ccc0 <sin+0x30>
 800ccf2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ccf6:	ed9d 0b00 	vldr	d0, [sp]
 800ccfa:	f000 fbf5 	bl	800d4e8 <__kernel_cos>
 800ccfe:	e7f5      	b.n	800ccec <sin+0x5c>
 800cd00:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cd04:	ed9d 0b00 	vldr	d0, [sp]
 800cd08:	2001      	movs	r0, #1
 800cd0a:	f001 f805 	bl	800dd18 <__kernel_sin>
 800cd0e:	ec53 2b10 	vmov	r2, r3, d0
 800cd12:	ee10 0a10 	vmov	r0, s0
 800cd16:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800cd1a:	e7d1      	b.n	800ccc0 <sin+0x30>
 800cd1c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cd20:	ed9d 0b00 	vldr	d0, [sp]
 800cd24:	f000 fbe0 	bl	800d4e8 <__kernel_cos>
 800cd28:	e7f1      	b.n	800cd0e <sin+0x7e>
 800cd2a:	bf00      	nop
 800cd2c:	f3af 8000 	nop.w
	...
 800cd38:	3fe921fb 	.word	0x3fe921fb
 800cd3c:	7fefffff 	.word	0x7fefffff

0800cd40 <cosf>:
 800cd40:	ee10 3a10 	vmov	r3, s0
 800cd44:	b507      	push	{r0, r1, r2, lr}
 800cd46:	4a1e      	ldr	r2, [pc, #120]	; (800cdc0 <cosf+0x80>)
 800cd48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cd4c:	4293      	cmp	r3, r2
 800cd4e:	dc06      	bgt.n	800cd5e <cosf+0x1e>
 800cd50:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800cdc4 <cosf+0x84>
 800cd54:	b003      	add	sp, #12
 800cd56:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd5a:	f001 b89b 	b.w	800de94 <__kernel_cosf>
 800cd5e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800cd62:	db04      	blt.n	800cd6e <cosf+0x2e>
 800cd64:	ee30 0a40 	vsub.f32	s0, s0, s0
 800cd68:	b003      	add	sp, #12
 800cd6a:	f85d fb04 	ldr.w	pc, [sp], #4
 800cd6e:	4668      	mov	r0, sp
 800cd70:	f000 fa7e 	bl	800d270 <__ieee754_rem_pio2f>
 800cd74:	f000 0003 	and.w	r0, r0, #3
 800cd78:	2801      	cmp	r0, #1
 800cd7a:	d009      	beq.n	800cd90 <cosf+0x50>
 800cd7c:	2802      	cmp	r0, #2
 800cd7e:	d010      	beq.n	800cda2 <cosf+0x62>
 800cd80:	b9b0      	cbnz	r0, 800cdb0 <cosf+0x70>
 800cd82:	eddd 0a01 	vldr	s1, [sp, #4]
 800cd86:	ed9d 0a00 	vldr	s0, [sp]
 800cd8a:	f001 f883 	bl	800de94 <__kernel_cosf>
 800cd8e:	e7eb      	b.n	800cd68 <cosf+0x28>
 800cd90:	eddd 0a01 	vldr	s1, [sp, #4]
 800cd94:	ed9d 0a00 	vldr	s0, [sp]
 800cd98:	f001 fb52 	bl	800e440 <__kernel_sinf>
 800cd9c:	eeb1 0a40 	vneg.f32	s0, s0
 800cda0:	e7e2      	b.n	800cd68 <cosf+0x28>
 800cda2:	eddd 0a01 	vldr	s1, [sp, #4]
 800cda6:	ed9d 0a00 	vldr	s0, [sp]
 800cdaa:	f001 f873 	bl	800de94 <__kernel_cosf>
 800cdae:	e7f5      	b.n	800cd9c <cosf+0x5c>
 800cdb0:	eddd 0a01 	vldr	s1, [sp, #4]
 800cdb4:	ed9d 0a00 	vldr	s0, [sp]
 800cdb8:	2001      	movs	r0, #1
 800cdba:	f001 fb41 	bl	800e440 <__kernel_sinf>
 800cdbe:	e7d3      	b.n	800cd68 <cosf+0x28>
 800cdc0:	3f490fd8 	.word	0x3f490fd8
 800cdc4:	00000000 	.word	0x00000000

0800cdc8 <sinf>:
 800cdc8:	ee10 3a10 	vmov	r3, s0
 800cdcc:	b507      	push	{r0, r1, r2, lr}
 800cdce:	4a1f      	ldr	r2, [pc, #124]	; (800ce4c <sinf+0x84>)
 800cdd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cdd4:	4293      	cmp	r3, r2
 800cdd6:	dc07      	bgt.n	800cde8 <sinf+0x20>
 800cdd8:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800ce50 <sinf+0x88>
 800cddc:	2000      	movs	r0, #0
 800cdde:	b003      	add	sp, #12
 800cde0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cde4:	f001 bb2c 	b.w	800e440 <__kernel_sinf>
 800cde8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800cdec:	db04      	blt.n	800cdf8 <sinf+0x30>
 800cdee:	ee30 0a40 	vsub.f32	s0, s0, s0
 800cdf2:	b003      	add	sp, #12
 800cdf4:	f85d fb04 	ldr.w	pc, [sp], #4
 800cdf8:	4668      	mov	r0, sp
 800cdfa:	f000 fa39 	bl	800d270 <__ieee754_rem_pio2f>
 800cdfe:	f000 0003 	and.w	r0, r0, #3
 800ce02:	2801      	cmp	r0, #1
 800ce04:	d00a      	beq.n	800ce1c <sinf+0x54>
 800ce06:	2802      	cmp	r0, #2
 800ce08:	d00f      	beq.n	800ce2a <sinf+0x62>
 800ce0a:	b9c0      	cbnz	r0, 800ce3e <sinf+0x76>
 800ce0c:	eddd 0a01 	vldr	s1, [sp, #4]
 800ce10:	ed9d 0a00 	vldr	s0, [sp]
 800ce14:	2001      	movs	r0, #1
 800ce16:	f001 fb13 	bl	800e440 <__kernel_sinf>
 800ce1a:	e7ea      	b.n	800cdf2 <sinf+0x2a>
 800ce1c:	eddd 0a01 	vldr	s1, [sp, #4]
 800ce20:	ed9d 0a00 	vldr	s0, [sp]
 800ce24:	f001 f836 	bl	800de94 <__kernel_cosf>
 800ce28:	e7e3      	b.n	800cdf2 <sinf+0x2a>
 800ce2a:	eddd 0a01 	vldr	s1, [sp, #4]
 800ce2e:	ed9d 0a00 	vldr	s0, [sp]
 800ce32:	2001      	movs	r0, #1
 800ce34:	f001 fb04 	bl	800e440 <__kernel_sinf>
 800ce38:	eeb1 0a40 	vneg.f32	s0, s0
 800ce3c:	e7d9      	b.n	800cdf2 <sinf+0x2a>
 800ce3e:	eddd 0a01 	vldr	s1, [sp, #4]
 800ce42:	ed9d 0a00 	vldr	s0, [sp]
 800ce46:	f001 f825 	bl	800de94 <__kernel_cosf>
 800ce4a:	e7f5      	b.n	800ce38 <sinf+0x70>
 800ce4c:	3f490fd8 	.word	0x3f490fd8
	...

0800ce58 <__ieee754_rem_pio2>:
 800ce58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce5c:	ed2d 8b02 	vpush	{d8}
 800ce60:	ec55 4b10 	vmov	r4, r5, d0
 800ce64:	4bca      	ldr	r3, [pc, #808]	; (800d190 <__ieee754_rem_pio2+0x338>)
 800ce66:	b08b      	sub	sp, #44	; 0x2c
 800ce68:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ce6c:	4598      	cmp	r8, r3
 800ce6e:	4682      	mov	sl, r0
 800ce70:	9502      	str	r5, [sp, #8]
 800ce72:	dc08      	bgt.n	800ce86 <__ieee754_rem_pio2+0x2e>
 800ce74:	2200      	movs	r2, #0
 800ce76:	2300      	movs	r3, #0
 800ce78:	ed80 0b00 	vstr	d0, [r0]
 800ce7c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ce80:	f04f 0b00 	mov.w	fp, #0
 800ce84:	e028      	b.n	800ced8 <__ieee754_rem_pio2+0x80>
 800ce86:	4bc3      	ldr	r3, [pc, #780]	; (800d194 <__ieee754_rem_pio2+0x33c>)
 800ce88:	4598      	cmp	r8, r3
 800ce8a:	dc78      	bgt.n	800cf7e <__ieee754_rem_pio2+0x126>
 800ce8c:	9b02      	ldr	r3, [sp, #8]
 800ce8e:	4ec2      	ldr	r6, [pc, #776]	; (800d198 <__ieee754_rem_pio2+0x340>)
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	ee10 0a10 	vmov	r0, s0
 800ce96:	a3b0      	add	r3, pc, #704	; (adr r3, 800d158 <__ieee754_rem_pio2+0x300>)
 800ce98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce9c:	4629      	mov	r1, r5
 800ce9e:	dd39      	ble.n	800cf14 <__ieee754_rem_pio2+0xbc>
 800cea0:	f7f3 f9a2 	bl	80001e8 <__aeabi_dsub>
 800cea4:	45b0      	cmp	r8, r6
 800cea6:	4604      	mov	r4, r0
 800cea8:	460d      	mov	r5, r1
 800ceaa:	d01b      	beq.n	800cee4 <__ieee754_rem_pio2+0x8c>
 800ceac:	a3ac      	add	r3, pc, #688	; (adr r3, 800d160 <__ieee754_rem_pio2+0x308>)
 800ceae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceb2:	f7f3 f999 	bl	80001e8 <__aeabi_dsub>
 800ceb6:	4602      	mov	r2, r0
 800ceb8:	460b      	mov	r3, r1
 800ceba:	e9ca 2300 	strd	r2, r3, [sl]
 800cebe:	4620      	mov	r0, r4
 800cec0:	4629      	mov	r1, r5
 800cec2:	f7f3 f991 	bl	80001e8 <__aeabi_dsub>
 800cec6:	a3a6      	add	r3, pc, #664	; (adr r3, 800d160 <__ieee754_rem_pio2+0x308>)
 800cec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cecc:	f7f3 f98c 	bl	80001e8 <__aeabi_dsub>
 800ced0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ced4:	f04f 0b01 	mov.w	fp, #1
 800ced8:	4658      	mov	r0, fp
 800ceda:	b00b      	add	sp, #44	; 0x2c
 800cedc:	ecbd 8b02 	vpop	{d8}
 800cee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cee4:	a3a0      	add	r3, pc, #640	; (adr r3, 800d168 <__ieee754_rem_pio2+0x310>)
 800cee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceea:	f7f3 f97d 	bl	80001e8 <__aeabi_dsub>
 800ceee:	a3a0      	add	r3, pc, #640	; (adr r3, 800d170 <__ieee754_rem_pio2+0x318>)
 800cef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cef4:	4604      	mov	r4, r0
 800cef6:	460d      	mov	r5, r1
 800cef8:	f7f3 f976 	bl	80001e8 <__aeabi_dsub>
 800cefc:	4602      	mov	r2, r0
 800cefe:	460b      	mov	r3, r1
 800cf00:	e9ca 2300 	strd	r2, r3, [sl]
 800cf04:	4620      	mov	r0, r4
 800cf06:	4629      	mov	r1, r5
 800cf08:	f7f3 f96e 	bl	80001e8 <__aeabi_dsub>
 800cf0c:	a398      	add	r3, pc, #608	; (adr r3, 800d170 <__ieee754_rem_pio2+0x318>)
 800cf0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf12:	e7db      	b.n	800cecc <__ieee754_rem_pio2+0x74>
 800cf14:	f7f3 f96a 	bl	80001ec <__adddf3>
 800cf18:	45b0      	cmp	r8, r6
 800cf1a:	4604      	mov	r4, r0
 800cf1c:	460d      	mov	r5, r1
 800cf1e:	d016      	beq.n	800cf4e <__ieee754_rem_pio2+0xf6>
 800cf20:	a38f      	add	r3, pc, #572	; (adr r3, 800d160 <__ieee754_rem_pio2+0x308>)
 800cf22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf26:	f7f3 f961 	bl	80001ec <__adddf3>
 800cf2a:	4602      	mov	r2, r0
 800cf2c:	460b      	mov	r3, r1
 800cf2e:	e9ca 2300 	strd	r2, r3, [sl]
 800cf32:	4620      	mov	r0, r4
 800cf34:	4629      	mov	r1, r5
 800cf36:	f7f3 f957 	bl	80001e8 <__aeabi_dsub>
 800cf3a:	a389      	add	r3, pc, #548	; (adr r3, 800d160 <__ieee754_rem_pio2+0x308>)
 800cf3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf40:	f7f3 f954 	bl	80001ec <__adddf3>
 800cf44:	f04f 3bff 	mov.w	fp, #4294967295
 800cf48:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cf4c:	e7c4      	b.n	800ced8 <__ieee754_rem_pio2+0x80>
 800cf4e:	a386      	add	r3, pc, #536	; (adr r3, 800d168 <__ieee754_rem_pio2+0x310>)
 800cf50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf54:	f7f3 f94a 	bl	80001ec <__adddf3>
 800cf58:	a385      	add	r3, pc, #532	; (adr r3, 800d170 <__ieee754_rem_pio2+0x318>)
 800cf5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf5e:	4604      	mov	r4, r0
 800cf60:	460d      	mov	r5, r1
 800cf62:	f7f3 f943 	bl	80001ec <__adddf3>
 800cf66:	4602      	mov	r2, r0
 800cf68:	460b      	mov	r3, r1
 800cf6a:	e9ca 2300 	strd	r2, r3, [sl]
 800cf6e:	4620      	mov	r0, r4
 800cf70:	4629      	mov	r1, r5
 800cf72:	f7f3 f939 	bl	80001e8 <__aeabi_dsub>
 800cf76:	a37e      	add	r3, pc, #504	; (adr r3, 800d170 <__ieee754_rem_pio2+0x318>)
 800cf78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf7c:	e7e0      	b.n	800cf40 <__ieee754_rem_pio2+0xe8>
 800cf7e:	4b87      	ldr	r3, [pc, #540]	; (800d19c <__ieee754_rem_pio2+0x344>)
 800cf80:	4598      	cmp	r8, r3
 800cf82:	f300 80d9 	bgt.w	800d138 <__ieee754_rem_pio2+0x2e0>
 800cf86:	f001 faa3 	bl	800e4d0 <fabs>
 800cf8a:	ec55 4b10 	vmov	r4, r5, d0
 800cf8e:	ee10 0a10 	vmov	r0, s0
 800cf92:	a379      	add	r3, pc, #484	; (adr r3, 800d178 <__ieee754_rem_pio2+0x320>)
 800cf94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf98:	4629      	mov	r1, r5
 800cf9a:	f7f3 fadd 	bl	8000558 <__aeabi_dmul>
 800cf9e:	4b80      	ldr	r3, [pc, #512]	; (800d1a0 <__ieee754_rem_pio2+0x348>)
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	f7f3 f923 	bl	80001ec <__adddf3>
 800cfa6:	f7f3 fd71 	bl	8000a8c <__aeabi_d2iz>
 800cfaa:	4683      	mov	fp, r0
 800cfac:	f7f3 fa6a 	bl	8000484 <__aeabi_i2d>
 800cfb0:	4602      	mov	r2, r0
 800cfb2:	460b      	mov	r3, r1
 800cfb4:	ec43 2b18 	vmov	d8, r2, r3
 800cfb8:	a367      	add	r3, pc, #412	; (adr r3, 800d158 <__ieee754_rem_pio2+0x300>)
 800cfba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfbe:	f7f3 facb 	bl	8000558 <__aeabi_dmul>
 800cfc2:	4602      	mov	r2, r0
 800cfc4:	460b      	mov	r3, r1
 800cfc6:	4620      	mov	r0, r4
 800cfc8:	4629      	mov	r1, r5
 800cfca:	f7f3 f90d 	bl	80001e8 <__aeabi_dsub>
 800cfce:	a364      	add	r3, pc, #400	; (adr r3, 800d160 <__ieee754_rem_pio2+0x308>)
 800cfd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfd4:	4606      	mov	r6, r0
 800cfd6:	460f      	mov	r7, r1
 800cfd8:	ec51 0b18 	vmov	r0, r1, d8
 800cfdc:	f7f3 fabc 	bl	8000558 <__aeabi_dmul>
 800cfe0:	f1bb 0f1f 	cmp.w	fp, #31
 800cfe4:	4604      	mov	r4, r0
 800cfe6:	460d      	mov	r5, r1
 800cfe8:	dc0d      	bgt.n	800d006 <__ieee754_rem_pio2+0x1ae>
 800cfea:	4b6e      	ldr	r3, [pc, #440]	; (800d1a4 <__ieee754_rem_pio2+0x34c>)
 800cfec:	f10b 32ff 	add.w	r2, fp, #4294967295
 800cff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cff4:	4543      	cmp	r3, r8
 800cff6:	d006      	beq.n	800d006 <__ieee754_rem_pio2+0x1ae>
 800cff8:	4622      	mov	r2, r4
 800cffa:	462b      	mov	r3, r5
 800cffc:	4630      	mov	r0, r6
 800cffe:	4639      	mov	r1, r7
 800d000:	f7f3 f8f2 	bl	80001e8 <__aeabi_dsub>
 800d004:	e00f      	b.n	800d026 <__ieee754_rem_pio2+0x1ce>
 800d006:	462b      	mov	r3, r5
 800d008:	4622      	mov	r2, r4
 800d00a:	4630      	mov	r0, r6
 800d00c:	4639      	mov	r1, r7
 800d00e:	f7f3 f8eb 	bl	80001e8 <__aeabi_dsub>
 800d012:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d016:	9303      	str	r3, [sp, #12]
 800d018:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d01c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800d020:	f1b8 0f10 	cmp.w	r8, #16
 800d024:	dc02      	bgt.n	800d02c <__ieee754_rem_pio2+0x1d4>
 800d026:	e9ca 0100 	strd	r0, r1, [sl]
 800d02a:	e039      	b.n	800d0a0 <__ieee754_rem_pio2+0x248>
 800d02c:	a34e      	add	r3, pc, #312	; (adr r3, 800d168 <__ieee754_rem_pio2+0x310>)
 800d02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d032:	ec51 0b18 	vmov	r0, r1, d8
 800d036:	f7f3 fa8f 	bl	8000558 <__aeabi_dmul>
 800d03a:	4604      	mov	r4, r0
 800d03c:	460d      	mov	r5, r1
 800d03e:	4602      	mov	r2, r0
 800d040:	460b      	mov	r3, r1
 800d042:	4630      	mov	r0, r6
 800d044:	4639      	mov	r1, r7
 800d046:	f7f3 f8cf 	bl	80001e8 <__aeabi_dsub>
 800d04a:	4602      	mov	r2, r0
 800d04c:	460b      	mov	r3, r1
 800d04e:	4680      	mov	r8, r0
 800d050:	4689      	mov	r9, r1
 800d052:	4630      	mov	r0, r6
 800d054:	4639      	mov	r1, r7
 800d056:	f7f3 f8c7 	bl	80001e8 <__aeabi_dsub>
 800d05a:	4622      	mov	r2, r4
 800d05c:	462b      	mov	r3, r5
 800d05e:	f7f3 f8c3 	bl	80001e8 <__aeabi_dsub>
 800d062:	a343      	add	r3, pc, #268	; (adr r3, 800d170 <__ieee754_rem_pio2+0x318>)
 800d064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d068:	4604      	mov	r4, r0
 800d06a:	460d      	mov	r5, r1
 800d06c:	ec51 0b18 	vmov	r0, r1, d8
 800d070:	f7f3 fa72 	bl	8000558 <__aeabi_dmul>
 800d074:	4622      	mov	r2, r4
 800d076:	462b      	mov	r3, r5
 800d078:	f7f3 f8b6 	bl	80001e8 <__aeabi_dsub>
 800d07c:	4602      	mov	r2, r0
 800d07e:	460b      	mov	r3, r1
 800d080:	4604      	mov	r4, r0
 800d082:	460d      	mov	r5, r1
 800d084:	4640      	mov	r0, r8
 800d086:	4649      	mov	r1, r9
 800d088:	f7f3 f8ae 	bl	80001e8 <__aeabi_dsub>
 800d08c:	9a03      	ldr	r2, [sp, #12]
 800d08e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d092:	1ad3      	subs	r3, r2, r3
 800d094:	2b31      	cmp	r3, #49	; 0x31
 800d096:	dc24      	bgt.n	800d0e2 <__ieee754_rem_pio2+0x28a>
 800d098:	e9ca 0100 	strd	r0, r1, [sl]
 800d09c:	4646      	mov	r6, r8
 800d09e:	464f      	mov	r7, r9
 800d0a0:	e9da 8900 	ldrd	r8, r9, [sl]
 800d0a4:	4630      	mov	r0, r6
 800d0a6:	4642      	mov	r2, r8
 800d0a8:	464b      	mov	r3, r9
 800d0aa:	4639      	mov	r1, r7
 800d0ac:	f7f3 f89c 	bl	80001e8 <__aeabi_dsub>
 800d0b0:	462b      	mov	r3, r5
 800d0b2:	4622      	mov	r2, r4
 800d0b4:	f7f3 f898 	bl	80001e8 <__aeabi_dsub>
 800d0b8:	9b02      	ldr	r3, [sp, #8]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d0c0:	f6bf af0a 	bge.w	800ced8 <__ieee754_rem_pio2+0x80>
 800d0c4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d0c8:	f8ca 3004 	str.w	r3, [sl, #4]
 800d0cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d0d0:	f8ca 8000 	str.w	r8, [sl]
 800d0d4:	f8ca 0008 	str.w	r0, [sl, #8]
 800d0d8:	f8ca 300c 	str.w	r3, [sl, #12]
 800d0dc:	f1cb 0b00 	rsb	fp, fp, #0
 800d0e0:	e6fa      	b.n	800ced8 <__ieee754_rem_pio2+0x80>
 800d0e2:	a327      	add	r3, pc, #156	; (adr r3, 800d180 <__ieee754_rem_pio2+0x328>)
 800d0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0e8:	ec51 0b18 	vmov	r0, r1, d8
 800d0ec:	f7f3 fa34 	bl	8000558 <__aeabi_dmul>
 800d0f0:	4604      	mov	r4, r0
 800d0f2:	460d      	mov	r5, r1
 800d0f4:	4602      	mov	r2, r0
 800d0f6:	460b      	mov	r3, r1
 800d0f8:	4640      	mov	r0, r8
 800d0fa:	4649      	mov	r1, r9
 800d0fc:	f7f3 f874 	bl	80001e8 <__aeabi_dsub>
 800d100:	4602      	mov	r2, r0
 800d102:	460b      	mov	r3, r1
 800d104:	4606      	mov	r6, r0
 800d106:	460f      	mov	r7, r1
 800d108:	4640      	mov	r0, r8
 800d10a:	4649      	mov	r1, r9
 800d10c:	f7f3 f86c 	bl	80001e8 <__aeabi_dsub>
 800d110:	4622      	mov	r2, r4
 800d112:	462b      	mov	r3, r5
 800d114:	f7f3 f868 	bl	80001e8 <__aeabi_dsub>
 800d118:	a31b      	add	r3, pc, #108	; (adr r3, 800d188 <__ieee754_rem_pio2+0x330>)
 800d11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d11e:	4604      	mov	r4, r0
 800d120:	460d      	mov	r5, r1
 800d122:	ec51 0b18 	vmov	r0, r1, d8
 800d126:	f7f3 fa17 	bl	8000558 <__aeabi_dmul>
 800d12a:	4622      	mov	r2, r4
 800d12c:	462b      	mov	r3, r5
 800d12e:	f7f3 f85b 	bl	80001e8 <__aeabi_dsub>
 800d132:	4604      	mov	r4, r0
 800d134:	460d      	mov	r5, r1
 800d136:	e75f      	b.n	800cff8 <__ieee754_rem_pio2+0x1a0>
 800d138:	4b1b      	ldr	r3, [pc, #108]	; (800d1a8 <__ieee754_rem_pio2+0x350>)
 800d13a:	4598      	cmp	r8, r3
 800d13c:	dd36      	ble.n	800d1ac <__ieee754_rem_pio2+0x354>
 800d13e:	ee10 2a10 	vmov	r2, s0
 800d142:	462b      	mov	r3, r5
 800d144:	4620      	mov	r0, r4
 800d146:	4629      	mov	r1, r5
 800d148:	f7f3 f84e 	bl	80001e8 <__aeabi_dsub>
 800d14c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d150:	e9ca 0100 	strd	r0, r1, [sl]
 800d154:	e694      	b.n	800ce80 <__ieee754_rem_pio2+0x28>
 800d156:	bf00      	nop
 800d158:	54400000 	.word	0x54400000
 800d15c:	3ff921fb 	.word	0x3ff921fb
 800d160:	1a626331 	.word	0x1a626331
 800d164:	3dd0b461 	.word	0x3dd0b461
 800d168:	1a600000 	.word	0x1a600000
 800d16c:	3dd0b461 	.word	0x3dd0b461
 800d170:	2e037073 	.word	0x2e037073
 800d174:	3ba3198a 	.word	0x3ba3198a
 800d178:	6dc9c883 	.word	0x6dc9c883
 800d17c:	3fe45f30 	.word	0x3fe45f30
 800d180:	2e000000 	.word	0x2e000000
 800d184:	3ba3198a 	.word	0x3ba3198a
 800d188:	252049c1 	.word	0x252049c1
 800d18c:	397b839a 	.word	0x397b839a
 800d190:	3fe921fb 	.word	0x3fe921fb
 800d194:	4002d97b 	.word	0x4002d97b
 800d198:	3ff921fb 	.word	0x3ff921fb
 800d19c:	413921fb 	.word	0x413921fb
 800d1a0:	3fe00000 	.word	0x3fe00000
 800d1a4:	0800f3f8 	.word	0x0800f3f8
 800d1a8:	7fefffff 	.word	0x7fefffff
 800d1ac:	ea4f 5428 	mov.w	r4, r8, asr #20
 800d1b0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800d1b4:	ee10 0a10 	vmov	r0, s0
 800d1b8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800d1bc:	ee10 6a10 	vmov	r6, s0
 800d1c0:	460f      	mov	r7, r1
 800d1c2:	f7f3 fc63 	bl	8000a8c <__aeabi_d2iz>
 800d1c6:	f7f3 f95d 	bl	8000484 <__aeabi_i2d>
 800d1ca:	4602      	mov	r2, r0
 800d1cc:	460b      	mov	r3, r1
 800d1ce:	4630      	mov	r0, r6
 800d1d0:	4639      	mov	r1, r7
 800d1d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d1d6:	f7f3 f807 	bl	80001e8 <__aeabi_dsub>
 800d1da:	4b23      	ldr	r3, [pc, #140]	; (800d268 <__ieee754_rem_pio2+0x410>)
 800d1dc:	2200      	movs	r2, #0
 800d1de:	f7f3 f9bb 	bl	8000558 <__aeabi_dmul>
 800d1e2:	460f      	mov	r7, r1
 800d1e4:	4606      	mov	r6, r0
 800d1e6:	f7f3 fc51 	bl	8000a8c <__aeabi_d2iz>
 800d1ea:	f7f3 f94b 	bl	8000484 <__aeabi_i2d>
 800d1ee:	4602      	mov	r2, r0
 800d1f0:	460b      	mov	r3, r1
 800d1f2:	4630      	mov	r0, r6
 800d1f4:	4639      	mov	r1, r7
 800d1f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d1fa:	f7f2 fff5 	bl	80001e8 <__aeabi_dsub>
 800d1fe:	4b1a      	ldr	r3, [pc, #104]	; (800d268 <__ieee754_rem_pio2+0x410>)
 800d200:	2200      	movs	r2, #0
 800d202:	f7f3 f9a9 	bl	8000558 <__aeabi_dmul>
 800d206:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d20a:	ad04      	add	r5, sp, #16
 800d20c:	f04f 0803 	mov.w	r8, #3
 800d210:	46a9      	mov	r9, r5
 800d212:	2600      	movs	r6, #0
 800d214:	2700      	movs	r7, #0
 800d216:	4632      	mov	r2, r6
 800d218:	463b      	mov	r3, r7
 800d21a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800d21e:	46c3      	mov	fp, r8
 800d220:	3d08      	subs	r5, #8
 800d222:	f108 38ff 	add.w	r8, r8, #4294967295
 800d226:	f7f3 fbff 	bl	8000a28 <__aeabi_dcmpeq>
 800d22a:	2800      	cmp	r0, #0
 800d22c:	d1f3      	bne.n	800d216 <__ieee754_rem_pio2+0x3be>
 800d22e:	4b0f      	ldr	r3, [pc, #60]	; (800d26c <__ieee754_rem_pio2+0x414>)
 800d230:	9301      	str	r3, [sp, #4]
 800d232:	2302      	movs	r3, #2
 800d234:	9300      	str	r3, [sp, #0]
 800d236:	4622      	mov	r2, r4
 800d238:	465b      	mov	r3, fp
 800d23a:	4651      	mov	r1, sl
 800d23c:	4648      	mov	r0, r9
 800d23e:	f000 fa1b 	bl	800d678 <__kernel_rem_pio2>
 800d242:	9b02      	ldr	r3, [sp, #8]
 800d244:	2b00      	cmp	r3, #0
 800d246:	4683      	mov	fp, r0
 800d248:	f6bf ae46 	bge.w	800ced8 <__ieee754_rem_pio2+0x80>
 800d24c:	e9da 2100 	ldrd	r2, r1, [sl]
 800d250:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d254:	e9ca 2300 	strd	r2, r3, [sl]
 800d258:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800d25c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d260:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800d264:	e73a      	b.n	800d0dc <__ieee754_rem_pio2+0x284>
 800d266:	bf00      	nop
 800d268:	41700000 	.word	0x41700000
 800d26c:	0800f478 	.word	0x0800f478

0800d270 <__ieee754_rem_pio2f>:
 800d270:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d272:	ee10 6a10 	vmov	r6, s0
 800d276:	4b8e      	ldr	r3, [pc, #568]	; (800d4b0 <__ieee754_rem_pio2f+0x240>)
 800d278:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800d27c:	429d      	cmp	r5, r3
 800d27e:	b087      	sub	sp, #28
 800d280:	eef0 7a40 	vmov.f32	s15, s0
 800d284:	4604      	mov	r4, r0
 800d286:	dc05      	bgt.n	800d294 <__ieee754_rem_pio2f+0x24>
 800d288:	2300      	movs	r3, #0
 800d28a:	ed80 0a00 	vstr	s0, [r0]
 800d28e:	6043      	str	r3, [r0, #4]
 800d290:	2000      	movs	r0, #0
 800d292:	e01a      	b.n	800d2ca <__ieee754_rem_pio2f+0x5a>
 800d294:	4b87      	ldr	r3, [pc, #540]	; (800d4b4 <__ieee754_rem_pio2f+0x244>)
 800d296:	429d      	cmp	r5, r3
 800d298:	dc46      	bgt.n	800d328 <__ieee754_rem_pio2f+0xb8>
 800d29a:	2e00      	cmp	r6, #0
 800d29c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800d4b8 <__ieee754_rem_pio2f+0x248>
 800d2a0:	4b86      	ldr	r3, [pc, #536]	; (800d4bc <__ieee754_rem_pio2f+0x24c>)
 800d2a2:	f025 050f 	bic.w	r5, r5, #15
 800d2a6:	dd1f      	ble.n	800d2e8 <__ieee754_rem_pio2f+0x78>
 800d2a8:	429d      	cmp	r5, r3
 800d2aa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800d2ae:	d00e      	beq.n	800d2ce <__ieee754_rem_pio2f+0x5e>
 800d2b0:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800d4c0 <__ieee754_rem_pio2f+0x250>
 800d2b4:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800d2b8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800d2bc:	ed80 0a00 	vstr	s0, [r0]
 800d2c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d2c4:	2001      	movs	r0, #1
 800d2c6:	edc4 7a01 	vstr	s15, [r4, #4]
 800d2ca:	b007      	add	sp, #28
 800d2cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2ce:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800d4c4 <__ieee754_rem_pio2f+0x254>
 800d2d2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800d4c8 <__ieee754_rem_pio2f+0x258>
 800d2d6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800d2da:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800d2de:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d2e2:	edc0 6a00 	vstr	s13, [r0]
 800d2e6:	e7eb      	b.n	800d2c0 <__ieee754_rem_pio2f+0x50>
 800d2e8:	429d      	cmp	r5, r3
 800d2ea:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d2ee:	d00e      	beq.n	800d30e <__ieee754_rem_pio2f+0x9e>
 800d2f0:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800d4c0 <__ieee754_rem_pio2f+0x250>
 800d2f4:	ee37 0a87 	vadd.f32	s0, s15, s14
 800d2f8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800d2fc:	ed80 0a00 	vstr	s0, [r0]
 800d300:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d304:	f04f 30ff 	mov.w	r0, #4294967295
 800d308:	edc4 7a01 	vstr	s15, [r4, #4]
 800d30c:	e7dd      	b.n	800d2ca <__ieee754_rem_pio2f+0x5a>
 800d30e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800d4c4 <__ieee754_rem_pio2f+0x254>
 800d312:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800d4c8 <__ieee754_rem_pio2f+0x258>
 800d316:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d31a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d31e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d322:	edc0 6a00 	vstr	s13, [r0]
 800d326:	e7eb      	b.n	800d300 <__ieee754_rem_pio2f+0x90>
 800d328:	4b68      	ldr	r3, [pc, #416]	; (800d4cc <__ieee754_rem_pio2f+0x25c>)
 800d32a:	429d      	cmp	r5, r3
 800d32c:	dc72      	bgt.n	800d414 <__ieee754_rem_pio2f+0x1a4>
 800d32e:	f001 f9e1 	bl	800e6f4 <fabsf>
 800d332:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800d4d0 <__ieee754_rem_pio2f+0x260>
 800d336:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d33a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d33e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d342:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d346:	ee17 0a90 	vmov	r0, s15
 800d34a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800d4b8 <__ieee754_rem_pio2f+0x248>
 800d34e:	eea7 0a67 	vfms.f32	s0, s14, s15
 800d352:	281f      	cmp	r0, #31
 800d354:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800d4c0 <__ieee754_rem_pio2f+0x250>
 800d358:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d35c:	eeb1 6a47 	vneg.f32	s12, s14
 800d360:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d364:	ee16 2a90 	vmov	r2, s13
 800d368:	dc1c      	bgt.n	800d3a4 <__ieee754_rem_pio2f+0x134>
 800d36a:	495a      	ldr	r1, [pc, #360]	; (800d4d4 <__ieee754_rem_pio2f+0x264>)
 800d36c:	1e47      	subs	r7, r0, #1
 800d36e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800d372:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800d376:	428b      	cmp	r3, r1
 800d378:	d014      	beq.n	800d3a4 <__ieee754_rem_pio2f+0x134>
 800d37a:	6022      	str	r2, [r4, #0]
 800d37c:	ed94 7a00 	vldr	s14, [r4]
 800d380:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d384:	2e00      	cmp	r6, #0
 800d386:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d38a:	ed84 0a01 	vstr	s0, [r4, #4]
 800d38e:	da9c      	bge.n	800d2ca <__ieee754_rem_pio2f+0x5a>
 800d390:	eeb1 7a47 	vneg.f32	s14, s14
 800d394:	eeb1 0a40 	vneg.f32	s0, s0
 800d398:	ed84 7a00 	vstr	s14, [r4]
 800d39c:	ed84 0a01 	vstr	s0, [r4, #4]
 800d3a0:	4240      	negs	r0, r0
 800d3a2:	e792      	b.n	800d2ca <__ieee754_rem_pio2f+0x5a>
 800d3a4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800d3a8:	15eb      	asrs	r3, r5, #23
 800d3aa:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800d3ae:	2d08      	cmp	r5, #8
 800d3b0:	dde3      	ble.n	800d37a <__ieee754_rem_pio2f+0x10a>
 800d3b2:	eddf 7a44 	vldr	s15, [pc, #272]	; 800d4c4 <__ieee754_rem_pio2f+0x254>
 800d3b6:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d4c8 <__ieee754_rem_pio2f+0x258>
 800d3ba:	eef0 6a40 	vmov.f32	s13, s0
 800d3be:	eee6 6a27 	vfma.f32	s13, s12, s15
 800d3c2:	ee30 0a66 	vsub.f32	s0, s0, s13
 800d3c6:	eea6 0a27 	vfma.f32	s0, s12, s15
 800d3ca:	eef0 7a40 	vmov.f32	s15, s0
 800d3ce:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800d3d2:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800d3d6:	ee15 2a90 	vmov	r2, s11
 800d3da:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800d3de:	1a5b      	subs	r3, r3, r1
 800d3e0:	2b19      	cmp	r3, #25
 800d3e2:	dc04      	bgt.n	800d3ee <__ieee754_rem_pio2f+0x17e>
 800d3e4:	edc4 5a00 	vstr	s11, [r4]
 800d3e8:	eeb0 0a66 	vmov.f32	s0, s13
 800d3ec:	e7c6      	b.n	800d37c <__ieee754_rem_pio2f+0x10c>
 800d3ee:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800d4d8 <__ieee754_rem_pio2f+0x268>
 800d3f2:	eeb0 0a66 	vmov.f32	s0, s13
 800d3f6:	eea6 0a25 	vfma.f32	s0, s12, s11
 800d3fa:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800d3fe:	eddf 6a37 	vldr	s13, [pc, #220]	; 800d4dc <__ieee754_rem_pio2f+0x26c>
 800d402:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d406:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800d40a:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d40e:	ed84 7a00 	vstr	s14, [r4]
 800d412:	e7b3      	b.n	800d37c <__ieee754_rem_pio2f+0x10c>
 800d414:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800d418:	db06      	blt.n	800d428 <__ieee754_rem_pio2f+0x1b8>
 800d41a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d41e:	edc0 7a01 	vstr	s15, [r0, #4]
 800d422:	edc0 7a00 	vstr	s15, [r0]
 800d426:	e733      	b.n	800d290 <__ieee754_rem_pio2f+0x20>
 800d428:	15ea      	asrs	r2, r5, #23
 800d42a:	3a86      	subs	r2, #134	; 0x86
 800d42c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800d430:	ee07 3a90 	vmov	s15, r3
 800d434:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d438:	eddf 6a29 	vldr	s13, [pc, #164]	; 800d4e0 <__ieee754_rem_pio2f+0x270>
 800d43c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d440:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d444:	ed8d 7a03 	vstr	s14, [sp, #12]
 800d448:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d44c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d450:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d454:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d458:	ed8d 7a04 	vstr	s14, [sp, #16]
 800d45c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d460:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d468:	edcd 7a05 	vstr	s15, [sp, #20]
 800d46c:	d11e      	bne.n	800d4ac <__ieee754_rem_pio2f+0x23c>
 800d46e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800d472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d476:	bf14      	ite	ne
 800d478:	2302      	movne	r3, #2
 800d47a:	2301      	moveq	r3, #1
 800d47c:	4919      	ldr	r1, [pc, #100]	; (800d4e4 <__ieee754_rem_pio2f+0x274>)
 800d47e:	9101      	str	r1, [sp, #4]
 800d480:	2102      	movs	r1, #2
 800d482:	9100      	str	r1, [sp, #0]
 800d484:	a803      	add	r0, sp, #12
 800d486:	4621      	mov	r1, r4
 800d488:	f000 fd64 	bl	800df54 <__kernel_rem_pio2f>
 800d48c:	2e00      	cmp	r6, #0
 800d48e:	f6bf af1c 	bge.w	800d2ca <__ieee754_rem_pio2f+0x5a>
 800d492:	edd4 7a00 	vldr	s15, [r4]
 800d496:	eef1 7a67 	vneg.f32	s15, s15
 800d49a:	edc4 7a00 	vstr	s15, [r4]
 800d49e:	edd4 7a01 	vldr	s15, [r4, #4]
 800d4a2:	eef1 7a67 	vneg.f32	s15, s15
 800d4a6:	edc4 7a01 	vstr	s15, [r4, #4]
 800d4aa:	e779      	b.n	800d3a0 <__ieee754_rem_pio2f+0x130>
 800d4ac:	2303      	movs	r3, #3
 800d4ae:	e7e5      	b.n	800d47c <__ieee754_rem_pio2f+0x20c>
 800d4b0:	3f490fd8 	.word	0x3f490fd8
 800d4b4:	4016cbe3 	.word	0x4016cbe3
 800d4b8:	3fc90f80 	.word	0x3fc90f80
 800d4bc:	3fc90fd0 	.word	0x3fc90fd0
 800d4c0:	37354443 	.word	0x37354443
 800d4c4:	37354400 	.word	0x37354400
 800d4c8:	2e85a308 	.word	0x2e85a308
 800d4cc:	43490f80 	.word	0x43490f80
 800d4d0:	3f22f984 	.word	0x3f22f984
 800d4d4:	0800f580 	.word	0x0800f580
 800d4d8:	2e85a300 	.word	0x2e85a300
 800d4dc:	248d3132 	.word	0x248d3132
 800d4e0:	43800000 	.word	0x43800000
 800d4e4:	0800f600 	.word	0x0800f600

0800d4e8 <__kernel_cos>:
 800d4e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4ec:	ec57 6b10 	vmov	r6, r7, d0
 800d4f0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800d4f4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800d4f8:	ed8d 1b00 	vstr	d1, [sp]
 800d4fc:	da07      	bge.n	800d50e <__kernel_cos+0x26>
 800d4fe:	ee10 0a10 	vmov	r0, s0
 800d502:	4639      	mov	r1, r7
 800d504:	f7f3 fac2 	bl	8000a8c <__aeabi_d2iz>
 800d508:	2800      	cmp	r0, #0
 800d50a:	f000 8088 	beq.w	800d61e <__kernel_cos+0x136>
 800d50e:	4632      	mov	r2, r6
 800d510:	463b      	mov	r3, r7
 800d512:	4630      	mov	r0, r6
 800d514:	4639      	mov	r1, r7
 800d516:	f7f3 f81f 	bl	8000558 <__aeabi_dmul>
 800d51a:	4b51      	ldr	r3, [pc, #324]	; (800d660 <__kernel_cos+0x178>)
 800d51c:	2200      	movs	r2, #0
 800d51e:	4604      	mov	r4, r0
 800d520:	460d      	mov	r5, r1
 800d522:	f7f3 f819 	bl	8000558 <__aeabi_dmul>
 800d526:	a340      	add	r3, pc, #256	; (adr r3, 800d628 <__kernel_cos+0x140>)
 800d528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d52c:	4682      	mov	sl, r0
 800d52e:	468b      	mov	fp, r1
 800d530:	4620      	mov	r0, r4
 800d532:	4629      	mov	r1, r5
 800d534:	f7f3 f810 	bl	8000558 <__aeabi_dmul>
 800d538:	a33d      	add	r3, pc, #244	; (adr r3, 800d630 <__kernel_cos+0x148>)
 800d53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d53e:	f7f2 fe55 	bl	80001ec <__adddf3>
 800d542:	4622      	mov	r2, r4
 800d544:	462b      	mov	r3, r5
 800d546:	f7f3 f807 	bl	8000558 <__aeabi_dmul>
 800d54a:	a33b      	add	r3, pc, #236	; (adr r3, 800d638 <__kernel_cos+0x150>)
 800d54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d550:	f7f2 fe4a 	bl	80001e8 <__aeabi_dsub>
 800d554:	4622      	mov	r2, r4
 800d556:	462b      	mov	r3, r5
 800d558:	f7f2 fffe 	bl	8000558 <__aeabi_dmul>
 800d55c:	a338      	add	r3, pc, #224	; (adr r3, 800d640 <__kernel_cos+0x158>)
 800d55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d562:	f7f2 fe43 	bl	80001ec <__adddf3>
 800d566:	4622      	mov	r2, r4
 800d568:	462b      	mov	r3, r5
 800d56a:	f7f2 fff5 	bl	8000558 <__aeabi_dmul>
 800d56e:	a336      	add	r3, pc, #216	; (adr r3, 800d648 <__kernel_cos+0x160>)
 800d570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d574:	f7f2 fe38 	bl	80001e8 <__aeabi_dsub>
 800d578:	4622      	mov	r2, r4
 800d57a:	462b      	mov	r3, r5
 800d57c:	f7f2 ffec 	bl	8000558 <__aeabi_dmul>
 800d580:	a333      	add	r3, pc, #204	; (adr r3, 800d650 <__kernel_cos+0x168>)
 800d582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d586:	f7f2 fe31 	bl	80001ec <__adddf3>
 800d58a:	4622      	mov	r2, r4
 800d58c:	462b      	mov	r3, r5
 800d58e:	f7f2 ffe3 	bl	8000558 <__aeabi_dmul>
 800d592:	4622      	mov	r2, r4
 800d594:	462b      	mov	r3, r5
 800d596:	f7f2 ffdf 	bl	8000558 <__aeabi_dmul>
 800d59a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d59e:	4604      	mov	r4, r0
 800d5a0:	460d      	mov	r5, r1
 800d5a2:	4630      	mov	r0, r6
 800d5a4:	4639      	mov	r1, r7
 800d5a6:	f7f2 ffd7 	bl	8000558 <__aeabi_dmul>
 800d5aa:	460b      	mov	r3, r1
 800d5ac:	4602      	mov	r2, r0
 800d5ae:	4629      	mov	r1, r5
 800d5b0:	4620      	mov	r0, r4
 800d5b2:	f7f2 fe19 	bl	80001e8 <__aeabi_dsub>
 800d5b6:	4b2b      	ldr	r3, [pc, #172]	; (800d664 <__kernel_cos+0x17c>)
 800d5b8:	4598      	cmp	r8, r3
 800d5ba:	4606      	mov	r6, r0
 800d5bc:	460f      	mov	r7, r1
 800d5be:	dc10      	bgt.n	800d5e2 <__kernel_cos+0xfa>
 800d5c0:	4602      	mov	r2, r0
 800d5c2:	460b      	mov	r3, r1
 800d5c4:	4650      	mov	r0, sl
 800d5c6:	4659      	mov	r1, fp
 800d5c8:	f7f2 fe0e 	bl	80001e8 <__aeabi_dsub>
 800d5cc:	460b      	mov	r3, r1
 800d5ce:	4926      	ldr	r1, [pc, #152]	; (800d668 <__kernel_cos+0x180>)
 800d5d0:	4602      	mov	r2, r0
 800d5d2:	2000      	movs	r0, #0
 800d5d4:	f7f2 fe08 	bl	80001e8 <__aeabi_dsub>
 800d5d8:	ec41 0b10 	vmov	d0, r0, r1
 800d5dc:	b003      	add	sp, #12
 800d5de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5e2:	4b22      	ldr	r3, [pc, #136]	; (800d66c <__kernel_cos+0x184>)
 800d5e4:	4920      	ldr	r1, [pc, #128]	; (800d668 <__kernel_cos+0x180>)
 800d5e6:	4598      	cmp	r8, r3
 800d5e8:	bfcc      	ite	gt
 800d5ea:	4d21      	ldrgt	r5, [pc, #132]	; (800d670 <__kernel_cos+0x188>)
 800d5ec:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800d5f0:	2400      	movs	r4, #0
 800d5f2:	4622      	mov	r2, r4
 800d5f4:	462b      	mov	r3, r5
 800d5f6:	2000      	movs	r0, #0
 800d5f8:	f7f2 fdf6 	bl	80001e8 <__aeabi_dsub>
 800d5fc:	4622      	mov	r2, r4
 800d5fe:	4680      	mov	r8, r0
 800d600:	4689      	mov	r9, r1
 800d602:	462b      	mov	r3, r5
 800d604:	4650      	mov	r0, sl
 800d606:	4659      	mov	r1, fp
 800d608:	f7f2 fdee 	bl	80001e8 <__aeabi_dsub>
 800d60c:	4632      	mov	r2, r6
 800d60e:	463b      	mov	r3, r7
 800d610:	f7f2 fdea 	bl	80001e8 <__aeabi_dsub>
 800d614:	4602      	mov	r2, r0
 800d616:	460b      	mov	r3, r1
 800d618:	4640      	mov	r0, r8
 800d61a:	4649      	mov	r1, r9
 800d61c:	e7da      	b.n	800d5d4 <__kernel_cos+0xec>
 800d61e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800d658 <__kernel_cos+0x170>
 800d622:	e7db      	b.n	800d5dc <__kernel_cos+0xf4>
 800d624:	f3af 8000 	nop.w
 800d628:	be8838d4 	.word	0xbe8838d4
 800d62c:	bda8fae9 	.word	0xbda8fae9
 800d630:	bdb4b1c4 	.word	0xbdb4b1c4
 800d634:	3e21ee9e 	.word	0x3e21ee9e
 800d638:	809c52ad 	.word	0x809c52ad
 800d63c:	3e927e4f 	.word	0x3e927e4f
 800d640:	19cb1590 	.word	0x19cb1590
 800d644:	3efa01a0 	.word	0x3efa01a0
 800d648:	16c15177 	.word	0x16c15177
 800d64c:	3f56c16c 	.word	0x3f56c16c
 800d650:	5555554c 	.word	0x5555554c
 800d654:	3fa55555 	.word	0x3fa55555
 800d658:	00000000 	.word	0x00000000
 800d65c:	3ff00000 	.word	0x3ff00000
 800d660:	3fe00000 	.word	0x3fe00000
 800d664:	3fd33332 	.word	0x3fd33332
 800d668:	3ff00000 	.word	0x3ff00000
 800d66c:	3fe90000 	.word	0x3fe90000
 800d670:	3fd20000 	.word	0x3fd20000
 800d674:	00000000 	.word	0x00000000

0800d678 <__kernel_rem_pio2>:
 800d678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d67c:	ed2d 8b02 	vpush	{d8}
 800d680:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800d684:	f112 0f14 	cmn.w	r2, #20
 800d688:	9308      	str	r3, [sp, #32]
 800d68a:	9101      	str	r1, [sp, #4]
 800d68c:	4bc4      	ldr	r3, [pc, #784]	; (800d9a0 <__kernel_rem_pio2+0x328>)
 800d68e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800d690:	900b      	str	r0, [sp, #44]	; 0x2c
 800d692:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d696:	9302      	str	r3, [sp, #8]
 800d698:	9b08      	ldr	r3, [sp, #32]
 800d69a:	f103 33ff 	add.w	r3, r3, #4294967295
 800d69e:	bfa8      	it	ge
 800d6a0:	1ed4      	subge	r4, r2, #3
 800d6a2:	9306      	str	r3, [sp, #24]
 800d6a4:	bfb2      	itee	lt
 800d6a6:	2400      	movlt	r4, #0
 800d6a8:	2318      	movge	r3, #24
 800d6aa:	fb94 f4f3 	sdivge	r4, r4, r3
 800d6ae:	f06f 0317 	mvn.w	r3, #23
 800d6b2:	fb04 3303 	mla	r3, r4, r3, r3
 800d6b6:	eb03 0a02 	add.w	sl, r3, r2
 800d6ba:	9b02      	ldr	r3, [sp, #8]
 800d6bc:	9a06      	ldr	r2, [sp, #24]
 800d6be:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800d990 <__kernel_rem_pio2+0x318>
 800d6c2:	eb03 0802 	add.w	r8, r3, r2
 800d6c6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800d6c8:	1aa7      	subs	r7, r4, r2
 800d6ca:	ae22      	add	r6, sp, #136	; 0x88
 800d6cc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d6d0:	2500      	movs	r5, #0
 800d6d2:	4545      	cmp	r5, r8
 800d6d4:	dd13      	ble.n	800d6fe <__kernel_rem_pio2+0x86>
 800d6d6:	9b08      	ldr	r3, [sp, #32]
 800d6d8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800d990 <__kernel_rem_pio2+0x318>
 800d6dc:	aa22      	add	r2, sp, #136	; 0x88
 800d6de:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d6e2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800d6e6:	f04f 0800 	mov.w	r8, #0
 800d6ea:	9b02      	ldr	r3, [sp, #8]
 800d6ec:	4598      	cmp	r8, r3
 800d6ee:	dc2f      	bgt.n	800d750 <__kernel_rem_pio2+0xd8>
 800d6f0:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d6f4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800d6f8:	462f      	mov	r7, r5
 800d6fa:	2600      	movs	r6, #0
 800d6fc:	e01b      	b.n	800d736 <__kernel_rem_pio2+0xbe>
 800d6fe:	42ef      	cmn	r7, r5
 800d700:	d407      	bmi.n	800d712 <__kernel_rem_pio2+0x9a>
 800d702:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d706:	f7f2 febd 	bl	8000484 <__aeabi_i2d>
 800d70a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d70e:	3501      	adds	r5, #1
 800d710:	e7df      	b.n	800d6d2 <__kernel_rem_pio2+0x5a>
 800d712:	ec51 0b18 	vmov	r0, r1, d8
 800d716:	e7f8      	b.n	800d70a <__kernel_rem_pio2+0x92>
 800d718:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d71c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d720:	f7f2 ff1a 	bl	8000558 <__aeabi_dmul>
 800d724:	4602      	mov	r2, r0
 800d726:	460b      	mov	r3, r1
 800d728:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d72c:	f7f2 fd5e 	bl	80001ec <__adddf3>
 800d730:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d734:	3601      	adds	r6, #1
 800d736:	9b06      	ldr	r3, [sp, #24]
 800d738:	429e      	cmp	r6, r3
 800d73a:	f1a7 0708 	sub.w	r7, r7, #8
 800d73e:	ddeb      	ble.n	800d718 <__kernel_rem_pio2+0xa0>
 800d740:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d744:	f108 0801 	add.w	r8, r8, #1
 800d748:	ecab 7b02 	vstmia	fp!, {d7}
 800d74c:	3508      	adds	r5, #8
 800d74e:	e7cc      	b.n	800d6ea <__kernel_rem_pio2+0x72>
 800d750:	9b02      	ldr	r3, [sp, #8]
 800d752:	aa0e      	add	r2, sp, #56	; 0x38
 800d754:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d758:	930d      	str	r3, [sp, #52]	; 0x34
 800d75a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800d75c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d760:	9c02      	ldr	r4, [sp, #8]
 800d762:	930c      	str	r3, [sp, #48]	; 0x30
 800d764:	00e3      	lsls	r3, r4, #3
 800d766:	930a      	str	r3, [sp, #40]	; 0x28
 800d768:	ab9a      	add	r3, sp, #616	; 0x268
 800d76a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d76e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800d772:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800d776:	ab72      	add	r3, sp, #456	; 0x1c8
 800d778:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800d77c:	46c3      	mov	fp, r8
 800d77e:	46a1      	mov	r9, r4
 800d780:	f1b9 0f00 	cmp.w	r9, #0
 800d784:	f1a5 0508 	sub.w	r5, r5, #8
 800d788:	dc77      	bgt.n	800d87a <__kernel_rem_pio2+0x202>
 800d78a:	ec47 6b10 	vmov	d0, r6, r7
 800d78e:	4650      	mov	r0, sl
 800d790:	f000 ff2a 	bl	800e5e8 <scalbn>
 800d794:	ec57 6b10 	vmov	r6, r7, d0
 800d798:	2200      	movs	r2, #0
 800d79a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d79e:	ee10 0a10 	vmov	r0, s0
 800d7a2:	4639      	mov	r1, r7
 800d7a4:	f7f2 fed8 	bl	8000558 <__aeabi_dmul>
 800d7a8:	ec41 0b10 	vmov	d0, r0, r1
 800d7ac:	f000 fe9c 	bl	800e4e8 <floor>
 800d7b0:	4b7c      	ldr	r3, [pc, #496]	; (800d9a4 <__kernel_rem_pio2+0x32c>)
 800d7b2:	ec51 0b10 	vmov	r0, r1, d0
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	f7f2 fece 	bl	8000558 <__aeabi_dmul>
 800d7bc:	4602      	mov	r2, r0
 800d7be:	460b      	mov	r3, r1
 800d7c0:	4630      	mov	r0, r6
 800d7c2:	4639      	mov	r1, r7
 800d7c4:	f7f2 fd10 	bl	80001e8 <__aeabi_dsub>
 800d7c8:	460f      	mov	r7, r1
 800d7ca:	4606      	mov	r6, r0
 800d7cc:	f7f3 f95e 	bl	8000a8c <__aeabi_d2iz>
 800d7d0:	9004      	str	r0, [sp, #16]
 800d7d2:	f7f2 fe57 	bl	8000484 <__aeabi_i2d>
 800d7d6:	4602      	mov	r2, r0
 800d7d8:	460b      	mov	r3, r1
 800d7da:	4630      	mov	r0, r6
 800d7dc:	4639      	mov	r1, r7
 800d7de:	f7f2 fd03 	bl	80001e8 <__aeabi_dsub>
 800d7e2:	f1ba 0f00 	cmp.w	sl, #0
 800d7e6:	4606      	mov	r6, r0
 800d7e8:	460f      	mov	r7, r1
 800d7ea:	dd6d      	ble.n	800d8c8 <__kernel_rem_pio2+0x250>
 800d7ec:	1e62      	subs	r2, r4, #1
 800d7ee:	ab0e      	add	r3, sp, #56	; 0x38
 800d7f0:	9d04      	ldr	r5, [sp, #16]
 800d7f2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d7f6:	f1ca 0118 	rsb	r1, sl, #24
 800d7fa:	fa40 f301 	asr.w	r3, r0, r1
 800d7fe:	441d      	add	r5, r3
 800d800:	408b      	lsls	r3, r1
 800d802:	1ac0      	subs	r0, r0, r3
 800d804:	ab0e      	add	r3, sp, #56	; 0x38
 800d806:	9504      	str	r5, [sp, #16]
 800d808:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800d80c:	f1ca 0317 	rsb	r3, sl, #23
 800d810:	fa40 fb03 	asr.w	fp, r0, r3
 800d814:	f1bb 0f00 	cmp.w	fp, #0
 800d818:	dd65      	ble.n	800d8e6 <__kernel_rem_pio2+0x26e>
 800d81a:	9b04      	ldr	r3, [sp, #16]
 800d81c:	2200      	movs	r2, #0
 800d81e:	3301      	adds	r3, #1
 800d820:	9304      	str	r3, [sp, #16]
 800d822:	4615      	mov	r5, r2
 800d824:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800d828:	4294      	cmp	r4, r2
 800d82a:	f300 809c 	bgt.w	800d966 <__kernel_rem_pio2+0x2ee>
 800d82e:	f1ba 0f00 	cmp.w	sl, #0
 800d832:	dd07      	ble.n	800d844 <__kernel_rem_pio2+0x1cc>
 800d834:	f1ba 0f01 	cmp.w	sl, #1
 800d838:	f000 80c0 	beq.w	800d9bc <__kernel_rem_pio2+0x344>
 800d83c:	f1ba 0f02 	cmp.w	sl, #2
 800d840:	f000 80c6 	beq.w	800d9d0 <__kernel_rem_pio2+0x358>
 800d844:	f1bb 0f02 	cmp.w	fp, #2
 800d848:	d14d      	bne.n	800d8e6 <__kernel_rem_pio2+0x26e>
 800d84a:	4632      	mov	r2, r6
 800d84c:	463b      	mov	r3, r7
 800d84e:	4956      	ldr	r1, [pc, #344]	; (800d9a8 <__kernel_rem_pio2+0x330>)
 800d850:	2000      	movs	r0, #0
 800d852:	f7f2 fcc9 	bl	80001e8 <__aeabi_dsub>
 800d856:	4606      	mov	r6, r0
 800d858:	460f      	mov	r7, r1
 800d85a:	2d00      	cmp	r5, #0
 800d85c:	d043      	beq.n	800d8e6 <__kernel_rem_pio2+0x26e>
 800d85e:	4650      	mov	r0, sl
 800d860:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800d998 <__kernel_rem_pio2+0x320>
 800d864:	f000 fec0 	bl	800e5e8 <scalbn>
 800d868:	4630      	mov	r0, r6
 800d86a:	4639      	mov	r1, r7
 800d86c:	ec53 2b10 	vmov	r2, r3, d0
 800d870:	f7f2 fcba 	bl	80001e8 <__aeabi_dsub>
 800d874:	4606      	mov	r6, r0
 800d876:	460f      	mov	r7, r1
 800d878:	e035      	b.n	800d8e6 <__kernel_rem_pio2+0x26e>
 800d87a:	4b4c      	ldr	r3, [pc, #304]	; (800d9ac <__kernel_rem_pio2+0x334>)
 800d87c:	2200      	movs	r2, #0
 800d87e:	4630      	mov	r0, r6
 800d880:	4639      	mov	r1, r7
 800d882:	f7f2 fe69 	bl	8000558 <__aeabi_dmul>
 800d886:	f7f3 f901 	bl	8000a8c <__aeabi_d2iz>
 800d88a:	f7f2 fdfb 	bl	8000484 <__aeabi_i2d>
 800d88e:	4602      	mov	r2, r0
 800d890:	460b      	mov	r3, r1
 800d892:	ec43 2b18 	vmov	d8, r2, r3
 800d896:	4b46      	ldr	r3, [pc, #280]	; (800d9b0 <__kernel_rem_pio2+0x338>)
 800d898:	2200      	movs	r2, #0
 800d89a:	f7f2 fe5d 	bl	8000558 <__aeabi_dmul>
 800d89e:	4602      	mov	r2, r0
 800d8a0:	460b      	mov	r3, r1
 800d8a2:	4630      	mov	r0, r6
 800d8a4:	4639      	mov	r1, r7
 800d8a6:	f7f2 fc9f 	bl	80001e8 <__aeabi_dsub>
 800d8aa:	f7f3 f8ef 	bl	8000a8c <__aeabi_d2iz>
 800d8ae:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d8b2:	f84b 0b04 	str.w	r0, [fp], #4
 800d8b6:	ec51 0b18 	vmov	r0, r1, d8
 800d8ba:	f7f2 fc97 	bl	80001ec <__adddf3>
 800d8be:	f109 39ff 	add.w	r9, r9, #4294967295
 800d8c2:	4606      	mov	r6, r0
 800d8c4:	460f      	mov	r7, r1
 800d8c6:	e75b      	b.n	800d780 <__kernel_rem_pio2+0x108>
 800d8c8:	d106      	bne.n	800d8d8 <__kernel_rem_pio2+0x260>
 800d8ca:	1e63      	subs	r3, r4, #1
 800d8cc:	aa0e      	add	r2, sp, #56	; 0x38
 800d8ce:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d8d2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800d8d6:	e79d      	b.n	800d814 <__kernel_rem_pio2+0x19c>
 800d8d8:	4b36      	ldr	r3, [pc, #216]	; (800d9b4 <__kernel_rem_pio2+0x33c>)
 800d8da:	2200      	movs	r2, #0
 800d8dc:	f7f3 f8c2 	bl	8000a64 <__aeabi_dcmpge>
 800d8e0:	2800      	cmp	r0, #0
 800d8e2:	d13d      	bne.n	800d960 <__kernel_rem_pio2+0x2e8>
 800d8e4:	4683      	mov	fp, r0
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	4630      	mov	r0, r6
 800d8ec:	4639      	mov	r1, r7
 800d8ee:	f7f3 f89b 	bl	8000a28 <__aeabi_dcmpeq>
 800d8f2:	2800      	cmp	r0, #0
 800d8f4:	f000 80c0 	beq.w	800da78 <__kernel_rem_pio2+0x400>
 800d8f8:	1e65      	subs	r5, r4, #1
 800d8fa:	462b      	mov	r3, r5
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	9902      	ldr	r1, [sp, #8]
 800d900:	428b      	cmp	r3, r1
 800d902:	da6c      	bge.n	800d9de <__kernel_rem_pio2+0x366>
 800d904:	2a00      	cmp	r2, #0
 800d906:	f000 8089 	beq.w	800da1c <__kernel_rem_pio2+0x3a4>
 800d90a:	ab0e      	add	r3, sp, #56	; 0x38
 800d90c:	f1aa 0a18 	sub.w	sl, sl, #24
 800d910:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800d914:	2b00      	cmp	r3, #0
 800d916:	f000 80ad 	beq.w	800da74 <__kernel_rem_pio2+0x3fc>
 800d91a:	4650      	mov	r0, sl
 800d91c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800d998 <__kernel_rem_pio2+0x320>
 800d920:	f000 fe62 	bl	800e5e8 <scalbn>
 800d924:	ab9a      	add	r3, sp, #616	; 0x268
 800d926:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d92a:	ec57 6b10 	vmov	r6, r7, d0
 800d92e:	00ec      	lsls	r4, r5, #3
 800d930:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800d934:	46aa      	mov	sl, r5
 800d936:	f1ba 0f00 	cmp.w	sl, #0
 800d93a:	f280 80d6 	bge.w	800daea <__kernel_rem_pio2+0x472>
 800d93e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800d990 <__kernel_rem_pio2+0x318>
 800d942:	462e      	mov	r6, r5
 800d944:	2e00      	cmp	r6, #0
 800d946:	f2c0 8104 	blt.w	800db52 <__kernel_rem_pio2+0x4da>
 800d94a:	ab72      	add	r3, sp, #456	; 0x1c8
 800d94c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800d950:	f8df a064 	ldr.w	sl, [pc, #100]	; 800d9b8 <__kernel_rem_pio2+0x340>
 800d954:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800d958:	f04f 0800 	mov.w	r8, #0
 800d95c:	1baf      	subs	r7, r5, r6
 800d95e:	e0ea      	b.n	800db36 <__kernel_rem_pio2+0x4be>
 800d960:	f04f 0b02 	mov.w	fp, #2
 800d964:	e759      	b.n	800d81a <__kernel_rem_pio2+0x1a2>
 800d966:	f8d8 3000 	ldr.w	r3, [r8]
 800d96a:	b955      	cbnz	r5, 800d982 <__kernel_rem_pio2+0x30a>
 800d96c:	b123      	cbz	r3, 800d978 <__kernel_rem_pio2+0x300>
 800d96e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d972:	f8c8 3000 	str.w	r3, [r8]
 800d976:	2301      	movs	r3, #1
 800d978:	3201      	adds	r2, #1
 800d97a:	f108 0804 	add.w	r8, r8, #4
 800d97e:	461d      	mov	r5, r3
 800d980:	e752      	b.n	800d828 <__kernel_rem_pio2+0x1b0>
 800d982:	1acb      	subs	r3, r1, r3
 800d984:	f8c8 3000 	str.w	r3, [r8]
 800d988:	462b      	mov	r3, r5
 800d98a:	e7f5      	b.n	800d978 <__kernel_rem_pio2+0x300>
 800d98c:	f3af 8000 	nop.w
	...
 800d99c:	3ff00000 	.word	0x3ff00000
 800d9a0:	0800f958 	.word	0x0800f958
 800d9a4:	40200000 	.word	0x40200000
 800d9a8:	3ff00000 	.word	0x3ff00000
 800d9ac:	3e700000 	.word	0x3e700000
 800d9b0:	41700000 	.word	0x41700000
 800d9b4:	3fe00000 	.word	0x3fe00000
 800d9b8:	0800f918 	.word	0x0800f918
 800d9bc:	1e62      	subs	r2, r4, #1
 800d9be:	ab0e      	add	r3, sp, #56	; 0x38
 800d9c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9c4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d9c8:	a90e      	add	r1, sp, #56	; 0x38
 800d9ca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d9ce:	e739      	b.n	800d844 <__kernel_rem_pio2+0x1cc>
 800d9d0:	1e62      	subs	r2, r4, #1
 800d9d2:	ab0e      	add	r3, sp, #56	; 0x38
 800d9d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9d8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d9dc:	e7f4      	b.n	800d9c8 <__kernel_rem_pio2+0x350>
 800d9de:	a90e      	add	r1, sp, #56	; 0x38
 800d9e0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d9e4:	3b01      	subs	r3, #1
 800d9e6:	430a      	orrs	r2, r1
 800d9e8:	e789      	b.n	800d8fe <__kernel_rem_pio2+0x286>
 800d9ea:	3301      	adds	r3, #1
 800d9ec:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d9f0:	2900      	cmp	r1, #0
 800d9f2:	d0fa      	beq.n	800d9ea <__kernel_rem_pio2+0x372>
 800d9f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d9f6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800d9fa:	446a      	add	r2, sp
 800d9fc:	3a98      	subs	r2, #152	; 0x98
 800d9fe:	920a      	str	r2, [sp, #40]	; 0x28
 800da00:	9a08      	ldr	r2, [sp, #32]
 800da02:	18e3      	adds	r3, r4, r3
 800da04:	18a5      	adds	r5, r4, r2
 800da06:	aa22      	add	r2, sp, #136	; 0x88
 800da08:	f104 0801 	add.w	r8, r4, #1
 800da0c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800da10:	9304      	str	r3, [sp, #16]
 800da12:	9b04      	ldr	r3, [sp, #16]
 800da14:	4543      	cmp	r3, r8
 800da16:	da04      	bge.n	800da22 <__kernel_rem_pio2+0x3aa>
 800da18:	461c      	mov	r4, r3
 800da1a:	e6a3      	b.n	800d764 <__kernel_rem_pio2+0xec>
 800da1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800da1e:	2301      	movs	r3, #1
 800da20:	e7e4      	b.n	800d9ec <__kernel_rem_pio2+0x374>
 800da22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800da24:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800da28:	f7f2 fd2c 	bl	8000484 <__aeabi_i2d>
 800da2c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800da30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da32:	46ab      	mov	fp, r5
 800da34:	461c      	mov	r4, r3
 800da36:	f04f 0900 	mov.w	r9, #0
 800da3a:	2600      	movs	r6, #0
 800da3c:	2700      	movs	r7, #0
 800da3e:	9b06      	ldr	r3, [sp, #24]
 800da40:	4599      	cmp	r9, r3
 800da42:	dd06      	ble.n	800da52 <__kernel_rem_pio2+0x3da>
 800da44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da46:	e8e3 6702 	strd	r6, r7, [r3], #8
 800da4a:	f108 0801 	add.w	r8, r8, #1
 800da4e:	930a      	str	r3, [sp, #40]	; 0x28
 800da50:	e7df      	b.n	800da12 <__kernel_rem_pio2+0x39a>
 800da52:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800da56:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800da5a:	f7f2 fd7d 	bl	8000558 <__aeabi_dmul>
 800da5e:	4602      	mov	r2, r0
 800da60:	460b      	mov	r3, r1
 800da62:	4630      	mov	r0, r6
 800da64:	4639      	mov	r1, r7
 800da66:	f7f2 fbc1 	bl	80001ec <__adddf3>
 800da6a:	f109 0901 	add.w	r9, r9, #1
 800da6e:	4606      	mov	r6, r0
 800da70:	460f      	mov	r7, r1
 800da72:	e7e4      	b.n	800da3e <__kernel_rem_pio2+0x3c6>
 800da74:	3d01      	subs	r5, #1
 800da76:	e748      	b.n	800d90a <__kernel_rem_pio2+0x292>
 800da78:	ec47 6b10 	vmov	d0, r6, r7
 800da7c:	f1ca 0000 	rsb	r0, sl, #0
 800da80:	f000 fdb2 	bl	800e5e8 <scalbn>
 800da84:	ec57 6b10 	vmov	r6, r7, d0
 800da88:	4ba0      	ldr	r3, [pc, #640]	; (800dd0c <__kernel_rem_pio2+0x694>)
 800da8a:	ee10 0a10 	vmov	r0, s0
 800da8e:	2200      	movs	r2, #0
 800da90:	4639      	mov	r1, r7
 800da92:	f7f2 ffe7 	bl	8000a64 <__aeabi_dcmpge>
 800da96:	b1f8      	cbz	r0, 800dad8 <__kernel_rem_pio2+0x460>
 800da98:	4b9d      	ldr	r3, [pc, #628]	; (800dd10 <__kernel_rem_pio2+0x698>)
 800da9a:	2200      	movs	r2, #0
 800da9c:	4630      	mov	r0, r6
 800da9e:	4639      	mov	r1, r7
 800daa0:	f7f2 fd5a 	bl	8000558 <__aeabi_dmul>
 800daa4:	f7f2 fff2 	bl	8000a8c <__aeabi_d2iz>
 800daa8:	4680      	mov	r8, r0
 800daaa:	f7f2 fceb 	bl	8000484 <__aeabi_i2d>
 800daae:	4b97      	ldr	r3, [pc, #604]	; (800dd0c <__kernel_rem_pio2+0x694>)
 800dab0:	2200      	movs	r2, #0
 800dab2:	f7f2 fd51 	bl	8000558 <__aeabi_dmul>
 800dab6:	460b      	mov	r3, r1
 800dab8:	4602      	mov	r2, r0
 800daba:	4639      	mov	r1, r7
 800dabc:	4630      	mov	r0, r6
 800dabe:	f7f2 fb93 	bl	80001e8 <__aeabi_dsub>
 800dac2:	f7f2 ffe3 	bl	8000a8c <__aeabi_d2iz>
 800dac6:	1c65      	adds	r5, r4, #1
 800dac8:	ab0e      	add	r3, sp, #56	; 0x38
 800daca:	f10a 0a18 	add.w	sl, sl, #24
 800dace:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800dad2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800dad6:	e720      	b.n	800d91a <__kernel_rem_pio2+0x2a2>
 800dad8:	4630      	mov	r0, r6
 800dada:	4639      	mov	r1, r7
 800dadc:	f7f2 ffd6 	bl	8000a8c <__aeabi_d2iz>
 800dae0:	ab0e      	add	r3, sp, #56	; 0x38
 800dae2:	4625      	mov	r5, r4
 800dae4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800dae8:	e717      	b.n	800d91a <__kernel_rem_pio2+0x2a2>
 800daea:	ab0e      	add	r3, sp, #56	; 0x38
 800daec:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800daf0:	f7f2 fcc8 	bl	8000484 <__aeabi_i2d>
 800daf4:	4632      	mov	r2, r6
 800daf6:	463b      	mov	r3, r7
 800daf8:	f7f2 fd2e 	bl	8000558 <__aeabi_dmul>
 800dafc:	4b84      	ldr	r3, [pc, #528]	; (800dd10 <__kernel_rem_pio2+0x698>)
 800dafe:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800db02:	2200      	movs	r2, #0
 800db04:	4630      	mov	r0, r6
 800db06:	4639      	mov	r1, r7
 800db08:	f7f2 fd26 	bl	8000558 <__aeabi_dmul>
 800db0c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800db10:	4606      	mov	r6, r0
 800db12:	460f      	mov	r7, r1
 800db14:	e70f      	b.n	800d936 <__kernel_rem_pio2+0x2be>
 800db16:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800db1a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800db1e:	f7f2 fd1b 	bl	8000558 <__aeabi_dmul>
 800db22:	4602      	mov	r2, r0
 800db24:	460b      	mov	r3, r1
 800db26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800db2a:	f7f2 fb5f 	bl	80001ec <__adddf3>
 800db2e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800db32:	f108 0801 	add.w	r8, r8, #1
 800db36:	9b02      	ldr	r3, [sp, #8]
 800db38:	4598      	cmp	r8, r3
 800db3a:	dc01      	bgt.n	800db40 <__kernel_rem_pio2+0x4c8>
 800db3c:	45b8      	cmp	r8, r7
 800db3e:	ddea      	ble.n	800db16 <__kernel_rem_pio2+0x49e>
 800db40:	ed9d 7b06 	vldr	d7, [sp, #24]
 800db44:	ab4a      	add	r3, sp, #296	; 0x128
 800db46:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800db4a:	ed87 7b00 	vstr	d7, [r7]
 800db4e:	3e01      	subs	r6, #1
 800db50:	e6f8      	b.n	800d944 <__kernel_rem_pio2+0x2cc>
 800db52:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800db54:	2b02      	cmp	r3, #2
 800db56:	dc0b      	bgt.n	800db70 <__kernel_rem_pio2+0x4f8>
 800db58:	2b00      	cmp	r3, #0
 800db5a:	dc35      	bgt.n	800dbc8 <__kernel_rem_pio2+0x550>
 800db5c:	d059      	beq.n	800dc12 <__kernel_rem_pio2+0x59a>
 800db5e:	9b04      	ldr	r3, [sp, #16]
 800db60:	f003 0007 	and.w	r0, r3, #7
 800db64:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800db68:	ecbd 8b02 	vpop	{d8}
 800db6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db70:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800db72:	2b03      	cmp	r3, #3
 800db74:	d1f3      	bne.n	800db5e <__kernel_rem_pio2+0x4e6>
 800db76:	ab4a      	add	r3, sp, #296	; 0x128
 800db78:	4423      	add	r3, r4
 800db7a:	9306      	str	r3, [sp, #24]
 800db7c:	461c      	mov	r4, r3
 800db7e:	469a      	mov	sl, r3
 800db80:	9502      	str	r5, [sp, #8]
 800db82:	9b02      	ldr	r3, [sp, #8]
 800db84:	2b00      	cmp	r3, #0
 800db86:	f1aa 0a08 	sub.w	sl, sl, #8
 800db8a:	dc6b      	bgt.n	800dc64 <__kernel_rem_pio2+0x5ec>
 800db8c:	46aa      	mov	sl, r5
 800db8e:	f1ba 0f01 	cmp.w	sl, #1
 800db92:	f1a4 0408 	sub.w	r4, r4, #8
 800db96:	f300 8085 	bgt.w	800dca4 <__kernel_rem_pio2+0x62c>
 800db9a:	9c06      	ldr	r4, [sp, #24]
 800db9c:	2000      	movs	r0, #0
 800db9e:	3408      	adds	r4, #8
 800dba0:	2100      	movs	r1, #0
 800dba2:	2d01      	cmp	r5, #1
 800dba4:	f300 809d 	bgt.w	800dce2 <__kernel_rem_pio2+0x66a>
 800dba8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800dbac:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800dbb0:	f1bb 0f00 	cmp.w	fp, #0
 800dbb4:	f040 809b 	bne.w	800dcee <__kernel_rem_pio2+0x676>
 800dbb8:	9b01      	ldr	r3, [sp, #4]
 800dbba:	e9c3 5600 	strd	r5, r6, [r3]
 800dbbe:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800dbc2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800dbc6:	e7ca      	b.n	800db5e <__kernel_rem_pio2+0x4e6>
 800dbc8:	3408      	adds	r4, #8
 800dbca:	ab4a      	add	r3, sp, #296	; 0x128
 800dbcc:	441c      	add	r4, r3
 800dbce:	462e      	mov	r6, r5
 800dbd0:	2000      	movs	r0, #0
 800dbd2:	2100      	movs	r1, #0
 800dbd4:	2e00      	cmp	r6, #0
 800dbd6:	da36      	bge.n	800dc46 <__kernel_rem_pio2+0x5ce>
 800dbd8:	f1bb 0f00 	cmp.w	fp, #0
 800dbdc:	d039      	beq.n	800dc52 <__kernel_rem_pio2+0x5da>
 800dbde:	4602      	mov	r2, r0
 800dbe0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dbe4:	9c01      	ldr	r4, [sp, #4]
 800dbe6:	e9c4 2300 	strd	r2, r3, [r4]
 800dbea:	4602      	mov	r2, r0
 800dbec:	460b      	mov	r3, r1
 800dbee:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800dbf2:	f7f2 faf9 	bl	80001e8 <__aeabi_dsub>
 800dbf6:	ae4c      	add	r6, sp, #304	; 0x130
 800dbf8:	2401      	movs	r4, #1
 800dbfa:	42a5      	cmp	r5, r4
 800dbfc:	da2c      	bge.n	800dc58 <__kernel_rem_pio2+0x5e0>
 800dbfe:	f1bb 0f00 	cmp.w	fp, #0
 800dc02:	d002      	beq.n	800dc0a <__kernel_rem_pio2+0x592>
 800dc04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dc08:	4619      	mov	r1, r3
 800dc0a:	9b01      	ldr	r3, [sp, #4]
 800dc0c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800dc10:	e7a5      	b.n	800db5e <__kernel_rem_pio2+0x4e6>
 800dc12:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800dc16:	eb0d 0403 	add.w	r4, sp, r3
 800dc1a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800dc1e:	2000      	movs	r0, #0
 800dc20:	2100      	movs	r1, #0
 800dc22:	2d00      	cmp	r5, #0
 800dc24:	da09      	bge.n	800dc3a <__kernel_rem_pio2+0x5c2>
 800dc26:	f1bb 0f00 	cmp.w	fp, #0
 800dc2a:	d002      	beq.n	800dc32 <__kernel_rem_pio2+0x5ba>
 800dc2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dc30:	4619      	mov	r1, r3
 800dc32:	9b01      	ldr	r3, [sp, #4]
 800dc34:	e9c3 0100 	strd	r0, r1, [r3]
 800dc38:	e791      	b.n	800db5e <__kernel_rem_pio2+0x4e6>
 800dc3a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800dc3e:	f7f2 fad5 	bl	80001ec <__adddf3>
 800dc42:	3d01      	subs	r5, #1
 800dc44:	e7ed      	b.n	800dc22 <__kernel_rem_pio2+0x5aa>
 800dc46:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800dc4a:	f7f2 facf 	bl	80001ec <__adddf3>
 800dc4e:	3e01      	subs	r6, #1
 800dc50:	e7c0      	b.n	800dbd4 <__kernel_rem_pio2+0x55c>
 800dc52:	4602      	mov	r2, r0
 800dc54:	460b      	mov	r3, r1
 800dc56:	e7c5      	b.n	800dbe4 <__kernel_rem_pio2+0x56c>
 800dc58:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800dc5c:	f7f2 fac6 	bl	80001ec <__adddf3>
 800dc60:	3401      	adds	r4, #1
 800dc62:	e7ca      	b.n	800dbfa <__kernel_rem_pio2+0x582>
 800dc64:	e9da 8900 	ldrd	r8, r9, [sl]
 800dc68:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800dc6c:	9b02      	ldr	r3, [sp, #8]
 800dc6e:	3b01      	subs	r3, #1
 800dc70:	9302      	str	r3, [sp, #8]
 800dc72:	4632      	mov	r2, r6
 800dc74:	463b      	mov	r3, r7
 800dc76:	4640      	mov	r0, r8
 800dc78:	4649      	mov	r1, r9
 800dc7a:	f7f2 fab7 	bl	80001ec <__adddf3>
 800dc7e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dc82:	4602      	mov	r2, r0
 800dc84:	460b      	mov	r3, r1
 800dc86:	4640      	mov	r0, r8
 800dc88:	4649      	mov	r1, r9
 800dc8a:	f7f2 faad 	bl	80001e8 <__aeabi_dsub>
 800dc8e:	4632      	mov	r2, r6
 800dc90:	463b      	mov	r3, r7
 800dc92:	f7f2 faab 	bl	80001ec <__adddf3>
 800dc96:	ed9d 7b08 	vldr	d7, [sp, #32]
 800dc9a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dc9e:	ed8a 7b00 	vstr	d7, [sl]
 800dca2:	e76e      	b.n	800db82 <__kernel_rem_pio2+0x50a>
 800dca4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800dca8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800dcac:	4640      	mov	r0, r8
 800dcae:	4632      	mov	r2, r6
 800dcb0:	463b      	mov	r3, r7
 800dcb2:	4649      	mov	r1, r9
 800dcb4:	f7f2 fa9a 	bl	80001ec <__adddf3>
 800dcb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dcbc:	4602      	mov	r2, r0
 800dcbe:	460b      	mov	r3, r1
 800dcc0:	4640      	mov	r0, r8
 800dcc2:	4649      	mov	r1, r9
 800dcc4:	f7f2 fa90 	bl	80001e8 <__aeabi_dsub>
 800dcc8:	4632      	mov	r2, r6
 800dcca:	463b      	mov	r3, r7
 800dccc:	f7f2 fa8e 	bl	80001ec <__adddf3>
 800dcd0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dcd4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800dcd8:	ed84 7b00 	vstr	d7, [r4]
 800dcdc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dce0:	e755      	b.n	800db8e <__kernel_rem_pio2+0x516>
 800dce2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800dce6:	f7f2 fa81 	bl	80001ec <__adddf3>
 800dcea:	3d01      	subs	r5, #1
 800dcec:	e759      	b.n	800dba2 <__kernel_rem_pio2+0x52a>
 800dcee:	9b01      	ldr	r3, [sp, #4]
 800dcf0:	9a01      	ldr	r2, [sp, #4]
 800dcf2:	601d      	str	r5, [r3, #0]
 800dcf4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800dcf8:	605c      	str	r4, [r3, #4]
 800dcfa:	609f      	str	r7, [r3, #8]
 800dcfc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800dd00:	60d3      	str	r3, [r2, #12]
 800dd02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dd06:	6110      	str	r0, [r2, #16]
 800dd08:	6153      	str	r3, [r2, #20]
 800dd0a:	e728      	b.n	800db5e <__kernel_rem_pio2+0x4e6>
 800dd0c:	41700000 	.word	0x41700000
 800dd10:	3e700000 	.word	0x3e700000
 800dd14:	00000000 	.word	0x00000000

0800dd18 <__kernel_sin>:
 800dd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd1c:	ed2d 8b04 	vpush	{d8-d9}
 800dd20:	eeb0 8a41 	vmov.f32	s16, s2
 800dd24:	eef0 8a61 	vmov.f32	s17, s3
 800dd28:	ec55 4b10 	vmov	r4, r5, d0
 800dd2c:	b083      	sub	sp, #12
 800dd2e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800dd32:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800dd36:	9001      	str	r0, [sp, #4]
 800dd38:	da06      	bge.n	800dd48 <__kernel_sin+0x30>
 800dd3a:	ee10 0a10 	vmov	r0, s0
 800dd3e:	4629      	mov	r1, r5
 800dd40:	f7f2 fea4 	bl	8000a8c <__aeabi_d2iz>
 800dd44:	2800      	cmp	r0, #0
 800dd46:	d051      	beq.n	800ddec <__kernel_sin+0xd4>
 800dd48:	4622      	mov	r2, r4
 800dd4a:	462b      	mov	r3, r5
 800dd4c:	4620      	mov	r0, r4
 800dd4e:	4629      	mov	r1, r5
 800dd50:	f7f2 fc02 	bl	8000558 <__aeabi_dmul>
 800dd54:	4682      	mov	sl, r0
 800dd56:	468b      	mov	fp, r1
 800dd58:	4602      	mov	r2, r0
 800dd5a:	460b      	mov	r3, r1
 800dd5c:	4620      	mov	r0, r4
 800dd5e:	4629      	mov	r1, r5
 800dd60:	f7f2 fbfa 	bl	8000558 <__aeabi_dmul>
 800dd64:	a341      	add	r3, pc, #260	; (adr r3, 800de6c <__kernel_sin+0x154>)
 800dd66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd6a:	4680      	mov	r8, r0
 800dd6c:	4689      	mov	r9, r1
 800dd6e:	4650      	mov	r0, sl
 800dd70:	4659      	mov	r1, fp
 800dd72:	f7f2 fbf1 	bl	8000558 <__aeabi_dmul>
 800dd76:	a33f      	add	r3, pc, #252	; (adr r3, 800de74 <__kernel_sin+0x15c>)
 800dd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd7c:	f7f2 fa34 	bl	80001e8 <__aeabi_dsub>
 800dd80:	4652      	mov	r2, sl
 800dd82:	465b      	mov	r3, fp
 800dd84:	f7f2 fbe8 	bl	8000558 <__aeabi_dmul>
 800dd88:	a33c      	add	r3, pc, #240	; (adr r3, 800de7c <__kernel_sin+0x164>)
 800dd8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd8e:	f7f2 fa2d 	bl	80001ec <__adddf3>
 800dd92:	4652      	mov	r2, sl
 800dd94:	465b      	mov	r3, fp
 800dd96:	f7f2 fbdf 	bl	8000558 <__aeabi_dmul>
 800dd9a:	a33a      	add	r3, pc, #232	; (adr r3, 800de84 <__kernel_sin+0x16c>)
 800dd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dda0:	f7f2 fa22 	bl	80001e8 <__aeabi_dsub>
 800dda4:	4652      	mov	r2, sl
 800dda6:	465b      	mov	r3, fp
 800dda8:	f7f2 fbd6 	bl	8000558 <__aeabi_dmul>
 800ddac:	a337      	add	r3, pc, #220	; (adr r3, 800de8c <__kernel_sin+0x174>)
 800ddae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddb2:	f7f2 fa1b 	bl	80001ec <__adddf3>
 800ddb6:	9b01      	ldr	r3, [sp, #4]
 800ddb8:	4606      	mov	r6, r0
 800ddba:	460f      	mov	r7, r1
 800ddbc:	b9eb      	cbnz	r3, 800ddfa <__kernel_sin+0xe2>
 800ddbe:	4602      	mov	r2, r0
 800ddc0:	460b      	mov	r3, r1
 800ddc2:	4650      	mov	r0, sl
 800ddc4:	4659      	mov	r1, fp
 800ddc6:	f7f2 fbc7 	bl	8000558 <__aeabi_dmul>
 800ddca:	a325      	add	r3, pc, #148	; (adr r3, 800de60 <__kernel_sin+0x148>)
 800ddcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddd0:	f7f2 fa0a 	bl	80001e8 <__aeabi_dsub>
 800ddd4:	4642      	mov	r2, r8
 800ddd6:	464b      	mov	r3, r9
 800ddd8:	f7f2 fbbe 	bl	8000558 <__aeabi_dmul>
 800dddc:	4602      	mov	r2, r0
 800ddde:	460b      	mov	r3, r1
 800dde0:	4620      	mov	r0, r4
 800dde2:	4629      	mov	r1, r5
 800dde4:	f7f2 fa02 	bl	80001ec <__adddf3>
 800dde8:	4604      	mov	r4, r0
 800ddea:	460d      	mov	r5, r1
 800ddec:	ec45 4b10 	vmov	d0, r4, r5
 800ddf0:	b003      	add	sp, #12
 800ddf2:	ecbd 8b04 	vpop	{d8-d9}
 800ddf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddfa:	4b1b      	ldr	r3, [pc, #108]	; (800de68 <__kernel_sin+0x150>)
 800ddfc:	ec51 0b18 	vmov	r0, r1, d8
 800de00:	2200      	movs	r2, #0
 800de02:	f7f2 fba9 	bl	8000558 <__aeabi_dmul>
 800de06:	4632      	mov	r2, r6
 800de08:	ec41 0b19 	vmov	d9, r0, r1
 800de0c:	463b      	mov	r3, r7
 800de0e:	4640      	mov	r0, r8
 800de10:	4649      	mov	r1, r9
 800de12:	f7f2 fba1 	bl	8000558 <__aeabi_dmul>
 800de16:	4602      	mov	r2, r0
 800de18:	460b      	mov	r3, r1
 800de1a:	ec51 0b19 	vmov	r0, r1, d9
 800de1e:	f7f2 f9e3 	bl	80001e8 <__aeabi_dsub>
 800de22:	4652      	mov	r2, sl
 800de24:	465b      	mov	r3, fp
 800de26:	f7f2 fb97 	bl	8000558 <__aeabi_dmul>
 800de2a:	ec53 2b18 	vmov	r2, r3, d8
 800de2e:	f7f2 f9db 	bl	80001e8 <__aeabi_dsub>
 800de32:	a30b      	add	r3, pc, #44	; (adr r3, 800de60 <__kernel_sin+0x148>)
 800de34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de38:	4606      	mov	r6, r0
 800de3a:	460f      	mov	r7, r1
 800de3c:	4640      	mov	r0, r8
 800de3e:	4649      	mov	r1, r9
 800de40:	f7f2 fb8a 	bl	8000558 <__aeabi_dmul>
 800de44:	4602      	mov	r2, r0
 800de46:	460b      	mov	r3, r1
 800de48:	4630      	mov	r0, r6
 800de4a:	4639      	mov	r1, r7
 800de4c:	f7f2 f9ce 	bl	80001ec <__adddf3>
 800de50:	4602      	mov	r2, r0
 800de52:	460b      	mov	r3, r1
 800de54:	4620      	mov	r0, r4
 800de56:	4629      	mov	r1, r5
 800de58:	f7f2 f9c6 	bl	80001e8 <__aeabi_dsub>
 800de5c:	e7c4      	b.n	800dde8 <__kernel_sin+0xd0>
 800de5e:	bf00      	nop
 800de60:	55555549 	.word	0x55555549
 800de64:	3fc55555 	.word	0x3fc55555
 800de68:	3fe00000 	.word	0x3fe00000
 800de6c:	5acfd57c 	.word	0x5acfd57c
 800de70:	3de5d93a 	.word	0x3de5d93a
 800de74:	8a2b9ceb 	.word	0x8a2b9ceb
 800de78:	3e5ae5e6 	.word	0x3e5ae5e6
 800de7c:	57b1fe7d 	.word	0x57b1fe7d
 800de80:	3ec71de3 	.word	0x3ec71de3
 800de84:	19c161d5 	.word	0x19c161d5
 800de88:	3f2a01a0 	.word	0x3f2a01a0
 800de8c:	1110f8a6 	.word	0x1110f8a6
 800de90:	3f811111 	.word	0x3f811111

0800de94 <__kernel_cosf>:
 800de94:	ee10 3a10 	vmov	r3, s0
 800de98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800de9c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800dea0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800dea4:	da05      	bge.n	800deb2 <__kernel_cosf+0x1e>
 800dea6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800deaa:	ee17 2a90 	vmov	r2, s15
 800deae:	2a00      	cmp	r2, #0
 800deb0:	d03d      	beq.n	800df2e <__kernel_cosf+0x9a>
 800deb2:	ee60 5a00 	vmul.f32	s11, s0, s0
 800deb6:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800df34 <__kernel_cosf+0xa0>
 800deba:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800df38 <__kernel_cosf+0xa4>
 800debe:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800df3c <__kernel_cosf+0xa8>
 800dec2:	4a1f      	ldr	r2, [pc, #124]	; (800df40 <__kernel_cosf+0xac>)
 800dec4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800dec8:	4293      	cmp	r3, r2
 800deca:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800df44 <__kernel_cosf+0xb0>
 800dece:	eee7 7a25 	vfma.f32	s15, s14, s11
 800ded2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800df48 <__kernel_cosf+0xb4>
 800ded6:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800deda:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800df4c <__kernel_cosf+0xb8>
 800dede:	eee7 7a25 	vfma.f32	s15, s14, s11
 800dee2:	eeb0 7a66 	vmov.f32	s14, s13
 800dee6:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800deea:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800deee:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800def2:	ee67 6a25 	vmul.f32	s13, s14, s11
 800def6:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800defa:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800defe:	dc04      	bgt.n	800df0a <__kernel_cosf+0x76>
 800df00:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800df04:	ee36 0a47 	vsub.f32	s0, s12, s14
 800df08:	4770      	bx	lr
 800df0a:	4a11      	ldr	r2, [pc, #68]	; (800df50 <__kernel_cosf+0xbc>)
 800df0c:	4293      	cmp	r3, r2
 800df0e:	bfda      	itte	le
 800df10:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800df14:	ee06 3a90 	vmovle	s13, r3
 800df18:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800df1c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800df20:	ee36 0a66 	vsub.f32	s0, s12, s13
 800df24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800df28:	ee30 0a67 	vsub.f32	s0, s0, s15
 800df2c:	4770      	bx	lr
 800df2e:	eeb0 0a46 	vmov.f32	s0, s12
 800df32:	4770      	bx	lr
 800df34:	ad47d74e 	.word	0xad47d74e
 800df38:	310f74f6 	.word	0x310f74f6
 800df3c:	3d2aaaab 	.word	0x3d2aaaab
 800df40:	3e999999 	.word	0x3e999999
 800df44:	b493f27c 	.word	0xb493f27c
 800df48:	37d00d01 	.word	0x37d00d01
 800df4c:	bab60b61 	.word	0xbab60b61
 800df50:	3f480000 	.word	0x3f480000

0800df54 <__kernel_rem_pio2f>:
 800df54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df58:	ed2d 8b04 	vpush	{d8-d9}
 800df5c:	b0d9      	sub	sp, #356	; 0x164
 800df5e:	4688      	mov	r8, r1
 800df60:	9002      	str	r0, [sp, #8]
 800df62:	49bb      	ldr	r1, [pc, #748]	; (800e250 <__kernel_rem_pio2f+0x2fc>)
 800df64:	9866      	ldr	r0, [sp, #408]	; 0x198
 800df66:	9301      	str	r3, [sp, #4]
 800df68:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800df6c:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800df70:	1e59      	subs	r1, r3, #1
 800df72:	1d13      	adds	r3, r2, #4
 800df74:	db27      	blt.n	800dfc6 <__kernel_rem_pio2f+0x72>
 800df76:	f1b2 0b03 	subs.w	fp, r2, #3
 800df7a:	bf48      	it	mi
 800df7c:	f102 0b04 	addmi.w	fp, r2, #4
 800df80:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800df84:	1c45      	adds	r5, r0, #1
 800df86:	00ec      	lsls	r4, r5, #3
 800df88:	1a47      	subs	r7, r0, r1
 800df8a:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800e260 <__kernel_rem_pio2f+0x30c>
 800df8e:	9403      	str	r4, [sp, #12]
 800df90:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800df94:	eb0a 0c01 	add.w	ip, sl, r1
 800df98:	ae1c      	add	r6, sp, #112	; 0x70
 800df9a:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800df9e:	2400      	movs	r4, #0
 800dfa0:	4564      	cmp	r4, ip
 800dfa2:	dd12      	ble.n	800dfca <__kernel_rem_pio2f+0x76>
 800dfa4:	9b01      	ldr	r3, [sp, #4]
 800dfa6:	ac1c      	add	r4, sp, #112	; 0x70
 800dfa8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800dfac:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800dfb0:	f04f 0c00 	mov.w	ip, #0
 800dfb4:	45d4      	cmp	ip, sl
 800dfb6:	dc27      	bgt.n	800e008 <__kernel_rem_pio2f+0xb4>
 800dfb8:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800dfbc:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800e260 <__kernel_rem_pio2f+0x30c>
 800dfc0:	4627      	mov	r7, r4
 800dfc2:	2600      	movs	r6, #0
 800dfc4:	e016      	b.n	800dff4 <__kernel_rem_pio2f+0xa0>
 800dfc6:	2000      	movs	r0, #0
 800dfc8:	e7dc      	b.n	800df84 <__kernel_rem_pio2f+0x30>
 800dfca:	42e7      	cmn	r7, r4
 800dfcc:	bf5d      	ittte	pl
 800dfce:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800dfd2:	ee07 3a90 	vmovpl	s15, r3
 800dfd6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800dfda:	eef0 7a47 	vmovmi.f32	s15, s14
 800dfde:	ece6 7a01 	vstmia	r6!, {s15}
 800dfe2:	3401      	adds	r4, #1
 800dfe4:	e7dc      	b.n	800dfa0 <__kernel_rem_pio2f+0x4c>
 800dfe6:	ecf9 6a01 	vldmia	r9!, {s13}
 800dfea:	ed97 7a00 	vldr	s14, [r7]
 800dfee:	eee6 7a87 	vfma.f32	s15, s13, s14
 800dff2:	3601      	adds	r6, #1
 800dff4:	428e      	cmp	r6, r1
 800dff6:	f1a7 0704 	sub.w	r7, r7, #4
 800dffa:	ddf4      	ble.n	800dfe6 <__kernel_rem_pio2f+0x92>
 800dffc:	eceb 7a01 	vstmia	fp!, {s15}
 800e000:	f10c 0c01 	add.w	ip, ip, #1
 800e004:	3404      	adds	r4, #4
 800e006:	e7d5      	b.n	800dfb4 <__kernel_rem_pio2f+0x60>
 800e008:	ab08      	add	r3, sp, #32
 800e00a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800e00e:	eddf 8a93 	vldr	s17, [pc, #588]	; 800e25c <__kernel_rem_pio2f+0x308>
 800e012:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800e258 <__kernel_rem_pio2f+0x304>
 800e016:	9304      	str	r3, [sp, #16]
 800e018:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800e01c:	4656      	mov	r6, sl
 800e01e:	00b3      	lsls	r3, r6, #2
 800e020:	9305      	str	r3, [sp, #20]
 800e022:	ab58      	add	r3, sp, #352	; 0x160
 800e024:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800e028:	ac08      	add	r4, sp, #32
 800e02a:	ab44      	add	r3, sp, #272	; 0x110
 800e02c:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800e030:	46a4      	mov	ip, r4
 800e032:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800e036:	4637      	mov	r7, r6
 800e038:	2f00      	cmp	r7, #0
 800e03a:	f1a0 0004 	sub.w	r0, r0, #4
 800e03e:	dc4f      	bgt.n	800e0e0 <__kernel_rem_pio2f+0x18c>
 800e040:	4628      	mov	r0, r5
 800e042:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800e046:	f000 fb9f 	bl	800e788 <scalbnf>
 800e04a:	eeb0 8a40 	vmov.f32	s16, s0
 800e04e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800e052:	ee28 0a00 	vmul.f32	s0, s16, s0
 800e056:	f000 fb55 	bl	800e704 <floorf>
 800e05a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800e05e:	eea0 8a67 	vfms.f32	s16, s0, s15
 800e062:	2d00      	cmp	r5, #0
 800e064:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800e068:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800e06c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800e070:	ee17 9a90 	vmov	r9, s15
 800e074:	ee38 8a40 	vsub.f32	s16, s16, s0
 800e078:	dd44      	ble.n	800e104 <__kernel_rem_pio2f+0x1b0>
 800e07a:	f106 3cff 	add.w	ip, r6, #4294967295
 800e07e:	ab08      	add	r3, sp, #32
 800e080:	f1c5 0e08 	rsb	lr, r5, #8
 800e084:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800e088:	fa47 f00e 	asr.w	r0, r7, lr
 800e08c:	4481      	add	r9, r0
 800e08e:	fa00 f00e 	lsl.w	r0, r0, lr
 800e092:	1a3f      	subs	r7, r7, r0
 800e094:	f1c5 0007 	rsb	r0, r5, #7
 800e098:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800e09c:	4107      	asrs	r7, r0
 800e09e:	2f00      	cmp	r7, #0
 800e0a0:	dd3f      	ble.n	800e122 <__kernel_rem_pio2f+0x1ce>
 800e0a2:	f04f 0e00 	mov.w	lr, #0
 800e0a6:	f109 0901 	add.w	r9, r9, #1
 800e0aa:	4673      	mov	r3, lr
 800e0ac:	4576      	cmp	r6, lr
 800e0ae:	dc6b      	bgt.n	800e188 <__kernel_rem_pio2f+0x234>
 800e0b0:	2d00      	cmp	r5, #0
 800e0b2:	dd04      	ble.n	800e0be <__kernel_rem_pio2f+0x16a>
 800e0b4:	2d01      	cmp	r5, #1
 800e0b6:	d078      	beq.n	800e1aa <__kernel_rem_pio2f+0x256>
 800e0b8:	2d02      	cmp	r5, #2
 800e0ba:	f000 8081 	beq.w	800e1c0 <__kernel_rem_pio2f+0x26c>
 800e0be:	2f02      	cmp	r7, #2
 800e0c0:	d12f      	bne.n	800e122 <__kernel_rem_pio2f+0x1ce>
 800e0c2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e0c6:	ee30 8a48 	vsub.f32	s16, s0, s16
 800e0ca:	b353      	cbz	r3, 800e122 <__kernel_rem_pio2f+0x1ce>
 800e0cc:	4628      	mov	r0, r5
 800e0ce:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800e0d2:	f000 fb59 	bl	800e788 <scalbnf>
 800e0d6:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800e0da:	ee38 8a40 	vsub.f32	s16, s16, s0
 800e0de:	e020      	b.n	800e122 <__kernel_rem_pio2f+0x1ce>
 800e0e0:	ee60 7a28 	vmul.f32	s15, s0, s17
 800e0e4:	3f01      	subs	r7, #1
 800e0e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e0ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e0ee:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800e0f2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e0f6:	ecac 0a01 	vstmia	ip!, {s0}
 800e0fa:	ed90 0a00 	vldr	s0, [r0]
 800e0fe:	ee37 0a80 	vadd.f32	s0, s15, s0
 800e102:	e799      	b.n	800e038 <__kernel_rem_pio2f+0xe4>
 800e104:	d105      	bne.n	800e112 <__kernel_rem_pio2f+0x1be>
 800e106:	1e70      	subs	r0, r6, #1
 800e108:	ab08      	add	r3, sp, #32
 800e10a:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800e10e:	11ff      	asrs	r7, r7, #7
 800e110:	e7c5      	b.n	800e09e <__kernel_rem_pio2f+0x14a>
 800e112:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e116:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800e11a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e11e:	da31      	bge.n	800e184 <__kernel_rem_pio2f+0x230>
 800e120:	2700      	movs	r7, #0
 800e122:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e12a:	f040 809b 	bne.w	800e264 <__kernel_rem_pio2f+0x310>
 800e12e:	1e74      	subs	r4, r6, #1
 800e130:	46a4      	mov	ip, r4
 800e132:	2000      	movs	r0, #0
 800e134:	45d4      	cmp	ip, sl
 800e136:	da4a      	bge.n	800e1ce <__kernel_rem_pio2f+0x27a>
 800e138:	2800      	cmp	r0, #0
 800e13a:	d07a      	beq.n	800e232 <__kernel_rem_pio2f+0x2de>
 800e13c:	ab08      	add	r3, sp, #32
 800e13e:	3d08      	subs	r5, #8
 800e140:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800e144:	2b00      	cmp	r3, #0
 800e146:	f000 8081 	beq.w	800e24c <__kernel_rem_pio2f+0x2f8>
 800e14a:	4628      	mov	r0, r5
 800e14c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e150:	00a5      	lsls	r5, r4, #2
 800e152:	f000 fb19 	bl	800e788 <scalbnf>
 800e156:	aa44      	add	r2, sp, #272	; 0x110
 800e158:	1d2b      	adds	r3, r5, #4
 800e15a:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800e25c <__kernel_rem_pio2f+0x308>
 800e15e:	18d1      	adds	r1, r2, r3
 800e160:	4622      	mov	r2, r4
 800e162:	2a00      	cmp	r2, #0
 800e164:	f280 80ae 	bge.w	800e2c4 <__kernel_rem_pio2f+0x370>
 800e168:	4622      	mov	r2, r4
 800e16a:	2a00      	cmp	r2, #0
 800e16c:	f2c0 80cc 	blt.w	800e308 <__kernel_rem_pio2f+0x3b4>
 800e170:	a944      	add	r1, sp, #272	; 0x110
 800e172:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800e176:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800e254 <__kernel_rem_pio2f+0x300>
 800e17a:	eddf 7a39 	vldr	s15, [pc, #228]	; 800e260 <__kernel_rem_pio2f+0x30c>
 800e17e:	2000      	movs	r0, #0
 800e180:	1aa1      	subs	r1, r4, r2
 800e182:	e0b6      	b.n	800e2f2 <__kernel_rem_pio2f+0x39e>
 800e184:	2702      	movs	r7, #2
 800e186:	e78c      	b.n	800e0a2 <__kernel_rem_pio2f+0x14e>
 800e188:	6820      	ldr	r0, [r4, #0]
 800e18a:	b94b      	cbnz	r3, 800e1a0 <__kernel_rem_pio2f+0x24c>
 800e18c:	b118      	cbz	r0, 800e196 <__kernel_rem_pio2f+0x242>
 800e18e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800e192:	6020      	str	r0, [r4, #0]
 800e194:	2001      	movs	r0, #1
 800e196:	f10e 0e01 	add.w	lr, lr, #1
 800e19a:	3404      	adds	r4, #4
 800e19c:	4603      	mov	r3, r0
 800e19e:	e785      	b.n	800e0ac <__kernel_rem_pio2f+0x158>
 800e1a0:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800e1a4:	6020      	str	r0, [r4, #0]
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	e7f5      	b.n	800e196 <__kernel_rem_pio2f+0x242>
 800e1aa:	1e74      	subs	r4, r6, #1
 800e1ac:	a808      	add	r0, sp, #32
 800e1ae:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800e1b2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800e1b6:	f10d 0c20 	add.w	ip, sp, #32
 800e1ba:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800e1be:	e77e      	b.n	800e0be <__kernel_rem_pio2f+0x16a>
 800e1c0:	1e74      	subs	r4, r6, #1
 800e1c2:	a808      	add	r0, sp, #32
 800e1c4:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800e1c8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800e1cc:	e7f3      	b.n	800e1b6 <__kernel_rem_pio2f+0x262>
 800e1ce:	ab08      	add	r3, sp, #32
 800e1d0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800e1d4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e1d8:	4318      	orrs	r0, r3
 800e1da:	e7ab      	b.n	800e134 <__kernel_rem_pio2f+0x1e0>
 800e1dc:	f10c 0c01 	add.w	ip, ip, #1
 800e1e0:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800e1e4:	2c00      	cmp	r4, #0
 800e1e6:	d0f9      	beq.n	800e1dc <__kernel_rem_pio2f+0x288>
 800e1e8:	9b05      	ldr	r3, [sp, #20]
 800e1ea:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800e1ee:	eb0d 0003 	add.w	r0, sp, r3
 800e1f2:	9b01      	ldr	r3, [sp, #4]
 800e1f4:	18f4      	adds	r4, r6, r3
 800e1f6:	ab1c      	add	r3, sp, #112	; 0x70
 800e1f8:	1c77      	adds	r7, r6, #1
 800e1fa:	384c      	subs	r0, #76	; 0x4c
 800e1fc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e200:	4466      	add	r6, ip
 800e202:	42be      	cmp	r6, r7
 800e204:	f6ff af0b 	blt.w	800e01e <__kernel_rem_pio2f+0xca>
 800e208:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800e20c:	f8dd e008 	ldr.w	lr, [sp, #8]
 800e210:	ee07 3a90 	vmov	s15, r3
 800e214:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e218:	f04f 0c00 	mov.w	ip, #0
 800e21c:	ece4 7a01 	vstmia	r4!, {s15}
 800e220:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800e260 <__kernel_rem_pio2f+0x30c>
 800e224:	46a1      	mov	r9, r4
 800e226:	458c      	cmp	ip, r1
 800e228:	dd07      	ble.n	800e23a <__kernel_rem_pio2f+0x2e6>
 800e22a:	ece0 7a01 	vstmia	r0!, {s15}
 800e22e:	3701      	adds	r7, #1
 800e230:	e7e7      	b.n	800e202 <__kernel_rem_pio2f+0x2ae>
 800e232:	9804      	ldr	r0, [sp, #16]
 800e234:	f04f 0c01 	mov.w	ip, #1
 800e238:	e7d2      	b.n	800e1e0 <__kernel_rem_pio2f+0x28c>
 800e23a:	ecfe 6a01 	vldmia	lr!, {s13}
 800e23e:	ed39 7a01 	vldmdb	r9!, {s14}
 800e242:	f10c 0c01 	add.w	ip, ip, #1
 800e246:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e24a:	e7ec      	b.n	800e226 <__kernel_rem_pio2f+0x2d2>
 800e24c:	3c01      	subs	r4, #1
 800e24e:	e775      	b.n	800e13c <__kernel_rem_pio2f+0x1e8>
 800e250:	0800f994 	.word	0x0800f994
 800e254:	0800f968 	.word	0x0800f968
 800e258:	43800000 	.word	0x43800000
 800e25c:	3b800000 	.word	0x3b800000
 800e260:	00000000 	.word	0x00000000
 800e264:	9b03      	ldr	r3, [sp, #12]
 800e266:	eeb0 0a48 	vmov.f32	s0, s16
 800e26a:	1a98      	subs	r0, r3, r2
 800e26c:	f000 fa8c 	bl	800e788 <scalbnf>
 800e270:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800e258 <__kernel_rem_pio2f+0x304>
 800e274:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800e278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e27c:	db19      	blt.n	800e2b2 <__kernel_rem_pio2f+0x35e>
 800e27e:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800e25c <__kernel_rem_pio2f+0x308>
 800e282:	ee60 7a27 	vmul.f32	s15, s0, s15
 800e286:	aa08      	add	r2, sp, #32
 800e288:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e28c:	1c74      	adds	r4, r6, #1
 800e28e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e292:	3508      	adds	r5, #8
 800e294:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800e298:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e29c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e2a0:	ee10 3a10 	vmov	r3, s0
 800e2a4:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800e2a8:	ee17 3a90 	vmov	r3, s15
 800e2ac:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800e2b0:	e74b      	b.n	800e14a <__kernel_rem_pio2f+0x1f6>
 800e2b2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e2b6:	aa08      	add	r2, sp, #32
 800e2b8:	ee10 3a10 	vmov	r3, s0
 800e2bc:	4634      	mov	r4, r6
 800e2be:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800e2c2:	e742      	b.n	800e14a <__kernel_rem_pio2f+0x1f6>
 800e2c4:	a808      	add	r0, sp, #32
 800e2c6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800e2ca:	9001      	str	r0, [sp, #4]
 800e2cc:	ee07 0a90 	vmov	s15, r0
 800e2d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e2d4:	3a01      	subs	r2, #1
 800e2d6:	ee67 7a80 	vmul.f32	s15, s15, s0
 800e2da:	ee20 0a07 	vmul.f32	s0, s0, s14
 800e2de:	ed61 7a01 	vstmdb	r1!, {s15}
 800e2e2:	e73e      	b.n	800e162 <__kernel_rem_pio2f+0x20e>
 800e2e4:	ecfc 6a01 	vldmia	ip!, {s13}
 800e2e8:	ecb6 7a01 	vldmia	r6!, {s14}
 800e2ec:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e2f0:	3001      	adds	r0, #1
 800e2f2:	4550      	cmp	r0, sl
 800e2f4:	dc01      	bgt.n	800e2fa <__kernel_rem_pio2f+0x3a6>
 800e2f6:	4288      	cmp	r0, r1
 800e2f8:	ddf4      	ble.n	800e2e4 <__kernel_rem_pio2f+0x390>
 800e2fa:	a858      	add	r0, sp, #352	; 0x160
 800e2fc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e300:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800e304:	3a01      	subs	r2, #1
 800e306:	e730      	b.n	800e16a <__kernel_rem_pio2f+0x216>
 800e308:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800e30a:	2a02      	cmp	r2, #2
 800e30c:	dc09      	bgt.n	800e322 <__kernel_rem_pio2f+0x3ce>
 800e30e:	2a00      	cmp	r2, #0
 800e310:	dc2a      	bgt.n	800e368 <__kernel_rem_pio2f+0x414>
 800e312:	d043      	beq.n	800e39c <__kernel_rem_pio2f+0x448>
 800e314:	f009 0007 	and.w	r0, r9, #7
 800e318:	b059      	add	sp, #356	; 0x164
 800e31a:	ecbd 8b04 	vpop	{d8-d9}
 800e31e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e322:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800e324:	2b03      	cmp	r3, #3
 800e326:	d1f5      	bne.n	800e314 <__kernel_rem_pio2f+0x3c0>
 800e328:	ab30      	add	r3, sp, #192	; 0xc0
 800e32a:	442b      	add	r3, r5
 800e32c:	461a      	mov	r2, r3
 800e32e:	4619      	mov	r1, r3
 800e330:	4620      	mov	r0, r4
 800e332:	2800      	cmp	r0, #0
 800e334:	f1a1 0104 	sub.w	r1, r1, #4
 800e338:	dc51      	bgt.n	800e3de <__kernel_rem_pio2f+0x48a>
 800e33a:	4621      	mov	r1, r4
 800e33c:	2901      	cmp	r1, #1
 800e33e:	f1a2 0204 	sub.w	r2, r2, #4
 800e342:	dc5c      	bgt.n	800e3fe <__kernel_rem_pio2f+0x4aa>
 800e344:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800e260 <__kernel_rem_pio2f+0x30c>
 800e348:	3304      	adds	r3, #4
 800e34a:	2c01      	cmp	r4, #1
 800e34c:	dc67      	bgt.n	800e41e <__kernel_rem_pio2f+0x4ca>
 800e34e:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800e352:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800e356:	2f00      	cmp	r7, #0
 800e358:	d167      	bne.n	800e42a <__kernel_rem_pio2f+0x4d6>
 800e35a:	edc8 6a00 	vstr	s13, [r8]
 800e35e:	ed88 7a01 	vstr	s14, [r8, #4]
 800e362:	edc8 7a02 	vstr	s15, [r8, #8]
 800e366:	e7d5      	b.n	800e314 <__kernel_rem_pio2f+0x3c0>
 800e368:	aa30      	add	r2, sp, #192	; 0xc0
 800e36a:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800e260 <__kernel_rem_pio2f+0x30c>
 800e36e:	4413      	add	r3, r2
 800e370:	4622      	mov	r2, r4
 800e372:	2a00      	cmp	r2, #0
 800e374:	da24      	bge.n	800e3c0 <__kernel_rem_pio2f+0x46c>
 800e376:	b34f      	cbz	r7, 800e3cc <__kernel_rem_pio2f+0x478>
 800e378:	eef1 7a47 	vneg.f32	s15, s14
 800e37c:	edc8 7a00 	vstr	s15, [r8]
 800e380:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800e384:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e388:	aa31      	add	r2, sp, #196	; 0xc4
 800e38a:	2301      	movs	r3, #1
 800e38c:	429c      	cmp	r4, r3
 800e38e:	da20      	bge.n	800e3d2 <__kernel_rem_pio2f+0x47e>
 800e390:	b10f      	cbz	r7, 800e396 <__kernel_rem_pio2f+0x442>
 800e392:	eef1 7a67 	vneg.f32	s15, s15
 800e396:	edc8 7a01 	vstr	s15, [r8, #4]
 800e39a:	e7bb      	b.n	800e314 <__kernel_rem_pio2f+0x3c0>
 800e39c:	aa30      	add	r2, sp, #192	; 0xc0
 800e39e:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800e260 <__kernel_rem_pio2f+0x30c>
 800e3a2:	4413      	add	r3, r2
 800e3a4:	2c00      	cmp	r4, #0
 800e3a6:	da05      	bge.n	800e3b4 <__kernel_rem_pio2f+0x460>
 800e3a8:	b10f      	cbz	r7, 800e3ae <__kernel_rem_pio2f+0x45a>
 800e3aa:	eef1 7a67 	vneg.f32	s15, s15
 800e3ae:	edc8 7a00 	vstr	s15, [r8]
 800e3b2:	e7af      	b.n	800e314 <__kernel_rem_pio2f+0x3c0>
 800e3b4:	ed33 7a01 	vldmdb	r3!, {s14}
 800e3b8:	3c01      	subs	r4, #1
 800e3ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e3be:	e7f1      	b.n	800e3a4 <__kernel_rem_pio2f+0x450>
 800e3c0:	ed73 7a01 	vldmdb	r3!, {s15}
 800e3c4:	3a01      	subs	r2, #1
 800e3c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e3ca:	e7d2      	b.n	800e372 <__kernel_rem_pio2f+0x41e>
 800e3cc:	eef0 7a47 	vmov.f32	s15, s14
 800e3d0:	e7d4      	b.n	800e37c <__kernel_rem_pio2f+0x428>
 800e3d2:	ecb2 7a01 	vldmia	r2!, {s14}
 800e3d6:	3301      	adds	r3, #1
 800e3d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e3dc:	e7d6      	b.n	800e38c <__kernel_rem_pio2f+0x438>
 800e3de:	edd1 7a00 	vldr	s15, [r1]
 800e3e2:	edd1 6a01 	vldr	s13, [r1, #4]
 800e3e6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e3ea:	3801      	subs	r0, #1
 800e3ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e3f0:	ed81 7a00 	vstr	s14, [r1]
 800e3f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e3f8:	edc1 7a01 	vstr	s15, [r1, #4]
 800e3fc:	e799      	b.n	800e332 <__kernel_rem_pio2f+0x3de>
 800e3fe:	edd2 7a00 	vldr	s15, [r2]
 800e402:	edd2 6a01 	vldr	s13, [r2, #4]
 800e406:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e40a:	3901      	subs	r1, #1
 800e40c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e410:	ed82 7a00 	vstr	s14, [r2]
 800e414:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e418:	edc2 7a01 	vstr	s15, [r2, #4]
 800e41c:	e78e      	b.n	800e33c <__kernel_rem_pio2f+0x3e8>
 800e41e:	ed33 7a01 	vldmdb	r3!, {s14}
 800e422:	3c01      	subs	r4, #1
 800e424:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e428:	e78f      	b.n	800e34a <__kernel_rem_pio2f+0x3f6>
 800e42a:	eef1 6a66 	vneg.f32	s13, s13
 800e42e:	eeb1 7a47 	vneg.f32	s14, s14
 800e432:	edc8 6a00 	vstr	s13, [r8]
 800e436:	ed88 7a01 	vstr	s14, [r8, #4]
 800e43a:	eef1 7a67 	vneg.f32	s15, s15
 800e43e:	e790      	b.n	800e362 <__kernel_rem_pio2f+0x40e>

0800e440 <__kernel_sinf>:
 800e440:	ee10 3a10 	vmov	r3, s0
 800e444:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e448:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800e44c:	da04      	bge.n	800e458 <__kernel_sinf+0x18>
 800e44e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800e452:	ee17 3a90 	vmov	r3, s15
 800e456:	b35b      	cbz	r3, 800e4b0 <__kernel_sinf+0x70>
 800e458:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e45c:	eddf 7a15 	vldr	s15, [pc, #84]	; 800e4b4 <__kernel_sinf+0x74>
 800e460:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800e4b8 <__kernel_sinf+0x78>
 800e464:	eea7 6a27 	vfma.f32	s12, s14, s15
 800e468:	eddf 7a14 	vldr	s15, [pc, #80]	; 800e4bc <__kernel_sinf+0x7c>
 800e46c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e470:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800e4c0 <__kernel_sinf+0x80>
 800e474:	eea7 6a87 	vfma.f32	s12, s15, s14
 800e478:	eddf 7a12 	vldr	s15, [pc, #72]	; 800e4c4 <__kernel_sinf+0x84>
 800e47c:	ee60 6a07 	vmul.f32	s13, s0, s14
 800e480:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e484:	b930      	cbnz	r0, 800e494 <__kernel_sinf+0x54>
 800e486:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800e4c8 <__kernel_sinf+0x88>
 800e48a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800e48e:	eea6 0a26 	vfma.f32	s0, s12, s13
 800e492:	4770      	bx	lr
 800e494:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800e498:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800e49c:	eee0 7a86 	vfma.f32	s15, s1, s12
 800e4a0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800e4a4:	eddf 7a09 	vldr	s15, [pc, #36]	; 800e4cc <__kernel_sinf+0x8c>
 800e4a8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800e4ac:	ee30 0a60 	vsub.f32	s0, s0, s1
 800e4b0:	4770      	bx	lr
 800e4b2:	bf00      	nop
 800e4b4:	2f2ec9d3 	.word	0x2f2ec9d3
 800e4b8:	b2d72f34 	.word	0xb2d72f34
 800e4bc:	3638ef1b 	.word	0x3638ef1b
 800e4c0:	b9500d01 	.word	0xb9500d01
 800e4c4:	3c088889 	.word	0x3c088889
 800e4c8:	be2aaaab 	.word	0xbe2aaaab
 800e4cc:	3e2aaaab 	.word	0x3e2aaaab

0800e4d0 <fabs>:
 800e4d0:	ec51 0b10 	vmov	r0, r1, d0
 800e4d4:	ee10 2a10 	vmov	r2, s0
 800e4d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e4dc:	ec43 2b10 	vmov	d0, r2, r3
 800e4e0:	4770      	bx	lr
 800e4e2:	0000      	movs	r0, r0
 800e4e4:	0000      	movs	r0, r0
	...

0800e4e8 <floor>:
 800e4e8:	ec51 0b10 	vmov	r0, r1, d0
 800e4ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4f0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800e4f4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800e4f8:	2e13      	cmp	r6, #19
 800e4fa:	ee10 5a10 	vmov	r5, s0
 800e4fe:	ee10 8a10 	vmov	r8, s0
 800e502:	460c      	mov	r4, r1
 800e504:	dc32      	bgt.n	800e56c <floor+0x84>
 800e506:	2e00      	cmp	r6, #0
 800e508:	da14      	bge.n	800e534 <floor+0x4c>
 800e50a:	a333      	add	r3, pc, #204	; (adr r3, 800e5d8 <floor+0xf0>)
 800e50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e510:	f7f1 fe6c 	bl	80001ec <__adddf3>
 800e514:	2200      	movs	r2, #0
 800e516:	2300      	movs	r3, #0
 800e518:	f7f2 faae 	bl	8000a78 <__aeabi_dcmpgt>
 800e51c:	b138      	cbz	r0, 800e52e <floor+0x46>
 800e51e:	2c00      	cmp	r4, #0
 800e520:	da57      	bge.n	800e5d2 <floor+0xea>
 800e522:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e526:	431d      	orrs	r5, r3
 800e528:	d001      	beq.n	800e52e <floor+0x46>
 800e52a:	4c2d      	ldr	r4, [pc, #180]	; (800e5e0 <floor+0xf8>)
 800e52c:	2500      	movs	r5, #0
 800e52e:	4621      	mov	r1, r4
 800e530:	4628      	mov	r0, r5
 800e532:	e025      	b.n	800e580 <floor+0x98>
 800e534:	4f2b      	ldr	r7, [pc, #172]	; (800e5e4 <floor+0xfc>)
 800e536:	4137      	asrs	r7, r6
 800e538:	ea01 0307 	and.w	r3, r1, r7
 800e53c:	4303      	orrs	r3, r0
 800e53e:	d01f      	beq.n	800e580 <floor+0x98>
 800e540:	a325      	add	r3, pc, #148	; (adr r3, 800e5d8 <floor+0xf0>)
 800e542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e546:	f7f1 fe51 	bl	80001ec <__adddf3>
 800e54a:	2200      	movs	r2, #0
 800e54c:	2300      	movs	r3, #0
 800e54e:	f7f2 fa93 	bl	8000a78 <__aeabi_dcmpgt>
 800e552:	2800      	cmp	r0, #0
 800e554:	d0eb      	beq.n	800e52e <floor+0x46>
 800e556:	2c00      	cmp	r4, #0
 800e558:	bfbe      	ittt	lt
 800e55a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e55e:	fa43 f606 	asrlt.w	r6, r3, r6
 800e562:	19a4      	addlt	r4, r4, r6
 800e564:	ea24 0407 	bic.w	r4, r4, r7
 800e568:	2500      	movs	r5, #0
 800e56a:	e7e0      	b.n	800e52e <floor+0x46>
 800e56c:	2e33      	cmp	r6, #51	; 0x33
 800e56e:	dd0b      	ble.n	800e588 <floor+0xa0>
 800e570:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e574:	d104      	bne.n	800e580 <floor+0x98>
 800e576:	ee10 2a10 	vmov	r2, s0
 800e57a:	460b      	mov	r3, r1
 800e57c:	f7f1 fe36 	bl	80001ec <__adddf3>
 800e580:	ec41 0b10 	vmov	d0, r0, r1
 800e584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e588:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800e58c:	f04f 33ff 	mov.w	r3, #4294967295
 800e590:	fa23 f707 	lsr.w	r7, r3, r7
 800e594:	4207      	tst	r7, r0
 800e596:	d0f3      	beq.n	800e580 <floor+0x98>
 800e598:	a30f      	add	r3, pc, #60	; (adr r3, 800e5d8 <floor+0xf0>)
 800e59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e59e:	f7f1 fe25 	bl	80001ec <__adddf3>
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	f7f2 fa67 	bl	8000a78 <__aeabi_dcmpgt>
 800e5aa:	2800      	cmp	r0, #0
 800e5ac:	d0bf      	beq.n	800e52e <floor+0x46>
 800e5ae:	2c00      	cmp	r4, #0
 800e5b0:	da02      	bge.n	800e5b8 <floor+0xd0>
 800e5b2:	2e14      	cmp	r6, #20
 800e5b4:	d103      	bne.n	800e5be <floor+0xd6>
 800e5b6:	3401      	adds	r4, #1
 800e5b8:	ea25 0507 	bic.w	r5, r5, r7
 800e5bc:	e7b7      	b.n	800e52e <floor+0x46>
 800e5be:	2301      	movs	r3, #1
 800e5c0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e5c4:	fa03 f606 	lsl.w	r6, r3, r6
 800e5c8:	4435      	add	r5, r6
 800e5ca:	4545      	cmp	r5, r8
 800e5cc:	bf38      	it	cc
 800e5ce:	18e4      	addcc	r4, r4, r3
 800e5d0:	e7f2      	b.n	800e5b8 <floor+0xd0>
 800e5d2:	2500      	movs	r5, #0
 800e5d4:	462c      	mov	r4, r5
 800e5d6:	e7aa      	b.n	800e52e <floor+0x46>
 800e5d8:	8800759c 	.word	0x8800759c
 800e5dc:	7e37e43c 	.word	0x7e37e43c
 800e5e0:	bff00000 	.word	0xbff00000
 800e5e4:	000fffff 	.word	0x000fffff

0800e5e8 <scalbn>:
 800e5e8:	b570      	push	{r4, r5, r6, lr}
 800e5ea:	ec55 4b10 	vmov	r4, r5, d0
 800e5ee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e5f2:	4606      	mov	r6, r0
 800e5f4:	462b      	mov	r3, r5
 800e5f6:	b99a      	cbnz	r2, 800e620 <scalbn+0x38>
 800e5f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e5fc:	4323      	orrs	r3, r4
 800e5fe:	d036      	beq.n	800e66e <scalbn+0x86>
 800e600:	4b39      	ldr	r3, [pc, #228]	; (800e6e8 <scalbn+0x100>)
 800e602:	4629      	mov	r1, r5
 800e604:	ee10 0a10 	vmov	r0, s0
 800e608:	2200      	movs	r2, #0
 800e60a:	f7f1 ffa5 	bl	8000558 <__aeabi_dmul>
 800e60e:	4b37      	ldr	r3, [pc, #220]	; (800e6ec <scalbn+0x104>)
 800e610:	429e      	cmp	r6, r3
 800e612:	4604      	mov	r4, r0
 800e614:	460d      	mov	r5, r1
 800e616:	da10      	bge.n	800e63a <scalbn+0x52>
 800e618:	a32b      	add	r3, pc, #172	; (adr r3, 800e6c8 <scalbn+0xe0>)
 800e61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e61e:	e03a      	b.n	800e696 <scalbn+0xae>
 800e620:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e624:	428a      	cmp	r2, r1
 800e626:	d10c      	bne.n	800e642 <scalbn+0x5a>
 800e628:	ee10 2a10 	vmov	r2, s0
 800e62c:	4620      	mov	r0, r4
 800e62e:	4629      	mov	r1, r5
 800e630:	f7f1 fddc 	bl	80001ec <__adddf3>
 800e634:	4604      	mov	r4, r0
 800e636:	460d      	mov	r5, r1
 800e638:	e019      	b.n	800e66e <scalbn+0x86>
 800e63a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e63e:	460b      	mov	r3, r1
 800e640:	3a36      	subs	r2, #54	; 0x36
 800e642:	4432      	add	r2, r6
 800e644:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e648:	428a      	cmp	r2, r1
 800e64a:	dd08      	ble.n	800e65e <scalbn+0x76>
 800e64c:	2d00      	cmp	r5, #0
 800e64e:	a120      	add	r1, pc, #128	; (adr r1, 800e6d0 <scalbn+0xe8>)
 800e650:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e654:	da1c      	bge.n	800e690 <scalbn+0xa8>
 800e656:	a120      	add	r1, pc, #128	; (adr r1, 800e6d8 <scalbn+0xf0>)
 800e658:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e65c:	e018      	b.n	800e690 <scalbn+0xa8>
 800e65e:	2a00      	cmp	r2, #0
 800e660:	dd08      	ble.n	800e674 <scalbn+0x8c>
 800e662:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e666:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e66a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e66e:	ec45 4b10 	vmov	d0, r4, r5
 800e672:	bd70      	pop	{r4, r5, r6, pc}
 800e674:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e678:	da19      	bge.n	800e6ae <scalbn+0xc6>
 800e67a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e67e:	429e      	cmp	r6, r3
 800e680:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800e684:	dd0a      	ble.n	800e69c <scalbn+0xb4>
 800e686:	a112      	add	r1, pc, #72	; (adr r1, 800e6d0 <scalbn+0xe8>)
 800e688:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d1e2      	bne.n	800e656 <scalbn+0x6e>
 800e690:	a30f      	add	r3, pc, #60	; (adr r3, 800e6d0 <scalbn+0xe8>)
 800e692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e696:	f7f1 ff5f 	bl	8000558 <__aeabi_dmul>
 800e69a:	e7cb      	b.n	800e634 <scalbn+0x4c>
 800e69c:	a10a      	add	r1, pc, #40	; (adr r1, 800e6c8 <scalbn+0xe0>)
 800e69e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d0b8      	beq.n	800e618 <scalbn+0x30>
 800e6a6:	a10e      	add	r1, pc, #56	; (adr r1, 800e6e0 <scalbn+0xf8>)
 800e6a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6ac:	e7b4      	b.n	800e618 <scalbn+0x30>
 800e6ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e6b2:	3236      	adds	r2, #54	; 0x36
 800e6b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e6b8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e6bc:	4620      	mov	r0, r4
 800e6be:	4b0c      	ldr	r3, [pc, #48]	; (800e6f0 <scalbn+0x108>)
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	e7e8      	b.n	800e696 <scalbn+0xae>
 800e6c4:	f3af 8000 	nop.w
 800e6c8:	c2f8f359 	.word	0xc2f8f359
 800e6cc:	01a56e1f 	.word	0x01a56e1f
 800e6d0:	8800759c 	.word	0x8800759c
 800e6d4:	7e37e43c 	.word	0x7e37e43c
 800e6d8:	8800759c 	.word	0x8800759c
 800e6dc:	fe37e43c 	.word	0xfe37e43c
 800e6e0:	c2f8f359 	.word	0xc2f8f359
 800e6e4:	81a56e1f 	.word	0x81a56e1f
 800e6e8:	43500000 	.word	0x43500000
 800e6ec:	ffff3cb0 	.word	0xffff3cb0
 800e6f0:	3c900000 	.word	0x3c900000

0800e6f4 <fabsf>:
 800e6f4:	ee10 3a10 	vmov	r3, s0
 800e6f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e6fc:	ee00 3a10 	vmov	s0, r3
 800e700:	4770      	bx	lr
	...

0800e704 <floorf>:
 800e704:	ee10 3a10 	vmov	r3, s0
 800e708:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e70c:	3a7f      	subs	r2, #127	; 0x7f
 800e70e:	2a16      	cmp	r2, #22
 800e710:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e714:	dc2a      	bgt.n	800e76c <floorf+0x68>
 800e716:	2a00      	cmp	r2, #0
 800e718:	da11      	bge.n	800e73e <floorf+0x3a>
 800e71a:	eddf 7a18 	vldr	s15, [pc, #96]	; 800e77c <floorf+0x78>
 800e71e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e722:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e72a:	dd05      	ble.n	800e738 <floorf+0x34>
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	da23      	bge.n	800e778 <floorf+0x74>
 800e730:	4a13      	ldr	r2, [pc, #76]	; (800e780 <floorf+0x7c>)
 800e732:	2900      	cmp	r1, #0
 800e734:	bf18      	it	ne
 800e736:	4613      	movne	r3, r2
 800e738:	ee00 3a10 	vmov	s0, r3
 800e73c:	4770      	bx	lr
 800e73e:	4911      	ldr	r1, [pc, #68]	; (800e784 <floorf+0x80>)
 800e740:	4111      	asrs	r1, r2
 800e742:	420b      	tst	r3, r1
 800e744:	d0fa      	beq.n	800e73c <floorf+0x38>
 800e746:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800e77c <floorf+0x78>
 800e74a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e74e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e756:	ddef      	ble.n	800e738 <floorf+0x34>
 800e758:	2b00      	cmp	r3, #0
 800e75a:	bfbe      	ittt	lt
 800e75c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800e760:	fa40 f202 	asrlt.w	r2, r0, r2
 800e764:	189b      	addlt	r3, r3, r2
 800e766:	ea23 0301 	bic.w	r3, r3, r1
 800e76a:	e7e5      	b.n	800e738 <floorf+0x34>
 800e76c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800e770:	d3e4      	bcc.n	800e73c <floorf+0x38>
 800e772:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e776:	4770      	bx	lr
 800e778:	2300      	movs	r3, #0
 800e77a:	e7dd      	b.n	800e738 <floorf+0x34>
 800e77c:	7149f2ca 	.word	0x7149f2ca
 800e780:	bf800000 	.word	0xbf800000
 800e784:	007fffff 	.word	0x007fffff

0800e788 <scalbnf>:
 800e788:	ee10 3a10 	vmov	r3, s0
 800e78c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800e790:	d025      	beq.n	800e7de <scalbnf+0x56>
 800e792:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800e796:	d302      	bcc.n	800e79e <scalbnf+0x16>
 800e798:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e79c:	4770      	bx	lr
 800e79e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800e7a2:	d122      	bne.n	800e7ea <scalbnf+0x62>
 800e7a4:	4b2a      	ldr	r3, [pc, #168]	; (800e850 <scalbnf+0xc8>)
 800e7a6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800e854 <scalbnf+0xcc>
 800e7aa:	4298      	cmp	r0, r3
 800e7ac:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e7b0:	db16      	blt.n	800e7e0 <scalbnf+0x58>
 800e7b2:	ee10 3a10 	vmov	r3, s0
 800e7b6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e7ba:	3a19      	subs	r2, #25
 800e7bc:	4402      	add	r2, r0
 800e7be:	2afe      	cmp	r2, #254	; 0xfe
 800e7c0:	dd15      	ble.n	800e7ee <scalbnf+0x66>
 800e7c2:	ee10 3a10 	vmov	r3, s0
 800e7c6:	eddf 7a24 	vldr	s15, [pc, #144]	; 800e858 <scalbnf+0xd0>
 800e7ca:	eddf 6a24 	vldr	s13, [pc, #144]	; 800e85c <scalbnf+0xd4>
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	eeb0 7a67 	vmov.f32	s14, s15
 800e7d4:	bfb8      	it	lt
 800e7d6:	eef0 7a66 	vmovlt.f32	s15, s13
 800e7da:	ee27 0a27 	vmul.f32	s0, s14, s15
 800e7de:	4770      	bx	lr
 800e7e0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800e860 <scalbnf+0xd8>
 800e7e4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e7e8:	4770      	bx	lr
 800e7ea:	0dd2      	lsrs	r2, r2, #23
 800e7ec:	e7e6      	b.n	800e7bc <scalbnf+0x34>
 800e7ee:	2a00      	cmp	r2, #0
 800e7f0:	dd06      	ble.n	800e800 <scalbnf+0x78>
 800e7f2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e7f6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800e7fa:	ee00 3a10 	vmov	s0, r3
 800e7fe:	4770      	bx	lr
 800e800:	f112 0f16 	cmn.w	r2, #22
 800e804:	da1a      	bge.n	800e83c <scalbnf+0xb4>
 800e806:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e80a:	4298      	cmp	r0, r3
 800e80c:	ee10 3a10 	vmov	r3, s0
 800e810:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e814:	dd0a      	ble.n	800e82c <scalbnf+0xa4>
 800e816:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800e858 <scalbnf+0xd0>
 800e81a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800e85c <scalbnf+0xd4>
 800e81e:	eef0 7a40 	vmov.f32	s15, s0
 800e822:	2b00      	cmp	r3, #0
 800e824:	bf18      	it	ne
 800e826:	eeb0 0a47 	vmovne.f32	s0, s14
 800e82a:	e7db      	b.n	800e7e4 <scalbnf+0x5c>
 800e82c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800e860 <scalbnf+0xd8>
 800e830:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800e864 <scalbnf+0xdc>
 800e834:	eef0 7a40 	vmov.f32	s15, s0
 800e838:	2b00      	cmp	r3, #0
 800e83a:	e7f3      	b.n	800e824 <scalbnf+0x9c>
 800e83c:	3219      	adds	r2, #25
 800e83e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e842:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800e846:	eddf 7a08 	vldr	s15, [pc, #32]	; 800e868 <scalbnf+0xe0>
 800e84a:	ee07 3a10 	vmov	s14, r3
 800e84e:	e7c4      	b.n	800e7da <scalbnf+0x52>
 800e850:	ffff3cb0 	.word	0xffff3cb0
 800e854:	4c000000 	.word	0x4c000000
 800e858:	7149f2ca 	.word	0x7149f2ca
 800e85c:	f149f2ca 	.word	0xf149f2ca
 800e860:	0da24260 	.word	0x0da24260
 800e864:	8da24260 	.word	0x8da24260
 800e868:	33000000 	.word	0x33000000

0800e86c <abort>:
 800e86c:	b508      	push	{r3, lr}
 800e86e:	2006      	movs	r0, #6
 800e870:	f000 f984 	bl	800eb7c <raise>
 800e874:	2001      	movs	r0, #1
 800e876:	f7f7 ff6d 	bl	8006754 <_exit>
	...

0800e87c <__errno>:
 800e87c:	4b01      	ldr	r3, [pc, #4]	; (800e884 <__errno+0x8>)
 800e87e:	6818      	ldr	r0, [r3, #0]
 800e880:	4770      	bx	lr
 800e882:	bf00      	nop
 800e884:	20000038 	.word	0x20000038

0800e888 <__libc_init_array>:
 800e888:	b570      	push	{r4, r5, r6, lr}
 800e88a:	4d0d      	ldr	r5, [pc, #52]	; (800e8c0 <__libc_init_array+0x38>)
 800e88c:	4c0d      	ldr	r4, [pc, #52]	; (800e8c4 <__libc_init_array+0x3c>)
 800e88e:	1b64      	subs	r4, r4, r5
 800e890:	10a4      	asrs	r4, r4, #2
 800e892:	2600      	movs	r6, #0
 800e894:	42a6      	cmp	r6, r4
 800e896:	d109      	bne.n	800e8ac <__libc_init_array+0x24>
 800e898:	4d0b      	ldr	r5, [pc, #44]	; (800e8c8 <__libc_init_array+0x40>)
 800e89a:	4c0c      	ldr	r4, [pc, #48]	; (800e8cc <__libc_init_array+0x44>)
 800e89c:	f000 fa1a 	bl	800ecd4 <_init>
 800e8a0:	1b64      	subs	r4, r4, r5
 800e8a2:	10a4      	asrs	r4, r4, #2
 800e8a4:	2600      	movs	r6, #0
 800e8a6:	42a6      	cmp	r6, r4
 800e8a8:	d105      	bne.n	800e8b6 <__libc_init_array+0x2e>
 800e8aa:	bd70      	pop	{r4, r5, r6, pc}
 800e8ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800e8b0:	4798      	blx	r3
 800e8b2:	3601      	adds	r6, #1
 800e8b4:	e7ee      	b.n	800e894 <__libc_init_array+0xc>
 800e8b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e8ba:	4798      	blx	r3
 800e8bc:	3601      	adds	r6, #1
 800e8be:	e7f2      	b.n	800e8a6 <__libc_init_array+0x1e>
 800e8c0:	0800fa08 	.word	0x0800fa08
 800e8c4:	0800fa08 	.word	0x0800fa08
 800e8c8:	0800fa08 	.word	0x0800fa08
 800e8cc:	0800fa14 	.word	0x0800fa14

0800e8d0 <__retarget_lock_acquire_recursive>:
 800e8d0:	4770      	bx	lr

0800e8d2 <__retarget_lock_release_recursive>:
 800e8d2:	4770      	bx	lr

0800e8d4 <memcpy>:
 800e8d4:	440a      	add	r2, r1
 800e8d6:	4291      	cmp	r1, r2
 800e8d8:	f100 33ff 	add.w	r3, r0, #4294967295
 800e8dc:	d100      	bne.n	800e8e0 <memcpy+0xc>
 800e8de:	4770      	bx	lr
 800e8e0:	b510      	push	{r4, lr}
 800e8e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e8e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e8ea:	4291      	cmp	r1, r2
 800e8ec:	d1f9      	bne.n	800e8e2 <memcpy+0xe>
 800e8ee:	bd10      	pop	{r4, pc}

0800e8f0 <memset>:
 800e8f0:	4402      	add	r2, r0
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	4293      	cmp	r3, r2
 800e8f6:	d100      	bne.n	800e8fa <memset+0xa>
 800e8f8:	4770      	bx	lr
 800e8fa:	f803 1b01 	strb.w	r1, [r3], #1
 800e8fe:	e7f9      	b.n	800e8f4 <memset+0x4>

0800e900 <sbrk_aligned>:
 800e900:	b570      	push	{r4, r5, r6, lr}
 800e902:	4e0e      	ldr	r6, [pc, #56]	; (800e93c <sbrk_aligned+0x3c>)
 800e904:	460c      	mov	r4, r1
 800e906:	6831      	ldr	r1, [r6, #0]
 800e908:	4605      	mov	r5, r0
 800e90a:	b911      	cbnz	r1, 800e912 <sbrk_aligned+0x12>
 800e90c:	f000 f8fe 	bl	800eb0c <_sbrk_r>
 800e910:	6030      	str	r0, [r6, #0]
 800e912:	4621      	mov	r1, r4
 800e914:	4628      	mov	r0, r5
 800e916:	f000 f8f9 	bl	800eb0c <_sbrk_r>
 800e91a:	1c43      	adds	r3, r0, #1
 800e91c:	d00a      	beq.n	800e934 <sbrk_aligned+0x34>
 800e91e:	1cc4      	adds	r4, r0, #3
 800e920:	f024 0403 	bic.w	r4, r4, #3
 800e924:	42a0      	cmp	r0, r4
 800e926:	d007      	beq.n	800e938 <sbrk_aligned+0x38>
 800e928:	1a21      	subs	r1, r4, r0
 800e92a:	4628      	mov	r0, r5
 800e92c:	f000 f8ee 	bl	800eb0c <_sbrk_r>
 800e930:	3001      	adds	r0, #1
 800e932:	d101      	bne.n	800e938 <sbrk_aligned+0x38>
 800e934:	f04f 34ff 	mov.w	r4, #4294967295
 800e938:	4620      	mov	r0, r4
 800e93a:	bd70      	pop	{r4, r5, r6, pc}
 800e93c:	20006cac 	.word	0x20006cac

0800e940 <_malloc_r>:
 800e940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e944:	1ccd      	adds	r5, r1, #3
 800e946:	f025 0503 	bic.w	r5, r5, #3
 800e94a:	3508      	adds	r5, #8
 800e94c:	2d0c      	cmp	r5, #12
 800e94e:	bf38      	it	cc
 800e950:	250c      	movcc	r5, #12
 800e952:	2d00      	cmp	r5, #0
 800e954:	4607      	mov	r7, r0
 800e956:	db01      	blt.n	800e95c <_malloc_r+0x1c>
 800e958:	42a9      	cmp	r1, r5
 800e95a:	d905      	bls.n	800e968 <_malloc_r+0x28>
 800e95c:	230c      	movs	r3, #12
 800e95e:	603b      	str	r3, [r7, #0]
 800e960:	2600      	movs	r6, #0
 800e962:	4630      	mov	r0, r6
 800e964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e968:	4e2e      	ldr	r6, [pc, #184]	; (800ea24 <_malloc_r+0xe4>)
 800e96a:	f000 f923 	bl	800ebb4 <__malloc_lock>
 800e96e:	6833      	ldr	r3, [r6, #0]
 800e970:	461c      	mov	r4, r3
 800e972:	bb34      	cbnz	r4, 800e9c2 <_malloc_r+0x82>
 800e974:	4629      	mov	r1, r5
 800e976:	4638      	mov	r0, r7
 800e978:	f7ff ffc2 	bl	800e900 <sbrk_aligned>
 800e97c:	1c43      	adds	r3, r0, #1
 800e97e:	4604      	mov	r4, r0
 800e980:	d14d      	bne.n	800ea1e <_malloc_r+0xde>
 800e982:	6834      	ldr	r4, [r6, #0]
 800e984:	4626      	mov	r6, r4
 800e986:	2e00      	cmp	r6, #0
 800e988:	d140      	bne.n	800ea0c <_malloc_r+0xcc>
 800e98a:	6823      	ldr	r3, [r4, #0]
 800e98c:	4631      	mov	r1, r6
 800e98e:	4638      	mov	r0, r7
 800e990:	eb04 0803 	add.w	r8, r4, r3
 800e994:	f000 f8ba 	bl	800eb0c <_sbrk_r>
 800e998:	4580      	cmp	r8, r0
 800e99a:	d13a      	bne.n	800ea12 <_malloc_r+0xd2>
 800e99c:	6821      	ldr	r1, [r4, #0]
 800e99e:	3503      	adds	r5, #3
 800e9a0:	1a6d      	subs	r5, r5, r1
 800e9a2:	f025 0503 	bic.w	r5, r5, #3
 800e9a6:	3508      	adds	r5, #8
 800e9a8:	2d0c      	cmp	r5, #12
 800e9aa:	bf38      	it	cc
 800e9ac:	250c      	movcc	r5, #12
 800e9ae:	4629      	mov	r1, r5
 800e9b0:	4638      	mov	r0, r7
 800e9b2:	f7ff ffa5 	bl	800e900 <sbrk_aligned>
 800e9b6:	3001      	adds	r0, #1
 800e9b8:	d02b      	beq.n	800ea12 <_malloc_r+0xd2>
 800e9ba:	6823      	ldr	r3, [r4, #0]
 800e9bc:	442b      	add	r3, r5
 800e9be:	6023      	str	r3, [r4, #0]
 800e9c0:	e00e      	b.n	800e9e0 <_malloc_r+0xa0>
 800e9c2:	6822      	ldr	r2, [r4, #0]
 800e9c4:	1b52      	subs	r2, r2, r5
 800e9c6:	d41e      	bmi.n	800ea06 <_malloc_r+0xc6>
 800e9c8:	2a0b      	cmp	r2, #11
 800e9ca:	d916      	bls.n	800e9fa <_malloc_r+0xba>
 800e9cc:	1961      	adds	r1, r4, r5
 800e9ce:	42a3      	cmp	r3, r4
 800e9d0:	6025      	str	r5, [r4, #0]
 800e9d2:	bf18      	it	ne
 800e9d4:	6059      	strne	r1, [r3, #4]
 800e9d6:	6863      	ldr	r3, [r4, #4]
 800e9d8:	bf08      	it	eq
 800e9da:	6031      	streq	r1, [r6, #0]
 800e9dc:	5162      	str	r2, [r4, r5]
 800e9de:	604b      	str	r3, [r1, #4]
 800e9e0:	4638      	mov	r0, r7
 800e9e2:	f104 060b 	add.w	r6, r4, #11
 800e9e6:	f000 f8eb 	bl	800ebc0 <__malloc_unlock>
 800e9ea:	f026 0607 	bic.w	r6, r6, #7
 800e9ee:	1d23      	adds	r3, r4, #4
 800e9f0:	1af2      	subs	r2, r6, r3
 800e9f2:	d0b6      	beq.n	800e962 <_malloc_r+0x22>
 800e9f4:	1b9b      	subs	r3, r3, r6
 800e9f6:	50a3      	str	r3, [r4, r2]
 800e9f8:	e7b3      	b.n	800e962 <_malloc_r+0x22>
 800e9fa:	6862      	ldr	r2, [r4, #4]
 800e9fc:	42a3      	cmp	r3, r4
 800e9fe:	bf0c      	ite	eq
 800ea00:	6032      	streq	r2, [r6, #0]
 800ea02:	605a      	strne	r2, [r3, #4]
 800ea04:	e7ec      	b.n	800e9e0 <_malloc_r+0xa0>
 800ea06:	4623      	mov	r3, r4
 800ea08:	6864      	ldr	r4, [r4, #4]
 800ea0a:	e7b2      	b.n	800e972 <_malloc_r+0x32>
 800ea0c:	4634      	mov	r4, r6
 800ea0e:	6876      	ldr	r6, [r6, #4]
 800ea10:	e7b9      	b.n	800e986 <_malloc_r+0x46>
 800ea12:	230c      	movs	r3, #12
 800ea14:	603b      	str	r3, [r7, #0]
 800ea16:	4638      	mov	r0, r7
 800ea18:	f000 f8d2 	bl	800ebc0 <__malloc_unlock>
 800ea1c:	e7a1      	b.n	800e962 <_malloc_r+0x22>
 800ea1e:	6025      	str	r5, [r4, #0]
 800ea20:	e7de      	b.n	800e9e0 <_malloc_r+0xa0>
 800ea22:	bf00      	nop
 800ea24:	20006ca8 	.word	0x20006ca8

0800ea28 <realloc>:
 800ea28:	4b02      	ldr	r3, [pc, #8]	; (800ea34 <realloc+0xc>)
 800ea2a:	460a      	mov	r2, r1
 800ea2c:	4601      	mov	r1, r0
 800ea2e:	6818      	ldr	r0, [r3, #0]
 800ea30:	f000 b918 	b.w	800ec64 <_realloc_r>
 800ea34:	20000038 	.word	0x20000038

0800ea38 <cleanup_glue>:
 800ea38:	b538      	push	{r3, r4, r5, lr}
 800ea3a:	460c      	mov	r4, r1
 800ea3c:	6809      	ldr	r1, [r1, #0]
 800ea3e:	4605      	mov	r5, r0
 800ea40:	b109      	cbz	r1, 800ea46 <cleanup_glue+0xe>
 800ea42:	f7ff fff9 	bl	800ea38 <cleanup_glue>
 800ea46:	4621      	mov	r1, r4
 800ea48:	4628      	mov	r0, r5
 800ea4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea4e:	f000 b8bd 	b.w	800ebcc <_free_r>
	...

0800ea54 <_reclaim_reent>:
 800ea54:	4b2c      	ldr	r3, [pc, #176]	; (800eb08 <_reclaim_reent+0xb4>)
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	4283      	cmp	r3, r0
 800ea5a:	b570      	push	{r4, r5, r6, lr}
 800ea5c:	4604      	mov	r4, r0
 800ea5e:	d051      	beq.n	800eb04 <_reclaim_reent+0xb0>
 800ea60:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ea62:	b143      	cbz	r3, 800ea76 <_reclaim_reent+0x22>
 800ea64:	68db      	ldr	r3, [r3, #12]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d14a      	bne.n	800eb00 <_reclaim_reent+0xac>
 800ea6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea6c:	6819      	ldr	r1, [r3, #0]
 800ea6e:	b111      	cbz	r1, 800ea76 <_reclaim_reent+0x22>
 800ea70:	4620      	mov	r0, r4
 800ea72:	f000 f8ab 	bl	800ebcc <_free_r>
 800ea76:	6961      	ldr	r1, [r4, #20]
 800ea78:	b111      	cbz	r1, 800ea80 <_reclaim_reent+0x2c>
 800ea7a:	4620      	mov	r0, r4
 800ea7c:	f000 f8a6 	bl	800ebcc <_free_r>
 800ea80:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ea82:	b111      	cbz	r1, 800ea8a <_reclaim_reent+0x36>
 800ea84:	4620      	mov	r0, r4
 800ea86:	f000 f8a1 	bl	800ebcc <_free_r>
 800ea8a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ea8c:	b111      	cbz	r1, 800ea94 <_reclaim_reent+0x40>
 800ea8e:	4620      	mov	r0, r4
 800ea90:	f000 f89c 	bl	800ebcc <_free_r>
 800ea94:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ea96:	b111      	cbz	r1, 800ea9e <_reclaim_reent+0x4a>
 800ea98:	4620      	mov	r0, r4
 800ea9a:	f000 f897 	bl	800ebcc <_free_r>
 800ea9e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800eaa0:	b111      	cbz	r1, 800eaa8 <_reclaim_reent+0x54>
 800eaa2:	4620      	mov	r0, r4
 800eaa4:	f000 f892 	bl	800ebcc <_free_r>
 800eaa8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800eaaa:	b111      	cbz	r1, 800eab2 <_reclaim_reent+0x5e>
 800eaac:	4620      	mov	r0, r4
 800eaae:	f000 f88d 	bl	800ebcc <_free_r>
 800eab2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800eab4:	b111      	cbz	r1, 800eabc <_reclaim_reent+0x68>
 800eab6:	4620      	mov	r0, r4
 800eab8:	f000 f888 	bl	800ebcc <_free_r>
 800eabc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eabe:	b111      	cbz	r1, 800eac6 <_reclaim_reent+0x72>
 800eac0:	4620      	mov	r0, r4
 800eac2:	f000 f883 	bl	800ebcc <_free_r>
 800eac6:	69a3      	ldr	r3, [r4, #24]
 800eac8:	b1e3      	cbz	r3, 800eb04 <_reclaim_reent+0xb0>
 800eaca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800eacc:	4620      	mov	r0, r4
 800eace:	4798      	blx	r3
 800ead0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ead2:	b1b9      	cbz	r1, 800eb04 <_reclaim_reent+0xb0>
 800ead4:	4620      	mov	r0, r4
 800ead6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eada:	f7ff bfad 	b.w	800ea38 <cleanup_glue>
 800eade:	5949      	ldr	r1, [r1, r5]
 800eae0:	b941      	cbnz	r1, 800eaf4 <_reclaim_reent+0xa0>
 800eae2:	3504      	adds	r5, #4
 800eae4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eae6:	2d80      	cmp	r5, #128	; 0x80
 800eae8:	68d9      	ldr	r1, [r3, #12]
 800eaea:	d1f8      	bne.n	800eade <_reclaim_reent+0x8a>
 800eaec:	4620      	mov	r0, r4
 800eaee:	f000 f86d 	bl	800ebcc <_free_r>
 800eaf2:	e7ba      	b.n	800ea6a <_reclaim_reent+0x16>
 800eaf4:	680e      	ldr	r6, [r1, #0]
 800eaf6:	4620      	mov	r0, r4
 800eaf8:	f000 f868 	bl	800ebcc <_free_r>
 800eafc:	4631      	mov	r1, r6
 800eafe:	e7ef      	b.n	800eae0 <_reclaim_reent+0x8c>
 800eb00:	2500      	movs	r5, #0
 800eb02:	e7ef      	b.n	800eae4 <_reclaim_reent+0x90>
 800eb04:	bd70      	pop	{r4, r5, r6, pc}
 800eb06:	bf00      	nop
 800eb08:	20000038 	.word	0x20000038

0800eb0c <_sbrk_r>:
 800eb0c:	b538      	push	{r3, r4, r5, lr}
 800eb0e:	4d06      	ldr	r5, [pc, #24]	; (800eb28 <_sbrk_r+0x1c>)
 800eb10:	2300      	movs	r3, #0
 800eb12:	4604      	mov	r4, r0
 800eb14:	4608      	mov	r0, r1
 800eb16:	602b      	str	r3, [r5, #0]
 800eb18:	f7f7 fe26 	bl	8006768 <_sbrk>
 800eb1c:	1c43      	adds	r3, r0, #1
 800eb1e:	d102      	bne.n	800eb26 <_sbrk_r+0x1a>
 800eb20:	682b      	ldr	r3, [r5, #0]
 800eb22:	b103      	cbz	r3, 800eb26 <_sbrk_r+0x1a>
 800eb24:	6023      	str	r3, [r4, #0]
 800eb26:	bd38      	pop	{r3, r4, r5, pc}
 800eb28:	20006cb0 	.word	0x20006cb0

0800eb2c <_raise_r>:
 800eb2c:	291f      	cmp	r1, #31
 800eb2e:	b538      	push	{r3, r4, r5, lr}
 800eb30:	4604      	mov	r4, r0
 800eb32:	460d      	mov	r5, r1
 800eb34:	d904      	bls.n	800eb40 <_raise_r+0x14>
 800eb36:	2316      	movs	r3, #22
 800eb38:	6003      	str	r3, [r0, #0]
 800eb3a:	f04f 30ff 	mov.w	r0, #4294967295
 800eb3e:	bd38      	pop	{r3, r4, r5, pc}
 800eb40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800eb42:	b112      	cbz	r2, 800eb4a <_raise_r+0x1e>
 800eb44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eb48:	b94b      	cbnz	r3, 800eb5e <_raise_r+0x32>
 800eb4a:	4620      	mov	r0, r4
 800eb4c:	f000 f830 	bl	800ebb0 <_getpid_r>
 800eb50:	462a      	mov	r2, r5
 800eb52:	4601      	mov	r1, r0
 800eb54:	4620      	mov	r0, r4
 800eb56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb5a:	f000 b817 	b.w	800eb8c <_kill_r>
 800eb5e:	2b01      	cmp	r3, #1
 800eb60:	d00a      	beq.n	800eb78 <_raise_r+0x4c>
 800eb62:	1c59      	adds	r1, r3, #1
 800eb64:	d103      	bne.n	800eb6e <_raise_r+0x42>
 800eb66:	2316      	movs	r3, #22
 800eb68:	6003      	str	r3, [r0, #0]
 800eb6a:	2001      	movs	r0, #1
 800eb6c:	e7e7      	b.n	800eb3e <_raise_r+0x12>
 800eb6e:	2400      	movs	r4, #0
 800eb70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800eb74:	4628      	mov	r0, r5
 800eb76:	4798      	blx	r3
 800eb78:	2000      	movs	r0, #0
 800eb7a:	e7e0      	b.n	800eb3e <_raise_r+0x12>

0800eb7c <raise>:
 800eb7c:	4b02      	ldr	r3, [pc, #8]	; (800eb88 <raise+0xc>)
 800eb7e:	4601      	mov	r1, r0
 800eb80:	6818      	ldr	r0, [r3, #0]
 800eb82:	f7ff bfd3 	b.w	800eb2c <_raise_r>
 800eb86:	bf00      	nop
 800eb88:	20000038 	.word	0x20000038

0800eb8c <_kill_r>:
 800eb8c:	b538      	push	{r3, r4, r5, lr}
 800eb8e:	4d07      	ldr	r5, [pc, #28]	; (800ebac <_kill_r+0x20>)
 800eb90:	2300      	movs	r3, #0
 800eb92:	4604      	mov	r4, r0
 800eb94:	4608      	mov	r0, r1
 800eb96:	4611      	mov	r1, r2
 800eb98:	602b      	str	r3, [r5, #0]
 800eb9a:	f7f7 fdcb 	bl	8006734 <_kill>
 800eb9e:	1c43      	adds	r3, r0, #1
 800eba0:	d102      	bne.n	800eba8 <_kill_r+0x1c>
 800eba2:	682b      	ldr	r3, [r5, #0]
 800eba4:	b103      	cbz	r3, 800eba8 <_kill_r+0x1c>
 800eba6:	6023      	str	r3, [r4, #0]
 800eba8:	bd38      	pop	{r3, r4, r5, pc}
 800ebaa:	bf00      	nop
 800ebac:	20006cb0 	.word	0x20006cb0

0800ebb0 <_getpid_r>:
 800ebb0:	f7f7 bdb8 	b.w	8006724 <_getpid>

0800ebb4 <__malloc_lock>:
 800ebb4:	4801      	ldr	r0, [pc, #4]	; (800ebbc <__malloc_lock+0x8>)
 800ebb6:	f7ff be8b 	b.w	800e8d0 <__retarget_lock_acquire_recursive>
 800ebba:	bf00      	nop
 800ebbc:	20006ca4 	.word	0x20006ca4

0800ebc0 <__malloc_unlock>:
 800ebc0:	4801      	ldr	r0, [pc, #4]	; (800ebc8 <__malloc_unlock+0x8>)
 800ebc2:	f7ff be86 	b.w	800e8d2 <__retarget_lock_release_recursive>
 800ebc6:	bf00      	nop
 800ebc8:	20006ca4 	.word	0x20006ca4

0800ebcc <_free_r>:
 800ebcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ebce:	2900      	cmp	r1, #0
 800ebd0:	d044      	beq.n	800ec5c <_free_r+0x90>
 800ebd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ebd6:	9001      	str	r0, [sp, #4]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	f1a1 0404 	sub.w	r4, r1, #4
 800ebde:	bfb8      	it	lt
 800ebe0:	18e4      	addlt	r4, r4, r3
 800ebe2:	f7ff ffe7 	bl	800ebb4 <__malloc_lock>
 800ebe6:	4a1e      	ldr	r2, [pc, #120]	; (800ec60 <_free_r+0x94>)
 800ebe8:	9801      	ldr	r0, [sp, #4]
 800ebea:	6813      	ldr	r3, [r2, #0]
 800ebec:	b933      	cbnz	r3, 800ebfc <_free_r+0x30>
 800ebee:	6063      	str	r3, [r4, #4]
 800ebf0:	6014      	str	r4, [r2, #0]
 800ebf2:	b003      	add	sp, #12
 800ebf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ebf8:	f7ff bfe2 	b.w	800ebc0 <__malloc_unlock>
 800ebfc:	42a3      	cmp	r3, r4
 800ebfe:	d908      	bls.n	800ec12 <_free_r+0x46>
 800ec00:	6825      	ldr	r5, [r4, #0]
 800ec02:	1961      	adds	r1, r4, r5
 800ec04:	428b      	cmp	r3, r1
 800ec06:	bf01      	itttt	eq
 800ec08:	6819      	ldreq	r1, [r3, #0]
 800ec0a:	685b      	ldreq	r3, [r3, #4]
 800ec0c:	1949      	addeq	r1, r1, r5
 800ec0e:	6021      	streq	r1, [r4, #0]
 800ec10:	e7ed      	b.n	800ebee <_free_r+0x22>
 800ec12:	461a      	mov	r2, r3
 800ec14:	685b      	ldr	r3, [r3, #4]
 800ec16:	b10b      	cbz	r3, 800ec1c <_free_r+0x50>
 800ec18:	42a3      	cmp	r3, r4
 800ec1a:	d9fa      	bls.n	800ec12 <_free_r+0x46>
 800ec1c:	6811      	ldr	r1, [r2, #0]
 800ec1e:	1855      	adds	r5, r2, r1
 800ec20:	42a5      	cmp	r5, r4
 800ec22:	d10b      	bne.n	800ec3c <_free_r+0x70>
 800ec24:	6824      	ldr	r4, [r4, #0]
 800ec26:	4421      	add	r1, r4
 800ec28:	1854      	adds	r4, r2, r1
 800ec2a:	42a3      	cmp	r3, r4
 800ec2c:	6011      	str	r1, [r2, #0]
 800ec2e:	d1e0      	bne.n	800ebf2 <_free_r+0x26>
 800ec30:	681c      	ldr	r4, [r3, #0]
 800ec32:	685b      	ldr	r3, [r3, #4]
 800ec34:	6053      	str	r3, [r2, #4]
 800ec36:	4421      	add	r1, r4
 800ec38:	6011      	str	r1, [r2, #0]
 800ec3a:	e7da      	b.n	800ebf2 <_free_r+0x26>
 800ec3c:	d902      	bls.n	800ec44 <_free_r+0x78>
 800ec3e:	230c      	movs	r3, #12
 800ec40:	6003      	str	r3, [r0, #0]
 800ec42:	e7d6      	b.n	800ebf2 <_free_r+0x26>
 800ec44:	6825      	ldr	r5, [r4, #0]
 800ec46:	1961      	adds	r1, r4, r5
 800ec48:	428b      	cmp	r3, r1
 800ec4a:	bf04      	itt	eq
 800ec4c:	6819      	ldreq	r1, [r3, #0]
 800ec4e:	685b      	ldreq	r3, [r3, #4]
 800ec50:	6063      	str	r3, [r4, #4]
 800ec52:	bf04      	itt	eq
 800ec54:	1949      	addeq	r1, r1, r5
 800ec56:	6021      	streq	r1, [r4, #0]
 800ec58:	6054      	str	r4, [r2, #4]
 800ec5a:	e7ca      	b.n	800ebf2 <_free_r+0x26>
 800ec5c:	b003      	add	sp, #12
 800ec5e:	bd30      	pop	{r4, r5, pc}
 800ec60:	20006ca8 	.word	0x20006ca8

0800ec64 <_realloc_r>:
 800ec64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec68:	4680      	mov	r8, r0
 800ec6a:	4614      	mov	r4, r2
 800ec6c:	460e      	mov	r6, r1
 800ec6e:	b921      	cbnz	r1, 800ec7a <_realloc_r+0x16>
 800ec70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec74:	4611      	mov	r1, r2
 800ec76:	f7ff be63 	b.w	800e940 <_malloc_r>
 800ec7a:	b92a      	cbnz	r2, 800ec88 <_realloc_r+0x24>
 800ec7c:	f7ff ffa6 	bl	800ebcc <_free_r>
 800ec80:	4625      	mov	r5, r4
 800ec82:	4628      	mov	r0, r5
 800ec84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec88:	f000 f81b 	bl	800ecc2 <_malloc_usable_size_r>
 800ec8c:	4284      	cmp	r4, r0
 800ec8e:	4607      	mov	r7, r0
 800ec90:	d802      	bhi.n	800ec98 <_realloc_r+0x34>
 800ec92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ec96:	d812      	bhi.n	800ecbe <_realloc_r+0x5a>
 800ec98:	4621      	mov	r1, r4
 800ec9a:	4640      	mov	r0, r8
 800ec9c:	f7ff fe50 	bl	800e940 <_malloc_r>
 800eca0:	4605      	mov	r5, r0
 800eca2:	2800      	cmp	r0, #0
 800eca4:	d0ed      	beq.n	800ec82 <_realloc_r+0x1e>
 800eca6:	42bc      	cmp	r4, r7
 800eca8:	4622      	mov	r2, r4
 800ecaa:	4631      	mov	r1, r6
 800ecac:	bf28      	it	cs
 800ecae:	463a      	movcs	r2, r7
 800ecb0:	f7ff fe10 	bl	800e8d4 <memcpy>
 800ecb4:	4631      	mov	r1, r6
 800ecb6:	4640      	mov	r0, r8
 800ecb8:	f7ff ff88 	bl	800ebcc <_free_r>
 800ecbc:	e7e1      	b.n	800ec82 <_realloc_r+0x1e>
 800ecbe:	4635      	mov	r5, r6
 800ecc0:	e7df      	b.n	800ec82 <_realloc_r+0x1e>

0800ecc2 <_malloc_usable_size_r>:
 800ecc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ecc6:	1f18      	subs	r0, r3, #4
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	bfbc      	itt	lt
 800eccc:	580b      	ldrlt	r3, [r1, r0]
 800ecce:	18c0      	addlt	r0, r0, r3
 800ecd0:	4770      	bx	lr
	...

0800ecd4 <_init>:
 800ecd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecd6:	bf00      	nop
 800ecd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecda:	bc08      	pop	{r3}
 800ecdc:	469e      	mov	lr, r3
 800ecde:	4770      	bx	lr

0800ece0 <_fini>:
 800ece0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ece2:	bf00      	nop
 800ece4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ece6:	bc08      	pop	{r3}
 800ece8:	469e      	mov	lr, r3
 800ecea:	4770      	bx	lr
