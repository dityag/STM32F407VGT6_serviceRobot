
Electronics_ServiceRobot_F407VGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d988  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b38  0800db18  0800db18  0001db18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e650  0800e650  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e650  0800e650  0001e650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e658  0800e658  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800e658  0800e658  0001e658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e664  0800e664  0001e664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800e668  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002009c  2**0
                  CONTENTS
 10 .bss          00006c24  200000a0  200000a0  000200a0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20006cc4  20006cc4  000200a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000265d8  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a64  00000000  00000000  000466a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001948  00000000  00000000  0004b108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017b8  00000000  00000000  0004ca50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002656b  00000000  00000000  0004e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c525  00000000  00000000  00074773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd672  00000000  00000000  00090c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016e30a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007330  00000000  00000000  0016e35c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a0 	.word	0x200000a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800db00 	.word	0x0800db00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	0800db00 	.word	0x0800db00

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_d2iz>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a94:	d215      	bcs.n	8000ac2 <__aeabi_d2iz+0x36>
 8000a96:	d511      	bpl.n	8000abc <__aeabi_d2iz+0x30>
 8000a98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa0:	d912      	bls.n	8000ac8 <__aeabi_d2iz+0x3c>
 8000aa2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ab2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	4240      	negne	r0, r0
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ac6:	d105      	bne.n	8000ad4 <__aeabi_d2iz+0x48>
 8000ac8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	bf08      	it	eq
 8000ace:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ad2:	4770      	bx	lr
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b90:	f000 b974 	b.w	8000e7c <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f806 	bl	8000bac <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__udivmoddi4>:
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	9d08      	ldr	r5, [sp, #32]
 8000bb2:	4604      	mov	r4, r0
 8000bb4:	468e      	mov	lr, r1
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d14d      	bne.n	8000c56 <__udivmoddi4+0xaa>
 8000bba:	428a      	cmp	r2, r1
 8000bbc:	4694      	mov	ip, r2
 8000bbe:	d969      	bls.n	8000c94 <__udivmoddi4+0xe8>
 8000bc0:	fab2 f282 	clz	r2, r2
 8000bc4:	b152      	cbz	r2, 8000bdc <__udivmoddi4+0x30>
 8000bc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bca:	f1c2 0120 	rsb	r1, r2, #32
 8000bce:	fa20 f101 	lsr.w	r1, r0, r1
 8000bd2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd6:	ea41 0e03 	orr.w	lr, r1, r3
 8000bda:	4094      	lsls	r4, r2
 8000bdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000be0:	0c21      	lsrs	r1, r4, #16
 8000be2:	fbbe f6f8 	udiv	r6, lr, r8
 8000be6:	fa1f f78c 	uxth.w	r7, ip
 8000bea:	fb08 e316 	mls	r3, r8, r6, lr
 8000bee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bf2:	fb06 f107 	mul.w	r1, r6, r7
 8000bf6:	4299      	cmp	r1, r3
 8000bf8:	d90a      	bls.n	8000c10 <__udivmoddi4+0x64>
 8000bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c02:	f080 811f 	bcs.w	8000e44 <__udivmoddi4+0x298>
 8000c06:	4299      	cmp	r1, r3
 8000c08:	f240 811c 	bls.w	8000e44 <__udivmoddi4+0x298>
 8000c0c:	3e02      	subs	r6, #2
 8000c0e:	4463      	add	r3, ip
 8000c10:	1a5b      	subs	r3, r3, r1
 8000c12:	b2a4      	uxth	r4, r4
 8000c14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c18:	fb08 3310 	mls	r3, r8, r0, r3
 8000c1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c20:	fb00 f707 	mul.w	r7, r0, r7
 8000c24:	42a7      	cmp	r7, r4
 8000c26:	d90a      	bls.n	8000c3e <__udivmoddi4+0x92>
 8000c28:	eb1c 0404 	adds.w	r4, ip, r4
 8000c2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c30:	f080 810a 	bcs.w	8000e48 <__udivmoddi4+0x29c>
 8000c34:	42a7      	cmp	r7, r4
 8000c36:	f240 8107 	bls.w	8000e48 <__udivmoddi4+0x29c>
 8000c3a:	4464      	add	r4, ip
 8000c3c:	3802      	subs	r0, #2
 8000c3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c42:	1be4      	subs	r4, r4, r7
 8000c44:	2600      	movs	r6, #0
 8000c46:	b11d      	cbz	r5, 8000c50 <__udivmoddi4+0xa4>
 8000c48:	40d4      	lsrs	r4, r2
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c50:	4631      	mov	r1, r6
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d909      	bls.n	8000c6e <__udivmoddi4+0xc2>
 8000c5a:	2d00      	cmp	r5, #0
 8000c5c:	f000 80ef 	beq.w	8000e3e <__udivmoddi4+0x292>
 8000c60:	2600      	movs	r6, #0
 8000c62:	e9c5 0100 	strd	r0, r1, [r5]
 8000c66:	4630      	mov	r0, r6
 8000c68:	4631      	mov	r1, r6
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	fab3 f683 	clz	r6, r3
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d14a      	bne.n	8000d0c <__udivmoddi4+0x160>
 8000c76:	428b      	cmp	r3, r1
 8000c78:	d302      	bcc.n	8000c80 <__udivmoddi4+0xd4>
 8000c7a:	4282      	cmp	r2, r0
 8000c7c:	f200 80f9 	bhi.w	8000e72 <__udivmoddi4+0x2c6>
 8000c80:	1a84      	subs	r4, r0, r2
 8000c82:	eb61 0303 	sbc.w	r3, r1, r3
 8000c86:	2001      	movs	r0, #1
 8000c88:	469e      	mov	lr, r3
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	d0e0      	beq.n	8000c50 <__udivmoddi4+0xa4>
 8000c8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c92:	e7dd      	b.n	8000c50 <__udivmoddi4+0xa4>
 8000c94:	b902      	cbnz	r2, 8000c98 <__udivmoddi4+0xec>
 8000c96:	deff      	udf	#255	; 0xff
 8000c98:	fab2 f282 	clz	r2, r2
 8000c9c:	2a00      	cmp	r2, #0
 8000c9e:	f040 8092 	bne.w	8000dc6 <__udivmoddi4+0x21a>
 8000ca2:	eba1 010c 	sub.w	r1, r1, ip
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f fe8c 	uxth.w	lr, ip
 8000cae:	2601      	movs	r6, #1
 8000cb0:	0c20      	lsrs	r0, r4, #16
 8000cb2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cb6:	fb07 1113 	mls	r1, r7, r3, r1
 8000cba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cbe:	fb0e f003 	mul.w	r0, lr, r3
 8000cc2:	4288      	cmp	r0, r1
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x12c>
 8000cc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cca:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cce:	d202      	bcs.n	8000cd6 <__udivmoddi4+0x12a>
 8000cd0:	4288      	cmp	r0, r1
 8000cd2:	f200 80cb 	bhi.w	8000e6c <__udivmoddi4+0x2c0>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	1a09      	subs	r1, r1, r0
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce0:	fb07 1110 	mls	r1, r7, r0, r1
 8000ce4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ce8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x156>
 8000cf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cf8:	d202      	bcs.n	8000d00 <__udivmoddi4+0x154>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f200 80bb 	bhi.w	8000e76 <__udivmoddi4+0x2ca>
 8000d00:	4608      	mov	r0, r1
 8000d02:	eba4 040e 	sub.w	r4, r4, lr
 8000d06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d0a:	e79c      	b.n	8000c46 <__udivmoddi4+0x9a>
 8000d0c:	f1c6 0720 	rsb	r7, r6, #32
 8000d10:	40b3      	lsls	r3, r6
 8000d12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d22:	431c      	orrs	r4, r3
 8000d24:	40f9      	lsrs	r1, r7
 8000d26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d32:	0c20      	lsrs	r0, r4, #16
 8000d34:	fa1f fe8c 	uxth.w	lr, ip
 8000d38:	fb09 1118 	mls	r1, r9, r8, r1
 8000d3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d40:	fb08 f00e 	mul.w	r0, r8, lr
 8000d44:	4288      	cmp	r0, r1
 8000d46:	fa02 f206 	lsl.w	r2, r2, r6
 8000d4a:	d90b      	bls.n	8000d64 <__udivmoddi4+0x1b8>
 8000d4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d54:	f080 8088 	bcs.w	8000e68 <__udivmoddi4+0x2bc>
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	f240 8085 	bls.w	8000e68 <__udivmoddi4+0x2bc>
 8000d5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d62:	4461      	add	r1, ip
 8000d64:	1a09      	subs	r1, r1, r0
 8000d66:	b2a4      	uxth	r4, r4
 8000d68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d78:	458e      	cmp	lr, r1
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x1e2>
 8000d7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d80:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d84:	d26c      	bcs.n	8000e60 <__udivmoddi4+0x2b4>
 8000d86:	458e      	cmp	lr, r1
 8000d88:	d96a      	bls.n	8000e60 <__udivmoddi4+0x2b4>
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	4461      	add	r1, ip
 8000d8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d92:	fba0 9402 	umull	r9, r4, r0, r2
 8000d96:	eba1 010e 	sub.w	r1, r1, lr
 8000d9a:	42a1      	cmp	r1, r4
 8000d9c:	46c8      	mov	r8, r9
 8000d9e:	46a6      	mov	lr, r4
 8000da0:	d356      	bcc.n	8000e50 <__udivmoddi4+0x2a4>
 8000da2:	d053      	beq.n	8000e4c <__udivmoddi4+0x2a0>
 8000da4:	b15d      	cbz	r5, 8000dbe <__udivmoddi4+0x212>
 8000da6:	ebb3 0208 	subs.w	r2, r3, r8
 8000daa:	eb61 010e 	sbc.w	r1, r1, lr
 8000dae:	fa01 f707 	lsl.w	r7, r1, r7
 8000db2:	fa22 f306 	lsr.w	r3, r2, r6
 8000db6:	40f1      	lsrs	r1, r6
 8000db8:	431f      	orrs	r7, r3
 8000dba:	e9c5 7100 	strd	r7, r1, [r5]
 8000dbe:	2600      	movs	r6, #0
 8000dc0:	4631      	mov	r1, r6
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	f1c2 0320 	rsb	r3, r2, #32
 8000dca:	40d8      	lsrs	r0, r3
 8000dcc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd0:	fa21 f303 	lsr.w	r3, r1, r3
 8000dd4:	4091      	lsls	r1, r2
 8000dd6:	4301      	orrs	r1, r0
 8000dd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ddc:	fa1f fe8c 	uxth.w	lr, ip
 8000de0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000de4:	fb07 3610 	mls	r6, r7, r0, r3
 8000de8:	0c0b      	lsrs	r3, r1, #16
 8000dea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dee:	fb00 f60e 	mul.w	r6, r0, lr
 8000df2:	429e      	cmp	r6, r3
 8000df4:	fa04 f402 	lsl.w	r4, r4, r2
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x260>
 8000dfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e02:	d22f      	bcs.n	8000e64 <__udivmoddi4+0x2b8>
 8000e04:	429e      	cmp	r6, r3
 8000e06:	d92d      	bls.n	8000e64 <__udivmoddi4+0x2b8>
 8000e08:	3802      	subs	r0, #2
 8000e0a:	4463      	add	r3, ip
 8000e0c:	1b9b      	subs	r3, r3, r6
 8000e0e:	b289      	uxth	r1, r1
 8000e10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e14:	fb07 3316 	mls	r3, r7, r6, r3
 8000e18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e20:	428b      	cmp	r3, r1
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x28a>
 8000e24:	eb1c 0101 	adds.w	r1, ip, r1
 8000e28:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e2c:	d216      	bcs.n	8000e5c <__udivmoddi4+0x2b0>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d914      	bls.n	8000e5c <__udivmoddi4+0x2b0>
 8000e32:	3e02      	subs	r6, #2
 8000e34:	4461      	add	r1, ip
 8000e36:	1ac9      	subs	r1, r1, r3
 8000e38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e3c:	e738      	b.n	8000cb0 <__udivmoddi4+0x104>
 8000e3e:	462e      	mov	r6, r5
 8000e40:	4628      	mov	r0, r5
 8000e42:	e705      	b.n	8000c50 <__udivmoddi4+0xa4>
 8000e44:	4606      	mov	r6, r0
 8000e46:	e6e3      	b.n	8000c10 <__udivmoddi4+0x64>
 8000e48:	4618      	mov	r0, r3
 8000e4a:	e6f8      	b.n	8000c3e <__udivmoddi4+0x92>
 8000e4c:	454b      	cmp	r3, r9
 8000e4e:	d2a9      	bcs.n	8000da4 <__udivmoddi4+0x1f8>
 8000e50:	ebb9 0802 	subs.w	r8, r9, r2
 8000e54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e58:	3801      	subs	r0, #1
 8000e5a:	e7a3      	b.n	8000da4 <__udivmoddi4+0x1f8>
 8000e5c:	4646      	mov	r6, r8
 8000e5e:	e7ea      	b.n	8000e36 <__udivmoddi4+0x28a>
 8000e60:	4620      	mov	r0, r4
 8000e62:	e794      	b.n	8000d8e <__udivmoddi4+0x1e2>
 8000e64:	4640      	mov	r0, r8
 8000e66:	e7d1      	b.n	8000e0c <__udivmoddi4+0x260>
 8000e68:	46d0      	mov	r8, sl
 8000e6a:	e77b      	b.n	8000d64 <__udivmoddi4+0x1b8>
 8000e6c:	3b02      	subs	r3, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	e732      	b.n	8000cd8 <__udivmoddi4+0x12c>
 8000e72:	4630      	mov	r0, r6
 8000e74:	e709      	b.n	8000c8a <__udivmoddi4+0xde>
 8000e76:	4464      	add	r4, ip
 8000e78:	3802      	subs	r0, #2
 8000e7a:	e742      	b.n	8000d02 <__udivmoddi4+0x156>

08000e7c <__aeabi_idiv0>:
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop

08000e80 <map>:
extern short int motor_SetPoint[3];
extern float proportional_motor[3], integral_motor[3], derivative_motor[3];
extern float prev_enc[3], error_velo_motor[3], previous_error_velo_motor[3];
extern float outputPWM[3];

float map(float x, float in_min, float in_max, float out_min, float out_max) {
 8000e80:	b480      	push	{r7}
 8000e82:	b087      	sub	sp, #28
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	ed87 0a05 	vstr	s0, [r7, #20]
 8000e8a:	edc7 0a04 	vstr	s1, [r7, #16]
 8000e8e:	ed87 1a03 	vstr	s2, [r7, #12]
 8000e92:	edc7 1a02 	vstr	s3, [r7, #8]
 8000e96:	ed87 2a01 	vstr	s4, [r7, #4]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000e9a:	ed97 7a05 	vldr	s14, [r7, #20]
 8000e9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ea2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ea6:	edd7 6a01 	vldr	s13, [r7, #4]
 8000eaa:	edd7 7a02 	vldr	s15, [r7, #8]
 8000eae:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000eb2:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000eb6:	ed97 7a03 	vldr	s14, [r7, #12]
 8000eba:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ebe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000ec6:	edd7 7a02 	vldr	s15, [r7, #8]
 8000eca:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000ece:	eeb0 0a67 	vmov.f32	s0, s15
 8000ed2:	371c      	adds	r7, #28
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	0000      	movs	r0, r0
	...

08000ee0 <motor_VectorKinematic>:

void motor_VectorKinematic(short int vx, short int vy, short int vsudut)
{
 8000ee0:	b5b0      	push	{r4, r5, r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	80fb      	strh	r3, [r7, #6]
 8000eea:	460b      	mov	r3, r1
 8000eec:	80bb      	strh	r3, [r7, #4]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	807b      	strh	r3, [r7, #2]
	motor_SetPoint[0] = (short int) (((vx * 0.8) * cosf(0 * M_PI/180)) + (vsudut));
 8000ef2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff fac4 	bl	8000484 <__aeabi_i2d>
 8000efc:	a35c      	add	r3, pc, #368	; (adr r3, 8001070 <motor_VectorKinematic+0x190>)
 8000efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f02:	f7ff fb29 	bl	8000558 <__aeabi_dmul>
 8000f06:	4602      	mov	r2, r0
 8000f08:	460b      	mov	r3, r1
 8000f0a:	4614      	mov	r4, r2
 8000f0c:	461d      	mov	r5, r3
 8000f0e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fab6 	bl	8000484 <__aeabi_i2d>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	4620      	mov	r0, r4
 8000f1e:	4629      	mov	r1, r5
 8000f20:	f7ff f964 	bl	80001ec <__adddf3>
 8000f24:	4602      	mov	r2, r0
 8000f26:	460b      	mov	r3, r1
 8000f28:	4610      	mov	r0, r2
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	f7ff fdae 	bl	8000a8c <__aeabi_d2iz>
 8000f30:	4603      	mov	r3, r0
 8000f32:	b21a      	sxth	r2, r3
 8000f34:	4b4a      	ldr	r3, [pc, #296]	; (8001060 <motor_VectorKinematic+0x180>)
 8000f36:	801a      	strh	r2, [r3, #0]
	motor_SetPoint[1] = (short int) (((vx) * cosf(240 * M_PI/180)) + ((vy * 1.21) * sinf(240 * M_PI/180)) + (vsudut));
 8000f38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f3c:	ee07 3a90 	vmov	s15, r3
 8000f40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f44:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001064 <motor_VectorKinematic+0x184>
 8000f48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f4c:	ee17 0a90 	vmov	r0, s15
 8000f50:	f7ff faaa 	bl	80004a8 <__aeabi_f2d>
 8000f54:	4604      	mov	r4, r0
 8000f56:	460d      	mov	r5, r1
 8000f58:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fa91 	bl	8000484 <__aeabi_i2d>
 8000f62:	a339      	add	r3, pc, #228	; (adr r3, 8001048 <motor_VectorKinematic+0x168>)
 8000f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f68:	f7ff faf6 	bl	8000558 <__aeabi_dmul>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	460b      	mov	r3, r1
 8000f70:	4610      	mov	r0, r2
 8000f72:	4619      	mov	r1, r3
 8000f74:	a336      	add	r3, pc, #216	; (adr r3, 8001050 <motor_VectorKinematic+0x170>)
 8000f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7a:	f7ff faed 	bl	8000558 <__aeabi_dmul>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	460b      	mov	r3, r1
 8000f82:	4620      	mov	r0, r4
 8000f84:	4629      	mov	r1, r5
 8000f86:	f7ff f931 	bl	80001ec <__adddf3>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	4614      	mov	r4, r2
 8000f90:	461d      	mov	r5, r3
 8000f92:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff fa74 	bl	8000484 <__aeabi_i2d>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	4620      	mov	r0, r4
 8000fa2:	4629      	mov	r1, r5
 8000fa4:	f7ff f922 	bl	80001ec <__adddf3>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	460b      	mov	r3, r1
 8000fac:	4610      	mov	r0, r2
 8000fae:	4619      	mov	r1, r3
 8000fb0:	f7ff fd6c 	bl	8000a8c <__aeabi_d2iz>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	b21a      	sxth	r2, r3
 8000fb8:	4b29      	ldr	r3, [pc, #164]	; (8001060 <motor_VectorKinematic+0x180>)
 8000fba:	805a      	strh	r2, [r3, #2]
	motor_SetPoint[2] = (short int) (((vx) * cosf(120 * M_PI/180)) + ((vy * 1.20) * sinf(120 * M_PI/180)) + (vsudut));
 8000fbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fc0:	ee07 3a90 	vmov	s15, r3
 8000fc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fc8:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001068 <motor_VectorKinematic+0x188>
 8000fcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fd0:	ee17 0a90 	vmov	r0, s15
 8000fd4:	f7ff fa68 	bl	80004a8 <__aeabi_f2d>
 8000fd8:	4604      	mov	r4, r0
 8000fda:	460d      	mov	r5, r1
 8000fdc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff fa4f 	bl	8000484 <__aeabi_i2d>
 8000fe6:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000fea:	4b20      	ldr	r3, [pc, #128]	; (800106c <motor_VectorKinematic+0x18c>)
 8000fec:	f7ff fab4 	bl	8000558 <__aeabi_dmul>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	4610      	mov	r0, r2
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	a317      	add	r3, pc, #92	; (adr r3, 8001058 <motor_VectorKinematic+0x178>)
 8000ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ffe:	f7ff faab 	bl	8000558 <__aeabi_dmul>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	4620      	mov	r0, r4
 8001008:	4629      	mov	r1, r5
 800100a:	f7ff f8ef 	bl	80001ec <__adddf3>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	4614      	mov	r4, r2
 8001014:	461d      	mov	r5, r3
 8001016:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fa32 	bl	8000484 <__aeabi_i2d>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	4620      	mov	r0, r4
 8001026:	4629      	mov	r1, r5
 8001028:	f7ff f8e0 	bl	80001ec <__adddf3>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4610      	mov	r0, r2
 8001032:	4619      	mov	r1, r3
 8001034:	f7ff fd2a 	bl	8000a8c <__aeabi_d2iz>
 8001038:	4603      	mov	r3, r0
 800103a:	b21a      	sxth	r2, r3
 800103c:	4b08      	ldr	r3, [pc, #32]	; (8001060 <motor_VectorKinematic+0x180>)
 800103e:	809a      	strh	r2, [r3, #4]
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bdb0      	pop	{r4, r5, r7, pc}
 8001048:	f5c28f5c 	.word	0xf5c28f5c
 800104c:	3ff35c28 	.word	0x3ff35c28
 8001050:	00000000 	.word	0x00000000
 8001054:	bfebb67b 	.word	0xbfebb67b
 8001058:	e0000000 	.word	0xe0000000
 800105c:	3febb67a 	.word	0x3febb67a
 8001060:	200003a0 	.word	0x200003a0
 8001064:	befffffd 	.word	0xbefffffd
 8001068:	bf000001 	.word	0xbf000001
 800106c:	3ff33333 	.word	0x3ff33333
 8001070:	9999999a 	.word	0x9999999a
 8001074:	3fe99999 	.word	0x3fe99999

08001078 <motor_VeloControl>:

void motor_VeloControl(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0

	motor_velo[0] = (encoder[0] - prev_enc[0]);
 800107e:	4b94      	ldr	r3, [pc, #592]	; (80012d0 <motor_VeloControl+0x258>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	ee07 3a90 	vmov	s15, r3
 8001086:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800108a:	4b92      	ldr	r3, [pc, #584]	; (80012d4 <motor_VeloControl+0x25c>)
 800108c:	edd3 7a00 	vldr	s15, [r3]
 8001090:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001094:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001098:	ee17 3a90 	vmov	r3, s15
 800109c:	b21a      	sxth	r2, r3
 800109e:	4b8e      	ldr	r3, [pc, #568]	; (80012d8 <motor_VeloControl+0x260>)
 80010a0:	801a      	strh	r2, [r3, #0]
	prev_enc[0] = encoder[0];
 80010a2:	4b8b      	ldr	r3, [pc, #556]	; (80012d0 <motor_VeloControl+0x258>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	ee07 3a90 	vmov	s15, r3
 80010aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ae:	4b89      	ldr	r3, [pc, #548]	; (80012d4 <motor_VeloControl+0x25c>)
 80010b0:	edc3 7a00 	vstr	s15, [r3]
	motor_velo[1] = (encoder[1] - prev_enc[1]);
 80010b4:	4b86      	ldr	r3, [pc, #536]	; (80012d0 <motor_VeloControl+0x258>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	ee07 3a90 	vmov	s15, r3
 80010bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010c0:	4b84      	ldr	r3, [pc, #528]	; (80012d4 <motor_VeloControl+0x25c>)
 80010c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80010c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010ce:	ee17 3a90 	vmov	r3, s15
 80010d2:	b21a      	sxth	r2, r3
 80010d4:	4b80      	ldr	r3, [pc, #512]	; (80012d8 <motor_VeloControl+0x260>)
 80010d6:	805a      	strh	r2, [r3, #2]
	prev_enc[1] = encoder[1];
 80010d8:	4b7d      	ldr	r3, [pc, #500]	; (80012d0 <motor_VeloControl+0x258>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	ee07 3a90 	vmov	s15, r3
 80010e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010e4:	4b7b      	ldr	r3, [pc, #492]	; (80012d4 <motor_VeloControl+0x25c>)
 80010e6:	edc3 7a01 	vstr	s15, [r3, #4]
	motor_velo[2] = (encoder[2] - prev_enc[2]);
 80010ea:	4b79      	ldr	r3, [pc, #484]	; (80012d0 <motor_VeloControl+0x258>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	ee07 3a90 	vmov	s15, r3
 80010f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010f6:	4b77      	ldr	r3, [pc, #476]	; (80012d4 <motor_VeloControl+0x25c>)
 80010f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80010fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001100:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001104:	ee17 3a90 	vmov	r3, s15
 8001108:	b21a      	sxth	r2, r3
 800110a:	4b73      	ldr	r3, [pc, #460]	; (80012d8 <motor_VeloControl+0x260>)
 800110c:	809a      	strh	r2, [r3, #4]
	prev_enc[2] = encoder[2];
 800110e:	4b70      	ldr	r3, [pc, #448]	; (80012d0 <motor_VeloControl+0x258>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	ee07 3a90 	vmov	s15, r3
 8001116:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800111a:	4b6e      	ldr	r3, [pc, #440]	; (80012d4 <motor_VeloControl+0x25c>)
 800111c:	edc3 7a02 	vstr	s15, [r3, #8]

	for(int i = 0; i < 3; i++){
 8001120:	2300      	movs	r3, #0
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	e0c5      	b.n	80012b2 <motor_VeloControl+0x23a>
//		motor_velo[i] = (encoder[i] - prev_enc[i]);
		error_velo_motor[i] = motor_SetPoint[i] - motor_velo[i];
 8001126:	4a6d      	ldr	r2, [pc, #436]	; (80012dc <motor_VeloControl+0x264>)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800112e:	4619      	mov	r1, r3
 8001130:	4a69      	ldr	r2, [pc, #420]	; (80012d8 <motor_VeloControl+0x260>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001138:	1acb      	subs	r3, r1, r3
 800113a:	ee07 3a90 	vmov	s15, r3
 800113e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001142:	4a67      	ldr	r2, [pc, #412]	; (80012e0 <motor_VeloControl+0x268>)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	4413      	add	r3, r2
 800114a:	edc3 7a00 	vstr	s15, [r3]
		proportional_motor[i] = KP_motor * error_velo_motor[i];
 800114e:	4a64      	ldr	r2, [pc, #400]	; (80012e0 <motor_VeloControl+0x268>)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	4413      	add	r3, r2
 8001156:	ed93 7a00 	vldr	s14, [r3]
 800115a:	4b62      	ldr	r3, [pc, #392]	; (80012e4 <motor_VeloControl+0x26c>)
 800115c:	edd3 7a00 	vldr	s15, [r3]
 8001160:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001164:	4a60      	ldr	r2, [pc, #384]	; (80012e8 <motor_VeloControl+0x270>)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4413      	add	r3, r2
 800116c:	edc3 7a00 	vstr	s15, [r3]
		integral_motor[i] += error_velo_motor[i];
 8001170:	4a5e      	ldr	r2, [pc, #376]	; (80012ec <motor_VeloControl+0x274>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	ed93 7a00 	vldr	s14, [r3]
 800117c:	4a58      	ldr	r2, [pc, #352]	; (80012e0 <motor_VeloControl+0x268>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	4413      	add	r3, r2
 8001184:	edd3 7a00 	vldr	s15, [r3]
 8001188:	ee77 7a27 	vadd.f32	s15, s14, s15
 800118c:	4a57      	ldr	r2, [pc, #348]	; (80012ec <motor_VeloControl+0x274>)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	4413      	add	r3, r2
 8001194:	edc3 7a00 	vstr	s15, [r3]
//		derivative_motor[i] = KD_motor * (error_velo_motor[i] - previous_error_velo_motor[i]) / PID_dt;
		derivative_motor[i] = KD_motor * (error_velo_motor[i] - previous_error_velo_motor[i]);
 8001198:	4a51      	ldr	r2, [pc, #324]	; (80012e0 <motor_VeloControl+0x268>)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	4413      	add	r3, r2
 80011a0:	ed93 7a00 	vldr	s14, [r3]
 80011a4:	4a52      	ldr	r2, [pc, #328]	; (80012f0 <motor_VeloControl+0x278>)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	edd3 7a00 	vldr	s15, [r3]
 80011b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011b4:	4b4f      	ldr	r3, [pc, #316]	; (80012f4 <motor_VeloControl+0x27c>)
 80011b6:	edd3 7a00 	vldr	s15, [r3]
 80011ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011be:	4a4e      	ldr	r2, [pc, #312]	; (80012f8 <motor_VeloControl+0x280>)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	4413      	add	r3, r2
 80011c6:	edc3 7a00 	vstr	s15, [r3]

//		integral_motor[i] = KI_motor * (integral_motor[i] + error_velo_motor[i] * PID_dt);
		previous_error_velo_motor[i] = error_velo_motor[i];
 80011ca:	4a45      	ldr	r2, [pc, #276]	; (80012e0 <motor_VeloControl+0x268>)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	4413      	add	r3, r2
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4946      	ldr	r1, [pc, #280]	; (80012f0 <motor_VeloControl+0x278>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	440b      	add	r3, r1
 80011dc:	601a      	str	r2, [r3, #0]

		if(integral_motor[i] > 999) integral_motor[i] = 999;
 80011de:	4a43      	ldr	r2, [pc, #268]	; (80012ec <motor_VeloControl+0x274>)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4413      	add	r3, r2
 80011e6:	edd3 7a00 	vldr	s15, [r3]
 80011ea:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80012fc <motor_VeloControl+0x284>
 80011ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f6:	dd06      	ble.n	8001206 <motor_VeloControl+0x18e>
 80011f8:	4a3c      	ldr	r2, [pc, #240]	; (80012ec <motor_VeloControl+0x274>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	4413      	add	r3, r2
 8001200:	4a3f      	ldr	r2, [pc, #252]	; (8001300 <motor_VeloControl+0x288>)
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	e012      	b.n	800122c <motor_VeloControl+0x1b4>
		else if(integral_motor[i] < -999) integral_motor[i] = -999;
 8001206:	4a39      	ldr	r2, [pc, #228]	; (80012ec <motor_VeloControl+0x274>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	4413      	add	r3, r2
 800120e:	edd3 7a00 	vldr	s15, [r3]
 8001212:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001304 <motor_VeloControl+0x28c>
 8001216:	eef4 7ac7 	vcmpe.f32	s15, s14
 800121a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800121e:	d505      	bpl.n	800122c <motor_VeloControl+0x1b4>
 8001220:	4a32      	ldr	r2, [pc, #200]	; (80012ec <motor_VeloControl+0x274>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4413      	add	r3, r2
 8001228:	4a37      	ldr	r2, [pc, #220]	; (8001308 <motor_VeloControl+0x290>)
 800122a:	601a      	str	r2, [r3, #0]

//		outputPWM[i] = (proportional_motor[i] + integral_motor[i] + derivative_motor[i]) * 0.9;
		outputPWM[i] = proportional_motor[i] * 0.3;
 800122c:	4a2e      	ldr	r2, [pc, #184]	; (80012e8 <motor_VeloControl+0x270>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4413      	add	r3, r2
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f936 	bl	80004a8 <__aeabi_f2d>
 800123c:	a322      	add	r3, pc, #136	; (adr r3, 80012c8 <motor_VeloControl+0x250>)
 800123e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001242:	f7ff f989 	bl	8000558 <__aeabi_dmul>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4610      	mov	r0, r2
 800124c:	4619      	mov	r1, r3
 800124e:	f7ff fc45 	bl	8000adc <__aeabi_d2f>
 8001252:	4602      	mov	r2, r0
 8001254:	492d      	ldr	r1, [pc, #180]	; (800130c <motor_VeloControl+0x294>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	440b      	add	r3, r1
 800125c:	601a      	str	r2, [r3, #0]

		if(outputPWM[i] > 999) outputPWM[i] = 999;
 800125e:	4a2b      	ldr	r2, [pc, #172]	; (800130c <motor_VeloControl+0x294>)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	edd3 7a00 	vldr	s15, [r3]
 800126a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80012fc <motor_VeloControl+0x284>
 800126e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001276:	dd06      	ble.n	8001286 <motor_VeloControl+0x20e>
 8001278:	4a24      	ldr	r2, [pc, #144]	; (800130c <motor_VeloControl+0x294>)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	4413      	add	r3, r2
 8001280:	4a1f      	ldr	r2, [pc, #124]	; (8001300 <motor_VeloControl+0x288>)
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	e012      	b.n	80012ac <motor_VeloControl+0x234>
		else if(outputPWM[i] < -999) outputPWM[i] = -999;
 8001286:	4a21      	ldr	r2, [pc, #132]	; (800130c <motor_VeloControl+0x294>)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	4413      	add	r3, r2
 800128e:	edd3 7a00 	vldr	s15, [r3]
 8001292:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001304 <motor_VeloControl+0x28c>
 8001296:	eef4 7ac7 	vcmpe.f32	s15, s14
 800129a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129e:	d505      	bpl.n	80012ac <motor_VeloControl+0x234>
 80012a0:	4a1a      	ldr	r2, [pc, #104]	; (800130c <motor_VeloControl+0x294>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	4413      	add	r3, r2
 80012a8:	4a17      	ldr	r2, [pc, #92]	; (8001308 <motor_VeloControl+0x290>)
 80012aa:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 3; i++){
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3301      	adds	r3, #1
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	f77f af36 	ble.w	8001126 <motor_VeloControl+0xae>
//		prev_enc[i] = encoder[i];
//		previous_error_velo_motor[i] = error_velo_motor[i];
	}
}
 80012ba:	bf00      	nop
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	f3af 8000 	nop.w
 80012c8:	33333333 	.word	0x33333333
 80012cc:	3fd33333 	.word	0x3fd33333
 80012d0:	2000038c 	.word	0x2000038c
 80012d4:	200003cc 	.word	0x200003cc
 80012d8:	20000398 	.word	0x20000398
 80012dc:	200003a0 	.word	0x200003a0
 80012e0:	200003d8 	.word	0x200003d8
 80012e4:	20000000 	.word	0x20000000
 80012e8:	200003a8 	.word	0x200003a8
 80012ec:	200003b4 	.word	0x200003b4
 80012f0:	200003e4 	.word	0x200003e4
 80012f4:	2000037c 	.word	0x2000037c
 80012f8:	200003c0 	.word	0x200003c0
 80012fc:	4479c000 	.word	0x4479c000
 8001300:	4479c000 	.word	0x4479c000
 8001304:	c479c000 	.word	0xc479c000
 8001308:	c479c000 	.word	0xc479c000
 800130c:	200003f0 	.word	0x200003f0

08001310 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	607b      	str	r3, [r7, #4]
 800131a:	4b18      	ldr	r3, [pc, #96]	; (800137c <MX_DMA_Init+0x6c>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a17      	ldr	r2, [pc, #92]	; (800137c <MX_DMA_Init+0x6c>)
 8001320:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b15      	ldr	r3, [pc, #84]	; (800137c <MX_DMA_Init+0x6c>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001332:	2200      	movs	r2, #0
 8001334:	2105      	movs	r1, #5
 8001336:	200b      	movs	r0, #11
 8001338:	f006 fb71 	bl	8007a1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800133c:	200b      	movs	r0, #11
 800133e:	f006 fb8a 	bl	8007a56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001342:	2200      	movs	r2, #0
 8001344:	2105      	movs	r1, #5
 8001346:	200d      	movs	r0, #13
 8001348:	f006 fb69 	bl	8007a1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800134c:	200d      	movs	r0, #13
 800134e:	f006 fb82 	bl	8007a56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001352:	2200      	movs	r2, #0
 8001354:	2105      	movs	r1, #5
 8001356:	2010      	movs	r0, #16
 8001358:	f006 fb61 	bl	8007a1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800135c:	2010      	movs	r0, #16
 800135e:	f006 fb7a 	bl	8007a56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8001362:	2200      	movs	r2, #0
 8001364:	2105      	movs	r1, #5
 8001366:	202f      	movs	r0, #47	; 0x2f
 8001368:	f006 fb59 	bl	8007a1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800136c:	202f      	movs	r0, #47	; 0x2f
 800136e:	f006 fb72 	bl	8007a56 <HAL_NVIC_EnableIRQ>

}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40023800 	.word	0x40023800

08001380 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4a07      	ldr	r2, [pc, #28]	; (80013ac <vApplicationGetIdleTaskMemory+0x2c>)
 8001390:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	4a06      	ldr	r2, [pc, #24]	; (80013b0 <vApplicationGetIdleTaskMemory+0x30>)
 8001396:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2280      	movs	r2, #128	; 0x80
 800139c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800139e:	bf00      	nop
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	200000c8 	.word	0x200000c8
 80013b0:	2000017c 	.word	0x2000017c

080013b4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80013b4:	b5b0      	push	{r4, r5, r7, lr}
 80013b6:	b096      	sub	sp, #88	; 0x58
 80013b8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of joys_imuTask */
  osThreadDef(joys_imuTask, Startjoys_imuTask, osPriorityNormal, 0, 128);
 80013ba:	4b1d      	ldr	r3, [pc, #116]	; (8001430 <MX_FREERTOS_Init+0x7c>)
 80013bc:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80013c0:	461d      	mov	r5, r3
 80013c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  joys_imuTaskHandle = osThreadCreate(osThread(joys_imuTask), NULL);
 80013ce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013d2:	2100      	movs	r1, #0
 80013d4:	4618      	mov	r0, r3
 80013d6:	f00a f950 	bl	800b67a <osThreadCreate>
 80013da:	4603      	mov	r3, r0
 80013dc:	4a15      	ldr	r2, [pc, #84]	; (8001434 <MX_FREERTOS_Init+0x80>)
 80013de:	6013      	str	r3, [r2, #0]

  /* definition and creation of rosserialTask */
  osThreadDef(rosserialTask, StartrosserialTask, osPriorityNormal, 0, 2048);
 80013e0:	4b15      	ldr	r3, [pc, #84]	; (8001438 <MX_FREERTOS_Init+0x84>)
 80013e2:	f107 0420 	add.w	r4, r7, #32
 80013e6:	461d      	mov	r5, r3
 80013e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  rosserialTaskHandle = osThreadCreate(osThread(rosserialTask), NULL);
 80013f4:	f107 0320 	add.w	r3, r7, #32
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f00a f93d 	bl	800b67a <osThreadCreate>
 8001400:	4603      	mov	r3, r0
 8001402:	4a0e      	ldr	r2, [pc, #56]	; (800143c <MX_FREERTOS_Init+0x88>)
 8001404:	6013      	str	r3, [r2, #0]

  /* definition and creation of out_motorTask */
  osThreadDef(out_motorTask, Startout_motorTask, osPriorityNormal, 0, 128);
 8001406:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <MX_FREERTOS_Init+0x8c>)
 8001408:	1d3c      	adds	r4, r7, #4
 800140a:	461d      	mov	r5, r3
 800140c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800140e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001410:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001414:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  out_motorTaskHandle = osThreadCreate(osThread(out_motorTask), NULL);
 8001418:	1d3b      	adds	r3, r7, #4
 800141a:	2100      	movs	r1, #0
 800141c:	4618      	mov	r0, r3
 800141e:	f00a f92c 	bl	800b67a <osThreadCreate>
 8001422:	4603      	mov	r3, r0
 8001424:	4a07      	ldr	r2, [pc, #28]	; (8001444 <MX_FREERTOS_Init+0x90>)
 8001426:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001428:	bf00      	nop
 800142a:	3758      	adds	r7, #88	; 0x58
 800142c:	46bd      	mov	sp, r7
 800142e:	bdb0      	pop	{r4, r5, r7, pc}
 8001430:	0800db48 	.word	0x0800db48
 8001434:	200000bc 	.word	0x200000bc
 8001438:	0800db64 	.word	0x0800db64
 800143c:	200000c0 	.word	0x200000c0
 8001440:	0800db80 	.word	0x0800db80
 8001444:	200000c4 	.word	0x200000c4

08001448 <Startjoys_imuTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Startjoys_imuTask */
void Startjoys_imuTask(void const * argument)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startjoys_imuTask */
  /* Infinite loop */
  for(;;)
  {	  //JOYSTICK BLUETOOTH
	  if(joystick_bt_counter < joystick_bt_timeout){
 8001450:	4b97      	ldr	r3, [pc, #604]	; (80016b0 <Startjoys_imuTask+0x268>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4b97      	ldr	r3, [pc, #604]	; (80016b4 <Startjoys_imuTask+0x26c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	429a      	cmp	r2, r3
 800145a:	da10      	bge.n	800147e <Startjoys_imuTask+0x36>
		  if(HAL_UART_Receive_DMA(&huart2, joystick_buf, sizeof(joystick_buf)) != HAL_OK){
 800145c:	220d      	movs	r2, #13
 800145e:	4996      	ldr	r1, [pc, #600]	; (80016b8 <Startjoys_imuTask+0x270>)
 8001460:	4896      	ldr	r0, [pc, #600]	; (80016bc <Startjoys_imuTask+0x274>)
 8001462:	f008 ffdb 	bl	800a41c <HAL_UART_Receive_DMA>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d005      	beq.n	8001478 <Startjoys_imuTask+0x30>
			  joystick_bt_counter++;
 800146c:	4b90      	ldr	r3, [pc, #576]	; (80016b0 <Startjoys_imuTask+0x268>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	3301      	adds	r3, #1
 8001472:	4a8f      	ldr	r2, [pc, #572]	; (80016b0 <Startjoys_imuTask+0x268>)
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	e002      	b.n	800147e <Startjoys_imuTask+0x36>
		  }
		  else{
			  joystick_bt_counter = 0;
 8001478:	4b8d      	ldr	r3, [pc, #564]	; (80016b0 <Startjoys_imuTask+0x268>)
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
		  }
	  }

	  if(joystick_bt_counter >= 299){
 800147e:	4b8c      	ldr	r3, [pc, #560]	; (80016b0 <Startjoys_imuTask+0x268>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 8001486:	dd03      	ble.n	8001490 <Startjoys_imuTask+0x48>
		  joystick_bt_counter = 299;
 8001488:	4b89      	ldr	r3, [pc, #548]	; (80016b0 <Startjoys_imuTask+0x268>)
 800148a:	f240 122b 	movw	r2, #299	; 0x12b
 800148e:	601a      	str	r2, [r3, #0]
	  }

	  if(joystick_buf[0] == 'i' && joystick_buf[1] == 't' && joystick_buf[2] == 's'){
 8001490:	4b89      	ldr	r3, [pc, #548]	; (80016b8 <Startjoys_imuTask+0x270>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b69      	cmp	r3, #105	; 0x69
 8001496:	f040 80a1 	bne.w	80015dc <Startjoys_imuTask+0x194>
 800149a:	4b87      	ldr	r3, [pc, #540]	; (80016b8 <Startjoys_imuTask+0x270>)
 800149c:	785b      	ldrb	r3, [r3, #1]
 800149e:	2b74      	cmp	r3, #116	; 0x74
 80014a0:	f040 809c 	bne.w	80015dc <Startjoys_imuTask+0x194>
 80014a4:	4b84      	ldr	r3, [pc, #528]	; (80016b8 <Startjoys_imuTask+0x270>)
 80014a6:	789b      	ldrb	r3, [r3, #2]
 80014a8:	2b73      	cmp	r3, #115	; 0x73
 80014aa:	f040 8097 	bne.w	80015dc <Startjoys_imuTask+0x194>
		  HAL_UART_Receive_DMA(&huart2, joystick_buf, sizeof(joystick_buf));
 80014ae:	220d      	movs	r2, #13
 80014b0:	4981      	ldr	r1, [pc, #516]	; (80016b8 <Startjoys_imuTask+0x270>)
 80014b2:	4882      	ldr	r0, [pc, #520]	; (80016bc <Startjoys_imuTask+0x274>)
 80014b4:	f008 ffb2 	bl	800a41c <HAL_UART_Receive_DMA>

		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80014b8:	2201      	movs	r2, #1
 80014ba:	2140      	movs	r1, #64	; 0x40
 80014bc:	4880      	ldr	r0, [pc, #512]	; (80016c0 <Startjoys_imuTask+0x278>)
 80014be:	f007 f877 	bl	80085b0 <HAL_GPIO_WritePin>

		  memcpy(&joystick_y_buf, joystick_buf + 3, 1);
 80014c2:	4b80      	ldr	r3, [pc, #512]	; (80016c4 <Startjoys_imuTask+0x27c>)
 80014c4:	781a      	ldrb	r2, [r3, #0]
 80014c6:	4b80      	ldr	r3, [pc, #512]	; (80016c8 <Startjoys_imuTask+0x280>)
 80014c8:	701a      	strb	r2, [r3, #0]
		  memcpy(&joystick_x_buf, joystick_buf + 4, 1);
 80014ca:	4b80      	ldr	r3, [pc, #512]	; (80016cc <Startjoys_imuTask+0x284>)
 80014cc:	781a      	ldrb	r2, [r3, #0]
 80014ce:	4b80      	ldr	r3, [pc, #512]	; (80016d0 <Startjoys_imuTask+0x288>)
 80014d0:	701a      	strb	r2, [r3, #0]
		  memcpy(&joystick_z_buf, joystick_buf + 6, 1);
 80014d2:	4b80      	ldr	r3, [pc, #512]	; (80016d4 <Startjoys_imuTask+0x28c>)
 80014d4:	781a      	ldrb	r2, [r3, #0]
 80014d6:	4b80      	ldr	r3, [pc, #512]	; (80016d8 <Startjoys_imuTask+0x290>)
 80014d8:	701a      	strb	r2, [r3, #0]

		  joystick_x_buf = constrain(joystick_x_buf, 0, 246);
 80014da:	4b7d      	ldr	r3, [pc, #500]	; (80016d0 <Startjoys_imuTask+0x288>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2bf6      	cmp	r3, #246	; 0xf6
 80014e0:	bf28      	it	cs
 80014e2:	23f6      	movcs	r3, #246	; 0xf6
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	4b7a      	ldr	r3, [pc, #488]	; (80016d0 <Startjoys_imuTask+0x288>)
 80014e8:	701a      	strb	r2, [r3, #0]
		  joystick_y_buf = constrain(joystick_y_buf, 0, 246);
 80014ea:	4b77      	ldr	r3, [pc, #476]	; (80016c8 <Startjoys_imuTask+0x280>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2bf6      	cmp	r3, #246	; 0xf6
 80014f0:	bf28      	it	cs
 80014f2:	23f6      	movcs	r3, #246	; 0xf6
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	4b74      	ldr	r3, [pc, #464]	; (80016c8 <Startjoys_imuTask+0x280>)
 80014f8:	701a      	strb	r2, [r3, #0]
		  joystick_z_buf = constrain(joystick_z_buf, 0, 246);
 80014fa:	4b77      	ldr	r3, [pc, #476]	; (80016d8 <Startjoys_imuTask+0x290>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2bf6      	cmp	r3, #246	; 0xf6
 8001500:	bf28      	it	cs
 8001502:	23f6      	movcs	r3, #246	; 0xf6
 8001504:	b2da      	uxtb	r2, r3
 8001506:	4b74      	ldr	r3, [pc, #464]	; (80016d8 <Startjoys_imuTask+0x290>)
 8001508:	701a      	strb	r2, [r3, #0]

		  joystick_x = map(joystick_x_buf, 0, 246, -123, 123);
 800150a:	4b71      	ldr	r3, [pc, #452]	; (80016d0 <Startjoys_imuTask+0x288>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	ee07 3a90 	vmov	s15, r3
 8001512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001516:	ed9f 2a71 	vldr	s4, [pc, #452]	; 80016dc <Startjoys_imuTask+0x294>
 800151a:	eddf 1a71 	vldr	s3, [pc, #452]	; 80016e0 <Startjoys_imuTask+0x298>
 800151e:	ed9f 1a71 	vldr	s2, [pc, #452]	; 80016e4 <Startjoys_imuTask+0x29c>
 8001522:	eddf 0a71 	vldr	s1, [pc, #452]	; 80016e8 <Startjoys_imuTask+0x2a0>
 8001526:	eeb0 0a67 	vmov.f32	s0, s15
 800152a:	f7ff fca9 	bl	8000e80 <map>
 800152e:	eef0 7a40 	vmov.f32	s15, s0
 8001532:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001536:	edc7 7a00 	vstr	s15, [r7]
 800153a:	783b      	ldrb	r3, [r7, #0]
 800153c:	b25a      	sxtb	r2, r3
 800153e:	4b6b      	ldr	r3, [pc, #428]	; (80016ec <Startjoys_imuTask+0x2a4>)
 8001540:	701a      	strb	r2, [r3, #0]
		  joystick_y = map(joystick_y_buf, 0, 246, -123, 123);
 8001542:	4b61      	ldr	r3, [pc, #388]	; (80016c8 <Startjoys_imuTask+0x280>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	ee07 3a90 	vmov	s15, r3
 800154a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800154e:	ed9f 2a63 	vldr	s4, [pc, #396]	; 80016dc <Startjoys_imuTask+0x294>
 8001552:	eddf 1a63 	vldr	s3, [pc, #396]	; 80016e0 <Startjoys_imuTask+0x298>
 8001556:	ed9f 1a63 	vldr	s2, [pc, #396]	; 80016e4 <Startjoys_imuTask+0x29c>
 800155a:	eddf 0a63 	vldr	s1, [pc, #396]	; 80016e8 <Startjoys_imuTask+0x2a0>
 800155e:	eeb0 0a67 	vmov.f32	s0, s15
 8001562:	f7ff fc8d 	bl	8000e80 <map>
 8001566:	eef0 7a40 	vmov.f32	s15, s0
 800156a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800156e:	edc7 7a00 	vstr	s15, [r7]
 8001572:	783b      	ldrb	r3, [r7, #0]
 8001574:	b25a      	sxtb	r2, r3
 8001576:	4b5e      	ldr	r3, [pc, #376]	; (80016f0 <Startjoys_imuTask+0x2a8>)
 8001578:	701a      	strb	r2, [r3, #0]
		  joystick_z = map(joystick_z_buf, 0, 246, -123, 123);
 800157a:	4b57      	ldr	r3, [pc, #348]	; (80016d8 <Startjoys_imuTask+0x290>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	ee07 3a90 	vmov	s15, r3
 8001582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001586:	ed9f 2a55 	vldr	s4, [pc, #340]	; 80016dc <Startjoys_imuTask+0x294>
 800158a:	eddf 1a55 	vldr	s3, [pc, #340]	; 80016e0 <Startjoys_imuTask+0x298>
 800158e:	ed9f 1a55 	vldr	s2, [pc, #340]	; 80016e4 <Startjoys_imuTask+0x29c>
 8001592:	eddf 0a55 	vldr	s1, [pc, #340]	; 80016e8 <Startjoys_imuTask+0x2a0>
 8001596:	eeb0 0a67 	vmov.f32	s0, s15
 800159a:	f7ff fc71 	bl	8000e80 <map>
 800159e:	eef0 7a40 	vmov.f32	s15, s0
 80015a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015a6:	edc7 7a00 	vstr	s15, [r7]
 80015aa:	783b      	ldrb	r3, [r7, #0]
 80015ac:	b25a      	sxtb	r2, r3
 80015ae:	4b51      	ldr	r3, [pc, #324]	; (80016f4 <Startjoys_imuTask+0x2ac>)
 80015b0:	701a      	strb	r2, [r3, #0]

		  joystick_mode = joystick_buf[7];
 80015b2:	4b41      	ldr	r3, [pc, #260]	; (80016b8 <Startjoys_imuTask+0x270>)
 80015b4:	79db      	ldrb	r3, [r3, #7]
 80015b6:	461a      	mov	r2, r3
 80015b8:	4b4f      	ldr	r3, [pc, #316]	; (80016f8 <Startjoys_imuTask+0x2b0>)
 80015ba:	601a      	str	r2, [r3, #0]
		  mode = joystick_buf[8];
 80015bc:	4b3e      	ldr	r3, [pc, #248]	; (80016b8 <Startjoys_imuTask+0x270>)
 80015be:	7a1b      	ldrb	r3, [r3, #8]
 80015c0:	461a      	mov	r2, r3
 80015c2:	4b4e      	ldr	r3, [pc, #312]	; (80016fc <Startjoys_imuTask+0x2b4>)
 80015c4:	601a      	str	r2, [r3, #0]
		  joystick_increase_speed = joystick_buf[9];
 80015c6:	4b3c      	ldr	r3, [pc, #240]	; (80016b8 <Startjoys_imuTask+0x270>)
 80015c8:	7a5b      	ldrb	r3, [r3, #9]
 80015ca:	461a      	mov	r2, r3
 80015cc:	4b4c      	ldr	r3, [pc, #304]	; (8001700 <Startjoys_imuTask+0x2b8>)
 80015ce:	601a      	str	r2, [r3, #0]
		  joystick_decrease_speed = joystick_buf[10];
 80015d0:	4b39      	ldr	r3, [pc, #228]	; (80016b8 <Startjoys_imuTask+0x270>)
 80015d2:	7a9b      	ldrb	r3, [r3, #10]
 80015d4:	461a      	mov	r2, r3
 80015d6:	4b4b      	ldr	r3, [pc, #300]	; (8001704 <Startjoys_imuTask+0x2bc>)
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	e012      	b.n	8001602 <Startjoys_imuTask+0x1ba>
	  }
	  else{
		  HAL_UART_Receive_DMA(&huart2, joystick_buf, sizeof(joystick_buf));
 80015dc:	220d      	movs	r2, #13
 80015de:	4936      	ldr	r1, [pc, #216]	; (80016b8 <Startjoys_imuTask+0x270>)
 80015e0:	4836      	ldr	r0, [pc, #216]	; (80016bc <Startjoys_imuTask+0x274>)
 80015e2:	f008 ff1b 	bl	800a41c <HAL_UART_Receive_DMA>
		  joystick_x = 0;
 80015e6:	4b41      	ldr	r3, [pc, #260]	; (80016ec <Startjoys_imuTask+0x2a4>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	701a      	strb	r2, [r3, #0]
		  joystick_y = 0;
 80015ec:	4b40      	ldr	r3, [pc, #256]	; (80016f0 <Startjoys_imuTask+0x2a8>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	701a      	strb	r2, [r3, #0]
		  joystick_z = 0;
 80015f2:	4b40      	ldr	r3, [pc, #256]	; (80016f4 <Startjoys_imuTask+0x2ac>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80015f8:	2200      	movs	r2, #0
 80015fa:	2140      	movs	r1, #64	; 0x40
 80015fc:	4830      	ldr	r0, [pc, #192]	; (80016c0 <Startjoys_imuTask+0x278>)
 80015fe:	f006 ffd7 	bl	80085b0 <HAL_GPIO_WritePin>
	  }

	  if(joystick_bt_counter == 299){
 8001602:	4b2b      	ldr	r3, [pc, #172]	; (80016b0 <Startjoys_imuTask+0x268>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f240 122b 	movw	r2, #299	; 0x12b
 800160a:	4293      	cmp	r3, r2
 800160c:	d10d      	bne.n	800162a <Startjoys_imuTask+0x1e2>
		  joystick_x = 0;
 800160e:	4b37      	ldr	r3, [pc, #220]	; (80016ec <Startjoys_imuTask+0x2a4>)
 8001610:	2200      	movs	r2, #0
 8001612:	701a      	strb	r2, [r3, #0]
		  joystick_y = 0;
 8001614:	4b36      	ldr	r3, [pc, #216]	; (80016f0 <Startjoys_imuTask+0x2a8>)
 8001616:	2200      	movs	r2, #0
 8001618:	701a      	strb	r2, [r3, #0]
		  joystick_z = 0;
 800161a:	4b36      	ldr	r3, [pc, #216]	; (80016f4 <Startjoys_imuTask+0x2ac>)
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001620:	2200      	movs	r2, #0
 8001622:	2140      	movs	r1, #64	; 0x40
 8001624:	4826      	ldr	r0, [pc, #152]	; (80016c0 <Startjoys_imuTask+0x278>)
 8001626:	f006 ffc3 	bl	80085b0 <HAL_GPIO_WritePin>
	  }

	  //GYRO BNO055
	  HAL_UART_Receive_DMA(&huart4, imu_buf, sizeof(imu_buf));
 800162a:	2220      	movs	r2, #32
 800162c:	4936      	ldr	r1, [pc, #216]	; (8001708 <Startjoys_imuTask+0x2c0>)
 800162e:	4837      	ldr	r0, [pc, #220]	; (800170c <Startjoys_imuTask+0x2c4>)
 8001630:	f008 fef4 	bl	800a41c <HAL_UART_Receive_DMA>
	  if(imu_buf[0] == 'i' && imu_buf[1] == 't' && imu_buf[2] == 's'){
 8001634:	4b34      	ldr	r3, [pc, #208]	; (8001708 <Startjoys_imuTask+0x2c0>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b69      	cmp	r3, #105	; 0x69
 800163a:	f040 8087 	bne.w	800174c <Startjoys_imuTask+0x304>
 800163e:	4b32      	ldr	r3, [pc, #200]	; (8001708 <Startjoys_imuTask+0x2c0>)
 8001640:	785b      	ldrb	r3, [r3, #1]
 8001642:	2b74      	cmp	r3, #116	; 0x74
 8001644:	f040 8082 	bne.w	800174c <Startjoys_imuTask+0x304>
 8001648:	4b2f      	ldr	r3, [pc, #188]	; (8001708 <Startjoys_imuTask+0x2c0>)
 800164a:	789b      	ldrb	r3, [r3, #2]
 800164c:	2b73      	cmp	r3, #115	; 0x73
 800164e:	d17d      	bne.n	800174c <Startjoys_imuTask+0x304>
		  memcpy(&euler_x, imu_buf + 3, 4);
 8001650:	4b2f      	ldr	r3, [pc, #188]	; (8001710 <Startjoys_imuTask+0x2c8>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	461a      	mov	r2, r3
 8001656:	4b2f      	ldr	r3, [pc, #188]	; (8001714 <Startjoys_imuTask+0x2cc>)
 8001658:	601a      	str	r2, [r3, #0]
		  memcpy(&euler_y, imu_buf + 7, 4);
 800165a:	4b2f      	ldr	r3, [pc, #188]	; (8001718 <Startjoys_imuTask+0x2d0>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	461a      	mov	r2, r3
 8001660:	4b2e      	ldr	r3, [pc, #184]	; (800171c <Startjoys_imuTask+0x2d4>)
 8001662:	601a      	str	r2, [r3, #0]
		  memcpy(&euler_z, imu_buf + 11, 4);
 8001664:	4b2e      	ldr	r3, [pc, #184]	; (8001720 <Startjoys_imuTask+0x2d8>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	461a      	mov	r2, r3
 800166a:	4b2e      	ldr	r3, [pc, #184]	; (8001724 <Startjoys_imuTask+0x2dc>)
 800166c:	601a      	str	r2, [r3, #0]
		  memcpy(&quat_w, imu_buf + 15, 4);
 800166e:	4b2e      	ldr	r3, [pc, #184]	; (8001728 <Startjoys_imuTask+0x2e0>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	461a      	mov	r2, r3
 8001674:	4b2d      	ldr	r3, [pc, #180]	; (800172c <Startjoys_imuTask+0x2e4>)
 8001676:	601a      	str	r2, [r3, #0]
		  memcpy(&quat_x, imu_buf + 19, 4);
 8001678:	4b2d      	ldr	r3, [pc, #180]	; (8001730 <Startjoys_imuTask+0x2e8>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	461a      	mov	r2, r3
 800167e:	4b2d      	ldr	r3, [pc, #180]	; (8001734 <Startjoys_imuTask+0x2ec>)
 8001680:	601a      	str	r2, [r3, #0]
		  memcpy(&quat_y, imu_buf + 23, 4);
 8001682:	4b2d      	ldr	r3, [pc, #180]	; (8001738 <Startjoys_imuTask+0x2f0>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	461a      	mov	r2, r3
 8001688:	4b2c      	ldr	r3, [pc, #176]	; (800173c <Startjoys_imuTask+0x2f4>)
 800168a:	601a      	str	r2, [r3, #0]
		  memcpy(&quat_z, imu_buf + 27, 4);
 800168c:	4b2c      	ldr	r3, [pc, #176]	; (8001740 <Startjoys_imuTask+0x2f8>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	4b2c      	ldr	r3, [pc, #176]	; (8001744 <Startjoys_imuTask+0x2fc>)
 8001694:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 8001696:	2201      	movs	r2, #1
 8001698:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800169c:	482a      	ldr	r0, [pc, #168]	; (8001748 <Startjoys_imuTask+0x300>)
 800169e:	f006 ff87 	bl	80085b0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 80016a2:	2201      	movs	r2, #1
 80016a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016a8:	4827      	ldr	r0, [pc, #156]	; (8001748 <Startjoys_imuTask+0x300>)
 80016aa:	f006 ff81 	bl	80085b0 <HAL_GPIO_WritePin>
 80016ae:	e059      	b.n	8001764 <Startjoys_imuTask+0x31c>
 80016b0:	20000410 	.word	0x20000410
 80016b4:	20000004 	.word	0x20000004
 80016b8:	200003fc 	.word	0x200003fc
 80016bc:	20002d54 	.word	0x20002d54
 80016c0:	40020c00 	.word	0x40020c00
 80016c4:	200003ff 	.word	0x200003ff
 80016c8:	2000040a 	.word	0x2000040a
 80016cc:	20000400 	.word	0x20000400
 80016d0:	20000409 	.word	0x20000409
 80016d4:	20000402 	.word	0x20000402
 80016d8:	2000040b 	.word	0x2000040b
 80016dc:	42f60000 	.word	0x42f60000
 80016e0:	c2f60000 	.word	0xc2f60000
 80016e4:	43760000 	.word	0x43760000
 80016e8:	00000000 	.word	0x00000000
 80016ec:	2000040c 	.word	0x2000040c
 80016f0:	2000040d 	.word	0x2000040d
 80016f4:	2000040e 	.word	0x2000040e
 80016f8:	20000414 	.word	0x20000414
 80016fc:	20000418 	.word	0x20000418
 8001700:	2000041c 	.word	0x2000041c
 8001704:	20000420 	.word	0x20000420
 8001708:	20000430 	.word	0x20000430
 800170c:	20002c88 	.word	0x20002c88
 8001710:	20000433 	.word	0x20000433
 8001714:	20000450 	.word	0x20000450
 8001718:	20000437 	.word	0x20000437
 800171c:	20000454 	.word	0x20000454
 8001720:	2000043b 	.word	0x2000043b
 8001724:	20000458 	.word	0x20000458
 8001728:	2000043f 	.word	0x2000043f
 800172c:	2000045c 	.word	0x2000045c
 8001730:	20000443 	.word	0x20000443
 8001734:	20000460 	.word	0x20000460
 8001738:	20000447 	.word	0x20000447
 800173c:	20000464 	.word	0x20000464
 8001740:	2000044b 	.word	0x2000044b
 8001744:	20000468 	.word	0x20000468
 8001748:	40021000 	.word	0x40021000
	  }else{
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 800174c:	2200      	movs	r2, #0
 800174e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001752:	4824      	ldr	r0, [pc, #144]	; (80017e4 <Startjoys_imuTask+0x39c>)
 8001754:	f006 ff2c 	bl	80085b0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8001758:	2200      	movs	r2, #0
 800175a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800175e:	4821      	ldr	r0, [pc, #132]	; (80017e4 <Startjoys_imuTask+0x39c>)
 8001760:	f006 ff26 	bl	80085b0 <HAL_GPIO_WritePin>
	  }

	  //CONTROL PC
	  x_velocity 		= map(vel_x, -1, 1, -123, 123);
 8001764:	4b20      	ldr	r3, [pc, #128]	; (80017e8 <Startjoys_imuTask+0x3a0>)
 8001766:	edd3 7a00 	vldr	s15, [r3]
 800176a:	ed9f 2a20 	vldr	s4, [pc, #128]	; 80017ec <Startjoys_imuTask+0x3a4>
 800176e:	eddf 1a20 	vldr	s3, [pc, #128]	; 80017f0 <Startjoys_imuTask+0x3a8>
 8001772:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001776:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 800177a:	eeb0 0a67 	vmov.f32	s0, s15
 800177e:	f7ff fb7f 	bl	8000e80 <map>
 8001782:	eef0 7a40 	vmov.f32	s15, s0
 8001786:	4b1b      	ldr	r3, [pc, #108]	; (80017f4 <Startjoys_imuTask+0x3ac>)
 8001788:	edc3 7a00 	vstr	s15, [r3]
	  y_velocity 		= map(vel_y, -1, 1, -123, 123);
 800178c:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <Startjoys_imuTask+0x3b0>)
 800178e:	edd3 7a00 	vldr	s15, [r3]
 8001792:	ed9f 2a16 	vldr	s4, [pc, #88]	; 80017ec <Startjoys_imuTask+0x3a4>
 8001796:	eddf 1a16 	vldr	s3, [pc, #88]	; 80017f0 <Startjoys_imuTask+0x3a8>
 800179a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800179e:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80017a2:	eeb0 0a67 	vmov.f32	s0, s15
 80017a6:	f7ff fb6b 	bl	8000e80 <map>
 80017aa:	eef0 7a40 	vmov.f32	s15, s0
 80017ae:	4b13      	ldr	r3, [pc, #76]	; (80017fc <Startjoys_imuTask+0x3b4>)
 80017b0:	edc3 7a00 	vstr	s15, [r3]
	  angular_velocity 	= map(vel_th, -1, 1, -123, 123);
 80017b4:	4b12      	ldr	r3, [pc, #72]	; (8001800 <Startjoys_imuTask+0x3b8>)
 80017b6:	edd3 7a00 	vldr	s15, [r3]
 80017ba:	ed9f 2a0c 	vldr	s4, [pc, #48]	; 80017ec <Startjoys_imuTask+0x3a4>
 80017be:	eddf 1a0c 	vldr	s3, [pc, #48]	; 80017f0 <Startjoys_imuTask+0x3a8>
 80017c2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80017c6:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80017ca:	eeb0 0a67 	vmov.f32	s0, s15
 80017ce:	f7ff fb57 	bl	8000e80 <map>
 80017d2:	eef0 7a40 	vmov.f32	s15, s0
 80017d6:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <Startjoys_imuTask+0x3bc>)
 80017d8:	edc3 7a00 	vstr	s15, [r3]

    osDelay(1);
 80017dc:	2001      	movs	r0, #1
 80017de:	f009 ff98 	bl	800b712 <osDelay>
	  if(joystick_bt_counter < joystick_bt_timeout){
 80017e2:	e635      	b.n	8001450 <Startjoys_imuTask+0x8>
 80017e4:	40021000 	.word	0x40021000
 80017e8:	20000380 	.word	0x20000380
 80017ec:	42f60000 	.word	0x42f60000
 80017f0:	c2f60000 	.word	0xc2f60000
 80017f4:	20000474 	.word	0x20000474
 80017f8:	20000384 	.word	0x20000384
 80017fc:	20000478 	.word	0x20000478
 8001800:	20000388 	.word	0x20000388
 8001804:	2000047c 	.word	0x2000047c

08001808 <StartrosserialTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartrosserialTask */
void StartrosserialTask(void const * argument)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartrosserialTask */
	setup();
 8001810:	f001 ff16 	bl	8003640 <setup>
  for(;;)
  {
//	  calculate_odometry();
//	  loop();
//    osDelay(20);
	  tick++;
 8001814:	4b05      	ldr	r3, [pc, #20]	; (800182c <StartrosserialTask+0x24>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	3301      	adds	r3, #1
 800181a:	4a04      	ldr	r2, [pc, #16]	; (800182c <StartrosserialTask+0x24>)
 800181c:	6013      	str	r3, [r2, #0]
	  loop();
 800181e:	f001 ff57 	bl	80036d0 <loop>
	  osDelay(20);
 8001822:	2014      	movs	r0, #20
 8001824:	f009 ff75 	bl	800b712 <osDelay>
	  tick++;
 8001828:	e7f4      	b.n	8001814 <StartrosserialTask+0xc>
 800182a:	bf00      	nop
 800182c:	20000480 	.word	0x20000480

08001830 <Startout_motorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startout_motorTask */
void Startout_motorTask(void const * argument)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startout_motorTask */
  /* Infinite loop */
  for(;;)
  {
	  //=================CONTROL SPEED==================//
	  	  if(joystick_increase_speed == 1 && lock_increase_speed == 0){
 8001838:	4b8f      	ldr	r3, [pc, #572]	; (8001a78 <Startout_motorTask+0x248>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d10b      	bne.n	8001858 <Startout_motorTask+0x28>
 8001840:	4b8e      	ldr	r3, [pc, #568]	; (8001a7c <Startout_motorTask+0x24c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d107      	bne.n	8001858 <Startout_motorTask+0x28>
	  		  speed++;
 8001848:	4b8d      	ldr	r3, [pc, #564]	; (8001a80 <Startout_motorTask+0x250>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	3301      	adds	r3, #1
 800184e:	4a8c      	ldr	r2, [pc, #560]	; (8001a80 <Startout_motorTask+0x250>)
 8001850:	6013      	str	r3, [r2, #0]
	  		  lock_increase_speed = 1;
 8001852:	4b8a      	ldr	r3, [pc, #552]	; (8001a7c <Startout_motorTask+0x24c>)
 8001854:	2201      	movs	r2, #1
 8001856:	601a      	str	r2, [r3, #0]
	  	  }
	  	  if(joystick_increase_speed == 0 && lock_increase_speed == 1){
 8001858:	4b87      	ldr	r3, [pc, #540]	; (8001a78 <Startout_motorTask+0x248>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d106      	bne.n	800186e <Startout_motorTask+0x3e>
 8001860:	4b86      	ldr	r3, [pc, #536]	; (8001a7c <Startout_motorTask+0x24c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d102      	bne.n	800186e <Startout_motorTask+0x3e>
	  		  lock_increase_speed = 0;
 8001868:	4b84      	ldr	r3, [pc, #528]	; (8001a7c <Startout_motorTask+0x24c>)
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
	  	  }

	  	  if(joystick_decrease_speed == 1 && lock_decrease_speed == 0){
 800186e:	4b85      	ldr	r3, [pc, #532]	; (8001a84 <Startout_motorTask+0x254>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d10b      	bne.n	800188e <Startout_motorTask+0x5e>
 8001876:	4b84      	ldr	r3, [pc, #528]	; (8001a88 <Startout_motorTask+0x258>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d107      	bne.n	800188e <Startout_motorTask+0x5e>
	  		  speed--;
 800187e:	4b80      	ldr	r3, [pc, #512]	; (8001a80 <Startout_motorTask+0x250>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	3b01      	subs	r3, #1
 8001884:	4a7e      	ldr	r2, [pc, #504]	; (8001a80 <Startout_motorTask+0x250>)
 8001886:	6013      	str	r3, [r2, #0]
	  		  lock_decrease_speed = 1;
 8001888:	4b7f      	ldr	r3, [pc, #508]	; (8001a88 <Startout_motorTask+0x258>)
 800188a:	2201      	movs	r2, #1
 800188c:	601a      	str	r2, [r3, #0]
	  	  }
	  	  if(joystick_decrease_speed == 0 && lock_decrease_speed == 1){
 800188e:	4b7d      	ldr	r3, [pc, #500]	; (8001a84 <Startout_motorTask+0x254>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d106      	bne.n	80018a4 <Startout_motorTask+0x74>
 8001896:	4b7c      	ldr	r3, [pc, #496]	; (8001a88 <Startout_motorTask+0x258>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d102      	bne.n	80018a4 <Startout_motorTask+0x74>
	  		  lock_decrease_speed = 0;
 800189e:	4b7a      	ldr	r3, [pc, #488]	; (8001a88 <Startout_motorTask+0x258>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
	    	  }

	  	  if(speed > 2){
 80018a4:	4b76      	ldr	r3, [pc, #472]	; (8001a80 <Startout_motorTask+0x250>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	dd02      	ble.n	80018b2 <Startout_motorTask+0x82>
	  		  speed = 0;
 80018ac:	4b74      	ldr	r3, [pc, #464]	; (8001a80 <Startout_motorTask+0x250>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
	  	  }
	  	  if(speed < 0){
 80018b2:	4b73      	ldr	r3, [pc, #460]	; (8001a80 <Startout_motorTask+0x250>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	da02      	bge.n	80018c0 <Startout_motorTask+0x90>
	  		  speed = 2;
 80018ba:	4b71      	ldr	r3, [pc, #452]	; (8001a80 <Startout_motorTask+0x250>)
 80018bc:	2202      	movs	r2, #2
 80018be:	601a      	str	r2, [r3, #0]
	  	  }

	  	  if(speed == 0){
 80018c0:	4b6f      	ldr	r3, [pc, #444]	; (8001a80 <Startout_motorTask+0x250>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d112      	bne.n	80018ee <Startout_motorTask+0xbe>
	  		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 80018c8:	2201      	movs	r2, #1
 80018ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018ce:	486f      	ldr	r0, [pc, #444]	; (8001a8c <Startout_motorTask+0x25c>)
 80018d0:	f006 fe6e 	bl	80085b0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80018d4:	2200      	movs	r2, #0
 80018d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018da:	486d      	ldr	r0, [pc, #436]	; (8001a90 <Startout_motorTask+0x260>)
 80018dc:	f006 fe68 	bl	80085b0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80018e0:	2200      	movs	r2, #0
 80018e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018e6:	486a      	ldr	r0, [pc, #424]	; (8001a90 <Startout_motorTask+0x260>)
 80018e8:	f006 fe62 	bl	80085b0 <HAL_GPIO_WritePin>
 80018ec:	e02c      	b.n	8001948 <Startout_motorTask+0x118>
	  	  }else if(speed == 1){
 80018ee:	4b64      	ldr	r3, [pc, #400]	; (8001a80 <Startout_motorTask+0x250>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d112      	bne.n	800191c <Startout_motorTask+0xec>
	  		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 80018f6:	2200      	movs	r2, #0
 80018f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018fc:	4863      	ldr	r0, [pc, #396]	; (8001a8c <Startout_motorTask+0x25c>)
 80018fe:	f006 fe57 	bl	80085b0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001902:	2201      	movs	r2, #1
 8001904:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001908:	4861      	ldr	r0, [pc, #388]	; (8001a90 <Startout_motorTask+0x260>)
 800190a:	f006 fe51 	bl	80085b0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800190e:	2200      	movs	r2, #0
 8001910:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001914:	485e      	ldr	r0, [pc, #376]	; (8001a90 <Startout_motorTask+0x260>)
 8001916:	f006 fe4b 	bl	80085b0 <HAL_GPIO_WritePin>
 800191a:	e015      	b.n	8001948 <Startout_motorTask+0x118>
	  	  }else if(speed == 2){
 800191c:	4b58      	ldr	r3, [pc, #352]	; (8001a80 <Startout_motorTask+0x250>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b02      	cmp	r3, #2
 8001922:	d111      	bne.n	8001948 <Startout_motorTask+0x118>
	  		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8001924:	2200      	movs	r2, #0
 8001926:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800192a:	4858      	ldr	r0, [pc, #352]	; (8001a8c <Startout_motorTask+0x25c>)
 800192c:	f006 fe40 	bl	80085b0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001930:	2200      	movs	r2, #0
 8001932:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001936:	4856      	ldr	r0, [pc, #344]	; (8001a90 <Startout_motorTask+0x260>)
 8001938:	f006 fe3a 	bl	80085b0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800193c:	2201      	movs	r2, #1
 800193e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001942:	4853      	ldr	r0, [pc, #332]	; (8001a90 <Startout_motorTask+0x260>)
 8001944:	f006 fe34 	bl	80085b0 <HAL_GPIO_WritePin>
	  	  }

	  	  //=====================SELECT MODE COMM/STM=================//
	  	  if(mode == 1){
 8001948:	4b52      	ldr	r3, [pc, #328]	; (8001a94 <Startout_motorTask+0x264>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d11b      	bne.n	8001988 <Startout_motorTask+0x158>
	  		motor_VectorKinematic(angular_velocity, y_velocity, x_velocity);
 8001950:	4b51      	ldr	r3, [pc, #324]	; (8001a98 <Startout_motorTask+0x268>)
 8001952:	edd3 7a00 	vldr	s15, [r3]
 8001956:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800195a:	ee17 3a90 	vmov	r3, s15
 800195e:	b21b      	sxth	r3, r3
 8001960:	4a4e      	ldr	r2, [pc, #312]	; (8001a9c <Startout_motorTask+0x26c>)
 8001962:	edd2 7a00 	vldr	s15, [r2]
 8001966:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800196a:	ee17 2a90 	vmov	r2, s15
 800196e:	b211      	sxth	r1, r2
 8001970:	4a4b      	ldr	r2, [pc, #300]	; (8001aa0 <Startout_motorTask+0x270>)
 8001972:	edd2 7a00 	vldr	s15, [r2]
 8001976:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800197a:	ee17 2a90 	vmov	r2, s15
 800197e:	b212      	sxth	r2, r2
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff faad 	bl	8000ee0 <motor_VectorKinematic>
 8001986:	e012      	b.n	80019ae <Startout_motorTask+0x17e>
	  	  }
	  	  else if(mode == 0){
 8001988:	4b42      	ldr	r3, [pc, #264]	; (8001a94 <Startout_motorTask+0x264>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d10e      	bne.n	80019ae <Startout_motorTask+0x17e>
	  		motor_VectorKinematic(joystick_z, joystick_y, joystick_x);
 8001990:	4b44      	ldr	r3, [pc, #272]	; (8001aa4 <Startout_motorTask+0x274>)
 8001992:	f993 3000 	ldrsb.w	r3, [r3]
 8001996:	b21b      	sxth	r3, r3
 8001998:	4a43      	ldr	r2, [pc, #268]	; (8001aa8 <Startout_motorTask+0x278>)
 800199a:	f992 2000 	ldrsb.w	r2, [r2]
 800199e:	b211      	sxth	r1, r2
 80019a0:	4a42      	ldr	r2, [pc, #264]	; (8001aac <Startout_motorTask+0x27c>)
 80019a2:	f992 2000 	ldrsb.w	r2, [r2]
 80019a6:	b212      	sxth	r2, r2
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fa99 	bl	8000ee0 <motor_VectorKinematic>
	  	  }
	  	  //========================OUTPUT PWM===========================//
	  	  if (outputPWM[1] < 0){
 80019ae:	4b40      	ldr	r3, [pc, #256]	; (8001ab0 <Startout_motorTask+0x280>)
 80019b0:	edd3 7a01 	vldr	s15, [r3, #4]
 80019b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019bc:	d50c      	bpl.n	80019d8 <Startout_motorTask+0x1a8>
	  		  HAL_GPIO_WritePin(MOTOR1A_GPIO_Port, MOTOR1A_Pin, GPIO_PIN_SET);
 80019be:	2201      	movs	r2, #1
 80019c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019c4:	483b      	ldr	r0, [pc, #236]	; (8001ab4 <Startout_motorTask+0x284>)
 80019c6:	f006 fdf3 	bl	80085b0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(MOTOR1B_GPIO_Port, MOTOR1B_Pin, GPIO_PIN_RESET);
 80019ca:	2200      	movs	r2, #0
 80019cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019d0:	4838      	ldr	r0, [pc, #224]	; (8001ab4 <Startout_motorTask+0x284>)
 80019d2:	f006 fded 	bl	80085b0 <HAL_GPIO_WritePin>
 80019d6:	e013      	b.n	8001a00 <Startout_motorTask+0x1d0>
	  	 	  }
	  	  else if (outputPWM[1] > 0){
 80019d8:	4b35      	ldr	r3, [pc, #212]	; (8001ab0 <Startout_motorTask+0x280>)
 80019da:	edd3 7a01 	vldr	s15, [r3, #4]
 80019de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e6:	dd0b      	ble.n	8001a00 <Startout_motorTask+0x1d0>
	   		  HAL_GPIO_WritePin(MOTOR1A_GPIO_Port, MOTOR1A_Pin, GPIO_PIN_RESET);
 80019e8:	2200      	movs	r2, #0
 80019ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019ee:	4831      	ldr	r0, [pc, #196]	; (8001ab4 <Startout_motorTask+0x284>)
 80019f0:	f006 fdde 	bl	80085b0 <HAL_GPIO_WritePin>
	   		  HAL_GPIO_WritePin(MOTOR1B_GPIO_Port, MOTOR1B_Pin, GPIO_PIN_SET);
 80019f4:	2201      	movs	r2, #1
 80019f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019fa:	482e      	ldr	r0, [pc, #184]	; (8001ab4 <Startout_motorTask+0x284>)
 80019fc:	f006 fdd8 	bl	80085b0 <HAL_GPIO_WritePin>
	   	  }
	   	  //==============================================================================
	   	  if (outputPWM[2] < 0){
 8001a00:	4b2b      	ldr	r3, [pc, #172]	; (8001ab0 <Startout_motorTask+0x280>)
 8001a02:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a0e:	d50b      	bpl.n	8001a28 <Startout_motorTask+0x1f8>
	   		  HAL_GPIO_WritePin(MOTOR2A_GPIO_Port, MOTOR2A_Pin, GPIO_PIN_SET);
 8001a10:	2201      	movs	r2, #1
 8001a12:	2180      	movs	r1, #128	; 0x80
 8001a14:	481d      	ldr	r0, [pc, #116]	; (8001a8c <Startout_motorTask+0x25c>)
 8001a16:	f006 fdcb 	bl	80085b0 <HAL_GPIO_WritePin>
	   		  HAL_GPIO_WritePin(MOTOR2B_GPIO_Port, MOTOR2B_Pin, GPIO_PIN_RESET);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a20:	481a      	ldr	r0, [pc, #104]	; (8001a8c <Startout_motorTask+0x25c>)
 8001a22:	f006 fdc5 	bl	80085b0 <HAL_GPIO_WritePin>
 8001a26:	e012      	b.n	8001a4e <Startout_motorTask+0x21e>
	   	  }
	   	  else if (outputPWM[2] > 0){
 8001a28:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <Startout_motorTask+0x280>)
 8001a2a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a36:	dd0a      	ble.n	8001a4e <Startout_motorTask+0x21e>
	   		  HAL_GPIO_WritePin(MOTOR2A_GPIO_Port, MOTOR2A_Pin, GPIO_PIN_RESET);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2180      	movs	r1, #128	; 0x80
 8001a3c:	4813      	ldr	r0, [pc, #76]	; (8001a8c <Startout_motorTask+0x25c>)
 8001a3e:	f006 fdb7 	bl	80085b0 <HAL_GPIO_WritePin>
	   		  HAL_GPIO_WritePin(MOTOR2B_GPIO_Port, MOTOR2B_Pin, GPIO_PIN_SET);
 8001a42:	2201      	movs	r2, #1
 8001a44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a48:	4810      	ldr	r0, [pc, #64]	; (8001a8c <Startout_motorTask+0x25c>)
 8001a4a:	f006 fdb1 	bl	80085b0 <HAL_GPIO_WritePin>
	   	  }
	   	  //==============================================================================
	   	  if (outputPWM[0] < 0){
 8001a4e:	4b18      	ldr	r3, [pc, #96]	; (8001ab0 <Startout_motorTask+0x280>)
 8001a50:	edd3 7a00 	vldr	s15, [r3]
 8001a54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a5c:	d52e      	bpl.n	8001abc <Startout_motorTask+0x28c>
	   		  HAL_GPIO_WritePin(MOTOR3A_GPIO_Port, MOTOR3A_Pin, GPIO_PIN_SET);
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a64:	4814      	ldr	r0, [pc, #80]	; (8001ab8 <Startout_motorTask+0x288>)
 8001a66:	f006 fda3 	bl	80085b0 <HAL_GPIO_WritePin>
	   		  HAL_GPIO_WritePin(MOTOR3B_GPIO_Port, MOTOR3B_Pin, GPIO_PIN_RESET);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a70:	4811      	ldr	r0, [pc, #68]	; (8001ab8 <Startout_motorTask+0x288>)
 8001a72:	f006 fd9d 	bl	80085b0 <HAL_GPIO_WritePin>
 8001a76:	e035      	b.n	8001ae4 <Startout_motorTask+0x2b4>
 8001a78:	2000041c 	.word	0x2000041c
 8001a7c:	20000428 	.word	0x20000428
 8001a80:	20000424 	.word	0x20000424
 8001a84:	20000420 	.word	0x20000420
 8001a88:	2000042c 	.word	0x2000042c
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	40020000 	.word	0x40020000
 8001a94:	20000418 	.word	0x20000418
 8001a98:	2000047c 	.word	0x2000047c
 8001a9c:	20000478 	.word	0x20000478
 8001aa0:	20000474 	.word	0x20000474
 8001aa4:	2000040e 	.word	0x2000040e
 8001aa8:	2000040d 	.word	0x2000040d
 8001aac:	2000040c 	.word	0x2000040c
 8001ab0:	200003f0 	.word	0x200003f0
 8001ab4:	40020800 	.word	0x40020800
 8001ab8:	40020c00 	.word	0x40020c00
	   	  }
	   	  else if (outputPWM[0] > 0)
 8001abc:	4b2b      	ldr	r3, [pc, #172]	; (8001b6c <Startout_motorTask+0x33c>)
 8001abe:	edd3 7a00 	vldr	s15, [r3]
 8001ac2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aca:	dd0b      	ble.n	8001ae4 <Startout_motorTask+0x2b4>
	   	  {
	   		  HAL_GPIO_WritePin(MOTOR3A_GPIO_Port, MOTOR3A_Pin, GPIO_PIN_RESET);
 8001acc:	2200      	movs	r2, #0
 8001ace:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ad2:	4827      	ldr	r0, [pc, #156]	; (8001b70 <Startout_motorTask+0x340>)
 8001ad4:	f006 fd6c 	bl	80085b0 <HAL_GPIO_WritePin>
	   		  HAL_GPIO_WritePin(MOTOR3B_GPIO_Port, MOTOR3B_Pin, GPIO_PIN_SET);
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ade:	4824      	ldr	r0, [pc, #144]	; (8001b70 <Startout_motorTask+0x340>)
 8001ae0:	f006 fd66 	bl	80085b0 <HAL_GPIO_WritePin>
	   	  }

	   	  //========================SAFETY CONTROL PWM=====================//
	   	  if(joystick_bt_counter == 299 || joystick_mode == 0){
 8001ae4:	4b23      	ldr	r3, [pc, #140]	; (8001b74 <Startout_motorTask+0x344>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f240 122b 	movw	r2, #299	; 0x12b
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d003      	beq.n	8001af8 <Startout_motorTask+0x2c8>
 8001af0:	4b21      	ldr	r3, [pc, #132]	; (8001b78 <Startout_motorTask+0x348>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d10b      	bne.n	8001b10 <Startout_motorTask+0x2e0>
	   		  outputPWM[0] = 0;
 8001af8:	4b1c      	ldr	r3, [pc, #112]	; (8001b6c <Startout_motorTask+0x33c>)
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
	   		  outputPWM[1] = 0;
 8001b00:	4b1a      	ldr	r3, [pc, #104]	; (8001b6c <Startout_motorTask+0x33c>)
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	605a      	str	r2, [r3, #4]
	   		  outputPWM[2] = 0;
 8001b08:	4b18      	ldr	r3, [pc, #96]	; (8001b6c <Startout_motorTask+0x33c>)
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	609a      	str	r2, [r3, #8]
	   	  }

	   	  __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, abs(outputPWM[1]));
 8001b10:	4b16      	ldr	r3, [pc, #88]	; (8001b6c <Startout_motorTask+0x33c>)
 8001b12:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b1a:	ee17 3a90 	vmov	r3, s15
 8001b1e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001b22:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001b26:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <Startout_motorTask+0x34c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	635a      	str	r2, [r3, #52]	; 0x34
	   	  __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, abs(outputPWM[2]));
 8001b2c:	4b0f      	ldr	r3, [pc, #60]	; (8001b6c <Startout_motorTask+0x33c>)
 8001b2e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b36:	ee17 3a90 	vmov	r3, s15
 8001b3a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001b3e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001b42:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <Startout_motorTask+0x34c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	639a      	str	r2, [r3, #56]	; 0x38
	   	  __HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, abs(outputPWM[0]));
 8001b48:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <Startout_motorTask+0x33c>)
 8001b4a:	edd3 7a00 	vldr	s15, [r3]
 8001b4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b52:	ee17 3a90 	vmov	r3, s15
 8001b56:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001b5a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001b5e:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <Startout_motorTask+0x350>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	639a      	str	r2, [r3, #56]	; 0x38

	   	  osDelay(1);
 8001b64:	2001      	movs	r0, #1
 8001b66:	f009 fdd4 	bl	800b712 <osDelay>
	  	  if(joystick_increase_speed == 1 && lock_increase_speed == 0){
 8001b6a:	e665      	b.n	8001838 <Startout_motorTask+0x8>
 8001b6c:	200003f0 	.word	0x200003f0
 8001b70:	40020c00 	.word	0x40020c00
 8001b74:	20000410 	.word	0x20000410
 8001b78:	20000414 	.word	0x20000414
 8001b7c:	20002bb0 	.word	0x20002bb0
 8001b80:	20002bf8 	.word	0x20002bf8

08001b84 <MX_GPIO_Init>:
     PD1   ------> CAN1_TX
     PB8   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08c      	sub	sp, #48	; 0x30
 8001b88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8a:	f107 031c 	add.w	r3, r7, #28
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	609a      	str	r2, [r3, #8]
 8001b96:	60da      	str	r2, [r3, #12]
 8001b98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61bb      	str	r3, [r7, #24]
 8001b9e:	4b96      	ldr	r3, [pc, #600]	; (8001df8 <MX_GPIO_Init+0x274>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	4a95      	ldr	r2, [pc, #596]	; (8001df8 <MX_GPIO_Init+0x274>)
 8001ba4:	f043 0310 	orr.w	r3, r3, #16
 8001ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8001baa:	4b93      	ldr	r3, [pc, #588]	; (8001df8 <MX_GPIO_Init+0x274>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f003 0310 	and.w	r3, r3, #16
 8001bb2:	61bb      	str	r3, [r7, #24]
 8001bb4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	617b      	str	r3, [r7, #20]
 8001bba:	4b8f      	ldr	r3, [pc, #572]	; (8001df8 <MX_GPIO_Init+0x274>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	4a8e      	ldr	r2, [pc, #568]	; (8001df8 <MX_GPIO_Init+0x274>)
 8001bc0:	f043 0304 	orr.w	r3, r3, #4
 8001bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc6:	4b8c      	ldr	r3, [pc, #560]	; (8001df8 <MX_GPIO_Init+0x274>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	f003 0304 	and.w	r3, r3, #4
 8001bce:	617b      	str	r3, [r7, #20]
 8001bd0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	4b88      	ldr	r3, [pc, #544]	; (8001df8 <MX_GPIO_Init+0x274>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	4a87      	ldr	r2, [pc, #540]	; (8001df8 <MX_GPIO_Init+0x274>)
 8001bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be0:	6313      	str	r3, [r2, #48]	; 0x30
 8001be2:	4b85      	ldr	r3, [pc, #532]	; (8001df8 <MX_GPIO_Init+0x274>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	4b81      	ldr	r3, [pc, #516]	; (8001df8 <MX_GPIO_Init+0x274>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a80      	ldr	r2, [pc, #512]	; (8001df8 <MX_GPIO_Init+0x274>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b7e      	ldr	r3, [pc, #504]	; (8001df8 <MX_GPIO_Init+0x274>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	4b7a      	ldr	r3, [pc, #488]	; (8001df8 <MX_GPIO_Init+0x274>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	4a79      	ldr	r2, [pc, #484]	; (8001df8 <MX_GPIO_Init+0x274>)
 8001c14:	f043 0302 	orr.w	r3, r3, #2
 8001c18:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1a:	4b77      	ldr	r3, [pc, #476]	; (8001df8 <MX_GPIO_Init+0x274>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	60bb      	str	r3, [r7, #8]
 8001c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	4b73      	ldr	r3, [pc, #460]	; (8001df8 <MX_GPIO_Init+0x274>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	4a72      	ldr	r2, [pc, #456]	; (8001df8 <MX_GPIO_Init+0x274>)
 8001c30:	f043 0308 	orr.w	r3, r3, #8
 8001c34:	6313      	str	r3, [r2, #48]	; 0x30
 8001c36:	4b70      	ldr	r3, [pc, #448]	; (8001df8 <MX_GPIO_Init+0x274>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	f003 0308 	and.w	r3, r3, #8
 8001c3e:	607b      	str	r3, [r7, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|MOTOR2A_Pin|MOTOR2B_Pin|GPIO_PIN_10
 8001c42:	2200      	movs	r2, #0
 8001c44:	f24f 5189 	movw	r1, #62857	; 0xf589
 8001c48:	486c      	ldr	r0, [pc, #432]	; (8001dfc <MX_GPIO_Init+0x278>)
 8001c4a:	f006 fcb1 	bl	80085b0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001c4e:	2201      	movs	r2, #1
 8001c50:	2101      	movs	r1, #1
 8001c52:	486b      	ldr	r0, [pc, #428]	; (8001e00 <MX_GPIO_Init+0x27c>)
 8001c54:	f006 fcac 	bl	80085b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD1_Pin|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f641 0102 	movw	r1, #6146	; 0x1802
 8001c5e:	4869      	ldr	r0, [pc, #420]	; (8001e04 <MX_GPIO_Init+0x280>)
 8001c60:	f006 fca6 	bl	80085b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|MOTOR1A_Pin|MOTOR1B_Pin, GPIO_PIN_RESET);
 8001c64:	2200      	movs	r2, #0
 8001c66:	f44f 714c 	mov.w	r1, #816	; 0x330
 8001c6a:	4865      	ldr	r0, [pc, #404]	; (8001e00 <MX_GPIO_Init+0x27c>)
 8001c6c:	f006 fca0 	bl	80085b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MOTOR3A_Pin|MOTOR3B_Pin|Audio_RST_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001c70:	2200      	movs	r2, #0
 8001c72:	f44f 6145 	mov.w	r1, #3152	; 0xc50
 8001c76:	4864      	ldr	r0, [pc, #400]	; (8001e08 <MX_GPIO_Init+0x284>)
 8001c78:	f006 fc9a 	bl	80085b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PEPin PEPin PE10
                           PE12 PE13 PE14 PE15
                           PEPin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|MOTOR2A_Pin|MOTOR2B_Pin|GPIO_PIN_10
 8001c7c:	f24f 5389 	movw	r3, #62857	; 0xf589
 8001c80:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c82:	2301      	movs	r3, #1
 8001c84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c8e:	f107 031c 	add.w	r3, r7, #28
 8001c92:	4619      	mov	r1, r3
 8001c94:	4859      	ldr	r0, [pc, #356]	; (8001dfc <MX_GPIO_Init+0x278>)
 8001c96:	f006 faef 	bl	8008278 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PC4 PC5 PCPin
                           PCPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_4|GPIO_PIN_5|MOTOR1A_Pin
 8001c9a:	f240 3331 	movw	r3, #817	; 0x331
 8001c9e:	61fb      	str	r3, [r7, #28]
                          |MOTOR1B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cac:	f107 031c 	add.w	r3, r7, #28
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4853      	ldr	r0, [pc, #332]	; (8001e00 <MX_GPIO_Init+0x27c>)
 8001cb4:	f006 fae0 	bl	8008278 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001cb8:	2306      	movs	r3, #6
 8001cba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cc4:	f107 031c 	add.w	r3, r7, #28
 8001cc8:	4619      	mov	r1, r3
 8001cca:	484d      	ldr	r0, [pc, #308]	; (8001e00 <MX_GPIO_Init+0x27c>)
 8001ccc:	f006 fad4 	bl	8008278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001cd4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001cd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001cde:	f107 031c 	add.w	r3, r7, #28
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4847      	ldr	r0, [pc, #284]	; (8001e04 <MX_GPIO_Init+0x280>)
 8001ce6:	f006 fac7 	bl	8008278 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA11 PA12 */
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_11|GPIO_PIN_12;
 8001cea:	f641 0302 	movw	r3, #6146	; 0x1802
 8001cee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfc:	f107 031c 	add.w	r3, r7, #28
 8001d00:	4619      	mov	r1, r3
 8001d02:	4840      	ldr	r0, [pc, #256]	; (8001e04 <MX_GPIO_Init+0x280>)
 8001d04:	f006 fab8 	bl	8008278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d08:	2310      	movs	r3, #16
 8001d0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d14:	2303      	movs	r3, #3
 8001d16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d18:	2305      	movs	r3, #5
 8001d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1c:	f107 031c 	add.w	r3, r7, #28
 8001d20:	4619      	mov	r1, r3
 8001d22:	4838      	ldr	r0, [pc, #224]	; (8001e04 <MX_GPIO_Init+0x280>)
 8001d24:	f006 faa8 	bl	8008278 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8001d28:	f243 0307 	movw	r3, #12295	; 0x3007
 8001d2c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d36:	f107 031c 	add.w	r3, r7, #28
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4833      	ldr	r0, [pc, #204]	; (8001e0c <MX_GPIO_Init+0x288>)
 8001d3e:	f006 fa9b 	bl	8008278 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = MOTOR3A_Pin|MOTOR3B_Pin|Audio_RST_Pin|LED2_Pin;
 8001d42:	f44f 6345 	mov.w	r3, #3152	; 0xc50
 8001d46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d50:	2300      	movs	r3, #0
 8001d52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d54:	f107 031c 	add.w	r3, r7, #28
 8001d58:	4619      	mov	r1, r3
 8001d5a:	482b      	ldr	r0, [pc, #172]	; (8001e08 <MX_GPIO_Init+0x284>)
 8001d5c:	f006 fa8c 	bl	8008278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001d60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d66:	2303      	movs	r3, #3
 8001d68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d6e:	f107 031c 	add.w	r3, r7, #28
 8001d72:	4619      	mov	r1, r3
 8001d74:	4824      	ldr	r0, [pc, #144]	; (8001e08 <MX_GPIO_Init+0x284>)
 8001d76:	f006 fa7f 	bl	8008278 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7e:	2302      	movs	r3, #2
 8001d80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d86:	2303      	movs	r3, #3
 8001d88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001d8a:	2309      	movs	r3, #9
 8001d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d8e:	f107 031c 	add.w	r3, r7, #28
 8001d92:	4619      	mov	r1, r3
 8001d94:	481c      	ldr	r0, [pc, #112]	; (8001e08 <MX_GPIO_Init+0x284>)
 8001d96:	f006 fa6f 	bl	8008278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001d9a:	2320      	movs	r3, #32
 8001d9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001da6:	f107 031c 	add.w	r3, r7, #28
 8001daa:	4619      	mov	r1, r3
 8001dac:	4816      	ldr	r0, [pc, #88]	; (8001e08 <MX_GPIO_Init+0x284>)
 8001dae:	f006 fa63 	bl	8008278 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001db2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001db6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001db8:	2312      	movs	r3, #18
 8001dba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dc4:	2304      	movs	r3, #4
 8001dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc8:	f107 031c 	add.w	r3, r7, #28
 8001dcc:	4619      	mov	r1, r3
 8001dce:	480f      	ldr	r0, [pc, #60]	; (8001e0c <MX_GPIO_Init+0x288>)
 8001dd0:	f006 fa52 	bl	8008278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001dd8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001ddc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001de2:	f107 031c 	add.w	r3, r7, #28
 8001de6:	4619      	mov	r1, r3
 8001de8:	4804      	ldr	r0, [pc, #16]	; (8001dfc <MX_GPIO_Init+0x278>)
 8001dea:	f006 fa45 	bl	8008278 <HAL_GPIO_Init>

}
 8001dee:	bf00      	nop
 8001df0:	3730      	adds	r7, #48	; 0x30
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	40020800 	.word	0x40020800
 8001e04:	40020000 	.word	0x40020000
 8001e08:	40020c00 	.word	0x40020c00
 8001e0c:	40020400 	.word	0x40020400

08001e10 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e20:	d105      	bne.n	8001e2e <HAL_TIM_IC_CaptureCallback+0x1e>
		encoder[0] = __HAL_TIM_GET_COUNTER(&htim2);
 8001e22:	4b1c      	ldr	r3, [pc, #112]	; (8001e94 <HAL_TIM_IC_CaptureCallback+0x84>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4b1b      	ldr	r3, [pc, #108]	; (8001e98 <HAL_TIM_IC_CaptureCallback+0x88>)
 8001e2c:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM3){
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a1a      	ldr	r2, [pc, #104]	; (8001e9c <HAL_TIM_IC_CaptureCallback+0x8c>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d105      	bne.n	8001e44 <HAL_TIM_IC_CaptureCallback+0x34>
		encoder[1] = __HAL_TIM_GET_COUNTER(&htim3);
 8001e38:	4b19      	ldr	r3, [pc, #100]	; (8001ea0 <HAL_TIM_IC_CaptureCallback+0x90>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3e:	461a      	mov	r2, r3
 8001e40:	4b15      	ldr	r3, [pc, #84]	; (8001e98 <HAL_TIM_IC_CaptureCallback+0x88>)
 8001e42:	605a      	str	r2, [r3, #4]
	}
	if(htim->Instance == TIM4){
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a16      	ldr	r2, [pc, #88]	; (8001ea4 <HAL_TIM_IC_CaptureCallback+0x94>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d105      	bne.n	8001e5a <HAL_TIM_IC_CaptureCallback+0x4a>
		encoder[2] = __HAL_TIM_GET_COUNTER(&htim4);
 8001e4e:	4b16      	ldr	r3, [pc, #88]	; (8001ea8 <HAL_TIM_IC_CaptureCallback+0x98>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e54:	461a      	mov	r2, r3
 8001e56:	4b10      	ldr	r3, [pc, #64]	; (8001e98 <HAL_TIM_IC_CaptureCallback+0x88>)
 8001e58:	609a      	str	r2, [r3, #8]
	}

	if(htim->Instance == TIM1){
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a13      	ldr	r2, [pc, #76]	; (8001eac <HAL_TIM_IC_CaptureCallback+0x9c>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d105      	bne.n	8001e70 <HAL_TIM_IC_CaptureCallback+0x60>
		odometry[0] = __HAL_TIM_GET_COUNTER(&htim1);
 8001e64:	4b12      	ldr	r3, [pc, #72]	; (8001eb0 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	4b11      	ldr	r3, [pc, #68]	; (8001eb4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8001e6e:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM8){
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a10      	ldr	r2, [pc, #64]	; (8001eb8 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d105      	bne.n	8001e86 <HAL_TIM_IC_CaptureCallback+0x76>
		odometry[1] = __HAL_TIM_GET_COUNTER(&htim8);
 8001e7a:	4b10      	ldr	r3, [pc, #64]	; (8001ebc <HAL_TIM_IC_CaptureCallback+0xac>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e80:	461a      	mov	r2, r3
 8001e82:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8001e84:	605a      	str	r2, [r3, #4]
	}
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	20002a48 	.word	0x20002a48
 8001e98:	2000038c 	.word	0x2000038c
 8001e9c:	40000400 	.word	0x40000400
 8001ea0:	20002a90 	.word	0x20002a90
 8001ea4:	40000800 	.word	0x40000800
 8001ea8:	20002ad8 	.word	0x20002ad8
 8001eac:	40010000 	.word	0x40010000
 8001eb0:	20002a00 	.word	0x20002a00
 8001eb4:	2000046c 	.word	0x2000046c
 8001eb8:	40010400 	.word	0x40010400
 8001ebc:	20002b68 	.word	0x20002b68

08001ec0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ec4:	f000 f862 	bl	8001f8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ec8:	f7ff fe5c 	bl	8001b84 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ecc:	f7ff fa20 	bl	8001310 <MX_DMA_Init>
  MX_TIM1_Init();
 8001ed0:	f004 fc9a 	bl	8006808 <MX_TIM1_Init>
  MX_TIM9_Init();
 8001ed4:	f004 fe7a 	bl	8006bcc <MX_TIM9_Init>
  MX_TIM4_Init();
 8001ed8:	f004 fd96 	bl	8006a08 <MX_TIM4_Init>
  MX_TIM3_Init();
 8001edc:	f004 fd40 	bl	8006960 <MX_TIM3_Init>
  MX_UART4_Init();
 8001ee0:	f005 f9cc 	bl	800727c <MX_UART4_Init>
  MX_USART3_UART_Init();
 8001ee4:	f005 fa72 	bl	80073cc <MX_USART3_UART_Init>
  MX_TIM12_Init();
 8001ee8:	f004 fedc 	bl	8006ca4 <MX_TIM12_Init>
  MX_USART2_UART_Init();
 8001eec:	f005 fa44 	bl	8007378 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001ef0:	f004 fce2 	bl	80068b8 <MX_TIM2_Init>
  MX_TIM8_Init();
 8001ef4:	f004 fe12 	bl	8006b1c <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8001ef8:	f005 fa14 	bl	8007324 <MX_USART1_UART_Init>
  MX_TIM7_Init();
 8001efc:	f004 fdd8 	bl	8006ab0 <MX_TIM7_Init>
  MX_TIM13_Init();
 8001f00:	f004 ff3c 	bl	8006d7c <MX_TIM13_Init>
  MX_UART5_Init();
 8001f04:	f005 f9e4 	bl	80072d0 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 8001f08:	4817      	ldr	r0, [pc, #92]	; (8001f68 <main+0xa8>)
 8001f0a:	f007 f885 	bl	8009018 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim13);
 8001f0e:	4817      	ldr	r0, [pc, #92]	; (8001f6c <main+0xac>)
 8001f10:	f007 f882 	bl	8009018 <HAL_TIM_Base_Start_IT>

  //============ACTUATOR MOTOR============
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);//M1
 8001f14:	2100      	movs	r1, #0
 8001f16:	4816      	ldr	r0, [pc, #88]	; (8001f70 <main+0xb0>)
 8001f18:	f007 f948 	bl	80091ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);//M2
 8001f1c:	2104      	movs	r1, #4
 8001f1e:	4814      	ldr	r0, [pc, #80]	; (8001f70 <main+0xb0>)
 8001f20:	f007 f944 	bl	80091ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);//M3
 8001f24:	2104      	movs	r1, #4
 8001f26:	4813      	ldr	r0, [pc, #76]	; (8001f74 <main+0xb4>)
 8001f28:	f007 f940 	bl	80091ac <HAL_TIM_PWM_Start>

  //=============EXTERNAL PWM=============
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);//EXTERNAL PWM
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	4811      	ldr	r0, [pc, #68]	; (8001f74 <main+0xb4>)
 8001f30:	f007 f93c 	bl	80091ac <HAL_TIM_PWM_Start>

  //=============ENCODER MOTOR============
  HAL_TIM_Encoder_Start_IT(&htim2,TIM_CHANNEL_ALL);
 8001f34:	213c      	movs	r1, #60	; 0x3c
 8001f36:	4810      	ldr	r0, [pc, #64]	; (8001f78 <main+0xb8>)
 8001f38:	f007 faa6 	bl	8009488 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_ALL);
 8001f3c:	213c      	movs	r1, #60	; 0x3c
 8001f3e:	480f      	ldr	r0, [pc, #60]	; (8001f7c <main+0xbc>)
 8001f40:	f007 faa2 	bl	8009488 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4,TIM_CHANNEL_ALL);
 8001f44:	213c      	movs	r1, #60	; 0x3c
 8001f46:	480e      	ldr	r0, [pc, #56]	; (8001f80 <main+0xc0>)
 8001f48:	f007 fa9e 	bl	8009488 <HAL_TIM_Encoder_Start_IT>

  HAL_TIM_Encoder_Start_IT(&htim1,TIM_CHANNEL_ALL);
 8001f4c:	213c      	movs	r1, #60	; 0x3c
 8001f4e:	480d      	ldr	r0, [pc, #52]	; (8001f84 <main+0xc4>)
 8001f50:	f007 fa9a 	bl	8009488 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim8,TIM_CHANNEL_ALL);
 8001f54:	213c      	movs	r1, #60	; 0x3c
 8001f56:	480c      	ldr	r0, [pc, #48]	; (8001f88 <main+0xc8>)
 8001f58:	f007 fa96 	bl	8009488 <HAL_TIM_Encoder_Start_IT>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001f5c:	f7ff fa2a 	bl	80013b4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001f60:	f009 fb84 	bl	800b66c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f64:	e7fe      	b.n	8001f64 <main+0xa4>
 8001f66:	bf00      	nop
 8001f68:	20002b20 	.word	0x20002b20
 8001f6c:	20002c40 	.word	0x20002c40
 8001f70:	20002bb0 	.word	0x20002bb0
 8001f74:	20002bf8 	.word	0x20002bf8
 8001f78:	20002a48 	.word	0x20002a48
 8001f7c:	20002a90 	.word	0x20002a90
 8001f80:	20002ad8 	.word	0x20002ad8
 8001f84:	20002a00 	.word	0x20002a00
 8001f88:	20002b68 	.word	0x20002b68

08001f8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b094      	sub	sp, #80	; 0x50
 8001f90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f92:	f107 0320 	add.w	r3, r7, #32
 8001f96:	2230      	movs	r2, #48	; 0x30
 8001f98:	2100      	movs	r1, #0
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f00b fbbe 	bl	800d71c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fa0:	f107 030c 	add.w	r3, r7, #12
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	60da      	str	r2, [r3, #12]
 8001fae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	60bb      	str	r3, [r7, #8]
 8001fb4:	4b28      	ldr	r3, [pc, #160]	; (8002058 <SystemClock_Config+0xcc>)
 8001fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb8:	4a27      	ldr	r2, [pc, #156]	; (8002058 <SystemClock_Config+0xcc>)
 8001fba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fbe:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc0:	4b25      	ldr	r3, [pc, #148]	; (8002058 <SystemClock_Config+0xcc>)
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc8:	60bb      	str	r3, [r7, #8]
 8001fca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fcc:	2300      	movs	r3, #0
 8001fce:	607b      	str	r3, [r7, #4]
 8001fd0:	4b22      	ldr	r3, [pc, #136]	; (800205c <SystemClock_Config+0xd0>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a21      	ldr	r2, [pc, #132]	; (800205c <SystemClock_Config+0xd0>)
 8001fd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fda:	6013      	str	r3, [r2, #0]
 8001fdc:	4b1f      	ldr	r3, [pc, #124]	; (800205c <SystemClock_Config+0xd0>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fe4:	607b      	str	r3, [r7, #4]
 8001fe6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ff6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ffc:	2308      	movs	r3, #8
 8001ffe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002000:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002004:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002006:	2302      	movs	r3, #2
 8002008:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800200a:	2307      	movs	r3, #7
 800200c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800200e:	f107 0320 	add.w	r3, r7, #32
 8002012:	4618      	mov	r0, r3
 8002014:	f006 fae6 	bl	80085e4 <HAL_RCC_OscConfig>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800201e:	f000 f839 	bl	8002094 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002022:	230f      	movs	r3, #15
 8002024:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002026:	2302      	movs	r3, #2
 8002028:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800202e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002032:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002034:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002038:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800203a:	f107 030c 	add.w	r3, r7, #12
 800203e:	2105      	movs	r1, #5
 8002040:	4618      	mov	r0, r3
 8002042:	f006 fd47 	bl	8008ad4 <HAL_RCC_ClockConfig>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800204c:	f000 f822 	bl	8002094 <Error_Handler>
  }
}
 8002050:	bf00      	nop
 8002052:	3750      	adds	r7, #80	; 0x50
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40023800 	.word	0x40023800
 800205c:	40007000 	.word	0x40007000

08002060 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM7){
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a07      	ldr	r2, [pc, #28]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d101      	bne.n	8002076 <HAL_TIM_PeriodElapsedCallback+0x16>
		motor_VeloControl();
 8002072:	f7ff f801 	bl	8001078 <motor_VeloControl>
	}
	if (htim->Instance == TIM13){
//		motor_VectorKinematic(joystick_x, joystick_y, joystick_z);
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a05      	ldr	r2, [pc, #20]	; (8002090 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d101      	bne.n	8002084 <HAL_TIM_PeriodElapsedCallback+0x24>
    HAL_IncTick();
 8002080:	f005 fc24 	bl	80078cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002084:	bf00      	nop
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40001400 	.word	0x40001400
 8002090:	40001000 	.word	0x40001000

08002094 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002098:	b672      	cpsid	i
}
 800209a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800209c:	e7fe      	b.n	800209c <Error_Handler+0x8>

0800209e <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4618      	mov	r0, r3
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <_ZN3ros3Msg19serializeAvrFloat64EPhf>:
   * @param[in] f value to serialize.
   *
   * @return number of bytes to advance the buffer pointer.
   *
   */
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 80020c0:	b480      	push	{r7}
 80020c2:	b087      	sub	sp, #28
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	ed87 0a00 	vstr	s0, [r7]
 80020cc:	683b      	ldr	r3, [r7, #0]
  {
    int32_t val;
    memcpy(&val, &f, sizeof(val));
 80020ce:	60fb      	str	r3, [r7, #12]

    int16_t exp = ((val >> 23) & 255);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	15db      	asrs	r3, r3, #23
 80020d4:	b21b      	sxth	r3, r3
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	82fb      	strh	r3, [r7, #22]
    uint32_t mantissa = val & 0x7FFFFF;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80020e0:	613b      	str	r3, [r7, #16]

    if (exp == 255)
 80020e2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80020e6:	2bff      	cmp	r3, #255	; 0xff
 80020e8:	d103      	bne.n	80020f2 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x32>
    {
      exp = 2047; // Special value for NaN, infinity etc.
 80020ea:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80020ee:	82fb      	strh	r3, [r7, #22]
 80020f0:	e02a      	b.n	8002148 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x88>
    }
    else if (exp != 0)
 80020f2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d005      	beq.n	8002106 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x46>
    {
      exp += 1023 - 127; // Normal case
 80020fa:	8afb      	ldrh	r3, [r7, #22]
 80020fc:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8002100:	b29b      	uxth	r3, r3
 8002102:	82fb      	strh	r3, [r7, #22]
 8002104:	e020      	b.n	8002148 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x88>
    }
    else if (!mantissa)
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d102      	bne.n	8002112 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x52>
    {
      exp = 0; // Zero
 800210c:	2300      	movs	r3, #0
 800210e:	82fb      	strh	r3, [r7, #22]
 8002110:	e01a      	b.n	8002148 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x88>
    }
    else
    {
      // Denormalized value in float, will fit as normalized value in double
      exp += 1023 - 127;
 8002112:	8afb      	ldrh	r3, [r7, #22]
 8002114:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8002118:	b29b      	uxth	r3, r3
 800211a:	82fb      	strh	r3, [r7, #22]
      mantissa <<= 1;
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	613b      	str	r3, [r7, #16]
      while (!(mantissa & 0x800000))
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d109      	bne.n	8002140 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x80>
      {
          mantissa <<= 1;
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	613b      	str	r3, [r7, #16]
          exp--;
 8002132:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002136:	b29b      	uxth	r3, r3
 8002138:	3b01      	subs	r3, #1
 800213a:	b29b      	uxth	r3, r3
 800213c:	82fb      	strh	r3, [r7, #22]
      while (!(mantissa & 0x800000))
 800213e:	e7f0      	b.n	8002122 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x62>
      }
      mantissa &= 0x7FFFFF;
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8002146:	613b      	str	r3, [r7, #16]
    }

    *(outbuffer++) = 0;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	1c5a      	adds	r2, r3, #1
 800214c:	607a      	str	r2, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	1c5a      	adds	r2, r3, #1
 8002156:	607a      	str	r2, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	1c5a      	adds	r2, r3, #1
 8002160:	607a      	str	r2, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (mantissa << 5) & 0xff;
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	b2da      	uxtb	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	1c59      	adds	r1, r3, #1
 800216e:	6079      	str	r1, [r7, #4]
 8002170:	0152      	lsls	r2, r2, #5
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (mantissa >> 3) & 0xff;
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	08d9      	lsrs	r1, r3, #3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	1c5a      	adds	r2, r3, #1
 800217e:	607a      	str	r2, [r7, #4]
 8002180:	b2ca      	uxtb	r2, r1
 8002182:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (mantissa >> 11) & 0xff;
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	0ad9      	lsrs	r1, r3, #11
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	1c5a      	adds	r2, r3, #1
 800218c:	607a      	str	r2, [r7, #4]
 800218e:	b2ca      	uxtb	r2, r1
 8002190:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((mantissa >> 19) & 0x0F);
 8002192:	8afb      	ldrh	r3, [r7, #22]
 8002194:	b2db      	uxtb	r3, r3
 8002196:	011b      	lsls	r3, r3, #4
 8002198:	b2d9      	uxtb	r1, r3
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	0cdb      	lsrs	r3, r3, #19
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	f003 030f 	and.w	r3, r3, #15
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	1c58      	adds	r0, r3, #1
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	430a      	orrs	r2, r1
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (exp >> 4) & 0x7F;
 80021b2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80021b6:	111b      	asrs	r3, r3, #4
 80021b8:	b21b      	sxth	r3, r3
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	1c59      	adds	r1, r3, #1
 80021c0:	6079      	str	r1, [r7, #4]
 80021c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021c6:	b2d2      	uxtb	r2, r2
 80021c8:	701a      	strb	r2, [r3, #0]

    // Mark negative bit as necessary.
    if (f < 0)
 80021ca:	edd7 7a00 	vldr	s15, [r7]
 80021ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d6:	d508      	bpl.n	80021ea <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x12a>
    {
      *(outbuffer - 1) |= 0x80;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3b01      	subs	r3, #1
 80021dc:	781a      	ldrb	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	3b01      	subs	r3, #1
 80021e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	701a      	strb	r2, [r3, #0]
    }

    return 8;
 80021ea:	2308      	movs	r3, #8
  }
 80021ec:	4618      	mov	r0, r3
 80021ee:	371c      	adds	r7, #28
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>:
   * @param[in] inbuffer pointer for buffer to deserialize from.
   * @param[out] f pointer to place the deserialized value in.
   *
   * @return number of bytes to advance the buffer pointer.
   */
  static int deserializeAvrFloat64(const unsigned char* inbuffer, float* f)
 80021f8:	b480      	push	{r7}
 80021fa:	b087      	sub	sp, #28
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  {
    int16_t exp;
    uint32_t mantissa;

    // Skip lowest 24 bits
    inbuffer += 3;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	3303      	adds	r3, #3
 8002206:	607b      	str	r3, [r7, #4]

    // Copy truncated mantissa.
    mantissa = ((uint32_t)(*(inbuffer++)) >> 4 & 0x0F);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	1c5a      	adds	r2, r3, #1
 800220c:	607a      	str	r2, [r7, #4]
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	091b      	lsrs	r3, r3, #4
 8002212:	b2db      	uxtb	r3, r3
 8002214:	f003 030f 	and.w	r3, r3, #15
 8002218:	613b      	str	r3, [r7, #16]
    mantissa |= ((uint32_t)(*(inbuffer++)) & 0xff) << 4;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	1c5a      	adds	r2, r3, #1
 800221e:	607a      	str	r2, [r7, #4]
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	011b      	lsls	r3, r3, #4
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	4313      	orrs	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
    mantissa |= ((uint32_t)(*(inbuffer++)) & 0xff) << 12;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	1c5a      	adds	r2, r3, #1
 800222e:	607a      	str	r2, [r7, #4]
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	031b      	lsls	r3, r3, #12
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	4313      	orrs	r3, r2
 8002238:	613b      	str	r3, [r7, #16]
    mantissa |= ((uint32_t)(*inbuffer) & 0x0f) << 20;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	051b      	lsls	r3, r3, #20
 8002240:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	4313      	orrs	r3, r2
 8002248:	613b      	str	r3, [r7, #16]

    // Copy exponent.
    exp = ((uint32_t)(*(inbuffer++)) & 0xf0) >> 4;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	1c5a      	adds	r2, r3, #1
 800224e:	607a      	str	r2, [r7, #4]
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	091b      	lsrs	r3, r3, #4
 8002254:	b2db      	uxtb	r3, r3
 8002256:	b21b      	sxth	r3, r3
 8002258:	f003 030f 	and.w	r3, r3, #15
 800225c:	82fb      	strh	r3, [r7, #22]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	b29b      	uxth	r3, r3
 8002264:	011b      	lsls	r3, r3, #4
 8002266:	b29b      	uxth	r3, r3
 8002268:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800226c:	b29a      	uxth	r2, r3
 800226e:	8afb      	ldrh	r3, [r7, #22]
 8002270:	4313      	orrs	r3, r2
 8002272:	b29b      	uxth	r3, r3
 8002274:	82fb      	strh	r3, [r7, #22]

    if (exp == 2047)
 8002276:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800227a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800227e:	4293      	cmp	r3, r2
 8002280:	d102      	bne.n	8002288 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0x90>
    {
      exp = 255; // NaN, infinity etc.
 8002282:	23ff      	movs	r3, #255	; 0xff
 8002284:	82fb      	strh	r3, [r7, #22]
 8002286:	e02c      	b.n	80022e2 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xea>
    }
    else if (exp - 1023 > 127)
 8002288:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800228c:	f240 427e 	movw	r2, #1150	; 0x47e
 8002290:	4293      	cmp	r3, r2
 8002292:	dd04      	ble.n	800229e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xa6>
    {
      exp = 255;
 8002294:	23ff      	movs	r3, #255	; 0xff
 8002296:	82fb      	strh	r3, [r7, #22]
      mantissa = 0; // Too large for float, convert to infinity
 8002298:	2300      	movs	r3, #0
 800229a:	613b      	str	r3, [r7, #16]
 800229c:	e021      	b.n	80022e2 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xea>
    }
    else if (exp - 1023 >= -126)
 800229e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80022a2:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 80022a6:	dd05      	ble.n	80022b4 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xbc>
    {
      exp -= 1023 - 127; // Normal case
 80022a8:	8afb      	ldrh	r3, [r7, #22]
 80022aa:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	82fb      	strh	r3, [r7, #22]
 80022b2:	e016      	b.n	80022e2 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xea>
    }
    else if (exp - 1023 < -150)
 80022b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80022b8:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 80022bc:	dc02      	bgt.n	80022c4 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xcc>
    {
      exp = 0; // Too small or zero
 80022be:	2300      	movs	r3, #0
 80022c0:	82fb      	strh	r3, [r7, #22]
 80022c2:	e00e      	b.n	80022e2 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xea>
    }
    else
    {
      // Have to convert to denormalized representation for float
      mantissa |= 0x1000000;
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022ca:	613b      	str	r3, [r7, #16]
      mantissa >>= ((-126 + 1023) - exp);
 80022cc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80022d0:	f5c3 7360 	rsb	r3, r3, #896	; 0x380
 80022d4:	3301      	adds	r3, #1
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	fa22 f303 	lsr.w	r3, r2, r3
 80022dc:	613b      	str	r3, [r7, #16]
      exp = 0;
 80022de:	2300      	movs	r3, #0
 80022e0:	82fb      	strh	r3, [r7, #22]
    }

    // Round off mantissa
    if (mantissa != 0xFFFFFF)
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d002      	beq.n	80022f2 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xfa>
      mantissa += 1;
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	3301      	adds	r3, #1
 80022f0:	613b      	str	r3, [r7, #16]

    mantissa >>= 1;
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	085b      	lsrs	r3, r3, #1
 80022f6:	613b      	str	r3, [r7, #16]

    // Put mantissa and exponent into place
    uint32_t val = mantissa;
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	60fb      	str	r3, [r7, #12]
    val |= static_cast<uint32_t>(exp) << 23;
 80022fc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002300:	05da      	lsls	r2, r3, #23
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	4313      	orrs	r3, r2
 8002306:	60fb      	str	r3, [r7, #12]

    // Copy negative sign.
    val |= (static_cast<uint32_t>(*(inbuffer++)) & 0x80) << 24;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	1c5a      	adds	r2, r3, #1
 800230c:	607a      	str	r2, [r7, #4]
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	061b      	lsls	r3, r3, #24
 8002312:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	4313      	orrs	r3, r2
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	68fa      	ldr	r2, [r7, #12]

    memcpy(f, &val, sizeof(val));
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	601a      	str	r2, [r3, #0]
    return 8;
 8002322:	2308      	movs	r3, #8
  }
 8002324:	4618      	mov	r0, r3
 8002326:	371c      	adds	r7, #28
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <_ZN3ros3MsgC1Ev>:
class Msg
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	4a04      	ldr	r2, [pc, #16]	; (800234c <_ZN3ros3MsgC1Ev+0x1c>)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4618      	mov	r0, r3
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	0800e100 	.word	0x0800e100

08002350 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef float _y_type;
      _y_type y;
      typedef float _z_type;
      _z_type z;

    Vector3():
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff ffe8 	bl	8002330 <_ZN3ros3MsgC1Ev>
 8002360:	4a09      	ldr	r2, [pc, #36]	; (8002388 <_ZN13geometry_msgs7Vector3C1Ev+0x38>)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f04f 0200 	mov.w	r2, #0
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f04f 0200 	mov.w	r2, #0
 8002374:	609a      	str	r2, [r3, #8]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	60da      	str	r2, [r3, #12]
    {
    }
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4618      	mov	r0, r3
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	0800e0e8 	.word	0x0800e0e8

0800238c <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002396:	2300      	movs	r3, #0
 8002398:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	441a      	add	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80023a6:	eeb0 0a67 	vmov.f32	s0, s15
 80023aa:	4610      	mov	r0, r2
 80023ac:	f7ff fe88 	bl	80020c0 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80023b0:	4602      	mov	r2, r0
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	4413      	add	r3, r2
 80023b6:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	441a      	add	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	edd3 7a02 	vldr	s15, [r3, #8]
 80023c4:	eeb0 0a67 	vmov.f32	s0, s15
 80023c8:	4610      	mov	r0, r2
 80023ca:	f7ff fe79 	bl	80020c0 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80023ce:	4602      	mov	r2, r0
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4413      	add	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	441a      	add	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	edd3 7a03 	vldr	s15, [r3, #12]
 80023e2:	eeb0 0a67 	vmov.f32	s0, s15
 80023e6:	4610      	mov	r0, r2
 80023e8:	f7ff fe6a 	bl	80020c0 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80023ec:	4602      	mov	r2, r0
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	4413      	add	r3, r2
 80023f2:	60fb      	str	r3, [r7, #12]
      return offset;
 80023f4:	68fb      	ldr	r3, [r7, #12]
    }
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80023fe:	b580      	push	{r7, lr}
 8002400:	b084      	sub	sp, #16
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
 8002406:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002408:	2300      	movs	r3, #0
 800240a:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	441a      	add	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	3304      	adds	r3, #4
 8002416:	4619      	mov	r1, r3
 8002418:	4610      	mov	r0, r2
 800241a:	f7ff feed 	bl	80021f8 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800241e:	4602      	mov	r2, r0
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4413      	add	r3, r2
 8002424:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	441a      	add	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3308      	adds	r3, #8
 8002430:	4619      	mov	r1, r3
 8002432:	4610      	mov	r0, r2
 8002434:	f7ff fee0 	bl	80021f8 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8002438:	4602      	mov	r2, r0
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	4413      	add	r3, r2
 800243e:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	441a      	add	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	330c      	adds	r3, #12
 800244a:	4619      	mov	r1, r3
 800244c:	4610      	mov	r0, r2
 800244e:	f7ff fed3 	bl	80021f8 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8002452:	4602      	mov	r2, r0
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	4413      	add	r3, r2
 8002458:	60fb      	str	r3, [r7, #12]
     return offset;
 800245a:	68fb      	ldr	r3, [r7, #12]
    }
 800245c:	4618      	mov	r0, r3
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	4b03      	ldr	r3, [pc, #12]	; (800247c <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 800246e:	4618      	mov	r0, r3
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	0800db9c 	.word	0x0800db9c

08002480 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	4b03      	ldr	r3, [pc, #12]	; (8002498 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 800248a:	4618      	mov	r0, r3
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	0800dbb4 	.word	0x0800dbb4

0800249c <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff ff42 	bl	8002330 <_ZN3ros3MsgC1Ev>
 80024ac:	4a08      	ldr	r2, [pc, #32]	; (80024d0 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	3304      	adds	r3, #4
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff ff4a 	bl	8002350 <_ZN13geometry_msgs7Vector3C1Ev>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3314      	adds	r3, #20
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff ff45 	bl	8002350 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4618      	mov	r0, r3
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	0800e0d0 	.word	0x0800e0d0

080024d4 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80024de:	2300      	movs	r3, #0
 80024e0:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	1d18      	adds	r0, r3, #4
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	4413      	add	r3, r2
 80024ec:	4619      	mov	r1, r3
 80024ee:	f7ff ff4d 	bl	800238c <_ZNK13geometry_msgs7Vector39serializeEPh>
 80024f2:	4602      	mov	r2, r0
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	4413      	add	r3, r2
 80024f8:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f103 0014 	add.w	r0, r3, #20
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	4413      	add	r3, r2
 8002506:	4619      	mov	r1, r3
 8002508:	f7ff ff40 	bl	800238c <_ZNK13geometry_msgs7Vector39serializeEPh>
 800250c:	4602      	mov	r2, r0
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	4413      	add	r3, r2
 8002512:	60fb      	str	r3, [r7, #12]
      return offset;
 8002514:	68fb      	ldr	r3, [r7, #12]
    }
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800251e:	b580      	push	{r7, lr}
 8002520:	b084      	sub	sp, #16
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
 8002526:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002528:	2300      	movs	r3, #0
 800252a:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	1d18      	adds	r0, r3, #4
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	4413      	add	r3, r2
 8002536:	4619      	mov	r1, r3
 8002538:	f7ff ff61 	bl	80023fe <_ZN13geometry_msgs7Vector311deserializeEPh>
 800253c:	4602      	mov	r2, r0
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	4413      	add	r3, r2
 8002542:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f103 0014 	add.w	r0, r3, #20
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	4413      	add	r3, r2
 8002550:	4619      	mov	r1, r3
 8002552:	f7ff ff54 	bl	80023fe <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002556:	4602      	mov	r2, r0
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4413      	add	r3, r2
 800255c:	60fb      	str	r3, [r7, #12]
     return offset;
 800255e:	68fb      	ldr	r3, [r7, #12]
    }
 8002560:	4618      	mov	r0, r3
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <_ZN13geometry_msgs5Twist7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Twist"; };
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	4b03      	ldr	r3, [pc, #12]	; (8002580 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8002572:	4618      	mov	r0, r3
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	0800dbd8 	.word	0x0800dbd8

08002584 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    virtual const char * getMD5() override { return "9f195f881246fdfa2798d1d3eebca84a"; };
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	4b03      	ldr	r3, [pc, #12]	; (800259c <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 800258e:	4618      	mov	r0, r3
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	0800dbec 	.word	0x0800dbec

080025a0 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
      data()
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff fec0 	bl	8002330 <_ZN3ros3MsgC1Ev>
 80025b0:	4a06      	ldr	r2, [pc, #24]	; (80025cc <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	3304      	adds	r3, #4
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff fd6f 	bl	800209e <_ZN3ros4TimeC1Ev>
    {
    }
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	0800e0b8 	.word	0x0800e0b8

080025d0 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80025da:	2300      	movs	r3, #0
 80025dc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6859      	ldr	r1, [r3, #4]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	4413      	add	r3, r2
 80025e8:	b2ca      	uxtb	r2, r1
 80025ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	0a19      	lsrs	r1, r3, #8
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	3301      	adds	r3, #1
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	4413      	add	r3, r2
 80025fa:	b2ca      	uxtb	r2, r1
 80025fc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	0c19      	lsrs	r1, r3, #16
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	3302      	adds	r3, #2
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	4413      	add	r3, r2
 800260c:	b2ca      	uxtb	r2, r1
 800260e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	0e19      	lsrs	r1, r3, #24
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	3303      	adds	r3, #3
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	4413      	add	r3, r2
 800261e:	b2ca      	uxtb	r2, r1
 8002620:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	3304      	adds	r3, #4
 8002626:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6899      	ldr	r1, [r3, #8]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	4413      	add	r3, r2
 8002632:	b2ca      	uxtb	r2, r1
 8002634:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	0a19      	lsrs	r1, r3, #8
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	3301      	adds	r3, #1
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	4413      	add	r3, r2
 8002644:	b2ca      	uxtb	r2, r1
 8002646:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	0c19      	lsrs	r1, r3, #16
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	3302      	adds	r3, #2
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	4413      	add	r3, r2
 8002656:	b2ca      	uxtb	r2, r1
 8002658:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	0e19      	lsrs	r1, r3, #24
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	3303      	adds	r3, #3
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	4413      	add	r3, r2
 8002668:	b2ca      	uxtb	r2, r1
 800266a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	3304      	adds	r3, #4
 8002670:	60fb      	str	r3, [r7, #12]
      return offset;
 8002672:	68fb      	ldr	r3, [r7, #12]
    }
 8002674:	4618      	mov	r0, r3
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800268a:	2300      	movs	r3, #0
 800268c:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	4413      	add	r3, r2
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	461a      	mov	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	3301      	adds	r3, #1
 80026a4:	6839      	ldr	r1, [r7, #0]
 80026a6:	440b      	add	r3, r1
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	021b      	lsls	r3, r3, #8
 80026ac:	431a      	orrs	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	3302      	adds	r3, #2
 80026ba:	6839      	ldr	r1, [r7, #0]
 80026bc:	440b      	add	r3, r1
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	041b      	lsls	r3, r3, #16
 80026c2:	431a      	orrs	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	3303      	adds	r3, #3
 80026d0:	6839      	ldr	r1, [r7, #0]
 80026d2:	440b      	add	r3, r1
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	061b      	lsls	r3, r3, #24
 80026d8:	431a      	orrs	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	3304      	adds	r3, #4
 80026e2:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	4413      	add	r3, r2
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	461a      	mov	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	689a      	ldr	r2, [r3, #8]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	3301      	adds	r3, #1
 80026fa:	6839      	ldr	r1, [r7, #0]
 80026fc:	440b      	add	r3, r1
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	021b      	lsls	r3, r3, #8
 8002702:	431a      	orrs	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	3302      	adds	r3, #2
 8002710:	6839      	ldr	r1, [r7, #0]
 8002712:	440b      	add	r3, r1
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	041b      	lsls	r3, r3, #16
 8002718:	431a      	orrs	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	3303      	adds	r3, #3
 8002726:	6839      	ldr	r1, [r7, #0]
 8002728:	440b      	add	r3, r1
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	061b      	lsls	r3, r3, #24
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	3304      	adds	r3, #4
 8002738:	60fb      	str	r3, [r7, #12]
     return offset;
 800273a:	68fb      	ldr	r3, [r7, #12]
    }
 800273c:	4618      	mov	r0, r3
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	4b03      	ldr	r3, [pc, #12]	; (8002760 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8002752:	4618      	mov	r0, r3
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	0800dc10 	.word	0x0800dc10

08002764 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	4b03      	ldr	r3, [pc, #12]	; (800277c <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800276e:	4618      	mov	r0, r3
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	0800dc20 	.word	0x0800dc20

08002780 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff fdd0 	bl	8002330 <_ZN3ros3MsgC1Ev>
 8002790:	4a0b      	ldr	r2, [pc, #44]	; (80027c0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	809a      	strh	r2, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a09      	ldr	r2, [pc, #36]	; (80027c4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80027a0:	609a      	str	r2, [r3, #8]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a07      	ldr	r2, [pc, #28]	; (80027c4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80027a6:	60da      	str	r2, [r3, #12]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a06      	ldr	r2, [pc, #24]	; (80027c4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80027ac:	611a      	str	r2, [r3, #16]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	615a      	str	r2, [r3, #20]
    {
    }
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4618      	mov	r0, r3
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	0800e0a0 	.word	0x0800e0a0
 80027c4:	0800dc44 	.word	0x0800dc44

080027c8 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b088      	sub	sp, #32
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80027d2:	2300      	movs	r3, #0
 80027d4:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	8899      	ldrh	r1, [r3, #4]
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	4413      	add	r3, r2
 80027e0:	b2ca      	uxtb	r2, r1
 80027e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	889b      	ldrh	r3, [r3, #4]
 80027e8:	0a1b      	lsrs	r3, r3, #8
 80027ea:	b299      	uxth	r1, r3
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	3301      	adds	r3, #1
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	4413      	add	r3, r2
 80027f4:	b2ca      	uxtb	r2, r1
 80027f6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	3302      	adds	r3, #2
 80027fc:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	4618      	mov	r0, r3
 8002804:	f7fd fce4 	bl	80001d0 <strlen>
 8002808:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	4413      	add	r3, r2
 8002810:	69b9      	ldr	r1, [r7, #24]
 8002812:	4618      	mov	r0, r3
 8002814:	f001 f876 	bl	8003904 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	3304      	adds	r3, #4
 800281c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	18d0      	adds	r0, r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	4619      	mov	r1, r3
 800282c:	f00a ff68 	bl	800d700 <memcpy>
      offset += length_topic_name;
 8002830:	69fa      	ldr	r2, [r7, #28]
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	4413      	add	r3, r2
 8002836:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	4618      	mov	r0, r3
 800283e:	f7fd fcc7 	bl	80001d0 <strlen>
 8002842:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	4413      	add	r3, r2
 800284a:	6979      	ldr	r1, [r7, #20]
 800284c:	4618      	mov	r0, r3
 800284e:	f001 f859 	bl	8003904 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	3304      	adds	r3, #4
 8002856:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	18d0      	adds	r0, r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	4619      	mov	r1, r3
 8002866:	f00a ff4b 	bl	800d700 <memcpy>
      offset += length_message_type;
 800286a:	69fa      	ldr	r2, [r7, #28]
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	4413      	add	r3, r2
 8002870:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	4618      	mov	r0, r3
 8002878:	f7fd fcaa 	bl	80001d0 <strlen>
 800287c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	4413      	add	r3, r2
 8002884:	6939      	ldr	r1, [r7, #16]
 8002886:	4618      	mov	r0, r3
 8002888:	f001 f83c 	bl	8003904 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	3304      	adds	r3, #4
 8002890:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	18d0      	adds	r0, r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	4619      	mov	r1, r3
 80028a0:	f00a ff2e 	bl	800d700 <memcpy>
      offset += length_md5sum;
 80028a4:	69fa      	ldr	r2, [r7, #28]
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	4413      	add	r3, r2
 80028aa:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80028b2:	68f9      	ldr	r1, [r7, #12]
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	4413      	add	r3, r2
 80028ba:	b2ca      	uxtb	r2, r1
 80028bc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	0a19      	lsrs	r1, r3, #8
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	3301      	adds	r3, #1
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	4413      	add	r3, r2
 80028ca:	b2ca      	uxtb	r2, r1
 80028cc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	0c19      	lsrs	r1, r3, #16
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	3302      	adds	r3, #2
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	4413      	add	r3, r2
 80028da:	b2ca      	uxtb	r2, r1
 80028dc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	0e19      	lsrs	r1, r3, #24
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	3303      	adds	r3, #3
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	4413      	add	r3, r2
 80028ea:	b2ca      	uxtb	r2, r1
 80028ec:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	3304      	adds	r3, #4
 80028f2:	61fb      	str	r3, [r7, #28]
      return offset;
 80028f4:	69fb      	ldr	r3, [r7, #28]
    }
 80028f6:	4618      	mov	r0, r3
 80028f8:	3720      	adds	r7, #32
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80028fe:	b580      	push	{r7, lr}
 8002900:	b08a      	sub	sp, #40	; 0x28
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
 8002906:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002908:	2300      	movs	r3, #0
 800290a:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	4413      	add	r3, r2
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	b29a      	uxth	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	889b      	ldrh	r3, [r3, #4]
 800291e:	b21a      	sxth	r2, r3
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	3301      	adds	r3, #1
 8002924:	6839      	ldr	r1, [r7, #0]
 8002926:	440b      	add	r3, r1
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	021b      	lsls	r3, r3, #8
 800292c:	b21b      	sxth	r3, r3
 800292e:	4313      	orrs	r3, r2
 8002930:	b21b      	sxth	r3, r3
 8002932:	b29a      	uxth	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	3302      	adds	r3, #2
 800293c:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	441a      	add	r2, r3
 8002944:	f107 0314 	add.w	r3, r7, #20
 8002948:	4611      	mov	r1, r2
 800294a:	4618      	mov	r0, r3
 800294c:	f000 fff8 	bl	8003940 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	3304      	adds	r3, #4
 8002954:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	627b      	str	r3, [r7, #36]	; 0x24
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	4413      	add	r3, r2
 8002960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002962:	429a      	cmp	r2, r3
 8002964:	d20c      	bcs.n	8002980 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	441a      	add	r2, r3
 800296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296e:	3b01      	subs	r3, #1
 8002970:	6839      	ldr	r1, [r7, #0]
 8002972:	440b      	add	r3, r1
 8002974:	7812      	ldrb	r2, [r2, #0]
 8002976:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	3301      	adds	r3, #1
 800297c:	627b      	str	r3, [r7, #36]	; 0x24
 800297e:	e7ec      	b.n	800295a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	4413      	add	r3, r2
 8002986:	3b01      	subs	r3, #1
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	4413      	add	r3, r2
 800298c:	2200      	movs	r2, #0
 800298e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	3b01      	subs	r3, #1
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	441a      	add	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	4413      	add	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	441a      	add	r2, r3
 80029aa:	f107 0310 	add.w	r3, r7, #16
 80029ae:	4611      	mov	r1, r2
 80029b0:	4618      	mov	r0, r3
 80029b2:	f000 ffc5 	bl	8003940 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	3304      	adds	r3, #4
 80029ba:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	623b      	str	r3, [r7, #32]
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	4413      	add	r3, r2
 80029c6:	6a3a      	ldr	r2, [r7, #32]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d20c      	bcs.n	80029e6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	6a3b      	ldr	r3, [r7, #32]
 80029d0:	441a      	add	r2, r3
 80029d2:	6a3b      	ldr	r3, [r7, #32]
 80029d4:	3b01      	subs	r3, #1
 80029d6:	6839      	ldr	r1, [r7, #0]
 80029d8:	440b      	add	r3, r1
 80029da:	7812      	ldrb	r2, [r2, #0]
 80029dc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80029de:	6a3b      	ldr	r3, [r7, #32]
 80029e0:	3301      	adds	r3, #1
 80029e2:	623b      	str	r3, [r7, #32]
 80029e4:	e7ec      	b.n	80029c0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	4413      	add	r3, r2
 80029ec:	3b01      	subs	r3, #1
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	4413      	add	r3, r2
 80029f2:	2200      	movs	r2, #0
 80029f4:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	3b01      	subs	r3, #1
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	441a      	add	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	4413      	add	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	441a      	add	r2, r3
 8002a10:	f107 030c 	add.w	r3, r7, #12
 8002a14:	4611      	mov	r1, r2
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 ff92 	bl	8003940 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	3304      	adds	r3, #4
 8002a20:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	61fb      	str	r3, [r7, #28]
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	69fa      	ldr	r2, [r7, #28]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d20c      	bcs.n	8002a4c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	441a      	add	r2, r3
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	6839      	ldr	r1, [r7, #0]
 8002a3e:	440b      	add	r3, r1
 8002a40:	7812      	ldrb	r2, [r2, #0]
 8002a42:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	3301      	adds	r3, #1
 8002a48:	61fb      	str	r3, [r7, #28]
 8002a4a:	e7ec      	b.n	8002a26 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	4413      	add	r3, r2
 8002a52:	3b01      	subs	r3, #1
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	4413      	add	r3, r2
 8002a58:	2200      	movs	r2, #0
 8002a5a:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	441a      	add	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8002a70:	2300      	movs	r3, #0
 8002a72:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	6839      	ldr	r1, [r7, #0]
 8002a7a:	440a      	add	r2, r1
 8002a7c:	7812      	ldrb	r2, [r2, #0]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	3301      	adds	r3, #1
 8002a88:	6839      	ldr	r1, [r7, #0]
 8002a8a:	440b      	add	r3, r1
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	021b      	lsls	r3, r3, #8
 8002a90:	4313      	orrs	r3, r2
 8002a92:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002a94:	68ba      	ldr	r2, [r7, #8]
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	3302      	adds	r3, #2
 8002a9a:	6839      	ldr	r1, [r7, #0]
 8002a9c:	440b      	add	r3, r1
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	041b      	lsls	r3, r3, #16
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	3303      	adds	r3, #3
 8002aac:	6839      	ldr	r1, [r7, #0]
 8002aae:	440b      	add	r3, r1
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	061b      	lsls	r3, r3, #24
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002ab8:	68ba      	ldr	r2, [r7, #8]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	3304      	adds	r3, #4
 8002ac2:	61bb      	str	r3, [r7, #24]
     return offset;
 8002ac4:	69bb      	ldr	r3, [r7, #24]
    }
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3728      	adds	r7, #40	; 0x28
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
	...

08002ad0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	4b03      	ldr	r3, [pc, #12]	; (8002ae8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8002ada:	4618      	mov	r0, r3
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	0800dc48 	.word	0x0800dc48

08002aec <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	4b03      	ldr	r3, [pc, #12]	; (8002b04 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8002af6:	4618      	mov	r0, r3
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	0800dc64 	.word	0x0800dc64

08002b08 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff fc0c 	bl	8002330 <_ZN3ros3MsgC1Ev>
 8002b18:	4a06      	ldr	r2, [pc, #24]	; (8002b34 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	711a      	strb	r2, [r3, #4]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a04      	ldr	r2, [pc, #16]	; (8002b38 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002b28:	609a      	str	r2, [r3, #8]
    {
    }
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3708      	adds	r7, #8
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	0800e088 	.word	0x0800e088
 8002b38:	0800dc44 	.word	0x0800dc44

08002b3c <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002b46:	2300      	movs	r3, #0
 8002b48:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	4413      	add	r3, r2
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	7912      	ldrb	r2, [r2, #4]
 8002b54:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7fd fb35 	bl	80001d0 <strlen>
 8002b66:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	68b9      	ldr	r1, [r7, #8]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f000 fec7 	bl	8003904 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	3304      	adds	r3, #4
 8002b7a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	18d0      	adds	r0, r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	68ba      	ldr	r2, [r7, #8]
 8002b88:	4619      	mov	r1, r3
 8002b8a:	f00a fdb9 	bl	800d700 <memcpy>
      offset += length_msg;
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	4413      	add	r3, r2
 8002b94:	60fb      	str	r3, [r7, #12]
      return offset;
 8002b96:	68fb      	ldr	r3, [r7, #12]
    }
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002baa:	2300      	movs	r3, #0
 8002bac:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	781a      	ldrb	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	441a      	add	r2, r3
 8002bc6:	f107 030c 	add.w	r3, r7, #12
 8002bca:	4611      	mov	r1, r2
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f000 feb7 	bl	8003940 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	4413      	add	r3, r2
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d20c      	bcs.n	8002c02 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	441a      	add	r2, r3
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	6839      	ldr	r1, [r7, #0]
 8002bf4:	440b      	add	r3, r1
 8002bf6:	7812      	ldrb	r2, [r2, #0]
 8002bf8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	617b      	str	r3, [r7, #20]
 8002c00:	e7ec      	b.n	8002bdc <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	4413      	add	r3, r2
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	2200      	movs	r2, #0
 8002c10:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	3b01      	subs	r3, #1
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	441a      	add	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4413      	add	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]
     return offset;
 8002c26:	693b      	ldr	r3, [r7, #16]
    }
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	4b03      	ldr	r3, [pc, #12]	; (8002c48 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	0800dc88 	.word	0x0800dc88

08002c4c <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	4b03      	ldr	r3, [pc, #12]	; (8002c64 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8002c56:	4618      	mov	r0, r3
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	0800dc9c 	.word	0x0800dc9c

08002c68 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff fb5c 	bl	8002330 <_ZN3ros3MsgC1Ev>
 8002c78:	4a11      	ldr	r2, [pc, #68]	; (8002cc0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	605a      	str	r2, [r3, #4]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	609a      	str	r2, [r3, #8]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	60da      	str	r2, [r3, #12]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	611a      	str	r2, [r3, #16]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f04f 0200 	mov.w	r2, #0
 8002c9c:	615a      	str	r2, [r3, #20]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	619a      	str	r2, [r3, #24]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	61da      	str	r2, [r3, #28]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	621a      	str	r2, [r3, #32]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	0800e070 	.word	0x0800e070

08002cc4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08a      	sub	sp, #40	; 0x28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6859      	ldr	r1, [r3, #4]
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	4413      	add	r3, r2
 8002cdc:	b2ca      	uxtb	r2, r1
 8002cde:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	0a19      	lsrs	r1, r3, #8
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce8:	3301      	adds	r3, #1
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	4413      	add	r3, r2
 8002cee:	b2ca      	uxtb	r2, r1
 8002cf0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	0c19      	lsrs	r1, r3, #16
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfa:	3302      	adds	r3, #2
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	4413      	add	r3, r2
 8002d00:	b2ca      	uxtb	r2, r1
 8002d02:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	0e19      	lsrs	r1, r3, #24
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	3303      	adds	r3, #3
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	4413      	add	r3, r2
 8002d12:	b2ca      	uxtb	r2, r1
 8002d14:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	3304      	adds	r3, #4
 8002d1a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	623b      	str	r3, [r7, #32]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	6a3a      	ldr	r2, [r7, #32]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d22b      	bcs.n	8002d82 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68da      	ldr	r2, [r3, #12]
 8002d2e:	6a3b      	ldr	r3, [r7, #32]
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	4413      	add	r3, r2
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002d38:	6939      	ldr	r1, [r7, #16]
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	4413      	add	r3, r2
 8002d40:	b2ca      	uxtb	r2, r1
 8002d42:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	0a19      	lsrs	r1, r3, #8
 8002d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	4413      	add	r3, r2
 8002d50:	b2ca      	uxtb	r2, r1
 8002d52:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	0c19      	lsrs	r1, r3, #16
 8002d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5a:	3302      	adds	r3, #2
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	4413      	add	r3, r2
 8002d60:	b2ca      	uxtb	r2, r1
 8002d62:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	0e19      	lsrs	r1, r3, #24
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6a:	3303      	adds	r3, #3
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	4413      	add	r3, r2
 8002d70:	b2ca      	uxtb	r2, r1
 8002d72:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	3304      	adds	r3, #4
 8002d78:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002d7a:	6a3b      	ldr	r3, [r7, #32]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	623b      	str	r3, [r7, #32]
 8002d80:	e7ce      	b.n	8002d20 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6919      	ldr	r1, [r3, #16]
 8002d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	b2ca      	uxtb	r2, r1
 8002d8e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	0a19      	lsrs	r1, r3, #8
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d98:	3301      	adds	r3, #1
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	b2ca      	uxtb	r2, r1
 8002da0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	0c19      	lsrs	r1, r3, #16
 8002da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002daa:	3302      	adds	r3, #2
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	4413      	add	r3, r2
 8002db0:	b2ca      	uxtb	r2, r1
 8002db2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	0e19      	lsrs	r1, r3, #24
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	3303      	adds	r3, #3
 8002dbe:	683a      	ldr	r2, [r7, #0]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	b2ca      	uxtb	r2, r1
 8002dc4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc8:	3304      	adds	r3, #4
 8002dca:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002dcc:	2300      	movs	r3, #0
 8002dce:	61fb      	str	r3, [r7, #28]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	69fa      	ldr	r2, [r7, #28]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d22b      	bcs.n	8002e32 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	699a      	ldr	r2, [r3, #24]
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4413      	add	r3, r2
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002de8:	68f9      	ldr	r1, [r7, #12]
 8002dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	4413      	add	r3, r2
 8002df0:	b2ca      	uxtb	r2, r1
 8002df2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	0a19      	lsrs	r1, r3, #8
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	4413      	add	r3, r2
 8002e00:	b2ca      	uxtb	r2, r1
 8002e02:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	0c19      	lsrs	r1, r3, #16
 8002e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0a:	3302      	adds	r3, #2
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	4413      	add	r3, r2
 8002e10:	b2ca      	uxtb	r2, r1
 8002e12:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	0e19      	lsrs	r1, r3, #24
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	3303      	adds	r3, #3
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	4413      	add	r3, r2
 8002e20:	b2ca      	uxtb	r2, r1
 8002e22:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e26:	3304      	adds	r3, #4
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	61fb      	str	r3, [r7, #28]
 8002e30:	e7ce      	b.n	8002dd0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	69d9      	ldr	r1, [r3, #28]
 8002e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	b2ca      	uxtb	r2, r1
 8002e3e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	69db      	ldr	r3, [r3, #28]
 8002e44:	0a19      	lsrs	r1, r3, #8
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	3301      	adds	r3, #1
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	b2ca      	uxtb	r2, r1
 8002e50:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	0c19      	lsrs	r1, r3, #16
 8002e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5a:	3302      	adds	r3, #2
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	4413      	add	r3, r2
 8002e60:	b2ca      	uxtb	r2, r1
 8002e62:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	69db      	ldr	r3, [r3, #28]
 8002e68:	0e19      	lsrs	r1, r3, #24
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	3303      	adds	r3, #3
 8002e6e:	683a      	ldr	r2, [r7, #0]
 8002e70:	4413      	add	r3, r2
 8002e72:	b2ca      	uxtb	r2, r1
 8002e74:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	3304      	adds	r3, #4
 8002e7a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	61bb      	str	r3, [r7, #24]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	69db      	ldr	r3, [r3, #28]
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d228      	bcs.n	8002edc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fd f99a 	bl	80001d0 <strlen>
 8002e9c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	6979      	ldr	r1, [r7, #20]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f000 fd2c 	bl	8003904 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eae:	3304      	adds	r3, #4
 8002eb0:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	18d0      	adds	r0, r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4413      	add	r3, r2
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	f00a fc1a 	bl	800d700 <memcpy>
      offset += length_stringsi;
 8002ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	61bb      	str	r3, [r7, #24]
 8002eda:	e7d1      	b.n	8002e80 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8002edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3728      	adds	r7, #40	; 0x28
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b08e      	sub	sp, #56	; 0x38
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
 8002eee:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	4413      	add	r3, r2
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f00:	3301      	adds	r3, #1
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	4413      	add	r3, r2
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	021b      	lsls	r3, r3, #8
 8002f0a:	6a3a      	ldr	r2, [r7, #32]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f12:	3302      	adds	r3, #2
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	4413      	add	r3, r2
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	041b      	lsls	r3, r3, #16
 8002f1c:	6a3a      	ldr	r2, [r7, #32]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f24:	3303      	adds	r3, #3
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	4413      	add	r3, r2
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	061b      	lsls	r3, r3, #24
 8002f2e:	6a3a      	ldr	r2, [r7, #32]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f36:	3304      	adds	r3, #4
 8002f38:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	6a3a      	ldr	r2, [r7, #32]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d90a      	bls.n	8002f5a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68da      	ldr	r2, [r3, #12]
 8002f48:	6a3b      	ldr	r3, [r7, #32]
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4610      	mov	r0, r2
 8002f50:	f00a fc80 	bl	800d854 <realloc>
 8002f54:	4602      	mov	r2, r0
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a3a      	ldr	r2, [r7, #32]
 8002f5e:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002f60:	2300      	movs	r3, #0
 8002f62:	633b      	str	r3, [r7, #48]	; 0x30
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d236      	bcs.n	8002fdc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f76:	6839      	ldr	r1, [r7, #0]
 8002f78:	440a      	add	r2, r1
 8002f7a:	7812      	ldrb	r2, [r2, #0]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f84:	3301      	adds	r3, #1
 8002f86:	6839      	ldr	r1, [r7, #0]
 8002f88:	440b      	add	r3, r1
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	021b      	lsls	r3, r3, #8
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f96:	3302      	adds	r3, #2
 8002f98:	6839      	ldr	r1, [r7, #0]
 8002f9a:	440b      	add	r3, r1
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	041b      	lsls	r3, r3, #16
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa8:	3303      	adds	r3, #3
 8002faa:	6839      	ldr	r1, [r7, #0]
 8002fac:	440b      	add	r3, r1
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	061b      	lsls	r3, r3, #24
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fbe:	3304      	adds	r3, #4
 8002fc0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68da      	ldr	r2, [r3, #12]
 8002fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4413      	add	r3, r2
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	3208      	adds	r2, #8
 8002fd0:	6812      	ldr	r2, [r2, #0]
 8002fd2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	633b      	str	r3, [r7, #48]	; 0x30
 8002fda:	e7c3      	b.n	8002f64 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fe8:	3301      	adds	r3, #1
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	4413      	add	r3, r2
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	021b      	lsls	r3, r3, #8
 8002ff2:	69fa      	ldr	r2, [r7, #28]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ffa:	3302      	adds	r3, #2
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	4413      	add	r3, r2
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	041b      	lsls	r3, r3, #16
 8003004:	69fa      	ldr	r2, [r7, #28]
 8003006:	4313      	orrs	r3, r2
 8003008:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800300a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800300c:	3303      	adds	r3, #3
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	4413      	add	r3, r2
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	061b      	lsls	r3, r3, #24
 8003016:	69fa      	ldr	r2, [r7, #28]
 8003018:	4313      	orrs	r3, r2
 800301a:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 800301c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800301e:	3304      	adds	r3, #4
 8003020:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	69fa      	ldr	r2, [r7, #28]
 8003028:	429a      	cmp	r2, r3
 800302a:	d90a      	bls.n	8003042 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	699a      	ldr	r2, [r3, #24]
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4619      	mov	r1, r3
 8003036:	4610      	mov	r0, r2
 8003038:	f00a fc0c 	bl	800d854 <realloc>
 800303c:	4602      	mov	r2, r0
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	69fa      	ldr	r2, [r7, #28]
 8003046:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8003048:	2300      	movs	r3, #0
 800304a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003052:	429a      	cmp	r2, r3
 8003054:	d236      	bcs.n	80030c4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8003056:	2300      	movs	r3, #0
 8003058:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800305e:	6839      	ldr	r1, [r7, #0]
 8003060:	440a      	add	r2, r1
 8003062:	7812      	ldrb	r2, [r2, #0]
 8003064:	4313      	orrs	r3, r2
 8003066:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800306c:	3301      	adds	r3, #1
 800306e:	6839      	ldr	r1, [r7, #0]
 8003070:	440b      	add	r3, r1
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	021b      	lsls	r3, r3, #8
 8003076:	4313      	orrs	r3, r2
 8003078:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800307e:	3302      	adds	r3, #2
 8003080:	6839      	ldr	r1, [r7, #0]
 8003082:	440b      	add	r3, r1
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	041b      	lsls	r3, r3, #16
 8003088:	4313      	orrs	r3, r2
 800308a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003090:	3303      	adds	r3, #3
 8003092:	6839      	ldr	r1, [r7, #0]
 8003094:	440b      	add	r3, r1
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	061b      	lsls	r3, r3, #24
 800309a:	4313      	orrs	r3, r2
 800309c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80030a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a6:	3304      	adds	r3, #4
 80030a8:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	699a      	ldr	r2, [r3, #24]
 80030ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	3214      	adds	r2, #20
 80030b8:	6812      	ldr	r2, [r2, #0]
 80030ba:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80030bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030be:	3301      	adds	r3, #1
 80030c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030c2:	e7c3      	b.n	800304c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80030c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	4413      	add	r3, r2
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80030ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030d0:	3301      	adds	r3, #1
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	4413      	add	r3, r2
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	021b      	lsls	r3, r3, #8
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	4313      	orrs	r3, r2
 80030de:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80030e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030e2:	3302      	adds	r3, #2
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	4413      	add	r3, r2
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	041b      	lsls	r3, r3, #16
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80030f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f4:	3303      	adds	r3, #3
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	4413      	add	r3, r2
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	061b      	lsls	r3, r3, #24
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	4313      	orrs	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8003104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003106:	3304      	adds	r3, #4
 8003108:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	429a      	cmp	r2, r3
 8003112:	d90a      	bls.n	800312a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4619      	mov	r1, r3
 800311e:	4610      	mov	r0, r2
 8003120:	f00a fb98 	bl	800d854 <realloc>
 8003124:	4602      	mov	r2, r0
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8003130:	2300      	movs	r3, #0
 8003132:	62bb      	str	r3, [r7, #40]	; 0x28
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	69db      	ldr	r3, [r3, #28]
 8003138:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800313a:	429a      	cmp	r2, r3
 800313c:	d23f      	bcs.n	80031be <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800313e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	441a      	add	r2, r3
 8003144:	f107 030c 	add.w	r3, r7, #12
 8003148:	4611      	mov	r1, r2
 800314a:	4618      	mov	r0, r3
 800314c:	f000 fbf8 	bl	8003940 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003152:	3304      	adds	r3, #4
 8003154:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8003156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003158:	627b      	str	r3, [r7, #36]	; 0x24
 800315a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4413      	add	r3, r2
 8003160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003162:	429a      	cmp	r2, r3
 8003164:	d20c      	bcs.n	8003180 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	441a      	add	r2, r3
 800316c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316e:	3b01      	subs	r3, #1
 8003170:	6839      	ldr	r1, [r7, #0]
 8003172:	440b      	add	r3, r1
 8003174:	7812      	ldrb	r2, [r2, #0]
 8003176:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8003178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317a:	3301      	adds	r3, #1
 800317c:	627b      	str	r3, [r7, #36]	; 0x24
 800317e:	e7ec      	b.n	800315a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8003180:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	4413      	add	r3, r2
 8003186:	3b01      	subs	r3, #1
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	4413      	add	r3, r2
 800318c:	2200      	movs	r2, #0
 800318e:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8003190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003192:	3b01      	subs	r3, #1
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	441a      	add	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 800319c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	4413      	add	r3, r2
 80031a2:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	3220      	adds	r2, #32
 80031b2:	6812      	ldr	r2, [r2, #0]
 80031b4:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80031b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b8:	3301      	adds	r3, #1
 80031ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80031bc:	e7ba      	b.n	8003134 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 80031be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80031c0:	4618      	mov	r0, r3
 80031c2:	3738      	adds	r7, #56	; 0x38
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	4b03      	ldr	r3, [pc, #12]	; (80031e0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80031d2:	4618      	mov	r0, r3
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	0800dff4 	.word	0x0800dff4

080031e4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	4b03      	ldr	r3, [pc, #12]	; (80031fc <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80031ee:	4618      	mov	r0, r3
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	0800dcc0 	.word	0x0800dcc0

08003200 <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	691b      	ldr	r3, [r3, #16]
  }
 800320c:	4618      	mov	r0, r3
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 2048;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800322e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003232:	4618      	mov	r0, r3
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
	...

08003240 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 2048;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
      huart(&huart5), rind(0), twind(0), tfind(0){
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a0c      	ldr	r2, [pc, #48]	; (800327c <_ZN13STM32HardwareC1Ev+0x3c>)
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800325c:	461a      	mov	r2, r3
 800325e:	2300      	movs	r3, #0
 8003260:	6093      	str	r3, [r2, #8]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003268:	461a      	mov	r2, r3
 800326a:	2300      	movs	r3, #0
 800326c:	60d3      	str	r3, [r2, #12]
    }
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4618      	mov	r0, r3
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	20002ccc 	.word	0x20002ccc

08003280 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f000 f804 	bl	8003296 <_ZN13STM32Hardware10reset_rbufEv>
    }
 800328e:	bf00      	nop
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8003296:	b580      	push	{r7, lr}
 8003298:	b082      	sub	sp, #8
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6818      	ldr	r0, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	3304      	adds	r3, #4
 80032a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032aa:	4619      	mov	r1, r3
 80032ac:	f007 f8b6 	bl	800a41c <HAL_UART_Receive_DMA>
    }
 80032b0:	bf00      	nop
 80032b2:	3708      	adds	r7, #8
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <_ZN13STM32Hardware4readEv>:

    int read(){
 80032b8:	b590      	push	{r4, r7, lr}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
      int c = -1;
 80032c0:	f04f 33ff 	mov.w	r3, #4294967295
 80032c4:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f7ff ffa3 	bl	8003218 <_ZN13STM32Hardware10getRdmaIndEv>
 80032d2:	4603      	mov	r3, r0
 80032d4:	429c      	cmp	r4, r3
 80032d6:	bf14      	ite	ne
 80032d8:	2301      	movne	r3, #1
 80032da:	2300      	moveq	r3, #0
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d012      	beq.n	8003308 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 80032e8:	1c59      	adds	r1, r3, #1
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	f8c2 1804 	str.w	r1, [r2, #2052]	; 0x804
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	4413      	add	r3, r2
 80032f4:	791b      	ldrb	r3, [r3, #4]
 80032f6:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 80032fe:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
      }
      return c;
 8003308:	68fb      	ldr	r3, [r7, #12]
    }
 800330a:	4618      	mov	r0, r3
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	bd90      	pop	{r4, r7, pc}
	...

08003314 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b20      	cmp	r3, #32
 8003328:	d108      	bne.n	800333c <_ZN13STM32Hardware5flushEv+0x28>
 800332a:	4b2d      	ldr	r3, [pc, #180]	; (80033e0 <_ZN13STM32Hardware5flushEv+0xcc>)
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	f083 0301 	eor.w	r3, r3, #1
 8003332:	b2db      	uxtb	r3, r3
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <_ZN13STM32Hardware5flushEv+0x28>
 8003338:	2301      	movs	r3, #1
 800333a:	e000      	b.n	800333e <_ZN13STM32Hardware5flushEv+0x2a>
 800333c:	2300      	movs	r3, #0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d049      	beq.n	80033d6 <_ZN13STM32Hardware5flushEv+0xc2>
        mutex = true;
 8003342:	4b27      	ldr	r3, [pc, #156]	; (80033e0 <_ZN13STM32Hardware5flushEv+0xcc>)
 8003344:	2201      	movs	r2, #1
 8003346:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800334e:	689a      	ldr	r2, [r3, #8]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	429a      	cmp	r2, r3
 800335a:	d039      	beq.n	80033d0 <_ZN13STM32Hardware5flushEv+0xbc>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003362:	68da      	ldr	r2, [r3, #12]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	429a      	cmp	r2, r3
 800336e:	d20c      	bcs.n	800338a <_ZN13STM32Hardware5flushEv+0x76>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	b29a      	uxth	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	b29b      	uxth	r3, r3
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	b29b      	uxth	r3, r3
 8003388:	e007      	b.n	800339a <_ZN13STM32Hardware5flushEv+0x86>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	b29b      	uxth	r3, r3
 8003394:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8003398:	b29b      	uxth	r3, r3
 800339a:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6818      	ldr	r0, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	f603 0308 	addw	r3, r3, #2056	; 0x808
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	4413      	add	r3, r2
 80033b0:	89fa      	ldrh	r2, [r7, #14]
 80033b2:	4619      	mov	r1, r3
 80033b4:	f006 ffb4 	bl	800a320 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033be:	68da      	ldr	r2, [r3, #12]
 80033c0:	89fb      	ldrh	r3, [r7, #14]
 80033c2:	4413      	add	r3, r2
 80033c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80033ce:	60d3      	str	r3, [r2, #12]
        }
        mutex = false;
 80033d0:	4b03      	ldr	r3, [pc, #12]	; (80033e0 <_ZN13STM32Hardware5flushEv+0xcc>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	701a      	strb	r2, [r3, #0]
      }
    }
 80033d6:	bf00      	nop
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	20000488 	.word	0x20000488

080033e4 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
      int n = length;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033fa:	bfa8      	it	ge
 80033fc:	f44f 6300 	movge.w	r3, #2048	; 0x800
 8003400:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f5c3 6200 	rsb	r2, r3, #2048	; 0x800
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	4293      	cmp	r3, r2
 8003412:	bf28      	it	cs
 8003414:	4613      	movcs	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	4413      	add	r3, r2
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	68b9      	ldr	r1, [r7, #8]
 800342c:	4618      	mov	r0, r3
 800342e:	f00a f967 	bl	800d700 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003438:	689a      	ldr	r2, [r3, #8]
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	4413      	add	r3, r2
 800343e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003448:	6093      	str	r3, [r2, #8]

      if(n != n_tail){
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	429a      	cmp	r2, r3
 8003450:	d00b      	beq.n	800346a <_ZN13STM32Hardware5writeEPhi+0x86>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f603 0008 	addw	r0, r3, #2056	; 0x808
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	18d1      	adds	r1, r2, r3
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	461a      	mov	r2, r3
 8003466:	f00a f94b 	bl	800d700 <memcpy>
      }

      flush();
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f7ff ff52 	bl	8003314 <_ZN13STM32Hardware5flushEv>
    }
 8003470:	bf00      	nop
 8003472:	3718      	adds	r7, #24
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	f004 fa38 	bl	80078f4 <HAL_GetTick>
 8003484:	4603      	mov	r3, r0
 8003486:	4618      	mov	r0, r3
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
	...

08003490 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	4a04      	ldr	r2, [pc, #16]	; (80034ac <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	601a      	str	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4618      	mov	r0, r3
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	0800e05c 	.word	0x0800e05c

080034b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 2048,
         int OUTPUT_SIZE = 2048>
class NodeHandle_ : public NodeHandleBase_
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7ff ffe8 	bl	8003490 <_ZN3ros15NodeHandleBase_C1Ev>
 80034c0:	4a4b      	ldr	r2, [pc, #300]	; (80035f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev+0x140>)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	3304      	adds	r3, #4
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7ff feb8 	bl	8003240 <_ZN13STM32HardwareC1Ev>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034d6:	461a      	mov	r2, r3
 80034d8:	2300      	movs	r3, #0
 80034da:	6153      	str	r3, [r2, #20]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034e2:	461a      	mov	r2, r3
 80034e4:	2300      	movs	r3, #0
 80034e6:	6193      	str	r3, [r2, #24]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034ee:	461a      	mov	r2, r3
 80034f0:	2300      	movs	r3, #0
 80034f2:	61d3      	str	r3, [r2, #28]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034fa:	461a      	mov	r2, r3
 80034fc:	2300      	movs	r3, #0
 80034fe:	6213      	str	r3, [r2, #32]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003506:	3324      	adds	r3, #36	; 0x24
 8003508:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800350c:	2100      	movs	r1, #0
 800350e:	4618      	mov	r0, r3
 8003510:	f00a f904 	bl	800d71c <memset>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800351a:	f603 0324 	addw	r3, r3, #2084	; 0x824
 800351e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003522:	2100      	movs	r1, #0
 8003524:	4618      	mov	r0, r3
 8003526:	f00a f8f9 	bl	800d71c <memset>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003530:	3324      	adds	r3, #36	; 0x24
 8003532:	2264      	movs	r2, #100	; 0x64
 8003534:	2100      	movs	r1, #0
 8003536:	4618      	mov	r0, r3
 8003538:	f00a f8f0 	bl	800d71c <memset>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003542:	3388      	adds	r3, #136	; 0x88
 8003544:	2264      	movs	r2, #100	; 0x64
 8003546:	2100      	movs	r1, #0
 8003548:	4618      	mov	r0, r3
 800354a:	f00a f8e7 	bl	800d71c <memset>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003554:	461a      	mov	r2, r3
 8003556:	2300      	movs	r3, #0
 8003558:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003562:	461a      	mov	r2, r3
 8003564:	2300      	movs	r3, #0
 8003566:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003570:	461a      	mov	r2, r3
 8003572:	2300      	movs	r3, #0
 8003574:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800357e:	461a      	mov	r2, r3
 8003580:	2300      	movs	r3, #0
 8003582:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800358c:	461a      	mov	r2, r3
 800358e:	2300      	movs	r3, #0
 8003590:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800359a:	2200      	movs	r2, #0
 800359c:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80035a6:	461a      	mov	r2, r3
 80035a8:	2300      	movs	r3, #0
 80035aa:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80035b4:	461a      	mov	r2, r3
 80035b6:	2300      	movs	r3, #0
 80035b8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80035c2:	461a      	mov	r2, r3
 80035c4:	2300      	movs	r3, #0
 80035c6:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80035dc:	3314      	adds	r3, #20
 80035de:	4618      	mov	r0, r3
 80035e0:	f7ff fb42 	bl	8002c68 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4618      	mov	r0, r3
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	0800e030 	.word	0x0800e030

080035f4 <HAL_UART_TxCpltCallback>:
void MotorTest();

// Subscribe to Twist messages on cmd_vel.
ros::Subscriber<geometry_msgs::Twist> sub_cmd_vel("cmd_vel", &cmd_velCallback);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 80035fc:	4805      	ldr	r0, [pc, #20]	; (8003614 <HAL_UART_TxCpltCallback+0x20>)
 80035fe:	f000 f9f9 	bl	80039f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE11getHardwareEv>
 8003602:	4603      	mov	r3, r0
 8003604:	4618      	mov	r0, r3
 8003606:	f7ff fe85 	bl	8003314 <_ZN13STM32Hardware5flushEv>
}
 800360a:	bf00      	nop
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	2000048c 	.word	0x2000048c

08003618 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8003620:	4805      	ldr	r0, [pc, #20]	; (8003638 <HAL_UART_RxCpltCallback+0x20>)
 8003622:	f000 f9e7 	bl	80039f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE11getHardwareEv>
 8003626:	4603      	mov	r3, r0
 8003628:	4618      	mov	r0, r3
 800362a:	f7ff fe34 	bl	8003296 <_ZN13STM32Hardware10reset_rbufEv>
}
 800362e:	bf00      	nop
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	2000048c 	.word	0x2000048c
 800363c:	00000000 	.word	0x00000000

08003640 <setup>:

// This is an Arduino convention.  Place everything that needs to run just
// once in the setup() funtion.  The environment will call setup()

void setup(void) {
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0

  leftWheelPID.SetSampleTime(PID_PERIOD);
 8003644:	210a      	movs	r1, #10
 8003646:	481c      	ldr	r0, [pc, #112]	; (80036b8 <setup+0x78>)
 8003648:	f002 fe06 	bl	8006258 <_ZN3PID13SetSampleTimeEi>
  rightWheelPID.SetSampleTime(PID_PERIOD);
 800364c:	210a      	movs	r1, #10
 800364e:	481b      	ldr	r0, [pc, #108]	; (80036bc <setup+0x7c>)
 8003650:	f002 fe02 	bl	8006258 <_ZN3PID13SetSampleTimeEi>
  leftWheelPID.SetOutputLimits(-255, 255);
 8003654:	ed9f 1b14 	vldr	d1, [pc, #80]	; 80036a8 <setup+0x68>
 8003658:	ed9f 0b15 	vldr	d0, [pc, #84]	; 80036b0 <setup+0x70>
 800365c:	4816      	ldr	r0, [pc, #88]	; (80036b8 <setup+0x78>)
 800365e:	f002 fe36 	bl	80062ce <_ZN3PID15SetOutputLimitsEdd>
  rightWheelPID.SetOutputLimits(-255, 255);
 8003662:	ed9f 1b11 	vldr	d1, [pc, #68]	; 80036a8 <setup+0x68>
 8003666:	ed9f 0b12 	vldr	d0, [pc, #72]	; 80036b0 <setup+0x70>
 800366a:	4814      	ldr	r0, [pc, #80]	; (80036bc <setup+0x7c>)
 800366c:	f002 fe2f 	bl	80062ce <_ZN3PID15SetOutputLimitsEdd>
  leftWheelPID.SetMode(AUTOMATIC);
 8003670:	2101      	movs	r1, #1
 8003672:	4811      	ldr	r0, [pc, #68]	; (80036b8 <setup+0x78>)
 8003674:	f002 fe9a 	bl	80063ac <_ZN3PID7SetModeEi>
  rightWheelPID.SetMode(AUTOMATIC);
 8003678:	2101      	movs	r1, #1
 800367a:	4810      	ldr	r0, [pc, #64]	; (80036bc <setup+0x7c>)
 800367c:	f002 fe96 	bl	80063ac <_ZN3PID7SetModeEi>

  // Connect to ROS computer and wait for connection
  nh.initNode();
 8003680:	480f      	ldr	r0, [pc, #60]	; (80036c0 <setup+0x80>)
 8003682:	f000 f9c3 	bl	8003a0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8initNodeEv>

  // Advertize odometry and transform
  odo.setupPubs(nh);
 8003686:	490e      	ldr	r1, [pc, #56]	; (80036c0 <setup+0x80>)
 8003688:	480e      	ldr	r0, [pc, #56]	; (80036c4 <setup+0x84>)
 800368a:	f002 f90d 	bl	80058a8 <_ZN8Odometer9setupPubsERN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEE>

  // Subscribe to cmd_vel
  nh.subscribe(sub_cmd_vel);
 800368e:	490e      	ldr	r1, [pc, #56]	; (80036c8 <setup+0x88>)
 8003690:	480b      	ldr	r0, [pc, #44]	; (80036c0 <setup+0x80>)
 8003692:	f000 f9e4 	bl	8003a5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9subscribeERNS_11Subscriber_E>

  nh.loginfo("starting...");
 8003696:	490d      	ldr	r1, [pc, #52]	; (80036cc <setup+0x8c>)
 8003698:	4809      	ldr	r0, [pc, #36]	; (80036c0 <setup+0x80>)
 800369a:	f000 fa0b 	bl	8003ab4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7loginfoEPKc>
}
 800369e:	bf00      	nop
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	f3af 8000 	nop.w
 80036a8:	00000000 	.word	0x00000000
 80036ac:	406fe000 	.word	0x406fe000
 80036b0:	00000000 	.word	0x00000000
 80036b4:	c06fe000 	.word	0xc06fe000
 80036b8:	20002620 	.word	0x20002620
 80036bc:	20002698 	.word	0x20002698
 80036c0:	2000048c 	.word	0x2000048c
 80036c4:	200025f8 	.word	0x200025f8
 80036c8:	20002710 	.word	0x20002710
 80036cc:	0800dce4 	.word	0x0800dce4

080036d0 <loop>:

// This loop() funtion is an arduino convention.  It is called by the environment
// inside a tight loop and runs forever or until the CPU is reset or powered off.
//

void loop(void) {
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b08a      	sub	sp, #40	; 0x28
 80036d4:	af00      	add	r7, sp, #0
  //  3.  The Odometry and TF publisher
  // Each wheel has it's own PID control and might do it's computation at
  // different times.

  // Get encoder values
  long encLeft  = odometry[0];
 80036d6:	4b6a      	ldr	r3, [pc, #424]	; (8003880 <loop+0x1b0>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	627b      	str	r3, [r7, #36]	; 0x24
  long encRight = odometry[1];
 80036dc:	4b68      	ldr	r3, [pc, #416]	; (8003880 <loop+0x1b0>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	623b      	str	r3, [r7, #32]
  long curMillis = tick;  // capture time when encoders are sampled
 80036e2:	4b68      	ldr	r3, [pc, #416]	; (8003884 <loop+0x1b4>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	61fb      	str	r3, [r7, #28]


  //=========> LEFT PID Controler
  //
  // Figure out how far we have gone in meters from last PID computation
  distLeft  = meterPerTick * float(encLeft  - encoderLeftLastValuePid);
 80036e8:	4b67      	ldr	r3, [pc, #412]	; (8003888 <loop+0x1b8>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	ee07 3a90 	vmov	s15, r3
 80036f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036f8:	ed9f 7a64 	vldr	s14, [pc, #400]	; 800388c <loop+0x1bc>
 80036fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003700:	edc7 7a06 	vstr	s15, [r7, #24]

  //figure out how fast the LEFT wheel went, in meters per second
  millis_from_last  = curMillis - millis_last_LEFT;
 8003704:	69fa      	ldr	r2, [r7, #28]
 8003706:	4b62      	ldr	r3, [pc, #392]	; (8003890 <loop+0x1c0>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	617b      	str	r3, [r7, #20]
  seconds_from_last = float(millis_from_last) / 1000.0;
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	ee07 3a90 	vmov	s15, r3
 8003714:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003718:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8003894 <loop+0x1c4>
 800371c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003720:	edc7 7a04 	vstr	s15, [r7, #16]
  leftInput  = distLeft  / seconds_from_last;
 8003724:	ed97 7a06 	vldr	s14, [r7, #24]
 8003728:	edd7 7a04 	vldr	s15, [r7, #16]
 800372c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003730:	ee16 0a90 	vmov	r0, s13
 8003734:	f7fc feb8 	bl	80004a8 <__aeabi_f2d>
 8003738:	4602      	mov	r2, r0
 800373a:	460b      	mov	r3, r1
 800373c:	4956      	ldr	r1, [pc, #344]	; (8003898 <loop+0x1c8>)
 800373e:	e9c1 2300 	strd	r2, r3, [r1]
  // The PID.Compute() method will look at the millis() clock and determine if it is
  // time to calculate new output.   If so it returns true and then we update the
  // motor speed.  Note the motor update speed update rate is independent of the /tf
  // and /odom publication rate.

  if (leftWheelPID.Compute()) {
 8003742:	4856      	ldr	r0, [pc, #344]	; (800389c <loop+0x1cc>)
 8003744:	f002 fbec 	bl	8005f20 <_ZN3PID7ComputeEv>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d005      	beq.n	800375a <loop+0x8a>
      encoderLeftLastValuePid = encLeft;
 800374e:	4a4e      	ldr	r2, [pc, #312]	; (8003888 <loop+0x1b8>)
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	6013      	str	r3, [r2, #0]
      millis_last_LEFT = curMillis;
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	4a4e      	ldr	r2, [pc, #312]	; (8003890 <loop+0x1c0>)
 8003758:	6013      	str	r3, [r2, #0]


  //==========> RIGHT PID Controler
  //
  // Figure out how far we have gone in meters from last PID computation
  distRight = meterPerTick * float(encRight - encoderRightLastValuePid);
 800375a:	4b51      	ldr	r3, [pc, #324]	; (80038a0 <loop+0x1d0>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6a3a      	ldr	r2, [r7, #32]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	ee07 3a90 	vmov	s15, r3
 8003766:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800376a:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800388c <loop+0x1bc>
 800376e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003772:	edc7 7a03 	vstr	s15, [r7, #12]

  //figure out how fast the RIGHT wheel went, in meters per second
  millis_from_last  = curMillis - millis_last_RIGHT;
 8003776:	69fa      	ldr	r2, [r7, #28]
 8003778:	4b4a      	ldr	r3, [pc, #296]	; (80038a4 <loop+0x1d4>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	617b      	str	r3, [r7, #20]
  seconds_from_last = float(millis_from_last) / 1000.0;
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	ee07 3a90 	vmov	s15, r3
 8003786:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800378a:	eddf 6a42 	vldr	s13, [pc, #264]	; 8003894 <loop+0x1c4>
 800378e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003792:	edc7 7a04 	vstr	s15, [r7, #16]
  rightInput  = distRight  / seconds_from_last;
 8003796:	ed97 7a03 	vldr	s14, [r7, #12]
 800379a:	edd7 7a04 	vldr	s15, [r7, #16]
 800379e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80037a2:	ee16 0a90 	vmov	r0, s13
 80037a6:	f7fc fe7f 	bl	80004a8 <__aeabi_f2d>
 80037aa:	4602      	mov	r2, r0
 80037ac:	460b      	mov	r3, r1
 80037ae:	493e      	ldr	r1, [pc, #248]	; (80038a8 <loop+0x1d8>)
 80037b0:	e9c1 2300 	strd	r2, r3, [r1]
  // The PID.Compute() method will look at the millis() clock and determine if it is
  // time to calculate new output.   If so it returns true and then we update the
  // motor speed.  Note the motor update speed update rate is independent of the /tf
  // and /odom publication rate.

  if (rightWheelPID.Compute()) {
 80037b4:	483d      	ldr	r0, [pc, #244]	; (80038ac <loop+0x1dc>)
 80037b6:	f002 fbb3 	bl	8005f20 <_ZN3PID7ComputeEv>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d005      	beq.n	80037cc <loop+0xfc>
      encoderRightLastValuePid = encRight;
 80037c0:	4a37      	ldr	r2, [pc, #220]	; (80038a0 <loop+0x1d0>)
 80037c2:	6a3b      	ldr	r3, [r7, #32]
 80037c4:	6013      	str	r3, [r2, #0]
      millis_last_RIGHT = curMillis;
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	4a36      	ldr	r2, [pc, #216]	; (80038a4 <loop+0x1d4>)
 80037ca:	6013      	str	r3, [r2, #0]
    }

  //==========> OdometryPublsher
  //
  // Check if it is time to publish /odom and /tf
  if (curMillis >= NextPubMillis) {
 80037cc:	69fa      	ldr	r2, [r7, #28]
 80037ce:	4b38      	ldr	r3, [pc, #224]	; (80038b0 <loop+0x1e0>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d34d      	bcc.n	8003872 <loop+0x1a2>
    NextPubMillis = curMillis + ODO_PERIOD;
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	330a      	adds	r3, #10
 80037da:	461a      	mov	r2, r3
 80037dc:	4b34      	ldr	r3, [pc, #208]	; (80038b0 <loop+0x1e0>)
 80037de:	601a      	str	r2, [r3, #0]

    // Figure out how far we have gone in meters from last PID computation
    distLeft  = meterPerTick * float(encLeft  - encoderLeftLastValueOdo);
 80037e0:	4b34      	ldr	r3, [pc, #208]	; (80038b4 <loop+0x1e4>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	ee07 3a90 	vmov	s15, r3
 80037ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037f0:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800388c <loop+0x1bc>
 80037f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037f8:	edc7 7a06 	vstr	s15, [r7, #24]
    distRight = meterPerTick * float(encRight - encoderRightLastValueOdo);
 80037fc:	4b2e      	ldr	r3, [pc, #184]	; (80038b8 <loop+0x1e8>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6a3a      	ldr	r2, [r7, #32]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	ee07 3a90 	vmov	s15, r3
 8003808:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800380c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800388c <loop+0x1bc>
 8003810:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003814:	edc7 7a03 	vstr	s15, [r7, #12]

    // Publish odometry
    float odoInterval = float(curMillis - timeLastOdo) / 1000.0;
 8003818:	4b28      	ldr	r3, [pc, #160]	; (80038bc <loop+0x1ec>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	69fa      	ldr	r2, [r7, #28]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	ee07 3a90 	vmov	s15, r3
 8003824:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003828:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8003894 <loop+0x1c4>
 800382c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003830:	edc7 7a02 	vstr	s15, [r7, #8]
    odo.update_publish(nh.now(), odoInterval, distLeft, distRight);
 8003834:	463b      	mov	r3, r7
 8003836:	4922      	ldr	r1, [pc, #136]	; (80038c0 <loop+0x1f0>)
 8003838:	4618      	mov	r0, r3
 800383a:	f000 f949 	bl	8003ad0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3nowEv>
 800383e:	ed97 1a03 	vldr	s2, [r7, #12]
 8003842:	edd7 0a06 	vldr	s1, [r7, #24]
 8003846:	ed97 0a02 	vldr	s0, [r7, #8]
 800384a:	463b      	mov	r3, r7
 800384c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003850:	481c      	ldr	r0, [pc, #112]	; (80038c4 <loop+0x1f4>)
 8003852:	f002 f83f 	bl	80058d4 <_ZN8Odometer14update_publishEN3ros4TimeEfff>

    encoderLeftLastValueOdo  = encLeft;
 8003856:	4a17      	ldr	r2, [pc, #92]	; (80038b4 <loop+0x1e4>)
 8003858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385a:	6013      	str	r3, [r2, #0]
    encoderRightLastValueOdo = encRight;
 800385c:	4a16      	ldr	r2, [pc, #88]	; (80038b8 <loop+0x1e8>)
 800385e:	6a3b      	ldr	r3, [r7, #32]
 8003860:	6013      	str	r3, [r2, #0]
    timeLastOdo = curMillis;
 8003862:	4a16      	ldr	r2, [pc, #88]	; (80038bc <loop+0x1ec>)
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	6013      	str	r3, [r2, #0]
    test++;
 8003868:	4b17      	ldr	r3, [pc, #92]	; (80038c8 <loop+0x1f8>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	3301      	adds	r3, #1
 800386e:	4a16      	ldr	r2, [pc, #88]	; (80038c8 <loop+0x1f8>)
 8003870:	6013      	str	r3, [r2, #0]
    }


  // handle any data movements across the serial interface
  nh.spinOnce();
 8003872:	4813      	ldr	r0, [pc, #76]	; (80038c0 <loop+0x1f0>)
 8003874:	f000 f96a 	bl	8003b4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv>

}
 8003878:	bf00      	nop
 800387a:	3728      	adds	r7, #40	; 0x28
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	2000046c 	.word	0x2000046c
 8003884:	20000480 	.word	0x20000480
 8003888:	20002748 	.word	0x20002748
 800388c:	393f1043 	.word	0x393f1043
 8003890:	2000274c 	.word	0x2000274c
 8003894:	447a0000 	.word	0x447a0000
 8003898:	200025d0 	.word	0x200025d0
 800389c:	20002620 	.word	0x20002620
 80038a0:	20002750 	.word	0x20002750
 80038a4:	20002754 	.word	0x20002754
 80038a8:	200025e8 	.word	0x200025e8
 80038ac:	20002698 	.word	0x20002698
 80038b0:	20002758 	.word	0x20002758
 80038b4:	2000275c 	.word	0x2000275c
 80038b8:	20002760 	.word	0x20002760
 80038bc:	20002764 	.word	0x20002764
 80038c0:	2000048c 	.word	0x2000048c
 80038c4:	200025f8 	.word	0x200025f8
 80038c8:	20000484 	.word	0x20000484

080038cc <_Z15cmd_velCallbackRKN13geometry_msgs5TwistE>:

// This funtion is called every time we receive a Twist message.
// We do not send the commanded speed to the wheels.  Rather we set
// thePID loops set point to the commanded sprrd.
void cmd_velCallback(const geometry_msgs::Twist& twist_msg) {
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  //    linear.x  is the forward speed in meters per second.
  //              (The "x" axis points forward.)
  //    angular.y is the rotation about the z or vertical
  //              axis in radians per second.
  //
  vel_x   = twist_msg.linear.x;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	4a07      	ldr	r2, [pc, #28]	; (80038f8 <_Z15cmd_velCallbackRKN13geometry_msgs5TwistE+0x2c>)
 80038da:	6013      	str	r3, [r2, #0]
  vel_y   = twist_msg.linear.y;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	4a06      	ldr	r2, [pc, #24]	; (80038fc <_Z15cmd_velCallbackRKN13geometry_msgs5TwistE+0x30>)
 80038e2:	6013      	str	r3, [r2, #0]
  vel_th  = twist_msg.angular.z;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	4a05      	ldr	r2, [pc, #20]	; (8003900 <_Z15cmd_velCallbackRKN13geometry_msgs5TwistE+0x34>)
 80038ea:	6013      	str	r3, [r2, #0]

  // The PID works in units of meters per second, so no
  // conversion is needed.
//  leftSetpoint  = left_vel;
//  rightSetpoint = right_vel;
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	20000380 	.word	0x20000380
 80038fc:	20000384 	.word	0x20000384
 8003900:	20000388 	.word	0x20000388

08003904 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800390e:	2300      	movs	r3, #0
 8003910:	60fb      	str	r3, [r7, #12]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2b03      	cmp	r3, #3
 8003916:	d80d      	bhi.n	8003934 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	fa22 f103 	lsr.w	r1, r2, r3
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	4413      	add	r3, r2
 8003928:	b2ca      	uxtb	r2, r1
 800392a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	3301      	adds	r3, #1
 8003930:	60fb      	str	r3, [r7, #12]
 8003932:	e7ee      	b.n	8003912 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8003934:	bf00      	nop
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003950:	2300      	movs	r3, #0
 8003952:	60fb      	str	r3, [r7, #12]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2b03      	cmp	r3, #3
 8003958:	d811      	bhi.n	800397e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	6839      	ldr	r1, [r7, #0]
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	440a      	add	r2, r1
 8003964:	7812      	ldrb	r2, [r2, #0]
 8003966:	4611      	mov	r1, r2
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	00d2      	lsls	r2, r2, #3
 800396c:	fa01 f202 	lsl.w	r2, r1, r2
 8003970:	431a      	orrs	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	3301      	adds	r3, #1
 800397a:	60fb      	str	r3, [r7, #12]
 800397c:	e7ea      	b.n	8003954 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 800397e:	bf00      	nop
 8003980:	3714      	adds	r7, #20
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
	...

0800398c <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	4a04      	ldr	r2, [pc, #16]	; (80039a8 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4618      	mov	r0, r3
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	0800e044 	.word	0x0800e044

080039ac <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
 80039b8:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	4618      	mov	r0, r3
 80039be:	f7ff ffe5 	bl	800398c <_ZN3ros11Subscriber_C1Ev>
 80039c2:	4a0b      	ldr	r2, [pc, #44]	; (80039f0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	330c      	adds	r3, #12
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7fe fd65 	bl	800249c <_ZN13geometry_msgs5TwistC1Ev>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	631a      	str	r2, [r3, #48]	; 0x30
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	635a      	str	r2, [r3, #52]	; 0x34
  {
    topic_ = topic_name;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	68ba      	ldr	r2, [r7, #8]
 80039e2:	609a      	str	r2, [r3, #8]
  };
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4618      	mov	r0, r3
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	0800e018 	.word	0x0800e018

080039f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3304      	adds	r3, #4
  }
 8003a00:	4618      	mov	r0, r3
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	3304      	adds	r3, #4
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7ff fc31 	bl	8003280 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003a24:	461a      	mov	r2, r3
 8003a26:	2300      	movs	r3, #0
 8003a28:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
    bytes_ = 0;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003a32:	461a      	mov	r2, r3
 8003a34:	2300      	movs	r3, #0
 8003a36:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    index_ = 0;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003a40:	461a      	mov	r2, r3
 8003a42:	2300      	movs	r3, #0
 8003a44:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    topic_ = 0;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003a4e:	461a      	mov	r2, r3
 8003a50:	2300      	movs	r3, #0
 8003a52:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
  };
 8003a56:	bf00      	nop
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9subscribeERNS_11Subscriber_E>:
    }
    return false;
  }

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 8003a5e:	b480      	push	{r7}
 8003a60:	b085      	sub	sp, #20
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
 8003a66:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003a68:	2300      	movs	r3, #0
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2b18      	cmp	r3, #24
 8003a70:	dc19      	bgt.n	8003aa6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9subscribeERNS_11Subscriber_E+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	f602 0222 	addw	r2, r2, #2082	; 0x822
 8003a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10d      	bne.n	8003a9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9subscribeERNS_11Subscriber_E+0x40>
      {
        subscribers[i] = &s;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	f602 0222 	addw	r2, r2, #2082	; 0x822
 8003a8a:	6839      	ldr	r1, [r7, #0]
 8003a8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	605a      	str	r2, [r3, #4]
        return true;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e004      	b.n	8003aa8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	60fb      	str	r3, [r7, #12]
 8003aa4:	e7e2      	b.n	8003a6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9subscribeERNS_11Subscriber_E+0xe>
      }
    }
    return false;
 8003aa6:	2300      	movs	r3, #0
  }
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3714      	adds	r7, #20
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7loginfoEPKc>:
public:
  void logdebug(const char* msg)
  {
    log(rosserial_msgs::Log::ROSDEBUG, msg);
  }
  void loginfo(const char * msg)
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::INFO, msg);
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 faba 	bl	800403c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3logEcPKc>
  }
 8003ac8:	bf00      	nop
 8003aca:	3708      	adds	r7, #8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3nowEv>:
  Time now()
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	3304      	adds	r3, #4
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7ff fcca 	bl	8003478 <_ZN13STM32Hardware4timeEv>
 8003ae4:	60f8      	str	r0, [r7, #12]
    Time current_time;
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7fe fad9 	bl	800209e <_ZN3ros4TimeC1Ev>
    current_time.sec = ms / 1000 + sec_offset;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4a15      	ldr	r2, [pc, #84]	; (8003b44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3nowEv+0x74>)
 8003af0:	fba2 2303 	umull	r2, r3, r2, r3
 8003af4:	099a      	lsrs	r2, r3, #6
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	441a      	add	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	601a      	str	r2, [r3, #0]
    current_time.nsec = (ms % 1000) * 1000000UL + nsec_offset;
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	4b0f      	ldr	r3, [pc, #60]	; (8003b44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3nowEv+0x74>)
 8003b08:	fba3 1302 	umull	r1, r3, r3, r2
 8003b0c:	099b      	lsrs	r3, r3, #6
 8003b0e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003b12:	fb01 f303 	mul.w	r3, r1, r3
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	4a0b      	ldr	r2, [pc, #44]	; (8003b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3nowEv+0x78>)
 8003b1a:	fb03 f202 	mul.w	r2, r3, r2
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	441a      	add	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	605a      	str	r2, [r3, #4]
    normalizeSecNSec(current_time.sec, current_time.nsec);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	3304      	adds	r3, #4
 8003b30:	4619      	mov	r1, r3
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f003 fb76 	bl	8007224 <_ZN3ros16normalizeSecNSecERmS0_>
    return current_time;
 8003b38:	bf00      	nop
  }
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	10624dd3 	.word	0x10624dd3
 8003b48:	000f4240 	.word	0x000f4240

08003b4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv>:
  virtual int spinOnce() override
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	3304      	adds	r3, #4
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7ff fc8d 	bl	8003478 <_ZN13STM32Hardware4timeEv>
 8003b5e:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003b66:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d905      	bls.n	8003b82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x36>
      configured_ = false;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
    if (mode_ != MODE_FIRST_FF)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003b88:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00e      	beq.n	8003bae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003b96:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d906      	bls.n	8003bae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	2300      	movs	r3, #0
 8003baa:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
      if (spin_timeout_ > 0)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d015      	beq.n	8003be6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x9a>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	3304      	adds	r3, #4
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7ff fc5a 	bl	8003478 <_ZN13STM32Hardware4timeEv>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	1ad2      	subs	r2, r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	bf8c      	ite	hi
 8003bd6:	2301      	movhi	r3, #1
 8003bd8:	2300      	movls	r3, #0
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d002      	beq.n	8003be6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x9a>
          return SPIN_TIMEOUT;
 8003be0:	f06f 0301 	mvn.w	r3, #1
 8003be4:	e226      	b.n	8004034 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x4e8>
      int data = hardware_.read();
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	3304      	adds	r3, #4
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7ff fb64 	bl	80032b8 <_ZN13STM32Hardware4readEv>
 8003bf0:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f2c0 81ff 	blt.w	8003ff8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x4ac>
      checksum_ += data;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003c00:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	4413      	add	r3, r2
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8003c0e:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003c18:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003c1c:	2b07      	cmp	r3, #7
 8003c1e:	d12d      	bne.n	8003c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x130>
        message_in[index_++] = data;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003c26:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003c2a:	1c5a      	adds	r2, r3, #1
 8003c2c:	6879      	ldr	r1, [r7, #4]
 8003c2e:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 8003c32:	f8c1 20f8 	str.w	r2, [r1, #248]	; 0xf8
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	b2d1      	uxtb	r1, r2
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003c42:	3304      	adds	r3, #4
 8003c44:	460a      	mov	r2, r1
 8003c46:	701a      	strb	r2, [r3, #0]
        bytes_--;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003c4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c52:	3b01      	subs	r3, #1
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8003c5a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003c64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1a0      	bne.n	8003bae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003c72:	461a      	mov	r2, r3
 8003c74:	2308      	movs	r3, #8
 8003c76:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003c7a:	e798      	b.n	8003bae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003c82:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d130      	bne.n	8003cec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x1a0>
        if (data == 0xff)
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	2bff      	cmp	r3, #255	; 0xff
 8003c8e:	d112      	bne.n	8003cb6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x16a>
          mode_++;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003c96:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8003ca2:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	3314      	adds	r3, #20
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8003cb0:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 8003cb4:	e77b      	b.n	8003bae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	3304      	adds	r3, #4
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7ff fbdc 	bl	8003478 <_ZN13STM32Hardware4timeEv>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	bf8c      	ite	hi
 8003cce:	2301      	movhi	r3, #1
 8003cd0:	2300      	movls	r3, #0
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f43f af6a 	beq.w	8003bae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
          configured_ = false;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
          return SPIN_TIMEOUT;
 8003ce6:	f06f 0301 	mvn.w	r3, #1
 8003cea:	e1a3      	b.n	8004034 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x4e8>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003cf2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d121      	bne.n	8003d3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x1f2>
        if (data == PROTOCOL_VER)
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	2bfe      	cmp	r3, #254	; 0xfe
 8003cfe:	d10b      	bne.n	8003d18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x1cc>
          mode_++;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003d06:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8003d12:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003d16:	e74a      	b.n	8003bae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003d1e:	461a      	mov	r2, r3
 8003d20:	2300      	movs	r3, #0
 8003d22:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
          if (configured_ == false)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003d2c:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f47f af3c 	bne.w	8003bae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f99c 	bl	8004074 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15requestSyncTimeEv>
 8003d3c:	e737      	b.n	8003bae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003d44:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d120      	bne.n	8003d8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x242>
        bytes_ = data;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003d52:	461a      	mov	r2, r3
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        index_ = 0;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003d60:	461a      	mov	r2, r3
 8003d62:	2300      	movs	r3, #0
 8003d64:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
        mode_++;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003d6e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003d72:	3301      	adds	r3, #1
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8003d7a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        checksum_ = data;               /* first byte for calculating size checksum */
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003d84:	461a      	mov	r2, r3
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 8003d8c:	e70f      	b.n	8003bae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003d94:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003d98:	2b03      	cmp	r3, #3
 8003d9a:	d118      	bne.n	8003dce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x282>
        bytes_ += data << 8;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003da2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	021b      	lsls	r3, r3, #8
 8003daa:	4413      	add	r3, r2
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8003db2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        mode_++;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003dbc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8003dc8:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003dcc:	e6ef      	b.n	8003bae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003dd4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003dd8:	2b04      	cmp	r3, #4
 8003dda:	d11f      	bne.n	8003e1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x2d0>
        if ((checksum_ % 256) == 255)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003de2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8003de6:	425a      	negs	r2, r3
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	b2d2      	uxtb	r2, r2
 8003dec:	bf58      	it	pl
 8003dee:	4253      	negpl	r3, r2
 8003df0:	2bff      	cmp	r3, #255	; 0xff
 8003df2:	d10b      	bne.n	8003e0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x2c0>
          mode_++;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003dfa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003dfe:	3301      	adds	r3, #1
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8003e06:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003e0a:	e6d0      	b.n	8003bae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003e12:	461a      	mov	r2, r3
 8003e14:	2300      	movs	r3, #0
 8003e16:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003e1a:	e6c8      	b.n	8003bae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003e22:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003e26:	2b05      	cmp	r3, #5
 8003e28:	d119      	bne.n	8003e5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x312>
        topic_ = data;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003e30:	461a      	mov	r2, r3
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        mode_++;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003e3e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003e42:	3301      	adds	r3, #1
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8003e4a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        checksum_ = data;               /* first byte included in checksum */
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003e54:	461a      	mov	r2, r3
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 8003e5c:	e6a7      	b.n	8003bae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003e64:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003e68:	2b06      	cmp	r3, #6
 8003e6a:	d123      	bne.n	8003eb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x368>
        topic_ += data << 8;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003e72:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	021b      	lsls	r3, r3, #8
 8003e7a:	4413      	add	r3, r2
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8003e82:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        mode_ = MODE_MESSAGE;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	2307      	movs	r3, #7
 8003e90:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        if (bytes_ == 0)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003e9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f47f ae85 	bne.w	8003bae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003eaa:	461a      	mov	r2, r3
 8003eac:	2308      	movs	r3, #8
 8003eae:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003eb2:	e67c      	b.n	8003bae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003eba:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003ebe:	2b08      	cmp	r3, #8
 8003ec0:	f47f ae75 	bne.w	8003bae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003eca:	461a      	mov	r2, r3
 8003ecc:	2300      	movs	r3, #0
 8003ece:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        if ((checksum_ % 256) == 255)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003ed8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8003edc:	425a      	negs	r2, r3
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	b2d2      	uxtb	r2, r2
 8003ee2:	bf58      	it	pl
 8003ee4:	4253      	negpl	r3, r2
 8003ee6:	2bff      	cmp	r3, #255	; 0xff
 8003ee8:	f47f ae61 	bne.w	8003bae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003ef2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d116      	bne.n	8003f28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x3dc>
            requestSyncTime();
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f8ba 	bl	8004074 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15requestSyncTimeEv>
            negotiateTopics();
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 f8d6 	bl	80040b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
            last_sync_receive_time = c_time;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            return SPIN_ERR;
 8003f22:	f04f 33ff 	mov.w	r3, #4294967295
 8003f26:	e085      	b.n	8004034 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x4e8>
          else if (topic_ == TopicInfo::ID_TIME)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003f2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f32:	2b0a      	cmp	r3, #10
 8003f34:	d108      	bne.n	8003f48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x3fc>
            syncTime(message_in);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	4619      	mov	r1, r3
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 f997 	bl	8004274 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8syncTimeEPh>
 8003f46:	e632      	b.n	8003bae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003f4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f52:	2b06      	cmp	r3, #6
 8003f54:	d112      	bne.n	8003f7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x430>
            req_param_resp.deserialize(message_in);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8003f5c:	3314      	adds	r3, #20
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	f502 5281 	add.w	r2, r2, #4128	; 0x1020
 8003f64:	3204      	adds	r2, #4
 8003f66:	4611      	mov	r1, r2
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7fe ffbc 	bl	8002ee6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 8003f7a:	e618      	b.n	8003bae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003f82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f86:	2b0b      	cmp	r3, #11
 8003f88:	d106      	bne.n	8003f98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x44c>
            configured_ = false;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 8003f96:	e60a      	b.n	8003bae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003f9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003fa2:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f602 0222 	addw	r2, r2, #2082	; 0x822
 8003fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f43f adfc 	beq.w	8003bae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003fbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003fc0:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f602 0222 	addw	r2, r2, #2082	; 0x822
 8003fca:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003fd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003fd8:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f602 0222 	addw	r2, r2, #2082	; 0x822
 8003fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003ff0:	3304      	adds	r3, #4
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	4790      	blx	r2
    while (true)
 8003ff6:	e5da      	b.n	8003bae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
        break;
 8003ff8:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004000:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8004004:	2b00      	cmp	r3, #0
 8004006:	d014      	beq.n	8004032 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x4e6>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800400e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800401a:	4293      	cmp	r3, r2
 800401c:	d909      	bls.n	8004032 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x4e6>
      requestSyncTime();
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f828 	bl	8004074 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800402a:	461a      	mov	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    return SPIN_OK;
 8004032:	2300      	movs	r3, #0
  }
 8004034:	4618      	mov	r0, r3
 8004036:	3710      	adds	r7, #16
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3logEcPKc>:
  void log(char byte, const char * msg)
 800403c:	b580      	push	{r7, lr}
 800403e:	b088      	sub	sp, #32
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	460b      	mov	r3, r1
 8004046:	607a      	str	r2, [r7, #4]
 8004048:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800404a:	f107 0314 	add.w	r3, r7, #20
 800404e:	4618      	mov	r0, r3
 8004050:	f7fe fd5a 	bl	8002b08 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004054:	7afb      	ldrb	r3, [r7, #11]
 8004056:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f107 0214 	add.w	r2, r7, #20
 8004066:	2107      	movs	r1, #7
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	4798      	blx	r3
  }
 800406c:	bf00      	nop
 800406e:	3720      	adds	r7, #32
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15requestSyncTimeEv>:
  void requestSyncTime()
 8004074:	b580      	push	{r7, lr}
 8004076:	b086      	sub	sp, #24
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 800407c:	f107 030c 	add.w	r3, r7, #12
 8004080:	4618      	mov	r0, r3
 8004082:	f7fe fa8d 	bl	80025a0 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f107 020c 	add.w	r2, r7, #12
 8004090:	210a      	movs	r1, #10
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	4798      	blx	r3
    rt_time = hardware_.time();
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	3304      	adds	r3, #4
 800409a:	4618      	mov	r0, r3
 800409c:	f7ff f9ec 	bl	8003478 <_ZN13STM32Hardware4timeEv>
 80040a0:	4602      	mov	r2, r0
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040a8:	615a      	str	r2, [r3, #20]
  }
 80040aa:	bf00      	nop
 80040ac:	3718      	adds	r7, #24
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv>:
  void negotiateTopics()
 80040b2:	b590      	push	{r4, r7, lr}
 80040b4:	b08b      	sub	sp, #44	; 0x2c
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
    rosserial_msgs::TopicInfo ti;
 80040ba:	f107 030c 	add.w	r3, r7, #12
 80040be:	4618      	mov	r0, r3
 80040c0:	f7fe fb5e 	bl	8002780 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80040c4:	2300      	movs	r3, #0
 80040c6:	627b      	str	r3, [r7, #36]	; 0x24
 80040c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ca:	2b18      	cmp	r3, #24
 80040cc:	dc63      	bgt.n	8004196 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv+0xe4>
      if (publishers[i] != 0) // non-empty slot
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d2:	f603 0308 	addw	r3, r3, #2056	; 0x808
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	4413      	add	r3, r2
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d056      	beq.n	800418e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv+0xdc>
        ti.topic_id = publishers[i]->id_;
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	f603 0308 	addw	r3, r3, #2056	; 0x808
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	4413      	add	r3, r2
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f8:	f603 0308 	addw	r3, r3, #2056	; 0x808
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4413      	add	r3, r2
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410a:	f603 0308 	addw	r3, r3, #2056	; 0x808
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	6859      	ldr	r1, [r3, #4]
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411a:	f603 0308 	addw	r3, r3, #2056	; 0x808
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4413      	add	r3, r2
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	3308      	adds	r3, #8
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4608      	mov	r0, r1
 800412e:	4798      	blx	r3
 8004130:	4603      	mov	r3, r0
 8004132:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	f603 0308 	addw	r3, r3, #2056	; 0x808
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4413      	add	r3, r2
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	6859      	ldr	r1, [r3, #4]
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	f603 0308 	addw	r3, r3, #2056	; 0x808
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4413      	add	r3, r2
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	330c      	adds	r3, #12
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4608      	mov	r0, r1
 800415c:	4798      	blx	r3
 800415e:	4603      	mov	r3, r0
 8004160:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8004162:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004166:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681c      	ldr	r4, [r3, #0]
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004172:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4413      	add	r3, r2
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	4618      	mov	r0, r3
 800417e:	f7ff f83f 	bl	8003200 <_ZN3ros9Publisher15getEndpointTypeEv>
 8004182:	4601      	mov	r1, r0
 8004184:	f107 030c 	add.w	r3, r7, #12
 8004188:	461a      	mov	r2, r3
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800418e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004190:	3301      	adds	r3, #1
 8004192:	627b      	str	r3, [r7, #36]	; 0x24
 8004194:	e798      	b.n	80040c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv+0x16>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004196:	2300      	movs	r3, #0
 8004198:	627b      	str	r3, [r7, #36]	; 0x24
 800419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419c:	2b18      	cmp	r3, #24
 800419e:	dc5f      	bgt.n	8004260 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv+0x1ae>
      if (subscribers[i] != 0) // non-empty slot
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041a4:	f602 0222 	addw	r2, r2, #2082	; 0x822
 80041a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d053      	beq.n	8004258 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv+0x1a6>
        ti.topic_id = subscribers[i]->id_;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041b4:	f602 0222 	addw	r2, r2, #2082	; 0x822
 80041b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	b29b      	uxth	r3, r3
 80041c0:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041c6:	f602 0222 	addw	r2, r2, #2082	; 0x822
 80041ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041d6:	f602 0222 	addw	r2, r2, #2082	; 0x822
 80041da:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041e2:	f602 0222 	addw	r2, r2, #2082	; 0x822
 80041e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	3308      	adds	r3, #8
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4608      	mov	r0, r1
 80041f2:	4798      	blx	r3
 80041f4:	4603      	mov	r3, r0
 80041f6:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041fc:	f602 0222 	addw	r2, r2, #2082	; 0x822
 8004200:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004208:	f602 0222 	addw	r2, r2, #2082	; 0x822
 800420c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	330c      	adds	r3, #12
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4608      	mov	r0, r1
 8004218:	4798      	blx	r3
 800421a:	4603      	mov	r3, r0
 800421c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800421e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004222:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681c      	ldr	r4, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800422e:	f602 0222 	addw	r2, r2, #2082	; 0x822
 8004232:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800423a:	f602 0222 	addw	r2, r2, #2082	; 0x822
 800423e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	3304      	adds	r3, #4
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4608      	mov	r0, r1
 800424a:	4798      	blx	r3
 800424c:	4601      	mov	r1, r0
 800424e:	f107 030c 	add.w	r3, r7, #12
 8004252:	461a      	mov	r2, r3
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425a:	3301      	adds	r3, #1
 800425c:	627b      	str	r3, [r7, #36]	; 0x24
 800425e:	e79c      	b.n	800419a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv+0xe8>
    configured_ = true;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
  }
 800426c:	bf00      	nop
 800426e:	372c      	adds	r7, #44	; 0x2c
 8004270:	46bd      	mov	sp, r7
 8004272:	bd90      	pop	{r4, r7, pc}

08004274 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004274:	b580      	push	{r7, lr}
 8004276:	b086      	sub	sp, #24
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800427e:	f107 0308 	add.w	r3, r7, #8
 8004282:	4618      	mov	r0, r3
 8004284:	f7fe f98c 	bl	80025a0 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3304      	adds	r3, #4
 800428c:	4618      	mov	r0, r3
 800428e:	f7ff f8f3 	bl	8003478 <_ZN13STM32Hardware4timeEv>
 8004292:	4602      	mov	r2, r0
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800429a:	695b      	ldr	r3, [r3, #20]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80042a0:	f107 0308 	add.w	r3, r7, #8
 80042a4:	6839      	ldr	r1, [r7, #0]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7fe f9ea 	bl	8002680 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	4915      	ldr	r1, [pc, #84]	; (8004308 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8syncTimeEPh+0x94>)
 80042b2:	fba1 1303 	umull	r1, r3, r1, r3
 80042b6:	099b      	lsrs	r3, r3, #6
 80042b8:	4413      	add	r3, r2
 80042ba:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80042bc:	6939      	ldr	r1, [r7, #16]
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	4b11      	ldr	r3, [pc, #68]	; (8004308 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8syncTimeEPh+0x94>)
 80042c2:	fba3 0302 	umull	r0, r3, r3, r2
 80042c6:	099b      	lsrs	r3, r3, #6
 80042c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80042cc:	fb00 f303 	mul.w	r3, r0, r3
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	4a0e      	ldr	r2, [pc, #56]	; (800430c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8syncTimeEPh+0x98>)
 80042d4:	fb02 f303 	mul.w	r3, r2, r3
 80042d8:	440b      	add	r3, r1
 80042da:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80042dc:	f107 0308 	add.w	r3, r7, #8
 80042e0:	3304      	adds	r3, #4
 80042e2:	4619      	mov	r1, r3
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 f8bf 	bl	8004468 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	3304      	adds	r3, #4
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7ff f8c2 	bl	8003478 <_ZN13STM32Hardware4timeEv>
 80042f4:	4602      	mov	r2, r0
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80042fc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  }
 8004300:	bf00      	nop
 8004302:	3718      	adds	r7, #24
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	10624dd3 	.word	0x10624dd3
 800430c:	000f4240 	.word	0x000f4240

08004310 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE>:
  virtual int publish(int id, const Msg * msg) override
 8004310:	b580      	push	{r7, lr}
 8004312:	b088      	sub	sp, #32
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
    if (id >= 100 && !configured_)
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	2b63      	cmp	r3, #99	; 0x63
 8004320:	dd0b      	ble.n	800433a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x2a>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004328:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800432c:	f083 0301 	eor.w	r3, r3, #1
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8004336:	2300      	movs	r3, #0
 8004338:	e090      	b.n	800445c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x14c>
    int l = msg->serialize(message_out + 7);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8004346:	3304      	adds	r3, #4
 8004348:	3307      	adds	r3, #7
 800434a:	4619      	mov	r1, r3
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	4790      	blx	r2
 8004350:	6178      	str	r0, [r7, #20]
    message_out[0] = 0xff;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004358:	22ff      	movs	r2, #255	; 0xff
 800435a:	f883 2824 	strb.w	r2, [r3, #2084]	; 0x824
    message_out[1] = PROTOCOL_VER;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004364:	22fe      	movs	r2, #254	; 0xfe
 8004366:	f883 2825 	strb.w	r2, [r3, #2085]	; 0x825
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	b2da      	uxtb	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004374:	f883 2826 	strb.w	r2, [r3, #2086]	; 0x826
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	b29b      	uxth	r3, r3
 800437c:	0a1b      	lsrs	r3, r3, #8
 800437e:	b29b      	uxth	r3, r3
 8004380:	b2da      	uxtb	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004388:	f883 2827 	strb.w	r2, [r3, #2087]	; 0x827
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004392:	f893 2826 	ldrb.w	r2, [r3, #2086]	; 0x826
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800439c:	f893 3827 	ldrb.w	r3, [r3, #2087]	; 0x827
 80043a0:	4413      	add	r3, r2
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	43db      	mvns	r3, r3
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ae:	f883 2828 	strb.w	r2, [r3, #2088]	; 0x828
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043bc:	f883 2829 	strb.w	r2, [r3, #2089]	; 0x829
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	b21b      	sxth	r3, r3
 80043c4:	121b      	asrs	r3, r3, #8
 80043c6:	b21b      	sxth	r3, r3
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043d0:	f883 282a 	strb.w	r2, [r3, #2090]	; 0x82a
    int chk = 0;
 80043d4:	2300      	movs	r3, #0
 80043d6:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80043d8:	2305      	movs	r3, #5
 80043da:	61bb      	str	r3, [r7, #24]
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	3306      	adds	r3, #6
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	dc0e      	bgt.n	8004404 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0xf4>
      chk += message_out[i];
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	4413      	add	r3, r2
 80043ec:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 80043f0:	3304      	adds	r3, #4
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	461a      	mov	r2, r3
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	4413      	add	r3, r2
 80043fa:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	3301      	adds	r3, #1
 8004400:	61bb      	str	r3, [r7, #24]
 8004402:	e7eb      	b.n	80043dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0xcc>
    l += 7;
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	3307      	adds	r3, #7
 8004408:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	425a      	negs	r2, r3
 800440e:	b2db      	uxtb	r3, r3
 8004410:	b2d2      	uxtb	r2, r2
 8004412:	bf58      	it	pl
 8004414:	4253      	negpl	r3, r2
 8004416:	b2da      	uxtb	r2, r3
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	1c59      	adds	r1, r3, #1
 800441c:	6179      	str	r1, [r7, #20]
 800441e:	43d2      	mvns	r2, r2
 8004420:	b2d1      	uxtb	r1, r2
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	4413      	add	r3, r2
 8004426:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 800442a:	3304      	adds	r3, #4
 800442c:	460a      	mov	r2, r1
 800442e:	701a      	strb	r2, [r3, #0]
    if (l <= OUTPUT_SIZE)
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004436:	dc0b      	bgt.n	8004450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x140>
      hardware_.write(message_out, l);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	1d18      	adds	r0, r3, #4
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8004442:	3304      	adds	r3, #4
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	4619      	mov	r1, r3
 8004448:	f7fe ffcc 	bl	80033e4 <_ZN13STM32Hardware5writeEPhi>
      return l;
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	e005      	b.n	800445c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x14c>
      logerror("Message from device dropped: message larger than buffer.");
 8004450:	4904      	ldr	r1, [pc, #16]	; (8004464 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x154>)
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f000 f84c 	bl	80044f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8logerrorEPKc>
      return -1;
 8004458:	f04f 33ff 	mov.w	r3, #4294967295
  }
 800445c:	4618      	mov	r0, r3
 800445e:	3720      	adds	r7, #32
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	0800dcf0 	.word	0x0800dcf0

08004468 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	3304      	adds	r3, #4
 8004476:	4618      	mov	r0, r3
 8004478:	f7fe fffe 	bl	8003478 <_ZN13STM32Hardware4timeEv>
 800447c:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	4917      	ldr	r1, [pc, #92]	; (80044e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE6setNowERKNS_4TimeE+0x7c>)
 8004486:	fba1 1303 	umull	r1, r3, r1, r3
 800448a:	099b      	lsrs	r3, r3, #6
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	3b01      	subs	r3, #1
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004496:	6193      	str	r3, [r2, #24]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	6859      	ldr	r1, [r3, #4]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	4b11      	ldr	r3, [pc, #68]	; (80044e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE6setNowERKNS_4TimeE+0x7c>)
 80044a0:	fba3 0302 	umull	r0, r3, r3, r2
 80044a4:	099b      	lsrs	r3, r3, #6
 80044a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80044aa:	fb00 f303 	mul.w	r3, r0, r3
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	4a0d      	ldr	r2, [pc, #52]	; (80044e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE6setNowERKNS_4TimeE+0x80>)
 80044b2:	fb02 f303 	mul.w	r3, r2, r3
 80044b6:	1aca      	subs	r2, r1, r3
 80044b8:	4b0c      	ldr	r3, [pc, #48]	; (80044ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE6setNowERKNS_4TimeE+0x84>)
 80044ba:	4413      	add	r3, r2
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044c2:	61d3      	str	r3, [r2, #28]
    normalizeSecNSec(sec_offset, nsec_offset);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044ca:	3318      	adds	r3, #24
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044d2:	321c      	adds	r2, #28
 80044d4:	4611      	mov	r1, r2
 80044d6:	4618      	mov	r0, r3
 80044d8:	f002 fea4 	bl	8007224 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80044dc:	bf00      	nop
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	10624dd3 	.word	0x10624dd3
 80044e8:	000f4240 	.word	0x000f4240
 80044ec:	3b9aca00 	.word	0x3b9aca00

080044f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8logerrorEPKc>:
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80044fa:	683a      	ldr	r2, [r7, #0]
 80044fc:	2103      	movs	r1, #3
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f7ff fd9c 	bl	800403c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3logEcPKc>
  }
 8004504:	bf00      	nop
 8004506:	3708      	adds	r7, #8
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <_Z41__static_initialization_and_destruction_0ii>:
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af02      	add	r7, sp, #8
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d14e      	bne.n	80045ba <_Z41__static_initialization_and_destruction_0ii+0xae>
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004522:	4293      	cmp	r3, r2
 8004524:	d149      	bne.n	80045ba <_Z41__static_initialization_and_destruction_0ii+0xae>
ros::NodeHandle  nh;
 8004526:	4827      	ldr	r0, [pc, #156]	; (80045c4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8004528:	f7fe ffc2 	bl	80034b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev>
Odometer odo(meterPerTick, base_width);
 800452c:	eddf 0a26 	vldr	s1, [pc, #152]	; 80045c8 <_Z41__static_initialization_and_destruction_0ii+0xbc>
 8004530:	ed9f 0a26 	vldr	s0, [pc, #152]	; 80045cc <_Z41__static_initialization_and_destruction_0ii+0xc0>
 8004534:	4826      	ldr	r0, [pc, #152]	; (80045d0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8004536:	f001 f995 	bl	8005864 <_ZN8OdometerC1Eff>
PID leftWheelPID( &leftInput,  &leftOutput,  &leftSetpoint,  Kp, Ki, Kd, DIRECT);
 800453a:	4b26      	ldr	r3, [pc, #152]	; (80045d4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 800453c:	ed93 7b00 	vldr	d7, [r3]
 8004540:	4b25      	ldr	r3, [pc, #148]	; (80045d8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8004542:	ed93 6b00 	vldr	d6, [r3]
 8004546:	4b25      	ldr	r3, [pc, #148]	; (80045dc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8004548:	ed93 5b00 	vldr	d5, [r3]
 800454c:	2300      	movs	r3, #0
 800454e:	9300      	str	r3, [sp, #0]
 8004550:	eeb0 2a45 	vmov.f32	s4, s10
 8004554:	eef0 2a65 	vmov.f32	s5, s11
 8004558:	eeb0 1a46 	vmov.f32	s2, s12
 800455c:	eef0 1a66 	vmov.f32	s3, s13
 8004560:	eeb0 0a47 	vmov.f32	s0, s14
 8004564:	eef0 0a67 	vmov.f32	s1, s15
 8004568:	4b1d      	ldr	r3, [pc, #116]	; (80045e0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 800456a:	4a1e      	ldr	r2, [pc, #120]	; (80045e4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 800456c:	491e      	ldr	r1, [pc, #120]	; (80045e8 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 800456e:	481f      	ldr	r0, [pc, #124]	; (80045ec <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8004570:	f001 fcb4 	bl	8005edc <_ZN3PIDC1EPdS0_S0_dddi>
PID rightWheelPID(&rightInput, &rightOutput, &rightSetpoint, Kp, Ki, Kd, DIRECT);
 8004574:	4b17      	ldr	r3, [pc, #92]	; (80045d4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8004576:	ed93 7b00 	vldr	d7, [r3]
 800457a:	4b17      	ldr	r3, [pc, #92]	; (80045d8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 800457c:	ed93 6b00 	vldr	d6, [r3]
 8004580:	4b16      	ldr	r3, [pc, #88]	; (80045dc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8004582:	ed93 5b00 	vldr	d5, [r3]
 8004586:	2300      	movs	r3, #0
 8004588:	9300      	str	r3, [sp, #0]
 800458a:	eeb0 2a45 	vmov.f32	s4, s10
 800458e:	eef0 2a65 	vmov.f32	s5, s11
 8004592:	eeb0 1a46 	vmov.f32	s2, s12
 8004596:	eef0 1a66 	vmov.f32	s3, s13
 800459a:	eeb0 0a47 	vmov.f32	s0, s14
 800459e:	eef0 0a67 	vmov.f32	s1, s15
 80045a2:	4b13      	ldr	r3, [pc, #76]	; (80045f0 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 80045a4:	4a13      	ldr	r2, [pc, #76]	; (80045f4 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 80045a6:	4914      	ldr	r1, [pc, #80]	; (80045f8 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 80045a8:	4814      	ldr	r0, [pc, #80]	; (80045fc <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 80045aa:	f001 fc97 	bl	8005edc <_ZN3PIDC1EPdS0_S0_dddi>
ros::Subscriber<geometry_msgs::Twist> sub_cmd_vel("cmd_vel", &cmd_velCallback);
 80045ae:	2301      	movs	r3, #1
 80045b0:	4a13      	ldr	r2, [pc, #76]	; (8004600 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 80045b2:	4914      	ldr	r1, [pc, #80]	; (8004604 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 80045b4:	4814      	ldr	r0, [pc, #80]	; (8004608 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 80045b6:	f7ff f9f9 	bl	80039ac <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
}
 80045ba:	bf00      	nop
 80045bc:	3708      	adds	r7, #8
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	2000048c 	.word	0x2000048c
 80045c8:	3ee147ae 	.word	0x3ee147ae
 80045cc:	393f1043 	.word	0x393f1043
 80045d0:	200025f8 	.word	0x200025f8
 80045d4:	20000008 	.word	0x20000008
 80045d8:	20002610 	.word	0x20002610
 80045dc:	20002618 	.word	0x20002618
 80045e0:	200025c8 	.word	0x200025c8
 80045e4:	200025d8 	.word	0x200025d8
 80045e8:	200025d0 	.word	0x200025d0
 80045ec:	20002620 	.word	0x20002620
 80045f0:	200025e0 	.word	0x200025e0
 80045f4:	200025f0 	.word	0x200025f0
 80045f8:	200025e8 	.word	0x200025e8
 80045fc:	20002698 	.word	0x20002698
 8004600:	080038cd 	.word	0x080038cd
 8004604:	0800dd2c 	.word	0x0800dd2c
 8004608:	20002710 	.word	0x20002710

0800460c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	330c      	adds	r3, #12
 800461a:	6839      	ldr	r1, [r7, #0]
 800461c:	4618      	mov	r0, r3
 800461e:	f7fd ff7e 	bl	800251e <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	320c      	adds	r2, #12
 800462a:	4610      	mov	r0, r2
 800462c:	4798      	blx	r3
  }
 800462e:	bf00      	nop
 8004630:	3708      	adds	r7, #8
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8004636:	b480      	push	{r7}
 8004638:	b083      	sub	sp, #12
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  }
 8004642:	4618      	mov	r0, r3
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 800464e:	b580      	push	{r7, lr}
 8004650:	b082      	sub	sp, #8
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	330c      	adds	r3, #12
 800465a:	4618      	mov	r0, r3
 800465c:	f7fd ff84 	bl	8002568 <_ZN13geometry_msgs5Twist7getTypeEv>
 8004660:	4603      	mov	r3, r0
  }
 8004662:	4618      	mov	r0, r3
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 800466a:	b580      	push	{r7, lr}
 800466c:	b082      	sub	sp, #8
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	330c      	adds	r3, #12
 8004676:	4618      	mov	r0, r3
 8004678:	f7fd ff84 	bl	8002584 <_ZN13geometry_msgs5Twist6getMD5Ev>
 800467c:	4603      	mov	r3, r0
  }
 800467e:	4618      	mov	r0, r3
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9connectedEv>:
  virtual bool connected() override
 8004686:	b480      	push	{r7}
 8004688:	b083      	sub	sp, #12
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
    return configured_;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004694:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
  };
 8004698:	4618      	mov	r0, r3
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <_GLOBAL__sub_I_nh>:
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80046ac:	2001      	movs	r0, #1
 80046ae:	f7ff ff2d 	bl	800450c <_Z41__static_initialization_and_destruction_0ii>
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	ed87 0a01 	vstr	s0, [r7, #4]
 80046be:	edd7 7a01 	vldr	s15, [r7, #4]
 80046c2:	eef0 7ae7 	vabs.f32	s15, s15
 80046c6:	eeb0 0a67 	vmov.f32	s0, s15
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	ed87 0a01 	vstr	s0, [r7, #4]
 80046de:	ed97 0a01 	vldr	s0, [r7, #4]
 80046e2:	f008 fa39 	bl	800cb58 <cosf>
 80046e6:	eef0 7a40 	vmov.f32	s15, s0
 80046ea:	eeb0 0a67 	vmov.f32	s0, s15
 80046ee:	3708      	adds	r7, #8
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	ed87 0a01 	vstr	s0, [r7, #4]
 80046fe:	ed97 0a01 	vldr	s0, [r7, #4]
 8004702:	f008 fa6d 	bl	800cbe0 <sinf>
 8004706:	eef0 7a40 	vmov.f32	s15, s0
 800470a:	eeb0 0a67 	vmov.f32	s0, s15
 800470e:	3708      	adds	r7, #8
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <_ZN8std_msgs6HeaderC1Ev>:
      typedef ros::Time _stamp_type;
      _stamp_type stamp;
      typedef const char* _frame_id_type;
      _frame_id_type frame_id;

    Header():
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
      seq(0),
      stamp(),
      frame_id("")
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4618      	mov	r0, r3
 8004720:	f7fd fe06 	bl	8002330 <_ZN3ros3MsgC1Ev>
 8004724:	4a09      	ldr	r2, [pc, #36]	; (800474c <_ZN8std_msgs6HeaderC1Ev+0x38>)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	601a      	str	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	605a      	str	r2, [r3, #4]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	3308      	adds	r3, #8
 8004734:	4618      	mov	r0, r3
 8004736:	f7fd fcb2 	bl	800209e <_ZN3ros4TimeC1Ev>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a04      	ldr	r2, [pc, #16]	; (8004750 <_ZN8std_msgs6HeaderC1Ev+0x3c>)
 800473e:	611a      	str	r2, [r3, #16]
    {
    }
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4618      	mov	r0, r3
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	0800e1f0 	.word	0x0800e1f0
 8004750:	0800dd34 	.word	0x0800dd34

08004754 <_ZNK8std_msgs6Header9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800475e:	2300      	movs	r3, #0
 8004760:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6859      	ldr	r1, [r3, #4]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	4413      	add	r3, r2
 800476c:	b2ca      	uxtb	r2, r1
 800476e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	0a19      	lsrs	r1, r3, #8
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	3301      	adds	r3, #1
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	4413      	add	r3, r2
 800477e:	b2ca      	uxtb	r2, r1
 8004780:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	0c19      	lsrs	r1, r3, #16
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	3302      	adds	r3, #2
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	4413      	add	r3, r2
 8004790:	b2ca      	uxtb	r2, r1
 8004792:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	0e19      	lsrs	r1, r3, #24
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	3303      	adds	r3, #3
 800479e:	683a      	ldr	r2, [r7, #0]
 80047a0:	4413      	add	r3, r2
 80047a2:	b2ca      	uxtb	r2, r1
 80047a4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->seq);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	3304      	adds	r3, #4
 80047aa:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6899      	ldr	r1, [r3, #8]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	4413      	add	r3, r2
 80047b6:	b2ca      	uxtb	r2, r1
 80047b8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	0a19      	lsrs	r1, r3, #8
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	3301      	adds	r3, #1
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	4413      	add	r3, r2
 80047c8:	b2ca      	uxtb	r2, r1
 80047ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	0c19      	lsrs	r1, r3, #16
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	3302      	adds	r3, #2
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	4413      	add	r3, r2
 80047da:	b2ca      	uxtb	r2, r1
 80047dc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	0e19      	lsrs	r1, r3, #24
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	3303      	adds	r3, #3
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	4413      	add	r3, r2
 80047ec:	b2ca      	uxtb	r2, r1
 80047ee:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	3304      	adds	r3, #4
 80047f4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	68d9      	ldr	r1, [r3, #12]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	4413      	add	r3, r2
 8004800:	b2ca      	uxtb	r2, r1
 8004802:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	0a19      	lsrs	r1, r3, #8
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	3301      	adds	r3, #1
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	4413      	add	r3, r2
 8004812:	b2ca      	uxtb	r2, r1
 8004814:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	0c19      	lsrs	r1, r3, #16
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	3302      	adds	r3, #2
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	4413      	add	r3, r2
 8004824:	b2ca      	uxtb	r2, r1
 8004826:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	0e19      	lsrs	r1, r3, #24
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	3303      	adds	r3, #3
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	4413      	add	r3, r2
 8004836:	b2ca      	uxtb	r2, r1
 8004838:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	3304      	adds	r3, #4
 800483e:	60fb      	str	r3, [r7, #12]
      uint32_t length_frame_id = strlen(this->frame_id);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	4618      	mov	r0, r3
 8004846:	f7fb fcc3 	bl	80001d0 <strlen>
 800484a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_frame_id);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	4413      	add	r3, r2
 8004852:	68b9      	ldr	r1, [r7, #8]
 8004854:	4618      	mov	r0, r3
 8004856:	f7ff f855 	bl	8003904 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	3304      	adds	r3, #4
 800485e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	683a      	ldr	r2, [r7, #0]
 8004864:	18d0      	adds	r0, r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	4619      	mov	r1, r3
 800486e:	f008 ff47 	bl	800d700 <memcpy>
      offset += length_frame_id;
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	4413      	add	r3, r2
 8004878:	60fb      	str	r3, [r7, #12]
      return offset;
 800487a:	68fb      	ldr	r3, [r7, #12]
    }
 800487c:	4618      	mov	r0, r3
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <_ZN8std_msgs6Header11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800488e:	2300      	movs	r3, #0
 8004890:	613b      	str	r3, [r7, #16]
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	4413      	add	r3, r2
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	461a      	mov	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685a      	ldr	r2, [r3, #4]
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	3301      	adds	r3, #1
 80048a8:	6839      	ldr	r1, [r7, #0]
 80048aa:	440b      	add	r3, r1
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	021b      	lsls	r3, r3, #8
 80048b0:	431a      	orrs	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685a      	ldr	r2, [r3, #4]
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	3302      	adds	r3, #2
 80048be:	6839      	ldr	r1, [r7, #0]
 80048c0:	440b      	add	r3, r1
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	041b      	lsls	r3, r3, #16
 80048c6:	431a      	orrs	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	3303      	adds	r3, #3
 80048d4:	6839      	ldr	r1, [r7, #0]
 80048d6:	440b      	add	r3, r1
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	061b      	lsls	r3, r3, #24
 80048dc:	431a      	orrs	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	3304      	adds	r3, #4
 80048e6:	613b      	str	r3, [r7, #16]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	4413      	add	r3, r2
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	461a      	mov	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	689a      	ldr	r2, [r3, #8]
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	3301      	adds	r3, #1
 80048fe:	6839      	ldr	r1, [r7, #0]
 8004900:	440b      	add	r3, r1
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	021b      	lsls	r3, r3, #8
 8004906:	431a      	orrs	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	3302      	adds	r3, #2
 8004914:	6839      	ldr	r1, [r7, #0]
 8004916:	440b      	add	r3, r1
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	041b      	lsls	r3, r3, #16
 800491c:	431a      	orrs	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	689a      	ldr	r2, [r3, #8]
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	3303      	adds	r3, #3
 800492a:	6839      	ldr	r1, [r7, #0]
 800492c:	440b      	add	r3, r1
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	061b      	lsls	r3, r3, #24
 8004932:	431a      	orrs	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	3304      	adds	r3, #4
 800493c:	613b      	str	r3, [r7, #16]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	683a      	ldr	r2, [r7, #0]
 8004942:	4413      	add	r3, r2
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	461a      	mov	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	68da      	ldr	r2, [r3, #12]
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	3301      	adds	r3, #1
 8004954:	6839      	ldr	r1, [r7, #0]
 8004956:	440b      	add	r3, r1
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	021b      	lsls	r3, r3, #8
 800495c:	431a      	orrs	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68da      	ldr	r2, [r3, #12]
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	3302      	adds	r3, #2
 800496a:	6839      	ldr	r1, [r7, #0]
 800496c:	440b      	add	r3, r1
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	041b      	lsls	r3, r3, #16
 8004972:	431a      	orrs	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	68da      	ldr	r2, [r3, #12]
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	3303      	adds	r3, #3
 8004980:	6839      	ldr	r1, [r7, #0]
 8004982:	440b      	add	r3, r1
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	061b      	lsls	r3, r3, #24
 8004988:	431a      	orrs	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	3304      	adds	r3, #4
 8004992:	613b      	str	r3, [r7, #16]
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	441a      	add	r2, r3
 800499a:	f107 030c 	add.w	r3, r7, #12
 800499e:	4611      	mov	r1, r2
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7fe ffcd 	bl	8003940 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	3304      	adds	r3, #4
 80049aa:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	617b      	str	r3, [r7, #20]
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	4413      	add	r3, r2
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d20c      	bcs.n	80049d6 <_ZN8std_msgs6Header11deserializeEPh+0x152>
          inbuffer[k-1]=inbuffer[k];
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	441a      	add	r2, r3
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	3b01      	subs	r3, #1
 80049c6:	6839      	ldr	r1, [r7, #0]
 80049c8:	440b      	add	r3, r1
 80049ca:	7812      	ldrb	r2, [r2, #0]
 80049cc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	3301      	adds	r3, #1
 80049d2:	617b      	str	r3, [r7, #20]
 80049d4:	e7ec      	b.n	80049b0 <_ZN8std_msgs6Header11deserializeEPh+0x12c>
      }
      inbuffer[offset+length_frame_id-1]=0;
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	4413      	add	r3, r2
 80049dc:	3b01      	subs	r3, #1
 80049de:	683a      	ldr	r2, [r7, #0]
 80049e0:	4413      	add	r3, r2
 80049e2:	2200      	movs	r2, #0
 80049e4:	701a      	strb	r2, [r3, #0]
      this->frame_id = (char *)(inbuffer + offset-1);
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	3b01      	subs	r3, #1
 80049ea:	683a      	ldr	r2, [r7, #0]
 80049ec:	441a      	add	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	611a      	str	r2, [r3, #16]
      offset += length_frame_id;
 80049f2:	693a      	ldr	r2, [r7, #16]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4413      	add	r3, r2
 80049f8:	613b      	str	r3, [r7, #16]
     return offset;
 80049fa:	693b      	ldr	r3, [r7, #16]
    }
 80049fc:	4618      	mov	r0, r3
 80049fe:	3718      	adds	r7, #24
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <_ZN8std_msgs6Header7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Header"; };
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	4b03      	ldr	r3, [pc, #12]	; (8004a1c <_ZN8std_msgs6Header7getTypeEv+0x18>)
 8004a0e:	4618      	mov	r0, r3
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	0800dd38 	.word	0x0800dd38

08004a20 <_ZN8std_msgs6Header6getMD5Ev>:
    virtual const char * getMD5() override { return "2176decaecbce78abc3b96ef049fabed"; };
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	4b03      	ldr	r3, [pc, #12]	; (8004a38 <_ZN8std_msgs6Header6getMD5Ev+0x18>)
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	370c      	adds	r7, #12
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	0800dd48 	.word	0x0800dd48

08004a3c <_ZN13geometry_msgs5PointC1Ev>:
      typedef float _y_type;
      _y_type y;
      typedef float _z_type;
      _z_type z;

    Point():
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7fd fc72 	bl	8002330 <_ZN3ros3MsgC1Ev>
 8004a4c:	4a09      	ldr	r2, [pc, #36]	; (8004a74 <_ZN13geometry_msgs5PointC1Ev+0x38>)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f04f 0200 	mov.w	r2, #0
 8004a58:	605a      	str	r2, [r3, #4]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f04f 0200 	mov.w	r2, #0
 8004a60:	609a      	str	r2, [r3, #8]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f04f 0200 	mov.w	r2, #0
 8004a68:	60da      	str	r2, [r3, #12]
    {
    }
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3708      	adds	r7, #8
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	0800e1d8 	.word	0x0800e1d8

08004a78 <_ZNK13geometry_msgs5Point9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004a82:	2300      	movs	r3, #0
 8004a84:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	683a      	ldr	r2, [r7, #0]
 8004a8a:	441a      	add	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a92:	eeb0 0a67 	vmov.f32	s0, s15
 8004a96:	4610      	mov	r0, r2
 8004a98:	f7fd fb12 	bl	80020c0 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	683a      	ldr	r2, [r7, #0]
 8004aa8:	441a      	add	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	edd3 7a02 	vldr	s15, [r3, #8]
 8004ab0:	eeb0 0a67 	vmov.f32	s0, s15
 8004ab4:	4610      	mov	r0, r2
 8004ab6:	f7fd fb03 	bl	80020c0 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004aba:	4602      	mov	r2, r0
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4413      	add	r3, r2
 8004ac0:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	441a      	add	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	edd3 7a03 	vldr	s15, [r3, #12]
 8004ace:	eeb0 0a67 	vmov.f32	s0, s15
 8004ad2:	4610      	mov	r0, r2
 8004ad4:	f7fd faf4 	bl	80020c0 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	4413      	add	r3, r2
 8004ade:	60fb      	str	r3, [r7, #12]
      return offset;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
    }
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3710      	adds	r7, #16
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <_ZN13geometry_msgs5Point11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b084      	sub	sp, #16
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
 8004af2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004af4:	2300      	movs	r3, #0
 8004af6:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	683a      	ldr	r2, [r7, #0]
 8004afc:	441a      	add	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	3304      	adds	r3, #4
 8004b02:	4619      	mov	r1, r3
 8004b04:	4610      	mov	r0, r2
 8004b06:	f7fd fb77 	bl	80021f8 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	4413      	add	r3, r2
 8004b10:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	683a      	ldr	r2, [r7, #0]
 8004b16:	441a      	add	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	3308      	adds	r3, #8
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	4610      	mov	r0, r2
 8004b20:	f7fd fb6a 	bl	80021f8 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004b24:	4602      	mov	r2, r0
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	4413      	add	r3, r2
 8004b2a:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	441a      	add	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	330c      	adds	r3, #12
 8004b36:	4619      	mov	r1, r3
 8004b38:	4610      	mov	r0, r2
 8004b3a:	f7fd fb5d 	bl	80021f8 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	4413      	add	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]
     return offset;
 8004b46:	68fb      	ldr	r3, [r7, #12]
    }
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <_ZN13geometry_msgs5Point7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Point"; };
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	4b03      	ldr	r3, [pc, #12]	; (8004b68 <_ZN13geometry_msgs5Point7getTypeEv+0x18>)
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	0800dd6c 	.word	0x0800dd6c

08004b6c <_ZN13geometry_msgs5Point6getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	4b03      	ldr	r3, [pc, #12]	; (8004b84 <_ZN13geometry_msgs5Point6getMD5Ev+0x18>)
 8004b76:	4618      	mov	r0, r3
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	0800dd80 	.word	0x0800dd80

08004b88 <_ZN13geometry_msgs10QuaternionC1Ev>:
      typedef float _z_type;
      _z_type z;
      typedef float _w_type;
      _w_type w;

    Quaternion():
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0),
      w(0)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7fd fbcc 	bl	8002330 <_ZN3ros3MsgC1Ev>
 8004b98:	4a0b      	ldr	r2, [pc, #44]	; (8004bc8 <_ZN13geometry_msgs10QuaternionC1Ev+0x40>)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	601a      	str	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f04f 0200 	mov.w	r2, #0
 8004ba4:	605a      	str	r2, [r3, #4]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f04f 0200 	mov.w	r2, #0
 8004bac:	609a      	str	r2, [r3, #8]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f04f 0200 	mov.w	r2, #0
 8004bb4:	60da      	str	r2, [r3, #12]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f04f 0200 	mov.w	r2, #0
 8004bbc:	611a      	str	r2, [r3, #16]
    {
    }
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3708      	adds	r7, #8
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	0800e1c0 	.word	0x0800e1c0

08004bcc <_ZNK13geometry_msgs10Quaternion9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	683a      	ldr	r2, [r7, #0]
 8004bde:	441a      	add	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	edd3 7a01 	vldr	s15, [r3, #4]
 8004be6:	eeb0 0a67 	vmov.f32	s0, s15
 8004bea:	4610      	mov	r0, r2
 8004bec:	f7fd fa68 	bl	80020c0 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	441a      	add	r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	edd3 7a02 	vldr	s15, [r3, #8]
 8004c04:	eeb0 0a67 	vmov.f32	s0, s15
 8004c08:	4610      	mov	r0, r2
 8004c0a:	f7fd fa59 	bl	80020c0 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	4413      	add	r3, r2
 8004c14:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	683a      	ldr	r2, [r7, #0]
 8004c1a:	441a      	add	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004c22:	eeb0 0a67 	vmov.f32	s0, s15
 8004c26:	4610      	mov	r0, r2
 8004c28:	f7fd fa4a 	bl	80020c0 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	4413      	add	r3, r2
 8004c32:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->w);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	683a      	ldr	r2, [r7, #0]
 8004c38:	441a      	add	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	edd3 7a04 	vldr	s15, [r3, #16]
 8004c40:	eeb0 0a67 	vmov.f32	s0, s15
 8004c44:	4610      	mov	r0, r2
 8004c46:	f7fd fa3b 	bl	80020c0 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	4413      	add	r3, r2
 8004c50:	60fb      	str	r3, [r7, #12]
      return offset;
 8004c52:	68fb      	ldr	r3, [r7, #12]
    }
 8004c54:	4618      	mov	r0, r3
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <_ZN13geometry_msgs10Quaternion11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004c66:	2300      	movs	r3, #0
 8004c68:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	441a      	add	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	3304      	adds	r3, #4
 8004c74:	4619      	mov	r1, r3
 8004c76:	4610      	mov	r0, r2
 8004c78:	f7fd fabe 	bl	80021f8 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	4413      	add	r3, r2
 8004c82:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	683a      	ldr	r2, [r7, #0]
 8004c88:	441a      	add	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	3308      	adds	r3, #8
 8004c8e:	4619      	mov	r1, r3
 8004c90:	4610      	mov	r0, r2
 8004c92:	f7fd fab1 	bl	80021f8 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004c96:	4602      	mov	r2, r0
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	441a      	add	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	330c      	adds	r3, #12
 8004ca8:	4619      	mov	r1, r3
 8004caa:	4610      	mov	r0, r2
 8004cac:	f7fd faa4 	bl	80021f8 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->w));
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	683a      	ldr	r2, [r7, #0]
 8004cbc:	441a      	add	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	3310      	adds	r3, #16
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	4610      	mov	r0, r2
 8004cc6:	f7fd fa97 	bl	80021f8 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	4413      	add	r3, r2
 8004cd0:	60fb      	str	r3, [r7, #12]
     return offset;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
    }
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <_ZN13geometry_msgs10Quaternion7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Quaternion"; };
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	4b03      	ldr	r3, [pc, #12]	; (8004cf4 <_ZN13geometry_msgs10Quaternion7getTypeEv+0x18>)
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	0800dda4 	.word	0x0800dda4

08004cf8 <_ZN13geometry_msgs10Quaternion6getMD5Ev>:
    virtual const char * getMD5() override { return "a779879fadf0160734f906b8c19c7004"; };
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	4b03      	ldr	r3, [pc, #12]	; (8004d10 <_ZN13geometry_msgs10Quaternion6getMD5Ev+0x18>)
 8004d02:	4618      	mov	r0, r3
 8004d04:	370c      	adds	r7, #12
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	0800ddc0 	.word	0x0800ddc0

08004d14 <_ZN13geometry_msgs4PoseC1Ev>:
      typedef geometry_msgs::Point _position_type;
      _position_type position;
      typedef geometry_msgs::Quaternion _orientation_type;
      _orientation_type orientation;

    Pose():
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
      position(),
      orientation()
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7fd fb06 	bl	8002330 <_ZN3ros3MsgC1Ev>
 8004d24:	4a08      	ldr	r2, [pc, #32]	; (8004d48 <_ZN13geometry_msgs4PoseC1Ev+0x34>)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	601a      	str	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	3304      	adds	r3, #4
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7ff fe84 	bl	8004a3c <_ZN13geometry_msgs5PointC1Ev>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	3314      	adds	r3, #20
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7ff ff25 	bl	8004b88 <_ZN13geometry_msgs10QuaternionC1Ev>
    {
    }
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4618      	mov	r0, r3
 8004d42:	3708      	adds	r7, #8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	0800e1a8 	.word	0x0800e1a8

08004d4c <_ZNK13geometry_msgs4Pose9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004d56:	2300      	movs	r3, #0
 8004d58:	60fb      	str	r3, [r7, #12]
      offset += this->position.serialize(outbuffer + offset);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	1d18      	adds	r0, r3, #4
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	683a      	ldr	r2, [r7, #0]
 8004d62:	4413      	add	r3, r2
 8004d64:	4619      	mov	r1, r3
 8004d66:	f7ff fe87 	bl	8004a78 <_ZNK13geometry_msgs5Point9serializeEPh>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	4413      	add	r3, r2
 8004d70:	60fb      	str	r3, [r7, #12]
      offset += this->orientation.serialize(outbuffer + offset);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f103 0014 	add.w	r0, r3, #20
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	683a      	ldr	r2, [r7, #0]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	4619      	mov	r1, r3
 8004d80:	f7ff ff24 	bl	8004bcc <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 8004d84:	4602      	mov	r2, r0
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	4413      	add	r3, r2
 8004d8a:	60fb      	str	r3, [r7, #12]
      return offset;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
    }
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <_ZN13geometry_msgs4Pose11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b084      	sub	sp, #16
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
 8004d9e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004da0:	2300      	movs	r3, #0
 8004da2:	60fb      	str	r3, [r7, #12]
      offset += this->position.deserialize(inbuffer + offset);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	1d18      	adds	r0, r3, #4
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	4413      	add	r3, r2
 8004dae:	4619      	mov	r1, r3
 8004db0:	f7ff fe9b 	bl	8004aea <_ZN13geometry_msgs5Point11deserializeEPh>
 8004db4:	4602      	mov	r2, r0
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	4413      	add	r3, r2
 8004dba:	60fb      	str	r3, [r7, #12]
      offset += this->orientation.deserialize(inbuffer + offset);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f103 0014 	add.w	r0, r3, #20
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	683a      	ldr	r2, [r7, #0]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	4619      	mov	r1, r3
 8004dca:	f7ff ff47 	bl	8004c5c <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	60fb      	str	r3, [r7, #12]
     return offset;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
    }
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3710      	adds	r7, #16
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <_ZN13geometry_msgs4Pose7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Pose"; };
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	4b03      	ldr	r3, [pc, #12]	; (8004df8 <_ZN13geometry_msgs4Pose7getTypeEv+0x18>)
 8004dea:	4618      	mov	r0, r3
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	0800dde4 	.word	0x0800dde4

08004dfc <_ZN13geometry_msgs4Pose6getMD5Ev>:
    virtual const char * getMD5() override { return "e45d45a5a1ce597b249e23fb30fc871f"; };
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	4b03      	ldr	r3, [pc, #12]	; (8004e14 <_ZN13geometry_msgs4Pose6getMD5Ev+0x18>)
 8004e06:	4618      	mov	r0, r3
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	0800ddf8 	.word	0x0800ddf8

08004e18 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev>:
    public:
      typedef geometry_msgs::Pose _pose_type;
      _pose_type pose;
      float covariance[36];

    PoseWithCovariance():
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
      pose(),
      covariance()
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7fd fa84 	bl	8002330 <_ZN3ros3MsgC1Ev>
 8004e28:	4a0c      	ldr	r2, [pc, #48]	; (8004e5c <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x44>)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	601a      	str	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	3304      	adds	r3, #4
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7ff ff6e 	bl	8004d14 <_ZN13geometry_msgs4PoseC1Ev>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8004e3e:	2323      	movs	r3, #35	; 0x23
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	db05      	blt.n	8004e50 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x38>
 8004e44:	f04f 0100 	mov.w	r1, #0
 8004e48:	6011      	str	r1, [r2, #0]
 8004e4a:	3204      	adds	r2, #4
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	e7f7      	b.n	8004e40 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x28>
    {
    }
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4618      	mov	r0, r3
 8004e54:	3708      	adds	r7, #8
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	0800e190 	.word	0x0800e190

08004e60 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	60fb      	str	r3, [r7, #12]
      offset += this->pose.serialize(outbuffer + offset);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	1d18      	adds	r0, r3, #4
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	683a      	ldr	r2, [r7, #0]
 8004e76:	4413      	add	r3, r2
 8004e78:	4619      	mov	r1, r3
 8004e7a:	f7ff ff67 	bl	8004d4c <_ZNK13geometry_msgs4Pose9serializeEPh>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	4413      	add	r3, r2
 8004e84:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 8004e86:	2300      	movs	r3, #0
 8004e88:	60bb      	str	r3, [r7, #8]
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	2b23      	cmp	r3, #35	; 0x23
 8004e8e:	d817      	bhi.n	8004ec0 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh+0x60>
      offset += serializeAvrFloat64(outbuffer + offset, this->covariance[i]);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	683a      	ldr	r2, [r7, #0]
 8004e94:	18d1      	adds	r1, r2, r3
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	330a      	adds	r3, #10
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	4413      	add	r3, r2
 8004ea0:	3304      	adds	r3, #4
 8004ea2:	edd3 7a00 	vldr	s15, [r3]
 8004ea6:	eeb0 0a67 	vmov.f32	s0, s15
 8004eaa:	4608      	mov	r0, r1
 8004eac:	f7fd f908 	bl	80020c0 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	60bb      	str	r3, [r7, #8]
 8004ebe:	e7e4      	b.n	8004e8a <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh+0x2a>
      }
      return offset;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
    }
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b084      	sub	sp, #16
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
 8004ed2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	60fb      	str	r3, [r7, #12]
      offset += this->pose.deserialize(inbuffer + offset);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	1d18      	adds	r0, r3, #4
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	683a      	ldr	r2, [r7, #0]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	f7ff ff57 	bl	8004d96 <_ZN13geometry_msgs4Pose11deserializeEPh>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	4413      	add	r3, r2
 8004eee:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	60bb      	str	r3, [r7, #8]
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	2b23      	cmp	r3, #35	; 0x23
 8004ef8:	d813      	bhi.n	8004f22 <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh+0x58>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->covariance[i]));
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	683a      	ldr	r2, [r7, #0]
 8004efe:	18d0      	adds	r0, r2, r3
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	330a      	adds	r3, #10
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	4413      	add	r3, r2
 8004f0a:	3304      	adds	r3, #4
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	f7fd f973 	bl	80021f8 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004f12:	4602      	mov	r2, r0
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	4413      	add	r3, r2
 8004f18:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	60bb      	str	r3, [r7, #8]
 8004f20:	e7e8      	b.n	8004ef4 <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh+0x2a>
      }
     return offset;
 8004f22:	68fb      	ldr	r3, [r7, #12]
    }
 8004f24:	4618      	mov	r0, r3
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <_ZN13geometry_msgs18PoseWithCovariance7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/PoseWithCovariance"; };
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	4b03      	ldr	r3, [pc, #12]	; (8004f44 <_ZN13geometry_msgs18PoseWithCovariance7getTypeEv+0x18>)
 8004f36:	4618      	mov	r0, r3
 8004f38:	370c      	adds	r7, #12
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	0800de1c 	.word	0x0800de1c

08004f48 <_ZN13geometry_msgs18PoseWithCovariance6getMD5Ev>:
    virtual const char * getMD5() override { return "c23e848cf1b7533a8d7c259073a97e6f"; };
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	4b03      	ldr	r3, [pc, #12]	; (8004f60 <_ZN13geometry_msgs18PoseWithCovariance6getMD5Ev+0x18>)
 8004f52:	4618      	mov	r0, r3
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	0800de40 	.word	0x0800de40

08004f64 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev>:
    public:
      typedef geometry_msgs::Twist _twist_type;
      _twist_type twist;
      float covariance[36];

    TwistWithCovariance():
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
      twist(),
      covariance()
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7fd f9de 	bl	8002330 <_ZN3ros3MsgC1Ev>
 8004f74:	4a0c      	ldr	r2, [pc, #48]	; (8004fa8 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x44>)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	601a      	str	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	3304      	adds	r3, #4
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7fd fa8c 	bl	800249c <_ZN13geometry_msgs5TwistC1Ev>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8004f8a:	2323      	movs	r3, #35	; 0x23
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	db05      	blt.n	8004f9c <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x38>
 8004f90:	f04f 0100 	mov.w	r1, #0
 8004f94:	6011      	str	r1, [r2, #0]
 8004f96:	3204      	adds	r2, #4
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	e7f7      	b.n	8004f8c <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x28>
    {
    }
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3708      	adds	r7, #8
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	0800e178 	.word	0x0800e178

08004fac <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	60fb      	str	r3, [r7, #12]
      offset += this->twist.serialize(outbuffer + offset);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	1d18      	adds	r0, r3, #4
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	f7fd fa85 	bl	80024d4 <_ZNK13geometry_msgs5Twist9serializeEPh>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	4413      	add	r3, r2
 8004fd0:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	60bb      	str	r3, [r7, #8]
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	2b23      	cmp	r3, #35	; 0x23
 8004fda:	d816      	bhi.n	800500a <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh+0x5e>
      offset += serializeAvrFloat64(outbuffer + offset, this->covariance[i]);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	683a      	ldr	r2, [r7, #0]
 8004fe0:	18d1      	adds	r1, r2, r3
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	330a      	adds	r3, #10
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4413      	add	r3, r2
 8004fec:	edd3 7a00 	vldr	s15, [r3]
 8004ff0:	eeb0 0a67 	vmov.f32	s0, s15
 8004ff4:	4608      	mov	r0, r1
 8004ff6:	f7fd f863 	bl	80020c0 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	4413      	add	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	3301      	adds	r3, #1
 8005006:	60bb      	str	r3, [r7, #8]
 8005008:	e7e5      	b.n	8004fd6 <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh+0x2a>
      }
      return offset;
 800500a:	68fb      	ldr	r3, [r7, #12]
    }
 800500c:	4618      	mov	r0, r3
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800501e:	2300      	movs	r3, #0
 8005020:	60fb      	str	r3, [r7, #12]
      offset += this->twist.deserialize(inbuffer + offset);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	1d18      	adds	r0, r3, #4
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	683a      	ldr	r2, [r7, #0]
 800502a:	4413      	add	r3, r2
 800502c:	4619      	mov	r1, r3
 800502e:	f7fd fa76 	bl	800251e <_ZN13geometry_msgs5Twist11deserializeEPh>
 8005032:	4602      	mov	r2, r0
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	4413      	add	r3, r2
 8005038:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 800503a:	2300      	movs	r3, #0
 800503c:	60bb      	str	r3, [r7, #8]
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	2b23      	cmp	r3, #35	; 0x23
 8005042:	d812      	bhi.n	800506a <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh+0x56>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->covariance[i]));
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	18d0      	adds	r0, r2, r3
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	330a      	adds	r3, #10
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	4413      	add	r3, r2
 8005054:	4619      	mov	r1, r3
 8005056:	f7fd f8cf 	bl	80021f8 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800505a:	4602      	mov	r2, r0
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	4413      	add	r3, r2
 8005060:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	3301      	adds	r3, #1
 8005066:	60bb      	str	r3, [r7, #8]
 8005068:	e7e9      	b.n	800503e <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh+0x2a>
      }
     return offset;
 800506a:	68fb      	ldr	r3, [r7, #12]
    }
 800506c:	4618      	mov	r0, r3
 800506e:	3710      	adds	r7, #16
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <_ZN13geometry_msgs19TwistWithCovariance7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/TwistWithCovariance"; };
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	4b03      	ldr	r3, [pc, #12]	; (800508c <_ZN13geometry_msgs19TwistWithCovariance7getTypeEv+0x18>)
 800507e:	4618      	mov	r0, r3
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	0800deb4 	.word	0x0800deb4

08005090 <_ZN13geometry_msgs19TwistWithCovariance6getMD5Ev>:
    virtual const char * getMD5() override { return "1fe8a28e6890a4cc3ae4c3ca5c7d82e6"; };
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	4b03      	ldr	r3, [pc, #12]	; (80050a8 <_ZN13geometry_msgs19TwistWithCovariance6getMD5Ev+0x18>)
 800509a:	4618      	mov	r0, r3
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	0800ded8 	.word	0x0800ded8

080050ac <_ZN8nav_msgs8OdometryC1Ev>:
      typedef geometry_msgs::PoseWithCovariance _pose_type;
      _pose_type pose;
      typedef geometry_msgs::TwistWithCovariance _twist_type;
      _twist_type twist;

    Odometry():
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
      header(),
      child_frame_id(""),
      pose(),
      twist()
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7fd f93a 	bl	8002330 <_ZN3ros3MsgC1Ev>
 80050bc:	4a0c      	ldr	r2, [pc, #48]	; (80050f0 <_ZN8nav_msgs8OdometryC1Ev+0x44>)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	601a      	str	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	3304      	adds	r3, #4
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7ff fb24 	bl	8004714 <_ZN8std_msgs6HeaderC1Ev>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a09      	ldr	r2, [pc, #36]	; (80050f4 <_ZN8nav_msgs8OdometryC1Ev+0x48>)
 80050d0:	619a      	str	r2, [r3, #24]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	331c      	adds	r3, #28
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7ff fe9e 	bl	8004e18 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	33d8      	adds	r3, #216	; 0xd8
 80050e0:	4618      	mov	r0, r3
 80050e2:	f7ff ff3f 	bl	8004f64 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev>
    {
    }
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4618      	mov	r0, r3
 80050ea:	3708      	adds	r7, #8
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	0800e160 	.word	0x0800e160
 80050f4:	0800dd34 	.word	0x0800dd34

080050f8 <_ZNK8nav_msgs8Odometry9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005102:	2300      	movs	r3, #0
 8005104:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	1d18      	adds	r0, r3, #4
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	683a      	ldr	r2, [r7, #0]
 800510e:	4413      	add	r3, r2
 8005110:	4619      	mov	r1, r3
 8005112:	f7ff fb1f 	bl	8004754 <_ZNK8std_msgs6Header9serializeEPh>
 8005116:	4602      	mov	r2, r0
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	4413      	add	r3, r2
 800511c:	60fb      	str	r3, [r7, #12]
      uint32_t length_child_frame_id = strlen(this->child_frame_id);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	4618      	mov	r0, r3
 8005124:	f7fb f854 	bl	80001d0 <strlen>
 8005128:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_child_frame_id);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	683a      	ldr	r2, [r7, #0]
 800512e:	4413      	add	r3, r2
 8005130:	68b9      	ldr	r1, [r7, #8]
 8005132:	4618      	mov	r0, r3
 8005134:	f7fe fbe6 	bl	8003904 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	3304      	adds	r3, #4
 800513c:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->child_frame_id, length_child_frame_id);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	683a      	ldr	r2, [r7, #0]
 8005142:	18d0      	adds	r0, r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	699b      	ldr	r3, [r3, #24]
 8005148:	68ba      	ldr	r2, [r7, #8]
 800514a:	4619      	mov	r1, r3
 800514c:	f008 fad8 	bl	800d700 <memcpy>
      offset += length_child_frame_id;
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	4413      	add	r3, r2
 8005156:	60fb      	str	r3, [r7, #12]
      offset += this->pose.serialize(outbuffer + offset);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f103 001c 	add.w	r0, r3, #28
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	683a      	ldr	r2, [r7, #0]
 8005162:	4413      	add	r3, r2
 8005164:	4619      	mov	r1, r3
 8005166:	f7ff fe7b 	bl	8004e60 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh>
 800516a:	4602      	mov	r2, r0
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	4413      	add	r3, r2
 8005170:	60fb      	str	r3, [r7, #12]
      offset += this->twist.serialize(outbuffer + offset);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	683a      	ldr	r2, [r7, #0]
 800517c:	4413      	add	r3, r2
 800517e:	4619      	mov	r1, r3
 8005180:	f7ff ff14 	bl	8004fac <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh>
 8005184:	4602      	mov	r2, r0
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	4413      	add	r3, r2
 800518a:	60fb      	str	r3, [r7, #12]
      return offset;
 800518c:	68fb      	ldr	r3, [r7, #12]
    }
 800518e:	4618      	mov	r0, r3
 8005190:	3710      	adds	r7, #16
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <_ZN8nav_msgs8Odometry11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8005196:	b580      	push	{r7, lr}
 8005198:	b086      	sub	sp, #24
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
 800519e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80051a0:	2300      	movs	r3, #0
 80051a2:	613b      	str	r3, [r7, #16]
      offset += this->header.deserialize(inbuffer + offset);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	1d18      	adds	r0, r3, #4
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	683a      	ldr	r2, [r7, #0]
 80051ac:	4413      	add	r3, r2
 80051ae:	4619      	mov	r1, r3
 80051b0:	f7ff fb68 	bl	8004884 <_ZN8std_msgs6Header11deserializeEPh>
 80051b4:	4602      	mov	r2, r0
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	4413      	add	r3, r2
 80051ba:	613b      	str	r3, [r7, #16]
      uint32_t length_child_frame_id;
      arrToVar(length_child_frame_id, (inbuffer + offset));
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	683a      	ldr	r2, [r7, #0]
 80051c0:	441a      	add	r2, r3
 80051c2:	f107 030c 	add.w	r3, r7, #12
 80051c6:	4611      	mov	r1, r2
 80051c8:	4618      	mov	r0, r3
 80051ca:	f7fe fbb9 	bl	8003940 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	3304      	adds	r3, #4
 80051d2:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	617b      	str	r3, [r7, #20]
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	4413      	add	r3, r2
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d20c      	bcs.n	80051fe <_ZN8nav_msgs8Odometry11deserializeEPh+0x68>
          inbuffer[k-1]=inbuffer[k];
 80051e4:	683a      	ldr	r2, [r7, #0]
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	441a      	add	r2, r3
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	3b01      	subs	r3, #1
 80051ee:	6839      	ldr	r1, [r7, #0]
 80051f0:	440b      	add	r3, r1
 80051f2:	7812      	ldrb	r2, [r2, #0]
 80051f4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	3301      	adds	r3, #1
 80051fa:	617b      	str	r3, [r7, #20]
 80051fc:	e7ec      	b.n	80051d8 <_ZN8nav_msgs8Odometry11deserializeEPh+0x42>
      }
      inbuffer[offset+length_child_frame_id-1]=0;
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	4413      	add	r3, r2
 8005204:	3b01      	subs	r3, #1
 8005206:	683a      	ldr	r2, [r7, #0]
 8005208:	4413      	add	r3, r2
 800520a:	2200      	movs	r2, #0
 800520c:	701a      	strb	r2, [r3, #0]
      this->child_frame_id = (char *)(inbuffer + offset-1);
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	3b01      	subs	r3, #1
 8005212:	683a      	ldr	r2, [r7, #0]
 8005214:	441a      	add	r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	619a      	str	r2, [r3, #24]
      offset += length_child_frame_id;
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	4413      	add	r3, r2
 8005220:	613b      	str	r3, [r7, #16]
      offset += this->pose.deserialize(inbuffer + offset);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f103 001c 	add.w	r0, r3, #28
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	4413      	add	r3, r2
 800522e:	4619      	mov	r1, r3
 8005230:	f7ff fe4b 	bl	8004eca <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh>
 8005234:	4602      	mov	r2, r0
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	4413      	add	r3, r2
 800523a:	613b      	str	r3, [r7, #16]
      offset += this->twist.deserialize(inbuffer + offset);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	4413      	add	r3, r2
 8005248:	4619      	mov	r1, r3
 800524a:	f7ff fee3 	bl	8005014 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh>
 800524e:	4602      	mov	r2, r0
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	4413      	add	r3, r2
 8005254:	613b      	str	r3, [r7, #16]
     return offset;
 8005256:	693b      	ldr	r3, [r7, #16]
    }
 8005258:	4618      	mov	r0, r3
 800525a:	3718      	adds	r7, #24
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <_ZN8nav_msgs8Odometry7getTypeEv>:

    virtual const char * getType() override { return "nav_msgs/Odometry"; };
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	4b03      	ldr	r3, [pc, #12]	; (8005278 <_ZN8nav_msgs8Odometry7getTypeEv+0x18>)
 800526a:	4618      	mov	r0, r3
 800526c:	370c      	adds	r7, #12
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	0800defc 	.word	0x0800defc

0800527c <_ZN8nav_msgs8Odometry6getMD5Ev>:
    virtual const char * getMD5() override { return "cd5e73d190d741a2f92e81eda573aca7"; };
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	4b03      	ldr	r3, [pc, #12]	; (8005294 <_ZN8nav_msgs8Odometry6getMD5Ev+0x18>)
 8005286:	4618      	mov	r0, r3
 8005288:	370c      	adds	r7, #12
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	0800df10 	.word	0x0800df10

08005298 <_ZN13geometry_msgs9TransformC1Ev>:
      typedef geometry_msgs::Vector3 _translation_type;
      _translation_type translation;
      typedef geometry_msgs::Quaternion _rotation_type;
      _rotation_type rotation;

    Transform():
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
      translation(),
      rotation()
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7fd f844 	bl	8002330 <_ZN3ros3MsgC1Ev>
 80052a8:	4a08      	ldr	r2, [pc, #32]	; (80052cc <_ZN13geometry_msgs9TransformC1Ev+0x34>)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	601a      	str	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	3304      	adds	r3, #4
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7fd f84c 	bl	8002350 <_ZN13geometry_msgs7Vector3C1Ev>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	3314      	adds	r3, #20
 80052bc:	4618      	mov	r0, r3
 80052be:	f7ff fc63 	bl	8004b88 <_ZN13geometry_msgs10QuaternionC1Ev>
    {
    }
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4618      	mov	r0, r3
 80052c6:	3708      	adds	r7, #8
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	0800e148 	.word	0x0800e148

080052d0 <_ZNK13geometry_msgs9Transform9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80052da:	2300      	movs	r3, #0
 80052dc:	60fb      	str	r3, [r7, #12]
      offset += this->translation.serialize(outbuffer + offset);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	1d18      	adds	r0, r3, #4
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	4413      	add	r3, r2
 80052e8:	4619      	mov	r1, r3
 80052ea:	f7fd f84f 	bl	800238c <_ZNK13geometry_msgs7Vector39serializeEPh>
 80052ee:	4602      	mov	r2, r0
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	4413      	add	r3, r2
 80052f4:	60fb      	str	r3, [r7, #12]
      offset += this->rotation.serialize(outbuffer + offset);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f103 0014 	add.w	r0, r3, #20
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	683a      	ldr	r2, [r7, #0]
 8005300:	4413      	add	r3, r2
 8005302:	4619      	mov	r1, r3
 8005304:	f7ff fc62 	bl	8004bcc <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 8005308:	4602      	mov	r2, r0
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	4413      	add	r3, r2
 800530e:	60fb      	str	r3, [r7, #12]
      return offset;
 8005310:	68fb      	ldr	r3, [r7, #12]
    }
 8005312:	4618      	mov	r0, r3
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <_ZN13geometry_msgs9Transform11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800531a:	b580      	push	{r7, lr}
 800531c:	b084      	sub	sp, #16
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
 8005322:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005324:	2300      	movs	r3, #0
 8005326:	60fb      	str	r3, [r7, #12]
      offset += this->translation.deserialize(inbuffer + offset);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	1d18      	adds	r0, r3, #4
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	683a      	ldr	r2, [r7, #0]
 8005330:	4413      	add	r3, r2
 8005332:	4619      	mov	r1, r3
 8005334:	f7fd f863 	bl	80023fe <_ZN13geometry_msgs7Vector311deserializeEPh>
 8005338:	4602      	mov	r2, r0
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	4413      	add	r3, r2
 800533e:	60fb      	str	r3, [r7, #12]
      offset += this->rotation.deserialize(inbuffer + offset);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f103 0014 	add.w	r0, r3, #20
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	683a      	ldr	r2, [r7, #0]
 800534a:	4413      	add	r3, r2
 800534c:	4619      	mov	r1, r3
 800534e:	f7ff fc85 	bl	8004c5c <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 8005352:	4602      	mov	r2, r0
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	4413      	add	r3, r2
 8005358:	60fb      	str	r3, [r7, #12]
     return offset;
 800535a:	68fb      	ldr	r3, [r7, #12]
    }
 800535c:	4618      	mov	r0, r3
 800535e:	3710      	adds	r7, #16
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <_ZN13geometry_msgs9Transform7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Transform"; };
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	4b03      	ldr	r3, [pc, #12]	; (800537c <_ZN13geometry_msgs9Transform7getTypeEv+0x18>)
 800536e:	4618      	mov	r0, r3
 8005370:	370c      	adds	r7, #12
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	0800df34 	.word	0x0800df34

08005380 <_ZN13geometry_msgs9Transform6getMD5Ev>:
    virtual const char * getMD5() override { return "ac9eff44abf714214112b05d54a3cf9b"; };
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	4b03      	ldr	r3, [pc, #12]	; (8005398 <_ZN13geometry_msgs9Transform6getMD5Ev+0x18>)
 800538a:	4618      	mov	r0, r3
 800538c:	370c      	adds	r7, #12
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	0800df4c 	.word	0x0800df4c

0800539c <_ZN13geometry_msgs16TransformStampedC1Ev>:
      typedef const char* _child_frame_id_type;
      _child_frame_id_type child_frame_id;
      typedef geometry_msgs::Transform _transform_type;
      _transform_type transform;

    TransformStamped():
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
      header(),
      child_frame_id(""),
      transform()
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f7fc ffc2 	bl	8002330 <_ZN3ros3MsgC1Ev>
 80053ac:	4a0a      	ldr	r2, [pc, #40]	; (80053d8 <_ZN13geometry_msgs16TransformStampedC1Ev+0x3c>)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	601a      	str	r2, [r3, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	3304      	adds	r3, #4
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7ff f9ac 	bl	8004714 <_ZN8std_msgs6HeaderC1Ev>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a07      	ldr	r2, [pc, #28]	; (80053dc <_ZN13geometry_msgs16TransformStampedC1Ev+0x40>)
 80053c0:	619a      	str	r2, [r3, #24]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	331c      	adds	r3, #28
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7ff ff66 	bl	8005298 <_ZN13geometry_msgs9TransformC1Ev>
    {
    }
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4618      	mov	r0, r3
 80053d0:	3708      	adds	r7, #8
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	0800e130 	.word	0x0800e130
 80053dc:	0800dd34 	.word	0x0800dd34

080053e0 <_ZNK13geometry_msgs16TransformStamped9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80053ea:	2300      	movs	r3, #0
 80053ec:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	1d18      	adds	r0, r3, #4
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	4413      	add	r3, r2
 80053f8:	4619      	mov	r1, r3
 80053fa:	f7ff f9ab 	bl	8004754 <_ZNK8std_msgs6Header9serializeEPh>
 80053fe:	4602      	mov	r2, r0
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	4413      	add	r3, r2
 8005404:	60fb      	str	r3, [r7, #12]
      uint32_t length_child_frame_id = strlen(this->child_frame_id);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	4618      	mov	r0, r3
 800540c:	f7fa fee0 	bl	80001d0 <strlen>
 8005410:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_child_frame_id);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	683a      	ldr	r2, [r7, #0]
 8005416:	4413      	add	r3, r2
 8005418:	68b9      	ldr	r1, [r7, #8]
 800541a:	4618      	mov	r0, r3
 800541c:	f7fe fa72 	bl	8003904 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	3304      	adds	r3, #4
 8005424:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->child_frame_id, length_child_frame_id);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	683a      	ldr	r2, [r7, #0]
 800542a:	18d0      	adds	r0, r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	68ba      	ldr	r2, [r7, #8]
 8005432:	4619      	mov	r1, r3
 8005434:	f008 f964 	bl	800d700 <memcpy>
      offset += length_child_frame_id;
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	4413      	add	r3, r2
 800543e:	60fb      	str	r3, [r7, #12]
      offset += this->transform.serialize(outbuffer + offset);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f103 001c 	add.w	r0, r3, #28
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	4413      	add	r3, r2
 800544c:	4619      	mov	r1, r3
 800544e:	f7ff ff3f 	bl	80052d0 <_ZNK13geometry_msgs9Transform9serializeEPh>
 8005452:	4602      	mov	r2, r0
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4413      	add	r3, r2
 8005458:	60fb      	str	r3, [r7, #12]
      return offset;
 800545a:	68fb      	ldr	r3, [r7, #12]
    }
 800545c:	4618      	mov	r0, r3
 800545e:	3710      	adds	r7, #16
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <_ZN13geometry_msgs16TransformStamped11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8005464:	b580      	push	{r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800546e:	2300      	movs	r3, #0
 8005470:	613b      	str	r3, [r7, #16]
      offset += this->header.deserialize(inbuffer + offset);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	1d18      	adds	r0, r3, #4
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	683a      	ldr	r2, [r7, #0]
 800547a:	4413      	add	r3, r2
 800547c:	4619      	mov	r1, r3
 800547e:	f7ff fa01 	bl	8004884 <_ZN8std_msgs6Header11deserializeEPh>
 8005482:	4602      	mov	r2, r0
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	4413      	add	r3, r2
 8005488:	613b      	str	r3, [r7, #16]
      uint32_t length_child_frame_id;
      arrToVar(length_child_frame_id, (inbuffer + offset));
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	683a      	ldr	r2, [r7, #0]
 800548e:	441a      	add	r2, r3
 8005490:	f107 030c 	add.w	r3, r7, #12
 8005494:	4611      	mov	r1, r2
 8005496:	4618      	mov	r0, r3
 8005498:	f7fe fa52 	bl	8003940 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	3304      	adds	r3, #4
 80054a0:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	617b      	str	r3, [r7, #20]
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	4413      	add	r3, r2
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d20c      	bcs.n	80054cc <_ZN13geometry_msgs16TransformStamped11deserializeEPh+0x68>
          inbuffer[k-1]=inbuffer[k];
 80054b2:	683a      	ldr	r2, [r7, #0]
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	441a      	add	r2, r3
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	3b01      	subs	r3, #1
 80054bc:	6839      	ldr	r1, [r7, #0]
 80054be:	440b      	add	r3, r1
 80054c0:	7812      	ldrb	r2, [r2, #0]
 80054c2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	3301      	adds	r3, #1
 80054c8:	617b      	str	r3, [r7, #20]
 80054ca:	e7ec      	b.n	80054a6 <_ZN13geometry_msgs16TransformStamped11deserializeEPh+0x42>
      }
      inbuffer[offset+length_child_frame_id-1]=0;
 80054cc:	693a      	ldr	r2, [r7, #16]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	4413      	add	r3, r2
 80054d2:	3b01      	subs	r3, #1
 80054d4:	683a      	ldr	r2, [r7, #0]
 80054d6:	4413      	add	r3, r2
 80054d8:	2200      	movs	r2, #0
 80054da:	701a      	strb	r2, [r3, #0]
      this->child_frame_id = (char *)(inbuffer + offset-1);
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	3b01      	subs	r3, #1
 80054e0:	683a      	ldr	r2, [r7, #0]
 80054e2:	441a      	add	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	619a      	str	r2, [r3, #24]
      offset += length_child_frame_id;
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	4413      	add	r3, r2
 80054ee:	613b      	str	r3, [r7, #16]
      offset += this->transform.deserialize(inbuffer + offset);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f103 001c 	add.w	r0, r3, #28
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	683a      	ldr	r2, [r7, #0]
 80054fa:	4413      	add	r3, r2
 80054fc:	4619      	mov	r1, r3
 80054fe:	f7ff ff0c 	bl	800531a <_ZN13geometry_msgs9Transform11deserializeEPh>
 8005502:	4602      	mov	r2, r0
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	4413      	add	r3, r2
 8005508:	613b      	str	r3, [r7, #16]
     return offset;
 800550a:	693b      	ldr	r3, [r7, #16]
    }
 800550c:	4618      	mov	r0, r3
 800550e:	3718      	adds	r7, #24
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <_ZN13geometry_msgs16TransformStamped7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/TransformStamped"; };
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	4b03      	ldr	r3, [pc, #12]	; (800552c <_ZN13geometry_msgs16TransformStamped7getTypeEv+0x18>)
 800551e:	4618      	mov	r0, r3
 8005520:	370c      	adds	r7, #12
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	0800df70 	.word	0x0800df70

08005530 <_ZN13geometry_msgs16TransformStamped6getMD5Ev>:
    virtual const char * getMD5() override { return "b5764a33bfeb3588febc2682852579b0"; };
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	4b03      	ldr	r3, [pc, #12]	; (8005548 <_ZN13geometry_msgs16TransformStamped6getMD5Ev+0x18>)
 800553a:	4618      	mov	r0, r3
 800553c:	370c      	adds	r7, #12
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	0800df90 	.word	0x0800df90

0800554c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
 8005558:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint) {};
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	601a      	str	r2, [r3, #0]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	605a      	str	r2, [r3, #4]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	683a      	ldr	r2, [r7, #0]
 800556a:	611a      	str	r2, [r3, #16]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	4618      	mov	r0, r3
 8005570:	3714      	adds	r7, #20
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <_ZN3ros9Publisher7publishEPKNS_3MsgE>:
  int publish(const Msg * msg)
 800557a:	b580      	push	{r7, lr}
 800557c:	b082      	sub	sp, #8
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
 8005582:	6039      	str	r1, [r7, #0]
    return nh_->publish(id_, msg);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	68d8      	ldr	r0, [r3, #12]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	6891      	ldr	r1, [r2, #8]
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	4798      	blx	r3
 8005598:	4603      	mov	r3, r0
  };
 800559a:	4618      	mov	r0, r3
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
	...

080055a4 <_ZN2tf9tfMessageC1Ev>:
      uint32_t transforms_length;
      typedef geometry_msgs::TransformStamped _transforms_type;
      _transforms_type st_transforms;
      _transforms_type * transforms;

    tfMessage():
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
      transforms_length(0), st_transforms(), transforms(nullptr)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4618      	mov	r0, r3
 80055b0:	f7fc febe 	bl	8002330 <_ZN3ros3MsgC1Ev>
 80055b4:	4a09      	ldr	r2, [pc, #36]	; (80055dc <_ZN2tf9tfMessageC1Ev+0x38>)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	601a      	str	r2, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	605a      	str	r2, [r3, #4]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	3308      	adds	r3, #8
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7ff fee9 	bl	800539c <_ZN13geometry_msgs16TransformStampedC1Ev>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	64da      	str	r2, [r3, #76]	; 0x4c
    {
    }
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4618      	mov	r0, r3
 80055d4:	3708      	adds	r7, #8
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	0800e118 	.word	0x0800e118

080055e0 <_ZNK2tf9tfMessage9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80055ea:	2300      	movs	r3, #0
 80055ec:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->transforms_length >> (8 * 0)) & 0xFF;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6859      	ldr	r1, [r3, #4]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	683a      	ldr	r2, [r7, #0]
 80055f6:	4413      	add	r3, r2
 80055f8:	b2ca      	uxtb	r2, r1
 80055fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->transforms_length >> (8 * 1)) & 0xFF;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	0a19      	lsrs	r1, r3, #8
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	3301      	adds	r3, #1
 8005606:	683a      	ldr	r2, [r7, #0]
 8005608:	4413      	add	r3, r2
 800560a:	b2ca      	uxtb	r2, r1
 800560c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->transforms_length >> (8 * 2)) & 0xFF;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	0c19      	lsrs	r1, r3, #16
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	3302      	adds	r3, #2
 8005618:	683a      	ldr	r2, [r7, #0]
 800561a:	4413      	add	r3, r2
 800561c:	b2ca      	uxtb	r2, r1
 800561e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->transforms_length >> (8 * 3)) & 0xFF;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	0e19      	lsrs	r1, r3, #24
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	3303      	adds	r3, #3
 800562a:	683a      	ldr	r2, [r7, #0]
 800562c:	4413      	add	r3, r2
 800562e:	b2ca      	uxtb	r2, r1
 8005630:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->transforms_length);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	3304      	adds	r3, #4
 8005636:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < transforms_length; i++){
 8005638:	2300      	movs	r3, #0
 800563a:	60bb      	str	r3, [r7, #8]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	68ba      	ldr	r2, [r7, #8]
 8005642:	429a      	cmp	r2, r3
 8005644:	d21e      	bcs.n	8005684 <_ZNK2tf9tfMessage9serializeEPh+0xa4>
      offset += this->transforms[i].serialize(outbuffer + offset);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800564a:	68ba      	ldr	r2, [r7, #8]
 800564c:	4613      	mov	r3, r2
 800564e:	011b      	lsls	r3, r3, #4
 8005650:	4413      	add	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	18c8      	adds	r0, r1, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800565a:	68ba      	ldr	r2, [r7, #8]
 800565c:	4613      	mov	r3, r2
 800565e:	011b      	lsls	r3, r3, #4
 8005660:	4413      	add	r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	440b      	add	r3, r1
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	6839      	ldr	r1, [r7, #0]
 800566e:	440a      	add	r2, r1
 8005670:	4611      	mov	r1, r2
 8005672:	4798      	blx	r3
 8005674:	4602      	mov	r2, r0
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	4413      	add	r3, r2
 800567a:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < transforms_length; i++){
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	3301      	adds	r3, #1
 8005680:	60bb      	str	r3, [r7, #8]
 8005682:	e7db      	b.n	800563c <_ZNK2tf9tfMessage9serializeEPh+0x5c>
      }
      return offset;
 8005684:	68fb      	ldr	r3, [r7, #12]
    }
 8005686:	4618      	mov	r0, r3
 8005688:	3710      	adds	r7, #16
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}

0800568e <_ZN2tf9tfMessage11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800568e:	b580      	push	{r7, lr}
 8005690:	b086      	sub	sp, #24
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
 8005696:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005698:	2300      	movs	r3, #0
 800569a:	617b      	str	r3, [r7, #20]
      uint32_t transforms_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	683a      	ldr	r2, [r7, #0]
 80056a0:	4413      	add	r3, r2
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	60fb      	str	r3, [r7, #12]
      transforms_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	3301      	adds	r3, #1
 80056aa:	683a      	ldr	r2, [r7, #0]
 80056ac:	4413      	add	r3, r2
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	021b      	lsls	r3, r3, #8
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	60fb      	str	r3, [r7, #12]
      transforms_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	3302      	adds	r3, #2
 80056bc:	683a      	ldr	r2, [r7, #0]
 80056be:	4413      	add	r3, r2
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	041b      	lsls	r3, r3, #16
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	60fb      	str	r3, [r7, #12]
      transforms_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	3303      	adds	r3, #3
 80056ce:	683a      	ldr	r2, [r7, #0]
 80056d0:	4413      	add	r3, r2
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	061b      	lsls	r3, r3, #24
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	4313      	orrs	r3, r2
 80056da:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->transforms_length);
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	3304      	adds	r3, #4
 80056e0:	617b      	str	r3, [r7, #20]
      if(transforms_lengthT > transforms_length)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d90c      	bls.n	8005706 <_ZN2tf9tfMessage11deserializeEPh+0x78>
        this->transforms = (geometry_msgs::TransformStamped*)realloc(this->transforms, transforms_lengthT * sizeof(geometry_msgs::TransformStamped));
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	4613      	mov	r3, r2
 80056f4:	011b      	lsls	r3, r3, #4
 80056f6:	4413      	add	r3, r2
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	4619      	mov	r1, r3
 80056fc:	f008 f8aa 	bl	800d854 <realloc>
 8005700:	4602      	mov	r2, r0
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	64da      	str	r2, [r3, #76]	; 0x4c
      transforms_length = transforms_lengthT;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < transforms_length; i++){
 800570c:	2300      	movs	r3, #0
 800570e:	613b      	str	r3, [r7, #16]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	429a      	cmp	r2, r3
 8005718:	d21e      	bcs.n	8005758 <_ZN2tf9tfMessage11deserializeEPh+0xca>
      offset += this->st_transforms.deserialize(inbuffer + offset);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f103 0008 	add.w	r0, r3, #8
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	683a      	ldr	r2, [r7, #0]
 8005724:	4413      	add	r3, r2
 8005726:	4619      	mov	r1, r3
 8005728:	f7ff fe9c 	bl	8005464 <_ZN13geometry_msgs16TransformStamped11deserializeEPh>
 800572c:	4602      	mov	r2, r0
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	4413      	add	r3, r2
 8005732:	617b      	str	r3, [r7, #20]
        memcpy( &(this->transforms[i]), &(this->st_transforms), sizeof(geometry_msgs::TransformStamped));
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	4613      	mov	r3, r2
 800573c:	011b      	lsls	r3, r3, #4
 800573e:	4413      	add	r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	18c8      	adds	r0, r1, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	3308      	adds	r3, #8
 8005748:	2244      	movs	r2, #68	; 0x44
 800574a:	4619      	mov	r1, r3
 800574c:	f007 ffd8 	bl	800d700 <memcpy>
      for( uint32_t i = 0; i < transforms_length; i++){
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	3301      	adds	r3, #1
 8005754:	613b      	str	r3, [r7, #16]
 8005756:	e7db      	b.n	8005710 <_ZN2tf9tfMessage11deserializeEPh+0x82>
      }
     return offset;
 8005758:	697b      	ldr	r3, [r7, #20]
    }
 800575a:	4618      	mov	r0, r3
 800575c:	3718      	adds	r7, #24
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
	...

08005764 <_ZN2tf9tfMessage7getTypeEv>:

    virtual const char * getType() override { return "tf/tfMessage"; };
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	4b03      	ldr	r3, [pc, #12]	; (800577c <_ZN2tf9tfMessage7getTypeEv+0x18>)
 800576e:	4618      	mov	r0, r3
 8005770:	370c      	adds	r7, #12
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	0800dfb4 	.word	0x0800dfb4

08005780 <_ZN2tf9tfMessage6getMD5Ev>:
    virtual const char * getMD5() override { return "94810edda583a504dfda3829e70d7eec"; };
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	4b03      	ldr	r3, [pc, #12]	; (8005798 <_ZN2tf9tfMessage6getMD5Ev+0x18>)
 800578a:	4618      	mov	r0, r3
 800578c:	370c      	adds	r7, #12
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	0800dfc4 	.word	0x0800dfc4

0800579c <_ZN2tf20TransformBroadcasterC1Ev>:
{

class TransformBroadcaster
{
public:
  TransformBroadcaster() : publisher_("/tf", &internal_msg) {}
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7ff fefc 	bl	80055a4 <_ZN2tf9tfMessageC1Ev>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f103 0050 	add.w	r0, r3, #80	; 0x50
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	2300      	movs	r3, #0
 80057b6:	4904      	ldr	r1, [pc, #16]	; (80057c8 <_ZN2tf20TransformBroadcasterC1Ev+0x2c>)
 80057b8:	f7ff fec8 	bl	800554c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4618      	mov	r0, r3
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	0800dfe8 	.word	0x0800dfe8

080057cc <_ZN2tf20TransformBroadcaster4initERN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEE>:

  void init(ros::NodeHandle &nh)
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  {
    nh.advertise(publisher_);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	3350      	adds	r3, #80	; 0x50
 80057da:	4619      	mov	r1, r3
 80057dc:	6838      	ldr	r0, [r7, #0]
 80057de:	f000 facf 	bl	8005d80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE>
  }
 80057e2:	bf00      	nop
 80057e4:	3708      	adds	r7, #8
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}

080057ea <_ZN2tf20TransformBroadcaster13sendTransformERN13geometry_msgs16TransformStampedE>:

  void sendTransform(geometry_msgs::TransformStamped &transform)
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b082      	sub	sp, #8
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
 80057f2:	6039      	str	r1, [r7, #0]
  {
    internal_msg.transforms_length = 1;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	605a      	str	r2, [r3, #4]
    internal_msg.transforms = &transform;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	683a      	ldr	r2, [r7, #0]
 80057fe:	64da      	str	r2, [r3, #76]	; 0x4c
    publisher_.publish(&internal_msg);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	3350      	adds	r3, #80	; 0x50
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	4611      	mov	r1, r2
 8005808:	4618      	mov	r0, r3
 800580a:	f7ff feb6 	bl	800557a <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  }
 800580e:	bf00      	nop
 8005810:	3708      	adds	r7, #8
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
	...

08005818 <_ZN2tfL23createQuaternionFromYawEd>:

namespace tf
{

static inline geometry_msgs::Quaternion createQuaternionFromYaw(double yaw)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	e9c7 2300 	strd	r2, r3, [r7]
//  q.y = 0;
//  q.z = sin(yaw * 0.5);
//  q.w = cos(yaw * 0.5);
//  return q;

  geometry_msgs::Quaternion q;
 8005824:	68f8      	ldr	r0, [r7, #12]
 8005826:	f7ff f9af 	bl	8004b88 <_ZN13geometry_msgs10QuaternionC1Ev>
  q.x = quat_x;
 800582a:	4b0a      	ldr	r3, [pc, #40]	; (8005854 <_ZN2tfL23createQuaternionFromYawEd+0x3c>)
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	605a      	str	r2, [r3, #4]
  q.y = quat_y;
 8005832:	4b09      	ldr	r3, [pc, #36]	; (8005858 <_ZN2tfL23createQuaternionFromYawEd+0x40>)
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	609a      	str	r2, [r3, #8]
  q.z = quat_z;
 800583a:	4b08      	ldr	r3, [pc, #32]	; (800585c <_ZN2tfL23createQuaternionFromYawEd+0x44>)
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	60da      	str	r2, [r3, #12]
  q.w = quat_w;
 8005842:	4b07      	ldr	r3, [pc, #28]	; (8005860 <_ZN2tfL23createQuaternionFromYawEd+0x48>)
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	611a      	str	r2, [r3, #16]
  return q;
 800584a:	bf00      	nop
}
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	3710      	adds	r7, #16
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	20000460 	.word	0x20000460
 8005858:	20000464 	.word	0x20000464
 800585c:	20000468 	.word	0x20000468
 8005860:	2000045c 	.word	0x2000045c

08005864 <_ZN8OdometerC1Eff>:

geometry_msgs::TransformStamped t;
tf::TransformBroadcaster tfBroadcaster;


Odometer::Odometer(const float metersPerTick, const float base_width) {
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	ed87 0a02 	vstr	s0, [r7, #8]
 8005870:	edc7 0a01 	vstr	s1, [r7, #4]
  _metersPerTick = metersPerTick;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	68ba      	ldr	r2, [r7, #8]
 8005878:	601a      	str	r2, [r3, #0]
  _base_width    = base_width;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	605a      	str	r2, [r3, #4]
  _cur_x         = 0.0;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f04f 0200 	mov.w	r2, #0
 8005886:	609a      	str	r2, [r3, #8]
  _cur_y         = 0.0;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f04f 0200 	mov.w	r2, #0
 800588e:	60da      	str	r2, [r3, #12]
  _cur_theta     = 0.0;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f04f 0200 	mov.w	r2, #0
 8005896:	611a      	str	r2, [r3, #16]
}
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	4618      	mov	r0, r3
 800589c:	3714      	adds	r7, #20
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
	...

080058a8 <_ZN8Odometer9setupPubsERN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEE>:

void Odometer::setupPubs(ros::NodeHandle &nh) {
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  nh.advertise(odom_pub);
 80058b2:	4906      	ldr	r1, [pc, #24]	; (80058cc <_ZN8Odometer9setupPubsERN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEE+0x24>)
 80058b4:	6838      	ldr	r0, [r7, #0]
 80058b6:	f000 fa63 	bl	8005d80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE>
  tfBroadcaster.init(nh);
 80058ba:	6839      	ldr	r1, [r7, #0]
 80058bc:	4804      	ldr	r0, [pc, #16]	; (80058d0 <_ZN8Odometer9setupPubsERN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEE+0x28>)
 80058be:	f7ff ff85 	bl	80057cc <_ZN2tf20TransformBroadcaster4initERN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEE>
}
 80058c2:	bf00      	nop
 80058c4:	3708      	adds	r7, #8
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	200028f8 	.word	0x200028f8
 80058d0:	20002950 	.word	0x20002950

080058d4 <_ZN8Odometer14update_publishEN3ros4TimeEfff>:


void Odometer::update_publish(ros::Time current_time, const float odoInterval,
                              const float distLeft, const float distRight) {
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b088      	sub	sp, #32
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6178      	str	r0, [r7, #20]
 80058dc:	f107 030c 	add.w	r3, r7, #12
 80058e0:	e883 0006 	stmia.w	r3, {r1, r2}
 80058e4:	ed87 0a02 	vstr	s0, [r7, #8]
 80058e8:	edc7 0a01 	vstr	s1, [r7, #4]
 80058ec:	ed87 1a00 	vstr	s2, [r7]

  float vel_x;
  float vel_theta;

  update_odom(odoInterval, distLeft, distRight, vel_x, vel_theta);
 80058f0:	f107 0218 	add.w	r2, r7, #24
 80058f4:	f107 031c 	add.w	r3, r7, #28
 80058f8:	4619      	mov	r1, r3
 80058fa:	ed97 1a00 	vldr	s2, [r7]
 80058fe:	edd7 0a01 	vldr	s1, [r7, #4]
 8005902:	ed97 0a02 	vldr	s0, [r7, #8]
 8005906:	6978      	ldr	r0, [r7, #20]
 8005908:	f000 f81a 	bl	8005940 <_ZN8Odometer11update_odomEfffRfS0_>
  publish_odom(current_time, vel_x, vel_theta);
 800590c:	edd7 7a07 	vldr	s15, [r7, #28]
 8005910:	ed97 7a06 	vldr	s14, [r7, #24]
 8005914:	eef0 0a47 	vmov.f32	s1, s14
 8005918:	eeb0 0a67 	vmov.f32	s0, s15
 800591c:	f107 030c 	add.w	r3, r7, #12
 8005920:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005924:	6978      	ldr	r0, [r7, #20]
 8005926:	f000 f933 	bl	8005b90 <_ZN8Odometer12publish_odomEN3ros4TimeEff>
  broadcastTf(current_time);
 800592a:	f107 030c 	add.w	r3, r7, #12
 800592e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005932:	6978      	ldr	r0, [r7, #20]
 8005934:	f000 f984 	bl	8005c40 <_ZN8Odometer11broadcastTfEN3ros4TimeE>
}
 8005938:	bf00      	nop
 800593a:	3720      	adds	r7, #32
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <_ZN8Odometer11update_odomEfffRfS0_>:

void Odometer::update_odom(const float odoInterval, const float distLeft,const float distRight,
                          float& vel_x, float& vel_theta) {
 8005940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005942:	ed2d 8b02 	vpush	{d8}
 8005946:	b08b      	sub	sp, #44	; 0x2c
 8005948:	af00      	add	r7, sp, #0
 800594a:	6178      	str	r0, [r7, #20]
 800594c:	ed87 0a04 	vstr	s0, [r7, #16]
 8005950:	edc7 0a03 	vstr	s1, [r7, #12]
 8005954:	ed87 1a02 	vstr	s2, [r7, #8]
 8005958:	6079      	str	r1, [r7, #4]
 800595a:	603a      	str	r2, [r7, #0]

  float dist;
  float d_theta;

  dist = (distRight + distLeft) / 2.0;
 800595c:	ed97 7a02 	vldr	s14, [r7, #8]
 8005960:	edd7 7a03 	vldr	s15, [r7, #12]
 8005964:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005968:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800596c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005970:	edc7 7a08 	vstr	s15, [r7, #32]

  // Check for the special case of driving in a straight line
  // then compute current loation relative to previous location

  // If the difference in distance is under 2mm/Second we call it a straight line
  if (abs(distRight - distLeft) < (0.002 * odoInterval)) {
 8005974:	ed97 7a02 	vldr	s14, [r7, #8]
 8005978:	edd7 7a03 	vldr	s15, [r7, #12]
 800597c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005980:	eeb0 0a67 	vmov.f32	s0, s15
 8005984:	f7fe fe96 	bl	80046b4 <_ZSt3absf>
 8005988:	ee10 3a10 	vmov	r3, s0
 800598c:	4618      	mov	r0, r3
 800598e:	f7fa fd8b 	bl	80004a8 <__aeabi_f2d>
 8005992:	4604      	mov	r4, r0
 8005994:	460d      	mov	r5, r1
 8005996:	6938      	ldr	r0, [r7, #16]
 8005998:	f7fa fd86 	bl	80004a8 <__aeabi_f2d>
 800599c:	a364      	add	r3, pc, #400	; (adr r3, 8005b30 <_ZN8Odometer11update_odomEfffRfS0_+0x1f0>)
 800599e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a2:	f7fa fdd9 	bl	8000558 <__aeabi_dmul>
 80059a6:	4602      	mov	r2, r0
 80059a8:	460b      	mov	r3, r1
 80059aa:	2101      	movs	r1, #1
 80059ac:	460e      	mov	r6, r1
 80059ae:	4620      	mov	r0, r4
 80059b0:	4629      	mov	r1, r5
 80059b2:	f7fb f843 	bl	8000a3c <__aeabi_dcmplt>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d101      	bne.n	80059c0 <_ZN8Odometer11update_odomEfffRfS0_+0x80>
 80059bc:	2300      	movs	r3, #0
 80059be:	461e      	mov	r6, r3
 80059c0:	b2f3      	uxtb	r3, r6
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d02d      	beq.n	8005a22 <_ZN8Odometer11update_odomEfffRfS0_+0xe2>

    // drove in sraight line
    d_theta = 0.0;
 80059c6:	f04f 0300 	mov.w	r3, #0
 80059ca:	627b      	str	r3, [r7, #36]	; 0x24
    _cur_x += dist * cos(_cur_theta);
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	edd3 7a04 	vldr	s15, [r3, #16]
 80059d2:	eeb0 0a67 	vmov.f32	s0, s15
 80059d6:	f7fe fe7d 	bl	80046d4 <_ZSt3cosf>
 80059da:	eeb0 7a40 	vmov.f32	s14, s0
 80059de:	edd7 7a08 	vldr	s15, [r7, #32]
 80059e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	edd3 7a02 	vldr	s15, [r3, #8]
 80059ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	edc3 7a02 	vstr	s15, [r3, #8]
    _cur_y += dist * sin(_cur_theta);
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	edd3 7a04 	vldr	s15, [r3, #16]
 80059fc:	eeb0 0a67 	vmov.f32	s0, s15
 8005a00:	f7fe fe78 	bl	80046f4 <_ZSt3sinf>
 8005a04:	eeb0 7a40 	vmov.f32	s14, s0
 8005a08:	edd7 7a08 	vldr	s15, [r7, #32]
 8005a0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	edd3 7a03 	vldr	s15, [r3, #12]
 8005a16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	edc3 7a03 	vstr	s15, [r3, #12]
 8005a20:	e06d      	b.n	8005afe <_ZN8Odometer11update_odomEfffRfS0_+0x1be>
  }
  else {

    // The path was along an arc
    d_theta = (distRight - distLeft) / _base_width;
 8005a22:	ed97 7a02 	vldr	s14, [r7, #8]
 8005a26:	edd7 7a03 	vldr	s15, [r7, #12]
 8005a2a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	ed93 7a01 	vldr	s14, [r3, #4]
 8005a34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a38:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float r = dist / d_theta;
 8005a3c:	edd7 6a08 	vldr	s13, [r7, #32]
 8005a40:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005a44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a48:	edc7 7a07 	vstr	s15, [r7, #28]

    _cur_x += r * (sin(d_theta + _cur_theta) - sin(_cur_theta));
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	ed93 7a04 	vldr	s14, [r3, #16]
 8005a52:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005a56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a5a:	eeb0 0a67 	vmov.f32	s0, s15
 8005a5e:	f7fe fe49 	bl	80046f4 <_ZSt3sinf>
 8005a62:	eeb0 8a40 	vmov.f32	s16, s0
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	edd3 7a04 	vldr	s15, [r3, #16]
 8005a6c:	eeb0 0a67 	vmov.f32	s0, s15
 8005a70:	f7fe fe40 	bl	80046f4 <_ZSt3sinf>
 8005a74:	eef0 7a40 	vmov.f32	s15, s0
 8005a78:	ee38 7a67 	vsub.f32	s14, s16, s15
 8005a7c:	edd7 7a07 	vldr	s15, [r7, #28]
 8005a80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	edd3 7a02 	vldr	s15, [r3, #8]
 8005a8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	edc3 7a02 	vstr	s15, [r3, #8]
    _cur_y -= r * (cos(d_theta + _cur_theta) - cos(_cur_theta));
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	ed93 7a04 	vldr	s14, [r3, #16]
 8005a9a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005a9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005aa2:	eeb0 0a67 	vmov.f32	s0, s15
 8005aa6:	f7fe fe15 	bl	80046d4 <_ZSt3cosf>
 8005aaa:	eeb0 8a40 	vmov.f32	s16, s0
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	edd3 7a04 	vldr	s15, [r3, #16]
 8005ab4:	eeb0 0a67 	vmov.f32	s0, s15
 8005ab8:	f7fe fe0c 	bl	80046d4 <_ZSt3cosf>
 8005abc:	eef0 7a40 	vmov.f32	s15, s0
 8005ac0:	ee38 7a67 	vsub.f32	s14, s16, s15
 8005ac4:	edd7 7a07 	vldr	s15, [r7, #28]
 8005ac8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	ed93 7a03 	vldr	s14, [r3, #12]
 8005ad2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	edc3 7a03 	vstr	s15, [r3, #12]
    _cur_theta = normalize_angle(_cur_theta + d_theta);
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	ed93 7a04 	vldr	s14, [r3, #16]
 8005ae2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005ae6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005aea:	eeb0 0a67 	vmov.f32	s0, s15
 8005aee:	6978      	ldr	r0, [r7, #20]
 8005af0:	f000 f8f2 	bl	8005cd8 <_ZN8Odometer15normalize_angleEf>
 8005af4:	eef0 7a40 	vmov.f32	s15, s0
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	edc3 7a04 	vstr	s15, [r3, #16]
  }

  vel_x     = dist    / odoInterval;
 8005afe:	edd7 6a08 	vldr	s13, [r7, #32]
 8005b02:	ed97 7a04 	vldr	s14, [r7, #16]
 8005b06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	edc3 7a00 	vstr	s15, [r3]
  vel_theta = d_theta / odoInterval;
 8005b10:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005b14:	ed97 7a04 	vldr	s14, [r7, #16]
 8005b18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	edc3 7a00 	vstr	s15, [r3]

  return;
 8005b22:	bf00      	nop
}
 8005b24:	372c      	adds	r7, #44	; 0x2c
 8005b26:	46bd      	mov	sp, r7
 8005b28:	ecbd 8b02 	vpop	{d8}
 8005b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	d2f1a9fc 	.word	0xd2f1a9fc
 8005b34:	3f60624d 	.word	0x3f60624d

08005b38 <_ZN3ros3MsgaSEOS0_>:
class Msg
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4618      	mov	r0, r3
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <_ZN13geometry_msgs10QuaternionaSEOS0_>:
  class Quaternion : public ros::Msg
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	683a      	ldr	r2, [r7, #0]
 8005b5e:	4611      	mov	r1, r2
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7ff ffe9 	bl	8005b38 <_ZN3ros3MsgaSEOS0_>
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	685a      	ldr	r2, [r3, #4]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	605a      	str	r2, [r3, #4]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	689a      	ldr	r2, [r3, #8]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	609a      	str	r2, [r3, #8]
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	68da      	ldr	r2, [r3, #12]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	60da      	str	r2, [r3, #12]
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	691a      	ldr	r2, [r3, #16]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	611a      	str	r2, [r3, #16]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3708      	adds	r7, #8
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <_ZN8Odometer12publish_odomEN3ros4TimeEff>:
    new_y = y - R * (cos(wd + heading) + cos(heading));
    new_heading = normalize_angle(heading + wd);
  }
}

void Odometer::publish_odom(ros::Time current_time, const float vx, const float vth) {
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b08c      	sub	sp, #48	; 0x30
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6178      	str	r0, [r7, #20]
 8005b98:	f107 030c 	add.w	r3, r7, #12
 8005b9c:	e883 0006 	stmia.w	r3, {r1, r2}
 8005ba0:	ed87 0a02 	vstr	s0, [r7, #8]
 8005ba4:	edc7 0a01 	vstr	s1, [r7, #4]

    odomMsg.header.stamp          = current_time;
 8005ba8:	4b20      	ldr	r3, [pc, #128]	; (8005c2c <_ZN8Odometer12publish_odomEN3ros4TimeEff+0x9c>)
 8005baa:	330c      	adds	r3, #12
 8005bac:	f107 020c 	add.w	r2, r7, #12
 8005bb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005bb4:	e883 0003 	stmia.w	r3, {r0, r1}
    odomMsg.header.frame_id       = odom;
 8005bb8:	4b1c      	ldr	r3, [pc, #112]	; (8005c2c <_ZN8Odometer12publish_odomEN3ros4TimeEff+0x9c>)
 8005bba:	4a1d      	ldr	r2, [pc, #116]	; (8005c30 <_ZN8Odometer12publish_odomEN3ros4TimeEff+0xa0>)
 8005bbc:	615a      	str	r2, [r3, #20]
    odomMsg.child_frame_id        = base_link;
 8005bbe:	4b1b      	ldr	r3, [pc, #108]	; (8005c2c <_ZN8Odometer12publish_odomEN3ros4TimeEff+0x9c>)
 8005bc0:	4a1c      	ldr	r2, [pc, #112]	; (8005c34 <_ZN8Odometer12publish_odomEN3ros4TimeEff+0xa4>)
 8005bc2:	619a      	str	r2, [r3, #24]

    odomMsg.pose.pose.position.x  = _cur_x;
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	4a18      	ldr	r2, [pc, #96]	; (8005c2c <_ZN8Odometer12publish_odomEN3ros4TimeEff+0x9c>)
 8005bca:	6293      	str	r3, [r2, #40]	; 0x28
    odomMsg.pose.pose.position.y  = _cur_y;
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	4a16      	ldr	r2, [pc, #88]	; (8005c2c <_ZN8Odometer12publish_odomEN3ros4TimeEff+0x9c>)
 8005bd2:	62d3      	str	r3, [r2, #44]	; 0x2c
    odomMsg.pose.pose.position.z  = 0.0;
 8005bd4:	4b15      	ldr	r3, [pc, #84]	; (8005c2c <_ZN8Odometer12publish_odomEN3ros4TimeEff+0x9c>)
 8005bd6:	f04f 0200 	mov.w	r2, #0
 8005bda:	631a      	str	r2, [r3, #48]	; 0x30
    odomMsg.pose.pose.orientation = tf::createQuaternionFromYaw(_cur_theta);
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	4618      	mov	r0, r3
 8005be2:	f7fa fc61 	bl	80004a8 <__aeabi_f2d>
 8005be6:	4602      	mov	r2, r0
 8005be8:	460b      	mov	r3, r1
 8005bea:	f107 011c 	add.w	r1, r7, #28
 8005bee:	4608      	mov	r0, r1
 8005bf0:	f7ff fe12 	bl	8005818 <_ZN2tfL23createQuaternionFromYawEd>
 8005bf4:	f107 031c 	add.w	r3, r7, #28
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	480f      	ldr	r0, [pc, #60]	; (8005c38 <_ZN8Odometer12publish_odomEN3ros4TimeEff+0xa8>)
 8005bfc:	f7ff ffa8 	bl	8005b50 <_ZN13geometry_msgs10QuaternionaSEOS0_>

    odomMsg.twist.twist.linear.x  = vx;
 8005c00:	4a0a      	ldr	r2, [pc, #40]	; (8005c2c <_ZN8Odometer12publish_odomEN3ros4TimeEff+0x9c>)
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    odomMsg.twist.twist.linear.y  = 0;
 8005c08:	4b08      	ldr	r3, [pc, #32]	; (8005c2c <_ZN8Odometer12publish_odomEN3ros4TimeEff+0x9c>)
 8005c0a:	f04f 0200 	mov.w	r2, #0
 8005c0e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    odomMsg.twist.twist.angular.z = vth;
 8005c12:	4a06      	ldr	r2, [pc, #24]	; (8005c2c <_ZN8Odometer12publish_odomEN3ros4TimeEff+0x9c>)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc

    odom_pub.publish(&odomMsg);
 8005c1a:	4904      	ldr	r1, [pc, #16]	; (8005c2c <_ZN8Odometer12publish_odomEN3ros4TimeEff+0x9c>)
 8005c1c:	4807      	ldr	r0, [pc, #28]	; (8005c3c <_ZN8Odometer12publish_odomEN3ros4TimeEff+0xac>)
 8005c1e:	f7ff fcac 	bl	800557a <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  }
 8005c22:	bf00      	nop
 8005c24:	3730      	adds	r7, #48	; 0x30
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	20002768 	.word	0x20002768
 8005c30:	2000001c 	.word	0x2000001c
 8005c34:	20000010 	.word	0x20000010
 8005c38:	2000279c 	.word	0x2000279c
 8005c3c:	200028f8 	.word	0x200028f8

08005c40 <_ZN8Odometer11broadcastTfEN3ros4TimeE>:


  void Odometer::broadcastTf(ros::Time current_time) {
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b08a      	sub	sp, #40	; 0x28
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	1d3b      	adds	r3, r7, #4
 8005c4a:	e883 0006 	stmia.w	r3, {r1, r2}
    t.header.stamp            = current_time;
 8005c4e:	4b1c      	ldr	r3, [pc, #112]	; (8005cc0 <_ZN8Odometer11broadcastTfEN3ros4TimeE+0x80>)
 8005c50:	330c      	adds	r3, #12
 8005c52:	1d3a      	adds	r2, r7, #4
 8005c54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005c58:	e883 0003 	stmia.w	r3, {r0, r1}
    t.header.frame_id         = odom;
 8005c5c:	4b18      	ldr	r3, [pc, #96]	; (8005cc0 <_ZN8Odometer11broadcastTfEN3ros4TimeE+0x80>)
 8005c5e:	4a19      	ldr	r2, [pc, #100]	; (8005cc4 <_ZN8Odometer11broadcastTfEN3ros4TimeE+0x84>)
 8005c60:	615a      	str	r2, [r3, #20]
    t.child_frame_id          = base_link;
 8005c62:	4b17      	ldr	r3, [pc, #92]	; (8005cc0 <_ZN8Odometer11broadcastTfEN3ros4TimeE+0x80>)
 8005c64:	4a18      	ldr	r2, [pc, #96]	; (8005cc8 <_ZN8Odometer11broadcastTfEN3ros4TimeE+0x88>)
 8005c66:	619a      	str	r2, [r3, #24]

    t.transform.translation.x = _cur_x;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	4a14      	ldr	r2, [pc, #80]	; (8005cc0 <_ZN8Odometer11broadcastTfEN3ros4TimeE+0x80>)
 8005c6e:	6253      	str	r3, [r2, #36]	; 0x24
    t.transform.translation.y = _cur_y;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	4a12      	ldr	r2, [pc, #72]	; (8005cc0 <_ZN8Odometer11broadcastTfEN3ros4TimeE+0x80>)
 8005c76:	6293      	str	r3, [r2, #40]	; 0x28
    t.transform.translation.z = 0.0;
 8005c78:	4b11      	ldr	r3, [pc, #68]	; (8005cc0 <_ZN8Odometer11broadcastTfEN3ros4TimeE+0x80>)
 8005c7a:	f04f 0200 	mov.w	r2, #0
 8005c7e:	62da      	str	r2, [r3, #44]	; 0x2c
    t.transform.rotation      = tf::createQuaternionFromYaw(-_cur_theta);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	edd3 7a04 	vldr	s15, [r3, #16]
 8005c86:	eef1 7a67 	vneg.f32	s15, s15
 8005c8a:	ee17 3a90 	vmov	r3, s15
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f7fa fc0a 	bl	80004a8 <__aeabi_f2d>
 8005c94:	4602      	mov	r2, r0
 8005c96:	460b      	mov	r3, r1
 8005c98:	f107 0114 	add.w	r1, r7, #20
 8005c9c:	4608      	mov	r0, r1
 8005c9e:	f7ff fdbb 	bl	8005818 <_ZN2tfL23createQuaternionFromYawEd>
 8005ca2:	f107 0314 	add.w	r3, r7, #20
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	4808      	ldr	r0, [pc, #32]	; (8005ccc <_ZN8Odometer11broadcastTfEN3ros4TimeE+0x8c>)
 8005caa:	f7ff ff51 	bl	8005b50 <_ZN13geometry_msgs10QuaternionaSEOS0_>


    tfBroadcaster.sendTransform(t);
 8005cae:	4904      	ldr	r1, [pc, #16]	; (8005cc0 <_ZN8Odometer11broadcastTfEN3ros4TimeE+0x80>)
 8005cb0:	4807      	ldr	r0, [pc, #28]	; (8005cd0 <_ZN8Odometer11broadcastTfEN3ros4TimeE+0x90>)
 8005cb2:	f7ff fd9a 	bl	80057ea <_ZN2tf20TransformBroadcaster13sendTransformERN13geometry_msgs16TransformStampedE>
  }
 8005cb6:	bf00      	nop
 8005cb8:	3728      	adds	r7, #40	; 0x28
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	2000290c 	.word	0x2000290c
 8005cc4:	2000001c 	.word	0x2000001c
 8005cc8:	20000010 	.word	0x20000010
 8005ccc:	2000293c 	.word	0x2000293c
 8005cd0:	20002950 	.word	0x20002950
 8005cd4:	00000000 	.word	0x00000000

08005cd8 <_ZN8Odometer15normalize_angleEf>:


  float Odometer::normalize_angle(float angle) {
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	ed87 0a00 	vstr	s0, [r7]
    while (angle > M_PI) {
 8005ce4:	6838      	ldr	r0, [r7, #0]
 8005ce6:	f7fa fbdf 	bl	80004a8 <__aeabi_f2d>
 8005cea:	a31f      	add	r3, pc, #124	; (adr r3, 8005d68 <_ZN8Odometer15normalize_angleEf+0x90>)
 8005cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf0:	f7fa fec2 	bl	8000a78 <__aeabi_dcmpgt>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d100      	bne.n	8005cfc <_ZN8Odometer15normalize_angleEf+0x24>
 8005cfa:	e010      	b.n	8005d1e <_ZN8Odometer15normalize_angleEf+0x46>
      angle -= 2.0 * M_PI;
 8005cfc:	6838      	ldr	r0, [r7, #0]
 8005cfe:	f7fa fbd3 	bl	80004a8 <__aeabi_f2d>
 8005d02:	a31b      	add	r3, pc, #108	; (adr r3, 8005d70 <_ZN8Odometer15normalize_angleEf+0x98>)
 8005d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d08:	f7fa fa6e 	bl	80001e8 <__aeabi_dsub>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	460b      	mov	r3, r1
 8005d10:	4610      	mov	r0, r2
 8005d12:	4619      	mov	r1, r3
 8005d14:	f7fa fee2 	bl	8000adc <__aeabi_d2f>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	603b      	str	r3, [r7, #0]
    while (angle > M_PI) {
 8005d1c:	e7e2      	b.n	8005ce4 <_ZN8Odometer15normalize_angleEf+0xc>
    }
    while (angle < -M_PI) {
 8005d1e:	6838      	ldr	r0, [r7, #0]
 8005d20:	f7fa fbc2 	bl	80004a8 <__aeabi_f2d>
 8005d24:	a314      	add	r3, pc, #80	; (adr r3, 8005d78 <_ZN8Odometer15normalize_angleEf+0xa0>)
 8005d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2a:	f7fa fe87 	bl	8000a3c <__aeabi_dcmplt>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d010      	beq.n	8005d56 <_ZN8Odometer15normalize_angleEf+0x7e>
      angle += 2.0 * M_PI;
 8005d34:	6838      	ldr	r0, [r7, #0]
 8005d36:	f7fa fbb7 	bl	80004a8 <__aeabi_f2d>
 8005d3a:	a30d      	add	r3, pc, #52	; (adr r3, 8005d70 <_ZN8Odometer15normalize_angleEf+0x98>)
 8005d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d40:	f7fa fa54 	bl	80001ec <__adddf3>
 8005d44:	4602      	mov	r2, r0
 8005d46:	460b      	mov	r3, r1
 8005d48:	4610      	mov	r0, r2
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	f7fa fec6 	bl	8000adc <__aeabi_d2f>
 8005d50:	4603      	mov	r3, r0
 8005d52:	603b      	str	r3, [r7, #0]
    while (angle < -M_PI) {
 8005d54:	e7e3      	b.n	8005d1e <_ZN8Odometer15normalize_angleEf+0x46>
    }
    return angle;
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	ee07 3a90 	vmov	s15, r3
  }
 8005d5c:	eeb0 0a67 	vmov.f32	s0, s15
 8005d60:	3708      	adds	r7, #8
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	54442d18 	.word	0x54442d18
 8005d6c:	400921fb 	.word	0x400921fb
 8005d70:	54442d18 	.word	0x54442d18
 8005d74:	401921fb 	.word	0x401921fb
 8005d78:	54442d18 	.word	0x54442d18
 8005d7c:	c00921fb 	.word	0xc00921fb

08005d80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	60fb      	str	r3, [r7, #12]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2b18      	cmp	r3, #24
 8005d92:	dc1e      	bgt.n	8005dd2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	4413      	add	r3, r2
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d111      	bne.n	8005dca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	4413      	add	r3, r2
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	60da      	str	r2, [r3, #12]
        return true;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e004      	b.n	8005dd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	3301      	adds	r3, #1
 8005dce:	60fb      	str	r3, [r7, #12]
 8005dd0:	e7dd      	b.n	8005d8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE+0xe>
    return false;
 8005dd2:	2300      	movs	r3, #0
  }
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3714      	adds	r7, #20
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <_Z41__static_initialization_and_destruction_0ii>:
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d113      	bne.n	8005e18 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d10e      	bne.n	8005e18 <_Z41__static_initialization_and_destruction_0ii+0x38>
nav_msgs::Odometry odomMsg;
 8005dfa:	4809      	ldr	r0, [pc, #36]	; (8005e20 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8005dfc:	f7ff f956 	bl	80050ac <_ZN8nav_msgs8OdometryC1Ev>
ros::Publisher     odom_pub(odom, &odomMsg);
 8005e00:	2300      	movs	r3, #0
 8005e02:	4a07      	ldr	r2, [pc, #28]	; (8005e20 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8005e04:	4907      	ldr	r1, [pc, #28]	; (8005e24 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8005e06:	4808      	ldr	r0, [pc, #32]	; (8005e28 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8005e08:	f7ff fba0 	bl	800554c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
geometry_msgs::TransformStamped t;
 8005e0c:	4807      	ldr	r0, [pc, #28]	; (8005e2c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8005e0e:	f7ff fac5 	bl	800539c <_ZN13geometry_msgs16TransformStampedC1Ev>
tf::TransformBroadcaster tfBroadcaster;
 8005e12:	4807      	ldr	r0, [pc, #28]	; (8005e30 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8005e14:	f7ff fcc2 	bl	800579c <_ZN2tf20TransformBroadcasterC1Ev>
  }
 8005e18:	bf00      	nop
 8005e1a:	3708      	adds	r7, #8
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	20002768 	.word	0x20002768
 8005e24:	2000001c 	.word	0x2000001c
 8005e28:	200028f8 	.word	0x200028f8
 8005e2c:	2000290c 	.word	0x2000290c
 8005e30:	20002950 	.word	0x20002950

08005e34 <_GLOBAL__sub_I_base_link>:
 8005e34:	b580      	push	{r7, lr}
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005e3c:	2001      	movs	r0, #1
 8005e3e:	f7ff ffcf 	bl	8005de0 <_Z41__static_initialization_and_destruction_0ii>
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	0000      	movs	r0, r0
	...

08005e48 <_ZN3PIDC1EPdS0_S0_dddii>:

/*Constructor (...)*********************************************************
 *    The parameters specified here are those for for which we can't set up
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b08a      	sub	sp, #40	; 0x28
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6278      	str	r0, [r7, #36]	; 0x24
 8005e50:	6239      	str	r1, [r7, #32]
 8005e52:	61fa      	str	r2, [r7, #28]
 8005e54:	61bb      	str	r3, [r7, #24]
 8005e56:	ed87 0b04 	vstr	d0, [r7, #16]
 8005e5a:	ed87 1b02 	vstr	d1, [r7, #8]
 8005e5e:	ed87 2b00 	vstr	d2, [r7]
        double Kp, double Ki, double Kd, int POn, int ControllerDirection)
{
    myOutput = Output;
 8005e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e64:	69fa      	ldr	r2, [r7, #28]
 8005e66:	63da      	str	r2, [r3, #60]	; 0x3c
    myInput = Input;
 8005e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6a:	6a3a      	ldr	r2, [r7, #32]
 8005e6c:	639a      	str	r2, [r3, #56]	; 0x38
    mySetpoint = Setpoint;
 8005e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e70:	69ba      	ldr	r2, [r7, #24]
 8005e72:	641a      	str	r2, [r3, #64]	; 0x40
    inAuto = false;
 8005e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    PID::SetOutputLimits(0, 255);				//default output limit corresponds to
 8005e7c:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8005ec8 <_ZN3PIDC1EPdS0_S0_dddii+0x80>
 8005e80:	ed9f 0b13 	vldr	d0, [pc, #76]	; 8005ed0 <_ZN3PIDC1EPdS0_S0_dddii+0x88>
 8005e84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e86:	f000 fa22 	bl	80062ce <_ZN3PID15SetOutputLimitsEdd>
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8c:	2264      	movs	r2, #100	; 0x64
 8005e8e:	659a      	str	r2, [r3, #88]	; 0x58

    PID::SetControllerDirection(ControllerDirection);
 8005e90:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005e92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e94:	f000 fae5 	bl	8006462 <_ZN3PID22SetControllerDirectionEi>
    PID::SetTunings(Kp, Ki, Kd, POn);
 8005e98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e9a:	ed97 2b00 	vldr	d2, [r7]
 8005e9e:	ed97 1b02 	vldr	d1, [r7, #8]
 8005ea2:	ed97 0b04 	vldr	d0, [r7, #16]
 8005ea6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ea8:	f000 f930 	bl	800610c <_ZN3PID10SetTuningsEdddi>

    lastTime = tick-SampleTime;
 8005eac:	4b0a      	ldr	r3, [pc, #40]	; (8005ed8 <_ZN3PIDC1EPdS0_S0_dddii+0x90>)
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eb4:	1ad2      	subs	r2, r2, r3
 8005eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb8:	645a      	str	r2, [r3, #68]	; 0x44
}
 8005eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3728      	adds	r7, #40	; 0x28
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	f3af 8000 	nop.w
 8005ec8:	00000000 	.word	0x00000000
 8005ecc:	406fe000 	.word	0x406fe000
	...
 8005ed8:	20000480 	.word	0x20000480

08005edc <_ZN3PIDC1EPdS0_S0_dddi>:
/*Constructor (...)*********************************************************
 *    To allow backwards compatability for v1.1, or for people that just want
 *    to use Proportional on Error without explicitly saying so
 ***************************************************************************/

PID::PID(double* Input, double* Output, double* Setpoint,
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b08c      	sub	sp, #48	; 0x30
 8005ee0:	af02      	add	r7, sp, #8
 8005ee2:	6278      	str	r0, [r7, #36]	; 0x24
 8005ee4:	6239      	str	r1, [r7, #32]
 8005ee6:	61fa      	str	r2, [r7, #28]
 8005ee8:	61bb      	str	r3, [r7, #24]
 8005eea:	ed87 0b04 	vstr	d0, [r7, #16]
 8005eee:	ed87 1b02 	vstr	d1, [r7, #8]
 8005ef2:	ed87 2b00 	vstr	d2, [r7]
        double Kp, double Ki, double Kd, int ControllerDirection)
    :PID::PID(Input, Output, Setpoint, Kp, Ki, Kd, P_ON_E, ControllerDirection)
 8005ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef8:	9301      	str	r3, [sp, #4]
 8005efa:	2301      	movs	r3, #1
 8005efc:	9300      	str	r3, [sp, #0]
 8005efe:	ed97 2b00 	vldr	d2, [r7]
 8005f02:	ed97 1b02 	vldr	d1, [r7, #8]
 8005f06:	ed97 0b04 	vldr	d0, [r7, #16]
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	69fa      	ldr	r2, [r7, #28]
 8005f0e:	6a39      	ldr	r1, [r7, #32]
 8005f10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f12:	f7ff ff99 	bl	8005e48 <_ZN3PIDC1EPdS0_S0_dddii>
{

}
 8005f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3728      	adds	r7, #40	; 0x28
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <_ZN3PID7ComputeEv>:
 *   every time "void loop()" executes.  the function will decide for itself whether a new
 *   pid Output needs to be computed.  returns true when the output is computed,
 *   false when nothing has been done.
 **********************************************************************************/
bool PID::Compute()
{
 8005f20:	b5b0      	push	{r4, r5, r7, lr}
 8005f22:	b08c      	sub	sp, #48	; 0x30
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
   if(!inAuto) return false;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005f2e:	f083 0301 	eor.w	r3, r3, #1
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d001      	beq.n	8005f3c <_ZN3PID7ComputeEv+0x1c>
 8005f38:	2300      	movs	r3, #0
 8005f3a:	e0e0      	b.n	80060fe <_ZN3PID7ComputeEv+0x1de>
   unsigned long now = tick;
 8005f3c:	4b72      	ldr	r3, [pc, #456]	; (8006108 <_ZN3PID7ComputeEv+0x1e8>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	627b      	str	r3, [r7, #36]	; 0x24
   unsigned long timeChange = (now - lastTime);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	623b      	str	r3, [r7, #32]
   if(timeChange>=SampleTime)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f50:	6a3a      	ldr	r2, [r7, #32]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	f0c0 80d2 	bcc.w	80060fc <_ZN3PID7ComputeEv+0x1dc>
   {
      /*Compute all the working error variables*/
      double input = *myInput;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f60:	e9c7 2306 	strd	r2, r3, [r7, #24]
      double error = *mySetpoint - input;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f70:	f7fa f93a 	bl	80001e8 <__aeabi_dsub>
 8005f74:	4602      	mov	r2, r0
 8005f76:	460b      	mov	r3, r1
 8005f78:	e9c7 2304 	strd	r2, r3, [r7, #16]
      double dInput = (input - lastInput);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8005f82:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005f86:	f7fa f92f 	bl	80001e8 <__aeabi_dsub>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	e9c7 2302 	strd	r2, r3, [r7, #8]
      outputSum+= (ki * error);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8005f9e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005fa2:	f7fa fad9 	bl	8000558 <__aeabi_dmul>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	460b      	mov	r3, r1
 8005faa:	4620      	mov	r0, r4
 8005fac:	4629      	mov	r1, r5
 8005fae:	f7fa f91d 	bl	80001ec <__adddf3>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	6879      	ldr	r1, [r7, #4]
 8005fb8:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

      /*Add Proportional on Measurement, if P_ON_M is specified*/
      if(!pOnE) outputSum-= kp * dInput;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8005fc2:	f083 0301 	eor.w	r3, r3, #1
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d014      	beq.n	8005ff6 <_ZN3PID7ComputeEv+0xd6>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8005fd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005fdc:	f7fa fabc 	bl	8000558 <__aeabi_dmul>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	460b      	mov	r3, r1
 8005fe4:	4620      	mov	r0, r4
 8005fe6:	4629      	mov	r1, r5
 8005fe8:	f7fa f8fe 	bl	80001e8 <__aeabi_dsub>
 8005fec:	4602      	mov	r2, r0
 8005fee:	460b      	mov	r3, r1
 8005ff0:	6879      	ldr	r1, [r7, #4]
 8005ff2:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

      if(outputSum > outMax) outputSum= outMax;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8006002:	f7fa fd39 	bl	8000a78 <__aeabi_dcmpgt>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d006      	beq.n	800601a <_ZN3PID7ComputeEv+0xfa>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8006012:	6879      	ldr	r1, [r7, #4]
 8006014:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8006018:	e010      	b.n	800603c <_ZN3PID7ComputeEv+0x11c>
      else if(outputSum < outMin) outputSum= outMin;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8006026:	f7fa fd09 	bl	8000a3c <__aeabi_dcmplt>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d005      	beq.n	800603c <_ZN3PID7ComputeEv+0x11c>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8006036:	6879      	ldr	r1, [r7, #4]
 8006038:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

      /*Add Proportional on Error, if P_ON_E is specified*/
	   double output;
      if(pOnE) output = kp * error;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00b      	beq.n	800605e <_ZN3PID7ComputeEv+0x13e>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800604c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006050:	f7fa fa82 	bl	8000558 <__aeabi_dmul>
 8006054:	4602      	mov	r2, r0
 8006056:	460b      	mov	r3, r1
 8006058:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800605c:	e005      	b.n	800606a <_ZN3PID7ComputeEv+0x14a>
      else output = 0;
 800605e:	f04f 0200 	mov.w	r2, #0
 8006062:	f04f 0300 	mov.w	r3, #0
 8006066:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

      /*Compute Rest of PID Output*/
      output += outputSum - kd * dInput;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8006076:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800607a:	f7fa fa6d 	bl	8000558 <__aeabi_dmul>
 800607e:	4602      	mov	r2, r0
 8006080:	460b      	mov	r3, r1
 8006082:	4620      	mov	r0, r4
 8006084:	4629      	mov	r1, r5
 8006086:	f7fa f8af 	bl	80001e8 <__aeabi_dsub>
 800608a:	4602      	mov	r2, r0
 800608c:	460b      	mov	r3, r1
 800608e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006092:	f7fa f8ab 	bl	80001ec <__adddf3>
 8006096:	4602      	mov	r2, r0
 8006098:	460b      	mov	r3, r1
 800609a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	    if(output > outMax) output = outMax;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80060a4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80060a8:	f7fa fce6 	bl	8000a78 <__aeabi_dcmpgt>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d005      	beq.n	80060be <_ZN3PID7ComputeEv+0x19e>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80060b8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80060bc:	e00e      	b.n	80060dc <_ZN3PID7ComputeEv+0x1bc>
      else if(output < outMin) output = outMin;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80060c4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80060c8:	f7fa fcb8 	bl	8000a3c <__aeabi_dcmplt>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d004      	beq.n	80060dc <_ZN3PID7ComputeEv+0x1bc>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80060d8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	    *myOutput = output;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80060e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80060e4:	e9c1 2300 	strd	r2, r3, [r1]

      /*Remember some variables for next time*/
      lastInput = input;
 80060e8:	6879      	ldr	r1, [r7, #4]
 80060ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060ee:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
      lastTime = now;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060f6:	645a      	str	r2, [r3, #68]	; 0x44
	    return true;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e000      	b.n	80060fe <_ZN3PID7ComputeEv+0x1de>
   }
   else return false;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3730      	adds	r7, #48	; 0x30
 8006102:	46bd      	mov	sp, r7
 8006104:	bdb0      	pop	{r4, r5, r7, pc}
 8006106:	bf00      	nop
 8006108:	20000480 	.word	0x20000480

0800610c <_ZN3PID10SetTuningsEdddi>:
 * This function allows the controller's dynamic performance to be adjusted.
 * it's called automatically from the constructor, but tunings can also
 * be adjusted on the fly during normal operation
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b08a      	sub	sp, #40	; 0x28
 8006110:	af00      	add	r7, sp, #0
 8006112:	61f8      	str	r0, [r7, #28]
 8006114:	ed87 0b04 	vstr	d0, [r7, #16]
 8006118:	ed87 1b02 	vstr	d1, [r7, #8]
 800611c:	ed87 2b00 	vstr	d2, [r7]
 8006120:	61b9      	str	r1, [r7, #24]
   if (Kp<0 || Ki<0 || Kd<0) return;
 8006122:	f04f 0200 	mov.w	r2, #0
 8006126:	f04f 0300 	mov.w	r3, #0
 800612a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800612e:	f7fa fc85 	bl	8000a3c <__aeabi_dcmplt>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	f040 8089 	bne.w	800624c <_ZN3PID10SetTuningsEdddi+0x140>
 800613a:	f04f 0200 	mov.w	r2, #0
 800613e:	f04f 0300 	mov.w	r3, #0
 8006142:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006146:	f7fa fc79 	bl	8000a3c <__aeabi_dcmplt>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d17d      	bne.n	800624c <_ZN3PID10SetTuningsEdddi+0x140>
 8006150:	f04f 0200 	mov.w	r2, #0
 8006154:	f04f 0300 	mov.w	r3, #0
 8006158:	e9d7 0100 	ldrd	r0, r1, [r7]
 800615c:	f7fa fc6e 	bl	8000a3c <__aeabi_dcmplt>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d172      	bne.n	800624c <_ZN3PID10SetTuningsEdddi+0x140>

   pOn = POn;
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	69ba      	ldr	r2, [r7, #24]
 800616a:	635a      	str	r2, [r3, #52]	; 0x34
   pOnE = POn == P_ON_E;
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	2b01      	cmp	r3, #1
 8006170:	bf0c      	ite	eq
 8006172:	2301      	moveq	r3, #1
 8006174:	2300      	movne	r3, #0
 8006176:	b2da      	uxtb	r2, r3
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

   dispKp = Kp; dispKi = Ki; dispKd = Kd;
 800617e:	69f9      	ldr	r1, [r7, #28]
 8006180:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006184:	e9c1 2300 	strd	r2, r3, [r1]
 8006188:	69f9      	ldr	r1, [r7, #28]
 800618a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800618e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8006192:	69f9      	ldr	r1, [r7, #28]
 8006194:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006198:	e9c1 2304 	strd	r2, r3, [r1, #16]

   double SampleTimeInSec = ((double)SampleTime)/1000;
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061a0:	4618      	mov	r0, r3
 80061a2:	f7fa f95f 	bl	8000464 <__aeabi_ui2d>
 80061a6:	f04f 0200 	mov.w	r2, #0
 80061aa:	4b2a      	ldr	r3, [pc, #168]	; (8006254 <_ZN3PID10SetTuningsEdddi+0x148>)
 80061ac:	f7fa fafe 	bl	80007ac <__aeabi_ddiv>
 80061b0:	4602      	mov	r2, r0
 80061b2:	460b      	mov	r3, r1
 80061b4:	e9c7 2308 	strd	r2, r3, [r7, #32]
   kp = Kp;
 80061b8:	69f9      	ldr	r1, [r7, #28]
 80061ba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80061be:	e9c1 2306 	strd	r2, r3, [r1, #24]
   ki = Ki * SampleTimeInSec;
 80061c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80061c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80061ca:	f7fa f9c5 	bl	8000558 <__aeabi_dmul>
 80061ce:	4602      	mov	r2, r0
 80061d0:	460b      	mov	r3, r1
 80061d2:	69f9      	ldr	r1, [r7, #28]
 80061d4:	e9c1 2308 	strd	r2, r3, [r1, #32]
   kd = Kd / SampleTimeInSec;
 80061d8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80061dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80061e0:	f7fa fae4 	bl	80007ac <__aeabi_ddiv>
 80061e4:	4602      	mov	r2, r0
 80061e6:	460b      	mov	r3, r1
 80061e8:	69f9      	ldr	r1, [r7, #28]
 80061ea:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

  if(controllerDirection ==REVERSE)
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d12b      	bne.n	800624e <_ZN3PID10SetTuningsEdddi+0x142>
   {
      kp = (0 - kp);
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80061fc:	f04f 0000 	mov.w	r0, #0
 8006200:	f04f 0100 	mov.w	r1, #0
 8006204:	f7f9 fff0 	bl	80001e8 <__aeabi_dsub>
 8006208:	4602      	mov	r2, r0
 800620a:	460b      	mov	r3, r1
 800620c:	69f9      	ldr	r1, [r7, #28]
 800620e:	e9c1 2306 	strd	r2, r3, [r1, #24]
      ki = (0 - ki);
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006218:	f04f 0000 	mov.w	r0, #0
 800621c:	f04f 0100 	mov.w	r1, #0
 8006220:	f7f9 ffe2 	bl	80001e8 <__aeabi_dsub>
 8006224:	4602      	mov	r2, r0
 8006226:	460b      	mov	r3, r1
 8006228:	69f9      	ldr	r1, [r7, #28]
 800622a:	e9c1 2308 	strd	r2, r3, [r1, #32]
      kd = (0 - kd);
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8006234:	f04f 0000 	mov.w	r0, #0
 8006238:	f04f 0100 	mov.w	r1, #0
 800623c:	f7f9 ffd4 	bl	80001e8 <__aeabi_dsub>
 8006240:	4602      	mov	r2, r0
 8006242:	460b      	mov	r3, r1
 8006244:	69f9      	ldr	r1, [r7, #28]
 8006246:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 800624a:	e000      	b.n	800624e <_ZN3PID10SetTuningsEdddi+0x142>
   if (Kp<0 || Ki<0 || Kd<0) return;
 800624c:	bf00      	nop
   }
}
 800624e:	3728      	adds	r7, #40	; 0x28
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}
 8006254:	408f4000 	.word	0x408f4000

08006258 <_ZN3PID13SetSampleTimeEi>:

/* SetSampleTime(...) *********************************************************
 * sets the period, in Milliseconds, at which the calculation is performed
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
 8006258:	b5b0      	push	{r4, r5, r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
   if (NewSampleTime > 0)
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	dd2e      	ble.n	80062c6 <_ZN3PID13SetSampleTimeEi+0x6e>
   {
      double ratio  = (double)NewSampleTime
 8006268:	6838      	ldr	r0, [r7, #0]
 800626a:	f7fa f90b 	bl	8000484 <__aeabi_i2d>
 800626e:	4604      	mov	r4, r0
 8006270:	460d      	mov	r5, r1
                      / (double)SampleTime;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006276:	4618      	mov	r0, r3
 8006278:	f7fa f8f4 	bl	8000464 <__aeabi_ui2d>
 800627c:	4602      	mov	r2, r0
 800627e:	460b      	mov	r3, r1
      double ratio  = (double)NewSampleTime
 8006280:	4620      	mov	r0, r4
 8006282:	4629      	mov	r1, r5
 8006284:	f7fa fa92 	bl	80007ac <__aeabi_ddiv>
 8006288:	4602      	mov	r2, r0
 800628a:	460b      	mov	r3, r1
 800628c:	e9c7 2302 	strd	r2, r3, [r7, #8]
      ki *= ratio;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8006296:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800629a:	f7fa f95d 	bl	8000558 <__aeabi_dmul>
 800629e:	4602      	mov	r2, r0
 80062a0:	460b      	mov	r3, r1
 80062a2:	6879      	ldr	r1, [r7, #4]
 80062a4:	e9c1 2308 	strd	r2, r3, [r1, #32]
      kd /= ratio;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80062ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062b2:	f7fa fa7b 	bl	80007ac <__aeabi_ddiv>
 80062b6:	4602      	mov	r2, r0
 80062b8:	460b      	mov	r3, r1
 80062ba:	6879      	ldr	r1, [r7, #4]
 80062bc:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
      SampleTime = (unsigned long)NewSampleTime;
 80062c0:	683a      	ldr	r2, [r7, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	659a      	str	r2, [r3, #88]	; 0x58
   }
}
 80062c6:	bf00      	nop
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bdb0      	pop	{r4, r5, r7, pc}

080062ce <_ZN3PID15SetOutputLimitsEdd>:
 *  be doing a time window and will need 0-8000 or something.  or maybe they'll
 *  want to clamp it from 0-125.  who knows.  at any rate, that can all be done
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b086      	sub	sp, #24
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6178      	str	r0, [r7, #20]
 80062d6:	ed87 0b02 	vstr	d0, [r7, #8]
 80062da:	ed87 1b00 	vstr	d1, [r7]
   if(Min >= Max) return;
 80062de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80062e6:	f7fa fbbd 	bl	8000a64 <__aeabi_dcmpge>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d159      	bne.n	80063a4 <_ZN3PID15SetOutputLimitsEdd+0xd6>
   outMin = Min;
 80062f0:	6979      	ldr	r1, [r7, #20]
 80062f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062f6:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
   outMax = Max;
 80062fa:	6979      	ldr	r1, [r7, #20]
 80062fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006300:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

   if(inAuto)
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800630a:	2b00      	cmp	r3, #0
 800630c:	d04b      	beq.n	80063a6 <_ZN3PID15SetOutputLimitsEdd+0xd8>
   {
	   if(*myOutput > outMax) *myOutput = outMax;
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006312:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800631c:	f7fa fbac 	bl	8000a78 <__aeabi_dcmpgt>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d007      	beq.n	8006336 <_ZN3PID15SetOutputLimitsEdd+0x68>
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8006330:	e9c1 2300 	strd	r2, r3, [r1]
 8006334:	e012      	b.n	800635c <_ZN3PID15SetOutputLimitsEdd+0x8e>
	   else if(*myOutput < outMin) *myOutput = outMin;
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800633a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8006344:	f7fa fb7a 	bl	8000a3c <__aeabi_dcmplt>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d006      	beq.n	800635c <_ZN3PID15SetOutputLimitsEdd+0x8e>
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8006358:	e9c1 2300 	strd	r2, r3, [r1]

	   if(outputSum > outMax) outputSum= outMax;
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8006368:	f7fa fb86 	bl	8000a78 <__aeabi_dcmpgt>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d006      	beq.n	8006380 <_ZN3PID15SetOutputLimitsEdd+0xb2>
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8006378:	6979      	ldr	r1, [r7, #20]
 800637a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 800637e:	e012      	b.n	80063a6 <_ZN3PID15SetOutputLimitsEdd+0xd8>
	   else if(outputSum < outMin) outputSum= outMin;
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800638c:	f7fa fb56 	bl	8000a3c <__aeabi_dcmplt>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d007      	beq.n	80063a6 <_ZN3PID15SetOutputLimitsEdd+0xd8>
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800639c:	6979      	ldr	r1, [r7, #20]
 800639e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 80063a2:	e000      	b.n	80063a6 <_ZN3PID15SetOutputLimitsEdd+0xd8>
   if(Min >= Max) return;
 80063a4:	bf00      	nop
   }
}
 80063a6:	3718      	adds	r7, #24
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <_ZN3PID7SetModeEi>:
 * Allows the controller Mode to be set to manual (0) or Automatic (non-zero)
 * when the transition from manual to auto occurs, the controller is
 * automatically initialized
 ******************************************************************************/
void PID::SetMode(int Mode)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
    bool newAuto = (Mode == AUTOMATIC);
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	bf0c      	ite	eq
 80063bc:	2301      	moveq	r3, #1
 80063be:	2300      	movne	r3, #0
 80063c0:	73fb      	strb	r3, [r7, #15]
    if(newAuto && !inAuto)
 80063c2:	7bfb      	ldrb	r3, [r7, #15]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00a      	beq.n	80063de <_ZN3PID7SetModeEi+0x32>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80063ce:	f083 0301 	eor.w	r3, r3, #1
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d002      	beq.n	80063de <_ZN3PID7SetModeEi+0x32>
    {  /*we just went from manual to auto*/
        PID::Initialize();
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 f808 	bl	80063ee <_ZN3PID10InitializeEv>
    }
    inAuto = newAuto;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	7bfa      	ldrb	r2, [r7, #15]
 80063e2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
}
 80063e6:	bf00      	nop
 80063e8:	3710      	adds	r7, #16
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <_ZN3PID10InitializeEv>:
/* Initialize()****************************************************************
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/
void PID::Initialize()
{
 80063ee:	b580      	push	{r7, lr}
 80063f0:	b082      	sub	sp, #8
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
   outputSum = *myOutput;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fe:	6879      	ldr	r1, [r7, #4]
 8006400:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
   lastInput = *myInput;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640c:	6879      	ldr	r1, [r7, #4]
 800640e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
   if(outputSum > outMax) outputSum = outMax;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800641e:	f7fa fb2b 	bl	8000a78 <__aeabi_dcmpgt>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d006      	beq.n	8006436 <_ZN3PID10InitializeEv+0x48>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800642e:	6879      	ldr	r1, [r7, #4]
 8006430:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
   else if(outputSum < outMin) outputSum = outMin;
}
 8006434:	e011      	b.n	800645a <_ZN3PID10InitializeEv+0x6c>
   else if(outputSum < outMin) outputSum = outMin;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8006442:	f7fa fafb 	bl	8000a3c <__aeabi_dcmplt>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d100      	bne.n	800644e <_ZN3PID10InitializeEv+0x60>
}
 800644c:	e005      	b.n	800645a <_ZN3PID10InitializeEv+0x6c>
   else if(outputSum < outMin) outputSum = outMin;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8006454:	6879      	ldr	r1, [r7, #4]
 8006456:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 800645a:	bf00      	nop
 800645c:	3708      	adds	r7, #8
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}

08006462 <_ZN3PID22SetControllerDirectionEi>:
 * to +Input) or a REVERSE acting process(+Output leads to -Input.)  we need to
 * know which one, because otherwise we may increase the output when we should
 * be decreasing.  This is called from the constructor.
 ******************************************************************************/
void PID::SetControllerDirection(int Direction)
{
 8006462:	b580      	push	{r7, lr}
 8006464:	b082      	sub	sp, #8
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
 800646a:	6039      	str	r1, [r7, #0]
   if(inAuto && Direction !=controllerDirection)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006472:	2b00      	cmp	r3, #0
 8006474:	d02e      	beq.n	80064d4 <_ZN3PID22SetControllerDirectionEi+0x72>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800647a:	683a      	ldr	r2, [r7, #0]
 800647c:	429a      	cmp	r2, r3
 800647e:	d029      	beq.n	80064d4 <_ZN3PID22SetControllerDirectionEi+0x72>
   {
	    kp = (0 - kp);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006486:	f04f 0000 	mov.w	r0, #0
 800648a:	f04f 0100 	mov.w	r1, #0
 800648e:	f7f9 feab 	bl	80001e8 <__aeabi_dsub>
 8006492:	4602      	mov	r2, r0
 8006494:	460b      	mov	r3, r1
 8006496:	6879      	ldr	r1, [r7, #4]
 8006498:	e9c1 2306 	strd	r2, r3, [r1, #24]
      ki = (0 - ki);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80064a2:	f04f 0000 	mov.w	r0, #0
 80064a6:	f04f 0100 	mov.w	r1, #0
 80064aa:	f7f9 fe9d 	bl	80001e8 <__aeabi_dsub>
 80064ae:	4602      	mov	r2, r0
 80064b0:	460b      	mov	r3, r1
 80064b2:	6879      	ldr	r1, [r7, #4]
 80064b4:	e9c1 2308 	strd	r2, r3, [r1, #32]
      kd = (0 - kd);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80064be:	f04f 0000 	mov.w	r0, #0
 80064c2:	f04f 0100 	mov.w	r1, #0
 80064c6:	f7f9 fe8f 	bl	80001e8 <__aeabi_dsub>
 80064ca:	4602      	mov	r2, r0
 80064cc:	460b      	mov	r3, r1
 80064ce:	6879      	ldr	r1, [r7, #4]
 80064d0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
   }
   controllerDirection = Direction;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	683a      	ldr	r2, [r7, #0]
 80064d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80064da:	bf00      	nop
 80064dc:	3708      	adds	r7, #8
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
	...

080064e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b08e      	sub	sp, #56	; 0x38
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80064ec:	2300      	movs	r3, #0
 80064ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80064f0:	2300      	movs	r3, #0
 80064f2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80064f4:	2300      	movs	r3, #0
 80064f6:	60fb      	str	r3, [r7, #12]
 80064f8:	4b33      	ldr	r3, [pc, #204]	; (80065c8 <HAL_InitTick+0xe4>)
 80064fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fc:	4a32      	ldr	r2, [pc, #200]	; (80065c8 <HAL_InitTick+0xe4>)
 80064fe:	f043 0310 	orr.w	r3, r3, #16
 8006502:	6413      	str	r3, [r2, #64]	; 0x40
 8006504:	4b30      	ldr	r3, [pc, #192]	; (80065c8 <HAL_InitTick+0xe4>)
 8006506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006508:	f003 0310 	and.w	r3, r3, #16
 800650c:	60fb      	str	r3, [r7, #12]
 800650e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006510:	f107 0210 	add.w	r2, r7, #16
 8006514:	f107 0314 	add.w	r3, r7, #20
 8006518:	4611      	mov	r1, r2
 800651a:	4618      	mov	r0, r3
 800651c:	f002 fcfa 	bl	8008f14 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8006520:	6a3b      	ldr	r3, [r7, #32]
 8006522:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8006524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006526:	2b00      	cmp	r3, #0
 8006528:	d103      	bne.n	8006532 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800652a:	f002 fccb 	bl	8008ec4 <HAL_RCC_GetPCLK1Freq>
 800652e:	6378      	str	r0, [r7, #52]	; 0x34
 8006530:	e004      	b.n	800653c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8006532:	f002 fcc7 	bl	8008ec4 <HAL_RCC_GetPCLK1Freq>
 8006536:	4603      	mov	r3, r0
 8006538:	005b      	lsls	r3, r3, #1
 800653a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800653c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800653e:	4a23      	ldr	r2, [pc, #140]	; (80065cc <HAL_InitTick+0xe8>)
 8006540:	fba2 2303 	umull	r2, r3, r2, r3
 8006544:	0c9b      	lsrs	r3, r3, #18
 8006546:	3b01      	subs	r3, #1
 8006548:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800654a:	4b21      	ldr	r3, [pc, #132]	; (80065d0 <HAL_InitTick+0xec>)
 800654c:	4a21      	ldr	r2, [pc, #132]	; (80065d4 <HAL_InitTick+0xf0>)
 800654e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8006550:	4b1f      	ldr	r3, [pc, #124]	; (80065d0 <HAL_InitTick+0xec>)
 8006552:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006556:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8006558:	4a1d      	ldr	r2, [pc, #116]	; (80065d0 <HAL_InitTick+0xec>)
 800655a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800655e:	4b1c      	ldr	r3, [pc, #112]	; (80065d0 <HAL_InitTick+0xec>)
 8006560:	2200      	movs	r2, #0
 8006562:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006564:	4b1a      	ldr	r3, [pc, #104]	; (80065d0 <HAL_InitTick+0xec>)
 8006566:	2200      	movs	r2, #0
 8006568:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800656a:	4b19      	ldr	r3, [pc, #100]	; (80065d0 <HAL_InitTick+0xec>)
 800656c:	2200      	movs	r2, #0
 800656e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8006570:	4817      	ldr	r0, [pc, #92]	; (80065d0 <HAL_InitTick+0xec>)
 8006572:	f002 fd01 	bl	8008f78 <HAL_TIM_Base_Init>
 8006576:	4603      	mov	r3, r0
 8006578:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800657c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006580:	2b00      	cmp	r3, #0
 8006582:	d11b      	bne.n	80065bc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8006584:	4812      	ldr	r0, [pc, #72]	; (80065d0 <HAL_InitTick+0xec>)
 8006586:	f002 fd47 	bl	8009018 <HAL_TIM_Base_Start_IT>
 800658a:	4603      	mov	r3, r0
 800658c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8006590:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006594:	2b00      	cmp	r3, #0
 8006596:	d111      	bne.n	80065bc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006598:	2036      	movs	r0, #54	; 0x36
 800659a:	f001 fa5c 	bl	8007a56 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2b0f      	cmp	r3, #15
 80065a2:	d808      	bhi.n	80065b6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80065a4:	2200      	movs	r2, #0
 80065a6:	6879      	ldr	r1, [r7, #4]
 80065a8:	2036      	movs	r0, #54	; 0x36
 80065aa:	f001 fa38 	bl	8007a1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80065ae:	4a0a      	ldr	r2, [pc, #40]	; (80065d8 <HAL_InitTick+0xf4>)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6013      	str	r3, [r2, #0]
 80065b4:	e002      	b.n	80065bc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80065bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3738      	adds	r7, #56	; 0x38
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	40023800 	.word	0x40023800
 80065cc:	431bde83 	.word	0x431bde83
 80065d0:	200029b4 	.word	0x200029b4
 80065d4:	40001000 	.word	0x40001000
 80065d8:	20000028 	.word	0x20000028

080065dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80065dc:	b480      	push	{r7}
 80065de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80065e0:	e7fe      	b.n	80065e0 <NMI_Handler+0x4>

080065e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80065e2:	b480      	push	{r7}
 80065e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80065e6:	e7fe      	b.n	80065e6 <HardFault_Handler+0x4>

080065e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80065e8:	b480      	push	{r7}
 80065ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80065ec:	e7fe      	b.n	80065ec <MemManage_Handler+0x4>

080065ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80065ee:	b480      	push	{r7}
 80065f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80065f2:	e7fe      	b.n	80065f2 <BusFault_Handler+0x4>

080065f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80065f4:	b480      	push	{r7}
 80065f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80065f8:	e7fe      	b.n	80065f8 <UsageFault_Handler+0x4>

080065fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80065fa:	b480      	push	{r7}
 80065fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80065fe:	bf00      	nop
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 800660c:	4802      	ldr	r0, [pc, #8]	; (8006618 <DMA1_Stream0_IRQHandler+0x10>)
 800660e:	f001 fbc9 	bl	8007da4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8006612:	bf00      	nop
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	20002e3c 	.word	0x20002e3c

0800661c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8006620:	4802      	ldr	r0, [pc, #8]	; (800662c <DMA1_Stream2_IRQHandler+0x10>)
 8006622:	f001 fbbf 	bl	8007da4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8006626:	bf00      	nop
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	20002ddc 	.word	0x20002ddc

08006630 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006634:	4802      	ldr	r0, [pc, #8]	; (8006640 <DMA1_Stream5_IRQHandler+0x10>)
 8006636:	f001 fbb5 	bl	8007da4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800663a:	bf00      	nop
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	20002efc 	.word	0x20002efc

08006644 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006648:	4802      	ldr	r0, [pc, #8]	; (8006654 <TIM1_CC_IRQHandler+0x10>)
 800664a:	f002 ffcb 	bl	80095e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800664e:	bf00      	nop
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	20002a00 	.word	0x20002a00

08006658 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800665c:	4802      	ldr	r0, [pc, #8]	; (8006668 <TIM2_IRQHandler+0x10>)
 800665e:	f002 ffc1 	bl	80095e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006662:	bf00      	nop
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	20002a48 	.word	0x20002a48

0800666c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006670:	4802      	ldr	r0, [pc, #8]	; (800667c <TIM3_IRQHandler+0x10>)
 8006672:	f002 ffb7 	bl	80095e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006676:	bf00      	nop
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	20002a90 	.word	0x20002a90

08006680 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8006684:	4802      	ldr	r0, [pc, #8]	; (8006690 <TIM4_IRQHandler+0x10>)
 8006686:	f002 ffad 	bl	80095e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800668a:	bf00      	nop
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	20002ad8 	.word	0x20002ad8

08006694 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006698:	4802      	ldr	r0, [pc, #8]	; (80066a4 <USART1_IRQHandler+0x10>)
 800669a:	f003 feef 	bl	800a47c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800669e:	bf00      	nop
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	20002d10 	.word	0x20002d10

080066a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80066ac:	4802      	ldr	r0, [pc, #8]	; (80066b8 <USART2_IRQHandler+0x10>)
 80066ae:	f003 fee5 	bl	800a47c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80066b2:	bf00      	nop
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	20002d54 	.word	0x20002d54

080066bc <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80066c0:	4802      	ldr	r0, [pc, #8]	; (80066cc <TIM8_CC_IRQHandler+0x10>)
 80066c2:	f002 ff8f 	bl	80095e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80066c6:	bf00      	nop
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	20002b68 	.word	0x20002b68

080066d0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 80066d4:	4802      	ldr	r0, [pc, #8]	; (80066e0 <DMA1_Stream7_IRQHandler+0x10>)
 80066d6:	f001 fb65 	bl	8007da4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80066da:	bf00      	nop
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	20002e9c 	.word	0x20002e9c

080066e4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80066e8:	4802      	ldr	r0, [pc, #8]	; (80066f4 <UART4_IRQHandler+0x10>)
 80066ea:	f003 fec7 	bl	800a47c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80066ee:	bf00      	nop
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	20002c88 	.word	0x20002c88

080066f8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80066fc:	4802      	ldr	r0, [pc, #8]	; (8006708 <UART5_IRQHandler+0x10>)
 80066fe:	f003 febd 	bl	800a47c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8006702:	bf00      	nop
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	20002ccc 	.word	0x20002ccc

0800670c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006710:	4802      	ldr	r0, [pc, #8]	; (800671c <TIM6_DAC_IRQHandler+0x10>)
 8006712:	f002 ff67 	bl	80095e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006716:	bf00      	nop
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	200029b4 	.word	0x200029b4

08006720 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006724:	4802      	ldr	r0, [pc, #8]	; (8006730 <TIM7_IRQHandler+0x10>)
 8006726:	f002 ff5d 	bl	80095e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800672a:	bf00      	nop
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	20002b20 	.word	0x20002b20

08006734 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006734:	b480      	push	{r7}
 8006736:	af00      	add	r7, sp, #0
  return 1;
 8006738:	2301      	movs	r3, #1
}
 800673a:	4618      	mov	r0, r3
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <_kill>:

int _kill(int pid, int sig)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800674e:	f006 ffab 	bl	800d6a8 <__errno>
 8006752:	4603      	mov	r3, r0
 8006754:	2216      	movs	r2, #22
 8006756:	601a      	str	r2, [r3, #0]
  return -1;
 8006758:	f04f 33ff 	mov.w	r3, #4294967295
}
 800675c:	4618      	mov	r0, r3
 800675e:	3708      	adds	r7, #8
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <_exit>:

void _exit (int status)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800676c:	f04f 31ff 	mov.w	r1, #4294967295
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f7ff ffe7 	bl	8006744 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006776:	e7fe      	b.n	8006776 <_exit+0x12>

08006778 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b086      	sub	sp, #24
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006780:	4a14      	ldr	r2, [pc, #80]	; (80067d4 <_sbrk+0x5c>)
 8006782:	4b15      	ldr	r3, [pc, #84]	; (80067d8 <_sbrk+0x60>)
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800678c:	4b13      	ldr	r3, [pc, #76]	; (80067dc <_sbrk+0x64>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d102      	bne.n	800679a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006794:	4b11      	ldr	r3, [pc, #68]	; (80067dc <_sbrk+0x64>)
 8006796:	4a12      	ldr	r2, [pc, #72]	; (80067e0 <_sbrk+0x68>)
 8006798:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800679a:	4b10      	ldr	r3, [pc, #64]	; (80067dc <_sbrk+0x64>)
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4413      	add	r3, r2
 80067a2:	693a      	ldr	r2, [r7, #16]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d207      	bcs.n	80067b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80067a8:	f006 ff7e 	bl	800d6a8 <__errno>
 80067ac:	4603      	mov	r3, r0
 80067ae:	220c      	movs	r2, #12
 80067b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80067b2:	f04f 33ff 	mov.w	r3, #4294967295
 80067b6:	e009      	b.n	80067cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80067b8:	4b08      	ldr	r3, [pc, #32]	; (80067dc <_sbrk+0x64>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80067be:	4b07      	ldr	r3, [pc, #28]	; (80067dc <_sbrk+0x64>)
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4413      	add	r3, r2
 80067c6:	4a05      	ldr	r2, [pc, #20]	; (80067dc <_sbrk+0x64>)
 80067c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80067ca:	68fb      	ldr	r3, [r7, #12]
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3718      	adds	r7, #24
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	20020000 	.word	0x20020000
 80067d8:	00000400 	.word	0x00000400
 80067dc:	200029fc 	.word	0x200029fc
 80067e0:	20006cc8 	.word	0x20006cc8

080067e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80067e4:	b480      	push	{r7}
 80067e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80067e8:	4b06      	ldr	r3, [pc, #24]	; (8006804 <SystemInit+0x20>)
 80067ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ee:	4a05      	ldr	r2, [pc, #20]	; (8006804 <SystemInit+0x20>)
 80067f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80067f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80067f8:	bf00      	nop
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	e000ed00 	.word	0xe000ed00

08006808 <MX_TIM1_Init>:
TIM_HandleTypeDef htim12;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b08c      	sub	sp, #48	; 0x30
 800680c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800680e:	f107 030c 	add.w	r3, r7, #12
 8006812:	2224      	movs	r2, #36	; 0x24
 8006814:	2100      	movs	r1, #0
 8006816:	4618      	mov	r0, r3
 8006818:	f006 ff80 	bl	800d71c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800681c:	1d3b      	adds	r3, r7, #4
 800681e:	2200      	movs	r2, #0
 8006820:	601a      	str	r2, [r3, #0]
 8006822:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006824:	4b22      	ldr	r3, [pc, #136]	; (80068b0 <MX_TIM1_Init+0xa8>)
 8006826:	4a23      	ldr	r2, [pc, #140]	; (80068b4 <MX_TIM1_Init+0xac>)
 8006828:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800682a:	4b21      	ldr	r3, [pc, #132]	; (80068b0 <MX_TIM1_Init+0xa8>)
 800682c:	2200      	movs	r2, #0
 800682e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006830:	4b1f      	ldr	r3, [pc, #124]	; (80068b0 <MX_TIM1_Init+0xa8>)
 8006832:	2200      	movs	r2, #0
 8006834:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8006836:	4b1e      	ldr	r3, [pc, #120]	; (80068b0 <MX_TIM1_Init+0xa8>)
 8006838:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800683c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800683e:	4b1c      	ldr	r3, [pc, #112]	; (80068b0 <MX_TIM1_Init+0xa8>)
 8006840:	2200      	movs	r2, #0
 8006842:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006844:	4b1a      	ldr	r3, [pc, #104]	; (80068b0 <MX_TIM1_Init+0xa8>)
 8006846:	2200      	movs	r2, #0
 8006848:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800684a:	4b19      	ldr	r3, [pc, #100]	; (80068b0 <MX_TIM1_Init+0xa8>)
 800684c:	2200      	movs	r2, #0
 800684e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8006850:	2301      	movs	r3, #1
 8006852:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006854:	2300      	movs	r3, #0
 8006856:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006858:	2301      	movs	r3, #1
 800685a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800685c:	2300      	movs	r3, #0
 800685e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006860:	2300      	movs	r3, #0
 8006862:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006864:	2300      	movs	r3, #0
 8006866:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006868:	2301      	movs	r3, #1
 800686a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800686c:	2300      	movs	r3, #0
 800686e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006870:	2300      	movs	r3, #0
 8006872:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8006874:	f107 030c 	add.w	r3, r7, #12
 8006878:	4619      	mov	r1, r3
 800687a:	480d      	ldr	r0, [pc, #52]	; (80068b0 <MX_TIM1_Init+0xa8>)
 800687c:	f002 fd5e 	bl	800933c <HAL_TIM_Encoder_Init>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d001      	beq.n	800688a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8006886:	f7fb fc05 	bl	8002094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800688a:	2300      	movs	r3, #0
 800688c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800688e:	2300      	movs	r3, #0
 8006890:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006892:	1d3b      	adds	r3, r7, #4
 8006894:	4619      	mov	r1, r3
 8006896:	4806      	ldr	r0, [pc, #24]	; (80068b0 <MX_TIM1_Init+0xa8>)
 8006898:	f003 fc64 	bl	800a164 <HAL_TIMEx_MasterConfigSynchronization>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d001      	beq.n	80068a6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80068a2:	f7fb fbf7 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80068a6:	bf00      	nop
 80068a8:	3730      	adds	r7, #48	; 0x30
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	20002a00 	.word	0x20002a00
 80068b4:	40010000 	.word	0x40010000

080068b8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b08c      	sub	sp, #48	; 0x30
 80068bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80068be:	f107 030c 	add.w	r3, r7, #12
 80068c2:	2224      	movs	r2, #36	; 0x24
 80068c4:	2100      	movs	r1, #0
 80068c6:	4618      	mov	r0, r3
 80068c8:	f006 ff28 	bl	800d71c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80068cc:	1d3b      	adds	r3, r7, #4
 80068ce:	2200      	movs	r2, #0
 80068d0:	601a      	str	r2, [r3, #0]
 80068d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80068d4:	4b21      	ldr	r3, [pc, #132]	; (800695c <MX_TIM2_Init+0xa4>)
 80068d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80068da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80068dc:	4b1f      	ldr	r3, [pc, #124]	; (800695c <MX_TIM2_Init+0xa4>)
 80068de:	2200      	movs	r2, #0
 80068e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80068e2:	4b1e      	ldr	r3, [pc, #120]	; (800695c <MX_TIM2_Init+0xa4>)
 80068e4:	2200      	movs	r2, #0
 80068e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80068e8:	4b1c      	ldr	r3, [pc, #112]	; (800695c <MX_TIM2_Init+0xa4>)
 80068ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80068ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80068f0:	4b1a      	ldr	r3, [pc, #104]	; (800695c <MX_TIM2_Init+0xa4>)
 80068f2:	2200      	movs	r2, #0
 80068f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80068f6:	4b19      	ldr	r3, [pc, #100]	; (800695c <MX_TIM2_Init+0xa4>)
 80068f8:	2200      	movs	r2, #0
 80068fa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80068fc:	2301      	movs	r3, #1
 80068fe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006900:	2300      	movs	r3, #0
 8006902:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006904:	2301      	movs	r3, #1
 8006906:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006908:	2300      	movs	r3, #0
 800690a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800690c:	2300      	movs	r3, #0
 800690e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006910:	2300      	movs	r3, #0
 8006912:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006914:	2301      	movs	r3, #1
 8006916:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006918:	2300      	movs	r3, #0
 800691a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800691c:	2300      	movs	r3, #0
 800691e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8006920:	f107 030c 	add.w	r3, r7, #12
 8006924:	4619      	mov	r1, r3
 8006926:	480d      	ldr	r0, [pc, #52]	; (800695c <MX_TIM2_Init+0xa4>)
 8006928:	f002 fd08 	bl	800933c <HAL_TIM_Encoder_Init>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d001      	beq.n	8006936 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8006932:	f7fb fbaf 	bl	8002094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006936:	2300      	movs	r3, #0
 8006938:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800693a:	2300      	movs	r3, #0
 800693c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800693e:	1d3b      	adds	r3, r7, #4
 8006940:	4619      	mov	r1, r3
 8006942:	4806      	ldr	r0, [pc, #24]	; (800695c <MX_TIM2_Init+0xa4>)
 8006944:	f003 fc0e 	bl	800a164 <HAL_TIMEx_MasterConfigSynchronization>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d001      	beq.n	8006952 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800694e:	f7fb fba1 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006952:	bf00      	nop
 8006954:	3730      	adds	r7, #48	; 0x30
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	20002a48 	.word	0x20002a48

08006960 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b08c      	sub	sp, #48	; 0x30
 8006964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006966:	f107 030c 	add.w	r3, r7, #12
 800696a:	2224      	movs	r2, #36	; 0x24
 800696c:	2100      	movs	r1, #0
 800696e:	4618      	mov	r0, r3
 8006970:	f006 fed4 	bl	800d71c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006974:	1d3b      	adds	r3, r7, #4
 8006976:	2200      	movs	r2, #0
 8006978:	601a      	str	r2, [r3, #0]
 800697a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800697c:	4b20      	ldr	r3, [pc, #128]	; (8006a00 <MX_TIM3_Init+0xa0>)
 800697e:	4a21      	ldr	r2, [pc, #132]	; (8006a04 <MX_TIM3_Init+0xa4>)
 8006980:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8006982:	4b1f      	ldr	r3, [pc, #124]	; (8006a00 <MX_TIM3_Init+0xa0>)
 8006984:	2200      	movs	r2, #0
 8006986:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006988:	4b1d      	ldr	r3, [pc, #116]	; (8006a00 <MX_TIM3_Init+0xa0>)
 800698a:	2200      	movs	r2, #0
 800698c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800698e:	4b1c      	ldr	r3, [pc, #112]	; (8006a00 <MX_TIM3_Init+0xa0>)
 8006990:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006994:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006996:	4b1a      	ldr	r3, [pc, #104]	; (8006a00 <MX_TIM3_Init+0xa0>)
 8006998:	2200      	movs	r2, #0
 800699a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800699c:	4b18      	ldr	r3, [pc, #96]	; (8006a00 <MX_TIM3_Init+0xa0>)
 800699e:	2200      	movs	r2, #0
 80069a0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80069a2:	2301      	movs	r3, #1
 80069a4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80069a6:	2300      	movs	r3, #0
 80069a8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80069aa:	2301      	movs	r3, #1
 80069ac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80069ae:	2300      	movs	r3, #0
 80069b0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80069b2:	2300      	movs	r3, #0
 80069b4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80069b6:	2300      	movs	r3, #0
 80069b8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80069ba:	2301      	movs	r3, #1
 80069bc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80069be:	2300      	movs	r3, #0
 80069c0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80069c2:	2300      	movs	r3, #0
 80069c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80069c6:	f107 030c 	add.w	r3, r7, #12
 80069ca:	4619      	mov	r1, r3
 80069cc:	480c      	ldr	r0, [pc, #48]	; (8006a00 <MX_TIM3_Init+0xa0>)
 80069ce:	f002 fcb5 	bl	800933c <HAL_TIM_Encoder_Init>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d001      	beq.n	80069dc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80069d8:	f7fb fb5c 	bl	8002094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80069dc:	2300      	movs	r3, #0
 80069de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80069e0:	2300      	movs	r3, #0
 80069e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80069e4:	1d3b      	adds	r3, r7, #4
 80069e6:	4619      	mov	r1, r3
 80069e8:	4805      	ldr	r0, [pc, #20]	; (8006a00 <MX_TIM3_Init+0xa0>)
 80069ea:	f003 fbbb 	bl	800a164 <HAL_TIMEx_MasterConfigSynchronization>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d001      	beq.n	80069f8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80069f4:	f7fb fb4e 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80069f8:	bf00      	nop
 80069fa:	3730      	adds	r7, #48	; 0x30
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	20002a90 	.word	0x20002a90
 8006a04:	40000400 	.word	0x40000400

08006a08 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b08c      	sub	sp, #48	; 0x30
 8006a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006a0e:	f107 030c 	add.w	r3, r7, #12
 8006a12:	2224      	movs	r2, #36	; 0x24
 8006a14:	2100      	movs	r1, #0
 8006a16:	4618      	mov	r0, r3
 8006a18:	f006 fe80 	bl	800d71c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006a1c:	1d3b      	adds	r3, r7, #4
 8006a1e:	2200      	movs	r2, #0
 8006a20:	601a      	str	r2, [r3, #0]
 8006a22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8006a24:	4b20      	ldr	r3, [pc, #128]	; (8006aa8 <MX_TIM4_Init+0xa0>)
 8006a26:	4a21      	ldr	r2, [pc, #132]	; (8006aac <MX_TIM4_Init+0xa4>)
 8006a28:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8006a2a:	4b1f      	ldr	r3, [pc, #124]	; (8006aa8 <MX_TIM4_Init+0xa0>)
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a30:	4b1d      	ldr	r3, [pc, #116]	; (8006aa8 <MX_TIM4_Init+0xa0>)
 8006a32:	2200      	movs	r2, #0
 8006a34:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8006a36:	4b1c      	ldr	r3, [pc, #112]	; (8006aa8 <MX_TIM4_Init+0xa0>)
 8006a38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a3c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006a3e:	4b1a      	ldr	r3, [pc, #104]	; (8006aa8 <MX_TIM4_Init+0xa0>)
 8006a40:	2200      	movs	r2, #0
 8006a42:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006a44:	4b18      	ldr	r3, [pc, #96]	; (8006aa8 <MX_TIM4_Init+0xa0>)
 8006a46:	2200      	movs	r2, #0
 8006a48:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006a52:	2301      	movs	r3, #1
 8006a54:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006a56:	2300      	movs	r3, #0
 8006a58:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006a62:	2301      	movs	r3, #1
 8006a64:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006a66:	2300      	movs	r3, #0
 8006a68:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8006a6e:	f107 030c 	add.w	r3, r7, #12
 8006a72:	4619      	mov	r1, r3
 8006a74:	480c      	ldr	r0, [pc, #48]	; (8006aa8 <MX_TIM4_Init+0xa0>)
 8006a76:	f002 fc61 	bl	800933c <HAL_TIM_Encoder_Init>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d001      	beq.n	8006a84 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8006a80:	f7fb fb08 	bl	8002094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006a84:	2300      	movs	r3, #0
 8006a86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006a8c:	1d3b      	adds	r3, r7, #4
 8006a8e:	4619      	mov	r1, r3
 8006a90:	4805      	ldr	r0, [pc, #20]	; (8006aa8 <MX_TIM4_Init+0xa0>)
 8006a92:	f003 fb67 	bl	800a164 <HAL_TIMEx_MasterConfigSynchronization>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d001      	beq.n	8006aa0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8006a9c:	f7fb fafa 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8006aa0:	bf00      	nop
 8006aa2:	3730      	adds	r7, #48	; 0x30
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	20002ad8 	.word	0x20002ad8
 8006aac:	40000800 	.word	0x40000800

08006ab0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006ab6:	463b      	mov	r3, r7
 8006ab8:	2200      	movs	r2, #0
 8006aba:	601a      	str	r2, [r3, #0]
 8006abc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8006abe:	4b15      	ldr	r3, [pc, #84]	; (8006b14 <MX_TIM7_Init+0x64>)
 8006ac0:	4a15      	ldr	r2, [pc, #84]	; (8006b18 <MX_TIM7_Init+0x68>)
 8006ac2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 4000-1;
 8006ac4:	4b13      	ldr	r3, [pc, #76]	; (8006b14 <MX_TIM7_Init+0x64>)
 8006ac6:	f640 729f 	movw	r2, #3999	; 0xf9f
 8006aca:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006acc:	4b11      	ldr	r3, [pc, #68]	; (8006b14 <MX_TIM7_Init+0x64>)
 8006ace:	2200      	movs	r2, #0
 8006ad0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 200-1;
 8006ad2:	4b10      	ldr	r3, [pc, #64]	; (8006b14 <MX_TIM7_Init+0x64>)
 8006ad4:	22c7      	movs	r2, #199	; 0xc7
 8006ad6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006ad8:	4b0e      	ldr	r3, [pc, #56]	; (8006b14 <MX_TIM7_Init+0x64>)
 8006ada:	2200      	movs	r2, #0
 8006adc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8006ade:	480d      	ldr	r0, [pc, #52]	; (8006b14 <MX_TIM7_Init+0x64>)
 8006ae0:	f002 fa4a 	bl	8008f78 <HAL_TIM_Base_Init>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d001      	beq.n	8006aee <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8006aea:	f7fb fad3 	bl	8002094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006aee:	2300      	movs	r3, #0
 8006af0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006af2:	2300      	movs	r3, #0
 8006af4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006af6:	463b      	mov	r3, r7
 8006af8:	4619      	mov	r1, r3
 8006afa:	4806      	ldr	r0, [pc, #24]	; (8006b14 <MX_TIM7_Init+0x64>)
 8006afc:	f003 fb32 	bl	800a164 <HAL_TIMEx_MasterConfigSynchronization>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d001      	beq.n	8006b0a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8006b06:	f7fb fac5 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8006b0a:	bf00      	nop
 8006b0c:	3708      	adds	r7, #8
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	20002b20 	.word	0x20002b20
 8006b18:	40001400 	.word	0x40001400

08006b1c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b08c      	sub	sp, #48	; 0x30
 8006b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006b22:	f107 030c 	add.w	r3, r7, #12
 8006b26:	2224      	movs	r2, #36	; 0x24
 8006b28:	2100      	movs	r1, #0
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f006 fdf6 	bl	800d71c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006b30:	1d3b      	adds	r3, r7, #4
 8006b32:	2200      	movs	r2, #0
 8006b34:	601a      	str	r2, [r3, #0]
 8006b36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8006b38:	4b22      	ldr	r3, [pc, #136]	; (8006bc4 <MX_TIM8_Init+0xa8>)
 8006b3a:	4a23      	ldr	r2, [pc, #140]	; (8006bc8 <MX_TIM8_Init+0xac>)
 8006b3c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8006b3e:	4b21      	ldr	r3, [pc, #132]	; (8006bc4 <MX_TIM8_Init+0xa8>)
 8006b40:	2200      	movs	r2, #0
 8006b42:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b44:	4b1f      	ldr	r3, [pc, #124]	; (8006bc4 <MX_TIM8_Init+0xa8>)
 8006b46:	2200      	movs	r2, #0
 8006b48:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8006b4a:	4b1e      	ldr	r3, [pc, #120]	; (8006bc4 <MX_TIM8_Init+0xa8>)
 8006b4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006b50:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006b52:	4b1c      	ldr	r3, [pc, #112]	; (8006bc4 <MX_TIM8_Init+0xa8>)
 8006b54:	2200      	movs	r2, #0
 8006b56:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006b58:	4b1a      	ldr	r3, [pc, #104]	; (8006bc4 <MX_TIM8_Init+0xa8>)
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006b5e:	4b19      	ldr	r3, [pc, #100]	; (8006bc4 <MX_TIM8_Init+0xa8>)
 8006b60:	2200      	movs	r2, #0
 8006b62:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8006b64:	2301      	movs	r3, #1
 8006b66:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006b70:	2300      	movs	r3, #0
 8006b72:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006b74:	2300      	movs	r3, #0
 8006b76:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006b80:	2300      	movs	r3, #0
 8006b82:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006b84:	2300      	movs	r3, #0
 8006b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8006b88:	f107 030c 	add.w	r3, r7, #12
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	480d      	ldr	r0, [pc, #52]	; (8006bc4 <MX_TIM8_Init+0xa8>)
 8006b90:	f002 fbd4 	bl	800933c <HAL_TIM_Encoder_Init>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d001      	beq.n	8006b9e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8006b9a:	f7fb fa7b 	bl	8002094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8006ba6:	1d3b      	adds	r3, r7, #4
 8006ba8:	4619      	mov	r1, r3
 8006baa:	4806      	ldr	r0, [pc, #24]	; (8006bc4 <MX_TIM8_Init+0xa8>)
 8006bac:	f003 fada 	bl	800a164 <HAL_TIMEx_MasterConfigSynchronization>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d001      	beq.n	8006bba <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8006bb6:	f7fb fa6d 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8006bba:	bf00      	nop
 8006bbc:	3730      	adds	r7, #48	; 0x30
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	20002b68 	.word	0x20002b68
 8006bc8:	40010400 	.word	0x40010400

08006bcc <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b08c      	sub	sp, #48	; 0x30
 8006bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006bd2:	f107 0320 	add.w	r3, r7, #32
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	601a      	str	r2, [r3, #0]
 8006bda:	605a      	str	r2, [r3, #4]
 8006bdc:	609a      	str	r2, [r3, #8]
 8006bde:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006be0:	1d3b      	adds	r3, r7, #4
 8006be2:	2200      	movs	r2, #0
 8006be4:	601a      	str	r2, [r3, #0]
 8006be6:	605a      	str	r2, [r3, #4]
 8006be8:	609a      	str	r2, [r3, #8]
 8006bea:	60da      	str	r2, [r3, #12]
 8006bec:	611a      	str	r2, [r3, #16]
 8006bee:	615a      	str	r2, [r3, #20]
 8006bf0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8006bf2:	4b2a      	ldr	r3, [pc, #168]	; (8006c9c <MX_TIM9_Init+0xd0>)
 8006bf4:	4a2a      	ldr	r2, [pc, #168]	; (8006ca0 <MX_TIM9_Init+0xd4>)
 8006bf6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 84-1;
 8006bf8:	4b28      	ldr	r3, [pc, #160]	; (8006c9c <MX_TIM9_Init+0xd0>)
 8006bfa:	2253      	movs	r2, #83	; 0x53
 8006bfc:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006bfe:	4b27      	ldr	r3, [pc, #156]	; (8006c9c <MX_TIM9_Init+0xd0>)
 8006c00:	2200      	movs	r2, #0
 8006c02:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 200-1;
 8006c04:	4b25      	ldr	r3, [pc, #148]	; (8006c9c <MX_TIM9_Init+0xd0>)
 8006c06:	22c7      	movs	r2, #199	; 0xc7
 8006c08:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006c0a:	4b24      	ldr	r3, [pc, #144]	; (8006c9c <MX_TIM9_Init+0xd0>)
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006c10:	4b22      	ldr	r3, [pc, #136]	; (8006c9c <MX_TIM9_Init+0xd0>)
 8006c12:	2200      	movs	r2, #0
 8006c14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8006c16:	4821      	ldr	r0, [pc, #132]	; (8006c9c <MX_TIM9_Init+0xd0>)
 8006c18:	f002 f9ae 	bl	8008f78 <HAL_TIM_Base_Init>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d001      	beq.n	8006c26 <MX_TIM9_Init+0x5a>
  {
    Error_Handler();
 8006c22:	f7fb fa37 	bl	8002094 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006c26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c2a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8006c2c:	f107 0320 	add.w	r3, r7, #32
 8006c30:	4619      	mov	r1, r3
 8006c32:	481a      	ldr	r0, [pc, #104]	; (8006c9c <MX_TIM9_Init+0xd0>)
 8006c34:	f002 fea0 	bl	8009978 <HAL_TIM_ConfigClockSource>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d001      	beq.n	8006c42 <MX_TIM9_Init+0x76>
  {
    Error_Handler();
 8006c3e:	f7fb fa29 	bl	8002094 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8006c42:	4816      	ldr	r0, [pc, #88]	; (8006c9c <MX_TIM9_Init+0xd0>)
 8006c44:	f002 fa58 	bl	80090f8 <HAL_TIM_PWM_Init>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d001      	beq.n	8006c52 <MX_TIM9_Init+0x86>
  {
    Error_Handler();
 8006c4e:	f7fb fa21 	bl	8002094 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006c52:	2360      	movs	r3, #96	; 0x60
 8006c54:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006c56:	2300      	movs	r3, #0
 8006c58:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006c62:	1d3b      	adds	r3, r7, #4
 8006c64:	2200      	movs	r2, #0
 8006c66:	4619      	mov	r1, r3
 8006c68:	480c      	ldr	r0, [pc, #48]	; (8006c9c <MX_TIM9_Init+0xd0>)
 8006c6a:	f002 fdc3 	bl	80097f4 <HAL_TIM_PWM_ConfigChannel>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d001      	beq.n	8006c78 <MX_TIM9_Init+0xac>
  {
    Error_Handler();
 8006c74:	f7fb fa0e 	bl	8002094 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006c78:	1d3b      	adds	r3, r7, #4
 8006c7a:	2204      	movs	r2, #4
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	4807      	ldr	r0, [pc, #28]	; (8006c9c <MX_TIM9_Init+0xd0>)
 8006c80:	f002 fdb8 	bl	80097f4 <HAL_TIM_PWM_ConfigChannel>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d001      	beq.n	8006c8e <MX_TIM9_Init+0xc2>
  {
    Error_Handler();
 8006c8a:	f7fb fa03 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8006c8e:	4803      	ldr	r0, [pc, #12]	; (8006c9c <MX_TIM9_Init+0xd0>)
 8006c90:	f000 fa66 	bl	8007160 <HAL_TIM_MspPostInit>

}
 8006c94:	bf00      	nop
 8006c96:	3730      	adds	r7, #48	; 0x30
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	20002bb0 	.word	0x20002bb0
 8006ca0:	40014000 	.word	0x40014000

08006ca4 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b08c      	sub	sp, #48	; 0x30
 8006ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006caa:	f107 0320 	add.w	r3, r7, #32
 8006cae:	2200      	movs	r2, #0
 8006cb0:	601a      	str	r2, [r3, #0]
 8006cb2:	605a      	str	r2, [r3, #4]
 8006cb4:	609a      	str	r2, [r3, #8]
 8006cb6:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006cb8:	1d3b      	adds	r3, r7, #4
 8006cba:	2200      	movs	r2, #0
 8006cbc:	601a      	str	r2, [r3, #0]
 8006cbe:	605a      	str	r2, [r3, #4]
 8006cc0:	609a      	str	r2, [r3, #8]
 8006cc2:	60da      	str	r2, [r3, #12]
 8006cc4:	611a      	str	r2, [r3, #16]
 8006cc6:	615a      	str	r2, [r3, #20]
 8006cc8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8006cca:	4b2a      	ldr	r3, [pc, #168]	; (8006d74 <MX_TIM12_Init+0xd0>)
 8006ccc:	4a2a      	ldr	r2, [pc, #168]	; (8006d78 <MX_TIM12_Init+0xd4>)
 8006cce:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 168-1;
 8006cd0:	4b28      	ldr	r3, [pc, #160]	; (8006d74 <MX_TIM12_Init+0xd0>)
 8006cd2:	22a7      	movs	r2, #167	; 0xa7
 8006cd4:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006cd6:	4b27      	ldr	r3, [pc, #156]	; (8006d74 <MX_TIM12_Init+0xd0>)
 8006cd8:	2200      	movs	r2, #0
 8006cda:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 200-1;
 8006cdc:	4b25      	ldr	r3, [pc, #148]	; (8006d74 <MX_TIM12_Init+0xd0>)
 8006cde:	22c7      	movs	r2, #199	; 0xc7
 8006ce0:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006ce2:	4b24      	ldr	r3, [pc, #144]	; (8006d74 <MX_TIM12_Init+0xd0>)
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006ce8:	4b22      	ldr	r3, [pc, #136]	; (8006d74 <MX_TIM12_Init+0xd0>)
 8006cea:	2200      	movs	r2, #0
 8006cec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8006cee:	4821      	ldr	r0, [pc, #132]	; (8006d74 <MX_TIM12_Init+0xd0>)
 8006cf0:	f002 f942 	bl	8008f78 <HAL_TIM_Base_Init>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d001      	beq.n	8006cfe <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 8006cfa:	f7fb f9cb 	bl	8002094 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006cfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d02:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8006d04:	f107 0320 	add.w	r3, r7, #32
 8006d08:	4619      	mov	r1, r3
 8006d0a:	481a      	ldr	r0, [pc, #104]	; (8006d74 <MX_TIM12_Init+0xd0>)
 8006d0c:	f002 fe34 	bl	8009978 <HAL_TIM_ConfigClockSource>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d001      	beq.n	8006d1a <MX_TIM12_Init+0x76>
  {
    Error_Handler();
 8006d16:	f7fb f9bd 	bl	8002094 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8006d1a:	4816      	ldr	r0, [pc, #88]	; (8006d74 <MX_TIM12_Init+0xd0>)
 8006d1c:	f002 f9ec 	bl	80090f8 <HAL_TIM_PWM_Init>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d001      	beq.n	8006d2a <MX_TIM12_Init+0x86>
  {
    Error_Handler();
 8006d26:	f7fb f9b5 	bl	8002094 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006d2a:	2360      	movs	r3, #96	; 0x60
 8006d2c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006d32:	2300      	movs	r3, #0
 8006d34:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006d36:	2300      	movs	r3, #0
 8006d38:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006d3a:	1d3b      	adds	r3, r7, #4
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	4619      	mov	r1, r3
 8006d40:	480c      	ldr	r0, [pc, #48]	; (8006d74 <MX_TIM12_Init+0xd0>)
 8006d42:	f002 fd57 	bl	80097f4 <HAL_TIM_PWM_ConfigChannel>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d001      	beq.n	8006d50 <MX_TIM12_Init+0xac>
  {
    Error_Handler();
 8006d4c:	f7fb f9a2 	bl	8002094 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006d50:	1d3b      	adds	r3, r7, #4
 8006d52:	2204      	movs	r2, #4
 8006d54:	4619      	mov	r1, r3
 8006d56:	4807      	ldr	r0, [pc, #28]	; (8006d74 <MX_TIM12_Init+0xd0>)
 8006d58:	f002 fd4c 	bl	80097f4 <HAL_TIM_PWM_ConfigChannel>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d001      	beq.n	8006d66 <MX_TIM12_Init+0xc2>
  {
    Error_Handler();
 8006d62:	f7fb f997 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8006d66:	4803      	ldr	r0, [pc, #12]	; (8006d74 <MX_TIM12_Init+0xd0>)
 8006d68:	f000 f9fa 	bl	8007160 <HAL_TIM_MspPostInit>

}
 8006d6c:	bf00      	nop
 8006d6e:	3730      	adds	r7, #48	; 0x30
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	20002bf8 	.word	0x20002bf8
 8006d78:	40001800 	.word	0x40001800

08006d7c <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8006d80:	4b0d      	ldr	r3, [pc, #52]	; (8006db8 <MX_TIM13_Init+0x3c>)
 8006d82:	4a0e      	ldr	r2, [pc, #56]	; (8006dbc <MX_TIM13_Init+0x40>)
 8006d84:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 168-1;
 8006d86:	4b0c      	ldr	r3, [pc, #48]	; (8006db8 <MX_TIM13_Init+0x3c>)
 8006d88:	22a7      	movs	r2, #167	; 0xa7
 8006d8a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006d8c:	4b0a      	ldr	r3, [pc, #40]	; (8006db8 <MX_TIM13_Init+0x3c>)
 8006d8e:	2200      	movs	r2, #0
 8006d90:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 200-1;
 8006d92:	4b09      	ldr	r3, [pc, #36]	; (8006db8 <MX_TIM13_Init+0x3c>)
 8006d94:	22c7      	movs	r2, #199	; 0xc7
 8006d96:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006d98:	4b07      	ldr	r3, [pc, #28]	; (8006db8 <MX_TIM13_Init+0x3c>)
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006d9e:	4b06      	ldr	r3, [pc, #24]	; (8006db8 <MX_TIM13_Init+0x3c>)
 8006da0:	2200      	movs	r2, #0
 8006da2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8006da4:	4804      	ldr	r0, [pc, #16]	; (8006db8 <MX_TIM13_Init+0x3c>)
 8006da6:	f002 f8e7 	bl	8008f78 <HAL_TIM_Base_Init>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d001      	beq.n	8006db4 <MX_TIM13_Init+0x38>
  {
    Error_Handler();
 8006db0:	f7fb f970 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8006db4:	bf00      	nop
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	20002c40 	.word	0x20002c40
 8006dbc:	40001c00 	.word	0x40001c00

08006dc0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b092      	sub	sp, #72	; 0x48
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006dc8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006dcc:	2200      	movs	r2, #0
 8006dce:	601a      	str	r2, [r3, #0]
 8006dd0:	605a      	str	r2, [r3, #4]
 8006dd2:	609a      	str	r2, [r3, #8]
 8006dd4:	60da      	str	r2, [r3, #12]
 8006dd6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4aa1      	ldr	r2, [pc, #644]	; (8007064 <HAL_TIM_Encoder_MspInit+0x2a4>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d135      	bne.n	8006e4e <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006de2:	2300      	movs	r3, #0
 8006de4:	633b      	str	r3, [r7, #48]	; 0x30
 8006de6:	4ba0      	ldr	r3, [pc, #640]	; (8007068 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dea:	4a9f      	ldr	r2, [pc, #636]	; (8007068 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006dec:	f043 0301 	orr.w	r3, r3, #1
 8006df0:	6453      	str	r3, [r2, #68]	; 0x44
 8006df2:	4b9d      	ldr	r3, [pc, #628]	; (8007068 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006df6:	f003 0301 	and.w	r3, r3, #1
 8006dfa:	633b      	str	r3, [r7, #48]	; 0x30
 8006dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006dfe:	2300      	movs	r3, #0
 8006e00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e02:	4b99      	ldr	r3, [pc, #612]	; (8007068 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e06:	4a98      	ldr	r2, [pc, #608]	; (8007068 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006e08:	f043 0310 	orr.w	r3, r3, #16
 8006e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8006e0e:	4b96      	ldr	r3, [pc, #600]	; (8007068 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e12:	f003 0310 	and.w	r3, r3, #16
 8006e16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8006e1a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8006e1e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e20:	2302      	movs	r3, #2
 8006e22:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e24:	2300      	movs	r3, #0
 8006e26:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006e30:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006e34:	4619      	mov	r1, r3
 8006e36:	488d      	ldr	r0, [pc, #564]	; (800706c <HAL_TIM_Encoder_MspInit+0x2ac>)
 8006e38:	f001 fa1e 	bl	8008278 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	2105      	movs	r1, #5
 8006e40:	201b      	movs	r0, #27
 8006e42:	f000 fdec 	bl	8007a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8006e46:	201b      	movs	r0, #27
 8006e48:	f000 fe05 	bl	8007a56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8006e4c:	e106      	b.n	800705c <HAL_TIM_Encoder_MspInit+0x29c>
  else if(tim_encoderHandle->Instance==TIM2)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e56:	d153      	bne.n	8006f00 <HAL_TIM_Encoder_MspInit+0x140>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006e58:	2300      	movs	r3, #0
 8006e5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e5c:	4b82      	ldr	r3, [pc, #520]	; (8007068 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e60:	4a81      	ldr	r2, [pc, #516]	; (8007068 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006e62:	f043 0301 	orr.w	r3, r3, #1
 8006e66:	6413      	str	r3, [r2, #64]	; 0x40
 8006e68:	4b7f      	ldr	r3, [pc, #508]	; (8007068 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6c:	f003 0301 	and.w	r3, r3, #1
 8006e70:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e74:	2300      	movs	r3, #0
 8006e76:	627b      	str	r3, [r7, #36]	; 0x24
 8006e78:	4b7b      	ldr	r3, [pc, #492]	; (8007068 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e7c:	4a7a      	ldr	r2, [pc, #488]	; (8007068 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006e7e:	f043 0301 	orr.w	r3, r3, #1
 8006e82:	6313      	str	r3, [r2, #48]	; 0x30
 8006e84:	4b78      	ldr	r3, [pc, #480]	; (8007068 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e88:	f003 0301 	and.w	r3, r3, #1
 8006e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e90:	2300      	movs	r3, #0
 8006e92:	623b      	str	r3, [r7, #32]
 8006e94:	4b74      	ldr	r3, [pc, #464]	; (8007068 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e98:	4a73      	ldr	r2, [pc, #460]	; (8007068 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006e9a:	f043 0302 	orr.w	r3, r3, #2
 8006e9e:	6313      	str	r3, [r2, #48]	; 0x30
 8006ea0:	4b71      	ldr	r3, [pc, #452]	; (8007068 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea4:	f003 0302 	and.w	r3, r3, #2
 8006ea8:	623b      	str	r3, [r7, #32]
 8006eaa:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006eac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006eb0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006eb2:	2302      	movs	r3, #2
 8006eb4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ec2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	4869      	ldr	r0, [pc, #420]	; (8007070 <HAL_TIM_Encoder_MspInit+0x2b0>)
 8006eca:	f001 f9d5 	bl	8008278 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006ece:	2308      	movs	r3, #8
 8006ed0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ed2:	2302      	movs	r3, #2
 8006ed4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006eda:	2300      	movs	r3, #0
 8006edc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ee2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	4862      	ldr	r0, [pc, #392]	; (8007074 <HAL_TIM_Encoder_MspInit+0x2b4>)
 8006eea:	f001 f9c5 	bl	8008278 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8006eee:	2200      	movs	r2, #0
 8006ef0:	2105      	movs	r1, #5
 8006ef2:	201c      	movs	r0, #28
 8006ef4:	f000 fd93 	bl	8007a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006ef8:	201c      	movs	r0, #28
 8006efa:	f000 fdac 	bl	8007a56 <HAL_NVIC_EnableIRQ>
}
 8006efe:	e0ad      	b.n	800705c <HAL_TIM_Encoder_MspInit+0x29c>
  else if(tim_encoderHandle->Instance==TIM3)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a5c      	ldr	r2, [pc, #368]	; (8007078 <HAL_TIM_Encoder_MspInit+0x2b8>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d134      	bne.n	8006f74 <HAL_TIM_Encoder_MspInit+0x1b4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	61fb      	str	r3, [r7, #28]
 8006f0e:	4b56      	ldr	r3, [pc, #344]	; (8007068 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f12:	4a55      	ldr	r2, [pc, #340]	; (8007068 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006f14:	f043 0302 	orr.w	r3, r3, #2
 8006f18:	6413      	str	r3, [r2, #64]	; 0x40
 8006f1a:	4b53      	ldr	r3, [pc, #332]	; (8007068 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1e:	f003 0302 	and.w	r3, r3, #2
 8006f22:	61fb      	str	r3, [r7, #28]
 8006f24:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f26:	2300      	movs	r3, #0
 8006f28:	61bb      	str	r3, [r7, #24]
 8006f2a:	4b4f      	ldr	r3, [pc, #316]	; (8007068 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f2e:	4a4e      	ldr	r2, [pc, #312]	; (8007068 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006f30:	f043 0301 	orr.w	r3, r3, #1
 8006f34:	6313      	str	r3, [r2, #48]	; 0x30
 8006f36:	4b4c      	ldr	r3, [pc, #304]	; (8007068 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f3a:	f003 0301 	and.w	r3, r3, #1
 8006f3e:	61bb      	str	r3, [r7, #24]
 8006f40:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006f42:	23c0      	movs	r3, #192	; 0xc0
 8006f44:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f46:	2302      	movs	r3, #2
 8006f48:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006f52:	2302      	movs	r3, #2
 8006f54:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f56:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	4844      	ldr	r0, [pc, #272]	; (8007070 <HAL_TIM_Encoder_MspInit+0x2b0>)
 8006f5e:	f001 f98b 	bl	8008278 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8006f62:	2200      	movs	r2, #0
 8006f64:	2105      	movs	r1, #5
 8006f66:	201d      	movs	r0, #29
 8006f68:	f000 fd59 	bl	8007a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006f6c:	201d      	movs	r0, #29
 8006f6e:	f000 fd72 	bl	8007a56 <HAL_NVIC_EnableIRQ>
}
 8006f72:	e073      	b.n	800705c <HAL_TIM_Encoder_MspInit+0x29c>
  else if(tim_encoderHandle->Instance==TIM4)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a40      	ldr	r2, [pc, #256]	; (800707c <HAL_TIM_Encoder_MspInit+0x2bc>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d135      	bne.n	8006fea <HAL_TIM_Encoder_MspInit+0x22a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006f7e:	2300      	movs	r3, #0
 8006f80:	617b      	str	r3, [r7, #20]
 8006f82:	4b39      	ldr	r3, [pc, #228]	; (8007068 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f86:	4a38      	ldr	r2, [pc, #224]	; (8007068 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006f88:	f043 0304 	orr.w	r3, r3, #4
 8006f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8006f8e:	4b36      	ldr	r3, [pc, #216]	; (8007068 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f92:	f003 0304 	and.w	r3, r3, #4
 8006f96:	617b      	str	r3, [r7, #20]
 8006f98:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	613b      	str	r3, [r7, #16]
 8006f9e:	4b32      	ldr	r3, [pc, #200]	; (8007068 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fa2:	4a31      	ldr	r2, [pc, #196]	; (8007068 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006fa4:	f043 0308 	orr.w	r3, r3, #8
 8006fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8006faa:	4b2f      	ldr	r3, [pc, #188]	; (8007068 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fae:	f003 0308 	and.w	r3, r3, #8
 8006fb2:	613b      	str	r3, [r7, #16]
 8006fb4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8006fb6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006fba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fbc:	2302      	movs	r3, #2
 8006fbe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006fc8:	2302      	movs	r3, #2
 8006fca:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006fcc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	482b      	ldr	r0, [pc, #172]	; (8007080 <HAL_TIM_Encoder_MspInit+0x2c0>)
 8006fd4:	f001 f950 	bl	8008278 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8006fd8:	2200      	movs	r2, #0
 8006fda:	2105      	movs	r1, #5
 8006fdc:	201e      	movs	r0, #30
 8006fde:	f000 fd1e 	bl	8007a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8006fe2:	201e      	movs	r0, #30
 8006fe4:	f000 fd37 	bl	8007a56 <HAL_NVIC_EnableIRQ>
}
 8006fe8:	e038      	b.n	800705c <HAL_TIM_Encoder_MspInit+0x29c>
  else if(tim_encoderHandle->Instance==TIM8)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a25      	ldr	r2, [pc, #148]	; (8007084 <HAL_TIM_Encoder_MspInit+0x2c4>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d133      	bne.n	800705c <HAL_TIM_Encoder_MspInit+0x29c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	60fb      	str	r3, [r7, #12]
 8006ff8:	4b1b      	ldr	r3, [pc, #108]	; (8007068 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ffc:	4a1a      	ldr	r2, [pc, #104]	; (8007068 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006ffe:	f043 0302 	orr.w	r3, r3, #2
 8007002:	6453      	str	r3, [r2, #68]	; 0x44
 8007004:	4b18      	ldr	r3, [pc, #96]	; (8007068 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8007006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007008:	f003 0302 	and.w	r3, r3, #2
 800700c:	60fb      	str	r3, [r7, #12]
 800700e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007010:	2300      	movs	r3, #0
 8007012:	60bb      	str	r3, [r7, #8]
 8007014:	4b14      	ldr	r3, [pc, #80]	; (8007068 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8007016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007018:	4a13      	ldr	r2, [pc, #76]	; (8007068 <HAL_TIM_Encoder_MspInit+0x2a8>)
 800701a:	f043 0304 	orr.w	r3, r3, #4
 800701e:	6313      	str	r3, [r2, #48]	; 0x30
 8007020:	4b11      	ldr	r3, [pc, #68]	; (8007068 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8007022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007024:	f003 0304 	and.w	r3, r3, #4
 8007028:	60bb      	str	r3, [r7, #8]
 800702a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800702c:	23c0      	movs	r3, #192	; 0xc0
 800702e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007030:	2302      	movs	r3, #2
 8007032:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007034:	2300      	movs	r3, #0
 8007036:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007038:	2300      	movs	r3, #0
 800703a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800703c:	2303      	movs	r3, #3
 800703e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007040:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007044:	4619      	mov	r1, r3
 8007046:	4810      	ldr	r0, [pc, #64]	; (8007088 <HAL_TIM_Encoder_MspInit+0x2c8>)
 8007048:	f001 f916 	bl	8008278 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 800704c:	2200      	movs	r2, #0
 800704e:	2105      	movs	r1, #5
 8007050:	202e      	movs	r0, #46	; 0x2e
 8007052:	f000 fce4 	bl	8007a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8007056:	202e      	movs	r0, #46	; 0x2e
 8007058:	f000 fcfd 	bl	8007a56 <HAL_NVIC_EnableIRQ>
}
 800705c:	bf00      	nop
 800705e:	3748      	adds	r7, #72	; 0x48
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	40010000 	.word	0x40010000
 8007068:	40023800 	.word	0x40023800
 800706c:	40021000 	.word	0x40021000
 8007070:	40020000 	.word	0x40020000
 8007074:	40020400 	.word	0x40020400
 8007078:	40000400 	.word	0x40000400
 800707c:	40000800 	.word	0x40000800
 8007080:	40020c00 	.word	0x40020c00
 8007084:	40010400 	.word	0x40010400
 8007088:	40020800 	.word	0x40020800

0800708c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b086      	sub	sp, #24
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a2c      	ldr	r2, [pc, #176]	; (800714c <HAL_TIM_Base_MspInit+0xc0>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d116      	bne.n	80070cc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800709e:	2300      	movs	r3, #0
 80070a0:	617b      	str	r3, [r7, #20]
 80070a2:	4b2b      	ldr	r3, [pc, #172]	; (8007150 <HAL_TIM_Base_MspInit+0xc4>)
 80070a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a6:	4a2a      	ldr	r2, [pc, #168]	; (8007150 <HAL_TIM_Base_MspInit+0xc4>)
 80070a8:	f043 0320 	orr.w	r3, r3, #32
 80070ac:	6413      	str	r3, [r2, #64]	; 0x40
 80070ae:	4b28      	ldr	r3, [pc, #160]	; (8007150 <HAL_TIM_Base_MspInit+0xc4>)
 80070b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b2:	f003 0320 	and.w	r3, r3, #32
 80070b6:	617b      	str	r3, [r7, #20]
 80070b8:	697b      	ldr	r3, [r7, #20]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80070ba:	2200      	movs	r2, #0
 80070bc:	2105      	movs	r1, #5
 80070be:	2037      	movs	r0, #55	; 0x37
 80070c0:	f000 fcad 	bl	8007a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80070c4:	2037      	movs	r0, #55	; 0x37
 80070c6:	f000 fcc6 	bl	8007a56 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 80070ca:	e03a      	b.n	8007142 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM9)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a20      	ldr	r2, [pc, #128]	; (8007154 <HAL_TIM_Base_MspInit+0xc8>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d10e      	bne.n	80070f4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80070d6:	2300      	movs	r3, #0
 80070d8:	613b      	str	r3, [r7, #16]
 80070da:	4b1d      	ldr	r3, [pc, #116]	; (8007150 <HAL_TIM_Base_MspInit+0xc4>)
 80070dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070de:	4a1c      	ldr	r2, [pc, #112]	; (8007150 <HAL_TIM_Base_MspInit+0xc4>)
 80070e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070e4:	6453      	str	r3, [r2, #68]	; 0x44
 80070e6:	4b1a      	ldr	r3, [pc, #104]	; (8007150 <HAL_TIM_Base_MspInit+0xc4>)
 80070e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070ee:	613b      	str	r3, [r7, #16]
 80070f0:	693b      	ldr	r3, [r7, #16]
}
 80070f2:	e026      	b.n	8007142 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM12)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a17      	ldr	r2, [pc, #92]	; (8007158 <HAL_TIM_Base_MspInit+0xcc>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d10e      	bne.n	800711c <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80070fe:	2300      	movs	r3, #0
 8007100:	60fb      	str	r3, [r7, #12]
 8007102:	4b13      	ldr	r3, [pc, #76]	; (8007150 <HAL_TIM_Base_MspInit+0xc4>)
 8007104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007106:	4a12      	ldr	r2, [pc, #72]	; (8007150 <HAL_TIM_Base_MspInit+0xc4>)
 8007108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800710c:	6413      	str	r3, [r2, #64]	; 0x40
 800710e:	4b10      	ldr	r3, [pc, #64]	; (8007150 <HAL_TIM_Base_MspInit+0xc4>)
 8007110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007116:	60fb      	str	r3, [r7, #12]
 8007118:	68fb      	ldr	r3, [r7, #12]
}
 800711a:	e012      	b.n	8007142 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM13)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a0e      	ldr	r2, [pc, #56]	; (800715c <HAL_TIM_Base_MspInit+0xd0>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d10d      	bne.n	8007142 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8007126:	2300      	movs	r3, #0
 8007128:	60bb      	str	r3, [r7, #8]
 800712a:	4b09      	ldr	r3, [pc, #36]	; (8007150 <HAL_TIM_Base_MspInit+0xc4>)
 800712c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712e:	4a08      	ldr	r2, [pc, #32]	; (8007150 <HAL_TIM_Base_MspInit+0xc4>)
 8007130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007134:	6413      	str	r3, [r2, #64]	; 0x40
 8007136:	4b06      	ldr	r3, [pc, #24]	; (8007150 <HAL_TIM_Base_MspInit+0xc4>)
 8007138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800713e:	60bb      	str	r3, [r7, #8]
 8007140:	68bb      	ldr	r3, [r7, #8]
}
 8007142:	bf00      	nop
 8007144:	3718      	adds	r7, #24
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	40001400 	.word	0x40001400
 8007150:	40023800 	.word	0x40023800
 8007154:	40014000 	.word	0x40014000
 8007158:	40001800 	.word	0x40001800
 800715c:	40001c00 	.word	0x40001c00

08007160 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b08a      	sub	sp, #40	; 0x28
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007168:	f107 0314 	add.w	r3, r7, #20
 800716c:	2200      	movs	r2, #0
 800716e:	601a      	str	r2, [r3, #0]
 8007170:	605a      	str	r2, [r3, #4]
 8007172:	609a      	str	r2, [r3, #8]
 8007174:	60da      	str	r2, [r3, #12]
 8007176:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM9)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a24      	ldr	r2, [pc, #144]	; (8007210 <HAL_TIM_MspPostInit+0xb0>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d11e      	bne.n	80071c0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007182:	2300      	movs	r3, #0
 8007184:	613b      	str	r3, [r7, #16]
 8007186:	4b23      	ldr	r3, [pc, #140]	; (8007214 <HAL_TIM_MspPostInit+0xb4>)
 8007188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800718a:	4a22      	ldr	r2, [pc, #136]	; (8007214 <HAL_TIM_MspPostInit+0xb4>)
 800718c:	f043 0310 	orr.w	r3, r3, #16
 8007190:	6313      	str	r3, [r2, #48]	; 0x30
 8007192:	4b20      	ldr	r3, [pc, #128]	; (8007214 <HAL_TIM_MspPostInit+0xb4>)
 8007194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007196:	f003 0310 	and.w	r3, r3, #16
 800719a:	613b      	str	r3, [r7, #16]
 800719c:	693b      	ldr	r3, [r7, #16]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    PE6     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800719e:	2360      	movs	r3, #96	; 0x60
 80071a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071a2:	2302      	movs	r3, #2
 80071a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071a6:	2300      	movs	r3, #0
 80071a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071aa:	2300      	movs	r3, #0
 80071ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80071ae:	2303      	movs	r3, #3
 80071b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80071b2:	f107 0314 	add.w	r3, r7, #20
 80071b6:	4619      	mov	r1, r3
 80071b8:	4817      	ldr	r0, [pc, #92]	; (8007218 <HAL_TIM_MspPostInit+0xb8>)
 80071ba:	f001 f85d 	bl	8008278 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80071be:	e023      	b.n	8007208 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM12)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a15      	ldr	r2, [pc, #84]	; (800721c <HAL_TIM_MspPostInit+0xbc>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d11e      	bne.n	8007208 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80071ca:	2300      	movs	r3, #0
 80071cc:	60fb      	str	r3, [r7, #12]
 80071ce:	4b11      	ldr	r3, [pc, #68]	; (8007214 <HAL_TIM_MspPostInit+0xb4>)
 80071d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d2:	4a10      	ldr	r2, [pc, #64]	; (8007214 <HAL_TIM_MspPostInit+0xb4>)
 80071d4:	f043 0302 	orr.w	r3, r3, #2
 80071d8:	6313      	str	r3, [r2, #48]	; 0x30
 80071da:	4b0e      	ldr	r3, [pc, #56]	; (8007214 <HAL_TIM_MspPostInit+0xb4>)
 80071dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071de:	f003 0302 	and.w	r3, r3, #2
 80071e2:	60fb      	str	r3, [r7, #12]
 80071e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80071e6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80071ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071ec:	2302      	movs	r3, #2
 80071ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071f0:	2300      	movs	r3, #0
 80071f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071f4:	2300      	movs	r3, #0
 80071f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80071f8:	2309      	movs	r3, #9
 80071fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071fc:	f107 0314 	add.w	r3, r7, #20
 8007200:	4619      	mov	r1, r3
 8007202:	4807      	ldr	r0, [pc, #28]	; (8007220 <HAL_TIM_MspPostInit+0xc0>)
 8007204:	f001 f838 	bl	8008278 <HAL_GPIO_Init>
}
 8007208:	bf00      	nop
 800720a:	3728      	adds	r7, #40	; 0x28
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}
 8007210:	40014000 	.word	0x40014000
 8007214:	40023800 	.word	0x40023800
 8007218:	40021000 	.word	0x40021000
 800721c:	40001800 	.word	0x40001800
 8007220:	40020400 	.word	0x40020400

08007224 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8007224:	b480      	push	{r7}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	0a5a      	lsrs	r2, r3, #9
 8007234:	490f      	ldr	r1, [pc, #60]	; (8007274 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8007236:	fba1 1202 	umull	r1, r2, r1, r2
 800723a:	09d2      	lsrs	r2, r2, #7
 800723c:	490e      	ldr	r1, [pc, #56]	; (8007278 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800723e:	fb01 f202 	mul.w	r2, r1, r2
 8007242:	1a9b      	subs	r3, r3, r2
 8007244:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	0a5b      	lsrs	r3, r3, #9
 800724c:	4a09      	ldr	r2, [pc, #36]	; (8007274 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800724e:	fba2 2303 	umull	r2, r3, r2, r3
 8007252:	09db      	lsrs	r3, r3, #7
 8007254:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	441a      	add	r2, r3
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	601a      	str	r2, [r3, #0]
}
 8007268:	bf00      	nop
 800726a:	3714      	adds	r7, #20
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr
 8007274:	00044b83 	.word	0x00044b83
 8007278:	3b9aca00 	.word	0x3b9aca00

0800727c <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart5_tx;
DMA_HandleTypeDef hdma_usart2_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8007280:	4b11      	ldr	r3, [pc, #68]	; (80072c8 <MX_UART4_Init+0x4c>)
 8007282:	4a12      	ldr	r2, [pc, #72]	; (80072cc <MX_UART4_Init+0x50>)
 8007284:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8007286:	4b10      	ldr	r3, [pc, #64]	; (80072c8 <MX_UART4_Init+0x4c>)
 8007288:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800728c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800728e:	4b0e      	ldr	r3, [pc, #56]	; (80072c8 <MX_UART4_Init+0x4c>)
 8007290:	2200      	movs	r2, #0
 8007292:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8007294:	4b0c      	ldr	r3, [pc, #48]	; (80072c8 <MX_UART4_Init+0x4c>)
 8007296:	2200      	movs	r2, #0
 8007298:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800729a:	4b0b      	ldr	r3, [pc, #44]	; (80072c8 <MX_UART4_Init+0x4c>)
 800729c:	2200      	movs	r2, #0
 800729e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80072a0:	4b09      	ldr	r3, [pc, #36]	; (80072c8 <MX_UART4_Init+0x4c>)
 80072a2:	220c      	movs	r2, #12
 80072a4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80072a6:	4b08      	ldr	r3, [pc, #32]	; (80072c8 <MX_UART4_Init+0x4c>)
 80072a8:	2200      	movs	r2, #0
 80072aa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80072ac:	4b06      	ldr	r3, [pc, #24]	; (80072c8 <MX_UART4_Init+0x4c>)
 80072ae:	2200      	movs	r2, #0
 80072b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80072b2:	4805      	ldr	r0, [pc, #20]	; (80072c8 <MX_UART4_Init+0x4c>)
 80072b4:	f002 ffe6 	bl	800a284 <HAL_UART_Init>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d001      	beq.n	80072c2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80072be:	f7fa fee9 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80072c2:	bf00      	nop
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	20002c88 	.word	0x20002c88
 80072cc:	40004c00 	.word	0x40004c00

080072d0 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80072d4:	4b11      	ldr	r3, [pc, #68]	; (800731c <MX_UART5_Init+0x4c>)
 80072d6:	4a12      	ldr	r2, [pc, #72]	; (8007320 <MX_UART5_Init+0x50>)
 80072d8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 57600;
 80072da:	4b10      	ldr	r3, [pc, #64]	; (800731c <MX_UART5_Init+0x4c>)
 80072dc:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80072e0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80072e2:	4b0e      	ldr	r3, [pc, #56]	; (800731c <MX_UART5_Init+0x4c>)
 80072e4:	2200      	movs	r2, #0
 80072e6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80072e8:	4b0c      	ldr	r3, [pc, #48]	; (800731c <MX_UART5_Init+0x4c>)
 80072ea:	2200      	movs	r2, #0
 80072ec:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80072ee:	4b0b      	ldr	r3, [pc, #44]	; (800731c <MX_UART5_Init+0x4c>)
 80072f0:	2200      	movs	r2, #0
 80072f2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80072f4:	4b09      	ldr	r3, [pc, #36]	; (800731c <MX_UART5_Init+0x4c>)
 80072f6:	220c      	movs	r2, #12
 80072f8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80072fa:	4b08      	ldr	r3, [pc, #32]	; (800731c <MX_UART5_Init+0x4c>)
 80072fc:	2200      	movs	r2, #0
 80072fe:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8007300:	4b06      	ldr	r3, [pc, #24]	; (800731c <MX_UART5_Init+0x4c>)
 8007302:	2200      	movs	r2, #0
 8007304:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8007306:	4805      	ldr	r0, [pc, #20]	; (800731c <MX_UART5_Init+0x4c>)
 8007308:	f002 ffbc 	bl	800a284 <HAL_UART_Init>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d001      	beq.n	8007316 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8007312:	f7fa febf 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8007316:	bf00      	nop
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	20002ccc 	.word	0x20002ccc
 8007320:	40005000 	.word	0x40005000

08007324 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007328:	4b11      	ldr	r3, [pc, #68]	; (8007370 <MX_USART1_UART_Init+0x4c>)
 800732a:	4a12      	ldr	r2, [pc, #72]	; (8007374 <MX_USART1_UART_Init+0x50>)
 800732c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 800732e:	4b10      	ldr	r3, [pc, #64]	; (8007370 <MX_USART1_UART_Init+0x4c>)
 8007330:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8007334:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007336:	4b0e      	ldr	r3, [pc, #56]	; (8007370 <MX_USART1_UART_Init+0x4c>)
 8007338:	2200      	movs	r2, #0
 800733a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800733c:	4b0c      	ldr	r3, [pc, #48]	; (8007370 <MX_USART1_UART_Init+0x4c>)
 800733e:	2200      	movs	r2, #0
 8007340:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007342:	4b0b      	ldr	r3, [pc, #44]	; (8007370 <MX_USART1_UART_Init+0x4c>)
 8007344:	2200      	movs	r2, #0
 8007346:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007348:	4b09      	ldr	r3, [pc, #36]	; (8007370 <MX_USART1_UART_Init+0x4c>)
 800734a:	220c      	movs	r2, #12
 800734c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800734e:	4b08      	ldr	r3, [pc, #32]	; (8007370 <MX_USART1_UART_Init+0x4c>)
 8007350:	2200      	movs	r2, #0
 8007352:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007354:	4b06      	ldr	r3, [pc, #24]	; (8007370 <MX_USART1_UART_Init+0x4c>)
 8007356:	2200      	movs	r2, #0
 8007358:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800735a:	4805      	ldr	r0, [pc, #20]	; (8007370 <MX_USART1_UART_Init+0x4c>)
 800735c:	f002 ff92 	bl	800a284 <HAL_UART_Init>
 8007360:	4603      	mov	r3, r0
 8007362:	2b00      	cmp	r3, #0
 8007364:	d001      	beq.n	800736a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8007366:	f7fa fe95 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800736a:	bf00      	nop
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	20002d10 	.word	0x20002d10
 8007374:	40011000 	.word	0x40011000

08007378 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800737c:	4b11      	ldr	r3, [pc, #68]	; (80073c4 <MX_USART2_UART_Init+0x4c>)
 800737e:	4a12      	ldr	r2, [pc, #72]	; (80073c8 <MX_USART2_UART_Init+0x50>)
 8007380:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8007382:	4b10      	ldr	r3, [pc, #64]	; (80073c4 <MX_USART2_UART_Init+0x4c>)
 8007384:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007388:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800738a:	4b0e      	ldr	r3, [pc, #56]	; (80073c4 <MX_USART2_UART_Init+0x4c>)
 800738c:	2200      	movs	r2, #0
 800738e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007390:	4b0c      	ldr	r3, [pc, #48]	; (80073c4 <MX_USART2_UART_Init+0x4c>)
 8007392:	2200      	movs	r2, #0
 8007394:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007396:	4b0b      	ldr	r3, [pc, #44]	; (80073c4 <MX_USART2_UART_Init+0x4c>)
 8007398:	2200      	movs	r2, #0
 800739a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800739c:	4b09      	ldr	r3, [pc, #36]	; (80073c4 <MX_USART2_UART_Init+0x4c>)
 800739e:	220c      	movs	r2, #12
 80073a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80073a2:	4b08      	ldr	r3, [pc, #32]	; (80073c4 <MX_USART2_UART_Init+0x4c>)
 80073a4:	2200      	movs	r2, #0
 80073a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80073a8:	4b06      	ldr	r3, [pc, #24]	; (80073c4 <MX_USART2_UART_Init+0x4c>)
 80073aa:	2200      	movs	r2, #0
 80073ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80073ae:	4805      	ldr	r0, [pc, #20]	; (80073c4 <MX_USART2_UART_Init+0x4c>)
 80073b0:	f002 ff68 	bl	800a284 <HAL_UART_Init>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d001      	beq.n	80073be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80073ba:	f7fa fe6b 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80073be:	bf00      	nop
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	20002d54 	.word	0x20002d54
 80073c8:	40004400 	.word	0x40004400

080073cc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80073d0:	4b11      	ldr	r3, [pc, #68]	; (8007418 <MX_USART3_UART_Init+0x4c>)
 80073d2:	4a12      	ldr	r2, [pc, #72]	; (800741c <MX_USART3_UART_Init+0x50>)
 80073d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80073d6:	4b10      	ldr	r3, [pc, #64]	; (8007418 <MX_USART3_UART_Init+0x4c>)
 80073d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80073dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80073de:	4b0e      	ldr	r3, [pc, #56]	; (8007418 <MX_USART3_UART_Init+0x4c>)
 80073e0:	2200      	movs	r2, #0
 80073e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80073e4:	4b0c      	ldr	r3, [pc, #48]	; (8007418 <MX_USART3_UART_Init+0x4c>)
 80073e6:	2200      	movs	r2, #0
 80073e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80073ea:	4b0b      	ldr	r3, [pc, #44]	; (8007418 <MX_USART3_UART_Init+0x4c>)
 80073ec:	2200      	movs	r2, #0
 80073ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80073f0:	4b09      	ldr	r3, [pc, #36]	; (8007418 <MX_USART3_UART_Init+0x4c>)
 80073f2:	220c      	movs	r2, #12
 80073f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80073f6:	4b08      	ldr	r3, [pc, #32]	; (8007418 <MX_USART3_UART_Init+0x4c>)
 80073f8:	2200      	movs	r2, #0
 80073fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80073fc:	4b06      	ldr	r3, [pc, #24]	; (8007418 <MX_USART3_UART_Init+0x4c>)
 80073fe:	2200      	movs	r2, #0
 8007400:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8007402:	4805      	ldr	r0, [pc, #20]	; (8007418 <MX_USART3_UART_Init+0x4c>)
 8007404:	f002 ff3e 	bl	800a284 <HAL_UART_Init>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d001      	beq.n	8007412 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800740e:	f7fa fe41 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8007412:	bf00      	nop
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	20002d98 	.word	0x20002d98
 800741c:	40004800 	.word	0x40004800

08007420 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b092      	sub	sp, #72	; 0x48
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007428:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800742c:	2200      	movs	r2, #0
 800742e:	601a      	str	r2, [r3, #0]
 8007430:	605a      	str	r2, [r3, #4]
 8007432:	609a      	str	r2, [r3, #8]
 8007434:	60da      	str	r2, [r3, #12]
 8007436:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a8e      	ldr	r2, [pc, #568]	; (8007678 <HAL_UART_MspInit+0x258>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d163      	bne.n	800750a <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8007442:	2300      	movs	r3, #0
 8007444:	633b      	str	r3, [r7, #48]	; 0x30
 8007446:	4b8d      	ldr	r3, [pc, #564]	; (800767c <HAL_UART_MspInit+0x25c>)
 8007448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744a:	4a8c      	ldr	r2, [pc, #560]	; (800767c <HAL_UART_MspInit+0x25c>)
 800744c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007450:	6413      	str	r3, [r2, #64]	; 0x40
 8007452:	4b8a      	ldr	r3, [pc, #552]	; (800767c <HAL_UART_MspInit+0x25c>)
 8007454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007456:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800745a:	633b      	str	r3, [r7, #48]	; 0x30
 800745c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800745e:	2300      	movs	r3, #0
 8007460:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007462:	4b86      	ldr	r3, [pc, #536]	; (800767c <HAL_UART_MspInit+0x25c>)
 8007464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007466:	4a85      	ldr	r2, [pc, #532]	; (800767c <HAL_UART_MspInit+0x25c>)
 8007468:	f043 0304 	orr.w	r3, r3, #4
 800746c:	6313      	str	r3, [r2, #48]	; 0x30
 800746e:	4b83      	ldr	r3, [pc, #524]	; (800767c <HAL_UART_MspInit+0x25c>)
 8007470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007472:	f003 0304 	and.w	r3, r3, #4
 8007476:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800747a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800747e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007480:	2302      	movs	r3, #2
 8007482:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007484:	2300      	movs	r3, #0
 8007486:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007488:	2303      	movs	r3, #3
 800748a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800748c:	2308      	movs	r3, #8
 800748e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007490:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007494:	4619      	mov	r1, r3
 8007496:	487a      	ldr	r0, [pc, #488]	; (8007680 <HAL_UART_MspInit+0x260>)
 8007498:	f000 feee 	bl	8008278 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800749c:	4b79      	ldr	r3, [pc, #484]	; (8007684 <HAL_UART_MspInit+0x264>)
 800749e:	4a7a      	ldr	r2, [pc, #488]	; (8007688 <HAL_UART_MspInit+0x268>)
 80074a0:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80074a2:	4b78      	ldr	r3, [pc, #480]	; (8007684 <HAL_UART_MspInit+0x264>)
 80074a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80074a8:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80074aa:	4b76      	ldr	r3, [pc, #472]	; (8007684 <HAL_UART_MspInit+0x264>)
 80074ac:	2200      	movs	r2, #0
 80074ae:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80074b0:	4b74      	ldr	r3, [pc, #464]	; (8007684 <HAL_UART_MspInit+0x264>)
 80074b2:	2200      	movs	r2, #0
 80074b4:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80074b6:	4b73      	ldr	r3, [pc, #460]	; (8007684 <HAL_UART_MspInit+0x264>)
 80074b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80074bc:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80074be:	4b71      	ldr	r3, [pc, #452]	; (8007684 <HAL_UART_MspInit+0x264>)
 80074c0:	2200      	movs	r2, #0
 80074c2:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80074c4:	4b6f      	ldr	r3, [pc, #444]	; (8007684 <HAL_UART_MspInit+0x264>)
 80074c6:	2200      	movs	r2, #0
 80074c8:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80074ca:	4b6e      	ldr	r3, [pc, #440]	; (8007684 <HAL_UART_MspInit+0x264>)
 80074cc:	2200      	movs	r2, #0
 80074ce:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80074d0:	4b6c      	ldr	r3, [pc, #432]	; (8007684 <HAL_UART_MspInit+0x264>)
 80074d2:	2200      	movs	r2, #0
 80074d4:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80074d6:	4b6b      	ldr	r3, [pc, #428]	; (8007684 <HAL_UART_MspInit+0x264>)
 80074d8:	2200      	movs	r2, #0
 80074da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80074dc:	4869      	ldr	r0, [pc, #420]	; (8007684 <HAL_UART_MspInit+0x264>)
 80074de:	f000 fac9 	bl	8007a74 <HAL_DMA_Init>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d001      	beq.n	80074ec <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80074e8:	f7fa fdd4 	bl	8002094 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	4a65      	ldr	r2, [pc, #404]	; (8007684 <HAL_UART_MspInit+0x264>)
 80074f0:	639a      	str	r2, [r3, #56]	; 0x38
 80074f2:	4a64      	ldr	r2, [pc, #400]	; (8007684 <HAL_UART_MspInit+0x264>)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80074f8:	2200      	movs	r2, #0
 80074fa:	2105      	movs	r1, #5
 80074fc:	2034      	movs	r0, #52	; 0x34
 80074fe:	f000 fa8e 	bl	8007a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8007502:	2034      	movs	r0, #52	; 0x34
 8007504:	f000 faa7 	bl	8007a56 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8007508:	e1a1      	b.n	800784e <HAL_UART_MspInit+0x42e>
  else if(uartHandle->Instance==UART5)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a5f      	ldr	r2, [pc, #380]	; (800768c <HAL_UART_MspInit+0x26c>)
 8007510:	4293      	cmp	r3, r2
 8007512:	f040 80c7 	bne.w	80076a4 <HAL_UART_MspInit+0x284>
    __HAL_RCC_UART5_CLK_ENABLE();
 8007516:	2300      	movs	r3, #0
 8007518:	62bb      	str	r3, [r7, #40]	; 0x28
 800751a:	4b58      	ldr	r3, [pc, #352]	; (800767c <HAL_UART_MspInit+0x25c>)
 800751c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751e:	4a57      	ldr	r2, [pc, #348]	; (800767c <HAL_UART_MspInit+0x25c>)
 8007520:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007524:	6413      	str	r3, [r2, #64]	; 0x40
 8007526:	4b55      	ldr	r3, [pc, #340]	; (800767c <HAL_UART_MspInit+0x25c>)
 8007528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800752e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007530:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007532:	2300      	movs	r3, #0
 8007534:	627b      	str	r3, [r7, #36]	; 0x24
 8007536:	4b51      	ldr	r3, [pc, #324]	; (800767c <HAL_UART_MspInit+0x25c>)
 8007538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800753a:	4a50      	ldr	r2, [pc, #320]	; (800767c <HAL_UART_MspInit+0x25c>)
 800753c:	f043 0304 	orr.w	r3, r3, #4
 8007540:	6313      	str	r3, [r2, #48]	; 0x30
 8007542:	4b4e      	ldr	r3, [pc, #312]	; (800767c <HAL_UART_MspInit+0x25c>)
 8007544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007546:	f003 0304 	and.w	r3, r3, #4
 800754a:	627b      	str	r3, [r7, #36]	; 0x24
 800754c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800754e:	2300      	movs	r3, #0
 8007550:	623b      	str	r3, [r7, #32]
 8007552:	4b4a      	ldr	r3, [pc, #296]	; (800767c <HAL_UART_MspInit+0x25c>)
 8007554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007556:	4a49      	ldr	r2, [pc, #292]	; (800767c <HAL_UART_MspInit+0x25c>)
 8007558:	f043 0308 	orr.w	r3, r3, #8
 800755c:	6313      	str	r3, [r2, #48]	; 0x30
 800755e:	4b47      	ldr	r3, [pc, #284]	; (800767c <HAL_UART_MspInit+0x25c>)
 8007560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007562:	f003 0308 	and.w	r3, r3, #8
 8007566:	623b      	str	r3, [r7, #32]
 8007568:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800756a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800756e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007570:	2302      	movs	r3, #2
 8007572:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007574:	2300      	movs	r3, #0
 8007576:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007578:	2303      	movs	r3, #3
 800757a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800757c:	2308      	movs	r3, #8
 800757e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007580:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007584:	4619      	mov	r1, r3
 8007586:	483e      	ldr	r0, [pc, #248]	; (8007680 <HAL_UART_MspInit+0x260>)
 8007588:	f000 fe76 	bl	8008278 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800758c:	2304      	movs	r3, #4
 800758e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007590:	2302      	movs	r3, #2
 8007592:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007594:	2300      	movs	r3, #0
 8007596:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007598:	2303      	movs	r3, #3
 800759a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800759c:	2308      	movs	r3, #8
 800759e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80075a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80075a4:	4619      	mov	r1, r3
 80075a6:	483a      	ldr	r0, [pc, #232]	; (8007690 <HAL_UART_MspInit+0x270>)
 80075a8:	f000 fe66 	bl	8008278 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80075ac:	4b39      	ldr	r3, [pc, #228]	; (8007694 <HAL_UART_MspInit+0x274>)
 80075ae:	4a3a      	ldr	r2, [pc, #232]	; (8007698 <HAL_UART_MspInit+0x278>)
 80075b0:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80075b2:	4b38      	ldr	r3, [pc, #224]	; (8007694 <HAL_UART_MspInit+0x274>)
 80075b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80075b8:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80075ba:	4b36      	ldr	r3, [pc, #216]	; (8007694 <HAL_UART_MspInit+0x274>)
 80075bc:	2200      	movs	r2, #0
 80075be:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80075c0:	4b34      	ldr	r3, [pc, #208]	; (8007694 <HAL_UART_MspInit+0x274>)
 80075c2:	2200      	movs	r2, #0
 80075c4:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80075c6:	4b33      	ldr	r3, [pc, #204]	; (8007694 <HAL_UART_MspInit+0x274>)
 80075c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80075cc:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80075ce:	4b31      	ldr	r3, [pc, #196]	; (8007694 <HAL_UART_MspInit+0x274>)
 80075d0:	2200      	movs	r2, #0
 80075d2:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80075d4:	4b2f      	ldr	r3, [pc, #188]	; (8007694 <HAL_UART_MspInit+0x274>)
 80075d6:	2200      	movs	r2, #0
 80075d8:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 80075da:	4b2e      	ldr	r3, [pc, #184]	; (8007694 <HAL_UART_MspInit+0x274>)
 80075dc:	2200      	movs	r2, #0
 80075de:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80075e0:	4b2c      	ldr	r3, [pc, #176]	; (8007694 <HAL_UART_MspInit+0x274>)
 80075e2:	2200      	movs	r2, #0
 80075e4:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80075e6:	4b2b      	ldr	r3, [pc, #172]	; (8007694 <HAL_UART_MspInit+0x274>)
 80075e8:	2200      	movs	r2, #0
 80075ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80075ec:	4829      	ldr	r0, [pc, #164]	; (8007694 <HAL_UART_MspInit+0x274>)
 80075ee:	f000 fa41 	bl	8007a74 <HAL_DMA_Init>
 80075f2:	4603      	mov	r3, r0
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d001      	beq.n	80075fc <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 80075f8:	f7fa fd4c 	bl	8002094 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	4a25      	ldr	r2, [pc, #148]	; (8007694 <HAL_UART_MspInit+0x274>)
 8007600:	639a      	str	r2, [r3, #56]	; 0x38
 8007602:	4a24      	ldr	r2, [pc, #144]	; (8007694 <HAL_UART_MspInit+0x274>)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8007608:	4b24      	ldr	r3, [pc, #144]	; (800769c <HAL_UART_MspInit+0x27c>)
 800760a:	4a25      	ldr	r2, [pc, #148]	; (80076a0 <HAL_UART_MspInit+0x280>)
 800760c:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 800760e:	4b23      	ldr	r3, [pc, #140]	; (800769c <HAL_UART_MspInit+0x27c>)
 8007610:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007614:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007616:	4b21      	ldr	r3, [pc, #132]	; (800769c <HAL_UART_MspInit+0x27c>)
 8007618:	2240      	movs	r2, #64	; 0x40
 800761a:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800761c:	4b1f      	ldr	r3, [pc, #124]	; (800769c <HAL_UART_MspInit+0x27c>)
 800761e:	2200      	movs	r2, #0
 8007620:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007622:	4b1e      	ldr	r3, [pc, #120]	; (800769c <HAL_UART_MspInit+0x27c>)
 8007624:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007628:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800762a:	4b1c      	ldr	r3, [pc, #112]	; (800769c <HAL_UART_MspInit+0x27c>)
 800762c:	2200      	movs	r2, #0
 800762e:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007630:	4b1a      	ldr	r3, [pc, #104]	; (800769c <HAL_UART_MspInit+0x27c>)
 8007632:	2200      	movs	r2, #0
 8007634:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8007636:	4b19      	ldr	r3, [pc, #100]	; (800769c <HAL_UART_MspInit+0x27c>)
 8007638:	2200      	movs	r2, #0
 800763a:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 800763c:	4b17      	ldr	r3, [pc, #92]	; (800769c <HAL_UART_MspInit+0x27c>)
 800763e:	2200      	movs	r2, #0
 8007640:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007642:	4b16      	ldr	r3, [pc, #88]	; (800769c <HAL_UART_MspInit+0x27c>)
 8007644:	2200      	movs	r2, #0
 8007646:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8007648:	4814      	ldr	r0, [pc, #80]	; (800769c <HAL_UART_MspInit+0x27c>)
 800764a:	f000 fa13 	bl	8007a74 <HAL_DMA_Init>
 800764e:	4603      	mov	r3, r0
 8007650:	2b00      	cmp	r3, #0
 8007652:	d001      	beq.n	8007658 <HAL_UART_MspInit+0x238>
      Error_Handler();
 8007654:	f7fa fd1e 	bl	8002094 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a10      	ldr	r2, [pc, #64]	; (800769c <HAL_UART_MspInit+0x27c>)
 800765c:	635a      	str	r2, [r3, #52]	; 0x34
 800765e:	4a0f      	ldr	r2, [pc, #60]	; (800769c <HAL_UART_MspInit+0x27c>)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8007664:	2200      	movs	r2, #0
 8007666:	2105      	movs	r1, #5
 8007668:	2035      	movs	r0, #53	; 0x35
 800766a:	f000 f9d8 	bl	8007a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800766e:	2035      	movs	r0, #53	; 0x35
 8007670:	f000 f9f1 	bl	8007a56 <HAL_NVIC_EnableIRQ>
}
 8007674:	e0eb      	b.n	800784e <HAL_UART_MspInit+0x42e>
 8007676:	bf00      	nop
 8007678:	40004c00 	.word	0x40004c00
 800767c:	40023800 	.word	0x40023800
 8007680:	40020800 	.word	0x40020800
 8007684:	20002ddc 	.word	0x20002ddc
 8007688:	40026040 	.word	0x40026040
 800768c:	40005000 	.word	0x40005000
 8007690:	40020c00 	.word	0x40020c00
 8007694:	20002e3c 	.word	0x20002e3c
 8007698:	40026010 	.word	0x40026010
 800769c:	20002e9c 	.word	0x20002e9c
 80076a0:	400260b8 	.word	0x400260b8
  else if(uartHandle->Instance==USART1)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a6b      	ldr	r2, [pc, #428]	; (8007858 <HAL_UART_MspInit+0x438>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d135      	bne.n	800771a <HAL_UART_MspInit+0x2fa>
    __HAL_RCC_USART1_CLK_ENABLE();
 80076ae:	2300      	movs	r3, #0
 80076b0:	61fb      	str	r3, [r7, #28]
 80076b2:	4b6a      	ldr	r3, [pc, #424]	; (800785c <HAL_UART_MspInit+0x43c>)
 80076b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076b6:	4a69      	ldr	r2, [pc, #420]	; (800785c <HAL_UART_MspInit+0x43c>)
 80076b8:	f043 0310 	orr.w	r3, r3, #16
 80076bc:	6453      	str	r3, [r2, #68]	; 0x44
 80076be:	4b67      	ldr	r3, [pc, #412]	; (800785c <HAL_UART_MspInit+0x43c>)
 80076c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076c2:	f003 0310 	and.w	r3, r3, #16
 80076c6:	61fb      	str	r3, [r7, #28]
 80076c8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80076ca:	2300      	movs	r3, #0
 80076cc:	61bb      	str	r3, [r7, #24]
 80076ce:	4b63      	ldr	r3, [pc, #396]	; (800785c <HAL_UART_MspInit+0x43c>)
 80076d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d2:	4a62      	ldr	r2, [pc, #392]	; (800785c <HAL_UART_MspInit+0x43c>)
 80076d4:	f043 0301 	orr.w	r3, r3, #1
 80076d8:	6313      	str	r3, [r2, #48]	; 0x30
 80076da:	4b60      	ldr	r3, [pc, #384]	; (800785c <HAL_UART_MspInit+0x43c>)
 80076dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076de:	f003 0301 	and.w	r3, r3, #1
 80076e2:	61bb      	str	r3, [r7, #24]
 80076e4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80076e6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80076ea:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076ec:	2302      	movs	r3, #2
 80076ee:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076f0:	2300      	movs	r3, #0
 80076f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80076f4:	2303      	movs	r3, #3
 80076f6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80076f8:	2307      	movs	r3, #7
 80076fa:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80076fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007700:	4619      	mov	r1, r3
 8007702:	4857      	ldr	r0, [pc, #348]	; (8007860 <HAL_UART_MspInit+0x440>)
 8007704:	f000 fdb8 	bl	8008278 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8007708:	2200      	movs	r2, #0
 800770a:	2105      	movs	r1, #5
 800770c:	2025      	movs	r0, #37	; 0x25
 800770e:	f000 f986 	bl	8007a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007712:	2025      	movs	r0, #37	; 0x25
 8007714:	f000 f99f 	bl	8007a56 <HAL_NVIC_EnableIRQ>
}
 8007718:	e099      	b.n	800784e <HAL_UART_MspInit+0x42e>
  else if(uartHandle->Instance==USART2)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a51      	ldr	r2, [pc, #324]	; (8007864 <HAL_UART_MspInit+0x444>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d162      	bne.n	80077ea <HAL_UART_MspInit+0x3ca>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007724:	2300      	movs	r3, #0
 8007726:	617b      	str	r3, [r7, #20]
 8007728:	4b4c      	ldr	r3, [pc, #304]	; (800785c <HAL_UART_MspInit+0x43c>)
 800772a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772c:	4a4b      	ldr	r2, [pc, #300]	; (800785c <HAL_UART_MspInit+0x43c>)
 800772e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007732:	6413      	str	r3, [r2, #64]	; 0x40
 8007734:	4b49      	ldr	r3, [pc, #292]	; (800785c <HAL_UART_MspInit+0x43c>)
 8007736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800773c:	617b      	str	r3, [r7, #20]
 800773e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007740:	2300      	movs	r3, #0
 8007742:	613b      	str	r3, [r7, #16]
 8007744:	4b45      	ldr	r3, [pc, #276]	; (800785c <HAL_UART_MspInit+0x43c>)
 8007746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007748:	4a44      	ldr	r2, [pc, #272]	; (800785c <HAL_UART_MspInit+0x43c>)
 800774a:	f043 0301 	orr.w	r3, r3, #1
 800774e:	6313      	str	r3, [r2, #48]	; 0x30
 8007750:	4b42      	ldr	r3, [pc, #264]	; (800785c <HAL_UART_MspInit+0x43c>)
 8007752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007754:	f003 0301 	and.w	r3, r3, #1
 8007758:	613b      	str	r3, [r7, #16]
 800775a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800775c:	230c      	movs	r3, #12
 800775e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007760:	2302      	movs	r3, #2
 8007762:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007764:	2300      	movs	r3, #0
 8007766:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007768:	2303      	movs	r3, #3
 800776a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800776c:	2307      	movs	r3, #7
 800776e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007770:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007774:	4619      	mov	r1, r3
 8007776:	483a      	ldr	r0, [pc, #232]	; (8007860 <HAL_UART_MspInit+0x440>)
 8007778:	f000 fd7e 	bl	8008278 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800777c:	4b3a      	ldr	r3, [pc, #232]	; (8007868 <HAL_UART_MspInit+0x448>)
 800777e:	4a3b      	ldr	r2, [pc, #236]	; (800786c <HAL_UART_MspInit+0x44c>)
 8007780:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8007782:	4b39      	ldr	r3, [pc, #228]	; (8007868 <HAL_UART_MspInit+0x448>)
 8007784:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007788:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800778a:	4b37      	ldr	r3, [pc, #220]	; (8007868 <HAL_UART_MspInit+0x448>)
 800778c:	2200      	movs	r2, #0
 800778e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007790:	4b35      	ldr	r3, [pc, #212]	; (8007868 <HAL_UART_MspInit+0x448>)
 8007792:	2200      	movs	r2, #0
 8007794:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007796:	4b34      	ldr	r3, [pc, #208]	; (8007868 <HAL_UART_MspInit+0x448>)
 8007798:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800779c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800779e:	4b32      	ldr	r3, [pc, #200]	; (8007868 <HAL_UART_MspInit+0x448>)
 80077a0:	2200      	movs	r2, #0
 80077a2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80077a4:	4b30      	ldr	r3, [pc, #192]	; (8007868 <HAL_UART_MspInit+0x448>)
 80077a6:	2200      	movs	r2, #0
 80077a8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80077aa:	4b2f      	ldr	r3, [pc, #188]	; (8007868 <HAL_UART_MspInit+0x448>)
 80077ac:	2200      	movs	r2, #0
 80077ae:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80077b0:	4b2d      	ldr	r3, [pc, #180]	; (8007868 <HAL_UART_MspInit+0x448>)
 80077b2:	2200      	movs	r2, #0
 80077b4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80077b6:	4b2c      	ldr	r3, [pc, #176]	; (8007868 <HAL_UART_MspInit+0x448>)
 80077b8:	2200      	movs	r2, #0
 80077ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80077bc:	482a      	ldr	r0, [pc, #168]	; (8007868 <HAL_UART_MspInit+0x448>)
 80077be:	f000 f959 	bl	8007a74 <HAL_DMA_Init>
 80077c2:	4603      	mov	r3, r0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d001      	beq.n	80077cc <HAL_UART_MspInit+0x3ac>
      Error_Handler();
 80077c8:	f7fa fc64 	bl	8002094 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4a26      	ldr	r2, [pc, #152]	; (8007868 <HAL_UART_MspInit+0x448>)
 80077d0:	639a      	str	r2, [r3, #56]	; 0x38
 80077d2:	4a25      	ldr	r2, [pc, #148]	; (8007868 <HAL_UART_MspInit+0x448>)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80077d8:	2200      	movs	r2, #0
 80077da:	2105      	movs	r1, #5
 80077dc:	2026      	movs	r0, #38	; 0x26
 80077de:	f000 f91e 	bl	8007a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80077e2:	2026      	movs	r0, #38	; 0x26
 80077e4:	f000 f937 	bl	8007a56 <HAL_NVIC_EnableIRQ>
}
 80077e8:	e031      	b.n	800784e <HAL_UART_MspInit+0x42e>
  else if(uartHandle->Instance==USART3)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a20      	ldr	r2, [pc, #128]	; (8007870 <HAL_UART_MspInit+0x450>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d12c      	bne.n	800784e <HAL_UART_MspInit+0x42e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80077f4:	2300      	movs	r3, #0
 80077f6:	60fb      	str	r3, [r7, #12]
 80077f8:	4b18      	ldr	r3, [pc, #96]	; (800785c <HAL_UART_MspInit+0x43c>)
 80077fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fc:	4a17      	ldr	r2, [pc, #92]	; (800785c <HAL_UART_MspInit+0x43c>)
 80077fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007802:	6413      	str	r3, [r2, #64]	; 0x40
 8007804:	4b15      	ldr	r3, [pc, #84]	; (800785c <HAL_UART_MspInit+0x43c>)
 8007806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007808:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800780c:	60fb      	str	r3, [r7, #12]
 800780e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007810:	2300      	movs	r3, #0
 8007812:	60bb      	str	r3, [r7, #8]
 8007814:	4b11      	ldr	r3, [pc, #68]	; (800785c <HAL_UART_MspInit+0x43c>)
 8007816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007818:	4a10      	ldr	r2, [pc, #64]	; (800785c <HAL_UART_MspInit+0x43c>)
 800781a:	f043 0308 	orr.w	r3, r3, #8
 800781e:	6313      	str	r3, [r2, #48]	; 0x30
 8007820:	4b0e      	ldr	r3, [pc, #56]	; (800785c <HAL_UART_MspInit+0x43c>)
 8007822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007824:	f003 0308 	and.w	r3, r3, #8
 8007828:	60bb      	str	r3, [r7, #8]
 800782a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800782c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007830:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007832:	2302      	movs	r3, #2
 8007834:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007836:	2300      	movs	r3, #0
 8007838:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800783a:	2303      	movs	r3, #3
 800783c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800783e:	2307      	movs	r3, #7
 8007840:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007842:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007846:	4619      	mov	r1, r3
 8007848:	480a      	ldr	r0, [pc, #40]	; (8007874 <HAL_UART_MspInit+0x454>)
 800784a:	f000 fd15 	bl	8008278 <HAL_GPIO_Init>
}
 800784e:	bf00      	nop
 8007850:	3748      	adds	r7, #72	; 0x48
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	40011000 	.word	0x40011000
 800785c:	40023800 	.word	0x40023800
 8007860:	40020000 	.word	0x40020000
 8007864:	40004400 	.word	0x40004400
 8007868:	20002efc 	.word	0x20002efc
 800786c:	40026088 	.word	0x40026088
 8007870:	40004800 	.word	0x40004800
 8007874:	40020c00 	.word	0x40020c00

08007878 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007878:	f8df d034 	ldr.w	sp, [pc, #52]	; 80078b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800787c:	480d      	ldr	r0, [pc, #52]	; (80078b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800787e:	490e      	ldr	r1, [pc, #56]	; (80078b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007880:	4a0e      	ldr	r2, [pc, #56]	; (80078bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007884:	e002      	b.n	800788c <LoopCopyDataInit>

08007886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800788a:	3304      	adds	r3, #4

0800788c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800788c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800788e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007890:	d3f9      	bcc.n	8007886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007892:	4a0b      	ldr	r2, [pc, #44]	; (80078c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8007894:	4c0b      	ldr	r4, [pc, #44]	; (80078c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8007896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007898:	e001      	b.n	800789e <LoopFillZerobss>

0800789a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800789a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800789c:	3204      	adds	r2, #4

0800789e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800789e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80078a0:	d3fb      	bcc.n	800789a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80078a2:	f7fe ff9f 	bl	80067e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80078a6:	f005 ff05 	bl	800d6b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80078aa:	f7fa fb09 	bl	8001ec0 <main>
  bx  lr    
 80078ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80078b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80078b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80078b8:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 80078bc:	0800e668 	.word	0x0800e668
  ldr r2, =_sbss
 80078c0:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80078c4:	20006cc4 	.word	0x20006cc4

080078c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80078c8:	e7fe      	b.n	80078c8 <ADC_IRQHandler>
	...

080078cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80078cc:	b480      	push	{r7}
 80078ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80078d0:	4b06      	ldr	r3, [pc, #24]	; (80078ec <HAL_IncTick+0x20>)
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	461a      	mov	r2, r3
 80078d6:	4b06      	ldr	r3, [pc, #24]	; (80078f0 <HAL_IncTick+0x24>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4413      	add	r3, r2
 80078dc:	4a04      	ldr	r2, [pc, #16]	; (80078f0 <HAL_IncTick+0x24>)
 80078de:	6013      	str	r3, [r2, #0]
}
 80078e0:	bf00      	nop
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop
 80078ec:	2000002c 	.word	0x2000002c
 80078f0:	20002f5c 	.word	0x20002f5c

080078f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80078f4:	b480      	push	{r7}
 80078f6:	af00      	add	r7, sp, #0
  return uwTick;
 80078f8:	4b03      	ldr	r3, [pc, #12]	; (8007908 <HAL_GetTick+0x14>)
 80078fa:	681b      	ldr	r3, [r3, #0]
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop
 8007908:	20002f5c 	.word	0x20002f5c

0800790c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800790c:	b480      	push	{r7}
 800790e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007910:	4b04      	ldr	r3, [pc, #16]	; (8007924 <__NVIC_GetPriorityGrouping+0x18>)
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	0a1b      	lsrs	r3, r3, #8
 8007916:	f003 0307 	and.w	r3, r3, #7
}
 800791a:	4618      	mov	r0, r3
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr
 8007924:	e000ed00 	.word	0xe000ed00

08007928 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
 800792e:	4603      	mov	r3, r0
 8007930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007936:	2b00      	cmp	r3, #0
 8007938:	db0b      	blt.n	8007952 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800793a:	79fb      	ldrb	r3, [r7, #7]
 800793c:	f003 021f 	and.w	r2, r3, #31
 8007940:	4907      	ldr	r1, [pc, #28]	; (8007960 <__NVIC_EnableIRQ+0x38>)
 8007942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007946:	095b      	lsrs	r3, r3, #5
 8007948:	2001      	movs	r0, #1
 800794a:	fa00 f202 	lsl.w	r2, r0, r2
 800794e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007952:	bf00      	nop
 8007954:	370c      	adds	r7, #12
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop
 8007960:	e000e100 	.word	0xe000e100

08007964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	4603      	mov	r3, r0
 800796c:	6039      	str	r1, [r7, #0]
 800796e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007974:	2b00      	cmp	r3, #0
 8007976:	db0a      	blt.n	800798e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	b2da      	uxtb	r2, r3
 800797c:	490c      	ldr	r1, [pc, #48]	; (80079b0 <__NVIC_SetPriority+0x4c>)
 800797e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007982:	0112      	lsls	r2, r2, #4
 8007984:	b2d2      	uxtb	r2, r2
 8007986:	440b      	add	r3, r1
 8007988:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800798c:	e00a      	b.n	80079a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	b2da      	uxtb	r2, r3
 8007992:	4908      	ldr	r1, [pc, #32]	; (80079b4 <__NVIC_SetPriority+0x50>)
 8007994:	79fb      	ldrb	r3, [r7, #7]
 8007996:	f003 030f 	and.w	r3, r3, #15
 800799a:	3b04      	subs	r3, #4
 800799c:	0112      	lsls	r2, r2, #4
 800799e:	b2d2      	uxtb	r2, r2
 80079a0:	440b      	add	r3, r1
 80079a2:	761a      	strb	r2, [r3, #24]
}
 80079a4:	bf00      	nop
 80079a6:	370c      	adds	r7, #12
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr
 80079b0:	e000e100 	.word	0xe000e100
 80079b4:	e000ed00 	.word	0xe000ed00

080079b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b089      	sub	sp, #36	; 0x24
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f003 0307 	and.w	r3, r3, #7
 80079ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	f1c3 0307 	rsb	r3, r3, #7
 80079d2:	2b04      	cmp	r3, #4
 80079d4:	bf28      	it	cs
 80079d6:	2304      	movcs	r3, #4
 80079d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	3304      	adds	r3, #4
 80079de:	2b06      	cmp	r3, #6
 80079e0:	d902      	bls.n	80079e8 <NVIC_EncodePriority+0x30>
 80079e2:	69fb      	ldr	r3, [r7, #28]
 80079e4:	3b03      	subs	r3, #3
 80079e6:	e000      	b.n	80079ea <NVIC_EncodePriority+0x32>
 80079e8:	2300      	movs	r3, #0
 80079ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80079ec:	f04f 32ff 	mov.w	r2, #4294967295
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	fa02 f303 	lsl.w	r3, r2, r3
 80079f6:	43da      	mvns	r2, r3
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	401a      	ands	r2, r3
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007a00:	f04f 31ff 	mov.w	r1, #4294967295
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	fa01 f303 	lsl.w	r3, r1, r3
 8007a0a:	43d9      	mvns	r1, r3
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a10:	4313      	orrs	r3, r2
         );
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3724      	adds	r7, #36	; 0x24
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr

08007a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007a1e:	b580      	push	{r7, lr}
 8007a20:	b086      	sub	sp, #24
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	4603      	mov	r3, r0
 8007a26:	60b9      	str	r1, [r7, #8]
 8007a28:	607a      	str	r2, [r7, #4]
 8007a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007a30:	f7ff ff6c 	bl	800790c <__NVIC_GetPriorityGrouping>
 8007a34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	68b9      	ldr	r1, [r7, #8]
 8007a3a:	6978      	ldr	r0, [r7, #20]
 8007a3c:	f7ff ffbc 	bl	80079b8 <NVIC_EncodePriority>
 8007a40:	4602      	mov	r2, r0
 8007a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a46:	4611      	mov	r1, r2
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f7ff ff8b 	bl	8007964 <__NVIC_SetPriority>
}
 8007a4e:	bf00      	nop
 8007a50:	3718      	adds	r7, #24
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b082      	sub	sp, #8
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a64:	4618      	mov	r0, r3
 8007a66:	f7ff ff5f 	bl	8007928 <__NVIC_EnableIRQ>
}
 8007a6a:	bf00      	nop
 8007a6c:	3708      	adds	r7, #8
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
	...

08007a74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b086      	sub	sp, #24
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007a80:	f7ff ff38 	bl	80078f4 <HAL_GetTick>
 8007a84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d101      	bne.n	8007a90 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	e099      	b.n	8007bc4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2202      	movs	r2, #2
 8007a94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f022 0201 	bic.w	r2, r2, #1
 8007aae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007ab0:	e00f      	b.n	8007ad2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007ab2:	f7ff ff1f 	bl	80078f4 <HAL_GetTick>
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	1ad3      	subs	r3, r2, r3
 8007abc:	2b05      	cmp	r3, #5
 8007abe:	d908      	bls.n	8007ad2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2220      	movs	r2, #32
 8007ac4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2203      	movs	r2, #3
 8007aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007ace:	2303      	movs	r3, #3
 8007ad0:	e078      	b.n	8007bc4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f003 0301 	and.w	r3, r3, #1
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d1e8      	bne.n	8007ab2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007ae8:	697a      	ldr	r2, [r7, #20]
 8007aea:	4b38      	ldr	r3, [pc, #224]	; (8007bcc <HAL_DMA_Init+0x158>)
 8007aec:	4013      	ands	r3, r2
 8007aee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	685a      	ldr	r2, [r3, #4]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007afe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	691b      	ldr	r3, [r3, #16]
 8007b04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	699b      	ldr	r3, [r3, #24]
 8007b10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6a1b      	ldr	r3, [r3, #32]
 8007b1c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b1e:	697a      	ldr	r2, [r7, #20]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b28:	2b04      	cmp	r3, #4
 8007b2a:	d107      	bne.n	8007b3c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b34:	4313      	orrs	r3, r2
 8007b36:	697a      	ldr	r2, [r7, #20]
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	697a      	ldr	r2, [r7, #20]
 8007b42:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	695b      	ldr	r3, [r3, #20]
 8007b4a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	f023 0307 	bic.w	r3, r3, #7
 8007b52:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b58:	697a      	ldr	r2, [r7, #20]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b62:	2b04      	cmp	r3, #4
 8007b64:	d117      	bne.n	8007b96 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b6a:	697a      	ldr	r2, [r7, #20]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d00e      	beq.n	8007b96 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 fb01 	bl	8008180 <DMA_CheckFifoParam>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d008      	beq.n	8007b96 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2240      	movs	r2, #64	; 0x40
 8007b88:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007b92:	2301      	movs	r3, #1
 8007b94:	e016      	b.n	8007bc4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	697a      	ldr	r2, [r7, #20]
 8007b9c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 fab8 	bl	8008114 <DMA_CalcBaseAndBitshift>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bac:	223f      	movs	r2, #63	; 0x3f
 8007bae:	409a      	lsls	r2, r3
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007bc2:	2300      	movs	r3, #0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3718      	adds	r7, #24
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}
 8007bcc:	f010803f 	.word	0xf010803f

08007bd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b086      	sub	sp, #24
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	607a      	str	r2, [r7, #4]
 8007bdc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007bde:	2300      	movs	r3, #0
 8007be0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007be6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d101      	bne.n	8007bf6 <HAL_DMA_Start_IT+0x26>
 8007bf2:	2302      	movs	r3, #2
 8007bf4:	e040      	b.n	8007c78 <HAL_DMA_Start_IT+0xa8>
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d12f      	bne.n	8007c6a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2202      	movs	r2, #2
 8007c0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2200      	movs	r2, #0
 8007c16:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	68b9      	ldr	r1, [r7, #8]
 8007c1e:	68f8      	ldr	r0, [r7, #12]
 8007c20:	f000 fa4a 	bl	80080b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c28:	223f      	movs	r2, #63	; 0x3f
 8007c2a:	409a      	lsls	r2, r3
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f042 0216 	orr.w	r2, r2, #22
 8007c3e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d007      	beq.n	8007c58 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f042 0208 	orr.w	r2, r2, #8
 8007c56:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f042 0201 	orr.w	r2, r2, #1
 8007c66:	601a      	str	r2, [r3, #0]
 8007c68:	e005      	b.n	8007c76 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007c72:	2302      	movs	r3, #2
 8007c74:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3718      	adds	r7, #24
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c8c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007c8e:	f7ff fe31 	bl	80078f4 <HAL_GetTick>
 8007c92:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	d008      	beq.n	8007cb2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2280      	movs	r2, #128	; 0x80
 8007ca4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e052      	b.n	8007d58 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f022 0216 	bic.w	r2, r2, #22
 8007cc0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	695a      	ldr	r2, [r3, #20]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007cd0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d103      	bne.n	8007ce2 <HAL_DMA_Abort+0x62>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d007      	beq.n	8007cf2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f022 0208 	bic.w	r2, r2, #8
 8007cf0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f022 0201 	bic.w	r2, r2, #1
 8007d00:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007d02:	e013      	b.n	8007d2c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007d04:	f7ff fdf6 	bl	80078f4 <HAL_GetTick>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	1ad3      	subs	r3, r2, r3
 8007d0e:	2b05      	cmp	r3, #5
 8007d10:	d90c      	bls.n	8007d2c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2220      	movs	r2, #32
 8007d16:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2203      	movs	r2, #3
 8007d1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007d28:	2303      	movs	r3, #3
 8007d2a:	e015      	b.n	8007d58 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f003 0301 	and.w	r3, r3, #1
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d1e4      	bne.n	8007d04 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d3e:	223f      	movs	r2, #63	; 0x3f
 8007d40:	409a      	lsls	r2, r3
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2201      	movs	r2, #1
 8007d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2200      	movs	r2, #0
 8007d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3710      	adds	r7, #16
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b083      	sub	sp, #12
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	d004      	beq.n	8007d7e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2280      	movs	r2, #128	; 0x80
 8007d78:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e00c      	b.n	8007d98 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2205      	movs	r2, #5
 8007d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f022 0201 	bic.w	r2, r2, #1
 8007d94:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007d96:	2300      	movs	r3, #0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	370c      	adds	r7, #12
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b086      	sub	sp, #24
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007dac:	2300      	movs	r3, #0
 8007dae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007db0:	4b8e      	ldr	r3, [pc, #568]	; (8007fec <HAL_DMA_IRQHandler+0x248>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a8e      	ldr	r2, [pc, #568]	; (8007ff0 <HAL_DMA_IRQHandler+0x24c>)
 8007db6:	fba2 2303 	umull	r2, r3, r2, r3
 8007dba:	0a9b      	lsrs	r3, r3, #10
 8007dbc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dc2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dce:	2208      	movs	r2, #8
 8007dd0:	409a      	lsls	r2, r3
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d01a      	beq.n	8007e10 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f003 0304 	and.w	r3, r3, #4
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d013      	beq.n	8007e10 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f022 0204 	bic.w	r2, r2, #4
 8007df6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dfc:	2208      	movs	r2, #8
 8007dfe:	409a      	lsls	r2, r3
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e08:	f043 0201 	orr.w	r2, r3, #1
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e14:	2201      	movs	r2, #1
 8007e16:	409a      	lsls	r2, r3
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	4013      	ands	r3, r2
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d012      	beq.n	8007e46 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	695b      	ldr	r3, [r3, #20]
 8007e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d00b      	beq.n	8007e46 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e32:	2201      	movs	r2, #1
 8007e34:	409a      	lsls	r2, r3
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e3e:	f043 0202 	orr.w	r2, r3, #2
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e4a:	2204      	movs	r2, #4
 8007e4c:	409a      	lsls	r2, r3
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	4013      	ands	r3, r2
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d012      	beq.n	8007e7c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f003 0302 	and.w	r3, r3, #2
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d00b      	beq.n	8007e7c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e68:	2204      	movs	r2, #4
 8007e6a:	409a      	lsls	r2, r3
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e74:	f043 0204 	orr.w	r2, r3, #4
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e80:	2210      	movs	r2, #16
 8007e82:	409a      	lsls	r2, r3
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	4013      	ands	r3, r2
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d043      	beq.n	8007f14 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f003 0308 	and.w	r3, r3, #8
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d03c      	beq.n	8007f14 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e9e:	2210      	movs	r2, #16
 8007ea0:	409a      	lsls	r2, r3
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d018      	beq.n	8007ee6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d108      	bne.n	8007ed4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d024      	beq.n	8007f14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	4798      	blx	r3
 8007ed2:	e01f      	b.n	8007f14 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d01b      	beq.n	8007f14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	4798      	blx	r3
 8007ee4:	e016      	b.n	8007f14 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d107      	bne.n	8007f04 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f022 0208 	bic.w	r2, r2, #8
 8007f02:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d003      	beq.n	8007f14 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f18:	2220      	movs	r2, #32
 8007f1a:	409a      	lsls	r2, r3
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	4013      	ands	r3, r2
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f000 808f 	beq.w	8008044 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f003 0310 	and.w	r3, r3, #16
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	f000 8087 	beq.w	8008044 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f3a:	2220      	movs	r2, #32
 8007f3c:	409a      	lsls	r2, r3
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	2b05      	cmp	r3, #5
 8007f4c:	d136      	bne.n	8007fbc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f022 0216 	bic.w	r2, r2, #22
 8007f5c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	695a      	ldr	r2, [r3, #20]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f6c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d103      	bne.n	8007f7e <HAL_DMA_IRQHandler+0x1da>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d007      	beq.n	8007f8e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f022 0208 	bic.w	r2, r2, #8
 8007f8c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f92:	223f      	movs	r2, #63	; 0x3f
 8007f94:	409a      	lsls	r2, r3
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d07e      	beq.n	80080b0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	4798      	blx	r3
        }
        return;
 8007fba:	e079      	b.n	80080b0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d01d      	beq.n	8008006 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d10d      	bne.n	8007ff4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d031      	beq.n	8008044 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	4798      	blx	r3
 8007fe8:	e02c      	b.n	8008044 <HAL_DMA_IRQHandler+0x2a0>
 8007fea:	bf00      	nop
 8007fec:	20000024 	.word	0x20000024
 8007ff0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d023      	beq.n	8008044 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	4798      	blx	r3
 8008004:	e01e      	b.n	8008044 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008010:	2b00      	cmp	r3, #0
 8008012:	d10f      	bne.n	8008034 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f022 0210 	bic.w	r2, r2, #16
 8008022:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2201      	movs	r2, #1
 8008028:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2200      	movs	r2, #0
 8008030:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008038:	2b00      	cmp	r3, #0
 800803a:	d003      	beq.n	8008044 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008048:	2b00      	cmp	r3, #0
 800804a:	d032      	beq.n	80080b2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008050:	f003 0301 	and.w	r3, r3, #1
 8008054:	2b00      	cmp	r3, #0
 8008056:	d022      	beq.n	800809e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2205      	movs	r2, #5
 800805c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f022 0201 	bic.w	r2, r2, #1
 800806e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	3301      	adds	r3, #1
 8008074:	60bb      	str	r3, [r7, #8]
 8008076:	697a      	ldr	r2, [r7, #20]
 8008078:	429a      	cmp	r2, r3
 800807a:	d307      	bcc.n	800808c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f003 0301 	and.w	r3, r3, #1
 8008086:	2b00      	cmp	r3, #0
 8008088:	d1f2      	bne.n	8008070 <HAL_DMA_IRQHandler+0x2cc>
 800808a:	e000      	b.n	800808e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800808c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2201      	movs	r2, #1
 8008092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d005      	beq.n	80080b2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	4798      	blx	r3
 80080ae:	e000      	b.n	80080b2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80080b0:	bf00      	nop
    }
  }
}
 80080b2:	3718      	adds	r7, #24
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	60b9      	str	r1, [r7, #8]
 80080c2:	607a      	str	r2, [r7, #4]
 80080c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80080d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	683a      	ldr	r2, [r7, #0]
 80080dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	2b40      	cmp	r3, #64	; 0x40
 80080e4:	d108      	bne.n	80080f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	68ba      	ldr	r2, [r7, #8]
 80080f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80080f6:	e007      	b.n	8008108 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	68ba      	ldr	r2, [r7, #8]
 80080fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	60da      	str	r2, [r3, #12]
}
 8008108:	bf00      	nop
 800810a:	3714      	adds	r7, #20
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr

08008114 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008114:	b480      	push	{r7}
 8008116:	b085      	sub	sp, #20
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	b2db      	uxtb	r3, r3
 8008122:	3b10      	subs	r3, #16
 8008124:	4a14      	ldr	r2, [pc, #80]	; (8008178 <DMA_CalcBaseAndBitshift+0x64>)
 8008126:	fba2 2303 	umull	r2, r3, r2, r3
 800812a:	091b      	lsrs	r3, r3, #4
 800812c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800812e:	4a13      	ldr	r2, [pc, #76]	; (800817c <DMA_CalcBaseAndBitshift+0x68>)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	4413      	add	r3, r2
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	461a      	mov	r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2b03      	cmp	r3, #3
 8008140:	d909      	bls.n	8008156 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800814a:	f023 0303 	bic.w	r3, r3, #3
 800814e:	1d1a      	adds	r2, r3, #4
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	659a      	str	r2, [r3, #88]	; 0x58
 8008154:	e007      	b.n	8008166 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800815e:	f023 0303 	bic.w	r3, r3, #3
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800816a:	4618      	mov	r0, r3
 800816c:	3714      	adds	r7, #20
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr
 8008176:	bf00      	nop
 8008178:	aaaaaaab 	.word	0xaaaaaaab
 800817c:	0800e218 	.word	0x0800e218

08008180 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008180:	b480      	push	{r7}
 8008182:	b085      	sub	sp, #20
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008188:	2300      	movs	r3, #0
 800818a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008190:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	699b      	ldr	r3, [r3, #24]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d11f      	bne.n	80081da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	2b03      	cmp	r3, #3
 800819e:	d856      	bhi.n	800824e <DMA_CheckFifoParam+0xce>
 80081a0:	a201      	add	r2, pc, #4	; (adr r2, 80081a8 <DMA_CheckFifoParam+0x28>)
 80081a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081a6:	bf00      	nop
 80081a8:	080081b9 	.word	0x080081b9
 80081ac:	080081cb 	.word	0x080081cb
 80081b0:	080081b9 	.word	0x080081b9
 80081b4:	0800824f 	.word	0x0800824f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d046      	beq.n	8008252 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80081c4:	2301      	movs	r3, #1
 80081c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80081c8:	e043      	b.n	8008252 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80081d2:	d140      	bne.n	8008256 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80081d4:	2301      	movs	r3, #1
 80081d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80081d8:	e03d      	b.n	8008256 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	699b      	ldr	r3, [r3, #24]
 80081de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081e2:	d121      	bne.n	8008228 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	2b03      	cmp	r3, #3
 80081e8:	d837      	bhi.n	800825a <DMA_CheckFifoParam+0xda>
 80081ea:	a201      	add	r2, pc, #4	; (adr r2, 80081f0 <DMA_CheckFifoParam+0x70>)
 80081ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f0:	08008201 	.word	0x08008201
 80081f4:	08008207 	.word	0x08008207
 80081f8:	08008201 	.word	0x08008201
 80081fc:	08008219 	.word	0x08008219
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008200:	2301      	movs	r3, #1
 8008202:	73fb      	strb	r3, [r7, #15]
      break;
 8008204:	e030      	b.n	8008268 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800820e:	2b00      	cmp	r3, #0
 8008210:	d025      	beq.n	800825e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008212:	2301      	movs	r3, #1
 8008214:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008216:	e022      	b.n	800825e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800821c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008220:	d11f      	bne.n	8008262 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008222:	2301      	movs	r3, #1
 8008224:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008226:	e01c      	b.n	8008262 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	2b02      	cmp	r3, #2
 800822c:	d903      	bls.n	8008236 <DMA_CheckFifoParam+0xb6>
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	2b03      	cmp	r3, #3
 8008232:	d003      	beq.n	800823c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008234:	e018      	b.n	8008268 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	73fb      	strb	r3, [r7, #15]
      break;
 800823a:	e015      	b.n	8008268 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008240:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008244:	2b00      	cmp	r3, #0
 8008246:	d00e      	beq.n	8008266 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008248:	2301      	movs	r3, #1
 800824a:	73fb      	strb	r3, [r7, #15]
      break;
 800824c:	e00b      	b.n	8008266 <DMA_CheckFifoParam+0xe6>
      break;
 800824e:	bf00      	nop
 8008250:	e00a      	b.n	8008268 <DMA_CheckFifoParam+0xe8>
      break;
 8008252:	bf00      	nop
 8008254:	e008      	b.n	8008268 <DMA_CheckFifoParam+0xe8>
      break;
 8008256:	bf00      	nop
 8008258:	e006      	b.n	8008268 <DMA_CheckFifoParam+0xe8>
      break;
 800825a:	bf00      	nop
 800825c:	e004      	b.n	8008268 <DMA_CheckFifoParam+0xe8>
      break;
 800825e:	bf00      	nop
 8008260:	e002      	b.n	8008268 <DMA_CheckFifoParam+0xe8>
      break;   
 8008262:	bf00      	nop
 8008264:	e000      	b.n	8008268 <DMA_CheckFifoParam+0xe8>
      break;
 8008266:	bf00      	nop
    }
  } 
  
  return status; 
 8008268:	7bfb      	ldrb	r3, [r7, #15]
}
 800826a:	4618      	mov	r0, r3
 800826c:	3714      	adds	r7, #20
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr
 8008276:	bf00      	nop

08008278 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008278:	b480      	push	{r7}
 800827a:	b089      	sub	sp, #36	; 0x24
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008282:	2300      	movs	r3, #0
 8008284:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008286:	2300      	movs	r3, #0
 8008288:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800828a:	2300      	movs	r3, #0
 800828c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800828e:	2300      	movs	r3, #0
 8008290:	61fb      	str	r3, [r7, #28]
 8008292:	e16b      	b.n	800856c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008294:	2201      	movs	r2, #1
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	fa02 f303 	lsl.w	r3, r2, r3
 800829c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	697a      	ldr	r2, [r7, #20]
 80082a4:	4013      	ands	r3, r2
 80082a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80082a8:	693a      	ldr	r2, [r7, #16]
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	429a      	cmp	r2, r3
 80082ae:	f040 815a 	bne.w	8008566 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	f003 0303 	and.w	r3, r3, #3
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d005      	beq.n	80082ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80082c6:	2b02      	cmp	r3, #2
 80082c8:	d130      	bne.n	800832c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80082d0:	69fb      	ldr	r3, [r7, #28]
 80082d2:	005b      	lsls	r3, r3, #1
 80082d4:	2203      	movs	r2, #3
 80082d6:	fa02 f303 	lsl.w	r3, r2, r3
 80082da:	43db      	mvns	r3, r3
 80082dc:	69ba      	ldr	r2, [r7, #24]
 80082de:	4013      	ands	r3, r2
 80082e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	68da      	ldr	r2, [r3, #12]
 80082e6:	69fb      	ldr	r3, [r7, #28]
 80082e8:	005b      	lsls	r3, r3, #1
 80082ea:	fa02 f303 	lsl.w	r3, r2, r3
 80082ee:	69ba      	ldr	r2, [r7, #24]
 80082f0:	4313      	orrs	r3, r2
 80082f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	69ba      	ldr	r2, [r7, #24]
 80082f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008300:	2201      	movs	r2, #1
 8008302:	69fb      	ldr	r3, [r7, #28]
 8008304:	fa02 f303 	lsl.w	r3, r2, r3
 8008308:	43db      	mvns	r3, r3
 800830a:	69ba      	ldr	r2, [r7, #24]
 800830c:	4013      	ands	r3, r2
 800830e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	091b      	lsrs	r3, r3, #4
 8008316:	f003 0201 	and.w	r2, r3, #1
 800831a:	69fb      	ldr	r3, [r7, #28]
 800831c:	fa02 f303 	lsl.w	r3, r2, r3
 8008320:	69ba      	ldr	r2, [r7, #24]
 8008322:	4313      	orrs	r3, r2
 8008324:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	69ba      	ldr	r2, [r7, #24]
 800832a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	f003 0303 	and.w	r3, r3, #3
 8008334:	2b03      	cmp	r3, #3
 8008336:	d017      	beq.n	8008368 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	68db      	ldr	r3, [r3, #12]
 800833c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800833e:	69fb      	ldr	r3, [r7, #28]
 8008340:	005b      	lsls	r3, r3, #1
 8008342:	2203      	movs	r2, #3
 8008344:	fa02 f303 	lsl.w	r3, r2, r3
 8008348:	43db      	mvns	r3, r3
 800834a:	69ba      	ldr	r2, [r7, #24]
 800834c:	4013      	ands	r3, r2
 800834e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	689a      	ldr	r2, [r3, #8]
 8008354:	69fb      	ldr	r3, [r7, #28]
 8008356:	005b      	lsls	r3, r3, #1
 8008358:	fa02 f303 	lsl.w	r3, r2, r3
 800835c:	69ba      	ldr	r2, [r7, #24]
 800835e:	4313      	orrs	r3, r2
 8008360:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	69ba      	ldr	r2, [r7, #24]
 8008366:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	f003 0303 	and.w	r3, r3, #3
 8008370:	2b02      	cmp	r3, #2
 8008372:	d123      	bne.n	80083bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	08da      	lsrs	r2, r3, #3
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	3208      	adds	r2, #8
 800837c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008380:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	f003 0307 	and.w	r3, r3, #7
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	220f      	movs	r2, #15
 800838c:	fa02 f303 	lsl.w	r3, r2, r3
 8008390:	43db      	mvns	r3, r3
 8008392:	69ba      	ldr	r2, [r7, #24]
 8008394:	4013      	ands	r3, r2
 8008396:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	691a      	ldr	r2, [r3, #16]
 800839c:	69fb      	ldr	r3, [r7, #28]
 800839e:	f003 0307 	and.w	r3, r3, #7
 80083a2:	009b      	lsls	r3, r3, #2
 80083a4:	fa02 f303 	lsl.w	r3, r2, r3
 80083a8:	69ba      	ldr	r2, [r7, #24]
 80083aa:	4313      	orrs	r3, r2
 80083ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	08da      	lsrs	r2, r3, #3
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	3208      	adds	r2, #8
 80083b6:	69b9      	ldr	r1, [r7, #24]
 80083b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	005b      	lsls	r3, r3, #1
 80083c6:	2203      	movs	r2, #3
 80083c8:	fa02 f303 	lsl.w	r3, r2, r3
 80083cc:	43db      	mvns	r3, r3
 80083ce:	69ba      	ldr	r2, [r7, #24]
 80083d0:	4013      	ands	r3, r2
 80083d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	f003 0203 	and.w	r2, r3, #3
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	005b      	lsls	r3, r3, #1
 80083e0:	fa02 f303 	lsl.w	r3, r2, r3
 80083e4:	69ba      	ldr	r2, [r7, #24]
 80083e6:	4313      	orrs	r3, r2
 80083e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	69ba      	ldr	r2, [r7, #24]
 80083ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	f000 80b4 	beq.w	8008566 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80083fe:	2300      	movs	r3, #0
 8008400:	60fb      	str	r3, [r7, #12]
 8008402:	4b60      	ldr	r3, [pc, #384]	; (8008584 <HAL_GPIO_Init+0x30c>)
 8008404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008406:	4a5f      	ldr	r2, [pc, #380]	; (8008584 <HAL_GPIO_Init+0x30c>)
 8008408:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800840c:	6453      	str	r3, [r2, #68]	; 0x44
 800840e:	4b5d      	ldr	r3, [pc, #372]	; (8008584 <HAL_GPIO_Init+0x30c>)
 8008410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008412:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008416:	60fb      	str	r3, [r7, #12]
 8008418:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800841a:	4a5b      	ldr	r2, [pc, #364]	; (8008588 <HAL_GPIO_Init+0x310>)
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	089b      	lsrs	r3, r3, #2
 8008420:	3302      	adds	r3, #2
 8008422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008426:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008428:	69fb      	ldr	r3, [r7, #28]
 800842a:	f003 0303 	and.w	r3, r3, #3
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	220f      	movs	r2, #15
 8008432:	fa02 f303 	lsl.w	r3, r2, r3
 8008436:	43db      	mvns	r3, r3
 8008438:	69ba      	ldr	r2, [r7, #24]
 800843a:	4013      	ands	r3, r2
 800843c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	4a52      	ldr	r2, [pc, #328]	; (800858c <HAL_GPIO_Init+0x314>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d02b      	beq.n	800849e <HAL_GPIO_Init+0x226>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	4a51      	ldr	r2, [pc, #324]	; (8008590 <HAL_GPIO_Init+0x318>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d025      	beq.n	800849a <HAL_GPIO_Init+0x222>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4a50      	ldr	r2, [pc, #320]	; (8008594 <HAL_GPIO_Init+0x31c>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d01f      	beq.n	8008496 <HAL_GPIO_Init+0x21e>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	4a4f      	ldr	r2, [pc, #316]	; (8008598 <HAL_GPIO_Init+0x320>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d019      	beq.n	8008492 <HAL_GPIO_Init+0x21a>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	4a4e      	ldr	r2, [pc, #312]	; (800859c <HAL_GPIO_Init+0x324>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d013      	beq.n	800848e <HAL_GPIO_Init+0x216>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4a4d      	ldr	r2, [pc, #308]	; (80085a0 <HAL_GPIO_Init+0x328>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d00d      	beq.n	800848a <HAL_GPIO_Init+0x212>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4a4c      	ldr	r2, [pc, #304]	; (80085a4 <HAL_GPIO_Init+0x32c>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d007      	beq.n	8008486 <HAL_GPIO_Init+0x20e>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	4a4b      	ldr	r2, [pc, #300]	; (80085a8 <HAL_GPIO_Init+0x330>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d101      	bne.n	8008482 <HAL_GPIO_Init+0x20a>
 800847e:	2307      	movs	r3, #7
 8008480:	e00e      	b.n	80084a0 <HAL_GPIO_Init+0x228>
 8008482:	2308      	movs	r3, #8
 8008484:	e00c      	b.n	80084a0 <HAL_GPIO_Init+0x228>
 8008486:	2306      	movs	r3, #6
 8008488:	e00a      	b.n	80084a0 <HAL_GPIO_Init+0x228>
 800848a:	2305      	movs	r3, #5
 800848c:	e008      	b.n	80084a0 <HAL_GPIO_Init+0x228>
 800848e:	2304      	movs	r3, #4
 8008490:	e006      	b.n	80084a0 <HAL_GPIO_Init+0x228>
 8008492:	2303      	movs	r3, #3
 8008494:	e004      	b.n	80084a0 <HAL_GPIO_Init+0x228>
 8008496:	2302      	movs	r3, #2
 8008498:	e002      	b.n	80084a0 <HAL_GPIO_Init+0x228>
 800849a:	2301      	movs	r3, #1
 800849c:	e000      	b.n	80084a0 <HAL_GPIO_Init+0x228>
 800849e:	2300      	movs	r3, #0
 80084a0:	69fa      	ldr	r2, [r7, #28]
 80084a2:	f002 0203 	and.w	r2, r2, #3
 80084a6:	0092      	lsls	r2, r2, #2
 80084a8:	4093      	lsls	r3, r2
 80084aa:	69ba      	ldr	r2, [r7, #24]
 80084ac:	4313      	orrs	r3, r2
 80084ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80084b0:	4935      	ldr	r1, [pc, #212]	; (8008588 <HAL_GPIO_Init+0x310>)
 80084b2:	69fb      	ldr	r3, [r7, #28]
 80084b4:	089b      	lsrs	r3, r3, #2
 80084b6:	3302      	adds	r3, #2
 80084b8:	69ba      	ldr	r2, [r7, #24]
 80084ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80084be:	4b3b      	ldr	r3, [pc, #236]	; (80085ac <HAL_GPIO_Init+0x334>)
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	43db      	mvns	r3, r3
 80084c8:	69ba      	ldr	r2, [r7, #24]
 80084ca:	4013      	ands	r3, r2
 80084cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d003      	beq.n	80084e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80084da:	69ba      	ldr	r2, [r7, #24]
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	4313      	orrs	r3, r2
 80084e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80084e2:	4a32      	ldr	r2, [pc, #200]	; (80085ac <HAL_GPIO_Init+0x334>)
 80084e4:	69bb      	ldr	r3, [r7, #24]
 80084e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80084e8:	4b30      	ldr	r3, [pc, #192]	; (80085ac <HAL_GPIO_Init+0x334>)
 80084ea:	68db      	ldr	r3, [r3, #12]
 80084ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	43db      	mvns	r3, r3
 80084f2:	69ba      	ldr	r2, [r7, #24]
 80084f4:	4013      	ands	r3, r2
 80084f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008500:	2b00      	cmp	r3, #0
 8008502:	d003      	beq.n	800850c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008504:	69ba      	ldr	r2, [r7, #24]
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	4313      	orrs	r3, r2
 800850a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800850c:	4a27      	ldr	r2, [pc, #156]	; (80085ac <HAL_GPIO_Init+0x334>)
 800850e:	69bb      	ldr	r3, [r7, #24]
 8008510:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008512:	4b26      	ldr	r3, [pc, #152]	; (80085ac <HAL_GPIO_Init+0x334>)
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	43db      	mvns	r3, r3
 800851c:	69ba      	ldr	r2, [r7, #24]
 800851e:	4013      	ands	r3, r2
 8008520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800852a:	2b00      	cmp	r3, #0
 800852c:	d003      	beq.n	8008536 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800852e:	69ba      	ldr	r2, [r7, #24]
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	4313      	orrs	r3, r2
 8008534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008536:	4a1d      	ldr	r2, [pc, #116]	; (80085ac <HAL_GPIO_Init+0x334>)
 8008538:	69bb      	ldr	r3, [r7, #24]
 800853a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800853c:	4b1b      	ldr	r3, [pc, #108]	; (80085ac <HAL_GPIO_Init+0x334>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	43db      	mvns	r3, r3
 8008546:	69ba      	ldr	r2, [r7, #24]
 8008548:	4013      	ands	r3, r2
 800854a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008554:	2b00      	cmp	r3, #0
 8008556:	d003      	beq.n	8008560 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008558:	69ba      	ldr	r2, [r7, #24]
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	4313      	orrs	r3, r2
 800855e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008560:	4a12      	ldr	r2, [pc, #72]	; (80085ac <HAL_GPIO_Init+0x334>)
 8008562:	69bb      	ldr	r3, [r7, #24]
 8008564:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	3301      	adds	r3, #1
 800856a:	61fb      	str	r3, [r7, #28]
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	2b0f      	cmp	r3, #15
 8008570:	f67f ae90 	bls.w	8008294 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008574:	bf00      	nop
 8008576:	bf00      	nop
 8008578:	3724      	adds	r7, #36	; 0x24
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop
 8008584:	40023800 	.word	0x40023800
 8008588:	40013800 	.word	0x40013800
 800858c:	40020000 	.word	0x40020000
 8008590:	40020400 	.word	0x40020400
 8008594:	40020800 	.word	0x40020800
 8008598:	40020c00 	.word	0x40020c00
 800859c:	40021000 	.word	0x40021000
 80085a0:	40021400 	.word	0x40021400
 80085a4:	40021800 	.word	0x40021800
 80085a8:	40021c00 	.word	0x40021c00
 80085ac:	40013c00 	.word	0x40013c00

080085b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	460b      	mov	r3, r1
 80085ba:	807b      	strh	r3, [r7, #2]
 80085bc:	4613      	mov	r3, r2
 80085be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80085c0:	787b      	ldrb	r3, [r7, #1]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d003      	beq.n	80085ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80085c6:	887a      	ldrh	r2, [r7, #2]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80085cc:	e003      	b.n	80085d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80085ce:	887b      	ldrh	r3, [r7, #2]
 80085d0:	041a      	lsls	r2, r3, #16
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	619a      	str	r2, [r3, #24]
}
 80085d6:	bf00      	nop
 80085d8:	370c      	adds	r7, #12
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr
	...

080085e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b086      	sub	sp, #24
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d101      	bne.n	80085f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	e267      	b.n	8008ac6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f003 0301 	and.w	r3, r3, #1
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d075      	beq.n	80086ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008602:	4b88      	ldr	r3, [pc, #544]	; (8008824 <HAL_RCC_OscConfig+0x240>)
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	f003 030c 	and.w	r3, r3, #12
 800860a:	2b04      	cmp	r3, #4
 800860c:	d00c      	beq.n	8008628 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800860e:	4b85      	ldr	r3, [pc, #532]	; (8008824 <HAL_RCC_OscConfig+0x240>)
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008616:	2b08      	cmp	r3, #8
 8008618:	d112      	bne.n	8008640 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800861a:	4b82      	ldr	r3, [pc, #520]	; (8008824 <HAL_RCC_OscConfig+0x240>)
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008622:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008626:	d10b      	bne.n	8008640 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008628:	4b7e      	ldr	r3, [pc, #504]	; (8008824 <HAL_RCC_OscConfig+0x240>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008630:	2b00      	cmp	r3, #0
 8008632:	d05b      	beq.n	80086ec <HAL_RCC_OscConfig+0x108>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d157      	bne.n	80086ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800863c:	2301      	movs	r3, #1
 800863e:	e242      	b.n	8008ac6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008648:	d106      	bne.n	8008658 <HAL_RCC_OscConfig+0x74>
 800864a:	4b76      	ldr	r3, [pc, #472]	; (8008824 <HAL_RCC_OscConfig+0x240>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a75      	ldr	r2, [pc, #468]	; (8008824 <HAL_RCC_OscConfig+0x240>)
 8008650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008654:	6013      	str	r3, [r2, #0]
 8008656:	e01d      	b.n	8008694 <HAL_RCC_OscConfig+0xb0>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008660:	d10c      	bne.n	800867c <HAL_RCC_OscConfig+0x98>
 8008662:	4b70      	ldr	r3, [pc, #448]	; (8008824 <HAL_RCC_OscConfig+0x240>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a6f      	ldr	r2, [pc, #444]	; (8008824 <HAL_RCC_OscConfig+0x240>)
 8008668:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800866c:	6013      	str	r3, [r2, #0]
 800866e:	4b6d      	ldr	r3, [pc, #436]	; (8008824 <HAL_RCC_OscConfig+0x240>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a6c      	ldr	r2, [pc, #432]	; (8008824 <HAL_RCC_OscConfig+0x240>)
 8008674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008678:	6013      	str	r3, [r2, #0]
 800867a:	e00b      	b.n	8008694 <HAL_RCC_OscConfig+0xb0>
 800867c:	4b69      	ldr	r3, [pc, #420]	; (8008824 <HAL_RCC_OscConfig+0x240>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a68      	ldr	r2, [pc, #416]	; (8008824 <HAL_RCC_OscConfig+0x240>)
 8008682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008686:	6013      	str	r3, [r2, #0]
 8008688:	4b66      	ldr	r3, [pc, #408]	; (8008824 <HAL_RCC_OscConfig+0x240>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a65      	ldr	r2, [pc, #404]	; (8008824 <HAL_RCC_OscConfig+0x240>)
 800868e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008692:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d013      	beq.n	80086c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800869c:	f7ff f92a 	bl	80078f4 <HAL_GetTick>
 80086a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086a2:	e008      	b.n	80086b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80086a4:	f7ff f926 	bl	80078f4 <HAL_GetTick>
 80086a8:	4602      	mov	r2, r0
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	1ad3      	subs	r3, r2, r3
 80086ae:	2b64      	cmp	r3, #100	; 0x64
 80086b0:	d901      	bls.n	80086b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80086b2:	2303      	movs	r3, #3
 80086b4:	e207      	b.n	8008ac6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086b6:	4b5b      	ldr	r3, [pc, #364]	; (8008824 <HAL_RCC_OscConfig+0x240>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d0f0      	beq.n	80086a4 <HAL_RCC_OscConfig+0xc0>
 80086c2:	e014      	b.n	80086ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086c4:	f7ff f916 	bl	80078f4 <HAL_GetTick>
 80086c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80086ca:	e008      	b.n	80086de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80086cc:	f7ff f912 	bl	80078f4 <HAL_GetTick>
 80086d0:	4602      	mov	r2, r0
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	1ad3      	subs	r3, r2, r3
 80086d6:	2b64      	cmp	r3, #100	; 0x64
 80086d8:	d901      	bls.n	80086de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80086da:	2303      	movs	r3, #3
 80086dc:	e1f3      	b.n	8008ac6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80086de:	4b51      	ldr	r3, [pc, #324]	; (8008824 <HAL_RCC_OscConfig+0x240>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d1f0      	bne.n	80086cc <HAL_RCC_OscConfig+0xe8>
 80086ea:	e000      	b.n	80086ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f003 0302 	and.w	r3, r3, #2
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d063      	beq.n	80087c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80086fa:	4b4a      	ldr	r3, [pc, #296]	; (8008824 <HAL_RCC_OscConfig+0x240>)
 80086fc:	689b      	ldr	r3, [r3, #8]
 80086fe:	f003 030c 	and.w	r3, r3, #12
 8008702:	2b00      	cmp	r3, #0
 8008704:	d00b      	beq.n	800871e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008706:	4b47      	ldr	r3, [pc, #284]	; (8008824 <HAL_RCC_OscConfig+0x240>)
 8008708:	689b      	ldr	r3, [r3, #8]
 800870a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800870e:	2b08      	cmp	r3, #8
 8008710:	d11c      	bne.n	800874c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008712:	4b44      	ldr	r3, [pc, #272]	; (8008824 <HAL_RCC_OscConfig+0x240>)
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800871a:	2b00      	cmp	r3, #0
 800871c:	d116      	bne.n	800874c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800871e:	4b41      	ldr	r3, [pc, #260]	; (8008824 <HAL_RCC_OscConfig+0x240>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f003 0302 	and.w	r3, r3, #2
 8008726:	2b00      	cmp	r3, #0
 8008728:	d005      	beq.n	8008736 <HAL_RCC_OscConfig+0x152>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	2b01      	cmp	r3, #1
 8008730:	d001      	beq.n	8008736 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008732:	2301      	movs	r3, #1
 8008734:	e1c7      	b.n	8008ac6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008736:	4b3b      	ldr	r3, [pc, #236]	; (8008824 <HAL_RCC_OscConfig+0x240>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	691b      	ldr	r3, [r3, #16]
 8008742:	00db      	lsls	r3, r3, #3
 8008744:	4937      	ldr	r1, [pc, #220]	; (8008824 <HAL_RCC_OscConfig+0x240>)
 8008746:	4313      	orrs	r3, r2
 8008748:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800874a:	e03a      	b.n	80087c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	68db      	ldr	r3, [r3, #12]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d020      	beq.n	8008796 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008754:	4b34      	ldr	r3, [pc, #208]	; (8008828 <HAL_RCC_OscConfig+0x244>)
 8008756:	2201      	movs	r2, #1
 8008758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800875a:	f7ff f8cb 	bl	80078f4 <HAL_GetTick>
 800875e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008760:	e008      	b.n	8008774 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008762:	f7ff f8c7 	bl	80078f4 <HAL_GetTick>
 8008766:	4602      	mov	r2, r0
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	1ad3      	subs	r3, r2, r3
 800876c:	2b02      	cmp	r3, #2
 800876e:	d901      	bls.n	8008774 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008770:	2303      	movs	r3, #3
 8008772:	e1a8      	b.n	8008ac6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008774:	4b2b      	ldr	r3, [pc, #172]	; (8008824 <HAL_RCC_OscConfig+0x240>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f003 0302 	and.w	r3, r3, #2
 800877c:	2b00      	cmp	r3, #0
 800877e:	d0f0      	beq.n	8008762 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008780:	4b28      	ldr	r3, [pc, #160]	; (8008824 <HAL_RCC_OscConfig+0x240>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	691b      	ldr	r3, [r3, #16]
 800878c:	00db      	lsls	r3, r3, #3
 800878e:	4925      	ldr	r1, [pc, #148]	; (8008824 <HAL_RCC_OscConfig+0x240>)
 8008790:	4313      	orrs	r3, r2
 8008792:	600b      	str	r3, [r1, #0]
 8008794:	e015      	b.n	80087c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008796:	4b24      	ldr	r3, [pc, #144]	; (8008828 <HAL_RCC_OscConfig+0x244>)
 8008798:	2200      	movs	r2, #0
 800879a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800879c:	f7ff f8aa 	bl	80078f4 <HAL_GetTick>
 80087a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087a2:	e008      	b.n	80087b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80087a4:	f7ff f8a6 	bl	80078f4 <HAL_GetTick>
 80087a8:	4602      	mov	r2, r0
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	1ad3      	subs	r3, r2, r3
 80087ae:	2b02      	cmp	r3, #2
 80087b0:	d901      	bls.n	80087b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80087b2:	2303      	movs	r3, #3
 80087b4:	e187      	b.n	8008ac6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087b6:	4b1b      	ldr	r3, [pc, #108]	; (8008824 <HAL_RCC_OscConfig+0x240>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f003 0302 	and.w	r3, r3, #2
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d1f0      	bne.n	80087a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f003 0308 	and.w	r3, r3, #8
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d036      	beq.n	800883c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	695b      	ldr	r3, [r3, #20]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d016      	beq.n	8008804 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80087d6:	4b15      	ldr	r3, [pc, #84]	; (800882c <HAL_RCC_OscConfig+0x248>)
 80087d8:	2201      	movs	r2, #1
 80087da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087dc:	f7ff f88a 	bl	80078f4 <HAL_GetTick>
 80087e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80087e2:	e008      	b.n	80087f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80087e4:	f7ff f886 	bl	80078f4 <HAL_GetTick>
 80087e8:	4602      	mov	r2, r0
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	1ad3      	subs	r3, r2, r3
 80087ee:	2b02      	cmp	r3, #2
 80087f0:	d901      	bls.n	80087f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80087f2:	2303      	movs	r3, #3
 80087f4:	e167      	b.n	8008ac6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80087f6:	4b0b      	ldr	r3, [pc, #44]	; (8008824 <HAL_RCC_OscConfig+0x240>)
 80087f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087fa:	f003 0302 	and.w	r3, r3, #2
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d0f0      	beq.n	80087e4 <HAL_RCC_OscConfig+0x200>
 8008802:	e01b      	b.n	800883c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008804:	4b09      	ldr	r3, [pc, #36]	; (800882c <HAL_RCC_OscConfig+0x248>)
 8008806:	2200      	movs	r2, #0
 8008808:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800880a:	f7ff f873 	bl	80078f4 <HAL_GetTick>
 800880e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008810:	e00e      	b.n	8008830 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008812:	f7ff f86f 	bl	80078f4 <HAL_GetTick>
 8008816:	4602      	mov	r2, r0
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	1ad3      	subs	r3, r2, r3
 800881c:	2b02      	cmp	r3, #2
 800881e:	d907      	bls.n	8008830 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008820:	2303      	movs	r3, #3
 8008822:	e150      	b.n	8008ac6 <HAL_RCC_OscConfig+0x4e2>
 8008824:	40023800 	.word	0x40023800
 8008828:	42470000 	.word	0x42470000
 800882c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008830:	4b88      	ldr	r3, [pc, #544]	; (8008a54 <HAL_RCC_OscConfig+0x470>)
 8008832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008834:	f003 0302 	and.w	r3, r3, #2
 8008838:	2b00      	cmp	r3, #0
 800883a:	d1ea      	bne.n	8008812 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f003 0304 	and.w	r3, r3, #4
 8008844:	2b00      	cmp	r3, #0
 8008846:	f000 8097 	beq.w	8008978 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800884a:	2300      	movs	r3, #0
 800884c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800884e:	4b81      	ldr	r3, [pc, #516]	; (8008a54 <HAL_RCC_OscConfig+0x470>)
 8008850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008856:	2b00      	cmp	r3, #0
 8008858:	d10f      	bne.n	800887a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800885a:	2300      	movs	r3, #0
 800885c:	60bb      	str	r3, [r7, #8]
 800885e:	4b7d      	ldr	r3, [pc, #500]	; (8008a54 <HAL_RCC_OscConfig+0x470>)
 8008860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008862:	4a7c      	ldr	r2, [pc, #496]	; (8008a54 <HAL_RCC_OscConfig+0x470>)
 8008864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008868:	6413      	str	r3, [r2, #64]	; 0x40
 800886a:	4b7a      	ldr	r3, [pc, #488]	; (8008a54 <HAL_RCC_OscConfig+0x470>)
 800886c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800886e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008872:	60bb      	str	r3, [r7, #8]
 8008874:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008876:	2301      	movs	r3, #1
 8008878:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800887a:	4b77      	ldr	r3, [pc, #476]	; (8008a58 <HAL_RCC_OscConfig+0x474>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008882:	2b00      	cmp	r3, #0
 8008884:	d118      	bne.n	80088b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008886:	4b74      	ldr	r3, [pc, #464]	; (8008a58 <HAL_RCC_OscConfig+0x474>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a73      	ldr	r2, [pc, #460]	; (8008a58 <HAL_RCC_OscConfig+0x474>)
 800888c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008890:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008892:	f7ff f82f 	bl	80078f4 <HAL_GetTick>
 8008896:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008898:	e008      	b.n	80088ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800889a:	f7ff f82b 	bl	80078f4 <HAL_GetTick>
 800889e:	4602      	mov	r2, r0
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	1ad3      	subs	r3, r2, r3
 80088a4:	2b02      	cmp	r3, #2
 80088a6:	d901      	bls.n	80088ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80088a8:	2303      	movs	r3, #3
 80088aa:	e10c      	b.n	8008ac6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088ac:	4b6a      	ldr	r3, [pc, #424]	; (8008a58 <HAL_RCC_OscConfig+0x474>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d0f0      	beq.n	800889a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	689b      	ldr	r3, [r3, #8]
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d106      	bne.n	80088ce <HAL_RCC_OscConfig+0x2ea>
 80088c0:	4b64      	ldr	r3, [pc, #400]	; (8008a54 <HAL_RCC_OscConfig+0x470>)
 80088c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088c4:	4a63      	ldr	r2, [pc, #396]	; (8008a54 <HAL_RCC_OscConfig+0x470>)
 80088c6:	f043 0301 	orr.w	r3, r3, #1
 80088ca:	6713      	str	r3, [r2, #112]	; 0x70
 80088cc:	e01c      	b.n	8008908 <HAL_RCC_OscConfig+0x324>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	689b      	ldr	r3, [r3, #8]
 80088d2:	2b05      	cmp	r3, #5
 80088d4:	d10c      	bne.n	80088f0 <HAL_RCC_OscConfig+0x30c>
 80088d6:	4b5f      	ldr	r3, [pc, #380]	; (8008a54 <HAL_RCC_OscConfig+0x470>)
 80088d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088da:	4a5e      	ldr	r2, [pc, #376]	; (8008a54 <HAL_RCC_OscConfig+0x470>)
 80088dc:	f043 0304 	orr.w	r3, r3, #4
 80088e0:	6713      	str	r3, [r2, #112]	; 0x70
 80088e2:	4b5c      	ldr	r3, [pc, #368]	; (8008a54 <HAL_RCC_OscConfig+0x470>)
 80088e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088e6:	4a5b      	ldr	r2, [pc, #364]	; (8008a54 <HAL_RCC_OscConfig+0x470>)
 80088e8:	f043 0301 	orr.w	r3, r3, #1
 80088ec:	6713      	str	r3, [r2, #112]	; 0x70
 80088ee:	e00b      	b.n	8008908 <HAL_RCC_OscConfig+0x324>
 80088f0:	4b58      	ldr	r3, [pc, #352]	; (8008a54 <HAL_RCC_OscConfig+0x470>)
 80088f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088f4:	4a57      	ldr	r2, [pc, #348]	; (8008a54 <HAL_RCC_OscConfig+0x470>)
 80088f6:	f023 0301 	bic.w	r3, r3, #1
 80088fa:	6713      	str	r3, [r2, #112]	; 0x70
 80088fc:	4b55      	ldr	r3, [pc, #340]	; (8008a54 <HAL_RCC_OscConfig+0x470>)
 80088fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008900:	4a54      	ldr	r2, [pc, #336]	; (8008a54 <HAL_RCC_OscConfig+0x470>)
 8008902:	f023 0304 	bic.w	r3, r3, #4
 8008906:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d015      	beq.n	800893c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008910:	f7fe fff0 	bl	80078f4 <HAL_GetTick>
 8008914:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008916:	e00a      	b.n	800892e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008918:	f7fe ffec 	bl	80078f4 <HAL_GetTick>
 800891c:	4602      	mov	r2, r0
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	1ad3      	subs	r3, r2, r3
 8008922:	f241 3288 	movw	r2, #5000	; 0x1388
 8008926:	4293      	cmp	r3, r2
 8008928:	d901      	bls.n	800892e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800892a:	2303      	movs	r3, #3
 800892c:	e0cb      	b.n	8008ac6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800892e:	4b49      	ldr	r3, [pc, #292]	; (8008a54 <HAL_RCC_OscConfig+0x470>)
 8008930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008932:	f003 0302 	and.w	r3, r3, #2
 8008936:	2b00      	cmp	r3, #0
 8008938:	d0ee      	beq.n	8008918 <HAL_RCC_OscConfig+0x334>
 800893a:	e014      	b.n	8008966 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800893c:	f7fe ffda 	bl	80078f4 <HAL_GetTick>
 8008940:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008942:	e00a      	b.n	800895a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008944:	f7fe ffd6 	bl	80078f4 <HAL_GetTick>
 8008948:	4602      	mov	r2, r0
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	1ad3      	subs	r3, r2, r3
 800894e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008952:	4293      	cmp	r3, r2
 8008954:	d901      	bls.n	800895a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008956:	2303      	movs	r3, #3
 8008958:	e0b5      	b.n	8008ac6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800895a:	4b3e      	ldr	r3, [pc, #248]	; (8008a54 <HAL_RCC_OscConfig+0x470>)
 800895c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800895e:	f003 0302 	and.w	r3, r3, #2
 8008962:	2b00      	cmp	r3, #0
 8008964:	d1ee      	bne.n	8008944 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008966:	7dfb      	ldrb	r3, [r7, #23]
 8008968:	2b01      	cmp	r3, #1
 800896a:	d105      	bne.n	8008978 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800896c:	4b39      	ldr	r3, [pc, #228]	; (8008a54 <HAL_RCC_OscConfig+0x470>)
 800896e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008970:	4a38      	ldr	r2, [pc, #224]	; (8008a54 <HAL_RCC_OscConfig+0x470>)
 8008972:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008976:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	699b      	ldr	r3, [r3, #24]
 800897c:	2b00      	cmp	r3, #0
 800897e:	f000 80a1 	beq.w	8008ac4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008982:	4b34      	ldr	r3, [pc, #208]	; (8008a54 <HAL_RCC_OscConfig+0x470>)
 8008984:	689b      	ldr	r3, [r3, #8]
 8008986:	f003 030c 	and.w	r3, r3, #12
 800898a:	2b08      	cmp	r3, #8
 800898c:	d05c      	beq.n	8008a48 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	699b      	ldr	r3, [r3, #24]
 8008992:	2b02      	cmp	r3, #2
 8008994:	d141      	bne.n	8008a1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008996:	4b31      	ldr	r3, [pc, #196]	; (8008a5c <HAL_RCC_OscConfig+0x478>)
 8008998:	2200      	movs	r2, #0
 800899a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800899c:	f7fe ffaa 	bl	80078f4 <HAL_GetTick>
 80089a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089a2:	e008      	b.n	80089b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089a4:	f7fe ffa6 	bl	80078f4 <HAL_GetTick>
 80089a8:	4602      	mov	r2, r0
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	1ad3      	subs	r3, r2, r3
 80089ae:	2b02      	cmp	r3, #2
 80089b0:	d901      	bls.n	80089b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80089b2:	2303      	movs	r3, #3
 80089b4:	e087      	b.n	8008ac6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089b6:	4b27      	ldr	r3, [pc, #156]	; (8008a54 <HAL_RCC_OscConfig+0x470>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d1f0      	bne.n	80089a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	69da      	ldr	r2, [r3, #28]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6a1b      	ldr	r3, [r3, #32]
 80089ca:	431a      	orrs	r2, r3
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d0:	019b      	lsls	r3, r3, #6
 80089d2:	431a      	orrs	r2, r3
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089d8:	085b      	lsrs	r3, r3, #1
 80089da:	3b01      	subs	r3, #1
 80089dc:	041b      	lsls	r3, r3, #16
 80089de:	431a      	orrs	r2, r3
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e4:	061b      	lsls	r3, r3, #24
 80089e6:	491b      	ldr	r1, [pc, #108]	; (8008a54 <HAL_RCC_OscConfig+0x470>)
 80089e8:	4313      	orrs	r3, r2
 80089ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80089ec:	4b1b      	ldr	r3, [pc, #108]	; (8008a5c <HAL_RCC_OscConfig+0x478>)
 80089ee:	2201      	movs	r2, #1
 80089f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089f2:	f7fe ff7f 	bl	80078f4 <HAL_GetTick>
 80089f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80089f8:	e008      	b.n	8008a0c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089fa:	f7fe ff7b 	bl	80078f4 <HAL_GetTick>
 80089fe:	4602      	mov	r2, r0
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	1ad3      	subs	r3, r2, r3
 8008a04:	2b02      	cmp	r3, #2
 8008a06:	d901      	bls.n	8008a0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008a08:	2303      	movs	r3, #3
 8008a0a:	e05c      	b.n	8008ac6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a0c:	4b11      	ldr	r3, [pc, #68]	; (8008a54 <HAL_RCC_OscConfig+0x470>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d0f0      	beq.n	80089fa <HAL_RCC_OscConfig+0x416>
 8008a18:	e054      	b.n	8008ac4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a1a:	4b10      	ldr	r3, [pc, #64]	; (8008a5c <HAL_RCC_OscConfig+0x478>)
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a20:	f7fe ff68 	bl	80078f4 <HAL_GetTick>
 8008a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a26:	e008      	b.n	8008a3a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a28:	f7fe ff64 	bl	80078f4 <HAL_GetTick>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	1ad3      	subs	r3, r2, r3
 8008a32:	2b02      	cmp	r3, #2
 8008a34:	d901      	bls.n	8008a3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008a36:	2303      	movs	r3, #3
 8008a38:	e045      	b.n	8008ac6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a3a:	4b06      	ldr	r3, [pc, #24]	; (8008a54 <HAL_RCC_OscConfig+0x470>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d1f0      	bne.n	8008a28 <HAL_RCC_OscConfig+0x444>
 8008a46:	e03d      	b.n	8008ac4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	699b      	ldr	r3, [r3, #24]
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d107      	bne.n	8008a60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008a50:	2301      	movs	r3, #1
 8008a52:	e038      	b.n	8008ac6 <HAL_RCC_OscConfig+0x4e2>
 8008a54:	40023800 	.word	0x40023800
 8008a58:	40007000 	.word	0x40007000
 8008a5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008a60:	4b1b      	ldr	r3, [pc, #108]	; (8008ad0 <HAL_RCC_OscConfig+0x4ec>)
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	699b      	ldr	r3, [r3, #24]
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	d028      	beq.n	8008ac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d121      	bne.n	8008ac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d11a      	bne.n	8008ac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008a8a:	68fa      	ldr	r2, [r7, #12]
 8008a8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008a90:	4013      	ands	r3, r2
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008a96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d111      	bne.n	8008ac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aa6:	085b      	lsrs	r3, r3, #1
 8008aa8:	3b01      	subs	r3, #1
 8008aaa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d107      	bne.n	8008ac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d001      	beq.n	8008ac4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	e000      	b.n	8008ac6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008ac4:	2300      	movs	r3, #0
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3718      	adds	r7, #24
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	40023800 	.word	0x40023800

08008ad4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d101      	bne.n	8008ae8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	e0cc      	b.n	8008c82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008ae8:	4b68      	ldr	r3, [pc, #416]	; (8008c8c <HAL_RCC_ClockConfig+0x1b8>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f003 0307 	and.w	r3, r3, #7
 8008af0:	683a      	ldr	r2, [r7, #0]
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d90c      	bls.n	8008b10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008af6:	4b65      	ldr	r3, [pc, #404]	; (8008c8c <HAL_RCC_ClockConfig+0x1b8>)
 8008af8:	683a      	ldr	r2, [r7, #0]
 8008afa:	b2d2      	uxtb	r2, r2
 8008afc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008afe:	4b63      	ldr	r3, [pc, #396]	; (8008c8c <HAL_RCC_ClockConfig+0x1b8>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f003 0307 	and.w	r3, r3, #7
 8008b06:	683a      	ldr	r2, [r7, #0]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d001      	beq.n	8008b10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	e0b8      	b.n	8008c82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f003 0302 	and.w	r3, r3, #2
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d020      	beq.n	8008b5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f003 0304 	and.w	r3, r3, #4
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d005      	beq.n	8008b34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008b28:	4b59      	ldr	r3, [pc, #356]	; (8008c90 <HAL_RCC_ClockConfig+0x1bc>)
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	4a58      	ldr	r2, [pc, #352]	; (8008c90 <HAL_RCC_ClockConfig+0x1bc>)
 8008b2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008b32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f003 0308 	and.w	r3, r3, #8
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d005      	beq.n	8008b4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008b40:	4b53      	ldr	r3, [pc, #332]	; (8008c90 <HAL_RCC_ClockConfig+0x1bc>)
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	4a52      	ldr	r2, [pc, #328]	; (8008c90 <HAL_RCC_ClockConfig+0x1bc>)
 8008b46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008b4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b4c:	4b50      	ldr	r3, [pc, #320]	; (8008c90 <HAL_RCC_ClockConfig+0x1bc>)
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	494d      	ldr	r1, [pc, #308]	; (8008c90 <HAL_RCC_ClockConfig+0x1bc>)
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f003 0301 	and.w	r3, r3, #1
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d044      	beq.n	8008bf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	d107      	bne.n	8008b82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b72:	4b47      	ldr	r3, [pc, #284]	; (8008c90 <HAL_RCC_ClockConfig+0x1bc>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d119      	bne.n	8008bb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e07f      	b.n	8008c82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	2b02      	cmp	r3, #2
 8008b88:	d003      	beq.n	8008b92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008b8e:	2b03      	cmp	r3, #3
 8008b90:	d107      	bne.n	8008ba2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b92:	4b3f      	ldr	r3, [pc, #252]	; (8008c90 <HAL_RCC_ClockConfig+0x1bc>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d109      	bne.n	8008bb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e06f      	b.n	8008c82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ba2:	4b3b      	ldr	r3, [pc, #236]	; (8008c90 <HAL_RCC_ClockConfig+0x1bc>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f003 0302 	and.w	r3, r3, #2
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d101      	bne.n	8008bb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	e067      	b.n	8008c82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008bb2:	4b37      	ldr	r3, [pc, #220]	; (8008c90 <HAL_RCC_ClockConfig+0x1bc>)
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	f023 0203 	bic.w	r2, r3, #3
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	4934      	ldr	r1, [pc, #208]	; (8008c90 <HAL_RCC_ClockConfig+0x1bc>)
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008bc4:	f7fe fe96 	bl	80078f4 <HAL_GetTick>
 8008bc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bca:	e00a      	b.n	8008be2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008bcc:	f7fe fe92 	bl	80078f4 <HAL_GetTick>
 8008bd0:	4602      	mov	r2, r0
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	1ad3      	subs	r3, r2, r3
 8008bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d901      	bls.n	8008be2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008bde:	2303      	movs	r3, #3
 8008be0:	e04f      	b.n	8008c82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008be2:	4b2b      	ldr	r3, [pc, #172]	; (8008c90 <HAL_RCC_ClockConfig+0x1bc>)
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	f003 020c 	and.w	r2, r3, #12
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	009b      	lsls	r3, r3, #2
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d1eb      	bne.n	8008bcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008bf4:	4b25      	ldr	r3, [pc, #148]	; (8008c8c <HAL_RCC_ClockConfig+0x1b8>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f003 0307 	and.w	r3, r3, #7
 8008bfc:	683a      	ldr	r2, [r7, #0]
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d20c      	bcs.n	8008c1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c02:	4b22      	ldr	r3, [pc, #136]	; (8008c8c <HAL_RCC_ClockConfig+0x1b8>)
 8008c04:	683a      	ldr	r2, [r7, #0]
 8008c06:	b2d2      	uxtb	r2, r2
 8008c08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c0a:	4b20      	ldr	r3, [pc, #128]	; (8008c8c <HAL_RCC_ClockConfig+0x1b8>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f003 0307 	and.w	r3, r3, #7
 8008c12:	683a      	ldr	r2, [r7, #0]
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d001      	beq.n	8008c1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	e032      	b.n	8008c82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f003 0304 	and.w	r3, r3, #4
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d008      	beq.n	8008c3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008c28:	4b19      	ldr	r3, [pc, #100]	; (8008c90 <HAL_RCC_ClockConfig+0x1bc>)
 8008c2a:	689b      	ldr	r3, [r3, #8]
 8008c2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	68db      	ldr	r3, [r3, #12]
 8008c34:	4916      	ldr	r1, [pc, #88]	; (8008c90 <HAL_RCC_ClockConfig+0x1bc>)
 8008c36:	4313      	orrs	r3, r2
 8008c38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f003 0308 	and.w	r3, r3, #8
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d009      	beq.n	8008c5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008c46:	4b12      	ldr	r3, [pc, #72]	; (8008c90 <HAL_RCC_ClockConfig+0x1bc>)
 8008c48:	689b      	ldr	r3, [r3, #8]
 8008c4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	691b      	ldr	r3, [r3, #16]
 8008c52:	00db      	lsls	r3, r3, #3
 8008c54:	490e      	ldr	r1, [pc, #56]	; (8008c90 <HAL_RCC_ClockConfig+0x1bc>)
 8008c56:	4313      	orrs	r3, r2
 8008c58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008c5a:	f000 f821 	bl	8008ca0 <HAL_RCC_GetSysClockFreq>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	4b0b      	ldr	r3, [pc, #44]	; (8008c90 <HAL_RCC_ClockConfig+0x1bc>)
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	091b      	lsrs	r3, r3, #4
 8008c66:	f003 030f 	and.w	r3, r3, #15
 8008c6a:	490a      	ldr	r1, [pc, #40]	; (8008c94 <HAL_RCC_ClockConfig+0x1c0>)
 8008c6c:	5ccb      	ldrb	r3, [r1, r3]
 8008c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8008c72:	4a09      	ldr	r2, [pc, #36]	; (8008c98 <HAL_RCC_ClockConfig+0x1c4>)
 8008c74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008c76:	4b09      	ldr	r3, [pc, #36]	; (8008c9c <HAL_RCC_ClockConfig+0x1c8>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f7fd fc32 	bl	80064e4 <HAL_InitTick>

  return HAL_OK;
 8008c80:	2300      	movs	r3, #0
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3710      	adds	r7, #16
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}
 8008c8a:	bf00      	nop
 8008c8c:	40023c00 	.word	0x40023c00
 8008c90:	40023800 	.word	0x40023800
 8008c94:	0800e200 	.word	0x0800e200
 8008c98:	20000024 	.word	0x20000024
 8008c9c:	20000028 	.word	0x20000028

08008ca0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ca0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ca4:	b094      	sub	sp, #80	; 0x50
 8008ca6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	647b      	str	r3, [r7, #68]	; 0x44
 8008cac:	2300      	movs	r3, #0
 8008cae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008cb8:	4b79      	ldr	r3, [pc, #484]	; (8008ea0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008cba:	689b      	ldr	r3, [r3, #8]
 8008cbc:	f003 030c 	and.w	r3, r3, #12
 8008cc0:	2b08      	cmp	r3, #8
 8008cc2:	d00d      	beq.n	8008ce0 <HAL_RCC_GetSysClockFreq+0x40>
 8008cc4:	2b08      	cmp	r3, #8
 8008cc6:	f200 80e1 	bhi.w	8008e8c <HAL_RCC_GetSysClockFreq+0x1ec>
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d002      	beq.n	8008cd4 <HAL_RCC_GetSysClockFreq+0x34>
 8008cce:	2b04      	cmp	r3, #4
 8008cd0:	d003      	beq.n	8008cda <HAL_RCC_GetSysClockFreq+0x3a>
 8008cd2:	e0db      	b.n	8008e8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008cd4:	4b73      	ldr	r3, [pc, #460]	; (8008ea4 <HAL_RCC_GetSysClockFreq+0x204>)
 8008cd6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008cd8:	e0db      	b.n	8008e92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008cda:	4b73      	ldr	r3, [pc, #460]	; (8008ea8 <HAL_RCC_GetSysClockFreq+0x208>)
 8008cdc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008cde:	e0d8      	b.n	8008e92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008ce0:	4b6f      	ldr	r3, [pc, #444]	; (8008ea0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ce8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008cea:	4b6d      	ldr	r3, [pc, #436]	; (8008ea0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d063      	beq.n	8008dbe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008cf6:	4b6a      	ldr	r3, [pc, #424]	; (8008ea0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	099b      	lsrs	r3, r3, #6
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d00:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d08:	633b      	str	r3, [r7, #48]	; 0x30
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	637b      	str	r3, [r7, #52]	; 0x34
 8008d0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008d12:	4622      	mov	r2, r4
 8008d14:	462b      	mov	r3, r5
 8008d16:	f04f 0000 	mov.w	r0, #0
 8008d1a:	f04f 0100 	mov.w	r1, #0
 8008d1e:	0159      	lsls	r1, r3, #5
 8008d20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008d24:	0150      	lsls	r0, r2, #5
 8008d26:	4602      	mov	r2, r0
 8008d28:	460b      	mov	r3, r1
 8008d2a:	4621      	mov	r1, r4
 8008d2c:	1a51      	subs	r1, r2, r1
 8008d2e:	6139      	str	r1, [r7, #16]
 8008d30:	4629      	mov	r1, r5
 8008d32:	eb63 0301 	sbc.w	r3, r3, r1
 8008d36:	617b      	str	r3, [r7, #20]
 8008d38:	f04f 0200 	mov.w	r2, #0
 8008d3c:	f04f 0300 	mov.w	r3, #0
 8008d40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008d44:	4659      	mov	r1, fp
 8008d46:	018b      	lsls	r3, r1, #6
 8008d48:	4651      	mov	r1, sl
 8008d4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008d4e:	4651      	mov	r1, sl
 8008d50:	018a      	lsls	r2, r1, #6
 8008d52:	4651      	mov	r1, sl
 8008d54:	ebb2 0801 	subs.w	r8, r2, r1
 8008d58:	4659      	mov	r1, fp
 8008d5a:	eb63 0901 	sbc.w	r9, r3, r1
 8008d5e:	f04f 0200 	mov.w	r2, #0
 8008d62:	f04f 0300 	mov.w	r3, #0
 8008d66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008d6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008d6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008d72:	4690      	mov	r8, r2
 8008d74:	4699      	mov	r9, r3
 8008d76:	4623      	mov	r3, r4
 8008d78:	eb18 0303 	adds.w	r3, r8, r3
 8008d7c:	60bb      	str	r3, [r7, #8]
 8008d7e:	462b      	mov	r3, r5
 8008d80:	eb49 0303 	adc.w	r3, r9, r3
 8008d84:	60fb      	str	r3, [r7, #12]
 8008d86:	f04f 0200 	mov.w	r2, #0
 8008d8a:	f04f 0300 	mov.w	r3, #0
 8008d8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008d92:	4629      	mov	r1, r5
 8008d94:	024b      	lsls	r3, r1, #9
 8008d96:	4621      	mov	r1, r4
 8008d98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008d9c:	4621      	mov	r1, r4
 8008d9e:	024a      	lsls	r2, r1, #9
 8008da0:	4610      	mov	r0, r2
 8008da2:	4619      	mov	r1, r3
 8008da4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008da6:	2200      	movs	r2, #0
 8008da8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008daa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008dac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008db0:	f7f7 fee4 	bl	8000b7c <__aeabi_uldivmod>
 8008db4:	4602      	mov	r2, r0
 8008db6:	460b      	mov	r3, r1
 8008db8:	4613      	mov	r3, r2
 8008dba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008dbc:	e058      	b.n	8008e70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008dbe:	4b38      	ldr	r3, [pc, #224]	; (8008ea0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	099b      	lsrs	r3, r3, #6
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	4611      	mov	r1, r2
 8008dca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008dce:	623b      	str	r3, [r7, #32]
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8008dd4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008dd8:	4642      	mov	r2, r8
 8008dda:	464b      	mov	r3, r9
 8008ddc:	f04f 0000 	mov.w	r0, #0
 8008de0:	f04f 0100 	mov.w	r1, #0
 8008de4:	0159      	lsls	r1, r3, #5
 8008de6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008dea:	0150      	lsls	r0, r2, #5
 8008dec:	4602      	mov	r2, r0
 8008dee:	460b      	mov	r3, r1
 8008df0:	4641      	mov	r1, r8
 8008df2:	ebb2 0a01 	subs.w	sl, r2, r1
 8008df6:	4649      	mov	r1, r9
 8008df8:	eb63 0b01 	sbc.w	fp, r3, r1
 8008dfc:	f04f 0200 	mov.w	r2, #0
 8008e00:	f04f 0300 	mov.w	r3, #0
 8008e04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008e08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008e0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008e10:	ebb2 040a 	subs.w	r4, r2, sl
 8008e14:	eb63 050b 	sbc.w	r5, r3, fp
 8008e18:	f04f 0200 	mov.w	r2, #0
 8008e1c:	f04f 0300 	mov.w	r3, #0
 8008e20:	00eb      	lsls	r3, r5, #3
 8008e22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008e26:	00e2      	lsls	r2, r4, #3
 8008e28:	4614      	mov	r4, r2
 8008e2a:	461d      	mov	r5, r3
 8008e2c:	4643      	mov	r3, r8
 8008e2e:	18e3      	adds	r3, r4, r3
 8008e30:	603b      	str	r3, [r7, #0]
 8008e32:	464b      	mov	r3, r9
 8008e34:	eb45 0303 	adc.w	r3, r5, r3
 8008e38:	607b      	str	r3, [r7, #4]
 8008e3a:	f04f 0200 	mov.w	r2, #0
 8008e3e:	f04f 0300 	mov.w	r3, #0
 8008e42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008e46:	4629      	mov	r1, r5
 8008e48:	028b      	lsls	r3, r1, #10
 8008e4a:	4621      	mov	r1, r4
 8008e4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008e50:	4621      	mov	r1, r4
 8008e52:	028a      	lsls	r2, r1, #10
 8008e54:	4610      	mov	r0, r2
 8008e56:	4619      	mov	r1, r3
 8008e58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	61bb      	str	r3, [r7, #24]
 8008e5e:	61fa      	str	r2, [r7, #28]
 8008e60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e64:	f7f7 fe8a 	bl	8000b7c <__aeabi_uldivmod>
 8008e68:	4602      	mov	r2, r0
 8008e6a:	460b      	mov	r3, r1
 8008e6c:	4613      	mov	r3, r2
 8008e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008e70:	4b0b      	ldr	r3, [pc, #44]	; (8008ea0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	0c1b      	lsrs	r3, r3, #16
 8008e76:	f003 0303 	and.w	r3, r3, #3
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	005b      	lsls	r3, r3, #1
 8008e7e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008e80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008e82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008e8a:	e002      	b.n	8008e92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008e8c:	4b05      	ldr	r3, [pc, #20]	; (8008ea4 <HAL_RCC_GetSysClockFreq+0x204>)
 8008e8e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008e90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008e92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3750      	adds	r7, #80	; 0x50
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e9e:	bf00      	nop
 8008ea0:	40023800 	.word	0x40023800
 8008ea4:	00f42400 	.word	0x00f42400
 8008ea8:	007a1200 	.word	0x007a1200

08008eac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008eac:	b480      	push	{r7}
 8008eae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008eb0:	4b03      	ldr	r3, [pc, #12]	; (8008ec0 <HAL_RCC_GetHCLKFreq+0x14>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr
 8008ebe:	bf00      	nop
 8008ec0:	20000024 	.word	0x20000024

08008ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008ec8:	f7ff fff0 	bl	8008eac <HAL_RCC_GetHCLKFreq>
 8008ecc:	4602      	mov	r2, r0
 8008ece:	4b05      	ldr	r3, [pc, #20]	; (8008ee4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008ed0:	689b      	ldr	r3, [r3, #8]
 8008ed2:	0a9b      	lsrs	r3, r3, #10
 8008ed4:	f003 0307 	and.w	r3, r3, #7
 8008ed8:	4903      	ldr	r1, [pc, #12]	; (8008ee8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008eda:	5ccb      	ldrb	r3, [r1, r3]
 8008edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	40023800 	.word	0x40023800
 8008ee8:	0800e210 	.word	0x0800e210

08008eec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008ef0:	f7ff ffdc 	bl	8008eac <HAL_RCC_GetHCLKFreq>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	4b05      	ldr	r3, [pc, #20]	; (8008f0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008ef8:	689b      	ldr	r3, [r3, #8]
 8008efa:	0b5b      	lsrs	r3, r3, #13
 8008efc:	f003 0307 	and.w	r3, r3, #7
 8008f00:	4903      	ldr	r1, [pc, #12]	; (8008f10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008f02:	5ccb      	ldrb	r3, [r1, r3]
 8008f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	40023800 	.word	0x40023800
 8008f10:	0800e210 	.word	0x0800e210

08008f14 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	220f      	movs	r2, #15
 8008f22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008f24:	4b12      	ldr	r3, [pc, #72]	; (8008f70 <HAL_RCC_GetClockConfig+0x5c>)
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	f003 0203 	and.w	r2, r3, #3
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008f30:	4b0f      	ldr	r3, [pc, #60]	; (8008f70 <HAL_RCC_GetClockConfig+0x5c>)
 8008f32:	689b      	ldr	r3, [r3, #8]
 8008f34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008f3c:	4b0c      	ldr	r3, [pc, #48]	; (8008f70 <HAL_RCC_GetClockConfig+0x5c>)
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008f48:	4b09      	ldr	r3, [pc, #36]	; (8008f70 <HAL_RCC_GetClockConfig+0x5c>)
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	08db      	lsrs	r3, r3, #3
 8008f4e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008f56:	4b07      	ldr	r3, [pc, #28]	; (8008f74 <HAL_RCC_GetClockConfig+0x60>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f003 0207 	and.w	r2, r3, #7
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	601a      	str	r2, [r3, #0]
}
 8008f62:	bf00      	nop
 8008f64:	370c      	adds	r7, #12
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr
 8008f6e:	bf00      	nop
 8008f70:	40023800 	.word	0x40023800
 8008f74:	40023c00 	.word	0x40023c00

08008f78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d101      	bne.n	8008f8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f86:	2301      	movs	r3, #1
 8008f88:	e041      	b.n	800900e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d106      	bne.n	8008fa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f7fe f874 	bl	800708c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2202      	movs	r2, #2
 8008fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	3304      	adds	r3, #4
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	4610      	mov	r0, r2
 8008fb8:	f000 fdc4 	bl	8009b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2201      	movs	r2, #1
 8008fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2201      	movs	r2, #1
 8009000:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2201      	movs	r2, #1
 8009008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800900c:	2300      	movs	r3, #0
}
 800900e:	4618      	mov	r0, r3
 8009010:	3708      	adds	r7, #8
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
	...

08009018 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009018:	b480      	push	{r7}
 800901a:	b085      	sub	sp, #20
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009026:	b2db      	uxtb	r3, r3
 8009028:	2b01      	cmp	r3, #1
 800902a:	d001      	beq.n	8009030 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800902c:	2301      	movs	r3, #1
 800902e:	e04e      	b.n	80090ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2202      	movs	r2, #2
 8009034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	68da      	ldr	r2, [r3, #12]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f042 0201 	orr.w	r2, r2, #1
 8009046:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a23      	ldr	r2, [pc, #140]	; (80090dc <HAL_TIM_Base_Start_IT+0xc4>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d022      	beq.n	8009098 <HAL_TIM_Base_Start_IT+0x80>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800905a:	d01d      	beq.n	8009098 <HAL_TIM_Base_Start_IT+0x80>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a1f      	ldr	r2, [pc, #124]	; (80090e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d018      	beq.n	8009098 <HAL_TIM_Base_Start_IT+0x80>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a1e      	ldr	r2, [pc, #120]	; (80090e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d013      	beq.n	8009098 <HAL_TIM_Base_Start_IT+0x80>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a1c      	ldr	r2, [pc, #112]	; (80090e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d00e      	beq.n	8009098 <HAL_TIM_Base_Start_IT+0x80>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a1b      	ldr	r2, [pc, #108]	; (80090ec <HAL_TIM_Base_Start_IT+0xd4>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d009      	beq.n	8009098 <HAL_TIM_Base_Start_IT+0x80>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a19      	ldr	r2, [pc, #100]	; (80090f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d004      	beq.n	8009098 <HAL_TIM_Base_Start_IT+0x80>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a18      	ldr	r2, [pc, #96]	; (80090f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d111      	bne.n	80090bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	689b      	ldr	r3, [r3, #8]
 800909e:	f003 0307 	and.w	r3, r3, #7
 80090a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2b06      	cmp	r3, #6
 80090a8:	d010      	beq.n	80090cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f042 0201 	orr.w	r2, r2, #1
 80090b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090ba:	e007      	b.n	80090cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	681a      	ldr	r2, [r3, #0]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f042 0201 	orr.w	r2, r2, #1
 80090ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80090cc:	2300      	movs	r3, #0
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3714      	adds	r7, #20
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr
 80090da:	bf00      	nop
 80090dc:	40010000 	.word	0x40010000
 80090e0:	40000400 	.word	0x40000400
 80090e4:	40000800 	.word	0x40000800
 80090e8:	40000c00 	.word	0x40000c00
 80090ec:	40010400 	.word	0x40010400
 80090f0:	40014000 	.word	0x40014000
 80090f4:	40001800 	.word	0x40001800

080090f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d101      	bne.n	800910a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009106:	2301      	movs	r3, #1
 8009108:	e041      	b.n	800918e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009110:	b2db      	uxtb	r3, r3
 8009112:	2b00      	cmp	r3, #0
 8009114:	d106      	bne.n	8009124 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2200      	movs	r2, #0
 800911a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 f839 	bl	8009196 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2202      	movs	r2, #2
 8009128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	3304      	adds	r3, #4
 8009134:	4619      	mov	r1, r3
 8009136:	4610      	mov	r0, r2
 8009138:	f000 fd04 	bl	8009b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2201      	movs	r2, #1
 8009140:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2201      	movs	r2, #1
 8009148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2201      	movs	r2, #1
 8009150:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2201      	movs	r2, #1
 8009158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2201      	movs	r2, #1
 8009160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2201      	movs	r2, #1
 8009168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2201      	movs	r2, #1
 8009170:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2201      	movs	r2, #1
 8009178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2201      	movs	r2, #1
 8009180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2201      	movs	r2, #1
 8009188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800918c:	2300      	movs	r3, #0
}
 800918e:	4618      	mov	r0, r3
 8009190:	3708      	adds	r7, #8
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}

08009196 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009196:	b480      	push	{r7}
 8009198:	b083      	sub	sp, #12
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800919e:	bf00      	nop
 80091a0:	370c      	adds	r7, #12
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr
	...

080091ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d109      	bne.n	80091d0 <HAL_TIM_PWM_Start+0x24>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	bf14      	ite	ne
 80091c8:	2301      	movne	r3, #1
 80091ca:	2300      	moveq	r3, #0
 80091cc:	b2db      	uxtb	r3, r3
 80091ce:	e022      	b.n	8009216 <HAL_TIM_PWM_Start+0x6a>
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	2b04      	cmp	r3, #4
 80091d4:	d109      	bne.n	80091ea <HAL_TIM_PWM_Start+0x3e>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80091dc:	b2db      	uxtb	r3, r3
 80091de:	2b01      	cmp	r3, #1
 80091e0:	bf14      	ite	ne
 80091e2:	2301      	movne	r3, #1
 80091e4:	2300      	moveq	r3, #0
 80091e6:	b2db      	uxtb	r3, r3
 80091e8:	e015      	b.n	8009216 <HAL_TIM_PWM_Start+0x6a>
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	2b08      	cmp	r3, #8
 80091ee:	d109      	bne.n	8009204 <HAL_TIM_PWM_Start+0x58>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80091f6:	b2db      	uxtb	r3, r3
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	bf14      	ite	ne
 80091fc:	2301      	movne	r3, #1
 80091fe:	2300      	moveq	r3, #0
 8009200:	b2db      	uxtb	r3, r3
 8009202:	e008      	b.n	8009216 <HAL_TIM_PWM_Start+0x6a>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800920a:	b2db      	uxtb	r3, r3
 800920c:	2b01      	cmp	r3, #1
 800920e:	bf14      	ite	ne
 8009210:	2301      	movne	r3, #1
 8009212:	2300      	moveq	r3, #0
 8009214:	b2db      	uxtb	r3, r3
 8009216:	2b00      	cmp	r3, #0
 8009218:	d001      	beq.n	800921e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800921a:	2301      	movs	r3, #1
 800921c:	e07c      	b.n	8009318 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d104      	bne.n	800922e <HAL_TIM_PWM_Start+0x82>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2202      	movs	r2, #2
 8009228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800922c:	e013      	b.n	8009256 <HAL_TIM_PWM_Start+0xaa>
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	2b04      	cmp	r3, #4
 8009232:	d104      	bne.n	800923e <HAL_TIM_PWM_Start+0x92>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2202      	movs	r2, #2
 8009238:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800923c:	e00b      	b.n	8009256 <HAL_TIM_PWM_Start+0xaa>
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	2b08      	cmp	r3, #8
 8009242:	d104      	bne.n	800924e <HAL_TIM_PWM_Start+0xa2>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2202      	movs	r2, #2
 8009248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800924c:	e003      	b.n	8009256 <HAL_TIM_PWM_Start+0xaa>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2202      	movs	r2, #2
 8009252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	2201      	movs	r2, #1
 800925c:	6839      	ldr	r1, [r7, #0]
 800925e:	4618      	mov	r0, r3
 8009260:	f000 ff5a 	bl	800a118 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a2d      	ldr	r2, [pc, #180]	; (8009320 <HAL_TIM_PWM_Start+0x174>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d004      	beq.n	8009278 <HAL_TIM_PWM_Start+0xcc>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4a2c      	ldr	r2, [pc, #176]	; (8009324 <HAL_TIM_PWM_Start+0x178>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d101      	bne.n	800927c <HAL_TIM_PWM_Start+0xd0>
 8009278:	2301      	movs	r3, #1
 800927a:	e000      	b.n	800927e <HAL_TIM_PWM_Start+0xd2>
 800927c:	2300      	movs	r3, #0
 800927e:	2b00      	cmp	r3, #0
 8009280:	d007      	beq.n	8009292 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009290:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4a22      	ldr	r2, [pc, #136]	; (8009320 <HAL_TIM_PWM_Start+0x174>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d022      	beq.n	80092e2 <HAL_TIM_PWM_Start+0x136>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092a4:	d01d      	beq.n	80092e2 <HAL_TIM_PWM_Start+0x136>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a1f      	ldr	r2, [pc, #124]	; (8009328 <HAL_TIM_PWM_Start+0x17c>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d018      	beq.n	80092e2 <HAL_TIM_PWM_Start+0x136>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a1d      	ldr	r2, [pc, #116]	; (800932c <HAL_TIM_PWM_Start+0x180>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d013      	beq.n	80092e2 <HAL_TIM_PWM_Start+0x136>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4a1c      	ldr	r2, [pc, #112]	; (8009330 <HAL_TIM_PWM_Start+0x184>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d00e      	beq.n	80092e2 <HAL_TIM_PWM_Start+0x136>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a16      	ldr	r2, [pc, #88]	; (8009324 <HAL_TIM_PWM_Start+0x178>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d009      	beq.n	80092e2 <HAL_TIM_PWM_Start+0x136>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a18      	ldr	r2, [pc, #96]	; (8009334 <HAL_TIM_PWM_Start+0x188>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d004      	beq.n	80092e2 <HAL_TIM_PWM_Start+0x136>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a16      	ldr	r2, [pc, #88]	; (8009338 <HAL_TIM_PWM_Start+0x18c>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d111      	bne.n	8009306 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	689b      	ldr	r3, [r3, #8]
 80092e8:	f003 0307 	and.w	r3, r3, #7
 80092ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2b06      	cmp	r3, #6
 80092f2:	d010      	beq.n	8009316 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f042 0201 	orr.w	r2, r2, #1
 8009302:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009304:	e007      	b.n	8009316 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	681a      	ldr	r2, [r3, #0]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f042 0201 	orr.w	r2, r2, #1
 8009314:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009316:	2300      	movs	r3, #0
}
 8009318:	4618      	mov	r0, r3
 800931a:	3710      	adds	r7, #16
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}
 8009320:	40010000 	.word	0x40010000
 8009324:	40010400 	.word	0x40010400
 8009328:	40000400 	.word	0x40000400
 800932c:	40000800 	.word	0x40000800
 8009330:	40000c00 	.word	0x40000c00
 8009334:	40014000 	.word	0x40014000
 8009338:	40001800 	.word	0x40001800

0800933c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b086      	sub	sp, #24
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d101      	bne.n	8009350 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800934c:	2301      	movs	r3, #1
 800934e:	e097      	b.n	8009480 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009356:	b2db      	uxtb	r3, r3
 8009358:	2b00      	cmp	r3, #0
 800935a:	d106      	bne.n	800936a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2200      	movs	r2, #0
 8009360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f7fd fd2b 	bl	8006dc0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2202      	movs	r2, #2
 800936e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	689b      	ldr	r3, [r3, #8]
 8009378:	687a      	ldr	r2, [r7, #4]
 800937a:	6812      	ldr	r2, [r2, #0]
 800937c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009380:	f023 0307 	bic.w	r3, r3, #7
 8009384:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	3304      	adds	r3, #4
 800938e:	4619      	mov	r1, r3
 8009390:	4610      	mov	r0, r2
 8009392:	f000 fbd7 	bl	8009b44 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	689b      	ldr	r3, [r3, #8]
 800939c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	699b      	ldr	r3, [r3, #24]
 80093a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	6a1b      	ldr	r3, [r3, #32]
 80093ac:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	697a      	ldr	r2, [r7, #20]
 80093b4:	4313      	orrs	r3, r2
 80093b6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093be:	f023 0303 	bic.w	r3, r3, #3
 80093c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	689a      	ldr	r2, [r3, #8]
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	699b      	ldr	r3, [r3, #24]
 80093cc:	021b      	lsls	r3, r3, #8
 80093ce:	4313      	orrs	r3, r2
 80093d0:	693a      	ldr	r2, [r7, #16]
 80093d2:	4313      	orrs	r3, r2
 80093d4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80093dc:	f023 030c 	bic.w	r3, r3, #12
 80093e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80093e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80093ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	68da      	ldr	r2, [r3, #12]
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	69db      	ldr	r3, [r3, #28]
 80093f6:	021b      	lsls	r3, r3, #8
 80093f8:	4313      	orrs	r3, r2
 80093fa:	693a      	ldr	r2, [r7, #16]
 80093fc:	4313      	orrs	r3, r2
 80093fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	691b      	ldr	r3, [r3, #16]
 8009404:	011a      	lsls	r2, r3, #4
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	6a1b      	ldr	r3, [r3, #32]
 800940a:	031b      	lsls	r3, r3, #12
 800940c:	4313      	orrs	r3, r2
 800940e:	693a      	ldr	r2, [r7, #16]
 8009410:	4313      	orrs	r3, r2
 8009412:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800941a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009422:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	685a      	ldr	r2, [r3, #4]
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	695b      	ldr	r3, [r3, #20]
 800942c:	011b      	lsls	r3, r3, #4
 800942e:	4313      	orrs	r3, r2
 8009430:	68fa      	ldr	r2, [r7, #12]
 8009432:	4313      	orrs	r3, r2
 8009434:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	697a      	ldr	r2, [r7, #20]
 800943c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	693a      	ldr	r2, [r7, #16]
 8009444:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	68fa      	ldr	r2, [r7, #12]
 800944c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2201      	movs	r2, #1
 8009452:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2201      	movs	r2, #1
 800945a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2201      	movs	r2, #1
 8009462:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2201      	movs	r2, #1
 800946a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2201      	movs	r2, #1
 8009472:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2201      	movs	r2, #1
 800947a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800947e:	2300      	movs	r3, #0
}
 8009480:	4618      	mov	r0, r3
 8009482:	3718      	adds	r7, #24
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b084      	sub	sp, #16
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009498:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80094a0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80094a8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80094b0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d110      	bne.n	80094da <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80094b8:	7bfb      	ldrb	r3, [r7, #15]
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	d102      	bne.n	80094c4 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80094be:	7b7b      	ldrb	r3, [r7, #13]
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	d001      	beq.n	80094c8 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80094c4:	2301      	movs	r3, #1
 80094c6:	e089      	b.n	80095dc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2202      	movs	r2, #2
 80094cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2202      	movs	r2, #2
 80094d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80094d8:	e031      	b.n	800953e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	2b04      	cmp	r3, #4
 80094de:	d110      	bne.n	8009502 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80094e0:	7bbb      	ldrb	r3, [r7, #14]
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	d102      	bne.n	80094ec <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80094e6:	7b3b      	ldrb	r3, [r7, #12]
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	d001      	beq.n	80094f0 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80094ec:	2301      	movs	r3, #1
 80094ee:	e075      	b.n	80095dc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2202      	movs	r2, #2
 80094f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2202      	movs	r2, #2
 80094fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009500:	e01d      	b.n	800953e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009502:	7bfb      	ldrb	r3, [r7, #15]
 8009504:	2b01      	cmp	r3, #1
 8009506:	d108      	bne.n	800951a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009508:	7bbb      	ldrb	r3, [r7, #14]
 800950a:	2b01      	cmp	r3, #1
 800950c:	d105      	bne.n	800951a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800950e:	7b7b      	ldrb	r3, [r7, #13]
 8009510:	2b01      	cmp	r3, #1
 8009512:	d102      	bne.n	800951a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009514:	7b3b      	ldrb	r3, [r7, #12]
 8009516:	2b01      	cmp	r3, #1
 8009518:	d001      	beq.n	800951e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800951a:	2301      	movs	r3, #1
 800951c:	e05e      	b.n	80095dc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2202      	movs	r2, #2
 8009522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2202      	movs	r2, #2
 800952a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2202      	movs	r2, #2
 8009532:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2202      	movs	r2, #2
 800953a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d003      	beq.n	800954c <HAL_TIM_Encoder_Start_IT+0xc4>
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	2b04      	cmp	r3, #4
 8009548:	d010      	beq.n	800956c <HAL_TIM_Encoder_Start_IT+0xe4>
 800954a:	e01f      	b.n	800958c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	2201      	movs	r2, #1
 8009552:	2100      	movs	r1, #0
 8009554:	4618      	mov	r0, r3
 8009556:	f000 fddf 	bl	800a118 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	68da      	ldr	r2, [r3, #12]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f042 0202 	orr.w	r2, r2, #2
 8009568:	60da      	str	r2, [r3, #12]
      break;
 800956a:	e02e      	b.n	80095ca <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	2201      	movs	r2, #1
 8009572:	2104      	movs	r1, #4
 8009574:	4618      	mov	r0, r3
 8009576:	f000 fdcf 	bl	800a118 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	68da      	ldr	r2, [r3, #12]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f042 0204 	orr.w	r2, r2, #4
 8009588:	60da      	str	r2, [r3, #12]
      break;
 800958a:	e01e      	b.n	80095ca <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	2201      	movs	r2, #1
 8009592:	2100      	movs	r1, #0
 8009594:	4618      	mov	r0, r3
 8009596:	f000 fdbf 	bl	800a118 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	2201      	movs	r2, #1
 80095a0:	2104      	movs	r1, #4
 80095a2:	4618      	mov	r0, r3
 80095a4:	f000 fdb8 	bl	800a118 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	68da      	ldr	r2, [r3, #12]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f042 0202 	orr.w	r2, r2, #2
 80095b6:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	68da      	ldr	r2, [r3, #12]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f042 0204 	orr.w	r2, r2, #4
 80095c6:	60da      	str	r2, [r3, #12]
      break;
 80095c8:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	681a      	ldr	r2, [r3, #0]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f042 0201 	orr.w	r2, r2, #1
 80095d8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80095da:	2300      	movs	r3, #0
}
 80095dc:	4618      	mov	r0, r3
 80095de:	3710      	adds	r7, #16
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}

080095e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	691b      	ldr	r3, [r3, #16]
 80095f2:	f003 0302 	and.w	r3, r3, #2
 80095f6:	2b02      	cmp	r3, #2
 80095f8:	d122      	bne.n	8009640 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	68db      	ldr	r3, [r3, #12]
 8009600:	f003 0302 	and.w	r3, r3, #2
 8009604:	2b02      	cmp	r3, #2
 8009606:	d11b      	bne.n	8009640 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f06f 0202 	mvn.w	r2, #2
 8009610:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2201      	movs	r2, #1
 8009616:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	699b      	ldr	r3, [r3, #24]
 800961e:	f003 0303 	and.w	r3, r3, #3
 8009622:	2b00      	cmp	r3, #0
 8009624:	d003      	beq.n	800962e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f7f8 fbf2 	bl	8001e10 <HAL_TIM_IC_CaptureCallback>
 800962c:	e005      	b.n	800963a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f000 fa69 	bl	8009b06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f000 fa70 	bl	8009b1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2200      	movs	r2, #0
 800963e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	691b      	ldr	r3, [r3, #16]
 8009646:	f003 0304 	and.w	r3, r3, #4
 800964a:	2b04      	cmp	r3, #4
 800964c:	d122      	bne.n	8009694 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	68db      	ldr	r3, [r3, #12]
 8009654:	f003 0304 	and.w	r3, r3, #4
 8009658:	2b04      	cmp	r3, #4
 800965a:	d11b      	bne.n	8009694 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f06f 0204 	mvn.w	r2, #4
 8009664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2202      	movs	r2, #2
 800966a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	699b      	ldr	r3, [r3, #24]
 8009672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009676:	2b00      	cmp	r3, #0
 8009678:	d003      	beq.n	8009682 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f7f8 fbc8 	bl	8001e10 <HAL_TIM_IC_CaptureCallback>
 8009680:	e005      	b.n	800968e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f000 fa3f 	bl	8009b06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f000 fa46 	bl	8009b1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2200      	movs	r2, #0
 8009692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	691b      	ldr	r3, [r3, #16]
 800969a:	f003 0308 	and.w	r3, r3, #8
 800969e:	2b08      	cmp	r3, #8
 80096a0:	d122      	bne.n	80096e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	68db      	ldr	r3, [r3, #12]
 80096a8:	f003 0308 	and.w	r3, r3, #8
 80096ac:	2b08      	cmp	r3, #8
 80096ae:	d11b      	bne.n	80096e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f06f 0208 	mvn.w	r2, #8
 80096b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2204      	movs	r2, #4
 80096be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	69db      	ldr	r3, [r3, #28]
 80096c6:	f003 0303 	and.w	r3, r3, #3
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d003      	beq.n	80096d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f7f8 fb9e 	bl	8001e10 <HAL_TIM_IC_CaptureCallback>
 80096d4:	e005      	b.n	80096e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 fa15 	bl	8009b06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f000 fa1c 	bl	8009b1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	691b      	ldr	r3, [r3, #16]
 80096ee:	f003 0310 	and.w	r3, r3, #16
 80096f2:	2b10      	cmp	r3, #16
 80096f4:	d122      	bne.n	800973c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	f003 0310 	and.w	r3, r3, #16
 8009700:	2b10      	cmp	r3, #16
 8009702:	d11b      	bne.n	800973c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f06f 0210 	mvn.w	r2, #16
 800970c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2208      	movs	r2, #8
 8009712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	69db      	ldr	r3, [r3, #28]
 800971a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800971e:	2b00      	cmp	r3, #0
 8009720:	d003      	beq.n	800972a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f7f8 fb74 	bl	8001e10 <HAL_TIM_IC_CaptureCallback>
 8009728:	e005      	b.n	8009736 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 f9eb 	bl	8009b06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 f9f2 	bl	8009b1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2200      	movs	r2, #0
 800973a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	691b      	ldr	r3, [r3, #16]
 8009742:	f003 0301 	and.w	r3, r3, #1
 8009746:	2b01      	cmp	r3, #1
 8009748:	d10e      	bne.n	8009768 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	f003 0301 	and.w	r3, r3, #1
 8009754:	2b01      	cmp	r3, #1
 8009756:	d107      	bne.n	8009768 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f06f 0201 	mvn.w	r2, #1
 8009760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f7f8 fc7c 	bl	8002060 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	691b      	ldr	r3, [r3, #16]
 800976e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009772:	2b80      	cmp	r3, #128	; 0x80
 8009774:	d10e      	bne.n	8009794 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	68db      	ldr	r3, [r3, #12]
 800977c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009780:	2b80      	cmp	r3, #128	; 0x80
 8009782:	d107      	bne.n	8009794 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800978c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 fd6e 	bl	800a270 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	691b      	ldr	r3, [r3, #16]
 800979a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800979e:	2b40      	cmp	r3, #64	; 0x40
 80097a0:	d10e      	bne.n	80097c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	68db      	ldr	r3, [r3, #12]
 80097a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ac:	2b40      	cmp	r3, #64	; 0x40
 80097ae:	d107      	bne.n	80097c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80097b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f000 f9b7 	bl	8009b2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	691b      	ldr	r3, [r3, #16]
 80097c6:	f003 0320 	and.w	r3, r3, #32
 80097ca:	2b20      	cmp	r3, #32
 80097cc:	d10e      	bne.n	80097ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	68db      	ldr	r3, [r3, #12]
 80097d4:	f003 0320 	and.w	r3, r3, #32
 80097d8:	2b20      	cmp	r3, #32
 80097da:	d107      	bne.n	80097ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f06f 0220 	mvn.w	r2, #32
 80097e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 fd38 	bl	800a25c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80097ec:	bf00      	nop
 80097ee:	3708      	adds	r7, #8
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b086      	sub	sp, #24
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	60f8      	str	r0, [r7, #12]
 80097fc:	60b9      	str	r1, [r7, #8]
 80097fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009800:	2300      	movs	r3, #0
 8009802:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800980a:	2b01      	cmp	r3, #1
 800980c:	d101      	bne.n	8009812 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800980e:	2302      	movs	r3, #2
 8009810:	e0ae      	b.n	8009970 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2201      	movs	r2, #1
 8009816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2b0c      	cmp	r3, #12
 800981e:	f200 809f 	bhi.w	8009960 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009822:	a201      	add	r2, pc, #4	; (adr r2, 8009828 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009828:	0800985d 	.word	0x0800985d
 800982c:	08009961 	.word	0x08009961
 8009830:	08009961 	.word	0x08009961
 8009834:	08009961 	.word	0x08009961
 8009838:	0800989d 	.word	0x0800989d
 800983c:	08009961 	.word	0x08009961
 8009840:	08009961 	.word	0x08009961
 8009844:	08009961 	.word	0x08009961
 8009848:	080098df 	.word	0x080098df
 800984c:	08009961 	.word	0x08009961
 8009850:	08009961 	.word	0x08009961
 8009854:	08009961 	.word	0x08009961
 8009858:	0800991f 	.word	0x0800991f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	68b9      	ldr	r1, [r7, #8]
 8009862:	4618      	mov	r0, r3
 8009864:	f000 fa0e 	bl	8009c84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	699a      	ldr	r2, [r3, #24]
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f042 0208 	orr.w	r2, r2, #8
 8009876:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	699a      	ldr	r2, [r3, #24]
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f022 0204 	bic.w	r2, r2, #4
 8009886:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	6999      	ldr	r1, [r3, #24]
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	691a      	ldr	r2, [r3, #16]
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	430a      	orrs	r2, r1
 8009898:	619a      	str	r2, [r3, #24]
      break;
 800989a:	e064      	b.n	8009966 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	68b9      	ldr	r1, [r7, #8]
 80098a2:	4618      	mov	r0, r3
 80098a4:	f000 fa5e 	bl	8009d64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	699a      	ldr	r2, [r3, #24]
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80098b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	699a      	ldr	r2, [r3, #24]
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	6999      	ldr	r1, [r3, #24]
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	691b      	ldr	r3, [r3, #16]
 80098d2:	021a      	lsls	r2, r3, #8
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	430a      	orrs	r2, r1
 80098da:	619a      	str	r2, [r3, #24]
      break;
 80098dc:	e043      	b.n	8009966 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	68b9      	ldr	r1, [r7, #8]
 80098e4:	4618      	mov	r0, r3
 80098e6:	f000 fab3 	bl	8009e50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	69da      	ldr	r2, [r3, #28]
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f042 0208 	orr.w	r2, r2, #8
 80098f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	69da      	ldr	r2, [r3, #28]
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f022 0204 	bic.w	r2, r2, #4
 8009908:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	69d9      	ldr	r1, [r3, #28]
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	691a      	ldr	r2, [r3, #16]
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	430a      	orrs	r2, r1
 800991a:	61da      	str	r2, [r3, #28]
      break;
 800991c:	e023      	b.n	8009966 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	68b9      	ldr	r1, [r7, #8]
 8009924:	4618      	mov	r0, r3
 8009926:	f000 fb07 	bl	8009f38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	69da      	ldr	r2, [r3, #28]
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009938:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	69da      	ldr	r2, [r3, #28]
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009948:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	69d9      	ldr	r1, [r3, #28]
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	691b      	ldr	r3, [r3, #16]
 8009954:	021a      	lsls	r2, r3, #8
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	430a      	orrs	r2, r1
 800995c:	61da      	str	r2, [r3, #28]
      break;
 800995e:	e002      	b.n	8009966 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009960:	2301      	movs	r3, #1
 8009962:	75fb      	strb	r3, [r7, #23]
      break;
 8009964:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	2200      	movs	r2, #0
 800996a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800996e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009970:	4618      	mov	r0, r3
 8009972:	3718      	adds	r7, #24
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009982:	2300      	movs	r3, #0
 8009984:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800998c:	2b01      	cmp	r3, #1
 800998e:	d101      	bne.n	8009994 <HAL_TIM_ConfigClockSource+0x1c>
 8009990:	2302      	movs	r3, #2
 8009992:	e0b4      	b.n	8009afe <HAL_TIM_ConfigClockSource+0x186>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2201      	movs	r2, #1
 8009998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2202      	movs	r2, #2
 80099a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	689b      	ldr	r3, [r3, #8]
 80099aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80099b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80099ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	68ba      	ldr	r2, [r7, #8]
 80099c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099cc:	d03e      	beq.n	8009a4c <HAL_TIM_ConfigClockSource+0xd4>
 80099ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099d2:	f200 8087 	bhi.w	8009ae4 <HAL_TIM_ConfigClockSource+0x16c>
 80099d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099da:	f000 8086 	beq.w	8009aea <HAL_TIM_ConfigClockSource+0x172>
 80099de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099e2:	d87f      	bhi.n	8009ae4 <HAL_TIM_ConfigClockSource+0x16c>
 80099e4:	2b70      	cmp	r3, #112	; 0x70
 80099e6:	d01a      	beq.n	8009a1e <HAL_TIM_ConfigClockSource+0xa6>
 80099e8:	2b70      	cmp	r3, #112	; 0x70
 80099ea:	d87b      	bhi.n	8009ae4 <HAL_TIM_ConfigClockSource+0x16c>
 80099ec:	2b60      	cmp	r3, #96	; 0x60
 80099ee:	d050      	beq.n	8009a92 <HAL_TIM_ConfigClockSource+0x11a>
 80099f0:	2b60      	cmp	r3, #96	; 0x60
 80099f2:	d877      	bhi.n	8009ae4 <HAL_TIM_ConfigClockSource+0x16c>
 80099f4:	2b50      	cmp	r3, #80	; 0x50
 80099f6:	d03c      	beq.n	8009a72 <HAL_TIM_ConfigClockSource+0xfa>
 80099f8:	2b50      	cmp	r3, #80	; 0x50
 80099fa:	d873      	bhi.n	8009ae4 <HAL_TIM_ConfigClockSource+0x16c>
 80099fc:	2b40      	cmp	r3, #64	; 0x40
 80099fe:	d058      	beq.n	8009ab2 <HAL_TIM_ConfigClockSource+0x13a>
 8009a00:	2b40      	cmp	r3, #64	; 0x40
 8009a02:	d86f      	bhi.n	8009ae4 <HAL_TIM_ConfigClockSource+0x16c>
 8009a04:	2b30      	cmp	r3, #48	; 0x30
 8009a06:	d064      	beq.n	8009ad2 <HAL_TIM_ConfigClockSource+0x15a>
 8009a08:	2b30      	cmp	r3, #48	; 0x30
 8009a0a:	d86b      	bhi.n	8009ae4 <HAL_TIM_ConfigClockSource+0x16c>
 8009a0c:	2b20      	cmp	r3, #32
 8009a0e:	d060      	beq.n	8009ad2 <HAL_TIM_ConfigClockSource+0x15a>
 8009a10:	2b20      	cmp	r3, #32
 8009a12:	d867      	bhi.n	8009ae4 <HAL_TIM_ConfigClockSource+0x16c>
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d05c      	beq.n	8009ad2 <HAL_TIM_ConfigClockSource+0x15a>
 8009a18:	2b10      	cmp	r3, #16
 8009a1a:	d05a      	beq.n	8009ad2 <HAL_TIM_ConfigClockSource+0x15a>
 8009a1c:	e062      	b.n	8009ae4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6818      	ldr	r0, [r3, #0]
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	6899      	ldr	r1, [r3, #8]
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	685a      	ldr	r2, [r3, #4]
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	68db      	ldr	r3, [r3, #12]
 8009a2e:	f000 fb53 	bl	800a0d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009a40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	68ba      	ldr	r2, [r7, #8]
 8009a48:	609a      	str	r2, [r3, #8]
      break;
 8009a4a:	e04f      	b.n	8009aec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6818      	ldr	r0, [r3, #0]
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	6899      	ldr	r1, [r3, #8]
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	685a      	ldr	r2, [r3, #4]
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	68db      	ldr	r3, [r3, #12]
 8009a5c:	f000 fb3c 	bl	800a0d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	689a      	ldr	r2, [r3, #8]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009a6e:	609a      	str	r2, [r3, #8]
      break;
 8009a70:	e03c      	b.n	8009aec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6818      	ldr	r0, [r3, #0]
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	6859      	ldr	r1, [r3, #4]
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	68db      	ldr	r3, [r3, #12]
 8009a7e:	461a      	mov	r2, r3
 8009a80:	f000 fab0 	bl	8009fe4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	2150      	movs	r1, #80	; 0x50
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f000 fb09 	bl	800a0a2 <TIM_ITRx_SetConfig>
      break;
 8009a90:	e02c      	b.n	8009aec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6818      	ldr	r0, [r3, #0]
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	6859      	ldr	r1, [r3, #4]
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	68db      	ldr	r3, [r3, #12]
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	f000 facf 	bl	800a042 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	2160      	movs	r1, #96	; 0x60
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f000 faf9 	bl	800a0a2 <TIM_ITRx_SetConfig>
      break;
 8009ab0:	e01c      	b.n	8009aec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6818      	ldr	r0, [r3, #0]
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	6859      	ldr	r1, [r3, #4]
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	68db      	ldr	r3, [r3, #12]
 8009abe:	461a      	mov	r2, r3
 8009ac0:	f000 fa90 	bl	8009fe4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	2140      	movs	r1, #64	; 0x40
 8009aca:	4618      	mov	r0, r3
 8009acc:	f000 fae9 	bl	800a0a2 <TIM_ITRx_SetConfig>
      break;
 8009ad0:	e00c      	b.n	8009aec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681a      	ldr	r2, [r3, #0]
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4619      	mov	r1, r3
 8009adc:	4610      	mov	r0, r2
 8009ade:	f000 fae0 	bl	800a0a2 <TIM_ITRx_SetConfig>
      break;
 8009ae2:	e003      	b.n	8009aec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8009ae8:	e000      	b.n	8009aec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009aea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2201      	movs	r2, #1
 8009af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2200      	movs	r2, #0
 8009af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3710      	adds	r7, #16
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}

08009b06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009b06:	b480      	push	{r7}
 8009b08:	b083      	sub	sp, #12
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009b0e:	bf00      	nop
 8009b10:	370c      	adds	r7, #12
 8009b12:	46bd      	mov	sp, r7
 8009b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b18:	4770      	bx	lr

08009b1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009b1a:	b480      	push	{r7}
 8009b1c:	b083      	sub	sp, #12
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009b22:	bf00      	nop
 8009b24:	370c      	adds	r7, #12
 8009b26:	46bd      	mov	sp, r7
 8009b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2c:	4770      	bx	lr

08009b2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009b2e:	b480      	push	{r7}
 8009b30:	b083      	sub	sp, #12
 8009b32:	af00      	add	r7, sp, #0
 8009b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009b36:	bf00      	nop
 8009b38:	370c      	adds	r7, #12
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b40:	4770      	bx	lr
	...

08009b44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b085      	sub	sp, #20
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	4a40      	ldr	r2, [pc, #256]	; (8009c58 <TIM_Base_SetConfig+0x114>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d013      	beq.n	8009b84 <TIM_Base_SetConfig+0x40>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b62:	d00f      	beq.n	8009b84 <TIM_Base_SetConfig+0x40>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	4a3d      	ldr	r2, [pc, #244]	; (8009c5c <TIM_Base_SetConfig+0x118>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d00b      	beq.n	8009b84 <TIM_Base_SetConfig+0x40>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	4a3c      	ldr	r2, [pc, #240]	; (8009c60 <TIM_Base_SetConfig+0x11c>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d007      	beq.n	8009b84 <TIM_Base_SetConfig+0x40>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	4a3b      	ldr	r2, [pc, #236]	; (8009c64 <TIM_Base_SetConfig+0x120>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d003      	beq.n	8009b84 <TIM_Base_SetConfig+0x40>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	4a3a      	ldr	r2, [pc, #232]	; (8009c68 <TIM_Base_SetConfig+0x124>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d108      	bne.n	8009b96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	685b      	ldr	r3, [r3, #4]
 8009b90:	68fa      	ldr	r2, [r7, #12]
 8009b92:	4313      	orrs	r3, r2
 8009b94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	4a2f      	ldr	r2, [pc, #188]	; (8009c58 <TIM_Base_SetConfig+0x114>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d02b      	beq.n	8009bf6 <TIM_Base_SetConfig+0xb2>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ba4:	d027      	beq.n	8009bf6 <TIM_Base_SetConfig+0xb2>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	4a2c      	ldr	r2, [pc, #176]	; (8009c5c <TIM_Base_SetConfig+0x118>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d023      	beq.n	8009bf6 <TIM_Base_SetConfig+0xb2>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	4a2b      	ldr	r2, [pc, #172]	; (8009c60 <TIM_Base_SetConfig+0x11c>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d01f      	beq.n	8009bf6 <TIM_Base_SetConfig+0xb2>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	4a2a      	ldr	r2, [pc, #168]	; (8009c64 <TIM_Base_SetConfig+0x120>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d01b      	beq.n	8009bf6 <TIM_Base_SetConfig+0xb2>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	4a29      	ldr	r2, [pc, #164]	; (8009c68 <TIM_Base_SetConfig+0x124>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d017      	beq.n	8009bf6 <TIM_Base_SetConfig+0xb2>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	4a28      	ldr	r2, [pc, #160]	; (8009c6c <TIM_Base_SetConfig+0x128>)
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d013      	beq.n	8009bf6 <TIM_Base_SetConfig+0xb2>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	4a27      	ldr	r2, [pc, #156]	; (8009c70 <TIM_Base_SetConfig+0x12c>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d00f      	beq.n	8009bf6 <TIM_Base_SetConfig+0xb2>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	4a26      	ldr	r2, [pc, #152]	; (8009c74 <TIM_Base_SetConfig+0x130>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d00b      	beq.n	8009bf6 <TIM_Base_SetConfig+0xb2>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	4a25      	ldr	r2, [pc, #148]	; (8009c78 <TIM_Base_SetConfig+0x134>)
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d007      	beq.n	8009bf6 <TIM_Base_SetConfig+0xb2>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	4a24      	ldr	r2, [pc, #144]	; (8009c7c <TIM_Base_SetConfig+0x138>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d003      	beq.n	8009bf6 <TIM_Base_SetConfig+0xb2>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	4a23      	ldr	r2, [pc, #140]	; (8009c80 <TIM_Base_SetConfig+0x13c>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d108      	bne.n	8009c08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009bfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	68db      	ldr	r3, [r3, #12]
 8009c02:	68fa      	ldr	r2, [r7, #12]
 8009c04:	4313      	orrs	r3, r2
 8009c06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	695b      	ldr	r3, [r3, #20]
 8009c12:	4313      	orrs	r3, r2
 8009c14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	68fa      	ldr	r2, [r7, #12]
 8009c1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	689a      	ldr	r2, [r3, #8]
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	4a0a      	ldr	r2, [pc, #40]	; (8009c58 <TIM_Base_SetConfig+0x114>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d003      	beq.n	8009c3c <TIM_Base_SetConfig+0xf8>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	4a0c      	ldr	r2, [pc, #48]	; (8009c68 <TIM_Base_SetConfig+0x124>)
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d103      	bne.n	8009c44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	691a      	ldr	r2, [r3, #16]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2201      	movs	r2, #1
 8009c48:	615a      	str	r2, [r3, #20]
}
 8009c4a:	bf00      	nop
 8009c4c:	3714      	adds	r7, #20
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c54:	4770      	bx	lr
 8009c56:	bf00      	nop
 8009c58:	40010000 	.word	0x40010000
 8009c5c:	40000400 	.word	0x40000400
 8009c60:	40000800 	.word	0x40000800
 8009c64:	40000c00 	.word	0x40000c00
 8009c68:	40010400 	.word	0x40010400
 8009c6c:	40014000 	.word	0x40014000
 8009c70:	40014400 	.word	0x40014400
 8009c74:	40014800 	.word	0x40014800
 8009c78:	40001800 	.word	0x40001800
 8009c7c:	40001c00 	.word	0x40001c00
 8009c80:	40002000 	.word	0x40002000

08009c84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b087      	sub	sp, #28
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6a1b      	ldr	r3, [r3, #32]
 8009c92:	f023 0201 	bic.w	r2, r3, #1
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6a1b      	ldr	r3, [r3, #32]
 8009c9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	699b      	ldr	r3, [r3, #24]
 8009caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f023 0303 	bic.w	r3, r3, #3
 8009cba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	68fa      	ldr	r2, [r7, #12]
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	f023 0302 	bic.w	r3, r3, #2
 8009ccc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	689b      	ldr	r3, [r3, #8]
 8009cd2:	697a      	ldr	r2, [r7, #20]
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	4a20      	ldr	r2, [pc, #128]	; (8009d5c <TIM_OC1_SetConfig+0xd8>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d003      	beq.n	8009ce8 <TIM_OC1_SetConfig+0x64>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	4a1f      	ldr	r2, [pc, #124]	; (8009d60 <TIM_OC1_SetConfig+0xdc>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d10c      	bne.n	8009d02 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	f023 0308 	bic.w	r3, r3, #8
 8009cee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	68db      	ldr	r3, [r3, #12]
 8009cf4:	697a      	ldr	r2, [r7, #20]
 8009cf6:	4313      	orrs	r3, r2
 8009cf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	f023 0304 	bic.w	r3, r3, #4
 8009d00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	4a15      	ldr	r2, [pc, #84]	; (8009d5c <TIM_OC1_SetConfig+0xd8>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d003      	beq.n	8009d12 <TIM_OC1_SetConfig+0x8e>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	4a14      	ldr	r2, [pc, #80]	; (8009d60 <TIM_OC1_SetConfig+0xdc>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d111      	bne.n	8009d36 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009d20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	695b      	ldr	r3, [r3, #20]
 8009d26:	693a      	ldr	r2, [r7, #16]
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	699b      	ldr	r3, [r3, #24]
 8009d30:	693a      	ldr	r2, [r7, #16]
 8009d32:	4313      	orrs	r3, r2
 8009d34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	693a      	ldr	r2, [r7, #16]
 8009d3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	68fa      	ldr	r2, [r7, #12]
 8009d40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	685a      	ldr	r2, [r3, #4]
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	697a      	ldr	r2, [r7, #20]
 8009d4e:	621a      	str	r2, [r3, #32]
}
 8009d50:	bf00      	nop
 8009d52:	371c      	adds	r7, #28
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr
 8009d5c:	40010000 	.word	0x40010000
 8009d60:	40010400 	.word	0x40010400

08009d64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b087      	sub	sp, #28
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6a1b      	ldr	r3, [r3, #32]
 8009d72:	f023 0210 	bic.w	r2, r3, #16
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6a1b      	ldr	r3, [r3, #32]
 8009d7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	699b      	ldr	r3, [r3, #24]
 8009d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	021b      	lsls	r3, r3, #8
 8009da2:	68fa      	ldr	r2, [r7, #12]
 8009da4:	4313      	orrs	r3, r2
 8009da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	f023 0320 	bic.w	r3, r3, #32
 8009dae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	689b      	ldr	r3, [r3, #8]
 8009db4:	011b      	lsls	r3, r3, #4
 8009db6:	697a      	ldr	r2, [r7, #20]
 8009db8:	4313      	orrs	r3, r2
 8009dba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	4a22      	ldr	r2, [pc, #136]	; (8009e48 <TIM_OC2_SetConfig+0xe4>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d003      	beq.n	8009dcc <TIM_OC2_SetConfig+0x68>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	4a21      	ldr	r2, [pc, #132]	; (8009e4c <TIM_OC2_SetConfig+0xe8>)
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d10d      	bne.n	8009de8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009dd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	68db      	ldr	r3, [r3, #12]
 8009dd8:	011b      	lsls	r3, r3, #4
 8009dda:	697a      	ldr	r2, [r7, #20]
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009de6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	4a17      	ldr	r2, [pc, #92]	; (8009e48 <TIM_OC2_SetConfig+0xe4>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d003      	beq.n	8009df8 <TIM_OC2_SetConfig+0x94>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	4a16      	ldr	r2, [pc, #88]	; (8009e4c <TIM_OC2_SetConfig+0xe8>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d113      	bne.n	8009e20 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009dfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009e06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	695b      	ldr	r3, [r3, #20]
 8009e0c:	009b      	lsls	r3, r3, #2
 8009e0e:	693a      	ldr	r2, [r7, #16]
 8009e10:	4313      	orrs	r3, r2
 8009e12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	699b      	ldr	r3, [r3, #24]
 8009e18:	009b      	lsls	r3, r3, #2
 8009e1a:	693a      	ldr	r2, [r7, #16]
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	693a      	ldr	r2, [r7, #16]
 8009e24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	68fa      	ldr	r2, [r7, #12]
 8009e2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	685a      	ldr	r2, [r3, #4]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	697a      	ldr	r2, [r7, #20]
 8009e38:	621a      	str	r2, [r3, #32]
}
 8009e3a:	bf00      	nop
 8009e3c:	371c      	adds	r7, #28
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e44:	4770      	bx	lr
 8009e46:	bf00      	nop
 8009e48:	40010000 	.word	0x40010000
 8009e4c:	40010400 	.word	0x40010400

08009e50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b087      	sub	sp, #28
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6a1b      	ldr	r3, [r3, #32]
 8009e5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6a1b      	ldr	r3, [r3, #32]
 8009e6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	69db      	ldr	r3, [r3, #28]
 8009e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f023 0303 	bic.w	r3, r3, #3
 8009e86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	68fa      	ldr	r2, [r7, #12]
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009e98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	689b      	ldr	r3, [r3, #8]
 8009e9e:	021b      	lsls	r3, r3, #8
 8009ea0:	697a      	ldr	r2, [r7, #20]
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	4a21      	ldr	r2, [pc, #132]	; (8009f30 <TIM_OC3_SetConfig+0xe0>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d003      	beq.n	8009eb6 <TIM_OC3_SetConfig+0x66>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	4a20      	ldr	r2, [pc, #128]	; (8009f34 <TIM_OC3_SetConfig+0xe4>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d10d      	bne.n	8009ed2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ebc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	68db      	ldr	r3, [r3, #12]
 8009ec2:	021b      	lsls	r3, r3, #8
 8009ec4:	697a      	ldr	r2, [r7, #20]
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009ed0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	4a16      	ldr	r2, [pc, #88]	; (8009f30 <TIM_OC3_SetConfig+0xe0>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d003      	beq.n	8009ee2 <TIM_OC3_SetConfig+0x92>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	4a15      	ldr	r2, [pc, #84]	; (8009f34 <TIM_OC3_SetConfig+0xe4>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d113      	bne.n	8009f0a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ee8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009ef0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	695b      	ldr	r3, [r3, #20]
 8009ef6:	011b      	lsls	r3, r3, #4
 8009ef8:	693a      	ldr	r2, [r7, #16]
 8009efa:	4313      	orrs	r3, r2
 8009efc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	699b      	ldr	r3, [r3, #24]
 8009f02:	011b      	lsls	r3, r3, #4
 8009f04:	693a      	ldr	r2, [r7, #16]
 8009f06:	4313      	orrs	r3, r2
 8009f08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	693a      	ldr	r2, [r7, #16]
 8009f0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	68fa      	ldr	r2, [r7, #12]
 8009f14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	685a      	ldr	r2, [r3, #4]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	697a      	ldr	r2, [r7, #20]
 8009f22:	621a      	str	r2, [r3, #32]
}
 8009f24:	bf00      	nop
 8009f26:	371c      	adds	r7, #28
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr
 8009f30:	40010000 	.word	0x40010000
 8009f34:	40010400 	.word	0x40010400

08009f38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b087      	sub	sp, #28
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6a1b      	ldr	r3, [r3, #32]
 8009f46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6a1b      	ldr	r3, [r3, #32]
 8009f52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	69db      	ldr	r3, [r3, #28]
 8009f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	021b      	lsls	r3, r3, #8
 8009f76:	68fa      	ldr	r2, [r7, #12]
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009f82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	689b      	ldr	r3, [r3, #8]
 8009f88:	031b      	lsls	r3, r3, #12
 8009f8a:	693a      	ldr	r2, [r7, #16]
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	4a12      	ldr	r2, [pc, #72]	; (8009fdc <TIM_OC4_SetConfig+0xa4>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d003      	beq.n	8009fa0 <TIM_OC4_SetConfig+0x68>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	4a11      	ldr	r2, [pc, #68]	; (8009fe0 <TIM_OC4_SetConfig+0xa8>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d109      	bne.n	8009fb4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009fa6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	695b      	ldr	r3, [r3, #20]
 8009fac:	019b      	lsls	r3, r3, #6
 8009fae:	697a      	ldr	r2, [r7, #20]
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	697a      	ldr	r2, [r7, #20]
 8009fb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	68fa      	ldr	r2, [r7, #12]
 8009fbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	685a      	ldr	r2, [r3, #4]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	693a      	ldr	r2, [r7, #16]
 8009fcc:	621a      	str	r2, [r3, #32]
}
 8009fce:	bf00      	nop
 8009fd0:	371c      	adds	r7, #28
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd8:	4770      	bx	lr
 8009fda:	bf00      	nop
 8009fdc:	40010000 	.word	0x40010000
 8009fe0:	40010400 	.word	0x40010400

08009fe4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b087      	sub	sp, #28
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	60b9      	str	r1, [r7, #8]
 8009fee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	6a1b      	ldr	r3, [r3, #32]
 8009ff4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	6a1b      	ldr	r3, [r3, #32]
 8009ffa:	f023 0201 	bic.w	r2, r3, #1
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	699b      	ldr	r3, [r3, #24]
 800a006:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a00e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	011b      	lsls	r3, r3, #4
 800a014:	693a      	ldr	r2, [r7, #16]
 800a016:	4313      	orrs	r3, r2
 800a018:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	f023 030a 	bic.w	r3, r3, #10
 800a020:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a022:	697a      	ldr	r2, [r7, #20]
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	4313      	orrs	r3, r2
 800a028:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	693a      	ldr	r2, [r7, #16]
 800a02e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	697a      	ldr	r2, [r7, #20]
 800a034:	621a      	str	r2, [r3, #32]
}
 800a036:	bf00      	nop
 800a038:	371c      	adds	r7, #28
 800a03a:	46bd      	mov	sp, r7
 800a03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a040:	4770      	bx	lr

0800a042 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a042:	b480      	push	{r7}
 800a044:	b087      	sub	sp, #28
 800a046:	af00      	add	r7, sp, #0
 800a048:	60f8      	str	r0, [r7, #12]
 800a04a:	60b9      	str	r1, [r7, #8]
 800a04c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	6a1b      	ldr	r3, [r3, #32]
 800a052:	f023 0210 	bic.w	r2, r3, #16
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	699b      	ldr	r3, [r3, #24]
 800a05e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	6a1b      	ldr	r3, [r3, #32]
 800a064:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a06c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	031b      	lsls	r3, r3, #12
 800a072:	697a      	ldr	r2, [r7, #20]
 800a074:	4313      	orrs	r3, r2
 800a076:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a07e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	011b      	lsls	r3, r3, #4
 800a084:	693a      	ldr	r2, [r7, #16]
 800a086:	4313      	orrs	r3, r2
 800a088:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	697a      	ldr	r2, [r7, #20]
 800a08e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	693a      	ldr	r2, [r7, #16]
 800a094:	621a      	str	r2, [r3, #32]
}
 800a096:	bf00      	nop
 800a098:	371c      	adds	r7, #28
 800a09a:	46bd      	mov	sp, r7
 800a09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a0:	4770      	bx	lr

0800a0a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a0a2:	b480      	push	{r7}
 800a0a4:	b085      	sub	sp, #20
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	6078      	str	r0, [r7, #4]
 800a0aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	689b      	ldr	r3, [r3, #8]
 800a0b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a0ba:	683a      	ldr	r2, [r7, #0]
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	f043 0307 	orr.w	r3, r3, #7
 800a0c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	68fa      	ldr	r2, [r7, #12]
 800a0ca:	609a      	str	r2, [r3, #8]
}
 800a0cc:	bf00      	nop
 800a0ce:	3714      	adds	r7, #20
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr

0800a0d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b087      	sub	sp, #28
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	60f8      	str	r0, [r7, #12]
 800a0e0:	60b9      	str	r1, [r7, #8]
 800a0e2:	607a      	str	r2, [r7, #4]
 800a0e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	689b      	ldr	r3, [r3, #8]
 800a0ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a0f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	021a      	lsls	r2, r3, #8
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	431a      	orrs	r2, r3
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	4313      	orrs	r3, r2
 800a100:	697a      	ldr	r2, [r7, #20]
 800a102:	4313      	orrs	r3, r2
 800a104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	697a      	ldr	r2, [r7, #20]
 800a10a:	609a      	str	r2, [r3, #8]
}
 800a10c:	bf00      	nop
 800a10e:	371c      	adds	r7, #28
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr

0800a118 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a118:	b480      	push	{r7}
 800a11a:	b087      	sub	sp, #28
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	60f8      	str	r0, [r7, #12]
 800a120:	60b9      	str	r1, [r7, #8]
 800a122:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	f003 031f 	and.w	r3, r3, #31
 800a12a:	2201      	movs	r2, #1
 800a12c:	fa02 f303 	lsl.w	r3, r2, r3
 800a130:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	6a1a      	ldr	r2, [r3, #32]
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	43db      	mvns	r3, r3
 800a13a:	401a      	ands	r2, r3
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	6a1a      	ldr	r2, [r3, #32]
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	f003 031f 	and.w	r3, r3, #31
 800a14a:	6879      	ldr	r1, [r7, #4]
 800a14c:	fa01 f303 	lsl.w	r3, r1, r3
 800a150:	431a      	orrs	r2, r3
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	621a      	str	r2, [r3, #32]
}
 800a156:	bf00      	nop
 800a158:	371c      	adds	r7, #28
 800a15a:	46bd      	mov	sp, r7
 800a15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a160:	4770      	bx	lr
	...

0800a164 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a164:	b480      	push	{r7}
 800a166:	b085      	sub	sp, #20
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
 800a16c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a174:	2b01      	cmp	r3, #1
 800a176:	d101      	bne.n	800a17c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a178:	2302      	movs	r3, #2
 800a17a:	e05a      	b.n	800a232 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2201      	movs	r2, #1
 800a180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2202      	movs	r2, #2
 800a188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	689b      	ldr	r3, [r3, #8]
 800a19a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	68fa      	ldr	r2, [r7, #12]
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	68fa      	ldr	r2, [r7, #12]
 800a1b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	4a21      	ldr	r2, [pc, #132]	; (800a240 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d022      	beq.n	800a206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1c8:	d01d      	beq.n	800a206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4a1d      	ldr	r2, [pc, #116]	; (800a244 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d018      	beq.n	800a206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4a1b      	ldr	r2, [pc, #108]	; (800a248 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d013      	beq.n	800a206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4a1a      	ldr	r2, [pc, #104]	; (800a24c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d00e      	beq.n	800a206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4a18      	ldr	r2, [pc, #96]	; (800a250 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d009      	beq.n	800a206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a17      	ldr	r2, [pc, #92]	; (800a254 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d004      	beq.n	800a206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a15      	ldr	r2, [pc, #84]	; (800a258 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d10c      	bne.n	800a220 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a20c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	68ba      	ldr	r2, [r7, #8]
 800a214:	4313      	orrs	r3, r2
 800a216:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	68ba      	ldr	r2, [r7, #8]
 800a21e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2201      	movs	r2, #1
 800a224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2200      	movs	r2, #0
 800a22c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a230:	2300      	movs	r3, #0
}
 800a232:	4618      	mov	r0, r3
 800a234:	3714      	adds	r7, #20
 800a236:	46bd      	mov	sp, r7
 800a238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23c:	4770      	bx	lr
 800a23e:	bf00      	nop
 800a240:	40010000 	.word	0x40010000
 800a244:	40000400 	.word	0x40000400
 800a248:	40000800 	.word	0x40000800
 800a24c:	40000c00 	.word	0x40000c00
 800a250:	40010400 	.word	0x40010400
 800a254:	40014000 	.word	0x40014000
 800a258:	40001800 	.word	0x40001800

0800a25c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b083      	sub	sp, #12
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a264:	bf00      	nop
 800a266:	370c      	adds	r7, #12
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr

0800a270 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a270:	b480      	push	{r7}
 800a272:	b083      	sub	sp, #12
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a278:	bf00      	nop
 800a27a:	370c      	adds	r7, #12
 800a27c:	46bd      	mov	sp, r7
 800a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a282:	4770      	bx	lr

0800a284 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b082      	sub	sp, #8
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d101      	bne.n	800a296 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a292:	2301      	movs	r3, #1
 800a294:	e03f      	b.n	800a316 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d106      	bne.n	800a2b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f7fd f8b8 	bl	8007420 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2224      	movs	r2, #36	; 0x24
 800a2b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	68da      	ldr	r2, [r3, #12]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a2c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f000 ff43 	bl	800b154 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	691a      	ldr	r2, [r3, #16]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a2dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	695a      	ldr	r2, [r3, #20]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a2ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	68da      	ldr	r2, [r3, #12]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a2fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2200      	movs	r2, #0
 800a302:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2220      	movs	r2, #32
 800a308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2220      	movs	r2, #32
 800a310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a314:	2300      	movs	r3, #0
}
 800a316:	4618      	mov	r0, r3
 800a318:	3708      	adds	r7, #8
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}
	...

0800a320 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b08c      	sub	sp, #48	; 0x30
 800a324:	af00      	add	r7, sp, #0
 800a326:	60f8      	str	r0, [r7, #12]
 800a328:	60b9      	str	r1, [r7, #8]
 800a32a:	4613      	mov	r3, r2
 800a32c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a334:	b2db      	uxtb	r3, r3
 800a336:	2b20      	cmp	r3, #32
 800a338:	d165      	bne.n	800a406 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d002      	beq.n	800a346 <HAL_UART_Transmit_DMA+0x26>
 800a340:	88fb      	ldrh	r3, [r7, #6]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d101      	bne.n	800a34a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a346:	2301      	movs	r3, #1
 800a348:	e05e      	b.n	800a408 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a350:	2b01      	cmp	r3, #1
 800a352:	d101      	bne.n	800a358 <HAL_UART_Transmit_DMA+0x38>
 800a354:	2302      	movs	r3, #2
 800a356:	e057      	b.n	800a408 <HAL_UART_Transmit_DMA+0xe8>
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	2201      	movs	r2, #1
 800a35c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a360:	68ba      	ldr	r2, [r7, #8]
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	88fa      	ldrh	r2, [r7, #6]
 800a36a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	88fa      	ldrh	r2, [r7, #6]
 800a370:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2200      	movs	r2, #0
 800a376:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	2221      	movs	r2, #33	; 0x21
 800a37c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a384:	4a22      	ldr	r2, [pc, #136]	; (800a410 <HAL_UART_Transmit_DMA+0xf0>)
 800a386:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a38c:	4a21      	ldr	r2, [pc, #132]	; (800a414 <HAL_UART_Transmit_DMA+0xf4>)
 800a38e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a394:	4a20      	ldr	r2, [pc, #128]	; (800a418 <HAL_UART_Transmit_DMA+0xf8>)
 800a396:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a39c:	2200      	movs	r2, #0
 800a39e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800a3a0:	f107 0308 	add.w	r3, r7, #8
 800a3a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ac:	6819      	ldr	r1, [r3, #0]
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	3304      	adds	r3, #4
 800a3b4:	461a      	mov	r2, r3
 800a3b6:	88fb      	ldrh	r3, [r7, #6]
 800a3b8:	f7fd fc0a 	bl	8007bd0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a3c4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	3314      	adds	r3, #20
 800a3d4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3d6:	69bb      	ldr	r3, [r7, #24]
 800a3d8:	e853 3f00 	ldrex	r3, [r3]
 800a3dc:	617b      	str	r3, [r7, #20]
   return(result);
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3e4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	3314      	adds	r3, #20
 800a3ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3ee:	627a      	str	r2, [r7, #36]	; 0x24
 800a3f0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3f2:	6a39      	ldr	r1, [r7, #32]
 800a3f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3f6:	e841 2300 	strex	r3, r2, [r1]
 800a3fa:	61fb      	str	r3, [r7, #28]
   return(result);
 800a3fc:	69fb      	ldr	r3, [r7, #28]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d1e5      	bne.n	800a3ce <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800a402:	2300      	movs	r3, #0
 800a404:	e000      	b.n	800a408 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800a406:	2302      	movs	r3, #2
  }
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3730      	adds	r7, #48	; 0x30
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}
 800a410:	0800a9ed 	.word	0x0800a9ed
 800a414:	0800aa87 	.word	0x0800aa87
 800a418:	0800abff 	.word	0x0800abff

0800a41c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b084      	sub	sp, #16
 800a420:	af00      	add	r7, sp, #0
 800a422:	60f8      	str	r0, [r7, #12]
 800a424:	60b9      	str	r1, [r7, #8]
 800a426:	4613      	mov	r3, r2
 800a428:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a430:	b2db      	uxtb	r3, r3
 800a432:	2b20      	cmp	r3, #32
 800a434:	d11d      	bne.n	800a472 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d002      	beq.n	800a442 <HAL_UART_Receive_DMA+0x26>
 800a43c:	88fb      	ldrh	r3, [r7, #6]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d101      	bne.n	800a446 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a442:	2301      	movs	r3, #1
 800a444:	e016      	b.n	800a474 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	d101      	bne.n	800a454 <HAL_UART_Receive_DMA+0x38>
 800a450:	2302      	movs	r3, #2
 800a452:	e00f      	b.n	800a474 <HAL_UART_Receive_DMA+0x58>
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	2201      	movs	r2, #1
 800a458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2200      	movs	r2, #0
 800a460:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a462:	88fb      	ldrh	r3, [r7, #6]
 800a464:	461a      	mov	r2, r3
 800a466:	68b9      	ldr	r1, [r7, #8]
 800a468:	68f8      	ldr	r0, [r7, #12]
 800a46a:	f000 fc13 	bl	800ac94 <UART_Start_Receive_DMA>
 800a46e:	4603      	mov	r3, r0
 800a470:	e000      	b.n	800a474 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a472:	2302      	movs	r3, #2
  }
}
 800a474:	4618      	mov	r0, r3
 800a476:	3710      	adds	r7, #16
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b0ba      	sub	sp, #232	; 0xe8
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	68db      	ldr	r3, [r3, #12]
 800a494:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	695b      	ldr	r3, [r3, #20]
 800a49e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a4ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4b2:	f003 030f 	and.w	r3, r3, #15
 800a4b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a4ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d10f      	bne.n	800a4e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a4c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4c6:	f003 0320 	and.w	r3, r3, #32
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d009      	beq.n	800a4e2 <HAL_UART_IRQHandler+0x66>
 800a4ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4d2:	f003 0320 	and.w	r3, r3, #32
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d003      	beq.n	800a4e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f000 fd7f 	bl	800afde <UART_Receive_IT>
      return;
 800a4e0:	e256      	b.n	800a990 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a4e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	f000 80de 	beq.w	800a6a8 <HAL_UART_IRQHandler+0x22c>
 800a4ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a4f0:	f003 0301 	and.w	r3, r3, #1
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d106      	bne.n	800a506 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a4f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4fc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a500:	2b00      	cmp	r3, #0
 800a502:	f000 80d1 	beq.w	800a6a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a50a:	f003 0301 	and.w	r3, r3, #1
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d00b      	beq.n	800a52a <HAL_UART_IRQHandler+0xae>
 800a512:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d005      	beq.n	800a52a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a522:	f043 0201 	orr.w	r2, r3, #1
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a52a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a52e:	f003 0304 	and.w	r3, r3, #4
 800a532:	2b00      	cmp	r3, #0
 800a534:	d00b      	beq.n	800a54e <HAL_UART_IRQHandler+0xd2>
 800a536:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a53a:	f003 0301 	and.w	r3, r3, #1
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d005      	beq.n	800a54e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a546:	f043 0202 	orr.w	r2, r3, #2
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a54e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a552:	f003 0302 	and.w	r3, r3, #2
 800a556:	2b00      	cmp	r3, #0
 800a558:	d00b      	beq.n	800a572 <HAL_UART_IRQHandler+0xf6>
 800a55a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a55e:	f003 0301 	and.w	r3, r3, #1
 800a562:	2b00      	cmp	r3, #0
 800a564:	d005      	beq.n	800a572 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a56a:	f043 0204 	orr.w	r2, r3, #4
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a576:	f003 0308 	and.w	r3, r3, #8
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d011      	beq.n	800a5a2 <HAL_UART_IRQHandler+0x126>
 800a57e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a582:	f003 0320 	and.w	r3, r3, #32
 800a586:	2b00      	cmp	r3, #0
 800a588:	d105      	bne.n	800a596 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a58a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a58e:	f003 0301 	and.w	r3, r3, #1
 800a592:	2b00      	cmp	r3, #0
 800a594:	d005      	beq.n	800a5a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a59a:	f043 0208 	orr.w	r2, r3, #8
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	f000 81ed 	beq.w	800a986 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a5ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5b0:	f003 0320 	and.w	r3, r3, #32
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d008      	beq.n	800a5ca <HAL_UART_IRQHandler+0x14e>
 800a5b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5bc:	f003 0320 	and.w	r3, r3, #32
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d002      	beq.n	800a5ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f000 fd0a 	bl	800afde <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	695b      	ldr	r3, [r3, #20]
 800a5d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5d4:	2b40      	cmp	r3, #64	; 0x40
 800a5d6:	bf0c      	ite	eq
 800a5d8:	2301      	moveq	r3, #1
 800a5da:	2300      	movne	r3, #0
 800a5dc:	b2db      	uxtb	r3, r3
 800a5de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5e6:	f003 0308 	and.w	r3, r3, #8
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d103      	bne.n	800a5f6 <HAL_UART_IRQHandler+0x17a>
 800a5ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d04f      	beq.n	800a696 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f000 fc12 	bl	800ae20 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	695b      	ldr	r3, [r3, #20]
 800a602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a606:	2b40      	cmp	r3, #64	; 0x40
 800a608:	d141      	bne.n	800a68e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	3314      	adds	r3, #20
 800a610:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a614:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a618:	e853 3f00 	ldrex	r3, [r3]
 800a61c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a620:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a624:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a628:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	3314      	adds	r3, #20
 800a632:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a636:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a63a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a63e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a642:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a646:	e841 2300 	strex	r3, r2, [r1]
 800a64a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a64e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a652:	2b00      	cmp	r3, #0
 800a654:	d1d9      	bne.n	800a60a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d013      	beq.n	800a686 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a662:	4a7d      	ldr	r2, [pc, #500]	; (800a858 <HAL_UART_IRQHandler+0x3dc>)
 800a664:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a66a:	4618      	mov	r0, r3
 800a66c:	f7fd fb78 	bl	8007d60 <HAL_DMA_Abort_IT>
 800a670:	4603      	mov	r3, r0
 800a672:	2b00      	cmp	r3, #0
 800a674:	d016      	beq.n	800a6a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a67a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a67c:	687a      	ldr	r2, [r7, #4]
 800a67e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a680:	4610      	mov	r0, r2
 800a682:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a684:	e00e      	b.n	800a6a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f000 f99a 	bl	800a9c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a68c:	e00a      	b.n	800a6a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f000 f996 	bl	800a9c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a694:	e006      	b.n	800a6a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f000 f992 	bl	800a9c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a6a2:	e170      	b.n	800a986 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6a4:	bf00      	nop
    return;
 800a6a6:	e16e      	b.n	800a986 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6ac:	2b01      	cmp	r3, #1
 800a6ae:	f040 814a 	bne.w	800a946 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a6b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6b6:	f003 0310 	and.w	r3, r3, #16
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	f000 8143 	beq.w	800a946 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a6c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6c4:	f003 0310 	and.w	r3, r3, #16
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	f000 813c 	beq.w	800a946 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	60bb      	str	r3, [r7, #8]
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	60bb      	str	r3, [r7, #8]
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	685b      	ldr	r3, [r3, #4]
 800a6e0:	60bb      	str	r3, [r7, #8]
 800a6e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	695b      	ldr	r3, [r3, #20]
 800a6ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6ee:	2b40      	cmp	r3, #64	; 0x40
 800a6f0:	f040 80b4 	bne.w	800a85c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a700:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a704:	2b00      	cmp	r3, #0
 800a706:	f000 8140 	beq.w	800a98a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a70e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a712:	429a      	cmp	r2, r3
 800a714:	f080 8139 	bcs.w	800a98a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a71e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a724:	69db      	ldr	r3, [r3, #28]
 800a726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a72a:	f000 8088 	beq.w	800a83e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	330c      	adds	r3, #12
 800a734:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a738:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a73c:	e853 3f00 	ldrex	r3, [r3]
 800a740:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a744:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a748:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a74c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	330c      	adds	r3, #12
 800a756:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a75a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a75e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a762:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a766:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a76a:	e841 2300 	strex	r3, r2, [r1]
 800a76e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a772:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a776:	2b00      	cmp	r3, #0
 800a778:	d1d9      	bne.n	800a72e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	3314      	adds	r3, #20
 800a780:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a782:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a784:	e853 3f00 	ldrex	r3, [r3]
 800a788:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a78a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a78c:	f023 0301 	bic.w	r3, r3, #1
 800a790:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	3314      	adds	r3, #20
 800a79a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a79e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a7a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a7a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a7aa:	e841 2300 	strex	r3, r2, [r1]
 800a7ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a7b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d1e1      	bne.n	800a77a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	3314      	adds	r3, #20
 800a7bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a7c0:	e853 3f00 	ldrex	r3, [r3]
 800a7c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a7c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a7c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	3314      	adds	r3, #20
 800a7d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a7da:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a7dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a7e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a7e2:	e841 2300 	strex	r3, r2, [r1]
 800a7e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a7e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d1e3      	bne.n	800a7b6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2220      	movs	r2, #32
 800a7f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	330c      	adds	r3, #12
 800a802:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a806:	e853 3f00 	ldrex	r3, [r3]
 800a80a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a80c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a80e:	f023 0310 	bic.w	r3, r3, #16
 800a812:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	330c      	adds	r3, #12
 800a81c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a820:	65ba      	str	r2, [r7, #88]	; 0x58
 800a822:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a824:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a826:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a828:	e841 2300 	strex	r3, r2, [r1]
 800a82c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a82e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a830:	2b00      	cmp	r3, #0
 800a832:	d1e3      	bne.n	800a7fc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a838:	4618      	mov	r0, r3
 800a83a:	f7fd fa21 	bl	8007c80 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a846:	b29b      	uxth	r3, r3
 800a848:	1ad3      	subs	r3, r2, r3
 800a84a:	b29b      	uxth	r3, r3
 800a84c:	4619      	mov	r1, r3
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f000 f8c0 	bl	800a9d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a854:	e099      	b.n	800a98a <HAL_UART_IRQHandler+0x50e>
 800a856:	bf00      	nop
 800a858:	0800aee7 	.word	0x0800aee7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a864:	b29b      	uxth	r3, r3
 800a866:	1ad3      	subs	r3, r2, r3
 800a868:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a870:	b29b      	uxth	r3, r3
 800a872:	2b00      	cmp	r3, #0
 800a874:	f000 808b 	beq.w	800a98e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a878:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	f000 8086 	beq.w	800a98e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	330c      	adds	r3, #12
 800a888:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a88a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a88c:	e853 3f00 	ldrex	r3, [r3]
 800a890:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a894:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a898:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	330c      	adds	r3, #12
 800a8a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a8a6:	647a      	str	r2, [r7, #68]	; 0x44
 800a8a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a8ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a8ae:	e841 2300 	strex	r3, r2, [r1]
 800a8b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a8b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d1e3      	bne.n	800a882 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	3314      	adds	r3, #20
 800a8c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c4:	e853 3f00 	ldrex	r3, [r3]
 800a8c8:	623b      	str	r3, [r7, #32]
   return(result);
 800a8ca:	6a3b      	ldr	r3, [r7, #32]
 800a8cc:	f023 0301 	bic.w	r3, r3, #1
 800a8d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	3314      	adds	r3, #20
 800a8da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a8de:	633a      	str	r2, [r7, #48]	; 0x30
 800a8e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a8e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8e6:	e841 2300 	strex	r3, r2, [r1]
 800a8ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d1e3      	bne.n	800a8ba <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2220      	movs	r2, #32
 800a8f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	330c      	adds	r3, #12
 800a906:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	e853 3f00 	ldrex	r3, [r3]
 800a90e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f023 0310 	bic.w	r3, r3, #16
 800a916:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	330c      	adds	r3, #12
 800a920:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a924:	61fa      	str	r2, [r7, #28]
 800a926:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a928:	69b9      	ldr	r1, [r7, #24]
 800a92a:	69fa      	ldr	r2, [r7, #28]
 800a92c:	e841 2300 	strex	r3, r2, [r1]
 800a930:	617b      	str	r3, [r7, #20]
   return(result);
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d1e3      	bne.n	800a900 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a938:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a93c:	4619      	mov	r1, r3
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f000 f848 	bl	800a9d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a944:	e023      	b.n	800a98e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a94a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d009      	beq.n	800a966 <HAL_UART_IRQHandler+0x4ea>
 800a952:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d003      	beq.n	800a966 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f000 fad5 	bl	800af0e <UART_Transmit_IT>
    return;
 800a964:	e014      	b.n	800a990 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a96a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d00e      	beq.n	800a990 <HAL_UART_IRQHandler+0x514>
 800a972:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d008      	beq.n	800a990 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f000 fb15 	bl	800afae <UART_EndTransmit_IT>
    return;
 800a984:	e004      	b.n	800a990 <HAL_UART_IRQHandler+0x514>
    return;
 800a986:	bf00      	nop
 800a988:	e002      	b.n	800a990 <HAL_UART_IRQHandler+0x514>
      return;
 800a98a:	bf00      	nop
 800a98c:	e000      	b.n	800a990 <HAL_UART_IRQHandler+0x514>
      return;
 800a98e:	bf00      	nop
  }
}
 800a990:	37e8      	adds	r7, #232	; 0xe8
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}
 800a996:	bf00      	nop

0800a998 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a998:	b480      	push	{r7}
 800a99a:	b083      	sub	sp, #12
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800a9a0:	bf00      	nop
 800a9a2:	370c      	adds	r7, #12
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr

0800a9ac <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b083      	sub	sp, #12
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a9b4:	bf00      	nop
 800a9b6:	370c      	adds	r7, #12
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr

0800a9c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b083      	sub	sp, #12
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a9c8:	bf00      	nop
 800a9ca:	370c      	adds	r7, #12
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr

0800a9d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b083      	sub	sp, #12
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
 800a9dc:	460b      	mov	r3, r1
 800a9de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a9e0:	bf00      	nop
 800a9e2:	370c      	adds	r7, #12
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ea:	4770      	bx	lr

0800a9ec <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b090      	sub	sp, #64	; 0x40
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d137      	bne.n	800aa78 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800aa08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aa0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	3314      	adds	r3, #20
 800aa14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa18:	e853 3f00 	ldrex	r3, [r3]
 800aa1c:	623b      	str	r3, [r7, #32]
   return(result);
 800aa1e:	6a3b      	ldr	r3, [r7, #32]
 800aa20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa24:	63bb      	str	r3, [r7, #56]	; 0x38
 800aa26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	3314      	adds	r3, #20
 800aa2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa2e:	633a      	str	r2, [r7, #48]	; 0x30
 800aa30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aa34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa36:	e841 2300 	strex	r3, r2, [r1]
 800aa3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aa3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d1e5      	bne.n	800aa0e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aa42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	330c      	adds	r3, #12
 800aa48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	e853 3f00 	ldrex	r3, [r3]
 800aa50:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa58:	637b      	str	r3, [r7, #52]	; 0x34
 800aa5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	330c      	adds	r3, #12
 800aa60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa62:	61fa      	str	r2, [r7, #28]
 800aa64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa66:	69b9      	ldr	r1, [r7, #24]
 800aa68:	69fa      	ldr	r2, [r7, #28]
 800aa6a:	e841 2300 	strex	r3, r2, [r1]
 800aa6e:	617b      	str	r3, [r7, #20]
   return(result);
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d1e5      	bne.n	800aa42 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aa76:	e002      	b.n	800aa7e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800aa78:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800aa7a:	f7f8 fdbb 	bl	80035f4 <HAL_UART_TxCpltCallback>
}
 800aa7e:	bf00      	nop
 800aa80:	3740      	adds	r7, #64	; 0x40
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}

0800aa86 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aa86:	b580      	push	{r7, lr}
 800aa88:	b084      	sub	sp, #16
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa92:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800aa94:	68f8      	ldr	r0, [r7, #12]
 800aa96:	f7ff ff7f 	bl	800a998 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa9a:	bf00      	nop
 800aa9c:	3710      	adds	r7, #16
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}

0800aaa2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aaa2:	b580      	push	{r7, lr}
 800aaa4:	b09c      	sub	sp, #112	; 0x70
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaae:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d172      	bne.n	800aba4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800aabe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aac0:	2200      	movs	r2, #0
 800aac2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	330c      	adds	r3, #12
 800aaca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aacc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aace:	e853 3f00 	ldrex	r3, [r3]
 800aad2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800aad4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aad6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aada:	66bb      	str	r3, [r7, #104]	; 0x68
 800aadc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	330c      	adds	r3, #12
 800aae2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aae4:	65ba      	str	r2, [r7, #88]	; 0x58
 800aae6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aae8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aaea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aaec:	e841 2300 	strex	r3, r2, [r1]
 800aaf0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800aaf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d1e5      	bne.n	800aac4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aaf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	3314      	adds	r3, #20
 800aafe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab02:	e853 3f00 	ldrex	r3, [r3]
 800ab06:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ab08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab0a:	f023 0301 	bic.w	r3, r3, #1
 800ab0e:	667b      	str	r3, [r7, #100]	; 0x64
 800ab10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	3314      	adds	r3, #20
 800ab16:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ab18:	647a      	str	r2, [r7, #68]	; 0x44
 800ab1a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ab1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab20:	e841 2300 	strex	r3, r2, [r1]
 800ab24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ab26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d1e5      	bne.n	800aaf8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	3314      	adds	r3, #20
 800ab32:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab36:	e853 3f00 	ldrex	r3, [r3]
 800ab3a:	623b      	str	r3, [r7, #32]
   return(result);
 800ab3c:	6a3b      	ldr	r3, [r7, #32]
 800ab3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab42:	663b      	str	r3, [r7, #96]	; 0x60
 800ab44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	3314      	adds	r3, #20
 800ab4a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ab4c:	633a      	str	r2, [r7, #48]	; 0x30
 800ab4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab54:	e841 2300 	strex	r3, r2, [r1]
 800ab58:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ab5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d1e5      	bne.n	800ab2c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ab60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab62:	2220      	movs	r2, #32
 800ab64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab6c:	2b01      	cmp	r3, #1
 800ab6e:	d119      	bne.n	800aba4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	330c      	adds	r3, #12
 800ab76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	e853 3f00 	ldrex	r3, [r3]
 800ab7e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	f023 0310 	bic.w	r3, r3, #16
 800ab86:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	330c      	adds	r3, #12
 800ab8e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ab90:	61fa      	str	r2, [r7, #28]
 800ab92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab94:	69b9      	ldr	r1, [r7, #24]
 800ab96:	69fa      	ldr	r2, [r7, #28]
 800ab98:	e841 2300 	strex	r3, r2, [r1]
 800ab9c:	617b      	str	r3, [r7, #20]
   return(result);
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d1e5      	bne.n	800ab70 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d106      	bne.n	800abba <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800abac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800abb0:	4619      	mov	r1, r3
 800abb2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800abb4:	f7ff ff0e 	bl	800a9d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800abb8:	e002      	b.n	800abc0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800abba:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800abbc:	f7f8 fd2c 	bl	8003618 <HAL_UART_RxCpltCallback>
}
 800abc0:	bf00      	nop
 800abc2:	3770      	adds	r7, #112	; 0x70
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b084      	sub	sp, #16
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abd4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abda:	2b01      	cmp	r3, #1
 800abdc:	d108      	bne.n	800abf0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800abe2:	085b      	lsrs	r3, r3, #1
 800abe4:	b29b      	uxth	r3, r3
 800abe6:	4619      	mov	r1, r3
 800abe8:	68f8      	ldr	r0, [r7, #12]
 800abea:	f7ff fef3 	bl	800a9d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800abee:	e002      	b.n	800abf6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800abf0:	68f8      	ldr	r0, [r7, #12]
 800abf2:	f7ff fedb 	bl	800a9ac <HAL_UART_RxHalfCpltCallback>
}
 800abf6:	bf00      	nop
 800abf8:	3710      	adds	r7, #16
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}

0800abfe <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800abfe:	b580      	push	{r7, lr}
 800ac00:	b084      	sub	sp, #16
 800ac02:	af00      	add	r7, sp, #0
 800ac04:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ac06:	2300      	movs	r3, #0
 800ac08:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac0e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	695b      	ldr	r3, [r3, #20]
 800ac16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac1a:	2b80      	cmp	r3, #128	; 0x80
 800ac1c:	bf0c      	ite	eq
 800ac1e:	2301      	moveq	r3, #1
 800ac20:	2300      	movne	r3, #0
 800ac22:	b2db      	uxtb	r3, r3
 800ac24:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac2c:	b2db      	uxtb	r3, r3
 800ac2e:	2b21      	cmp	r3, #33	; 0x21
 800ac30:	d108      	bne.n	800ac44 <UART_DMAError+0x46>
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d005      	beq.n	800ac44 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800ac3e:	68b8      	ldr	r0, [r7, #8]
 800ac40:	f000 f8c6 	bl	800add0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	695b      	ldr	r3, [r3, #20]
 800ac4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac4e:	2b40      	cmp	r3, #64	; 0x40
 800ac50:	bf0c      	ite	eq
 800ac52:	2301      	moveq	r3, #1
 800ac54:	2300      	movne	r3, #0
 800ac56:	b2db      	uxtb	r3, r3
 800ac58:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ac60:	b2db      	uxtb	r3, r3
 800ac62:	2b22      	cmp	r3, #34	; 0x22
 800ac64:	d108      	bne.n	800ac78 <UART_DMAError+0x7a>
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d005      	beq.n	800ac78 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800ac72:	68b8      	ldr	r0, [r7, #8]
 800ac74:	f000 f8d4 	bl	800ae20 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac7c:	f043 0210 	orr.w	r2, r3, #16
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac84:	68b8      	ldr	r0, [r7, #8]
 800ac86:	f7ff fe9b 	bl	800a9c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac8a:	bf00      	nop
 800ac8c:	3710      	adds	r7, #16
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}
	...

0800ac94 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b098      	sub	sp, #96	; 0x60
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	60f8      	str	r0, [r7, #12]
 800ac9c:	60b9      	str	r1, [r7, #8]
 800ac9e:	4613      	mov	r3, r2
 800aca0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800aca2:	68ba      	ldr	r2, [r7, #8]
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	88fa      	ldrh	r2, [r7, #6]
 800acac:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2200      	movs	r2, #0
 800acb2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2222      	movs	r2, #34	; 0x22
 800acb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acc0:	4a40      	ldr	r2, [pc, #256]	; (800adc4 <UART_Start_Receive_DMA+0x130>)
 800acc2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acc8:	4a3f      	ldr	r2, [pc, #252]	; (800adc8 <UART_Start_Receive_DMA+0x134>)
 800acca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acd0:	4a3e      	ldr	r2, [pc, #248]	; (800adcc <UART_Start_Receive_DMA+0x138>)
 800acd2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acd8:	2200      	movs	r2, #0
 800acda:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800acdc:	f107 0308 	add.w	r3, r7, #8
 800ace0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	3304      	adds	r3, #4
 800acec:	4619      	mov	r1, r3
 800acee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800acf0:	681a      	ldr	r2, [r3, #0]
 800acf2:	88fb      	ldrh	r3, [r7, #6]
 800acf4:	f7fc ff6c 	bl	8007bd0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800acf8:	2300      	movs	r3, #0
 800acfa:	613b      	str	r3, [r7, #16]
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	613b      	str	r3, [r7, #16]
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	613b      	str	r3, [r7, #16]
 800ad0c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	2200      	movs	r2, #0
 800ad12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	691b      	ldr	r3, [r3, #16]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d019      	beq.n	800ad52 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	330c      	adds	r3, #12
 800ad24:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad28:	e853 3f00 	ldrex	r3, [r3]
 800ad2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ad2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad34:	65bb      	str	r3, [r7, #88]	; 0x58
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	330c      	adds	r3, #12
 800ad3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ad3e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800ad40:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad42:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ad44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ad46:	e841 2300 	strex	r3, r2, [r1]
 800ad4a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ad4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d1e5      	bne.n	800ad1e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	3314      	adds	r3, #20
 800ad58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad5c:	e853 3f00 	ldrex	r3, [r3]
 800ad60:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ad62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad64:	f043 0301 	orr.w	r3, r3, #1
 800ad68:	657b      	str	r3, [r7, #84]	; 0x54
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	3314      	adds	r3, #20
 800ad70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ad72:	63ba      	str	r2, [r7, #56]	; 0x38
 800ad74:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad76:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ad78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad7a:	e841 2300 	strex	r3, r2, [r1]
 800ad7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ad80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d1e5      	bne.n	800ad52 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	3314      	adds	r3, #20
 800ad8c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad8e:	69bb      	ldr	r3, [r7, #24]
 800ad90:	e853 3f00 	ldrex	r3, [r3]
 800ad94:	617b      	str	r3, [r7, #20]
   return(result);
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad9c:	653b      	str	r3, [r7, #80]	; 0x50
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	3314      	adds	r3, #20
 800ada4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ada6:	627a      	str	r2, [r7, #36]	; 0x24
 800ada8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adaa:	6a39      	ldr	r1, [r7, #32]
 800adac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adae:	e841 2300 	strex	r3, r2, [r1]
 800adb2:	61fb      	str	r3, [r7, #28]
   return(result);
 800adb4:	69fb      	ldr	r3, [r7, #28]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d1e5      	bne.n	800ad86 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800adba:	2300      	movs	r3, #0
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	3760      	adds	r7, #96	; 0x60
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}
 800adc4:	0800aaa3 	.word	0x0800aaa3
 800adc8:	0800abc9 	.word	0x0800abc9
 800adcc:	0800abff 	.word	0x0800abff

0800add0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800add0:	b480      	push	{r7}
 800add2:	b089      	sub	sp, #36	; 0x24
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	330c      	adds	r3, #12
 800adde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	e853 3f00 	ldrex	r3, [r3]
 800ade6:	60bb      	str	r3, [r7, #8]
   return(result);
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800adee:	61fb      	str	r3, [r7, #28]
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	330c      	adds	r3, #12
 800adf6:	69fa      	ldr	r2, [r7, #28]
 800adf8:	61ba      	str	r2, [r7, #24]
 800adfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adfc:	6979      	ldr	r1, [r7, #20]
 800adfe:	69ba      	ldr	r2, [r7, #24]
 800ae00:	e841 2300 	strex	r3, r2, [r1]
 800ae04:	613b      	str	r3, [r7, #16]
   return(result);
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d1e5      	bne.n	800add8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2220      	movs	r2, #32
 800ae10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800ae14:	bf00      	nop
 800ae16:	3724      	adds	r7, #36	; 0x24
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1e:	4770      	bx	lr

0800ae20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b095      	sub	sp, #84	; 0x54
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	330c      	adds	r3, #12
 800ae2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae32:	e853 3f00 	ldrex	r3, [r3]
 800ae36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ae38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ae3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	330c      	adds	r3, #12
 800ae46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ae48:	643a      	str	r2, [r7, #64]	; 0x40
 800ae4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ae4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ae50:	e841 2300 	strex	r3, r2, [r1]
 800ae54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ae56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d1e5      	bne.n	800ae28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	3314      	adds	r3, #20
 800ae62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae64:	6a3b      	ldr	r3, [r7, #32]
 800ae66:	e853 3f00 	ldrex	r3, [r3]
 800ae6a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae6c:	69fb      	ldr	r3, [r7, #28]
 800ae6e:	f023 0301 	bic.w	r3, r3, #1
 800ae72:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	3314      	adds	r3, #20
 800ae7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ae7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae84:	e841 2300 	strex	r3, r2, [r1]
 800ae88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d1e5      	bne.n	800ae5c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae94:	2b01      	cmp	r3, #1
 800ae96:	d119      	bne.n	800aecc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	330c      	adds	r3, #12
 800ae9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	e853 3f00 	ldrex	r3, [r3]
 800aea6:	60bb      	str	r3, [r7, #8]
   return(result);
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	f023 0310 	bic.w	r3, r3, #16
 800aeae:	647b      	str	r3, [r7, #68]	; 0x44
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	330c      	adds	r3, #12
 800aeb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aeb8:	61ba      	str	r2, [r7, #24]
 800aeba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aebc:	6979      	ldr	r1, [r7, #20]
 800aebe:	69ba      	ldr	r2, [r7, #24]
 800aec0:	e841 2300 	strex	r3, r2, [r1]
 800aec4:	613b      	str	r3, [r7, #16]
   return(result);
 800aec6:	693b      	ldr	r3, [r7, #16]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d1e5      	bne.n	800ae98 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2220      	movs	r2, #32
 800aed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2200      	movs	r2, #0
 800aed8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800aeda:	bf00      	nop
 800aedc:	3754      	adds	r7, #84	; 0x54
 800aede:	46bd      	mov	sp, r7
 800aee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee4:	4770      	bx	lr

0800aee6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aee6:	b580      	push	{r7, lr}
 800aee8:	b084      	sub	sp, #16
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aef2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	2200      	movs	r2, #0
 800aef8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	2200      	movs	r2, #0
 800aefe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800af00:	68f8      	ldr	r0, [r7, #12]
 800af02:	f7ff fd5d 	bl	800a9c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af06:	bf00      	nop
 800af08:	3710      	adds	r7, #16
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}

0800af0e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800af0e:	b480      	push	{r7}
 800af10:	b085      	sub	sp, #20
 800af12:	af00      	add	r7, sp, #0
 800af14:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af1c:	b2db      	uxtb	r3, r3
 800af1e:	2b21      	cmp	r3, #33	; 0x21
 800af20:	d13e      	bne.n	800afa0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	689b      	ldr	r3, [r3, #8]
 800af26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af2a:	d114      	bne.n	800af56 <UART_Transmit_IT+0x48>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	691b      	ldr	r3, [r3, #16]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d110      	bne.n	800af56 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6a1b      	ldr	r3, [r3, #32]
 800af38:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	881b      	ldrh	r3, [r3, #0]
 800af3e:	461a      	mov	r2, r3
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800af48:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6a1b      	ldr	r3, [r3, #32]
 800af4e:	1c9a      	adds	r2, r3, #2
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	621a      	str	r2, [r3, #32]
 800af54:	e008      	b.n	800af68 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6a1b      	ldr	r3, [r3, #32]
 800af5a:	1c59      	adds	r1, r3, #1
 800af5c:	687a      	ldr	r2, [r7, #4]
 800af5e:	6211      	str	r1, [r2, #32]
 800af60:	781a      	ldrb	r2, [r3, #0]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800af6c:	b29b      	uxth	r3, r3
 800af6e:	3b01      	subs	r3, #1
 800af70:	b29b      	uxth	r3, r3
 800af72:	687a      	ldr	r2, [r7, #4]
 800af74:	4619      	mov	r1, r3
 800af76:	84d1      	strh	r1, [r2, #38]	; 0x26
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d10f      	bne.n	800af9c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	68da      	ldr	r2, [r3, #12]
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800af8a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	68da      	ldr	r2, [r3, #12]
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800af9a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800af9c:	2300      	movs	r3, #0
 800af9e:	e000      	b.n	800afa2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800afa0:	2302      	movs	r3, #2
  }
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3714      	adds	r7, #20
 800afa6:	46bd      	mov	sp, r7
 800afa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afac:	4770      	bx	lr

0800afae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800afae:	b580      	push	{r7, lr}
 800afb0:	b082      	sub	sp, #8
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	68da      	ldr	r2, [r3, #12]
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800afc4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2220      	movs	r2, #32
 800afca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f7f8 fb10 	bl	80035f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800afd4:	2300      	movs	r3, #0
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3708      	adds	r7, #8
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}

0800afde <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800afde:	b580      	push	{r7, lr}
 800afe0:	b08c      	sub	sp, #48	; 0x30
 800afe2:	af00      	add	r7, sp, #0
 800afe4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800afec:	b2db      	uxtb	r3, r3
 800afee:	2b22      	cmp	r3, #34	; 0x22
 800aff0:	f040 80ab 	bne.w	800b14a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	689b      	ldr	r3, [r3, #8]
 800aff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800affc:	d117      	bne.n	800b02e <UART_Receive_IT+0x50>
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	691b      	ldr	r3, [r3, #16]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d113      	bne.n	800b02e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b006:	2300      	movs	r3, #0
 800b008:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b00e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	685b      	ldr	r3, [r3, #4]
 800b016:	b29b      	uxth	r3, r3
 800b018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b01c:	b29a      	uxth	r2, r3
 800b01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b020:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b026:	1c9a      	adds	r2, r3, #2
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	629a      	str	r2, [r3, #40]	; 0x28
 800b02c:	e026      	b.n	800b07c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b032:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b034:	2300      	movs	r3, #0
 800b036:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	689b      	ldr	r3, [r3, #8]
 800b03c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b040:	d007      	beq.n	800b052 <UART_Receive_IT+0x74>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	689b      	ldr	r3, [r3, #8]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d10a      	bne.n	800b060 <UART_Receive_IT+0x82>
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	691b      	ldr	r3, [r3, #16]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d106      	bne.n	800b060 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	685b      	ldr	r3, [r3, #4]
 800b058:	b2da      	uxtb	r2, r3
 800b05a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b05c:	701a      	strb	r2, [r3, #0]
 800b05e:	e008      	b.n	800b072 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	685b      	ldr	r3, [r3, #4]
 800b066:	b2db      	uxtb	r3, r3
 800b068:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b06c:	b2da      	uxtb	r2, r3
 800b06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b070:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b076:	1c5a      	adds	r2, r3, #1
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b080:	b29b      	uxth	r3, r3
 800b082:	3b01      	subs	r3, #1
 800b084:	b29b      	uxth	r3, r3
 800b086:	687a      	ldr	r2, [r7, #4]
 800b088:	4619      	mov	r1, r3
 800b08a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d15a      	bne.n	800b146 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	68da      	ldr	r2, [r3, #12]
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f022 0220 	bic.w	r2, r2, #32
 800b09e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	68da      	ldr	r2, [r3, #12]
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b0ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	695a      	ldr	r2, [r3, #20]
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f022 0201 	bic.w	r2, r2, #1
 800b0be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2220      	movs	r2, #32
 800b0c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0cc:	2b01      	cmp	r3, #1
 800b0ce:	d135      	bne.n	800b13c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	330c      	adds	r3, #12
 800b0dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	e853 3f00 	ldrex	r3, [r3]
 800b0e4:	613b      	str	r3, [r7, #16]
   return(result);
 800b0e6:	693b      	ldr	r3, [r7, #16]
 800b0e8:	f023 0310 	bic.w	r3, r3, #16
 800b0ec:	627b      	str	r3, [r7, #36]	; 0x24
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	330c      	adds	r3, #12
 800b0f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0f6:	623a      	str	r2, [r7, #32]
 800b0f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0fa:	69f9      	ldr	r1, [r7, #28]
 800b0fc:	6a3a      	ldr	r2, [r7, #32]
 800b0fe:	e841 2300 	strex	r3, r2, [r1]
 800b102:	61bb      	str	r3, [r7, #24]
   return(result);
 800b104:	69bb      	ldr	r3, [r7, #24]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d1e5      	bne.n	800b0d6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	f003 0310 	and.w	r3, r3, #16
 800b114:	2b10      	cmp	r3, #16
 800b116:	d10a      	bne.n	800b12e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b118:	2300      	movs	r3, #0
 800b11a:	60fb      	str	r3, [r7, #12]
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	60fb      	str	r3, [r7, #12]
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	685b      	ldr	r3, [r3, #4]
 800b12a:	60fb      	str	r3, [r7, #12]
 800b12c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b132:	4619      	mov	r1, r3
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f7ff fc4d 	bl	800a9d4 <HAL_UARTEx_RxEventCallback>
 800b13a:	e002      	b.n	800b142 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b13c:	6878      	ldr	r0, [r7, #4]
 800b13e:	f7f8 fa6b 	bl	8003618 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b142:	2300      	movs	r3, #0
 800b144:	e002      	b.n	800b14c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b146:	2300      	movs	r3, #0
 800b148:	e000      	b.n	800b14c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b14a:	2302      	movs	r3, #2
  }
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	3730      	adds	r7, #48	; 0x30
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}

0800b154 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b154:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b158:	b0c0      	sub	sp, #256	; 0x100
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	691b      	ldr	r3, [r3, #16]
 800b168:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b16c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b170:	68d9      	ldr	r1, [r3, #12]
 800b172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b176:	681a      	ldr	r2, [r3, #0]
 800b178:	ea40 0301 	orr.w	r3, r0, r1
 800b17c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b17e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b182:	689a      	ldr	r2, [r3, #8]
 800b184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b188:	691b      	ldr	r3, [r3, #16]
 800b18a:	431a      	orrs	r2, r3
 800b18c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b190:	695b      	ldr	r3, [r3, #20]
 800b192:	431a      	orrs	r2, r3
 800b194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b198:	69db      	ldr	r3, [r3, #28]
 800b19a:	4313      	orrs	r3, r2
 800b19c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b1a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	68db      	ldr	r3, [r3, #12]
 800b1a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b1ac:	f021 010c 	bic.w	r1, r1, #12
 800b1b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1b4:	681a      	ldr	r2, [r3, #0]
 800b1b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b1ba:	430b      	orrs	r3, r1
 800b1bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b1be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	695b      	ldr	r3, [r3, #20]
 800b1c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b1ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1ce:	6999      	ldr	r1, [r3, #24]
 800b1d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1d4:	681a      	ldr	r2, [r3, #0]
 800b1d6:	ea40 0301 	orr.w	r3, r0, r1
 800b1da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b1dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1e0:	681a      	ldr	r2, [r3, #0]
 800b1e2:	4b8f      	ldr	r3, [pc, #572]	; (800b420 <UART_SetConfig+0x2cc>)
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	d005      	beq.n	800b1f4 <UART_SetConfig+0xa0>
 800b1e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1ec:	681a      	ldr	r2, [r3, #0]
 800b1ee:	4b8d      	ldr	r3, [pc, #564]	; (800b424 <UART_SetConfig+0x2d0>)
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	d104      	bne.n	800b1fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b1f4:	f7fd fe7a 	bl	8008eec <HAL_RCC_GetPCLK2Freq>
 800b1f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b1fc:	e003      	b.n	800b206 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b1fe:	f7fd fe61 	bl	8008ec4 <HAL_RCC_GetPCLK1Freq>
 800b202:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b20a:	69db      	ldr	r3, [r3, #28]
 800b20c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b210:	f040 810c 	bne.w	800b42c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b214:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b218:	2200      	movs	r2, #0
 800b21a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b21e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b222:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b226:	4622      	mov	r2, r4
 800b228:	462b      	mov	r3, r5
 800b22a:	1891      	adds	r1, r2, r2
 800b22c:	65b9      	str	r1, [r7, #88]	; 0x58
 800b22e:	415b      	adcs	r3, r3
 800b230:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b232:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b236:	4621      	mov	r1, r4
 800b238:	eb12 0801 	adds.w	r8, r2, r1
 800b23c:	4629      	mov	r1, r5
 800b23e:	eb43 0901 	adc.w	r9, r3, r1
 800b242:	f04f 0200 	mov.w	r2, #0
 800b246:	f04f 0300 	mov.w	r3, #0
 800b24a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b24e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b252:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b256:	4690      	mov	r8, r2
 800b258:	4699      	mov	r9, r3
 800b25a:	4623      	mov	r3, r4
 800b25c:	eb18 0303 	adds.w	r3, r8, r3
 800b260:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b264:	462b      	mov	r3, r5
 800b266:	eb49 0303 	adc.w	r3, r9, r3
 800b26a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b26e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b272:	685b      	ldr	r3, [r3, #4]
 800b274:	2200      	movs	r2, #0
 800b276:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b27a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b27e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b282:	460b      	mov	r3, r1
 800b284:	18db      	adds	r3, r3, r3
 800b286:	653b      	str	r3, [r7, #80]	; 0x50
 800b288:	4613      	mov	r3, r2
 800b28a:	eb42 0303 	adc.w	r3, r2, r3
 800b28e:	657b      	str	r3, [r7, #84]	; 0x54
 800b290:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b294:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b298:	f7f5 fc70 	bl	8000b7c <__aeabi_uldivmod>
 800b29c:	4602      	mov	r2, r0
 800b29e:	460b      	mov	r3, r1
 800b2a0:	4b61      	ldr	r3, [pc, #388]	; (800b428 <UART_SetConfig+0x2d4>)
 800b2a2:	fba3 2302 	umull	r2, r3, r3, r2
 800b2a6:	095b      	lsrs	r3, r3, #5
 800b2a8:	011c      	lsls	r4, r3, #4
 800b2aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b2b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b2b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b2bc:	4642      	mov	r2, r8
 800b2be:	464b      	mov	r3, r9
 800b2c0:	1891      	adds	r1, r2, r2
 800b2c2:	64b9      	str	r1, [r7, #72]	; 0x48
 800b2c4:	415b      	adcs	r3, r3
 800b2c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b2c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b2cc:	4641      	mov	r1, r8
 800b2ce:	eb12 0a01 	adds.w	sl, r2, r1
 800b2d2:	4649      	mov	r1, r9
 800b2d4:	eb43 0b01 	adc.w	fp, r3, r1
 800b2d8:	f04f 0200 	mov.w	r2, #0
 800b2dc:	f04f 0300 	mov.w	r3, #0
 800b2e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b2e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b2e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b2ec:	4692      	mov	sl, r2
 800b2ee:	469b      	mov	fp, r3
 800b2f0:	4643      	mov	r3, r8
 800b2f2:	eb1a 0303 	adds.w	r3, sl, r3
 800b2f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b2fa:	464b      	mov	r3, r9
 800b2fc:	eb4b 0303 	adc.w	r3, fp, r3
 800b300:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b308:	685b      	ldr	r3, [r3, #4]
 800b30a:	2200      	movs	r2, #0
 800b30c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b310:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b314:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b318:	460b      	mov	r3, r1
 800b31a:	18db      	adds	r3, r3, r3
 800b31c:	643b      	str	r3, [r7, #64]	; 0x40
 800b31e:	4613      	mov	r3, r2
 800b320:	eb42 0303 	adc.w	r3, r2, r3
 800b324:	647b      	str	r3, [r7, #68]	; 0x44
 800b326:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b32a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b32e:	f7f5 fc25 	bl	8000b7c <__aeabi_uldivmod>
 800b332:	4602      	mov	r2, r0
 800b334:	460b      	mov	r3, r1
 800b336:	4611      	mov	r1, r2
 800b338:	4b3b      	ldr	r3, [pc, #236]	; (800b428 <UART_SetConfig+0x2d4>)
 800b33a:	fba3 2301 	umull	r2, r3, r3, r1
 800b33e:	095b      	lsrs	r3, r3, #5
 800b340:	2264      	movs	r2, #100	; 0x64
 800b342:	fb02 f303 	mul.w	r3, r2, r3
 800b346:	1acb      	subs	r3, r1, r3
 800b348:	00db      	lsls	r3, r3, #3
 800b34a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b34e:	4b36      	ldr	r3, [pc, #216]	; (800b428 <UART_SetConfig+0x2d4>)
 800b350:	fba3 2302 	umull	r2, r3, r3, r2
 800b354:	095b      	lsrs	r3, r3, #5
 800b356:	005b      	lsls	r3, r3, #1
 800b358:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b35c:	441c      	add	r4, r3
 800b35e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b362:	2200      	movs	r2, #0
 800b364:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b368:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b36c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b370:	4642      	mov	r2, r8
 800b372:	464b      	mov	r3, r9
 800b374:	1891      	adds	r1, r2, r2
 800b376:	63b9      	str	r1, [r7, #56]	; 0x38
 800b378:	415b      	adcs	r3, r3
 800b37a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b37c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b380:	4641      	mov	r1, r8
 800b382:	1851      	adds	r1, r2, r1
 800b384:	6339      	str	r1, [r7, #48]	; 0x30
 800b386:	4649      	mov	r1, r9
 800b388:	414b      	adcs	r3, r1
 800b38a:	637b      	str	r3, [r7, #52]	; 0x34
 800b38c:	f04f 0200 	mov.w	r2, #0
 800b390:	f04f 0300 	mov.w	r3, #0
 800b394:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b398:	4659      	mov	r1, fp
 800b39a:	00cb      	lsls	r3, r1, #3
 800b39c:	4651      	mov	r1, sl
 800b39e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b3a2:	4651      	mov	r1, sl
 800b3a4:	00ca      	lsls	r2, r1, #3
 800b3a6:	4610      	mov	r0, r2
 800b3a8:	4619      	mov	r1, r3
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	4642      	mov	r2, r8
 800b3ae:	189b      	adds	r3, r3, r2
 800b3b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b3b4:	464b      	mov	r3, r9
 800b3b6:	460a      	mov	r2, r1
 800b3b8:	eb42 0303 	adc.w	r3, r2, r3
 800b3bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b3c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3c4:	685b      	ldr	r3, [r3, #4]
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b3cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b3d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b3d4:	460b      	mov	r3, r1
 800b3d6:	18db      	adds	r3, r3, r3
 800b3d8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b3da:	4613      	mov	r3, r2
 800b3dc:	eb42 0303 	adc.w	r3, r2, r3
 800b3e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b3e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b3e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b3ea:	f7f5 fbc7 	bl	8000b7c <__aeabi_uldivmod>
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	460b      	mov	r3, r1
 800b3f2:	4b0d      	ldr	r3, [pc, #52]	; (800b428 <UART_SetConfig+0x2d4>)
 800b3f4:	fba3 1302 	umull	r1, r3, r3, r2
 800b3f8:	095b      	lsrs	r3, r3, #5
 800b3fa:	2164      	movs	r1, #100	; 0x64
 800b3fc:	fb01 f303 	mul.w	r3, r1, r3
 800b400:	1ad3      	subs	r3, r2, r3
 800b402:	00db      	lsls	r3, r3, #3
 800b404:	3332      	adds	r3, #50	; 0x32
 800b406:	4a08      	ldr	r2, [pc, #32]	; (800b428 <UART_SetConfig+0x2d4>)
 800b408:	fba2 2303 	umull	r2, r3, r2, r3
 800b40c:	095b      	lsrs	r3, r3, #5
 800b40e:	f003 0207 	and.w	r2, r3, #7
 800b412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	4422      	add	r2, r4
 800b41a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b41c:	e105      	b.n	800b62a <UART_SetConfig+0x4d6>
 800b41e:	bf00      	nop
 800b420:	40011000 	.word	0x40011000
 800b424:	40011400 	.word	0x40011400
 800b428:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b42c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b430:	2200      	movs	r2, #0
 800b432:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b436:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b43a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b43e:	4642      	mov	r2, r8
 800b440:	464b      	mov	r3, r9
 800b442:	1891      	adds	r1, r2, r2
 800b444:	6239      	str	r1, [r7, #32]
 800b446:	415b      	adcs	r3, r3
 800b448:	627b      	str	r3, [r7, #36]	; 0x24
 800b44a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b44e:	4641      	mov	r1, r8
 800b450:	1854      	adds	r4, r2, r1
 800b452:	4649      	mov	r1, r9
 800b454:	eb43 0501 	adc.w	r5, r3, r1
 800b458:	f04f 0200 	mov.w	r2, #0
 800b45c:	f04f 0300 	mov.w	r3, #0
 800b460:	00eb      	lsls	r3, r5, #3
 800b462:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b466:	00e2      	lsls	r2, r4, #3
 800b468:	4614      	mov	r4, r2
 800b46a:	461d      	mov	r5, r3
 800b46c:	4643      	mov	r3, r8
 800b46e:	18e3      	adds	r3, r4, r3
 800b470:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b474:	464b      	mov	r3, r9
 800b476:	eb45 0303 	adc.w	r3, r5, r3
 800b47a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b47e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b482:	685b      	ldr	r3, [r3, #4]
 800b484:	2200      	movs	r2, #0
 800b486:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b48a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b48e:	f04f 0200 	mov.w	r2, #0
 800b492:	f04f 0300 	mov.w	r3, #0
 800b496:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b49a:	4629      	mov	r1, r5
 800b49c:	008b      	lsls	r3, r1, #2
 800b49e:	4621      	mov	r1, r4
 800b4a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b4a4:	4621      	mov	r1, r4
 800b4a6:	008a      	lsls	r2, r1, #2
 800b4a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b4ac:	f7f5 fb66 	bl	8000b7c <__aeabi_uldivmod>
 800b4b0:	4602      	mov	r2, r0
 800b4b2:	460b      	mov	r3, r1
 800b4b4:	4b60      	ldr	r3, [pc, #384]	; (800b638 <UART_SetConfig+0x4e4>)
 800b4b6:	fba3 2302 	umull	r2, r3, r3, r2
 800b4ba:	095b      	lsrs	r3, r3, #5
 800b4bc:	011c      	lsls	r4, r3, #4
 800b4be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b4c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b4cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b4d0:	4642      	mov	r2, r8
 800b4d2:	464b      	mov	r3, r9
 800b4d4:	1891      	adds	r1, r2, r2
 800b4d6:	61b9      	str	r1, [r7, #24]
 800b4d8:	415b      	adcs	r3, r3
 800b4da:	61fb      	str	r3, [r7, #28]
 800b4dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b4e0:	4641      	mov	r1, r8
 800b4e2:	1851      	adds	r1, r2, r1
 800b4e4:	6139      	str	r1, [r7, #16]
 800b4e6:	4649      	mov	r1, r9
 800b4e8:	414b      	adcs	r3, r1
 800b4ea:	617b      	str	r3, [r7, #20]
 800b4ec:	f04f 0200 	mov.w	r2, #0
 800b4f0:	f04f 0300 	mov.w	r3, #0
 800b4f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b4f8:	4659      	mov	r1, fp
 800b4fa:	00cb      	lsls	r3, r1, #3
 800b4fc:	4651      	mov	r1, sl
 800b4fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b502:	4651      	mov	r1, sl
 800b504:	00ca      	lsls	r2, r1, #3
 800b506:	4610      	mov	r0, r2
 800b508:	4619      	mov	r1, r3
 800b50a:	4603      	mov	r3, r0
 800b50c:	4642      	mov	r2, r8
 800b50e:	189b      	adds	r3, r3, r2
 800b510:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b514:	464b      	mov	r3, r9
 800b516:	460a      	mov	r2, r1
 800b518:	eb42 0303 	adc.w	r3, r2, r3
 800b51c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b524:	685b      	ldr	r3, [r3, #4]
 800b526:	2200      	movs	r2, #0
 800b528:	67bb      	str	r3, [r7, #120]	; 0x78
 800b52a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b52c:	f04f 0200 	mov.w	r2, #0
 800b530:	f04f 0300 	mov.w	r3, #0
 800b534:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b538:	4649      	mov	r1, r9
 800b53a:	008b      	lsls	r3, r1, #2
 800b53c:	4641      	mov	r1, r8
 800b53e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b542:	4641      	mov	r1, r8
 800b544:	008a      	lsls	r2, r1, #2
 800b546:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b54a:	f7f5 fb17 	bl	8000b7c <__aeabi_uldivmod>
 800b54e:	4602      	mov	r2, r0
 800b550:	460b      	mov	r3, r1
 800b552:	4b39      	ldr	r3, [pc, #228]	; (800b638 <UART_SetConfig+0x4e4>)
 800b554:	fba3 1302 	umull	r1, r3, r3, r2
 800b558:	095b      	lsrs	r3, r3, #5
 800b55a:	2164      	movs	r1, #100	; 0x64
 800b55c:	fb01 f303 	mul.w	r3, r1, r3
 800b560:	1ad3      	subs	r3, r2, r3
 800b562:	011b      	lsls	r3, r3, #4
 800b564:	3332      	adds	r3, #50	; 0x32
 800b566:	4a34      	ldr	r2, [pc, #208]	; (800b638 <UART_SetConfig+0x4e4>)
 800b568:	fba2 2303 	umull	r2, r3, r2, r3
 800b56c:	095b      	lsrs	r3, r3, #5
 800b56e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b572:	441c      	add	r4, r3
 800b574:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b578:	2200      	movs	r2, #0
 800b57a:	673b      	str	r3, [r7, #112]	; 0x70
 800b57c:	677a      	str	r2, [r7, #116]	; 0x74
 800b57e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b582:	4642      	mov	r2, r8
 800b584:	464b      	mov	r3, r9
 800b586:	1891      	adds	r1, r2, r2
 800b588:	60b9      	str	r1, [r7, #8]
 800b58a:	415b      	adcs	r3, r3
 800b58c:	60fb      	str	r3, [r7, #12]
 800b58e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b592:	4641      	mov	r1, r8
 800b594:	1851      	adds	r1, r2, r1
 800b596:	6039      	str	r1, [r7, #0]
 800b598:	4649      	mov	r1, r9
 800b59a:	414b      	adcs	r3, r1
 800b59c:	607b      	str	r3, [r7, #4]
 800b59e:	f04f 0200 	mov.w	r2, #0
 800b5a2:	f04f 0300 	mov.w	r3, #0
 800b5a6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b5aa:	4659      	mov	r1, fp
 800b5ac:	00cb      	lsls	r3, r1, #3
 800b5ae:	4651      	mov	r1, sl
 800b5b0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b5b4:	4651      	mov	r1, sl
 800b5b6:	00ca      	lsls	r2, r1, #3
 800b5b8:	4610      	mov	r0, r2
 800b5ba:	4619      	mov	r1, r3
 800b5bc:	4603      	mov	r3, r0
 800b5be:	4642      	mov	r2, r8
 800b5c0:	189b      	adds	r3, r3, r2
 800b5c2:	66bb      	str	r3, [r7, #104]	; 0x68
 800b5c4:	464b      	mov	r3, r9
 800b5c6:	460a      	mov	r2, r1
 800b5c8:	eb42 0303 	adc.w	r3, r2, r3
 800b5cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b5ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5d2:	685b      	ldr	r3, [r3, #4]
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	663b      	str	r3, [r7, #96]	; 0x60
 800b5d8:	667a      	str	r2, [r7, #100]	; 0x64
 800b5da:	f04f 0200 	mov.w	r2, #0
 800b5de:	f04f 0300 	mov.w	r3, #0
 800b5e2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b5e6:	4649      	mov	r1, r9
 800b5e8:	008b      	lsls	r3, r1, #2
 800b5ea:	4641      	mov	r1, r8
 800b5ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b5f0:	4641      	mov	r1, r8
 800b5f2:	008a      	lsls	r2, r1, #2
 800b5f4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b5f8:	f7f5 fac0 	bl	8000b7c <__aeabi_uldivmod>
 800b5fc:	4602      	mov	r2, r0
 800b5fe:	460b      	mov	r3, r1
 800b600:	4b0d      	ldr	r3, [pc, #52]	; (800b638 <UART_SetConfig+0x4e4>)
 800b602:	fba3 1302 	umull	r1, r3, r3, r2
 800b606:	095b      	lsrs	r3, r3, #5
 800b608:	2164      	movs	r1, #100	; 0x64
 800b60a:	fb01 f303 	mul.w	r3, r1, r3
 800b60e:	1ad3      	subs	r3, r2, r3
 800b610:	011b      	lsls	r3, r3, #4
 800b612:	3332      	adds	r3, #50	; 0x32
 800b614:	4a08      	ldr	r2, [pc, #32]	; (800b638 <UART_SetConfig+0x4e4>)
 800b616:	fba2 2303 	umull	r2, r3, r2, r3
 800b61a:	095b      	lsrs	r3, r3, #5
 800b61c:	f003 020f 	and.w	r2, r3, #15
 800b620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	4422      	add	r2, r4
 800b628:	609a      	str	r2, [r3, #8]
}
 800b62a:	bf00      	nop
 800b62c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b630:	46bd      	mov	sp, r7
 800b632:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b636:	bf00      	nop
 800b638:	51eb851f 	.word	0x51eb851f

0800b63c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b63c:	b480      	push	{r7}
 800b63e:	b085      	sub	sp, #20
 800b640:	af00      	add	r7, sp, #0
 800b642:	4603      	mov	r3, r0
 800b644:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b646:	2300      	movs	r3, #0
 800b648:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b64a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b64e:	2b84      	cmp	r3, #132	; 0x84
 800b650:	d005      	beq.n	800b65e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b652:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	4413      	add	r3, r2
 800b65a:	3303      	adds	r3, #3
 800b65c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b65e:	68fb      	ldr	r3, [r7, #12]
}
 800b660:	4618      	mov	r0, r3
 800b662:	3714      	adds	r7, #20
 800b664:	46bd      	mov	sp, r7
 800b666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66a:	4770      	bx	lr

0800b66c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b670:	f000 faf6 	bl	800bc60 <vTaskStartScheduler>
  
  return osOK;
 800b674:	2300      	movs	r3, #0
}
 800b676:	4618      	mov	r0, r3
 800b678:	bd80      	pop	{r7, pc}

0800b67a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b67a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b67c:	b089      	sub	sp, #36	; 0x24
 800b67e:	af04      	add	r7, sp, #16
 800b680:	6078      	str	r0, [r7, #4]
 800b682:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	695b      	ldr	r3, [r3, #20]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d020      	beq.n	800b6ce <osThreadCreate+0x54>
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	699b      	ldr	r3, [r3, #24]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d01c      	beq.n	800b6ce <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	685c      	ldr	r4, [r3, #4]
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681d      	ldr	r5, [r3, #0]
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	691e      	ldr	r6, [r3, #16]
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f7ff ffc8 	bl	800b63c <makeFreeRtosPriority>
 800b6ac:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	695b      	ldr	r3, [r3, #20]
 800b6b2:	687a      	ldr	r2, [r7, #4]
 800b6b4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b6b6:	9202      	str	r2, [sp, #8]
 800b6b8:	9301      	str	r3, [sp, #4]
 800b6ba:	9100      	str	r1, [sp, #0]
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	4632      	mov	r2, r6
 800b6c0:	4629      	mov	r1, r5
 800b6c2:	4620      	mov	r0, r4
 800b6c4:	f000 f8ed 	bl	800b8a2 <xTaskCreateStatic>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	60fb      	str	r3, [r7, #12]
 800b6cc:	e01c      	b.n	800b708 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	685c      	ldr	r4, [r3, #4]
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b6da:	b29e      	uxth	r6, r3
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f7ff ffaa 	bl	800b63c <makeFreeRtosPriority>
 800b6e8:	4602      	mov	r2, r0
 800b6ea:	f107 030c 	add.w	r3, r7, #12
 800b6ee:	9301      	str	r3, [sp, #4]
 800b6f0:	9200      	str	r2, [sp, #0]
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	4632      	mov	r2, r6
 800b6f6:	4629      	mov	r1, r5
 800b6f8:	4620      	mov	r0, r4
 800b6fa:	f000 f92f 	bl	800b95c <xTaskCreate>
 800b6fe:	4603      	mov	r3, r0
 800b700:	2b01      	cmp	r3, #1
 800b702:	d001      	beq.n	800b708 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b704:	2300      	movs	r3, #0
 800b706:	e000      	b.n	800b70a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b708:	68fb      	ldr	r3, [r7, #12]
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	3714      	adds	r7, #20
 800b70e:	46bd      	mov	sp, r7
 800b710:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b712 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b712:	b580      	push	{r7, lr}
 800b714:	b084      	sub	sp, #16
 800b716:	af00      	add	r7, sp, #0
 800b718:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d001      	beq.n	800b728 <osDelay+0x16>
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	e000      	b.n	800b72a <osDelay+0x18>
 800b728:	2301      	movs	r3, #1
 800b72a:	4618      	mov	r0, r3
 800b72c:	f000 fa64 	bl	800bbf8 <vTaskDelay>
  
  return osOK;
 800b730:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b732:	4618      	mov	r0, r3
 800b734:	3710      	adds	r7, #16
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}

0800b73a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b73a:	b480      	push	{r7}
 800b73c:	b083      	sub	sp, #12
 800b73e:	af00      	add	r7, sp, #0
 800b740:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f103 0208 	add.w	r2, r3, #8
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f04f 32ff 	mov.w	r2, #4294967295
 800b752:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f103 0208 	add.w	r2, r3, #8
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	f103 0208 	add.w	r2, r3, #8
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2200      	movs	r2, #0
 800b76c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b76e:	bf00      	nop
 800b770:	370c      	adds	r7, #12
 800b772:	46bd      	mov	sp, r7
 800b774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b778:	4770      	bx	lr

0800b77a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b77a:	b480      	push	{r7}
 800b77c:	b083      	sub	sp, #12
 800b77e:	af00      	add	r7, sp, #0
 800b780:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2200      	movs	r2, #0
 800b786:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b788:	bf00      	nop
 800b78a:	370c      	adds	r7, #12
 800b78c:	46bd      	mov	sp, r7
 800b78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b792:	4770      	bx	lr

0800b794 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b794:	b480      	push	{r7}
 800b796:	b085      	sub	sp, #20
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
 800b79c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	685b      	ldr	r3, [r3, #4]
 800b7a2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	68fa      	ldr	r2, [r7, #12]
 800b7a8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	689a      	ldr	r2, [r3, #8]
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	689b      	ldr	r3, [r3, #8]
 800b7b6:	683a      	ldr	r2, [r7, #0]
 800b7b8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	683a      	ldr	r2, [r7, #0]
 800b7be:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	687a      	ldr	r2, [r7, #4]
 800b7c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	1c5a      	adds	r2, r3, #1
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	601a      	str	r2, [r3, #0]
}
 800b7d0:	bf00      	nop
 800b7d2:	3714      	adds	r7, #20
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7da:	4770      	bx	lr

0800b7dc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b085      	sub	sp, #20
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
 800b7e4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7f2:	d103      	bne.n	800b7fc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	691b      	ldr	r3, [r3, #16]
 800b7f8:	60fb      	str	r3, [r7, #12]
 800b7fa:	e00c      	b.n	800b816 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	3308      	adds	r3, #8
 800b800:	60fb      	str	r3, [r7, #12]
 800b802:	e002      	b.n	800b80a <vListInsert+0x2e>
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	685b      	ldr	r3, [r3, #4]
 800b808:	60fb      	str	r3, [r7, #12]
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	685b      	ldr	r3, [r3, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	68ba      	ldr	r2, [r7, #8]
 800b812:	429a      	cmp	r2, r3
 800b814:	d2f6      	bcs.n	800b804 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	685a      	ldr	r2, [r3, #4]
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	685b      	ldr	r3, [r3, #4]
 800b822:	683a      	ldr	r2, [r7, #0]
 800b824:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	68fa      	ldr	r2, [r7, #12]
 800b82a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	683a      	ldr	r2, [r7, #0]
 800b830:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	687a      	ldr	r2, [r7, #4]
 800b836:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	1c5a      	adds	r2, r3, #1
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	601a      	str	r2, [r3, #0]
}
 800b842:	bf00      	nop
 800b844:	3714      	adds	r7, #20
 800b846:	46bd      	mov	sp, r7
 800b848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84c:	4770      	bx	lr

0800b84e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b84e:	b480      	push	{r7}
 800b850:	b085      	sub	sp, #20
 800b852:	af00      	add	r7, sp, #0
 800b854:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	691b      	ldr	r3, [r3, #16]
 800b85a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	685b      	ldr	r3, [r3, #4]
 800b860:	687a      	ldr	r2, [r7, #4]
 800b862:	6892      	ldr	r2, [r2, #8]
 800b864:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	689b      	ldr	r3, [r3, #8]
 800b86a:	687a      	ldr	r2, [r7, #4]
 800b86c:	6852      	ldr	r2, [r2, #4]
 800b86e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	685b      	ldr	r3, [r3, #4]
 800b874:	687a      	ldr	r2, [r7, #4]
 800b876:	429a      	cmp	r2, r3
 800b878:	d103      	bne.n	800b882 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	689a      	ldr	r2, [r3, #8]
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2200      	movs	r2, #0
 800b886:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	1e5a      	subs	r2, r3, #1
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
}
 800b896:	4618      	mov	r0, r3
 800b898:	3714      	adds	r7, #20
 800b89a:	46bd      	mov	sp, r7
 800b89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a0:	4770      	bx	lr

0800b8a2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b8a2:	b580      	push	{r7, lr}
 800b8a4:	b08e      	sub	sp, #56	; 0x38
 800b8a6:	af04      	add	r7, sp, #16
 800b8a8:	60f8      	str	r0, [r7, #12]
 800b8aa:	60b9      	str	r1, [r7, #8]
 800b8ac:	607a      	str	r2, [r7, #4]
 800b8ae:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b8b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d10a      	bne.n	800b8cc <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b8b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ba:	f383 8811 	msr	BASEPRI, r3
 800b8be:	f3bf 8f6f 	isb	sy
 800b8c2:	f3bf 8f4f 	dsb	sy
 800b8c6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b8c8:	bf00      	nop
 800b8ca:	e7fe      	b.n	800b8ca <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d10a      	bne.n	800b8e8 <xTaskCreateStatic+0x46>
	__asm volatile
 800b8d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d6:	f383 8811 	msr	BASEPRI, r3
 800b8da:	f3bf 8f6f 	isb	sy
 800b8de:	f3bf 8f4f 	dsb	sy
 800b8e2:	61fb      	str	r3, [r7, #28]
}
 800b8e4:	bf00      	nop
 800b8e6:	e7fe      	b.n	800b8e6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b8e8:	23b4      	movs	r3, #180	; 0xb4
 800b8ea:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	2bb4      	cmp	r3, #180	; 0xb4
 800b8f0:	d00a      	beq.n	800b908 <xTaskCreateStatic+0x66>
	__asm volatile
 800b8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f6:	f383 8811 	msr	BASEPRI, r3
 800b8fa:	f3bf 8f6f 	isb	sy
 800b8fe:	f3bf 8f4f 	dsb	sy
 800b902:	61bb      	str	r3, [r7, #24]
}
 800b904:	bf00      	nop
 800b906:	e7fe      	b.n	800b906 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b908:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d01e      	beq.n	800b94e <xTaskCreateStatic+0xac>
 800b910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b912:	2b00      	cmp	r3, #0
 800b914:	d01b      	beq.n	800b94e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b918:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b91c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b91e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b922:	2202      	movs	r2, #2
 800b924:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b928:	2300      	movs	r3, #0
 800b92a:	9303      	str	r3, [sp, #12]
 800b92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b92e:	9302      	str	r3, [sp, #8]
 800b930:	f107 0314 	add.w	r3, r7, #20
 800b934:	9301      	str	r3, [sp, #4]
 800b936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b938:	9300      	str	r3, [sp, #0]
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	687a      	ldr	r2, [r7, #4]
 800b93e:	68b9      	ldr	r1, [r7, #8]
 800b940:	68f8      	ldr	r0, [r7, #12]
 800b942:	f000 f851 	bl	800b9e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b946:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b948:	f000 f8ec 	bl	800bb24 <prvAddNewTaskToReadyList>
 800b94c:	e001      	b.n	800b952 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b94e:	2300      	movs	r3, #0
 800b950:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b952:	697b      	ldr	r3, [r7, #20]
	}
 800b954:	4618      	mov	r0, r3
 800b956:	3728      	adds	r7, #40	; 0x28
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}

0800b95c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b08c      	sub	sp, #48	; 0x30
 800b960:	af04      	add	r7, sp, #16
 800b962:	60f8      	str	r0, [r7, #12]
 800b964:	60b9      	str	r1, [r7, #8]
 800b966:	603b      	str	r3, [r7, #0]
 800b968:	4613      	mov	r3, r2
 800b96a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b96c:	88fb      	ldrh	r3, [r7, #6]
 800b96e:	009b      	lsls	r3, r3, #2
 800b970:	4618      	mov	r0, r3
 800b972:	f000 fef1 	bl	800c758 <pvPortMalloc>
 800b976:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d00e      	beq.n	800b99c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b97e:	20b4      	movs	r0, #180	; 0xb4
 800b980:	f000 feea 	bl	800c758 <pvPortMalloc>
 800b984:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b986:	69fb      	ldr	r3, [r7, #28]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d003      	beq.n	800b994 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b98c:	69fb      	ldr	r3, [r7, #28]
 800b98e:	697a      	ldr	r2, [r7, #20]
 800b990:	631a      	str	r2, [r3, #48]	; 0x30
 800b992:	e005      	b.n	800b9a0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b994:	6978      	ldr	r0, [r7, #20]
 800b996:	f000 ffab 	bl	800c8f0 <vPortFree>
 800b99a:	e001      	b.n	800b9a0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b99c:	2300      	movs	r3, #0
 800b99e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b9a0:	69fb      	ldr	r3, [r7, #28]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d017      	beq.n	800b9d6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b9a6:	69fb      	ldr	r3, [r7, #28]
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b9ae:	88fa      	ldrh	r2, [r7, #6]
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	9303      	str	r3, [sp, #12]
 800b9b4:	69fb      	ldr	r3, [r7, #28]
 800b9b6:	9302      	str	r3, [sp, #8]
 800b9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ba:	9301      	str	r3, [sp, #4]
 800b9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9be:	9300      	str	r3, [sp, #0]
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	68b9      	ldr	r1, [r7, #8]
 800b9c4:	68f8      	ldr	r0, [r7, #12]
 800b9c6:	f000 f80f 	bl	800b9e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b9ca:	69f8      	ldr	r0, [r7, #28]
 800b9cc:	f000 f8aa 	bl	800bb24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	61bb      	str	r3, [r7, #24]
 800b9d4:	e002      	b.n	800b9dc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b9d6:	f04f 33ff 	mov.w	r3, #4294967295
 800b9da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b9dc:	69bb      	ldr	r3, [r7, #24]
	}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	3720      	adds	r7, #32
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}
	...

0800b9e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b088      	sub	sp, #32
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	60f8      	str	r0, [r7, #12]
 800b9f0:	60b9      	str	r1, [r7, #8]
 800b9f2:	607a      	str	r2, [r7, #4]
 800b9f4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ba00:	3b01      	subs	r3, #1
 800ba02:	009b      	lsls	r3, r3, #2
 800ba04:	4413      	add	r3, r2
 800ba06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ba08:	69bb      	ldr	r3, [r7, #24]
 800ba0a:	f023 0307 	bic.w	r3, r3, #7
 800ba0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ba10:	69bb      	ldr	r3, [r7, #24]
 800ba12:	f003 0307 	and.w	r3, r3, #7
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d00a      	beq.n	800ba30 <prvInitialiseNewTask+0x48>
	__asm volatile
 800ba1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba1e:	f383 8811 	msr	BASEPRI, r3
 800ba22:	f3bf 8f6f 	isb	sy
 800ba26:	f3bf 8f4f 	dsb	sy
 800ba2a:	617b      	str	r3, [r7, #20]
}
 800ba2c:	bf00      	nop
 800ba2e:	e7fe      	b.n	800ba2e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d01f      	beq.n	800ba76 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ba36:	2300      	movs	r3, #0
 800ba38:	61fb      	str	r3, [r7, #28]
 800ba3a:	e012      	b.n	800ba62 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ba3c:	68ba      	ldr	r2, [r7, #8]
 800ba3e:	69fb      	ldr	r3, [r7, #28]
 800ba40:	4413      	add	r3, r2
 800ba42:	7819      	ldrb	r1, [r3, #0]
 800ba44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba46:	69fb      	ldr	r3, [r7, #28]
 800ba48:	4413      	add	r3, r2
 800ba4a:	3334      	adds	r3, #52	; 0x34
 800ba4c:	460a      	mov	r2, r1
 800ba4e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ba50:	68ba      	ldr	r2, [r7, #8]
 800ba52:	69fb      	ldr	r3, [r7, #28]
 800ba54:	4413      	add	r3, r2
 800ba56:	781b      	ldrb	r3, [r3, #0]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d006      	beq.n	800ba6a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ba5c:	69fb      	ldr	r3, [r7, #28]
 800ba5e:	3301      	adds	r3, #1
 800ba60:	61fb      	str	r3, [r7, #28]
 800ba62:	69fb      	ldr	r3, [r7, #28]
 800ba64:	2b0f      	cmp	r3, #15
 800ba66:	d9e9      	bls.n	800ba3c <prvInitialiseNewTask+0x54>
 800ba68:	e000      	b.n	800ba6c <prvInitialiseNewTask+0x84>
			{
				break;
 800ba6a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ba6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba6e:	2200      	movs	r2, #0
 800ba70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ba74:	e003      	b.n	800ba7e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ba76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba78:	2200      	movs	r2, #0
 800ba7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ba7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba80:	2b06      	cmp	r3, #6
 800ba82:	d901      	bls.n	800ba88 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ba84:	2306      	movs	r3, #6
 800ba86:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ba88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba8c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ba8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba92:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ba94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba96:	2200      	movs	r2, #0
 800ba98:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ba9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba9c:	3304      	adds	r3, #4
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f7ff fe6b 	bl	800b77a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800baa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa6:	3318      	adds	r3, #24
 800baa8:	4618      	mov	r0, r3
 800baaa:	f7ff fe66 	bl	800b77a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800baae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bab2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bab6:	f1c3 0207 	rsb	r2, r3, #7
 800baba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800babc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800babe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bac2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac6:	2200      	movs	r2, #0
 800bac8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bace:	2200      	movs	r2, #0
 800bad0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bad6:	334c      	adds	r3, #76	; 0x4c
 800bad8:	2260      	movs	r2, #96	; 0x60
 800bada:	2100      	movs	r1, #0
 800badc:	4618      	mov	r0, r3
 800bade:	f001 fe1d 	bl	800d71c <memset>
 800bae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae4:	4a0c      	ldr	r2, [pc, #48]	; (800bb18 <prvInitialiseNewTask+0x130>)
 800bae6:	651a      	str	r2, [r3, #80]	; 0x50
 800bae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baea:	4a0c      	ldr	r2, [pc, #48]	; (800bb1c <prvInitialiseNewTask+0x134>)
 800baec:	655a      	str	r2, [r3, #84]	; 0x54
 800baee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf0:	4a0b      	ldr	r2, [pc, #44]	; (800bb20 <prvInitialiseNewTask+0x138>)
 800baf2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800baf4:	683a      	ldr	r2, [r7, #0]
 800baf6:	68f9      	ldr	r1, [r7, #12]
 800baf8:	69b8      	ldr	r0, [r7, #24]
 800bafa:	f000 fc1f 	bl	800c33c <pxPortInitialiseStack>
 800bafe:	4602      	mov	r2, r0
 800bb00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb02:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bb04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d002      	beq.n	800bb10 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bb0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb0e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb10:	bf00      	nop
 800bb12:	3720      	adds	r7, #32
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}
 800bb18:	0800e610 	.word	0x0800e610
 800bb1c:	0800e630 	.word	0x0800e630
 800bb20:	0800e5f0 	.word	0x0800e5f0

0800bb24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b082      	sub	sp, #8
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bb2c:	f000 fd32 	bl	800c594 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bb30:	4b2a      	ldr	r3, [pc, #168]	; (800bbdc <prvAddNewTaskToReadyList+0xb8>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	3301      	adds	r3, #1
 800bb36:	4a29      	ldr	r2, [pc, #164]	; (800bbdc <prvAddNewTaskToReadyList+0xb8>)
 800bb38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bb3a:	4b29      	ldr	r3, [pc, #164]	; (800bbe0 <prvAddNewTaskToReadyList+0xbc>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d109      	bne.n	800bb56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bb42:	4a27      	ldr	r2, [pc, #156]	; (800bbe0 <prvAddNewTaskToReadyList+0xbc>)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bb48:	4b24      	ldr	r3, [pc, #144]	; (800bbdc <prvAddNewTaskToReadyList+0xb8>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	2b01      	cmp	r3, #1
 800bb4e:	d110      	bne.n	800bb72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bb50:	f000 facc 	bl	800c0ec <prvInitialiseTaskLists>
 800bb54:	e00d      	b.n	800bb72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bb56:	4b23      	ldr	r3, [pc, #140]	; (800bbe4 <prvAddNewTaskToReadyList+0xc0>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d109      	bne.n	800bb72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bb5e:	4b20      	ldr	r3, [pc, #128]	; (800bbe0 <prvAddNewTaskToReadyList+0xbc>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb68:	429a      	cmp	r2, r3
 800bb6a:	d802      	bhi.n	800bb72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bb6c:	4a1c      	ldr	r2, [pc, #112]	; (800bbe0 <prvAddNewTaskToReadyList+0xbc>)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bb72:	4b1d      	ldr	r3, [pc, #116]	; (800bbe8 <prvAddNewTaskToReadyList+0xc4>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	3301      	adds	r3, #1
 800bb78:	4a1b      	ldr	r2, [pc, #108]	; (800bbe8 <prvAddNewTaskToReadyList+0xc4>)
 800bb7a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb80:	2201      	movs	r2, #1
 800bb82:	409a      	lsls	r2, r3
 800bb84:	4b19      	ldr	r3, [pc, #100]	; (800bbec <prvAddNewTaskToReadyList+0xc8>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	4313      	orrs	r3, r2
 800bb8a:	4a18      	ldr	r2, [pc, #96]	; (800bbec <prvAddNewTaskToReadyList+0xc8>)
 800bb8c:	6013      	str	r3, [r2, #0]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb92:	4613      	mov	r3, r2
 800bb94:	009b      	lsls	r3, r3, #2
 800bb96:	4413      	add	r3, r2
 800bb98:	009b      	lsls	r3, r3, #2
 800bb9a:	4a15      	ldr	r2, [pc, #84]	; (800bbf0 <prvAddNewTaskToReadyList+0xcc>)
 800bb9c:	441a      	add	r2, r3
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	3304      	adds	r3, #4
 800bba2:	4619      	mov	r1, r3
 800bba4:	4610      	mov	r0, r2
 800bba6:	f7ff fdf5 	bl	800b794 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bbaa:	f000 fd23 	bl	800c5f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bbae:	4b0d      	ldr	r3, [pc, #52]	; (800bbe4 <prvAddNewTaskToReadyList+0xc0>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d00e      	beq.n	800bbd4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bbb6:	4b0a      	ldr	r3, [pc, #40]	; (800bbe0 <prvAddNewTaskToReadyList+0xbc>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	d207      	bcs.n	800bbd4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bbc4:	4b0b      	ldr	r3, [pc, #44]	; (800bbf4 <prvAddNewTaskToReadyList+0xd0>)
 800bbc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbca:	601a      	str	r2, [r3, #0]
 800bbcc:	f3bf 8f4f 	dsb	sy
 800bbd0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bbd4:	bf00      	nop
 800bbd6:	3708      	adds	r7, #8
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}
 800bbdc:	20003060 	.word	0x20003060
 800bbe0:	20002f60 	.word	0x20002f60
 800bbe4:	2000306c 	.word	0x2000306c
 800bbe8:	2000307c 	.word	0x2000307c
 800bbec:	20003068 	.word	0x20003068
 800bbf0:	20002f64 	.word	0x20002f64
 800bbf4:	e000ed04 	.word	0xe000ed04

0800bbf8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b084      	sub	sp, #16
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bc00:	2300      	movs	r3, #0
 800bc02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d017      	beq.n	800bc3a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bc0a:	4b13      	ldr	r3, [pc, #76]	; (800bc58 <vTaskDelay+0x60>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d00a      	beq.n	800bc28 <vTaskDelay+0x30>
	__asm volatile
 800bc12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc16:	f383 8811 	msr	BASEPRI, r3
 800bc1a:	f3bf 8f6f 	isb	sy
 800bc1e:	f3bf 8f4f 	dsb	sy
 800bc22:	60bb      	str	r3, [r7, #8]
}
 800bc24:	bf00      	nop
 800bc26:	e7fe      	b.n	800bc26 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bc28:	f000 f884 	bl	800bd34 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bc2c:	2100      	movs	r1, #0
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f000 fb1e 	bl	800c270 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bc34:	f000 f88c 	bl	800bd50 <xTaskResumeAll>
 800bc38:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d107      	bne.n	800bc50 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800bc40:	4b06      	ldr	r3, [pc, #24]	; (800bc5c <vTaskDelay+0x64>)
 800bc42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc46:	601a      	str	r2, [r3, #0]
 800bc48:	f3bf 8f4f 	dsb	sy
 800bc4c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bc50:	bf00      	nop
 800bc52:	3710      	adds	r7, #16
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}
 800bc58:	20003088 	.word	0x20003088
 800bc5c:	e000ed04 	.word	0xe000ed04

0800bc60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b08a      	sub	sp, #40	; 0x28
 800bc64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bc66:	2300      	movs	r3, #0
 800bc68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bc6e:	463a      	mov	r2, r7
 800bc70:	1d39      	adds	r1, r7, #4
 800bc72:	f107 0308 	add.w	r3, r7, #8
 800bc76:	4618      	mov	r0, r3
 800bc78:	f7f5 fb82 	bl	8001380 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bc7c:	6839      	ldr	r1, [r7, #0]
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	68ba      	ldr	r2, [r7, #8]
 800bc82:	9202      	str	r2, [sp, #8]
 800bc84:	9301      	str	r3, [sp, #4]
 800bc86:	2300      	movs	r3, #0
 800bc88:	9300      	str	r3, [sp, #0]
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	460a      	mov	r2, r1
 800bc8e:	4921      	ldr	r1, [pc, #132]	; (800bd14 <vTaskStartScheduler+0xb4>)
 800bc90:	4821      	ldr	r0, [pc, #132]	; (800bd18 <vTaskStartScheduler+0xb8>)
 800bc92:	f7ff fe06 	bl	800b8a2 <xTaskCreateStatic>
 800bc96:	4603      	mov	r3, r0
 800bc98:	4a20      	ldr	r2, [pc, #128]	; (800bd1c <vTaskStartScheduler+0xbc>)
 800bc9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bc9c:	4b1f      	ldr	r3, [pc, #124]	; (800bd1c <vTaskStartScheduler+0xbc>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d002      	beq.n	800bcaa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bca4:	2301      	movs	r3, #1
 800bca6:	617b      	str	r3, [r7, #20]
 800bca8:	e001      	b.n	800bcae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bcae:	697b      	ldr	r3, [r7, #20]
 800bcb0:	2b01      	cmp	r3, #1
 800bcb2:	d11b      	bne.n	800bcec <vTaskStartScheduler+0x8c>
	__asm volatile
 800bcb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb8:	f383 8811 	msr	BASEPRI, r3
 800bcbc:	f3bf 8f6f 	isb	sy
 800bcc0:	f3bf 8f4f 	dsb	sy
 800bcc4:	613b      	str	r3, [r7, #16]
}
 800bcc6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bcc8:	4b15      	ldr	r3, [pc, #84]	; (800bd20 <vTaskStartScheduler+0xc0>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	334c      	adds	r3, #76	; 0x4c
 800bcce:	4a15      	ldr	r2, [pc, #84]	; (800bd24 <vTaskStartScheduler+0xc4>)
 800bcd0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bcd2:	4b15      	ldr	r3, [pc, #84]	; (800bd28 <vTaskStartScheduler+0xc8>)
 800bcd4:	f04f 32ff 	mov.w	r2, #4294967295
 800bcd8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bcda:	4b14      	ldr	r3, [pc, #80]	; (800bd2c <vTaskStartScheduler+0xcc>)
 800bcdc:	2201      	movs	r2, #1
 800bcde:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bce0:	4b13      	ldr	r3, [pc, #76]	; (800bd30 <vTaskStartScheduler+0xd0>)
 800bce2:	2200      	movs	r2, #0
 800bce4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bce6:	f000 fbb3 	bl	800c450 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bcea:	e00e      	b.n	800bd0a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bcec:	697b      	ldr	r3, [r7, #20]
 800bcee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcf2:	d10a      	bne.n	800bd0a <vTaskStartScheduler+0xaa>
	__asm volatile
 800bcf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf8:	f383 8811 	msr	BASEPRI, r3
 800bcfc:	f3bf 8f6f 	isb	sy
 800bd00:	f3bf 8f4f 	dsb	sy
 800bd04:	60fb      	str	r3, [r7, #12]
}
 800bd06:	bf00      	nop
 800bd08:	e7fe      	b.n	800bd08 <vTaskStartScheduler+0xa8>
}
 800bd0a:	bf00      	nop
 800bd0c:	3718      	adds	r7, #24
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
 800bd12:	bf00      	nop
 800bd14:	0800dfec 	.word	0x0800dfec
 800bd18:	0800c0bd 	.word	0x0800c0bd
 800bd1c:	20003084 	.word	0x20003084
 800bd20:	20002f60 	.word	0x20002f60
 800bd24:	20000038 	.word	0x20000038
 800bd28:	20003080 	.word	0x20003080
 800bd2c:	2000306c 	.word	0x2000306c
 800bd30:	20003064 	.word	0x20003064

0800bd34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bd34:	b480      	push	{r7}
 800bd36:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bd38:	4b04      	ldr	r3, [pc, #16]	; (800bd4c <vTaskSuspendAll+0x18>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	3301      	adds	r3, #1
 800bd3e:	4a03      	ldr	r2, [pc, #12]	; (800bd4c <vTaskSuspendAll+0x18>)
 800bd40:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bd42:	bf00      	nop
 800bd44:	46bd      	mov	sp, r7
 800bd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4a:	4770      	bx	lr
 800bd4c:	20003088 	.word	0x20003088

0800bd50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b084      	sub	sp, #16
 800bd54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bd56:	2300      	movs	r3, #0
 800bd58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bd5e:	4b41      	ldr	r3, [pc, #260]	; (800be64 <xTaskResumeAll+0x114>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d10a      	bne.n	800bd7c <xTaskResumeAll+0x2c>
	__asm volatile
 800bd66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd6a:	f383 8811 	msr	BASEPRI, r3
 800bd6e:	f3bf 8f6f 	isb	sy
 800bd72:	f3bf 8f4f 	dsb	sy
 800bd76:	603b      	str	r3, [r7, #0]
}
 800bd78:	bf00      	nop
 800bd7a:	e7fe      	b.n	800bd7a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bd7c:	f000 fc0a 	bl	800c594 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bd80:	4b38      	ldr	r3, [pc, #224]	; (800be64 <xTaskResumeAll+0x114>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	3b01      	subs	r3, #1
 800bd86:	4a37      	ldr	r2, [pc, #220]	; (800be64 <xTaskResumeAll+0x114>)
 800bd88:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd8a:	4b36      	ldr	r3, [pc, #216]	; (800be64 <xTaskResumeAll+0x114>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d161      	bne.n	800be56 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bd92:	4b35      	ldr	r3, [pc, #212]	; (800be68 <xTaskResumeAll+0x118>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d05d      	beq.n	800be56 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bd9a:	e02e      	b.n	800bdfa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd9c:	4b33      	ldr	r3, [pc, #204]	; (800be6c <xTaskResumeAll+0x11c>)
 800bd9e:	68db      	ldr	r3, [r3, #12]
 800bda0:	68db      	ldr	r3, [r3, #12]
 800bda2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	3318      	adds	r3, #24
 800bda8:	4618      	mov	r0, r3
 800bdaa:	f7ff fd50 	bl	800b84e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	3304      	adds	r3, #4
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f7ff fd4b 	bl	800b84e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdbc:	2201      	movs	r2, #1
 800bdbe:	409a      	lsls	r2, r3
 800bdc0:	4b2b      	ldr	r3, [pc, #172]	; (800be70 <xTaskResumeAll+0x120>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	4313      	orrs	r3, r2
 800bdc6:	4a2a      	ldr	r2, [pc, #168]	; (800be70 <xTaskResumeAll+0x120>)
 800bdc8:	6013      	str	r3, [r2, #0]
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdce:	4613      	mov	r3, r2
 800bdd0:	009b      	lsls	r3, r3, #2
 800bdd2:	4413      	add	r3, r2
 800bdd4:	009b      	lsls	r3, r3, #2
 800bdd6:	4a27      	ldr	r2, [pc, #156]	; (800be74 <xTaskResumeAll+0x124>)
 800bdd8:	441a      	add	r2, r3
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	3304      	adds	r3, #4
 800bdde:	4619      	mov	r1, r3
 800bde0:	4610      	mov	r0, r2
 800bde2:	f7ff fcd7 	bl	800b794 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdea:	4b23      	ldr	r3, [pc, #140]	; (800be78 <xTaskResumeAll+0x128>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d302      	bcc.n	800bdfa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800bdf4:	4b21      	ldr	r3, [pc, #132]	; (800be7c <xTaskResumeAll+0x12c>)
 800bdf6:	2201      	movs	r2, #1
 800bdf8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bdfa:	4b1c      	ldr	r3, [pc, #112]	; (800be6c <xTaskResumeAll+0x11c>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d1cc      	bne.n	800bd9c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d001      	beq.n	800be0c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800be08:	f000 fa12 	bl	800c230 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800be0c:	4b1c      	ldr	r3, [pc, #112]	; (800be80 <xTaskResumeAll+0x130>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d010      	beq.n	800be3a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800be18:	f000 f836 	bl	800be88 <xTaskIncrementTick>
 800be1c:	4603      	mov	r3, r0
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d002      	beq.n	800be28 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800be22:	4b16      	ldr	r3, [pc, #88]	; (800be7c <xTaskResumeAll+0x12c>)
 800be24:	2201      	movs	r2, #1
 800be26:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	3b01      	subs	r3, #1
 800be2c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d1f1      	bne.n	800be18 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800be34:	4b12      	ldr	r3, [pc, #72]	; (800be80 <xTaskResumeAll+0x130>)
 800be36:	2200      	movs	r2, #0
 800be38:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800be3a:	4b10      	ldr	r3, [pc, #64]	; (800be7c <xTaskResumeAll+0x12c>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d009      	beq.n	800be56 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800be42:	2301      	movs	r3, #1
 800be44:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800be46:	4b0f      	ldr	r3, [pc, #60]	; (800be84 <xTaskResumeAll+0x134>)
 800be48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be4c:	601a      	str	r2, [r3, #0]
 800be4e:	f3bf 8f4f 	dsb	sy
 800be52:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800be56:	f000 fbcd 	bl	800c5f4 <vPortExitCritical>

	return xAlreadyYielded;
 800be5a:	68bb      	ldr	r3, [r7, #8]
}
 800be5c:	4618      	mov	r0, r3
 800be5e:	3710      	adds	r7, #16
 800be60:	46bd      	mov	sp, r7
 800be62:	bd80      	pop	{r7, pc}
 800be64:	20003088 	.word	0x20003088
 800be68:	20003060 	.word	0x20003060
 800be6c:	20003020 	.word	0x20003020
 800be70:	20003068 	.word	0x20003068
 800be74:	20002f64 	.word	0x20002f64
 800be78:	20002f60 	.word	0x20002f60
 800be7c:	20003074 	.word	0x20003074
 800be80:	20003070 	.word	0x20003070
 800be84:	e000ed04 	.word	0xe000ed04

0800be88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b086      	sub	sp, #24
 800be8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800be8e:	2300      	movs	r3, #0
 800be90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be92:	4b4e      	ldr	r3, [pc, #312]	; (800bfcc <xTaskIncrementTick+0x144>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	2b00      	cmp	r3, #0
 800be98:	f040 808e 	bne.w	800bfb8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800be9c:	4b4c      	ldr	r3, [pc, #304]	; (800bfd0 <xTaskIncrementTick+0x148>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	3301      	adds	r3, #1
 800bea2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bea4:	4a4a      	ldr	r2, [pc, #296]	; (800bfd0 <xTaskIncrementTick+0x148>)
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800beaa:	693b      	ldr	r3, [r7, #16]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d120      	bne.n	800bef2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800beb0:	4b48      	ldr	r3, [pc, #288]	; (800bfd4 <xTaskIncrementTick+0x14c>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d00a      	beq.n	800bed0 <xTaskIncrementTick+0x48>
	__asm volatile
 800beba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bebe:	f383 8811 	msr	BASEPRI, r3
 800bec2:	f3bf 8f6f 	isb	sy
 800bec6:	f3bf 8f4f 	dsb	sy
 800beca:	603b      	str	r3, [r7, #0]
}
 800becc:	bf00      	nop
 800bece:	e7fe      	b.n	800bece <xTaskIncrementTick+0x46>
 800bed0:	4b40      	ldr	r3, [pc, #256]	; (800bfd4 <xTaskIncrementTick+0x14c>)
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	60fb      	str	r3, [r7, #12]
 800bed6:	4b40      	ldr	r3, [pc, #256]	; (800bfd8 <xTaskIncrementTick+0x150>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	4a3e      	ldr	r2, [pc, #248]	; (800bfd4 <xTaskIncrementTick+0x14c>)
 800bedc:	6013      	str	r3, [r2, #0]
 800bede:	4a3e      	ldr	r2, [pc, #248]	; (800bfd8 <xTaskIncrementTick+0x150>)
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	6013      	str	r3, [r2, #0]
 800bee4:	4b3d      	ldr	r3, [pc, #244]	; (800bfdc <xTaskIncrementTick+0x154>)
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	3301      	adds	r3, #1
 800beea:	4a3c      	ldr	r2, [pc, #240]	; (800bfdc <xTaskIncrementTick+0x154>)
 800beec:	6013      	str	r3, [r2, #0]
 800beee:	f000 f99f 	bl	800c230 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bef2:	4b3b      	ldr	r3, [pc, #236]	; (800bfe0 <xTaskIncrementTick+0x158>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	693a      	ldr	r2, [r7, #16]
 800bef8:	429a      	cmp	r2, r3
 800befa:	d348      	bcc.n	800bf8e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800befc:	4b35      	ldr	r3, [pc, #212]	; (800bfd4 <xTaskIncrementTick+0x14c>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d104      	bne.n	800bf10 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf06:	4b36      	ldr	r3, [pc, #216]	; (800bfe0 <xTaskIncrementTick+0x158>)
 800bf08:	f04f 32ff 	mov.w	r2, #4294967295
 800bf0c:	601a      	str	r2, [r3, #0]
					break;
 800bf0e:	e03e      	b.n	800bf8e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf10:	4b30      	ldr	r3, [pc, #192]	; (800bfd4 <xTaskIncrementTick+0x14c>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	68db      	ldr	r3, [r3, #12]
 800bf16:	68db      	ldr	r3, [r3, #12]
 800bf18:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	685b      	ldr	r3, [r3, #4]
 800bf1e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bf20:	693a      	ldr	r2, [r7, #16]
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	429a      	cmp	r2, r3
 800bf26:	d203      	bcs.n	800bf30 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bf28:	4a2d      	ldr	r2, [pc, #180]	; (800bfe0 <xTaskIncrementTick+0x158>)
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bf2e:	e02e      	b.n	800bf8e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	3304      	adds	r3, #4
 800bf34:	4618      	mov	r0, r3
 800bf36:	f7ff fc8a 	bl	800b84e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d004      	beq.n	800bf4c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	3318      	adds	r3, #24
 800bf46:	4618      	mov	r0, r3
 800bf48:	f7ff fc81 	bl	800b84e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf50:	2201      	movs	r2, #1
 800bf52:	409a      	lsls	r2, r3
 800bf54:	4b23      	ldr	r3, [pc, #140]	; (800bfe4 <xTaskIncrementTick+0x15c>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	4313      	orrs	r3, r2
 800bf5a:	4a22      	ldr	r2, [pc, #136]	; (800bfe4 <xTaskIncrementTick+0x15c>)
 800bf5c:	6013      	str	r3, [r2, #0]
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf62:	4613      	mov	r3, r2
 800bf64:	009b      	lsls	r3, r3, #2
 800bf66:	4413      	add	r3, r2
 800bf68:	009b      	lsls	r3, r3, #2
 800bf6a:	4a1f      	ldr	r2, [pc, #124]	; (800bfe8 <xTaskIncrementTick+0x160>)
 800bf6c:	441a      	add	r2, r3
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	3304      	adds	r3, #4
 800bf72:	4619      	mov	r1, r3
 800bf74:	4610      	mov	r0, r2
 800bf76:	f7ff fc0d 	bl	800b794 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf7e:	4b1b      	ldr	r3, [pc, #108]	; (800bfec <xTaskIncrementTick+0x164>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf84:	429a      	cmp	r2, r3
 800bf86:	d3b9      	bcc.n	800befc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bf88:	2301      	movs	r3, #1
 800bf8a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf8c:	e7b6      	b.n	800befc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bf8e:	4b17      	ldr	r3, [pc, #92]	; (800bfec <xTaskIncrementTick+0x164>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf94:	4914      	ldr	r1, [pc, #80]	; (800bfe8 <xTaskIncrementTick+0x160>)
 800bf96:	4613      	mov	r3, r2
 800bf98:	009b      	lsls	r3, r3, #2
 800bf9a:	4413      	add	r3, r2
 800bf9c:	009b      	lsls	r3, r3, #2
 800bf9e:	440b      	add	r3, r1
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	2b01      	cmp	r3, #1
 800bfa4:	d901      	bls.n	800bfaa <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bfaa:	4b11      	ldr	r3, [pc, #68]	; (800bff0 <xTaskIncrementTick+0x168>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d007      	beq.n	800bfc2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	617b      	str	r3, [r7, #20]
 800bfb6:	e004      	b.n	800bfc2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bfb8:	4b0e      	ldr	r3, [pc, #56]	; (800bff4 <xTaskIncrementTick+0x16c>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	3301      	adds	r3, #1
 800bfbe:	4a0d      	ldr	r2, [pc, #52]	; (800bff4 <xTaskIncrementTick+0x16c>)
 800bfc0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bfc2:	697b      	ldr	r3, [r7, #20]
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	3718      	adds	r7, #24
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}
 800bfcc:	20003088 	.word	0x20003088
 800bfd0:	20003064 	.word	0x20003064
 800bfd4:	20003018 	.word	0x20003018
 800bfd8:	2000301c 	.word	0x2000301c
 800bfdc:	20003078 	.word	0x20003078
 800bfe0:	20003080 	.word	0x20003080
 800bfe4:	20003068 	.word	0x20003068
 800bfe8:	20002f64 	.word	0x20002f64
 800bfec:	20002f60 	.word	0x20002f60
 800bff0:	20003074 	.word	0x20003074
 800bff4:	20003070 	.word	0x20003070

0800bff8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bff8:	b480      	push	{r7}
 800bffa:	b087      	sub	sp, #28
 800bffc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bffe:	4b29      	ldr	r3, [pc, #164]	; (800c0a4 <vTaskSwitchContext+0xac>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d003      	beq.n	800c00e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c006:	4b28      	ldr	r3, [pc, #160]	; (800c0a8 <vTaskSwitchContext+0xb0>)
 800c008:	2201      	movs	r2, #1
 800c00a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c00c:	e044      	b.n	800c098 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800c00e:	4b26      	ldr	r3, [pc, #152]	; (800c0a8 <vTaskSwitchContext+0xb0>)
 800c010:	2200      	movs	r2, #0
 800c012:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c014:	4b25      	ldr	r3, [pc, #148]	; (800c0ac <vTaskSwitchContext+0xb4>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	fab3 f383 	clz	r3, r3
 800c020:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c022:	7afb      	ldrb	r3, [r7, #11]
 800c024:	f1c3 031f 	rsb	r3, r3, #31
 800c028:	617b      	str	r3, [r7, #20]
 800c02a:	4921      	ldr	r1, [pc, #132]	; (800c0b0 <vTaskSwitchContext+0xb8>)
 800c02c:	697a      	ldr	r2, [r7, #20]
 800c02e:	4613      	mov	r3, r2
 800c030:	009b      	lsls	r3, r3, #2
 800c032:	4413      	add	r3, r2
 800c034:	009b      	lsls	r3, r3, #2
 800c036:	440b      	add	r3, r1
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d10a      	bne.n	800c054 <vTaskSwitchContext+0x5c>
	__asm volatile
 800c03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c042:	f383 8811 	msr	BASEPRI, r3
 800c046:	f3bf 8f6f 	isb	sy
 800c04a:	f3bf 8f4f 	dsb	sy
 800c04e:	607b      	str	r3, [r7, #4]
}
 800c050:	bf00      	nop
 800c052:	e7fe      	b.n	800c052 <vTaskSwitchContext+0x5a>
 800c054:	697a      	ldr	r2, [r7, #20]
 800c056:	4613      	mov	r3, r2
 800c058:	009b      	lsls	r3, r3, #2
 800c05a:	4413      	add	r3, r2
 800c05c:	009b      	lsls	r3, r3, #2
 800c05e:	4a14      	ldr	r2, [pc, #80]	; (800c0b0 <vTaskSwitchContext+0xb8>)
 800c060:	4413      	add	r3, r2
 800c062:	613b      	str	r3, [r7, #16]
 800c064:	693b      	ldr	r3, [r7, #16]
 800c066:	685b      	ldr	r3, [r3, #4]
 800c068:	685a      	ldr	r2, [r3, #4]
 800c06a:	693b      	ldr	r3, [r7, #16]
 800c06c:	605a      	str	r2, [r3, #4]
 800c06e:	693b      	ldr	r3, [r7, #16]
 800c070:	685a      	ldr	r2, [r3, #4]
 800c072:	693b      	ldr	r3, [r7, #16]
 800c074:	3308      	adds	r3, #8
 800c076:	429a      	cmp	r2, r3
 800c078:	d104      	bne.n	800c084 <vTaskSwitchContext+0x8c>
 800c07a:	693b      	ldr	r3, [r7, #16]
 800c07c:	685b      	ldr	r3, [r3, #4]
 800c07e:	685a      	ldr	r2, [r3, #4]
 800c080:	693b      	ldr	r3, [r7, #16]
 800c082:	605a      	str	r2, [r3, #4]
 800c084:	693b      	ldr	r3, [r7, #16]
 800c086:	685b      	ldr	r3, [r3, #4]
 800c088:	68db      	ldr	r3, [r3, #12]
 800c08a:	4a0a      	ldr	r2, [pc, #40]	; (800c0b4 <vTaskSwitchContext+0xbc>)
 800c08c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c08e:	4b09      	ldr	r3, [pc, #36]	; (800c0b4 <vTaskSwitchContext+0xbc>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	334c      	adds	r3, #76	; 0x4c
 800c094:	4a08      	ldr	r2, [pc, #32]	; (800c0b8 <vTaskSwitchContext+0xc0>)
 800c096:	6013      	str	r3, [r2, #0]
}
 800c098:	bf00      	nop
 800c09a:	371c      	adds	r7, #28
 800c09c:	46bd      	mov	sp, r7
 800c09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a2:	4770      	bx	lr
 800c0a4:	20003088 	.word	0x20003088
 800c0a8:	20003074 	.word	0x20003074
 800c0ac:	20003068 	.word	0x20003068
 800c0b0:	20002f64 	.word	0x20002f64
 800c0b4:	20002f60 	.word	0x20002f60
 800c0b8:	20000038 	.word	0x20000038

0800c0bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b082      	sub	sp, #8
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c0c4:	f000 f852 	bl	800c16c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c0c8:	4b06      	ldr	r3, [pc, #24]	; (800c0e4 <prvIdleTask+0x28>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	2b01      	cmp	r3, #1
 800c0ce:	d9f9      	bls.n	800c0c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c0d0:	4b05      	ldr	r3, [pc, #20]	; (800c0e8 <prvIdleTask+0x2c>)
 800c0d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0d6:	601a      	str	r2, [r3, #0]
 800c0d8:	f3bf 8f4f 	dsb	sy
 800c0dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c0e0:	e7f0      	b.n	800c0c4 <prvIdleTask+0x8>
 800c0e2:	bf00      	nop
 800c0e4:	20002f64 	.word	0x20002f64
 800c0e8:	e000ed04 	.word	0xe000ed04

0800c0ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b082      	sub	sp, #8
 800c0f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	607b      	str	r3, [r7, #4]
 800c0f6:	e00c      	b.n	800c112 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c0f8:	687a      	ldr	r2, [r7, #4]
 800c0fa:	4613      	mov	r3, r2
 800c0fc:	009b      	lsls	r3, r3, #2
 800c0fe:	4413      	add	r3, r2
 800c100:	009b      	lsls	r3, r3, #2
 800c102:	4a12      	ldr	r2, [pc, #72]	; (800c14c <prvInitialiseTaskLists+0x60>)
 800c104:	4413      	add	r3, r2
 800c106:	4618      	mov	r0, r3
 800c108:	f7ff fb17 	bl	800b73a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	3301      	adds	r3, #1
 800c110:	607b      	str	r3, [r7, #4]
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2b06      	cmp	r3, #6
 800c116:	d9ef      	bls.n	800c0f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c118:	480d      	ldr	r0, [pc, #52]	; (800c150 <prvInitialiseTaskLists+0x64>)
 800c11a:	f7ff fb0e 	bl	800b73a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c11e:	480d      	ldr	r0, [pc, #52]	; (800c154 <prvInitialiseTaskLists+0x68>)
 800c120:	f7ff fb0b 	bl	800b73a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c124:	480c      	ldr	r0, [pc, #48]	; (800c158 <prvInitialiseTaskLists+0x6c>)
 800c126:	f7ff fb08 	bl	800b73a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c12a:	480c      	ldr	r0, [pc, #48]	; (800c15c <prvInitialiseTaskLists+0x70>)
 800c12c:	f7ff fb05 	bl	800b73a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c130:	480b      	ldr	r0, [pc, #44]	; (800c160 <prvInitialiseTaskLists+0x74>)
 800c132:	f7ff fb02 	bl	800b73a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c136:	4b0b      	ldr	r3, [pc, #44]	; (800c164 <prvInitialiseTaskLists+0x78>)
 800c138:	4a05      	ldr	r2, [pc, #20]	; (800c150 <prvInitialiseTaskLists+0x64>)
 800c13a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c13c:	4b0a      	ldr	r3, [pc, #40]	; (800c168 <prvInitialiseTaskLists+0x7c>)
 800c13e:	4a05      	ldr	r2, [pc, #20]	; (800c154 <prvInitialiseTaskLists+0x68>)
 800c140:	601a      	str	r2, [r3, #0]
}
 800c142:	bf00      	nop
 800c144:	3708      	adds	r7, #8
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}
 800c14a:	bf00      	nop
 800c14c:	20002f64 	.word	0x20002f64
 800c150:	20002ff0 	.word	0x20002ff0
 800c154:	20003004 	.word	0x20003004
 800c158:	20003020 	.word	0x20003020
 800c15c:	20003034 	.word	0x20003034
 800c160:	2000304c 	.word	0x2000304c
 800c164:	20003018 	.word	0x20003018
 800c168:	2000301c 	.word	0x2000301c

0800c16c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b082      	sub	sp, #8
 800c170:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c172:	e019      	b.n	800c1a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c174:	f000 fa0e 	bl	800c594 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c178:	4b10      	ldr	r3, [pc, #64]	; (800c1bc <prvCheckTasksWaitingTermination+0x50>)
 800c17a:	68db      	ldr	r3, [r3, #12]
 800c17c:	68db      	ldr	r3, [r3, #12]
 800c17e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	3304      	adds	r3, #4
 800c184:	4618      	mov	r0, r3
 800c186:	f7ff fb62 	bl	800b84e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c18a:	4b0d      	ldr	r3, [pc, #52]	; (800c1c0 <prvCheckTasksWaitingTermination+0x54>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	3b01      	subs	r3, #1
 800c190:	4a0b      	ldr	r2, [pc, #44]	; (800c1c0 <prvCheckTasksWaitingTermination+0x54>)
 800c192:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c194:	4b0b      	ldr	r3, [pc, #44]	; (800c1c4 <prvCheckTasksWaitingTermination+0x58>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	3b01      	subs	r3, #1
 800c19a:	4a0a      	ldr	r2, [pc, #40]	; (800c1c4 <prvCheckTasksWaitingTermination+0x58>)
 800c19c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c19e:	f000 fa29 	bl	800c5f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f000 f810 	bl	800c1c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c1a8:	4b06      	ldr	r3, [pc, #24]	; (800c1c4 <prvCheckTasksWaitingTermination+0x58>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d1e1      	bne.n	800c174 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c1b0:	bf00      	nop
 800c1b2:	bf00      	nop
 800c1b4:	3708      	adds	r7, #8
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}
 800c1ba:	bf00      	nop
 800c1bc:	20003034 	.word	0x20003034
 800c1c0:	20003060 	.word	0x20003060
 800c1c4:	20003048 	.word	0x20003048

0800c1c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b084      	sub	sp, #16
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	334c      	adds	r3, #76	; 0x4c
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f001 fb53 	bl	800d880 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d108      	bne.n	800c1f6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f000 fb81 	bl	800c8f0 <vPortFree>
				vPortFree( pxTCB );
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f000 fb7e 	bl	800c8f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c1f4:	e018      	b.n	800c228 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c1fc:	2b01      	cmp	r3, #1
 800c1fe:	d103      	bne.n	800c208 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f000 fb75 	bl	800c8f0 <vPortFree>
	}
 800c206:	e00f      	b.n	800c228 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c20e:	2b02      	cmp	r3, #2
 800c210:	d00a      	beq.n	800c228 <prvDeleteTCB+0x60>
	__asm volatile
 800c212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c216:	f383 8811 	msr	BASEPRI, r3
 800c21a:	f3bf 8f6f 	isb	sy
 800c21e:	f3bf 8f4f 	dsb	sy
 800c222:	60fb      	str	r3, [r7, #12]
}
 800c224:	bf00      	nop
 800c226:	e7fe      	b.n	800c226 <prvDeleteTCB+0x5e>
	}
 800c228:	bf00      	nop
 800c22a:	3710      	adds	r7, #16
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}

0800c230 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c230:	b480      	push	{r7}
 800c232:	b083      	sub	sp, #12
 800c234:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c236:	4b0c      	ldr	r3, [pc, #48]	; (800c268 <prvResetNextTaskUnblockTime+0x38>)
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d104      	bne.n	800c24a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c240:	4b0a      	ldr	r3, [pc, #40]	; (800c26c <prvResetNextTaskUnblockTime+0x3c>)
 800c242:	f04f 32ff 	mov.w	r2, #4294967295
 800c246:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c248:	e008      	b.n	800c25c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c24a:	4b07      	ldr	r3, [pc, #28]	; (800c268 <prvResetNextTaskUnblockTime+0x38>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	68db      	ldr	r3, [r3, #12]
 800c250:	68db      	ldr	r3, [r3, #12]
 800c252:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	685b      	ldr	r3, [r3, #4]
 800c258:	4a04      	ldr	r2, [pc, #16]	; (800c26c <prvResetNextTaskUnblockTime+0x3c>)
 800c25a:	6013      	str	r3, [r2, #0]
}
 800c25c:	bf00      	nop
 800c25e:	370c      	adds	r7, #12
 800c260:	46bd      	mov	sp, r7
 800c262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c266:	4770      	bx	lr
 800c268:	20003018 	.word	0x20003018
 800c26c:	20003080 	.word	0x20003080

0800c270 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b084      	sub	sp, #16
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
 800c278:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c27a:	4b29      	ldr	r3, [pc, #164]	; (800c320 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c280:	4b28      	ldr	r3, [pc, #160]	; (800c324 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	3304      	adds	r3, #4
 800c286:	4618      	mov	r0, r3
 800c288:	f7ff fae1 	bl	800b84e <uxListRemove>
 800c28c:	4603      	mov	r3, r0
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d10b      	bne.n	800c2aa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c292:	4b24      	ldr	r3, [pc, #144]	; (800c324 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c298:	2201      	movs	r2, #1
 800c29a:	fa02 f303 	lsl.w	r3, r2, r3
 800c29e:	43da      	mvns	r2, r3
 800c2a0:	4b21      	ldr	r3, [pc, #132]	; (800c328 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	4013      	ands	r3, r2
 800c2a6:	4a20      	ldr	r2, [pc, #128]	; (800c328 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c2a8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2b0:	d10a      	bne.n	800c2c8 <prvAddCurrentTaskToDelayedList+0x58>
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d007      	beq.n	800c2c8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2b8:	4b1a      	ldr	r3, [pc, #104]	; (800c324 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	3304      	adds	r3, #4
 800c2be:	4619      	mov	r1, r3
 800c2c0:	481a      	ldr	r0, [pc, #104]	; (800c32c <prvAddCurrentTaskToDelayedList+0xbc>)
 800c2c2:	f7ff fa67 	bl	800b794 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c2c6:	e026      	b.n	800c316 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c2c8:	68fa      	ldr	r2, [r7, #12]
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	4413      	add	r3, r2
 800c2ce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c2d0:	4b14      	ldr	r3, [pc, #80]	; (800c324 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	68ba      	ldr	r2, [r7, #8]
 800c2d6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c2d8:	68ba      	ldr	r2, [r7, #8]
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	429a      	cmp	r2, r3
 800c2de:	d209      	bcs.n	800c2f4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2e0:	4b13      	ldr	r3, [pc, #76]	; (800c330 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c2e2:	681a      	ldr	r2, [r3, #0]
 800c2e4:	4b0f      	ldr	r3, [pc, #60]	; (800c324 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	3304      	adds	r3, #4
 800c2ea:	4619      	mov	r1, r3
 800c2ec:	4610      	mov	r0, r2
 800c2ee:	f7ff fa75 	bl	800b7dc <vListInsert>
}
 800c2f2:	e010      	b.n	800c316 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2f4:	4b0f      	ldr	r3, [pc, #60]	; (800c334 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c2f6:	681a      	ldr	r2, [r3, #0]
 800c2f8:	4b0a      	ldr	r3, [pc, #40]	; (800c324 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	3304      	adds	r3, #4
 800c2fe:	4619      	mov	r1, r3
 800c300:	4610      	mov	r0, r2
 800c302:	f7ff fa6b 	bl	800b7dc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c306:	4b0c      	ldr	r3, [pc, #48]	; (800c338 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	68ba      	ldr	r2, [r7, #8]
 800c30c:	429a      	cmp	r2, r3
 800c30e:	d202      	bcs.n	800c316 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c310:	4a09      	ldr	r2, [pc, #36]	; (800c338 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	6013      	str	r3, [r2, #0]
}
 800c316:	bf00      	nop
 800c318:	3710      	adds	r7, #16
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}
 800c31e:	bf00      	nop
 800c320:	20003064 	.word	0x20003064
 800c324:	20002f60 	.word	0x20002f60
 800c328:	20003068 	.word	0x20003068
 800c32c:	2000304c 	.word	0x2000304c
 800c330:	2000301c 	.word	0x2000301c
 800c334:	20003018 	.word	0x20003018
 800c338:	20003080 	.word	0x20003080

0800c33c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c33c:	b480      	push	{r7}
 800c33e:	b085      	sub	sp, #20
 800c340:	af00      	add	r7, sp, #0
 800c342:	60f8      	str	r0, [r7, #12]
 800c344:	60b9      	str	r1, [r7, #8]
 800c346:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	3b04      	subs	r3, #4
 800c34c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c354:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	3b04      	subs	r3, #4
 800c35a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	f023 0201 	bic.w	r2, r3, #1
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	3b04      	subs	r3, #4
 800c36a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c36c:	4a0c      	ldr	r2, [pc, #48]	; (800c3a0 <pxPortInitialiseStack+0x64>)
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	3b14      	subs	r3, #20
 800c376:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c378:	687a      	ldr	r2, [r7, #4]
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	3b04      	subs	r3, #4
 800c382:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	f06f 0202 	mvn.w	r2, #2
 800c38a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	3b20      	subs	r3, #32
 800c390:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c392:	68fb      	ldr	r3, [r7, #12]
}
 800c394:	4618      	mov	r0, r3
 800c396:	3714      	adds	r7, #20
 800c398:	46bd      	mov	sp, r7
 800c39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39e:	4770      	bx	lr
 800c3a0:	0800c3a5 	.word	0x0800c3a5

0800c3a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b085      	sub	sp, #20
 800c3a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c3ae:	4b12      	ldr	r3, [pc, #72]	; (800c3f8 <prvTaskExitError+0x54>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3b6:	d00a      	beq.n	800c3ce <prvTaskExitError+0x2a>
	__asm volatile
 800c3b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3bc:	f383 8811 	msr	BASEPRI, r3
 800c3c0:	f3bf 8f6f 	isb	sy
 800c3c4:	f3bf 8f4f 	dsb	sy
 800c3c8:	60fb      	str	r3, [r7, #12]
}
 800c3ca:	bf00      	nop
 800c3cc:	e7fe      	b.n	800c3cc <prvTaskExitError+0x28>
	__asm volatile
 800c3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d2:	f383 8811 	msr	BASEPRI, r3
 800c3d6:	f3bf 8f6f 	isb	sy
 800c3da:	f3bf 8f4f 	dsb	sy
 800c3de:	60bb      	str	r3, [r7, #8]
}
 800c3e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c3e2:	bf00      	nop
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d0fc      	beq.n	800c3e4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c3ea:	bf00      	nop
 800c3ec:	bf00      	nop
 800c3ee:	3714      	adds	r7, #20
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f6:	4770      	bx	lr
 800c3f8:	20000030 	.word	0x20000030
 800c3fc:	00000000 	.word	0x00000000

0800c400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c400:	4b07      	ldr	r3, [pc, #28]	; (800c420 <pxCurrentTCBConst2>)
 800c402:	6819      	ldr	r1, [r3, #0]
 800c404:	6808      	ldr	r0, [r1, #0]
 800c406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c40a:	f380 8809 	msr	PSP, r0
 800c40e:	f3bf 8f6f 	isb	sy
 800c412:	f04f 0000 	mov.w	r0, #0
 800c416:	f380 8811 	msr	BASEPRI, r0
 800c41a:	4770      	bx	lr
 800c41c:	f3af 8000 	nop.w

0800c420 <pxCurrentTCBConst2>:
 800c420:	20002f60 	.word	0x20002f60
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c424:	bf00      	nop
 800c426:	bf00      	nop

0800c428 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c428:	4808      	ldr	r0, [pc, #32]	; (800c44c <prvPortStartFirstTask+0x24>)
 800c42a:	6800      	ldr	r0, [r0, #0]
 800c42c:	6800      	ldr	r0, [r0, #0]
 800c42e:	f380 8808 	msr	MSP, r0
 800c432:	f04f 0000 	mov.w	r0, #0
 800c436:	f380 8814 	msr	CONTROL, r0
 800c43a:	b662      	cpsie	i
 800c43c:	b661      	cpsie	f
 800c43e:	f3bf 8f4f 	dsb	sy
 800c442:	f3bf 8f6f 	isb	sy
 800c446:	df00      	svc	0
 800c448:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c44a:	bf00      	nop
 800c44c:	e000ed08 	.word	0xe000ed08

0800c450 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b086      	sub	sp, #24
 800c454:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c456:	4b46      	ldr	r3, [pc, #280]	; (800c570 <xPortStartScheduler+0x120>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	4a46      	ldr	r2, [pc, #280]	; (800c574 <xPortStartScheduler+0x124>)
 800c45c:	4293      	cmp	r3, r2
 800c45e:	d10a      	bne.n	800c476 <xPortStartScheduler+0x26>
	__asm volatile
 800c460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c464:	f383 8811 	msr	BASEPRI, r3
 800c468:	f3bf 8f6f 	isb	sy
 800c46c:	f3bf 8f4f 	dsb	sy
 800c470:	613b      	str	r3, [r7, #16]
}
 800c472:	bf00      	nop
 800c474:	e7fe      	b.n	800c474 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c476:	4b3e      	ldr	r3, [pc, #248]	; (800c570 <xPortStartScheduler+0x120>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	4a3f      	ldr	r2, [pc, #252]	; (800c578 <xPortStartScheduler+0x128>)
 800c47c:	4293      	cmp	r3, r2
 800c47e:	d10a      	bne.n	800c496 <xPortStartScheduler+0x46>
	__asm volatile
 800c480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c484:	f383 8811 	msr	BASEPRI, r3
 800c488:	f3bf 8f6f 	isb	sy
 800c48c:	f3bf 8f4f 	dsb	sy
 800c490:	60fb      	str	r3, [r7, #12]
}
 800c492:	bf00      	nop
 800c494:	e7fe      	b.n	800c494 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c496:	4b39      	ldr	r3, [pc, #228]	; (800c57c <xPortStartScheduler+0x12c>)
 800c498:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c49a:	697b      	ldr	r3, [r7, #20]
 800c49c:	781b      	ldrb	r3, [r3, #0]
 800c49e:	b2db      	uxtb	r3, r3
 800c4a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c4a2:	697b      	ldr	r3, [r7, #20]
 800c4a4:	22ff      	movs	r2, #255	; 0xff
 800c4a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c4a8:	697b      	ldr	r3, [r7, #20]
 800c4aa:	781b      	ldrb	r3, [r3, #0]
 800c4ac:	b2db      	uxtb	r3, r3
 800c4ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c4b0:	78fb      	ldrb	r3, [r7, #3]
 800c4b2:	b2db      	uxtb	r3, r3
 800c4b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c4b8:	b2da      	uxtb	r2, r3
 800c4ba:	4b31      	ldr	r3, [pc, #196]	; (800c580 <xPortStartScheduler+0x130>)
 800c4bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c4be:	4b31      	ldr	r3, [pc, #196]	; (800c584 <xPortStartScheduler+0x134>)
 800c4c0:	2207      	movs	r2, #7
 800c4c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c4c4:	e009      	b.n	800c4da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c4c6:	4b2f      	ldr	r3, [pc, #188]	; (800c584 <xPortStartScheduler+0x134>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	3b01      	subs	r3, #1
 800c4cc:	4a2d      	ldr	r2, [pc, #180]	; (800c584 <xPortStartScheduler+0x134>)
 800c4ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c4d0:	78fb      	ldrb	r3, [r7, #3]
 800c4d2:	b2db      	uxtb	r3, r3
 800c4d4:	005b      	lsls	r3, r3, #1
 800c4d6:	b2db      	uxtb	r3, r3
 800c4d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c4da:	78fb      	ldrb	r3, [r7, #3]
 800c4dc:	b2db      	uxtb	r3, r3
 800c4de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4e2:	2b80      	cmp	r3, #128	; 0x80
 800c4e4:	d0ef      	beq.n	800c4c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c4e6:	4b27      	ldr	r3, [pc, #156]	; (800c584 <xPortStartScheduler+0x134>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	f1c3 0307 	rsb	r3, r3, #7
 800c4ee:	2b04      	cmp	r3, #4
 800c4f0:	d00a      	beq.n	800c508 <xPortStartScheduler+0xb8>
	__asm volatile
 800c4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f6:	f383 8811 	msr	BASEPRI, r3
 800c4fa:	f3bf 8f6f 	isb	sy
 800c4fe:	f3bf 8f4f 	dsb	sy
 800c502:	60bb      	str	r3, [r7, #8]
}
 800c504:	bf00      	nop
 800c506:	e7fe      	b.n	800c506 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c508:	4b1e      	ldr	r3, [pc, #120]	; (800c584 <xPortStartScheduler+0x134>)
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	021b      	lsls	r3, r3, #8
 800c50e:	4a1d      	ldr	r2, [pc, #116]	; (800c584 <xPortStartScheduler+0x134>)
 800c510:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c512:	4b1c      	ldr	r3, [pc, #112]	; (800c584 <xPortStartScheduler+0x134>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c51a:	4a1a      	ldr	r2, [pc, #104]	; (800c584 <xPortStartScheduler+0x134>)
 800c51c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	b2da      	uxtb	r2, r3
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c526:	4b18      	ldr	r3, [pc, #96]	; (800c588 <xPortStartScheduler+0x138>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	4a17      	ldr	r2, [pc, #92]	; (800c588 <xPortStartScheduler+0x138>)
 800c52c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c530:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c532:	4b15      	ldr	r3, [pc, #84]	; (800c588 <xPortStartScheduler+0x138>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	4a14      	ldr	r2, [pc, #80]	; (800c588 <xPortStartScheduler+0x138>)
 800c538:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c53c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c53e:	f000 f8dd 	bl	800c6fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c542:	4b12      	ldr	r3, [pc, #72]	; (800c58c <xPortStartScheduler+0x13c>)
 800c544:	2200      	movs	r2, #0
 800c546:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c548:	f000 f8fc 	bl	800c744 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c54c:	4b10      	ldr	r3, [pc, #64]	; (800c590 <xPortStartScheduler+0x140>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	4a0f      	ldr	r2, [pc, #60]	; (800c590 <xPortStartScheduler+0x140>)
 800c552:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c556:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c558:	f7ff ff66 	bl	800c428 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c55c:	f7ff fd4c 	bl	800bff8 <vTaskSwitchContext>
	prvTaskExitError();
 800c560:	f7ff ff20 	bl	800c3a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c564:	2300      	movs	r3, #0
}
 800c566:	4618      	mov	r0, r3
 800c568:	3718      	adds	r7, #24
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}
 800c56e:	bf00      	nop
 800c570:	e000ed00 	.word	0xe000ed00
 800c574:	410fc271 	.word	0x410fc271
 800c578:	410fc270 	.word	0x410fc270
 800c57c:	e000e400 	.word	0xe000e400
 800c580:	2000308c 	.word	0x2000308c
 800c584:	20003090 	.word	0x20003090
 800c588:	e000ed20 	.word	0xe000ed20
 800c58c:	20000030 	.word	0x20000030
 800c590:	e000ef34 	.word	0xe000ef34

0800c594 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c594:	b480      	push	{r7}
 800c596:	b083      	sub	sp, #12
 800c598:	af00      	add	r7, sp, #0
	__asm volatile
 800c59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c59e:	f383 8811 	msr	BASEPRI, r3
 800c5a2:	f3bf 8f6f 	isb	sy
 800c5a6:	f3bf 8f4f 	dsb	sy
 800c5aa:	607b      	str	r3, [r7, #4]
}
 800c5ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c5ae:	4b0f      	ldr	r3, [pc, #60]	; (800c5ec <vPortEnterCritical+0x58>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	3301      	adds	r3, #1
 800c5b4:	4a0d      	ldr	r2, [pc, #52]	; (800c5ec <vPortEnterCritical+0x58>)
 800c5b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c5b8:	4b0c      	ldr	r3, [pc, #48]	; (800c5ec <vPortEnterCritical+0x58>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	2b01      	cmp	r3, #1
 800c5be:	d10f      	bne.n	800c5e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c5c0:	4b0b      	ldr	r3, [pc, #44]	; (800c5f0 <vPortEnterCritical+0x5c>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	b2db      	uxtb	r3, r3
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d00a      	beq.n	800c5e0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ce:	f383 8811 	msr	BASEPRI, r3
 800c5d2:	f3bf 8f6f 	isb	sy
 800c5d6:	f3bf 8f4f 	dsb	sy
 800c5da:	603b      	str	r3, [r7, #0]
}
 800c5dc:	bf00      	nop
 800c5de:	e7fe      	b.n	800c5de <vPortEnterCritical+0x4a>
	}
}
 800c5e0:	bf00      	nop
 800c5e2:	370c      	adds	r7, #12
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ea:	4770      	bx	lr
 800c5ec:	20000030 	.word	0x20000030
 800c5f0:	e000ed04 	.word	0xe000ed04

0800c5f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b083      	sub	sp, #12
 800c5f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c5fa:	4b12      	ldr	r3, [pc, #72]	; (800c644 <vPortExitCritical+0x50>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d10a      	bne.n	800c618 <vPortExitCritical+0x24>
	__asm volatile
 800c602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c606:	f383 8811 	msr	BASEPRI, r3
 800c60a:	f3bf 8f6f 	isb	sy
 800c60e:	f3bf 8f4f 	dsb	sy
 800c612:	607b      	str	r3, [r7, #4]
}
 800c614:	bf00      	nop
 800c616:	e7fe      	b.n	800c616 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c618:	4b0a      	ldr	r3, [pc, #40]	; (800c644 <vPortExitCritical+0x50>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	3b01      	subs	r3, #1
 800c61e:	4a09      	ldr	r2, [pc, #36]	; (800c644 <vPortExitCritical+0x50>)
 800c620:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c622:	4b08      	ldr	r3, [pc, #32]	; (800c644 <vPortExitCritical+0x50>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d105      	bne.n	800c636 <vPortExitCritical+0x42>
 800c62a:	2300      	movs	r3, #0
 800c62c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c634:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c636:	bf00      	nop
 800c638:	370c      	adds	r7, #12
 800c63a:	46bd      	mov	sp, r7
 800c63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c640:	4770      	bx	lr
 800c642:	bf00      	nop
 800c644:	20000030 	.word	0x20000030
	...

0800c650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c650:	f3ef 8009 	mrs	r0, PSP
 800c654:	f3bf 8f6f 	isb	sy
 800c658:	4b15      	ldr	r3, [pc, #84]	; (800c6b0 <pxCurrentTCBConst>)
 800c65a:	681a      	ldr	r2, [r3, #0]
 800c65c:	f01e 0f10 	tst.w	lr, #16
 800c660:	bf08      	it	eq
 800c662:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c666:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c66a:	6010      	str	r0, [r2, #0]
 800c66c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c670:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c674:	f380 8811 	msr	BASEPRI, r0
 800c678:	f3bf 8f4f 	dsb	sy
 800c67c:	f3bf 8f6f 	isb	sy
 800c680:	f7ff fcba 	bl	800bff8 <vTaskSwitchContext>
 800c684:	f04f 0000 	mov.w	r0, #0
 800c688:	f380 8811 	msr	BASEPRI, r0
 800c68c:	bc09      	pop	{r0, r3}
 800c68e:	6819      	ldr	r1, [r3, #0]
 800c690:	6808      	ldr	r0, [r1, #0]
 800c692:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c696:	f01e 0f10 	tst.w	lr, #16
 800c69a:	bf08      	it	eq
 800c69c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c6a0:	f380 8809 	msr	PSP, r0
 800c6a4:	f3bf 8f6f 	isb	sy
 800c6a8:	4770      	bx	lr
 800c6aa:	bf00      	nop
 800c6ac:	f3af 8000 	nop.w

0800c6b0 <pxCurrentTCBConst>:
 800c6b0:	20002f60 	.word	0x20002f60
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c6b4:	bf00      	nop
 800c6b6:	bf00      	nop

0800c6b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b082      	sub	sp, #8
 800c6bc:	af00      	add	r7, sp, #0
	__asm volatile
 800c6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6c2:	f383 8811 	msr	BASEPRI, r3
 800c6c6:	f3bf 8f6f 	isb	sy
 800c6ca:	f3bf 8f4f 	dsb	sy
 800c6ce:	607b      	str	r3, [r7, #4]
}
 800c6d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c6d2:	f7ff fbd9 	bl	800be88 <xTaskIncrementTick>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d003      	beq.n	800c6e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c6dc:	4b06      	ldr	r3, [pc, #24]	; (800c6f8 <SysTick_Handler+0x40>)
 800c6de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6e2:	601a      	str	r2, [r3, #0]
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	f383 8811 	msr	BASEPRI, r3
}
 800c6ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c6f0:	bf00      	nop
 800c6f2:	3708      	adds	r7, #8
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}
 800c6f8:	e000ed04 	.word	0xe000ed04

0800c6fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c6fc:	b480      	push	{r7}
 800c6fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c700:	4b0b      	ldr	r3, [pc, #44]	; (800c730 <vPortSetupTimerInterrupt+0x34>)
 800c702:	2200      	movs	r2, #0
 800c704:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c706:	4b0b      	ldr	r3, [pc, #44]	; (800c734 <vPortSetupTimerInterrupt+0x38>)
 800c708:	2200      	movs	r2, #0
 800c70a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c70c:	4b0a      	ldr	r3, [pc, #40]	; (800c738 <vPortSetupTimerInterrupt+0x3c>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	4a0a      	ldr	r2, [pc, #40]	; (800c73c <vPortSetupTimerInterrupt+0x40>)
 800c712:	fba2 2303 	umull	r2, r3, r2, r3
 800c716:	099b      	lsrs	r3, r3, #6
 800c718:	4a09      	ldr	r2, [pc, #36]	; (800c740 <vPortSetupTimerInterrupt+0x44>)
 800c71a:	3b01      	subs	r3, #1
 800c71c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c71e:	4b04      	ldr	r3, [pc, #16]	; (800c730 <vPortSetupTimerInterrupt+0x34>)
 800c720:	2207      	movs	r2, #7
 800c722:	601a      	str	r2, [r3, #0]
}
 800c724:	bf00      	nop
 800c726:	46bd      	mov	sp, r7
 800c728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72c:	4770      	bx	lr
 800c72e:	bf00      	nop
 800c730:	e000e010 	.word	0xe000e010
 800c734:	e000e018 	.word	0xe000e018
 800c738:	20000024 	.word	0x20000024
 800c73c:	10624dd3 	.word	0x10624dd3
 800c740:	e000e014 	.word	0xe000e014

0800c744 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c744:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c754 <vPortEnableVFP+0x10>
 800c748:	6801      	ldr	r1, [r0, #0]
 800c74a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c74e:	6001      	str	r1, [r0, #0]
 800c750:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c752:	bf00      	nop
 800c754:	e000ed88 	.word	0xe000ed88

0800c758 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b08a      	sub	sp, #40	; 0x28
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c760:	2300      	movs	r3, #0
 800c762:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c764:	f7ff fae6 	bl	800bd34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c768:	4b5b      	ldr	r3, [pc, #364]	; (800c8d8 <pvPortMalloc+0x180>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d101      	bne.n	800c774 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c770:	f000 f920 	bl	800c9b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c774:	4b59      	ldr	r3, [pc, #356]	; (800c8dc <pvPortMalloc+0x184>)
 800c776:	681a      	ldr	r2, [r3, #0]
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	4013      	ands	r3, r2
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	f040 8093 	bne.w	800c8a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d01d      	beq.n	800c7c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c788:	2208      	movs	r2, #8
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	4413      	add	r3, r2
 800c78e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f003 0307 	and.w	r3, r3, #7
 800c796:	2b00      	cmp	r3, #0
 800c798:	d014      	beq.n	800c7c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	f023 0307 	bic.w	r3, r3, #7
 800c7a0:	3308      	adds	r3, #8
 800c7a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f003 0307 	and.w	r3, r3, #7
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d00a      	beq.n	800c7c4 <pvPortMalloc+0x6c>
	__asm volatile
 800c7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7b2:	f383 8811 	msr	BASEPRI, r3
 800c7b6:	f3bf 8f6f 	isb	sy
 800c7ba:	f3bf 8f4f 	dsb	sy
 800c7be:	617b      	str	r3, [r7, #20]
}
 800c7c0:	bf00      	nop
 800c7c2:	e7fe      	b.n	800c7c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d06e      	beq.n	800c8a8 <pvPortMalloc+0x150>
 800c7ca:	4b45      	ldr	r3, [pc, #276]	; (800c8e0 <pvPortMalloc+0x188>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	687a      	ldr	r2, [r7, #4]
 800c7d0:	429a      	cmp	r2, r3
 800c7d2:	d869      	bhi.n	800c8a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c7d4:	4b43      	ldr	r3, [pc, #268]	; (800c8e4 <pvPortMalloc+0x18c>)
 800c7d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c7d8:	4b42      	ldr	r3, [pc, #264]	; (800c8e4 <pvPortMalloc+0x18c>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c7de:	e004      	b.n	800c7ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ec:	685b      	ldr	r3, [r3, #4]
 800c7ee:	687a      	ldr	r2, [r7, #4]
 800c7f0:	429a      	cmp	r2, r3
 800c7f2:	d903      	bls.n	800c7fc <pvPortMalloc+0xa4>
 800c7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d1f1      	bne.n	800c7e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c7fc:	4b36      	ldr	r3, [pc, #216]	; (800c8d8 <pvPortMalloc+0x180>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c802:	429a      	cmp	r2, r3
 800c804:	d050      	beq.n	800c8a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c806:	6a3b      	ldr	r3, [r7, #32]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	2208      	movs	r2, #8
 800c80c:	4413      	add	r3, r2
 800c80e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c812:	681a      	ldr	r2, [r3, #0]
 800c814:	6a3b      	ldr	r3, [r7, #32]
 800c816:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c81a:	685a      	ldr	r2, [r3, #4]
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	1ad2      	subs	r2, r2, r3
 800c820:	2308      	movs	r3, #8
 800c822:	005b      	lsls	r3, r3, #1
 800c824:	429a      	cmp	r2, r3
 800c826:	d91f      	bls.n	800c868 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	4413      	add	r3, r2
 800c82e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c830:	69bb      	ldr	r3, [r7, #24]
 800c832:	f003 0307 	and.w	r3, r3, #7
 800c836:	2b00      	cmp	r3, #0
 800c838:	d00a      	beq.n	800c850 <pvPortMalloc+0xf8>
	__asm volatile
 800c83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c83e:	f383 8811 	msr	BASEPRI, r3
 800c842:	f3bf 8f6f 	isb	sy
 800c846:	f3bf 8f4f 	dsb	sy
 800c84a:	613b      	str	r3, [r7, #16]
}
 800c84c:	bf00      	nop
 800c84e:	e7fe      	b.n	800c84e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c852:	685a      	ldr	r2, [r3, #4]
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	1ad2      	subs	r2, r2, r3
 800c858:	69bb      	ldr	r3, [r7, #24]
 800c85a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c85e:	687a      	ldr	r2, [r7, #4]
 800c860:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c862:	69b8      	ldr	r0, [r7, #24]
 800c864:	f000 f908 	bl	800ca78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c868:	4b1d      	ldr	r3, [pc, #116]	; (800c8e0 <pvPortMalloc+0x188>)
 800c86a:	681a      	ldr	r2, [r3, #0]
 800c86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c86e:	685b      	ldr	r3, [r3, #4]
 800c870:	1ad3      	subs	r3, r2, r3
 800c872:	4a1b      	ldr	r2, [pc, #108]	; (800c8e0 <pvPortMalloc+0x188>)
 800c874:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c876:	4b1a      	ldr	r3, [pc, #104]	; (800c8e0 <pvPortMalloc+0x188>)
 800c878:	681a      	ldr	r2, [r3, #0]
 800c87a:	4b1b      	ldr	r3, [pc, #108]	; (800c8e8 <pvPortMalloc+0x190>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	429a      	cmp	r2, r3
 800c880:	d203      	bcs.n	800c88a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c882:	4b17      	ldr	r3, [pc, #92]	; (800c8e0 <pvPortMalloc+0x188>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	4a18      	ldr	r2, [pc, #96]	; (800c8e8 <pvPortMalloc+0x190>)
 800c888:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c88c:	685a      	ldr	r2, [r3, #4]
 800c88e:	4b13      	ldr	r3, [pc, #76]	; (800c8dc <pvPortMalloc+0x184>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	431a      	orrs	r2, r3
 800c894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c896:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c89a:	2200      	movs	r2, #0
 800c89c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c89e:	4b13      	ldr	r3, [pc, #76]	; (800c8ec <pvPortMalloc+0x194>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	3301      	adds	r3, #1
 800c8a4:	4a11      	ldr	r2, [pc, #68]	; (800c8ec <pvPortMalloc+0x194>)
 800c8a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c8a8:	f7ff fa52 	bl	800bd50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c8ac:	69fb      	ldr	r3, [r7, #28]
 800c8ae:	f003 0307 	and.w	r3, r3, #7
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d00a      	beq.n	800c8cc <pvPortMalloc+0x174>
	__asm volatile
 800c8b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ba:	f383 8811 	msr	BASEPRI, r3
 800c8be:	f3bf 8f6f 	isb	sy
 800c8c2:	f3bf 8f4f 	dsb	sy
 800c8c6:	60fb      	str	r3, [r7, #12]
}
 800c8c8:	bf00      	nop
 800c8ca:	e7fe      	b.n	800c8ca <pvPortMalloc+0x172>
	return pvReturn;
 800c8cc:	69fb      	ldr	r3, [r7, #28]
}
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	3728      	adds	r7, #40	; 0x28
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd80      	pop	{r7, pc}
 800c8d6:	bf00      	nop
 800c8d8:	20006c9c 	.word	0x20006c9c
 800c8dc:	20006cb0 	.word	0x20006cb0
 800c8e0:	20006ca0 	.word	0x20006ca0
 800c8e4:	20006c94 	.word	0x20006c94
 800c8e8:	20006ca4 	.word	0x20006ca4
 800c8ec:	20006ca8 	.word	0x20006ca8

0800c8f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b086      	sub	sp, #24
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d04d      	beq.n	800c99e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c902:	2308      	movs	r3, #8
 800c904:	425b      	negs	r3, r3
 800c906:	697a      	ldr	r2, [r7, #20]
 800c908:	4413      	add	r3, r2
 800c90a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c90c:	697b      	ldr	r3, [r7, #20]
 800c90e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c910:	693b      	ldr	r3, [r7, #16]
 800c912:	685a      	ldr	r2, [r3, #4]
 800c914:	4b24      	ldr	r3, [pc, #144]	; (800c9a8 <vPortFree+0xb8>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	4013      	ands	r3, r2
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d10a      	bne.n	800c934 <vPortFree+0x44>
	__asm volatile
 800c91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c922:	f383 8811 	msr	BASEPRI, r3
 800c926:	f3bf 8f6f 	isb	sy
 800c92a:	f3bf 8f4f 	dsb	sy
 800c92e:	60fb      	str	r3, [r7, #12]
}
 800c930:	bf00      	nop
 800c932:	e7fe      	b.n	800c932 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c934:	693b      	ldr	r3, [r7, #16]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d00a      	beq.n	800c952 <vPortFree+0x62>
	__asm volatile
 800c93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c940:	f383 8811 	msr	BASEPRI, r3
 800c944:	f3bf 8f6f 	isb	sy
 800c948:	f3bf 8f4f 	dsb	sy
 800c94c:	60bb      	str	r3, [r7, #8]
}
 800c94e:	bf00      	nop
 800c950:	e7fe      	b.n	800c950 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c952:	693b      	ldr	r3, [r7, #16]
 800c954:	685a      	ldr	r2, [r3, #4]
 800c956:	4b14      	ldr	r3, [pc, #80]	; (800c9a8 <vPortFree+0xb8>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	4013      	ands	r3, r2
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d01e      	beq.n	800c99e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c960:	693b      	ldr	r3, [r7, #16]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d11a      	bne.n	800c99e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c968:	693b      	ldr	r3, [r7, #16]
 800c96a:	685a      	ldr	r2, [r3, #4]
 800c96c:	4b0e      	ldr	r3, [pc, #56]	; (800c9a8 <vPortFree+0xb8>)
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	43db      	mvns	r3, r3
 800c972:	401a      	ands	r2, r3
 800c974:	693b      	ldr	r3, [r7, #16]
 800c976:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c978:	f7ff f9dc 	bl	800bd34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c97c:	693b      	ldr	r3, [r7, #16]
 800c97e:	685a      	ldr	r2, [r3, #4]
 800c980:	4b0a      	ldr	r3, [pc, #40]	; (800c9ac <vPortFree+0xbc>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	4413      	add	r3, r2
 800c986:	4a09      	ldr	r2, [pc, #36]	; (800c9ac <vPortFree+0xbc>)
 800c988:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c98a:	6938      	ldr	r0, [r7, #16]
 800c98c:	f000 f874 	bl	800ca78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c990:	4b07      	ldr	r3, [pc, #28]	; (800c9b0 <vPortFree+0xc0>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	3301      	adds	r3, #1
 800c996:	4a06      	ldr	r2, [pc, #24]	; (800c9b0 <vPortFree+0xc0>)
 800c998:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c99a:	f7ff f9d9 	bl	800bd50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c99e:	bf00      	nop
 800c9a0:	3718      	adds	r7, #24
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}
 800c9a6:	bf00      	nop
 800c9a8:	20006cb0 	.word	0x20006cb0
 800c9ac:	20006ca0 	.word	0x20006ca0
 800c9b0:	20006cac 	.word	0x20006cac

0800c9b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c9b4:	b480      	push	{r7}
 800c9b6:	b085      	sub	sp, #20
 800c9b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c9ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c9be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c9c0:	4b27      	ldr	r3, [pc, #156]	; (800ca60 <prvHeapInit+0xac>)
 800c9c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	f003 0307 	and.w	r3, r3, #7
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d00c      	beq.n	800c9e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	3307      	adds	r3, #7
 800c9d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	f023 0307 	bic.w	r3, r3, #7
 800c9da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c9dc:	68ba      	ldr	r2, [r7, #8]
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	1ad3      	subs	r3, r2, r3
 800c9e2:	4a1f      	ldr	r2, [pc, #124]	; (800ca60 <prvHeapInit+0xac>)
 800c9e4:	4413      	add	r3, r2
 800c9e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c9ec:	4a1d      	ldr	r2, [pc, #116]	; (800ca64 <prvHeapInit+0xb0>)
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c9f2:	4b1c      	ldr	r3, [pc, #112]	; (800ca64 <prvHeapInit+0xb0>)
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	68ba      	ldr	r2, [r7, #8]
 800c9fc:	4413      	add	r3, r2
 800c9fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ca00:	2208      	movs	r2, #8
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	1a9b      	subs	r3, r3, r2
 800ca06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	f023 0307 	bic.w	r3, r3, #7
 800ca0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	4a15      	ldr	r2, [pc, #84]	; (800ca68 <prvHeapInit+0xb4>)
 800ca14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ca16:	4b14      	ldr	r3, [pc, #80]	; (800ca68 <prvHeapInit+0xb4>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ca1e:	4b12      	ldr	r3, [pc, #72]	; (800ca68 <prvHeapInit+0xb4>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	2200      	movs	r2, #0
 800ca24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	68fa      	ldr	r2, [r7, #12]
 800ca2e:	1ad2      	subs	r2, r2, r3
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ca34:	4b0c      	ldr	r3, [pc, #48]	; (800ca68 <prvHeapInit+0xb4>)
 800ca36:	681a      	ldr	r2, [r3, #0]
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	685b      	ldr	r3, [r3, #4]
 800ca40:	4a0a      	ldr	r2, [pc, #40]	; (800ca6c <prvHeapInit+0xb8>)
 800ca42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	685b      	ldr	r3, [r3, #4]
 800ca48:	4a09      	ldr	r2, [pc, #36]	; (800ca70 <prvHeapInit+0xbc>)
 800ca4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ca4c:	4b09      	ldr	r3, [pc, #36]	; (800ca74 <prvHeapInit+0xc0>)
 800ca4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ca52:	601a      	str	r2, [r3, #0]
}
 800ca54:	bf00      	nop
 800ca56:	3714      	adds	r7, #20
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5e:	4770      	bx	lr
 800ca60:	20003094 	.word	0x20003094
 800ca64:	20006c94 	.word	0x20006c94
 800ca68:	20006c9c 	.word	0x20006c9c
 800ca6c:	20006ca4 	.word	0x20006ca4
 800ca70:	20006ca0 	.word	0x20006ca0
 800ca74:	20006cb0 	.word	0x20006cb0

0800ca78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ca78:	b480      	push	{r7}
 800ca7a:	b085      	sub	sp, #20
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ca80:	4b28      	ldr	r3, [pc, #160]	; (800cb24 <prvInsertBlockIntoFreeList+0xac>)
 800ca82:	60fb      	str	r3, [r7, #12]
 800ca84:	e002      	b.n	800ca8c <prvInsertBlockIntoFreeList+0x14>
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	60fb      	str	r3, [r7, #12]
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	687a      	ldr	r2, [r7, #4]
 800ca92:	429a      	cmp	r2, r3
 800ca94:	d8f7      	bhi.n	800ca86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	685b      	ldr	r3, [r3, #4]
 800ca9e:	68ba      	ldr	r2, [r7, #8]
 800caa0:	4413      	add	r3, r2
 800caa2:	687a      	ldr	r2, [r7, #4]
 800caa4:	429a      	cmp	r2, r3
 800caa6:	d108      	bne.n	800caba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	685a      	ldr	r2, [r3, #4]
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	685b      	ldr	r3, [r3, #4]
 800cab0:	441a      	add	r2, r3
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	685b      	ldr	r3, [r3, #4]
 800cac2:	68ba      	ldr	r2, [r7, #8]
 800cac4:	441a      	add	r2, r3
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	429a      	cmp	r2, r3
 800cacc:	d118      	bne.n	800cb00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	681a      	ldr	r2, [r3, #0]
 800cad2:	4b15      	ldr	r3, [pc, #84]	; (800cb28 <prvInsertBlockIntoFreeList+0xb0>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	429a      	cmp	r2, r3
 800cad8:	d00d      	beq.n	800caf6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	685a      	ldr	r2, [r3, #4]
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	685b      	ldr	r3, [r3, #4]
 800cae4:	441a      	add	r2, r3
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	681a      	ldr	r2, [r3, #0]
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	601a      	str	r2, [r3, #0]
 800caf4:	e008      	b.n	800cb08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800caf6:	4b0c      	ldr	r3, [pc, #48]	; (800cb28 <prvInsertBlockIntoFreeList+0xb0>)
 800caf8:	681a      	ldr	r2, [r3, #0]
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	601a      	str	r2, [r3, #0]
 800cafe:	e003      	b.n	800cb08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	681a      	ldr	r2, [r3, #0]
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cb08:	68fa      	ldr	r2, [r7, #12]
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	429a      	cmp	r2, r3
 800cb0e:	d002      	beq.n	800cb16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	687a      	ldr	r2, [r7, #4]
 800cb14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb16:	bf00      	nop
 800cb18:	3714      	adds	r7, #20
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb20:	4770      	bx	lr
 800cb22:	bf00      	nop
 800cb24:	20006c94 	.word	0x20006c94
 800cb28:	20006c9c 	.word	0x20006c9c

0800cb2c <__cxa_pure_virtual>:
 800cb2c:	b508      	push	{r3, lr}
 800cb2e:	f000 f80d 	bl	800cb4c <_ZSt9terminatev>

0800cb32 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800cb32:	b508      	push	{r3, lr}
 800cb34:	4780      	blx	r0
 800cb36:	f000 fdaf 	bl	800d698 <abort>
	...

0800cb3c <_ZSt13get_terminatev>:
 800cb3c:	4b02      	ldr	r3, [pc, #8]	; (800cb48 <_ZSt13get_terminatev+0xc>)
 800cb3e:	6818      	ldr	r0, [r3, #0]
 800cb40:	f3bf 8f5b 	dmb	ish
 800cb44:	4770      	bx	lr
 800cb46:	bf00      	nop
 800cb48:	20000034 	.word	0x20000034

0800cb4c <_ZSt9terminatev>:
 800cb4c:	b508      	push	{r3, lr}
 800cb4e:	f7ff fff5 	bl	800cb3c <_ZSt13get_terminatev>
 800cb52:	f7ff ffee 	bl	800cb32 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800cb58 <cosf>:
 800cb58:	ee10 3a10 	vmov	r3, s0
 800cb5c:	b507      	push	{r0, r1, r2, lr}
 800cb5e:	4a1e      	ldr	r2, [pc, #120]	; (800cbd8 <cosf+0x80>)
 800cb60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cb64:	4293      	cmp	r3, r2
 800cb66:	dc06      	bgt.n	800cb76 <cosf+0x1e>
 800cb68:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800cbdc <cosf+0x84>
 800cb6c:	b003      	add	sp, #12
 800cb6e:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb72:	f000 b9b7 	b.w	800cee4 <__kernel_cosf>
 800cb76:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800cb7a:	db04      	blt.n	800cb86 <cosf+0x2e>
 800cb7c:	ee30 0a40 	vsub.f32	s0, s0, s0
 800cb80:	b003      	add	sp, #12
 800cb82:	f85d fb04 	ldr.w	pc, [sp], #4
 800cb86:	4668      	mov	r0, sp
 800cb88:	f000 f870 	bl	800cc6c <__ieee754_rem_pio2f>
 800cb8c:	f000 0003 	and.w	r0, r0, #3
 800cb90:	2801      	cmp	r0, #1
 800cb92:	d009      	beq.n	800cba8 <cosf+0x50>
 800cb94:	2802      	cmp	r0, #2
 800cb96:	d010      	beq.n	800cbba <cosf+0x62>
 800cb98:	b9b0      	cbnz	r0, 800cbc8 <cosf+0x70>
 800cb9a:	eddd 0a01 	vldr	s1, [sp, #4]
 800cb9e:	ed9d 0a00 	vldr	s0, [sp]
 800cba2:	f000 f99f 	bl	800cee4 <__kernel_cosf>
 800cba6:	e7eb      	b.n	800cb80 <cosf+0x28>
 800cba8:	eddd 0a01 	vldr	s1, [sp, #4]
 800cbac:	ed9d 0a00 	vldr	s0, [sp]
 800cbb0:	f000 fc6e 	bl	800d490 <__kernel_sinf>
 800cbb4:	eeb1 0a40 	vneg.f32	s0, s0
 800cbb8:	e7e2      	b.n	800cb80 <cosf+0x28>
 800cbba:	eddd 0a01 	vldr	s1, [sp, #4]
 800cbbe:	ed9d 0a00 	vldr	s0, [sp]
 800cbc2:	f000 f98f 	bl	800cee4 <__kernel_cosf>
 800cbc6:	e7f5      	b.n	800cbb4 <cosf+0x5c>
 800cbc8:	eddd 0a01 	vldr	s1, [sp, #4]
 800cbcc:	ed9d 0a00 	vldr	s0, [sp]
 800cbd0:	2001      	movs	r0, #1
 800cbd2:	f000 fc5d 	bl	800d490 <__kernel_sinf>
 800cbd6:	e7d3      	b.n	800cb80 <cosf+0x28>
 800cbd8:	3f490fd8 	.word	0x3f490fd8
 800cbdc:	00000000 	.word	0x00000000

0800cbe0 <sinf>:
 800cbe0:	ee10 3a10 	vmov	r3, s0
 800cbe4:	b507      	push	{r0, r1, r2, lr}
 800cbe6:	4a1f      	ldr	r2, [pc, #124]	; (800cc64 <sinf+0x84>)
 800cbe8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cbec:	4293      	cmp	r3, r2
 800cbee:	dc07      	bgt.n	800cc00 <sinf+0x20>
 800cbf0:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800cc68 <sinf+0x88>
 800cbf4:	2000      	movs	r0, #0
 800cbf6:	b003      	add	sp, #12
 800cbf8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cbfc:	f000 bc48 	b.w	800d490 <__kernel_sinf>
 800cc00:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800cc04:	db04      	blt.n	800cc10 <sinf+0x30>
 800cc06:	ee30 0a40 	vsub.f32	s0, s0, s0
 800cc0a:	b003      	add	sp, #12
 800cc0c:	f85d fb04 	ldr.w	pc, [sp], #4
 800cc10:	4668      	mov	r0, sp
 800cc12:	f000 f82b 	bl	800cc6c <__ieee754_rem_pio2f>
 800cc16:	f000 0003 	and.w	r0, r0, #3
 800cc1a:	2801      	cmp	r0, #1
 800cc1c:	d00a      	beq.n	800cc34 <sinf+0x54>
 800cc1e:	2802      	cmp	r0, #2
 800cc20:	d00f      	beq.n	800cc42 <sinf+0x62>
 800cc22:	b9c0      	cbnz	r0, 800cc56 <sinf+0x76>
 800cc24:	eddd 0a01 	vldr	s1, [sp, #4]
 800cc28:	ed9d 0a00 	vldr	s0, [sp]
 800cc2c:	2001      	movs	r0, #1
 800cc2e:	f000 fc2f 	bl	800d490 <__kernel_sinf>
 800cc32:	e7ea      	b.n	800cc0a <sinf+0x2a>
 800cc34:	eddd 0a01 	vldr	s1, [sp, #4]
 800cc38:	ed9d 0a00 	vldr	s0, [sp]
 800cc3c:	f000 f952 	bl	800cee4 <__kernel_cosf>
 800cc40:	e7e3      	b.n	800cc0a <sinf+0x2a>
 800cc42:	eddd 0a01 	vldr	s1, [sp, #4]
 800cc46:	ed9d 0a00 	vldr	s0, [sp]
 800cc4a:	2001      	movs	r0, #1
 800cc4c:	f000 fc20 	bl	800d490 <__kernel_sinf>
 800cc50:	eeb1 0a40 	vneg.f32	s0, s0
 800cc54:	e7d9      	b.n	800cc0a <sinf+0x2a>
 800cc56:	eddd 0a01 	vldr	s1, [sp, #4]
 800cc5a:	ed9d 0a00 	vldr	s0, [sp]
 800cc5e:	f000 f941 	bl	800cee4 <__kernel_cosf>
 800cc62:	e7f5      	b.n	800cc50 <sinf+0x70>
 800cc64:	3f490fd8 	.word	0x3f490fd8
 800cc68:	00000000 	.word	0x00000000

0800cc6c <__ieee754_rem_pio2f>:
 800cc6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc6e:	ee10 6a10 	vmov	r6, s0
 800cc72:	4b8e      	ldr	r3, [pc, #568]	; (800ceac <__ieee754_rem_pio2f+0x240>)
 800cc74:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800cc78:	429d      	cmp	r5, r3
 800cc7a:	b087      	sub	sp, #28
 800cc7c:	eef0 7a40 	vmov.f32	s15, s0
 800cc80:	4604      	mov	r4, r0
 800cc82:	dc05      	bgt.n	800cc90 <__ieee754_rem_pio2f+0x24>
 800cc84:	2300      	movs	r3, #0
 800cc86:	ed80 0a00 	vstr	s0, [r0]
 800cc8a:	6043      	str	r3, [r0, #4]
 800cc8c:	2000      	movs	r0, #0
 800cc8e:	e01a      	b.n	800ccc6 <__ieee754_rem_pio2f+0x5a>
 800cc90:	4b87      	ldr	r3, [pc, #540]	; (800ceb0 <__ieee754_rem_pio2f+0x244>)
 800cc92:	429d      	cmp	r5, r3
 800cc94:	dc46      	bgt.n	800cd24 <__ieee754_rem_pio2f+0xb8>
 800cc96:	2e00      	cmp	r6, #0
 800cc98:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800ceb4 <__ieee754_rem_pio2f+0x248>
 800cc9c:	4b86      	ldr	r3, [pc, #536]	; (800ceb8 <__ieee754_rem_pio2f+0x24c>)
 800cc9e:	f025 050f 	bic.w	r5, r5, #15
 800cca2:	dd1f      	ble.n	800cce4 <__ieee754_rem_pio2f+0x78>
 800cca4:	429d      	cmp	r5, r3
 800cca6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800ccaa:	d00e      	beq.n	800ccca <__ieee754_rem_pio2f+0x5e>
 800ccac:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800cebc <__ieee754_rem_pio2f+0x250>
 800ccb0:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800ccb4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800ccb8:	ed80 0a00 	vstr	s0, [r0]
 800ccbc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ccc0:	2001      	movs	r0, #1
 800ccc2:	edc4 7a01 	vstr	s15, [r4, #4]
 800ccc6:	b007      	add	sp, #28
 800ccc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccca:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800cec0 <__ieee754_rem_pio2f+0x254>
 800ccce:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800cec4 <__ieee754_rem_pio2f+0x258>
 800ccd2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800ccd6:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800ccda:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ccde:	edc0 6a00 	vstr	s13, [r0]
 800cce2:	e7eb      	b.n	800ccbc <__ieee754_rem_pio2f+0x50>
 800cce4:	429d      	cmp	r5, r3
 800cce6:	ee77 7a80 	vadd.f32	s15, s15, s0
 800ccea:	d00e      	beq.n	800cd0a <__ieee754_rem_pio2f+0x9e>
 800ccec:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800cebc <__ieee754_rem_pio2f+0x250>
 800ccf0:	ee37 0a87 	vadd.f32	s0, s15, s14
 800ccf4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800ccf8:	ed80 0a00 	vstr	s0, [r0]
 800ccfc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cd00:	f04f 30ff 	mov.w	r0, #4294967295
 800cd04:	edc4 7a01 	vstr	s15, [r4, #4]
 800cd08:	e7dd      	b.n	800ccc6 <__ieee754_rem_pio2f+0x5a>
 800cd0a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800cec0 <__ieee754_rem_pio2f+0x254>
 800cd0e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800cec4 <__ieee754_rem_pio2f+0x258>
 800cd12:	ee77 7a80 	vadd.f32	s15, s15, s0
 800cd16:	ee77 6a87 	vadd.f32	s13, s15, s14
 800cd1a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800cd1e:	edc0 6a00 	vstr	s13, [r0]
 800cd22:	e7eb      	b.n	800ccfc <__ieee754_rem_pio2f+0x90>
 800cd24:	4b68      	ldr	r3, [pc, #416]	; (800cec8 <__ieee754_rem_pio2f+0x25c>)
 800cd26:	429d      	cmp	r5, r3
 800cd28:	dc72      	bgt.n	800ce10 <__ieee754_rem_pio2f+0x1a4>
 800cd2a:	f000 fbf9 	bl	800d520 <fabsf>
 800cd2e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800cecc <__ieee754_rem_pio2f+0x260>
 800cd32:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800cd36:	eee0 7a07 	vfma.f32	s15, s0, s14
 800cd3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cd3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cd42:	ee17 0a90 	vmov	r0, s15
 800cd46:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800ceb4 <__ieee754_rem_pio2f+0x248>
 800cd4a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800cd4e:	281f      	cmp	r0, #31
 800cd50:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800cebc <__ieee754_rem_pio2f+0x250>
 800cd54:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd58:	eeb1 6a47 	vneg.f32	s12, s14
 800cd5c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800cd60:	ee16 2a90 	vmov	r2, s13
 800cd64:	dc1c      	bgt.n	800cda0 <__ieee754_rem_pio2f+0x134>
 800cd66:	495a      	ldr	r1, [pc, #360]	; (800ced0 <__ieee754_rem_pio2f+0x264>)
 800cd68:	1e47      	subs	r7, r0, #1
 800cd6a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800cd6e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800cd72:	428b      	cmp	r3, r1
 800cd74:	d014      	beq.n	800cda0 <__ieee754_rem_pio2f+0x134>
 800cd76:	6022      	str	r2, [r4, #0]
 800cd78:	ed94 7a00 	vldr	s14, [r4]
 800cd7c:	ee30 0a47 	vsub.f32	s0, s0, s14
 800cd80:	2e00      	cmp	r6, #0
 800cd82:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cd86:	ed84 0a01 	vstr	s0, [r4, #4]
 800cd8a:	da9c      	bge.n	800ccc6 <__ieee754_rem_pio2f+0x5a>
 800cd8c:	eeb1 7a47 	vneg.f32	s14, s14
 800cd90:	eeb1 0a40 	vneg.f32	s0, s0
 800cd94:	ed84 7a00 	vstr	s14, [r4]
 800cd98:	ed84 0a01 	vstr	s0, [r4, #4]
 800cd9c:	4240      	negs	r0, r0
 800cd9e:	e792      	b.n	800ccc6 <__ieee754_rem_pio2f+0x5a>
 800cda0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800cda4:	15eb      	asrs	r3, r5, #23
 800cda6:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800cdaa:	2d08      	cmp	r5, #8
 800cdac:	dde3      	ble.n	800cd76 <__ieee754_rem_pio2f+0x10a>
 800cdae:	eddf 7a44 	vldr	s15, [pc, #272]	; 800cec0 <__ieee754_rem_pio2f+0x254>
 800cdb2:	eddf 5a44 	vldr	s11, [pc, #272]	; 800cec4 <__ieee754_rem_pio2f+0x258>
 800cdb6:	eef0 6a40 	vmov.f32	s13, s0
 800cdba:	eee6 6a27 	vfma.f32	s13, s12, s15
 800cdbe:	ee30 0a66 	vsub.f32	s0, s0, s13
 800cdc2:	eea6 0a27 	vfma.f32	s0, s12, s15
 800cdc6:	eef0 7a40 	vmov.f32	s15, s0
 800cdca:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800cdce:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800cdd2:	ee15 2a90 	vmov	r2, s11
 800cdd6:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800cdda:	1a5b      	subs	r3, r3, r1
 800cddc:	2b19      	cmp	r3, #25
 800cdde:	dc04      	bgt.n	800cdea <__ieee754_rem_pio2f+0x17e>
 800cde0:	edc4 5a00 	vstr	s11, [r4]
 800cde4:	eeb0 0a66 	vmov.f32	s0, s13
 800cde8:	e7c6      	b.n	800cd78 <__ieee754_rem_pio2f+0x10c>
 800cdea:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800ced4 <__ieee754_rem_pio2f+0x268>
 800cdee:	eeb0 0a66 	vmov.f32	s0, s13
 800cdf2:	eea6 0a25 	vfma.f32	s0, s12, s11
 800cdf6:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800cdfa:	eddf 6a37 	vldr	s13, [pc, #220]	; 800ced8 <__ieee754_rem_pio2f+0x26c>
 800cdfe:	eee6 7a25 	vfma.f32	s15, s12, s11
 800ce02:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800ce06:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ce0a:	ed84 7a00 	vstr	s14, [r4]
 800ce0e:	e7b3      	b.n	800cd78 <__ieee754_rem_pio2f+0x10c>
 800ce10:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800ce14:	db06      	blt.n	800ce24 <__ieee754_rem_pio2f+0x1b8>
 800ce16:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ce1a:	edc0 7a01 	vstr	s15, [r0, #4]
 800ce1e:	edc0 7a00 	vstr	s15, [r0]
 800ce22:	e733      	b.n	800cc8c <__ieee754_rem_pio2f+0x20>
 800ce24:	15ea      	asrs	r2, r5, #23
 800ce26:	3a86      	subs	r2, #134	; 0x86
 800ce28:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800ce2c:	ee07 3a90 	vmov	s15, r3
 800ce30:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ce34:	eddf 6a29 	vldr	s13, [pc, #164]	; 800cedc <__ieee754_rem_pio2f+0x270>
 800ce38:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ce3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ce40:	ed8d 7a03 	vstr	s14, [sp, #12]
 800ce44:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ce48:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ce4c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ce50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ce54:	ed8d 7a04 	vstr	s14, [sp, #16]
 800ce58:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ce5c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ce60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce64:	edcd 7a05 	vstr	s15, [sp, #20]
 800ce68:	d11e      	bne.n	800cea8 <__ieee754_rem_pio2f+0x23c>
 800ce6a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ce6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce72:	bf14      	ite	ne
 800ce74:	2302      	movne	r3, #2
 800ce76:	2301      	moveq	r3, #1
 800ce78:	4919      	ldr	r1, [pc, #100]	; (800cee0 <__ieee754_rem_pio2f+0x274>)
 800ce7a:	9101      	str	r1, [sp, #4]
 800ce7c:	2102      	movs	r1, #2
 800ce7e:	9100      	str	r1, [sp, #0]
 800ce80:	a803      	add	r0, sp, #12
 800ce82:	4621      	mov	r1, r4
 800ce84:	f000 f88e 	bl	800cfa4 <__kernel_rem_pio2f>
 800ce88:	2e00      	cmp	r6, #0
 800ce8a:	f6bf af1c 	bge.w	800ccc6 <__ieee754_rem_pio2f+0x5a>
 800ce8e:	edd4 7a00 	vldr	s15, [r4]
 800ce92:	eef1 7a67 	vneg.f32	s15, s15
 800ce96:	edc4 7a00 	vstr	s15, [r4]
 800ce9a:	edd4 7a01 	vldr	s15, [r4, #4]
 800ce9e:	eef1 7a67 	vneg.f32	s15, s15
 800cea2:	edc4 7a01 	vstr	s15, [r4, #4]
 800cea6:	e779      	b.n	800cd9c <__ieee754_rem_pio2f+0x130>
 800cea8:	2303      	movs	r3, #3
 800ceaa:	e7e5      	b.n	800ce78 <__ieee754_rem_pio2f+0x20c>
 800ceac:	3f490fd8 	.word	0x3f490fd8
 800ceb0:	4016cbe3 	.word	0x4016cbe3
 800ceb4:	3fc90f80 	.word	0x3fc90f80
 800ceb8:	3fc90fd0 	.word	0x3fc90fd0
 800cebc:	37354443 	.word	0x37354443
 800cec0:	37354400 	.word	0x37354400
 800cec4:	2e85a308 	.word	0x2e85a308
 800cec8:	43490f80 	.word	0x43490f80
 800cecc:	3f22f984 	.word	0x3f22f984
 800ced0:	0800e220 	.word	0x0800e220
 800ced4:	2e85a300 	.word	0x2e85a300
 800ced8:	248d3132 	.word	0x248d3132
 800cedc:	43800000 	.word	0x43800000
 800cee0:	0800e2a0 	.word	0x0800e2a0

0800cee4 <__kernel_cosf>:
 800cee4:	ee10 3a10 	vmov	r3, s0
 800cee8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ceec:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800cef0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800cef4:	da05      	bge.n	800cf02 <__kernel_cosf+0x1e>
 800cef6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800cefa:	ee17 2a90 	vmov	r2, s15
 800cefe:	2a00      	cmp	r2, #0
 800cf00:	d03d      	beq.n	800cf7e <__kernel_cosf+0x9a>
 800cf02:	ee60 5a00 	vmul.f32	s11, s0, s0
 800cf06:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800cf84 <__kernel_cosf+0xa0>
 800cf0a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800cf88 <__kernel_cosf+0xa4>
 800cf0e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800cf8c <__kernel_cosf+0xa8>
 800cf12:	4a1f      	ldr	r2, [pc, #124]	; (800cf90 <__kernel_cosf+0xac>)
 800cf14:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800cf18:	4293      	cmp	r3, r2
 800cf1a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800cf94 <__kernel_cosf+0xb0>
 800cf1e:	eee7 7a25 	vfma.f32	s15, s14, s11
 800cf22:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800cf98 <__kernel_cosf+0xb4>
 800cf26:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800cf2a:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800cf9c <__kernel_cosf+0xb8>
 800cf2e:	eee7 7a25 	vfma.f32	s15, s14, s11
 800cf32:	eeb0 7a66 	vmov.f32	s14, s13
 800cf36:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800cf3a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800cf3e:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800cf42:	ee67 6a25 	vmul.f32	s13, s14, s11
 800cf46:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800cf4a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800cf4e:	dc04      	bgt.n	800cf5a <__kernel_cosf+0x76>
 800cf50:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800cf54:	ee36 0a47 	vsub.f32	s0, s12, s14
 800cf58:	4770      	bx	lr
 800cf5a:	4a11      	ldr	r2, [pc, #68]	; (800cfa0 <__kernel_cosf+0xbc>)
 800cf5c:	4293      	cmp	r3, r2
 800cf5e:	bfda      	itte	le
 800cf60:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800cf64:	ee06 3a90 	vmovle	s13, r3
 800cf68:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800cf6c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800cf70:	ee36 0a66 	vsub.f32	s0, s12, s13
 800cf74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cf78:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cf7c:	4770      	bx	lr
 800cf7e:	eeb0 0a46 	vmov.f32	s0, s12
 800cf82:	4770      	bx	lr
 800cf84:	ad47d74e 	.word	0xad47d74e
 800cf88:	310f74f6 	.word	0x310f74f6
 800cf8c:	3d2aaaab 	.word	0x3d2aaaab
 800cf90:	3e999999 	.word	0x3e999999
 800cf94:	b493f27c 	.word	0xb493f27c
 800cf98:	37d00d01 	.word	0x37d00d01
 800cf9c:	bab60b61 	.word	0xbab60b61
 800cfa0:	3f480000 	.word	0x3f480000

0800cfa4 <__kernel_rem_pio2f>:
 800cfa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfa8:	ed2d 8b04 	vpush	{d8-d9}
 800cfac:	b0d9      	sub	sp, #356	; 0x164
 800cfae:	4688      	mov	r8, r1
 800cfb0:	9002      	str	r0, [sp, #8]
 800cfb2:	49bb      	ldr	r1, [pc, #748]	; (800d2a0 <__kernel_rem_pio2f+0x2fc>)
 800cfb4:	9866      	ldr	r0, [sp, #408]	; 0x198
 800cfb6:	9301      	str	r3, [sp, #4]
 800cfb8:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800cfbc:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800cfc0:	1e59      	subs	r1, r3, #1
 800cfc2:	1d13      	adds	r3, r2, #4
 800cfc4:	db27      	blt.n	800d016 <__kernel_rem_pio2f+0x72>
 800cfc6:	f1b2 0b03 	subs.w	fp, r2, #3
 800cfca:	bf48      	it	mi
 800cfcc:	f102 0b04 	addmi.w	fp, r2, #4
 800cfd0:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800cfd4:	1c45      	adds	r5, r0, #1
 800cfd6:	00ec      	lsls	r4, r5, #3
 800cfd8:	1a47      	subs	r7, r0, r1
 800cfda:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800d2b0 <__kernel_rem_pio2f+0x30c>
 800cfde:	9403      	str	r4, [sp, #12]
 800cfe0:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800cfe4:	eb0a 0c01 	add.w	ip, sl, r1
 800cfe8:	ae1c      	add	r6, sp, #112	; 0x70
 800cfea:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800cfee:	2400      	movs	r4, #0
 800cff0:	4564      	cmp	r4, ip
 800cff2:	dd12      	ble.n	800d01a <__kernel_rem_pio2f+0x76>
 800cff4:	9b01      	ldr	r3, [sp, #4]
 800cff6:	ac1c      	add	r4, sp, #112	; 0x70
 800cff8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800cffc:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800d000:	f04f 0c00 	mov.w	ip, #0
 800d004:	45d4      	cmp	ip, sl
 800d006:	dc27      	bgt.n	800d058 <__kernel_rem_pio2f+0xb4>
 800d008:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800d00c:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800d2b0 <__kernel_rem_pio2f+0x30c>
 800d010:	4627      	mov	r7, r4
 800d012:	2600      	movs	r6, #0
 800d014:	e016      	b.n	800d044 <__kernel_rem_pio2f+0xa0>
 800d016:	2000      	movs	r0, #0
 800d018:	e7dc      	b.n	800cfd4 <__kernel_rem_pio2f+0x30>
 800d01a:	42e7      	cmn	r7, r4
 800d01c:	bf5d      	ittte	pl
 800d01e:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800d022:	ee07 3a90 	vmovpl	s15, r3
 800d026:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800d02a:	eef0 7a47 	vmovmi.f32	s15, s14
 800d02e:	ece6 7a01 	vstmia	r6!, {s15}
 800d032:	3401      	adds	r4, #1
 800d034:	e7dc      	b.n	800cff0 <__kernel_rem_pio2f+0x4c>
 800d036:	ecf9 6a01 	vldmia	r9!, {s13}
 800d03a:	ed97 7a00 	vldr	s14, [r7]
 800d03e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d042:	3601      	adds	r6, #1
 800d044:	428e      	cmp	r6, r1
 800d046:	f1a7 0704 	sub.w	r7, r7, #4
 800d04a:	ddf4      	ble.n	800d036 <__kernel_rem_pio2f+0x92>
 800d04c:	eceb 7a01 	vstmia	fp!, {s15}
 800d050:	f10c 0c01 	add.w	ip, ip, #1
 800d054:	3404      	adds	r4, #4
 800d056:	e7d5      	b.n	800d004 <__kernel_rem_pio2f+0x60>
 800d058:	ab08      	add	r3, sp, #32
 800d05a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800d05e:	eddf 8a93 	vldr	s17, [pc, #588]	; 800d2ac <__kernel_rem_pio2f+0x308>
 800d062:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800d2a8 <__kernel_rem_pio2f+0x304>
 800d066:	9304      	str	r3, [sp, #16]
 800d068:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800d06c:	4656      	mov	r6, sl
 800d06e:	00b3      	lsls	r3, r6, #2
 800d070:	9305      	str	r3, [sp, #20]
 800d072:	ab58      	add	r3, sp, #352	; 0x160
 800d074:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800d078:	ac08      	add	r4, sp, #32
 800d07a:	ab44      	add	r3, sp, #272	; 0x110
 800d07c:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800d080:	46a4      	mov	ip, r4
 800d082:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800d086:	4637      	mov	r7, r6
 800d088:	2f00      	cmp	r7, #0
 800d08a:	f1a0 0004 	sub.w	r0, r0, #4
 800d08e:	dc4f      	bgt.n	800d130 <__kernel_rem_pio2f+0x18c>
 800d090:	4628      	mov	r0, r5
 800d092:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800d096:	f000 fa8d 	bl	800d5b4 <scalbnf>
 800d09a:	eeb0 8a40 	vmov.f32	s16, s0
 800d09e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800d0a2:	ee28 0a00 	vmul.f32	s0, s16, s0
 800d0a6:	f000 fa43 	bl	800d530 <floorf>
 800d0aa:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800d0ae:	eea0 8a67 	vfms.f32	s16, s0, s15
 800d0b2:	2d00      	cmp	r5, #0
 800d0b4:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800d0b8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800d0bc:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800d0c0:	ee17 9a90 	vmov	r9, s15
 800d0c4:	ee38 8a40 	vsub.f32	s16, s16, s0
 800d0c8:	dd44      	ble.n	800d154 <__kernel_rem_pio2f+0x1b0>
 800d0ca:	f106 3cff 	add.w	ip, r6, #4294967295
 800d0ce:	ab08      	add	r3, sp, #32
 800d0d0:	f1c5 0e08 	rsb	lr, r5, #8
 800d0d4:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800d0d8:	fa47 f00e 	asr.w	r0, r7, lr
 800d0dc:	4481      	add	r9, r0
 800d0de:	fa00 f00e 	lsl.w	r0, r0, lr
 800d0e2:	1a3f      	subs	r7, r7, r0
 800d0e4:	f1c5 0007 	rsb	r0, r5, #7
 800d0e8:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800d0ec:	4107      	asrs	r7, r0
 800d0ee:	2f00      	cmp	r7, #0
 800d0f0:	dd3f      	ble.n	800d172 <__kernel_rem_pio2f+0x1ce>
 800d0f2:	f04f 0e00 	mov.w	lr, #0
 800d0f6:	f109 0901 	add.w	r9, r9, #1
 800d0fa:	4673      	mov	r3, lr
 800d0fc:	4576      	cmp	r6, lr
 800d0fe:	dc6b      	bgt.n	800d1d8 <__kernel_rem_pio2f+0x234>
 800d100:	2d00      	cmp	r5, #0
 800d102:	dd04      	ble.n	800d10e <__kernel_rem_pio2f+0x16a>
 800d104:	2d01      	cmp	r5, #1
 800d106:	d078      	beq.n	800d1fa <__kernel_rem_pio2f+0x256>
 800d108:	2d02      	cmp	r5, #2
 800d10a:	f000 8081 	beq.w	800d210 <__kernel_rem_pio2f+0x26c>
 800d10e:	2f02      	cmp	r7, #2
 800d110:	d12f      	bne.n	800d172 <__kernel_rem_pio2f+0x1ce>
 800d112:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d116:	ee30 8a48 	vsub.f32	s16, s0, s16
 800d11a:	b353      	cbz	r3, 800d172 <__kernel_rem_pio2f+0x1ce>
 800d11c:	4628      	mov	r0, r5
 800d11e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800d122:	f000 fa47 	bl	800d5b4 <scalbnf>
 800d126:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800d12a:	ee38 8a40 	vsub.f32	s16, s16, s0
 800d12e:	e020      	b.n	800d172 <__kernel_rem_pio2f+0x1ce>
 800d130:	ee60 7a28 	vmul.f32	s15, s0, s17
 800d134:	3f01      	subs	r7, #1
 800d136:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d13a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d13e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800d142:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d146:	ecac 0a01 	vstmia	ip!, {s0}
 800d14a:	ed90 0a00 	vldr	s0, [r0]
 800d14e:	ee37 0a80 	vadd.f32	s0, s15, s0
 800d152:	e799      	b.n	800d088 <__kernel_rem_pio2f+0xe4>
 800d154:	d105      	bne.n	800d162 <__kernel_rem_pio2f+0x1be>
 800d156:	1e70      	subs	r0, r6, #1
 800d158:	ab08      	add	r3, sp, #32
 800d15a:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800d15e:	11ff      	asrs	r7, r7, #7
 800d160:	e7c5      	b.n	800d0ee <__kernel_rem_pio2f+0x14a>
 800d162:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d166:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d16a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d16e:	da31      	bge.n	800d1d4 <__kernel_rem_pio2f+0x230>
 800d170:	2700      	movs	r7, #0
 800d172:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d17a:	f040 809b 	bne.w	800d2b4 <__kernel_rem_pio2f+0x310>
 800d17e:	1e74      	subs	r4, r6, #1
 800d180:	46a4      	mov	ip, r4
 800d182:	2000      	movs	r0, #0
 800d184:	45d4      	cmp	ip, sl
 800d186:	da4a      	bge.n	800d21e <__kernel_rem_pio2f+0x27a>
 800d188:	2800      	cmp	r0, #0
 800d18a:	d07a      	beq.n	800d282 <__kernel_rem_pio2f+0x2de>
 800d18c:	ab08      	add	r3, sp, #32
 800d18e:	3d08      	subs	r5, #8
 800d190:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d194:	2b00      	cmp	r3, #0
 800d196:	f000 8081 	beq.w	800d29c <__kernel_rem_pio2f+0x2f8>
 800d19a:	4628      	mov	r0, r5
 800d19c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d1a0:	00a5      	lsls	r5, r4, #2
 800d1a2:	f000 fa07 	bl	800d5b4 <scalbnf>
 800d1a6:	aa44      	add	r2, sp, #272	; 0x110
 800d1a8:	1d2b      	adds	r3, r5, #4
 800d1aa:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800d2ac <__kernel_rem_pio2f+0x308>
 800d1ae:	18d1      	adds	r1, r2, r3
 800d1b0:	4622      	mov	r2, r4
 800d1b2:	2a00      	cmp	r2, #0
 800d1b4:	f280 80ae 	bge.w	800d314 <__kernel_rem_pio2f+0x370>
 800d1b8:	4622      	mov	r2, r4
 800d1ba:	2a00      	cmp	r2, #0
 800d1bc:	f2c0 80cc 	blt.w	800d358 <__kernel_rem_pio2f+0x3b4>
 800d1c0:	a944      	add	r1, sp, #272	; 0x110
 800d1c2:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800d1c6:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800d2a4 <__kernel_rem_pio2f+0x300>
 800d1ca:	eddf 7a39 	vldr	s15, [pc, #228]	; 800d2b0 <__kernel_rem_pio2f+0x30c>
 800d1ce:	2000      	movs	r0, #0
 800d1d0:	1aa1      	subs	r1, r4, r2
 800d1d2:	e0b6      	b.n	800d342 <__kernel_rem_pio2f+0x39e>
 800d1d4:	2702      	movs	r7, #2
 800d1d6:	e78c      	b.n	800d0f2 <__kernel_rem_pio2f+0x14e>
 800d1d8:	6820      	ldr	r0, [r4, #0]
 800d1da:	b94b      	cbnz	r3, 800d1f0 <__kernel_rem_pio2f+0x24c>
 800d1dc:	b118      	cbz	r0, 800d1e6 <__kernel_rem_pio2f+0x242>
 800d1de:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800d1e2:	6020      	str	r0, [r4, #0]
 800d1e4:	2001      	movs	r0, #1
 800d1e6:	f10e 0e01 	add.w	lr, lr, #1
 800d1ea:	3404      	adds	r4, #4
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	e785      	b.n	800d0fc <__kernel_rem_pio2f+0x158>
 800d1f0:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800d1f4:	6020      	str	r0, [r4, #0]
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	e7f5      	b.n	800d1e6 <__kernel_rem_pio2f+0x242>
 800d1fa:	1e74      	subs	r4, r6, #1
 800d1fc:	a808      	add	r0, sp, #32
 800d1fe:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800d202:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800d206:	f10d 0c20 	add.w	ip, sp, #32
 800d20a:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800d20e:	e77e      	b.n	800d10e <__kernel_rem_pio2f+0x16a>
 800d210:	1e74      	subs	r4, r6, #1
 800d212:	a808      	add	r0, sp, #32
 800d214:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800d218:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800d21c:	e7f3      	b.n	800d206 <__kernel_rem_pio2f+0x262>
 800d21e:	ab08      	add	r3, sp, #32
 800d220:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800d224:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d228:	4318      	orrs	r0, r3
 800d22a:	e7ab      	b.n	800d184 <__kernel_rem_pio2f+0x1e0>
 800d22c:	f10c 0c01 	add.w	ip, ip, #1
 800d230:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800d234:	2c00      	cmp	r4, #0
 800d236:	d0f9      	beq.n	800d22c <__kernel_rem_pio2f+0x288>
 800d238:	9b05      	ldr	r3, [sp, #20]
 800d23a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800d23e:	eb0d 0003 	add.w	r0, sp, r3
 800d242:	9b01      	ldr	r3, [sp, #4]
 800d244:	18f4      	adds	r4, r6, r3
 800d246:	ab1c      	add	r3, sp, #112	; 0x70
 800d248:	1c77      	adds	r7, r6, #1
 800d24a:	384c      	subs	r0, #76	; 0x4c
 800d24c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d250:	4466      	add	r6, ip
 800d252:	42be      	cmp	r6, r7
 800d254:	f6ff af0b 	blt.w	800d06e <__kernel_rem_pio2f+0xca>
 800d258:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800d25c:	f8dd e008 	ldr.w	lr, [sp, #8]
 800d260:	ee07 3a90 	vmov	s15, r3
 800d264:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d268:	f04f 0c00 	mov.w	ip, #0
 800d26c:	ece4 7a01 	vstmia	r4!, {s15}
 800d270:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800d2b0 <__kernel_rem_pio2f+0x30c>
 800d274:	46a1      	mov	r9, r4
 800d276:	458c      	cmp	ip, r1
 800d278:	dd07      	ble.n	800d28a <__kernel_rem_pio2f+0x2e6>
 800d27a:	ece0 7a01 	vstmia	r0!, {s15}
 800d27e:	3701      	adds	r7, #1
 800d280:	e7e7      	b.n	800d252 <__kernel_rem_pio2f+0x2ae>
 800d282:	9804      	ldr	r0, [sp, #16]
 800d284:	f04f 0c01 	mov.w	ip, #1
 800d288:	e7d2      	b.n	800d230 <__kernel_rem_pio2f+0x28c>
 800d28a:	ecfe 6a01 	vldmia	lr!, {s13}
 800d28e:	ed39 7a01 	vldmdb	r9!, {s14}
 800d292:	f10c 0c01 	add.w	ip, ip, #1
 800d296:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d29a:	e7ec      	b.n	800d276 <__kernel_rem_pio2f+0x2d2>
 800d29c:	3c01      	subs	r4, #1
 800d29e:	e775      	b.n	800d18c <__kernel_rem_pio2f+0x1e8>
 800d2a0:	0800e5e4 	.word	0x0800e5e4
 800d2a4:	0800e5b8 	.word	0x0800e5b8
 800d2a8:	43800000 	.word	0x43800000
 800d2ac:	3b800000 	.word	0x3b800000
 800d2b0:	00000000 	.word	0x00000000
 800d2b4:	9b03      	ldr	r3, [sp, #12]
 800d2b6:	eeb0 0a48 	vmov.f32	s0, s16
 800d2ba:	1a98      	subs	r0, r3, r2
 800d2bc:	f000 f97a 	bl	800d5b4 <scalbnf>
 800d2c0:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800d2a8 <__kernel_rem_pio2f+0x304>
 800d2c4:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800d2c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2cc:	db19      	blt.n	800d302 <__kernel_rem_pio2f+0x35e>
 800d2ce:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800d2ac <__kernel_rem_pio2f+0x308>
 800d2d2:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d2d6:	aa08      	add	r2, sp, #32
 800d2d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d2dc:	1c74      	adds	r4, r6, #1
 800d2de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d2e2:	3508      	adds	r5, #8
 800d2e4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800d2e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d2ec:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d2f0:	ee10 3a10 	vmov	r3, s0
 800d2f4:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800d2f8:	ee17 3a90 	vmov	r3, s15
 800d2fc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800d300:	e74b      	b.n	800d19a <__kernel_rem_pio2f+0x1f6>
 800d302:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d306:	aa08      	add	r2, sp, #32
 800d308:	ee10 3a10 	vmov	r3, s0
 800d30c:	4634      	mov	r4, r6
 800d30e:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800d312:	e742      	b.n	800d19a <__kernel_rem_pio2f+0x1f6>
 800d314:	a808      	add	r0, sp, #32
 800d316:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800d31a:	9001      	str	r0, [sp, #4]
 800d31c:	ee07 0a90 	vmov	s15, r0
 800d320:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d324:	3a01      	subs	r2, #1
 800d326:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d32a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800d32e:	ed61 7a01 	vstmdb	r1!, {s15}
 800d332:	e73e      	b.n	800d1b2 <__kernel_rem_pio2f+0x20e>
 800d334:	ecfc 6a01 	vldmia	ip!, {s13}
 800d338:	ecb6 7a01 	vldmia	r6!, {s14}
 800d33c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d340:	3001      	adds	r0, #1
 800d342:	4550      	cmp	r0, sl
 800d344:	dc01      	bgt.n	800d34a <__kernel_rem_pio2f+0x3a6>
 800d346:	4288      	cmp	r0, r1
 800d348:	ddf4      	ble.n	800d334 <__kernel_rem_pio2f+0x390>
 800d34a:	a858      	add	r0, sp, #352	; 0x160
 800d34c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d350:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800d354:	3a01      	subs	r2, #1
 800d356:	e730      	b.n	800d1ba <__kernel_rem_pio2f+0x216>
 800d358:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800d35a:	2a02      	cmp	r2, #2
 800d35c:	dc09      	bgt.n	800d372 <__kernel_rem_pio2f+0x3ce>
 800d35e:	2a00      	cmp	r2, #0
 800d360:	dc2a      	bgt.n	800d3b8 <__kernel_rem_pio2f+0x414>
 800d362:	d043      	beq.n	800d3ec <__kernel_rem_pio2f+0x448>
 800d364:	f009 0007 	and.w	r0, r9, #7
 800d368:	b059      	add	sp, #356	; 0x164
 800d36a:	ecbd 8b04 	vpop	{d8-d9}
 800d36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d372:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800d374:	2b03      	cmp	r3, #3
 800d376:	d1f5      	bne.n	800d364 <__kernel_rem_pio2f+0x3c0>
 800d378:	ab30      	add	r3, sp, #192	; 0xc0
 800d37a:	442b      	add	r3, r5
 800d37c:	461a      	mov	r2, r3
 800d37e:	4619      	mov	r1, r3
 800d380:	4620      	mov	r0, r4
 800d382:	2800      	cmp	r0, #0
 800d384:	f1a1 0104 	sub.w	r1, r1, #4
 800d388:	dc51      	bgt.n	800d42e <__kernel_rem_pio2f+0x48a>
 800d38a:	4621      	mov	r1, r4
 800d38c:	2901      	cmp	r1, #1
 800d38e:	f1a2 0204 	sub.w	r2, r2, #4
 800d392:	dc5c      	bgt.n	800d44e <__kernel_rem_pio2f+0x4aa>
 800d394:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800d2b0 <__kernel_rem_pio2f+0x30c>
 800d398:	3304      	adds	r3, #4
 800d39a:	2c01      	cmp	r4, #1
 800d39c:	dc67      	bgt.n	800d46e <__kernel_rem_pio2f+0x4ca>
 800d39e:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800d3a2:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800d3a6:	2f00      	cmp	r7, #0
 800d3a8:	d167      	bne.n	800d47a <__kernel_rem_pio2f+0x4d6>
 800d3aa:	edc8 6a00 	vstr	s13, [r8]
 800d3ae:	ed88 7a01 	vstr	s14, [r8, #4]
 800d3b2:	edc8 7a02 	vstr	s15, [r8, #8]
 800d3b6:	e7d5      	b.n	800d364 <__kernel_rem_pio2f+0x3c0>
 800d3b8:	aa30      	add	r2, sp, #192	; 0xc0
 800d3ba:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800d2b0 <__kernel_rem_pio2f+0x30c>
 800d3be:	4413      	add	r3, r2
 800d3c0:	4622      	mov	r2, r4
 800d3c2:	2a00      	cmp	r2, #0
 800d3c4:	da24      	bge.n	800d410 <__kernel_rem_pio2f+0x46c>
 800d3c6:	b34f      	cbz	r7, 800d41c <__kernel_rem_pio2f+0x478>
 800d3c8:	eef1 7a47 	vneg.f32	s15, s14
 800d3cc:	edc8 7a00 	vstr	s15, [r8]
 800d3d0:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800d3d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d3d8:	aa31      	add	r2, sp, #196	; 0xc4
 800d3da:	2301      	movs	r3, #1
 800d3dc:	429c      	cmp	r4, r3
 800d3de:	da20      	bge.n	800d422 <__kernel_rem_pio2f+0x47e>
 800d3e0:	b10f      	cbz	r7, 800d3e6 <__kernel_rem_pio2f+0x442>
 800d3e2:	eef1 7a67 	vneg.f32	s15, s15
 800d3e6:	edc8 7a01 	vstr	s15, [r8, #4]
 800d3ea:	e7bb      	b.n	800d364 <__kernel_rem_pio2f+0x3c0>
 800d3ec:	aa30      	add	r2, sp, #192	; 0xc0
 800d3ee:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800d2b0 <__kernel_rem_pio2f+0x30c>
 800d3f2:	4413      	add	r3, r2
 800d3f4:	2c00      	cmp	r4, #0
 800d3f6:	da05      	bge.n	800d404 <__kernel_rem_pio2f+0x460>
 800d3f8:	b10f      	cbz	r7, 800d3fe <__kernel_rem_pio2f+0x45a>
 800d3fa:	eef1 7a67 	vneg.f32	s15, s15
 800d3fe:	edc8 7a00 	vstr	s15, [r8]
 800d402:	e7af      	b.n	800d364 <__kernel_rem_pio2f+0x3c0>
 800d404:	ed33 7a01 	vldmdb	r3!, {s14}
 800d408:	3c01      	subs	r4, #1
 800d40a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d40e:	e7f1      	b.n	800d3f4 <__kernel_rem_pio2f+0x450>
 800d410:	ed73 7a01 	vldmdb	r3!, {s15}
 800d414:	3a01      	subs	r2, #1
 800d416:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d41a:	e7d2      	b.n	800d3c2 <__kernel_rem_pio2f+0x41e>
 800d41c:	eef0 7a47 	vmov.f32	s15, s14
 800d420:	e7d4      	b.n	800d3cc <__kernel_rem_pio2f+0x428>
 800d422:	ecb2 7a01 	vldmia	r2!, {s14}
 800d426:	3301      	adds	r3, #1
 800d428:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d42c:	e7d6      	b.n	800d3dc <__kernel_rem_pio2f+0x438>
 800d42e:	edd1 7a00 	vldr	s15, [r1]
 800d432:	edd1 6a01 	vldr	s13, [r1, #4]
 800d436:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d43a:	3801      	subs	r0, #1
 800d43c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d440:	ed81 7a00 	vstr	s14, [r1]
 800d444:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d448:	edc1 7a01 	vstr	s15, [r1, #4]
 800d44c:	e799      	b.n	800d382 <__kernel_rem_pio2f+0x3de>
 800d44e:	edd2 7a00 	vldr	s15, [r2]
 800d452:	edd2 6a01 	vldr	s13, [r2, #4]
 800d456:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d45a:	3901      	subs	r1, #1
 800d45c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d460:	ed82 7a00 	vstr	s14, [r2]
 800d464:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d468:	edc2 7a01 	vstr	s15, [r2, #4]
 800d46c:	e78e      	b.n	800d38c <__kernel_rem_pio2f+0x3e8>
 800d46e:	ed33 7a01 	vldmdb	r3!, {s14}
 800d472:	3c01      	subs	r4, #1
 800d474:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d478:	e78f      	b.n	800d39a <__kernel_rem_pio2f+0x3f6>
 800d47a:	eef1 6a66 	vneg.f32	s13, s13
 800d47e:	eeb1 7a47 	vneg.f32	s14, s14
 800d482:	edc8 6a00 	vstr	s13, [r8]
 800d486:	ed88 7a01 	vstr	s14, [r8, #4]
 800d48a:	eef1 7a67 	vneg.f32	s15, s15
 800d48e:	e790      	b.n	800d3b2 <__kernel_rem_pio2f+0x40e>

0800d490 <__kernel_sinf>:
 800d490:	ee10 3a10 	vmov	r3, s0
 800d494:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d498:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800d49c:	da04      	bge.n	800d4a8 <__kernel_sinf+0x18>
 800d49e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800d4a2:	ee17 3a90 	vmov	r3, s15
 800d4a6:	b35b      	cbz	r3, 800d500 <__kernel_sinf+0x70>
 800d4a8:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d4ac:	eddf 7a15 	vldr	s15, [pc, #84]	; 800d504 <__kernel_sinf+0x74>
 800d4b0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800d508 <__kernel_sinf+0x78>
 800d4b4:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d4b8:	eddf 7a14 	vldr	s15, [pc, #80]	; 800d50c <__kernel_sinf+0x7c>
 800d4bc:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d4c0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800d510 <__kernel_sinf+0x80>
 800d4c4:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d4c8:	eddf 7a12 	vldr	s15, [pc, #72]	; 800d514 <__kernel_sinf+0x84>
 800d4cc:	ee60 6a07 	vmul.f32	s13, s0, s14
 800d4d0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d4d4:	b930      	cbnz	r0, 800d4e4 <__kernel_sinf+0x54>
 800d4d6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800d518 <__kernel_sinf+0x88>
 800d4da:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d4de:	eea6 0a26 	vfma.f32	s0, s12, s13
 800d4e2:	4770      	bx	lr
 800d4e4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800d4e8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800d4ec:	eee0 7a86 	vfma.f32	s15, s1, s12
 800d4f0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800d4f4:	eddf 7a09 	vldr	s15, [pc, #36]	; 800d51c <__kernel_sinf+0x8c>
 800d4f8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800d4fc:	ee30 0a60 	vsub.f32	s0, s0, s1
 800d500:	4770      	bx	lr
 800d502:	bf00      	nop
 800d504:	2f2ec9d3 	.word	0x2f2ec9d3
 800d508:	b2d72f34 	.word	0xb2d72f34
 800d50c:	3638ef1b 	.word	0x3638ef1b
 800d510:	b9500d01 	.word	0xb9500d01
 800d514:	3c088889 	.word	0x3c088889
 800d518:	be2aaaab 	.word	0xbe2aaaab
 800d51c:	3e2aaaab 	.word	0x3e2aaaab

0800d520 <fabsf>:
 800d520:	ee10 3a10 	vmov	r3, s0
 800d524:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d528:	ee00 3a10 	vmov	s0, r3
 800d52c:	4770      	bx	lr
	...

0800d530 <floorf>:
 800d530:	ee10 3a10 	vmov	r3, s0
 800d534:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d538:	3a7f      	subs	r2, #127	; 0x7f
 800d53a:	2a16      	cmp	r2, #22
 800d53c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d540:	dc2a      	bgt.n	800d598 <floorf+0x68>
 800d542:	2a00      	cmp	r2, #0
 800d544:	da11      	bge.n	800d56a <floorf+0x3a>
 800d546:	eddf 7a18 	vldr	s15, [pc, #96]	; 800d5a8 <floorf+0x78>
 800d54a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d54e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d556:	dd05      	ble.n	800d564 <floorf+0x34>
 800d558:	2b00      	cmp	r3, #0
 800d55a:	da23      	bge.n	800d5a4 <floorf+0x74>
 800d55c:	4a13      	ldr	r2, [pc, #76]	; (800d5ac <floorf+0x7c>)
 800d55e:	2900      	cmp	r1, #0
 800d560:	bf18      	it	ne
 800d562:	4613      	movne	r3, r2
 800d564:	ee00 3a10 	vmov	s0, r3
 800d568:	4770      	bx	lr
 800d56a:	4911      	ldr	r1, [pc, #68]	; (800d5b0 <floorf+0x80>)
 800d56c:	4111      	asrs	r1, r2
 800d56e:	420b      	tst	r3, r1
 800d570:	d0fa      	beq.n	800d568 <floorf+0x38>
 800d572:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800d5a8 <floorf+0x78>
 800d576:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d57a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d57e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d582:	ddef      	ble.n	800d564 <floorf+0x34>
 800d584:	2b00      	cmp	r3, #0
 800d586:	bfbe      	ittt	lt
 800d588:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800d58c:	fa40 f202 	asrlt.w	r2, r0, r2
 800d590:	189b      	addlt	r3, r3, r2
 800d592:	ea23 0301 	bic.w	r3, r3, r1
 800d596:	e7e5      	b.n	800d564 <floorf+0x34>
 800d598:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800d59c:	d3e4      	bcc.n	800d568 <floorf+0x38>
 800d59e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d5a2:	4770      	bx	lr
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	e7dd      	b.n	800d564 <floorf+0x34>
 800d5a8:	7149f2ca 	.word	0x7149f2ca
 800d5ac:	bf800000 	.word	0xbf800000
 800d5b0:	007fffff 	.word	0x007fffff

0800d5b4 <scalbnf>:
 800d5b4:	ee10 3a10 	vmov	r3, s0
 800d5b8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800d5bc:	d025      	beq.n	800d60a <scalbnf+0x56>
 800d5be:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800d5c2:	d302      	bcc.n	800d5ca <scalbnf+0x16>
 800d5c4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d5c8:	4770      	bx	lr
 800d5ca:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800d5ce:	d122      	bne.n	800d616 <scalbnf+0x62>
 800d5d0:	4b2a      	ldr	r3, [pc, #168]	; (800d67c <scalbnf+0xc8>)
 800d5d2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800d680 <scalbnf+0xcc>
 800d5d6:	4298      	cmp	r0, r3
 800d5d8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d5dc:	db16      	blt.n	800d60c <scalbnf+0x58>
 800d5de:	ee10 3a10 	vmov	r3, s0
 800d5e2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d5e6:	3a19      	subs	r2, #25
 800d5e8:	4402      	add	r2, r0
 800d5ea:	2afe      	cmp	r2, #254	; 0xfe
 800d5ec:	dd15      	ble.n	800d61a <scalbnf+0x66>
 800d5ee:	ee10 3a10 	vmov	r3, s0
 800d5f2:	eddf 7a24 	vldr	s15, [pc, #144]	; 800d684 <scalbnf+0xd0>
 800d5f6:	eddf 6a24 	vldr	s13, [pc, #144]	; 800d688 <scalbnf+0xd4>
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	eeb0 7a67 	vmov.f32	s14, s15
 800d600:	bfb8      	it	lt
 800d602:	eef0 7a66 	vmovlt.f32	s15, s13
 800d606:	ee27 0a27 	vmul.f32	s0, s14, s15
 800d60a:	4770      	bx	lr
 800d60c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800d68c <scalbnf+0xd8>
 800d610:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d614:	4770      	bx	lr
 800d616:	0dd2      	lsrs	r2, r2, #23
 800d618:	e7e6      	b.n	800d5e8 <scalbnf+0x34>
 800d61a:	2a00      	cmp	r2, #0
 800d61c:	dd06      	ble.n	800d62c <scalbnf+0x78>
 800d61e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d622:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800d626:	ee00 3a10 	vmov	s0, r3
 800d62a:	4770      	bx	lr
 800d62c:	f112 0f16 	cmn.w	r2, #22
 800d630:	da1a      	bge.n	800d668 <scalbnf+0xb4>
 800d632:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d636:	4298      	cmp	r0, r3
 800d638:	ee10 3a10 	vmov	r3, s0
 800d63c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d640:	dd0a      	ble.n	800d658 <scalbnf+0xa4>
 800d642:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800d684 <scalbnf+0xd0>
 800d646:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800d688 <scalbnf+0xd4>
 800d64a:	eef0 7a40 	vmov.f32	s15, s0
 800d64e:	2b00      	cmp	r3, #0
 800d650:	bf18      	it	ne
 800d652:	eeb0 0a47 	vmovne.f32	s0, s14
 800d656:	e7db      	b.n	800d610 <scalbnf+0x5c>
 800d658:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800d68c <scalbnf+0xd8>
 800d65c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800d690 <scalbnf+0xdc>
 800d660:	eef0 7a40 	vmov.f32	s15, s0
 800d664:	2b00      	cmp	r3, #0
 800d666:	e7f3      	b.n	800d650 <scalbnf+0x9c>
 800d668:	3219      	adds	r2, #25
 800d66a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d66e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800d672:	eddf 7a08 	vldr	s15, [pc, #32]	; 800d694 <scalbnf+0xe0>
 800d676:	ee07 3a10 	vmov	s14, r3
 800d67a:	e7c4      	b.n	800d606 <scalbnf+0x52>
 800d67c:	ffff3cb0 	.word	0xffff3cb0
 800d680:	4c000000 	.word	0x4c000000
 800d684:	7149f2ca 	.word	0x7149f2ca
 800d688:	f149f2ca 	.word	0xf149f2ca
 800d68c:	0da24260 	.word	0x0da24260
 800d690:	8da24260 	.word	0x8da24260
 800d694:	33000000 	.word	0x33000000

0800d698 <abort>:
 800d698:	b508      	push	{r3, lr}
 800d69a:	2006      	movs	r0, #6
 800d69c:	f000 f984 	bl	800d9a8 <raise>
 800d6a0:	2001      	movs	r0, #1
 800d6a2:	f7f9 f85f 	bl	8006764 <_exit>
	...

0800d6a8 <__errno>:
 800d6a8:	4b01      	ldr	r3, [pc, #4]	; (800d6b0 <__errno+0x8>)
 800d6aa:	6818      	ldr	r0, [r3, #0]
 800d6ac:	4770      	bx	lr
 800d6ae:	bf00      	nop
 800d6b0:	20000038 	.word	0x20000038

0800d6b4 <__libc_init_array>:
 800d6b4:	b570      	push	{r4, r5, r6, lr}
 800d6b6:	4d0d      	ldr	r5, [pc, #52]	; (800d6ec <__libc_init_array+0x38>)
 800d6b8:	4c0d      	ldr	r4, [pc, #52]	; (800d6f0 <__libc_init_array+0x3c>)
 800d6ba:	1b64      	subs	r4, r4, r5
 800d6bc:	10a4      	asrs	r4, r4, #2
 800d6be:	2600      	movs	r6, #0
 800d6c0:	42a6      	cmp	r6, r4
 800d6c2:	d109      	bne.n	800d6d8 <__libc_init_array+0x24>
 800d6c4:	4d0b      	ldr	r5, [pc, #44]	; (800d6f4 <__libc_init_array+0x40>)
 800d6c6:	4c0c      	ldr	r4, [pc, #48]	; (800d6f8 <__libc_init_array+0x44>)
 800d6c8:	f000 fa1a 	bl	800db00 <_init>
 800d6cc:	1b64      	subs	r4, r4, r5
 800d6ce:	10a4      	asrs	r4, r4, #2
 800d6d0:	2600      	movs	r6, #0
 800d6d2:	42a6      	cmp	r6, r4
 800d6d4:	d105      	bne.n	800d6e2 <__libc_init_array+0x2e>
 800d6d6:	bd70      	pop	{r4, r5, r6, pc}
 800d6d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d6dc:	4798      	blx	r3
 800d6de:	3601      	adds	r6, #1
 800d6e0:	e7ee      	b.n	800d6c0 <__libc_init_array+0xc>
 800d6e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d6e6:	4798      	blx	r3
 800d6e8:	3601      	adds	r6, #1
 800d6ea:	e7f2      	b.n	800d6d2 <__libc_init_array+0x1e>
 800d6ec:	0800e658 	.word	0x0800e658
 800d6f0:	0800e658 	.word	0x0800e658
 800d6f4:	0800e658 	.word	0x0800e658
 800d6f8:	0800e664 	.word	0x0800e664

0800d6fc <__retarget_lock_acquire_recursive>:
 800d6fc:	4770      	bx	lr

0800d6fe <__retarget_lock_release_recursive>:
 800d6fe:	4770      	bx	lr

0800d700 <memcpy>:
 800d700:	440a      	add	r2, r1
 800d702:	4291      	cmp	r1, r2
 800d704:	f100 33ff 	add.w	r3, r0, #4294967295
 800d708:	d100      	bne.n	800d70c <memcpy+0xc>
 800d70a:	4770      	bx	lr
 800d70c:	b510      	push	{r4, lr}
 800d70e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d712:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d716:	4291      	cmp	r1, r2
 800d718:	d1f9      	bne.n	800d70e <memcpy+0xe>
 800d71a:	bd10      	pop	{r4, pc}

0800d71c <memset>:
 800d71c:	4402      	add	r2, r0
 800d71e:	4603      	mov	r3, r0
 800d720:	4293      	cmp	r3, r2
 800d722:	d100      	bne.n	800d726 <memset+0xa>
 800d724:	4770      	bx	lr
 800d726:	f803 1b01 	strb.w	r1, [r3], #1
 800d72a:	e7f9      	b.n	800d720 <memset+0x4>

0800d72c <sbrk_aligned>:
 800d72c:	b570      	push	{r4, r5, r6, lr}
 800d72e:	4e0e      	ldr	r6, [pc, #56]	; (800d768 <sbrk_aligned+0x3c>)
 800d730:	460c      	mov	r4, r1
 800d732:	6831      	ldr	r1, [r6, #0]
 800d734:	4605      	mov	r5, r0
 800d736:	b911      	cbnz	r1, 800d73e <sbrk_aligned+0x12>
 800d738:	f000 f8fe 	bl	800d938 <_sbrk_r>
 800d73c:	6030      	str	r0, [r6, #0]
 800d73e:	4621      	mov	r1, r4
 800d740:	4628      	mov	r0, r5
 800d742:	f000 f8f9 	bl	800d938 <_sbrk_r>
 800d746:	1c43      	adds	r3, r0, #1
 800d748:	d00a      	beq.n	800d760 <sbrk_aligned+0x34>
 800d74a:	1cc4      	adds	r4, r0, #3
 800d74c:	f024 0403 	bic.w	r4, r4, #3
 800d750:	42a0      	cmp	r0, r4
 800d752:	d007      	beq.n	800d764 <sbrk_aligned+0x38>
 800d754:	1a21      	subs	r1, r4, r0
 800d756:	4628      	mov	r0, r5
 800d758:	f000 f8ee 	bl	800d938 <_sbrk_r>
 800d75c:	3001      	adds	r0, #1
 800d75e:	d101      	bne.n	800d764 <sbrk_aligned+0x38>
 800d760:	f04f 34ff 	mov.w	r4, #4294967295
 800d764:	4620      	mov	r0, r4
 800d766:	bd70      	pop	{r4, r5, r6, pc}
 800d768:	20006cbc 	.word	0x20006cbc

0800d76c <_malloc_r>:
 800d76c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d770:	1ccd      	adds	r5, r1, #3
 800d772:	f025 0503 	bic.w	r5, r5, #3
 800d776:	3508      	adds	r5, #8
 800d778:	2d0c      	cmp	r5, #12
 800d77a:	bf38      	it	cc
 800d77c:	250c      	movcc	r5, #12
 800d77e:	2d00      	cmp	r5, #0
 800d780:	4607      	mov	r7, r0
 800d782:	db01      	blt.n	800d788 <_malloc_r+0x1c>
 800d784:	42a9      	cmp	r1, r5
 800d786:	d905      	bls.n	800d794 <_malloc_r+0x28>
 800d788:	230c      	movs	r3, #12
 800d78a:	603b      	str	r3, [r7, #0]
 800d78c:	2600      	movs	r6, #0
 800d78e:	4630      	mov	r0, r6
 800d790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d794:	4e2e      	ldr	r6, [pc, #184]	; (800d850 <_malloc_r+0xe4>)
 800d796:	f000 f923 	bl	800d9e0 <__malloc_lock>
 800d79a:	6833      	ldr	r3, [r6, #0]
 800d79c:	461c      	mov	r4, r3
 800d79e:	bb34      	cbnz	r4, 800d7ee <_malloc_r+0x82>
 800d7a0:	4629      	mov	r1, r5
 800d7a2:	4638      	mov	r0, r7
 800d7a4:	f7ff ffc2 	bl	800d72c <sbrk_aligned>
 800d7a8:	1c43      	adds	r3, r0, #1
 800d7aa:	4604      	mov	r4, r0
 800d7ac:	d14d      	bne.n	800d84a <_malloc_r+0xde>
 800d7ae:	6834      	ldr	r4, [r6, #0]
 800d7b0:	4626      	mov	r6, r4
 800d7b2:	2e00      	cmp	r6, #0
 800d7b4:	d140      	bne.n	800d838 <_malloc_r+0xcc>
 800d7b6:	6823      	ldr	r3, [r4, #0]
 800d7b8:	4631      	mov	r1, r6
 800d7ba:	4638      	mov	r0, r7
 800d7bc:	eb04 0803 	add.w	r8, r4, r3
 800d7c0:	f000 f8ba 	bl	800d938 <_sbrk_r>
 800d7c4:	4580      	cmp	r8, r0
 800d7c6:	d13a      	bne.n	800d83e <_malloc_r+0xd2>
 800d7c8:	6821      	ldr	r1, [r4, #0]
 800d7ca:	3503      	adds	r5, #3
 800d7cc:	1a6d      	subs	r5, r5, r1
 800d7ce:	f025 0503 	bic.w	r5, r5, #3
 800d7d2:	3508      	adds	r5, #8
 800d7d4:	2d0c      	cmp	r5, #12
 800d7d6:	bf38      	it	cc
 800d7d8:	250c      	movcc	r5, #12
 800d7da:	4629      	mov	r1, r5
 800d7dc:	4638      	mov	r0, r7
 800d7de:	f7ff ffa5 	bl	800d72c <sbrk_aligned>
 800d7e2:	3001      	adds	r0, #1
 800d7e4:	d02b      	beq.n	800d83e <_malloc_r+0xd2>
 800d7e6:	6823      	ldr	r3, [r4, #0]
 800d7e8:	442b      	add	r3, r5
 800d7ea:	6023      	str	r3, [r4, #0]
 800d7ec:	e00e      	b.n	800d80c <_malloc_r+0xa0>
 800d7ee:	6822      	ldr	r2, [r4, #0]
 800d7f0:	1b52      	subs	r2, r2, r5
 800d7f2:	d41e      	bmi.n	800d832 <_malloc_r+0xc6>
 800d7f4:	2a0b      	cmp	r2, #11
 800d7f6:	d916      	bls.n	800d826 <_malloc_r+0xba>
 800d7f8:	1961      	adds	r1, r4, r5
 800d7fa:	42a3      	cmp	r3, r4
 800d7fc:	6025      	str	r5, [r4, #0]
 800d7fe:	bf18      	it	ne
 800d800:	6059      	strne	r1, [r3, #4]
 800d802:	6863      	ldr	r3, [r4, #4]
 800d804:	bf08      	it	eq
 800d806:	6031      	streq	r1, [r6, #0]
 800d808:	5162      	str	r2, [r4, r5]
 800d80a:	604b      	str	r3, [r1, #4]
 800d80c:	4638      	mov	r0, r7
 800d80e:	f104 060b 	add.w	r6, r4, #11
 800d812:	f000 f8eb 	bl	800d9ec <__malloc_unlock>
 800d816:	f026 0607 	bic.w	r6, r6, #7
 800d81a:	1d23      	adds	r3, r4, #4
 800d81c:	1af2      	subs	r2, r6, r3
 800d81e:	d0b6      	beq.n	800d78e <_malloc_r+0x22>
 800d820:	1b9b      	subs	r3, r3, r6
 800d822:	50a3      	str	r3, [r4, r2]
 800d824:	e7b3      	b.n	800d78e <_malloc_r+0x22>
 800d826:	6862      	ldr	r2, [r4, #4]
 800d828:	42a3      	cmp	r3, r4
 800d82a:	bf0c      	ite	eq
 800d82c:	6032      	streq	r2, [r6, #0]
 800d82e:	605a      	strne	r2, [r3, #4]
 800d830:	e7ec      	b.n	800d80c <_malloc_r+0xa0>
 800d832:	4623      	mov	r3, r4
 800d834:	6864      	ldr	r4, [r4, #4]
 800d836:	e7b2      	b.n	800d79e <_malloc_r+0x32>
 800d838:	4634      	mov	r4, r6
 800d83a:	6876      	ldr	r6, [r6, #4]
 800d83c:	e7b9      	b.n	800d7b2 <_malloc_r+0x46>
 800d83e:	230c      	movs	r3, #12
 800d840:	603b      	str	r3, [r7, #0]
 800d842:	4638      	mov	r0, r7
 800d844:	f000 f8d2 	bl	800d9ec <__malloc_unlock>
 800d848:	e7a1      	b.n	800d78e <_malloc_r+0x22>
 800d84a:	6025      	str	r5, [r4, #0]
 800d84c:	e7de      	b.n	800d80c <_malloc_r+0xa0>
 800d84e:	bf00      	nop
 800d850:	20006cb8 	.word	0x20006cb8

0800d854 <realloc>:
 800d854:	4b02      	ldr	r3, [pc, #8]	; (800d860 <realloc+0xc>)
 800d856:	460a      	mov	r2, r1
 800d858:	4601      	mov	r1, r0
 800d85a:	6818      	ldr	r0, [r3, #0]
 800d85c:	f000 b918 	b.w	800da90 <_realloc_r>
 800d860:	20000038 	.word	0x20000038

0800d864 <cleanup_glue>:
 800d864:	b538      	push	{r3, r4, r5, lr}
 800d866:	460c      	mov	r4, r1
 800d868:	6809      	ldr	r1, [r1, #0]
 800d86a:	4605      	mov	r5, r0
 800d86c:	b109      	cbz	r1, 800d872 <cleanup_glue+0xe>
 800d86e:	f7ff fff9 	bl	800d864 <cleanup_glue>
 800d872:	4621      	mov	r1, r4
 800d874:	4628      	mov	r0, r5
 800d876:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d87a:	f000 b8bd 	b.w	800d9f8 <_free_r>
	...

0800d880 <_reclaim_reent>:
 800d880:	4b2c      	ldr	r3, [pc, #176]	; (800d934 <_reclaim_reent+0xb4>)
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	4283      	cmp	r3, r0
 800d886:	b570      	push	{r4, r5, r6, lr}
 800d888:	4604      	mov	r4, r0
 800d88a:	d051      	beq.n	800d930 <_reclaim_reent+0xb0>
 800d88c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d88e:	b143      	cbz	r3, 800d8a2 <_reclaim_reent+0x22>
 800d890:	68db      	ldr	r3, [r3, #12]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d14a      	bne.n	800d92c <_reclaim_reent+0xac>
 800d896:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d898:	6819      	ldr	r1, [r3, #0]
 800d89a:	b111      	cbz	r1, 800d8a2 <_reclaim_reent+0x22>
 800d89c:	4620      	mov	r0, r4
 800d89e:	f000 f8ab 	bl	800d9f8 <_free_r>
 800d8a2:	6961      	ldr	r1, [r4, #20]
 800d8a4:	b111      	cbz	r1, 800d8ac <_reclaim_reent+0x2c>
 800d8a6:	4620      	mov	r0, r4
 800d8a8:	f000 f8a6 	bl	800d9f8 <_free_r>
 800d8ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d8ae:	b111      	cbz	r1, 800d8b6 <_reclaim_reent+0x36>
 800d8b0:	4620      	mov	r0, r4
 800d8b2:	f000 f8a1 	bl	800d9f8 <_free_r>
 800d8b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d8b8:	b111      	cbz	r1, 800d8c0 <_reclaim_reent+0x40>
 800d8ba:	4620      	mov	r0, r4
 800d8bc:	f000 f89c 	bl	800d9f8 <_free_r>
 800d8c0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d8c2:	b111      	cbz	r1, 800d8ca <_reclaim_reent+0x4a>
 800d8c4:	4620      	mov	r0, r4
 800d8c6:	f000 f897 	bl	800d9f8 <_free_r>
 800d8ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d8cc:	b111      	cbz	r1, 800d8d4 <_reclaim_reent+0x54>
 800d8ce:	4620      	mov	r0, r4
 800d8d0:	f000 f892 	bl	800d9f8 <_free_r>
 800d8d4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d8d6:	b111      	cbz	r1, 800d8de <_reclaim_reent+0x5e>
 800d8d8:	4620      	mov	r0, r4
 800d8da:	f000 f88d 	bl	800d9f8 <_free_r>
 800d8de:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d8e0:	b111      	cbz	r1, 800d8e8 <_reclaim_reent+0x68>
 800d8e2:	4620      	mov	r0, r4
 800d8e4:	f000 f888 	bl	800d9f8 <_free_r>
 800d8e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d8ea:	b111      	cbz	r1, 800d8f2 <_reclaim_reent+0x72>
 800d8ec:	4620      	mov	r0, r4
 800d8ee:	f000 f883 	bl	800d9f8 <_free_r>
 800d8f2:	69a3      	ldr	r3, [r4, #24]
 800d8f4:	b1e3      	cbz	r3, 800d930 <_reclaim_reent+0xb0>
 800d8f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d8f8:	4620      	mov	r0, r4
 800d8fa:	4798      	blx	r3
 800d8fc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d8fe:	b1b9      	cbz	r1, 800d930 <_reclaim_reent+0xb0>
 800d900:	4620      	mov	r0, r4
 800d902:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d906:	f7ff bfad 	b.w	800d864 <cleanup_glue>
 800d90a:	5949      	ldr	r1, [r1, r5]
 800d90c:	b941      	cbnz	r1, 800d920 <_reclaim_reent+0xa0>
 800d90e:	3504      	adds	r5, #4
 800d910:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d912:	2d80      	cmp	r5, #128	; 0x80
 800d914:	68d9      	ldr	r1, [r3, #12]
 800d916:	d1f8      	bne.n	800d90a <_reclaim_reent+0x8a>
 800d918:	4620      	mov	r0, r4
 800d91a:	f000 f86d 	bl	800d9f8 <_free_r>
 800d91e:	e7ba      	b.n	800d896 <_reclaim_reent+0x16>
 800d920:	680e      	ldr	r6, [r1, #0]
 800d922:	4620      	mov	r0, r4
 800d924:	f000 f868 	bl	800d9f8 <_free_r>
 800d928:	4631      	mov	r1, r6
 800d92a:	e7ef      	b.n	800d90c <_reclaim_reent+0x8c>
 800d92c:	2500      	movs	r5, #0
 800d92e:	e7ef      	b.n	800d910 <_reclaim_reent+0x90>
 800d930:	bd70      	pop	{r4, r5, r6, pc}
 800d932:	bf00      	nop
 800d934:	20000038 	.word	0x20000038

0800d938 <_sbrk_r>:
 800d938:	b538      	push	{r3, r4, r5, lr}
 800d93a:	4d06      	ldr	r5, [pc, #24]	; (800d954 <_sbrk_r+0x1c>)
 800d93c:	2300      	movs	r3, #0
 800d93e:	4604      	mov	r4, r0
 800d940:	4608      	mov	r0, r1
 800d942:	602b      	str	r3, [r5, #0]
 800d944:	f7f8 ff18 	bl	8006778 <_sbrk>
 800d948:	1c43      	adds	r3, r0, #1
 800d94a:	d102      	bne.n	800d952 <_sbrk_r+0x1a>
 800d94c:	682b      	ldr	r3, [r5, #0]
 800d94e:	b103      	cbz	r3, 800d952 <_sbrk_r+0x1a>
 800d950:	6023      	str	r3, [r4, #0]
 800d952:	bd38      	pop	{r3, r4, r5, pc}
 800d954:	20006cc0 	.word	0x20006cc0

0800d958 <_raise_r>:
 800d958:	291f      	cmp	r1, #31
 800d95a:	b538      	push	{r3, r4, r5, lr}
 800d95c:	4604      	mov	r4, r0
 800d95e:	460d      	mov	r5, r1
 800d960:	d904      	bls.n	800d96c <_raise_r+0x14>
 800d962:	2316      	movs	r3, #22
 800d964:	6003      	str	r3, [r0, #0]
 800d966:	f04f 30ff 	mov.w	r0, #4294967295
 800d96a:	bd38      	pop	{r3, r4, r5, pc}
 800d96c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d96e:	b112      	cbz	r2, 800d976 <_raise_r+0x1e>
 800d970:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d974:	b94b      	cbnz	r3, 800d98a <_raise_r+0x32>
 800d976:	4620      	mov	r0, r4
 800d978:	f000 f830 	bl	800d9dc <_getpid_r>
 800d97c:	462a      	mov	r2, r5
 800d97e:	4601      	mov	r1, r0
 800d980:	4620      	mov	r0, r4
 800d982:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d986:	f000 b817 	b.w	800d9b8 <_kill_r>
 800d98a:	2b01      	cmp	r3, #1
 800d98c:	d00a      	beq.n	800d9a4 <_raise_r+0x4c>
 800d98e:	1c59      	adds	r1, r3, #1
 800d990:	d103      	bne.n	800d99a <_raise_r+0x42>
 800d992:	2316      	movs	r3, #22
 800d994:	6003      	str	r3, [r0, #0]
 800d996:	2001      	movs	r0, #1
 800d998:	e7e7      	b.n	800d96a <_raise_r+0x12>
 800d99a:	2400      	movs	r4, #0
 800d99c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d9a0:	4628      	mov	r0, r5
 800d9a2:	4798      	blx	r3
 800d9a4:	2000      	movs	r0, #0
 800d9a6:	e7e0      	b.n	800d96a <_raise_r+0x12>

0800d9a8 <raise>:
 800d9a8:	4b02      	ldr	r3, [pc, #8]	; (800d9b4 <raise+0xc>)
 800d9aa:	4601      	mov	r1, r0
 800d9ac:	6818      	ldr	r0, [r3, #0]
 800d9ae:	f7ff bfd3 	b.w	800d958 <_raise_r>
 800d9b2:	bf00      	nop
 800d9b4:	20000038 	.word	0x20000038

0800d9b8 <_kill_r>:
 800d9b8:	b538      	push	{r3, r4, r5, lr}
 800d9ba:	4d07      	ldr	r5, [pc, #28]	; (800d9d8 <_kill_r+0x20>)
 800d9bc:	2300      	movs	r3, #0
 800d9be:	4604      	mov	r4, r0
 800d9c0:	4608      	mov	r0, r1
 800d9c2:	4611      	mov	r1, r2
 800d9c4:	602b      	str	r3, [r5, #0]
 800d9c6:	f7f8 febd 	bl	8006744 <_kill>
 800d9ca:	1c43      	adds	r3, r0, #1
 800d9cc:	d102      	bne.n	800d9d4 <_kill_r+0x1c>
 800d9ce:	682b      	ldr	r3, [r5, #0]
 800d9d0:	b103      	cbz	r3, 800d9d4 <_kill_r+0x1c>
 800d9d2:	6023      	str	r3, [r4, #0]
 800d9d4:	bd38      	pop	{r3, r4, r5, pc}
 800d9d6:	bf00      	nop
 800d9d8:	20006cc0 	.word	0x20006cc0

0800d9dc <_getpid_r>:
 800d9dc:	f7f8 beaa 	b.w	8006734 <_getpid>

0800d9e0 <__malloc_lock>:
 800d9e0:	4801      	ldr	r0, [pc, #4]	; (800d9e8 <__malloc_lock+0x8>)
 800d9e2:	f7ff be8b 	b.w	800d6fc <__retarget_lock_acquire_recursive>
 800d9e6:	bf00      	nop
 800d9e8:	20006cb4 	.word	0x20006cb4

0800d9ec <__malloc_unlock>:
 800d9ec:	4801      	ldr	r0, [pc, #4]	; (800d9f4 <__malloc_unlock+0x8>)
 800d9ee:	f7ff be86 	b.w	800d6fe <__retarget_lock_release_recursive>
 800d9f2:	bf00      	nop
 800d9f4:	20006cb4 	.word	0x20006cb4

0800d9f8 <_free_r>:
 800d9f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d9fa:	2900      	cmp	r1, #0
 800d9fc:	d044      	beq.n	800da88 <_free_r+0x90>
 800d9fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da02:	9001      	str	r0, [sp, #4]
 800da04:	2b00      	cmp	r3, #0
 800da06:	f1a1 0404 	sub.w	r4, r1, #4
 800da0a:	bfb8      	it	lt
 800da0c:	18e4      	addlt	r4, r4, r3
 800da0e:	f7ff ffe7 	bl	800d9e0 <__malloc_lock>
 800da12:	4a1e      	ldr	r2, [pc, #120]	; (800da8c <_free_r+0x94>)
 800da14:	9801      	ldr	r0, [sp, #4]
 800da16:	6813      	ldr	r3, [r2, #0]
 800da18:	b933      	cbnz	r3, 800da28 <_free_r+0x30>
 800da1a:	6063      	str	r3, [r4, #4]
 800da1c:	6014      	str	r4, [r2, #0]
 800da1e:	b003      	add	sp, #12
 800da20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800da24:	f7ff bfe2 	b.w	800d9ec <__malloc_unlock>
 800da28:	42a3      	cmp	r3, r4
 800da2a:	d908      	bls.n	800da3e <_free_r+0x46>
 800da2c:	6825      	ldr	r5, [r4, #0]
 800da2e:	1961      	adds	r1, r4, r5
 800da30:	428b      	cmp	r3, r1
 800da32:	bf01      	itttt	eq
 800da34:	6819      	ldreq	r1, [r3, #0]
 800da36:	685b      	ldreq	r3, [r3, #4]
 800da38:	1949      	addeq	r1, r1, r5
 800da3a:	6021      	streq	r1, [r4, #0]
 800da3c:	e7ed      	b.n	800da1a <_free_r+0x22>
 800da3e:	461a      	mov	r2, r3
 800da40:	685b      	ldr	r3, [r3, #4]
 800da42:	b10b      	cbz	r3, 800da48 <_free_r+0x50>
 800da44:	42a3      	cmp	r3, r4
 800da46:	d9fa      	bls.n	800da3e <_free_r+0x46>
 800da48:	6811      	ldr	r1, [r2, #0]
 800da4a:	1855      	adds	r5, r2, r1
 800da4c:	42a5      	cmp	r5, r4
 800da4e:	d10b      	bne.n	800da68 <_free_r+0x70>
 800da50:	6824      	ldr	r4, [r4, #0]
 800da52:	4421      	add	r1, r4
 800da54:	1854      	adds	r4, r2, r1
 800da56:	42a3      	cmp	r3, r4
 800da58:	6011      	str	r1, [r2, #0]
 800da5a:	d1e0      	bne.n	800da1e <_free_r+0x26>
 800da5c:	681c      	ldr	r4, [r3, #0]
 800da5e:	685b      	ldr	r3, [r3, #4]
 800da60:	6053      	str	r3, [r2, #4]
 800da62:	4421      	add	r1, r4
 800da64:	6011      	str	r1, [r2, #0]
 800da66:	e7da      	b.n	800da1e <_free_r+0x26>
 800da68:	d902      	bls.n	800da70 <_free_r+0x78>
 800da6a:	230c      	movs	r3, #12
 800da6c:	6003      	str	r3, [r0, #0]
 800da6e:	e7d6      	b.n	800da1e <_free_r+0x26>
 800da70:	6825      	ldr	r5, [r4, #0]
 800da72:	1961      	adds	r1, r4, r5
 800da74:	428b      	cmp	r3, r1
 800da76:	bf04      	itt	eq
 800da78:	6819      	ldreq	r1, [r3, #0]
 800da7a:	685b      	ldreq	r3, [r3, #4]
 800da7c:	6063      	str	r3, [r4, #4]
 800da7e:	bf04      	itt	eq
 800da80:	1949      	addeq	r1, r1, r5
 800da82:	6021      	streq	r1, [r4, #0]
 800da84:	6054      	str	r4, [r2, #4]
 800da86:	e7ca      	b.n	800da1e <_free_r+0x26>
 800da88:	b003      	add	sp, #12
 800da8a:	bd30      	pop	{r4, r5, pc}
 800da8c:	20006cb8 	.word	0x20006cb8

0800da90 <_realloc_r>:
 800da90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da94:	4680      	mov	r8, r0
 800da96:	4614      	mov	r4, r2
 800da98:	460e      	mov	r6, r1
 800da9a:	b921      	cbnz	r1, 800daa6 <_realloc_r+0x16>
 800da9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800daa0:	4611      	mov	r1, r2
 800daa2:	f7ff be63 	b.w	800d76c <_malloc_r>
 800daa6:	b92a      	cbnz	r2, 800dab4 <_realloc_r+0x24>
 800daa8:	f7ff ffa6 	bl	800d9f8 <_free_r>
 800daac:	4625      	mov	r5, r4
 800daae:	4628      	mov	r0, r5
 800dab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dab4:	f000 f81b 	bl	800daee <_malloc_usable_size_r>
 800dab8:	4284      	cmp	r4, r0
 800daba:	4607      	mov	r7, r0
 800dabc:	d802      	bhi.n	800dac4 <_realloc_r+0x34>
 800dabe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dac2:	d812      	bhi.n	800daea <_realloc_r+0x5a>
 800dac4:	4621      	mov	r1, r4
 800dac6:	4640      	mov	r0, r8
 800dac8:	f7ff fe50 	bl	800d76c <_malloc_r>
 800dacc:	4605      	mov	r5, r0
 800dace:	2800      	cmp	r0, #0
 800dad0:	d0ed      	beq.n	800daae <_realloc_r+0x1e>
 800dad2:	42bc      	cmp	r4, r7
 800dad4:	4622      	mov	r2, r4
 800dad6:	4631      	mov	r1, r6
 800dad8:	bf28      	it	cs
 800dada:	463a      	movcs	r2, r7
 800dadc:	f7ff fe10 	bl	800d700 <memcpy>
 800dae0:	4631      	mov	r1, r6
 800dae2:	4640      	mov	r0, r8
 800dae4:	f7ff ff88 	bl	800d9f8 <_free_r>
 800dae8:	e7e1      	b.n	800daae <_realloc_r+0x1e>
 800daea:	4635      	mov	r5, r6
 800daec:	e7df      	b.n	800daae <_realloc_r+0x1e>

0800daee <_malloc_usable_size_r>:
 800daee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800daf2:	1f18      	subs	r0, r3, #4
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	bfbc      	itt	lt
 800daf8:	580b      	ldrlt	r3, [r1, r0]
 800dafa:	18c0      	addlt	r0, r0, r3
 800dafc:	4770      	bx	lr
	...

0800db00 <_init>:
 800db00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db02:	bf00      	nop
 800db04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db06:	bc08      	pop	{r3}
 800db08:	469e      	mov	lr, r3
 800db0a:	4770      	bx	lr

0800db0c <_fini>:
 800db0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db0e:	bf00      	nop
 800db10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db12:	bc08      	pop	{r3}
 800db14:	469e      	mov	lr, r3
 800db16:	4770      	bx	lr
