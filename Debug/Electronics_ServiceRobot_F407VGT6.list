
Electronics_ServiceRobot_F407VGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec0c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d10  0800eda0  0800eda0  0001eda0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fab0  0800fab0  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800fab0  0800fab0  0001fab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fab8  0800fab8  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800fab8  0800fab8  0001fab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fac4  0800fac4  0001fac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0800fac8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a4  2**0
                  CONTENTS
 10 .bss          00006c0c  200000a8  200000a8  000200a8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20006cb4  20006cb4  000200a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026ad9  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b7b  00000000  00000000  00046bad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001970  00000000  00000000  0004b728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017d0  00000000  00000000  0004d098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026748  00000000  00000000  0004e868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cc2c  00000000  00000000  00074fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd6ad  00000000  00000000  00091bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016f289  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000075b4  00000000  00000000  0016f2dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ed84 	.word	0x0800ed84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	0800ed84 	.word	0x0800ed84

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_d2iz>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a94:	d215      	bcs.n	8000ac2 <__aeabi_d2iz+0x36>
 8000a96:	d511      	bpl.n	8000abc <__aeabi_d2iz+0x30>
 8000a98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa0:	d912      	bls.n	8000ac8 <__aeabi_d2iz+0x3c>
 8000aa2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ab2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	4240      	negne	r0, r0
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ac6:	d105      	bne.n	8000ad4 <__aeabi_d2iz+0x48>
 8000ac8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	bf08      	it	eq
 8000ace:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ad2:	4770      	bx	lr
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b90:	f000 b974 	b.w	8000e7c <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f806 	bl	8000bac <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__udivmoddi4>:
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	9d08      	ldr	r5, [sp, #32]
 8000bb2:	4604      	mov	r4, r0
 8000bb4:	468e      	mov	lr, r1
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d14d      	bne.n	8000c56 <__udivmoddi4+0xaa>
 8000bba:	428a      	cmp	r2, r1
 8000bbc:	4694      	mov	ip, r2
 8000bbe:	d969      	bls.n	8000c94 <__udivmoddi4+0xe8>
 8000bc0:	fab2 f282 	clz	r2, r2
 8000bc4:	b152      	cbz	r2, 8000bdc <__udivmoddi4+0x30>
 8000bc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bca:	f1c2 0120 	rsb	r1, r2, #32
 8000bce:	fa20 f101 	lsr.w	r1, r0, r1
 8000bd2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd6:	ea41 0e03 	orr.w	lr, r1, r3
 8000bda:	4094      	lsls	r4, r2
 8000bdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000be0:	0c21      	lsrs	r1, r4, #16
 8000be2:	fbbe f6f8 	udiv	r6, lr, r8
 8000be6:	fa1f f78c 	uxth.w	r7, ip
 8000bea:	fb08 e316 	mls	r3, r8, r6, lr
 8000bee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bf2:	fb06 f107 	mul.w	r1, r6, r7
 8000bf6:	4299      	cmp	r1, r3
 8000bf8:	d90a      	bls.n	8000c10 <__udivmoddi4+0x64>
 8000bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c02:	f080 811f 	bcs.w	8000e44 <__udivmoddi4+0x298>
 8000c06:	4299      	cmp	r1, r3
 8000c08:	f240 811c 	bls.w	8000e44 <__udivmoddi4+0x298>
 8000c0c:	3e02      	subs	r6, #2
 8000c0e:	4463      	add	r3, ip
 8000c10:	1a5b      	subs	r3, r3, r1
 8000c12:	b2a4      	uxth	r4, r4
 8000c14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c18:	fb08 3310 	mls	r3, r8, r0, r3
 8000c1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c20:	fb00 f707 	mul.w	r7, r0, r7
 8000c24:	42a7      	cmp	r7, r4
 8000c26:	d90a      	bls.n	8000c3e <__udivmoddi4+0x92>
 8000c28:	eb1c 0404 	adds.w	r4, ip, r4
 8000c2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c30:	f080 810a 	bcs.w	8000e48 <__udivmoddi4+0x29c>
 8000c34:	42a7      	cmp	r7, r4
 8000c36:	f240 8107 	bls.w	8000e48 <__udivmoddi4+0x29c>
 8000c3a:	4464      	add	r4, ip
 8000c3c:	3802      	subs	r0, #2
 8000c3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c42:	1be4      	subs	r4, r4, r7
 8000c44:	2600      	movs	r6, #0
 8000c46:	b11d      	cbz	r5, 8000c50 <__udivmoddi4+0xa4>
 8000c48:	40d4      	lsrs	r4, r2
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c50:	4631      	mov	r1, r6
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d909      	bls.n	8000c6e <__udivmoddi4+0xc2>
 8000c5a:	2d00      	cmp	r5, #0
 8000c5c:	f000 80ef 	beq.w	8000e3e <__udivmoddi4+0x292>
 8000c60:	2600      	movs	r6, #0
 8000c62:	e9c5 0100 	strd	r0, r1, [r5]
 8000c66:	4630      	mov	r0, r6
 8000c68:	4631      	mov	r1, r6
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	fab3 f683 	clz	r6, r3
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d14a      	bne.n	8000d0c <__udivmoddi4+0x160>
 8000c76:	428b      	cmp	r3, r1
 8000c78:	d302      	bcc.n	8000c80 <__udivmoddi4+0xd4>
 8000c7a:	4282      	cmp	r2, r0
 8000c7c:	f200 80f9 	bhi.w	8000e72 <__udivmoddi4+0x2c6>
 8000c80:	1a84      	subs	r4, r0, r2
 8000c82:	eb61 0303 	sbc.w	r3, r1, r3
 8000c86:	2001      	movs	r0, #1
 8000c88:	469e      	mov	lr, r3
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	d0e0      	beq.n	8000c50 <__udivmoddi4+0xa4>
 8000c8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c92:	e7dd      	b.n	8000c50 <__udivmoddi4+0xa4>
 8000c94:	b902      	cbnz	r2, 8000c98 <__udivmoddi4+0xec>
 8000c96:	deff      	udf	#255	; 0xff
 8000c98:	fab2 f282 	clz	r2, r2
 8000c9c:	2a00      	cmp	r2, #0
 8000c9e:	f040 8092 	bne.w	8000dc6 <__udivmoddi4+0x21a>
 8000ca2:	eba1 010c 	sub.w	r1, r1, ip
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f fe8c 	uxth.w	lr, ip
 8000cae:	2601      	movs	r6, #1
 8000cb0:	0c20      	lsrs	r0, r4, #16
 8000cb2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cb6:	fb07 1113 	mls	r1, r7, r3, r1
 8000cba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cbe:	fb0e f003 	mul.w	r0, lr, r3
 8000cc2:	4288      	cmp	r0, r1
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x12c>
 8000cc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cca:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cce:	d202      	bcs.n	8000cd6 <__udivmoddi4+0x12a>
 8000cd0:	4288      	cmp	r0, r1
 8000cd2:	f200 80cb 	bhi.w	8000e6c <__udivmoddi4+0x2c0>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	1a09      	subs	r1, r1, r0
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce0:	fb07 1110 	mls	r1, r7, r0, r1
 8000ce4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ce8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x156>
 8000cf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cf8:	d202      	bcs.n	8000d00 <__udivmoddi4+0x154>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f200 80bb 	bhi.w	8000e76 <__udivmoddi4+0x2ca>
 8000d00:	4608      	mov	r0, r1
 8000d02:	eba4 040e 	sub.w	r4, r4, lr
 8000d06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d0a:	e79c      	b.n	8000c46 <__udivmoddi4+0x9a>
 8000d0c:	f1c6 0720 	rsb	r7, r6, #32
 8000d10:	40b3      	lsls	r3, r6
 8000d12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d22:	431c      	orrs	r4, r3
 8000d24:	40f9      	lsrs	r1, r7
 8000d26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d32:	0c20      	lsrs	r0, r4, #16
 8000d34:	fa1f fe8c 	uxth.w	lr, ip
 8000d38:	fb09 1118 	mls	r1, r9, r8, r1
 8000d3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d40:	fb08 f00e 	mul.w	r0, r8, lr
 8000d44:	4288      	cmp	r0, r1
 8000d46:	fa02 f206 	lsl.w	r2, r2, r6
 8000d4a:	d90b      	bls.n	8000d64 <__udivmoddi4+0x1b8>
 8000d4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d54:	f080 8088 	bcs.w	8000e68 <__udivmoddi4+0x2bc>
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	f240 8085 	bls.w	8000e68 <__udivmoddi4+0x2bc>
 8000d5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d62:	4461      	add	r1, ip
 8000d64:	1a09      	subs	r1, r1, r0
 8000d66:	b2a4      	uxth	r4, r4
 8000d68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d78:	458e      	cmp	lr, r1
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x1e2>
 8000d7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d80:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d84:	d26c      	bcs.n	8000e60 <__udivmoddi4+0x2b4>
 8000d86:	458e      	cmp	lr, r1
 8000d88:	d96a      	bls.n	8000e60 <__udivmoddi4+0x2b4>
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	4461      	add	r1, ip
 8000d8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d92:	fba0 9402 	umull	r9, r4, r0, r2
 8000d96:	eba1 010e 	sub.w	r1, r1, lr
 8000d9a:	42a1      	cmp	r1, r4
 8000d9c:	46c8      	mov	r8, r9
 8000d9e:	46a6      	mov	lr, r4
 8000da0:	d356      	bcc.n	8000e50 <__udivmoddi4+0x2a4>
 8000da2:	d053      	beq.n	8000e4c <__udivmoddi4+0x2a0>
 8000da4:	b15d      	cbz	r5, 8000dbe <__udivmoddi4+0x212>
 8000da6:	ebb3 0208 	subs.w	r2, r3, r8
 8000daa:	eb61 010e 	sbc.w	r1, r1, lr
 8000dae:	fa01 f707 	lsl.w	r7, r1, r7
 8000db2:	fa22 f306 	lsr.w	r3, r2, r6
 8000db6:	40f1      	lsrs	r1, r6
 8000db8:	431f      	orrs	r7, r3
 8000dba:	e9c5 7100 	strd	r7, r1, [r5]
 8000dbe:	2600      	movs	r6, #0
 8000dc0:	4631      	mov	r1, r6
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	f1c2 0320 	rsb	r3, r2, #32
 8000dca:	40d8      	lsrs	r0, r3
 8000dcc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd0:	fa21 f303 	lsr.w	r3, r1, r3
 8000dd4:	4091      	lsls	r1, r2
 8000dd6:	4301      	orrs	r1, r0
 8000dd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ddc:	fa1f fe8c 	uxth.w	lr, ip
 8000de0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000de4:	fb07 3610 	mls	r6, r7, r0, r3
 8000de8:	0c0b      	lsrs	r3, r1, #16
 8000dea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dee:	fb00 f60e 	mul.w	r6, r0, lr
 8000df2:	429e      	cmp	r6, r3
 8000df4:	fa04 f402 	lsl.w	r4, r4, r2
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x260>
 8000dfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e02:	d22f      	bcs.n	8000e64 <__udivmoddi4+0x2b8>
 8000e04:	429e      	cmp	r6, r3
 8000e06:	d92d      	bls.n	8000e64 <__udivmoddi4+0x2b8>
 8000e08:	3802      	subs	r0, #2
 8000e0a:	4463      	add	r3, ip
 8000e0c:	1b9b      	subs	r3, r3, r6
 8000e0e:	b289      	uxth	r1, r1
 8000e10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e14:	fb07 3316 	mls	r3, r7, r6, r3
 8000e18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e20:	428b      	cmp	r3, r1
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x28a>
 8000e24:	eb1c 0101 	adds.w	r1, ip, r1
 8000e28:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e2c:	d216      	bcs.n	8000e5c <__udivmoddi4+0x2b0>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d914      	bls.n	8000e5c <__udivmoddi4+0x2b0>
 8000e32:	3e02      	subs	r6, #2
 8000e34:	4461      	add	r1, ip
 8000e36:	1ac9      	subs	r1, r1, r3
 8000e38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e3c:	e738      	b.n	8000cb0 <__udivmoddi4+0x104>
 8000e3e:	462e      	mov	r6, r5
 8000e40:	4628      	mov	r0, r5
 8000e42:	e705      	b.n	8000c50 <__udivmoddi4+0xa4>
 8000e44:	4606      	mov	r6, r0
 8000e46:	e6e3      	b.n	8000c10 <__udivmoddi4+0x64>
 8000e48:	4618      	mov	r0, r3
 8000e4a:	e6f8      	b.n	8000c3e <__udivmoddi4+0x92>
 8000e4c:	454b      	cmp	r3, r9
 8000e4e:	d2a9      	bcs.n	8000da4 <__udivmoddi4+0x1f8>
 8000e50:	ebb9 0802 	subs.w	r8, r9, r2
 8000e54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e58:	3801      	subs	r0, #1
 8000e5a:	e7a3      	b.n	8000da4 <__udivmoddi4+0x1f8>
 8000e5c:	4646      	mov	r6, r8
 8000e5e:	e7ea      	b.n	8000e36 <__udivmoddi4+0x28a>
 8000e60:	4620      	mov	r0, r4
 8000e62:	e794      	b.n	8000d8e <__udivmoddi4+0x1e2>
 8000e64:	4640      	mov	r0, r8
 8000e66:	e7d1      	b.n	8000e0c <__udivmoddi4+0x260>
 8000e68:	46d0      	mov	r8, sl
 8000e6a:	e77b      	b.n	8000d64 <__udivmoddi4+0x1b8>
 8000e6c:	3b02      	subs	r3, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	e732      	b.n	8000cd8 <__udivmoddi4+0x12c>
 8000e72:	4630      	mov	r0, r6
 8000e74:	e709      	b.n	8000c8a <__udivmoddi4+0xde>
 8000e76:	4464      	add	r4, ip
 8000e78:	3802      	subs	r0, #2
 8000e7a:	e742      	b.n	8000d02 <__udivmoddi4+0x156>

08000e7c <__aeabi_idiv0>:
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop

08000e80 <map>:
extern short int motor_SetPoint[3];
extern float proportional_motor[3], integral_motor[3], derivative_motor[3];
extern float prev_enc[3], error_velo_motor[3], previous_error_velo_motor[3];
extern float outputPWM[3];

long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
 8000e8c:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	69b9      	ldr	r1, [r7, #24]
 8000e96:	683a      	ldr	r2, [r7, #0]
 8000e98:	1a8a      	subs	r2, r1, r2
 8000e9a:	fb03 f202 	mul.w	r2, r3, r2
 8000e9e:	6879      	ldr	r1, [r7, #4]
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	1acb      	subs	r3, r1, r3
 8000ea4:	fb92 f2f3 	sdiv	r2, r2, r3
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	4413      	add	r3, r2
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <motor_VectorKinematic>:

void motor_VectorKinematic(short int vx, short int vy, short int vsudut)
{
 8000eb8:	b5b0      	push	{r4, r5, r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	80fb      	strh	r3, [r7, #6]
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	80bb      	strh	r3, [r7, #4]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	807b      	strh	r3, [r7, #2]
	motor_SetPoint[0] = (short int) (((vx * 0.8) * cosf(0 * M_PI/180)) + (vsudut));
 8000eca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fad8 	bl	8000484 <__aeabi_i2d>
 8000ed4:	a35c      	add	r3, pc, #368	; (adr r3, 8001048 <motor_VectorKinematic+0x190>)
 8000ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eda:	f7ff fb3d 	bl	8000558 <__aeabi_dmul>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	4614      	mov	r4, r2
 8000ee4:	461d      	mov	r5, r3
 8000ee6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff faca 	bl	8000484 <__aeabi_i2d>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	4629      	mov	r1, r5
 8000ef8:	f7ff f978 	bl	80001ec <__adddf3>
 8000efc:	4602      	mov	r2, r0
 8000efe:	460b      	mov	r3, r1
 8000f00:	4610      	mov	r0, r2
 8000f02:	4619      	mov	r1, r3
 8000f04:	f7ff fdc2 	bl	8000a8c <__aeabi_d2iz>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	b21a      	sxth	r2, r3
 8000f0c:	4b4a      	ldr	r3, [pc, #296]	; (8001038 <motor_VectorKinematic+0x180>)
 8000f0e:	801a      	strh	r2, [r3, #0]
	motor_SetPoint[1] = (short int) (((vx) * cosf(240 * M_PI/180)) + ((vy * 1.21) * sinf(240 * M_PI/180)) + (vsudut));
 8000f10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f14:	ee07 3a90 	vmov	s15, r3
 8000f18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f1c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800103c <motor_VectorKinematic+0x184>
 8000f20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f24:	ee17 0a90 	vmov	r0, s15
 8000f28:	f7ff fabe 	bl	80004a8 <__aeabi_f2d>
 8000f2c:	4604      	mov	r4, r0
 8000f2e:	460d      	mov	r5, r1
 8000f30:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff faa5 	bl	8000484 <__aeabi_i2d>
 8000f3a:	a339      	add	r3, pc, #228	; (adr r3, 8001020 <motor_VectorKinematic+0x168>)
 8000f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f40:	f7ff fb0a 	bl	8000558 <__aeabi_dmul>
 8000f44:	4602      	mov	r2, r0
 8000f46:	460b      	mov	r3, r1
 8000f48:	4610      	mov	r0, r2
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	a336      	add	r3, pc, #216	; (adr r3, 8001028 <motor_VectorKinematic+0x170>)
 8000f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f52:	f7ff fb01 	bl	8000558 <__aeabi_dmul>
 8000f56:	4602      	mov	r2, r0
 8000f58:	460b      	mov	r3, r1
 8000f5a:	4620      	mov	r0, r4
 8000f5c:	4629      	mov	r1, r5
 8000f5e:	f7ff f945 	bl	80001ec <__adddf3>
 8000f62:	4602      	mov	r2, r0
 8000f64:	460b      	mov	r3, r1
 8000f66:	4614      	mov	r4, r2
 8000f68:	461d      	mov	r5, r3
 8000f6a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff fa88 	bl	8000484 <__aeabi_i2d>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	4620      	mov	r0, r4
 8000f7a:	4629      	mov	r1, r5
 8000f7c:	f7ff f936 	bl	80001ec <__adddf3>
 8000f80:	4602      	mov	r2, r0
 8000f82:	460b      	mov	r3, r1
 8000f84:	4610      	mov	r0, r2
 8000f86:	4619      	mov	r1, r3
 8000f88:	f7ff fd80 	bl	8000a8c <__aeabi_d2iz>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	b21a      	sxth	r2, r3
 8000f90:	4b29      	ldr	r3, [pc, #164]	; (8001038 <motor_VectorKinematic+0x180>)
 8000f92:	805a      	strh	r2, [r3, #2]
	motor_SetPoint[2] = (short int) (((vx) * cosf(120 * M_PI/180)) + ((vy * 1.20) * sinf(120 * M_PI/180)) + (vsudut));
 8000f94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f98:	ee07 3a90 	vmov	s15, r3
 8000f9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fa0:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001040 <motor_VectorKinematic+0x188>
 8000fa4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fa8:	ee17 0a90 	vmov	r0, s15
 8000fac:	f7ff fa7c 	bl	80004a8 <__aeabi_f2d>
 8000fb0:	4604      	mov	r4, r0
 8000fb2:	460d      	mov	r5, r1
 8000fb4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff fa63 	bl	8000484 <__aeabi_i2d>
 8000fbe:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000fc2:	4b20      	ldr	r3, [pc, #128]	; (8001044 <motor_VectorKinematic+0x18c>)
 8000fc4:	f7ff fac8 	bl	8000558 <__aeabi_dmul>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	460b      	mov	r3, r1
 8000fcc:	4610      	mov	r0, r2
 8000fce:	4619      	mov	r1, r3
 8000fd0:	a317      	add	r3, pc, #92	; (adr r3, 8001030 <motor_VectorKinematic+0x178>)
 8000fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd6:	f7ff fabf 	bl	8000558 <__aeabi_dmul>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	460b      	mov	r3, r1
 8000fde:	4620      	mov	r0, r4
 8000fe0:	4629      	mov	r1, r5
 8000fe2:	f7ff f903 	bl	80001ec <__adddf3>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4614      	mov	r4, r2
 8000fec:	461d      	mov	r5, r3
 8000fee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff fa46 	bl	8000484 <__aeabi_i2d>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	4620      	mov	r0, r4
 8000ffe:	4629      	mov	r1, r5
 8001000:	f7ff f8f4 	bl	80001ec <__adddf3>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4610      	mov	r0, r2
 800100a:	4619      	mov	r1, r3
 800100c:	f7ff fd3e 	bl	8000a8c <__aeabi_d2iz>
 8001010:	4603      	mov	r3, r0
 8001012:	b21a      	sxth	r2, r3
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <motor_VectorKinematic+0x180>)
 8001016:	809a      	strh	r2, [r3, #4]
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bdb0      	pop	{r4, r5, r7, pc}
 8001020:	f5c28f5c 	.word	0xf5c28f5c
 8001024:	3ff35c28 	.word	0x3ff35c28
 8001028:	00000000 	.word	0x00000000
 800102c:	bfebb67b 	.word	0xbfebb67b
 8001030:	e0000000 	.word	0xe0000000
 8001034:	3febb67a 	.word	0x3febb67a
 8001038:	2000039c 	.word	0x2000039c
 800103c:	befffffd 	.word	0xbefffffd
 8001040:	bf000001 	.word	0xbf000001
 8001044:	3ff33333 	.word	0x3ff33333
 8001048:	9999999a 	.word	0x9999999a
 800104c:	3fe99999 	.word	0x3fe99999

08001050 <motor_VeloControl>:

void motor_VeloControl(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0

	motor_velo[0] = (encoder[0] - prev_enc[0]);
 8001056:	4b94      	ldr	r3, [pc, #592]	; (80012a8 <motor_VeloControl+0x258>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	ee07 3a90 	vmov	s15, r3
 800105e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001062:	4b92      	ldr	r3, [pc, #584]	; (80012ac <motor_VeloControl+0x25c>)
 8001064:	edd3 7a00 	vldr	s15, [r3]
 8001068:	ee77 7a67 	vsub.f32	s15, s14, s15
 800106c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001070:	ee17 3a90 	vmov	r3, s15
 8001074:	b21a      	sxth	r2, r3
 8001076:	4b8e      	ldr	r3, [pc, #568]	; (80012b0 <motor_VeloControl+0x260>)
 8001078:	801a      	strh	r2, [r3, #0]
	prev_enc[0] = encoder[0];
 800107a:	4b8b      	ldr	r3, [pc, #556]	; (80012a8 <motor_VeloControl+0x258>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	ee07 3a90 	vmov	s15, r3
 8001082:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001086:	4b89      	ldr	r3, [pc, #548]	; (80012ac <motor_VeloControl+0x25c>)
 8001088:	edc3 7a00 	vstr	s15, [r3]
	motor_velo[1] = (encoder[1] - prev_enc[1]);
 800108c:	4b86      	ldr	r3, [pc, #536]	; (80012a8 <motor_VeloControl+0x258>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	ee07 3a90 	vmov	s15, r3
 8001094:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001098:	4b84      	ldr	r3, [pc, #528]	; (80012ac <motor_VeloControl+0x25c>)
 800109a:	edd3 7a01 	vldr	s15, [r3, #4]
 800109e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010a6:	ee17 3a90 	vmov	r3, s15
 80010aa:	b21a      	sxth	r2, r3
 80010ac:	4b80      	ldr	r3, [pc, #512]	; (80012b0 <motor_VeloControl+0x260>)
 80010ae:	805a      	strh	r2, [r3, #2]
	prev_enc[1] = encoder[1];
 80010b0:	4b7d      	ldr	r3, [pc, #500]	; (80012a8 <motor_VeloControl+0x258>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	ee07 3a90 	vmov	s15, r3
 80010b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010bc:	4b7b      	ldr	r3, [pc, #492]	; (80012ac <motor_VeloControl+0x25c>)
 80010be:	edc3 7a01 	vstr	s15, [r3, #4]
	motor_velo[2] = (encoder[2] - prev_enc[2]);
 80010c2:	4b79      	ldr	r3, [pc, #484]	; (80012a8 <motor_VeloControl+0x258>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	ee07 3a90 	vmov	s15, r3
 80010ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010ce:	4b77      	ldr	r3, [pc, #476]	; (80012ac <motor_VeloControl+0x25c>)
 80010d0:	edd3 7a02 	vldr	s15, [r3, #8]
 80010d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010dc:	ee17 3a90 	vmov	r3, s15
 80010e0:	b21a      	sxth	r2, r3
 80010e2:	4b73      	ldr	r3, [pc, #460]	; (80012b0 <motor_VeloControl+0x260>)
 80010e4:	809a      	strh	r2, [r3, #4]
	prev_enc[2] = encoder[2];
 80010e6:	4b70      	ldr	r3, [pc, #448]	; (80012a8 <motor_VeloControl+0x258>)
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	ee07 3a90 	vmov	s15, r3
 80010ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010f2:	4b6e      	ldr	r3, [pc, #440]	; (80012ac <motor_VeloControl+0x25c>)
 80010f4:	edc3 7a02 	vstr	s15, [r3, #8]

	for(int i = 0; i < 3; i++){
 80010f8:	2300      	movs	r3, #0
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	e0c5      	b.n	800128a <motor_VeloControl+0x23a>
//		motor_velo[i] = (encoder[i] - prev_enc[i]);
		error_velo_motor[i] = motor_SetPoint[i] - motor_velo[i];
 80010fe:	4a6d      	ldr	r2, [pc, #436]	; (80012b4 <motor_VeloControl+0x264>)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001106:	4619      	mov	r1, r3
 8001108:	4a69      	ldr	r2, [pc, #420]	; (80012b0 <motor_VeloControl+0x260>)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001110:	1acb      	subs	r3, r1, r3
 8001112:	ee07 3a90 	vmov	s15, r3
 8001116:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800111a:	4a67      	ldr	r2, [pc, #412]	; (80012b8 <motor_VeloControl+0x268>)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4413      	add	r3, r2
 8001122:	edc3 7a00 	vstr	s15, [r3]
		proportional_motor[i] = KP_motor * error_velo_motor[i];
 8001126:	4a64      	ldr	r2, [pc, #400]	; (80012b8 <motor_VeloControl+0x268>)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	4413      	add	r3, r2
 800112e:	ed93 7a00 	vldr	s14, [r3]
 8001132:	4b62      	ldr	r3, [pc, #392]	; (80012bc <motor_VeloControl+0x26c>)
 8001134:	edd3 7a00 	vldr	s15, [r3]
 8001138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800113c:	4a60      	ldr	r2, [pc, #384]	; (80012c0 <motor_VeloControl+0x270>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4413      	add	r3, r2
 8001144:	edc3 7a00 	vstr	s15, [r3]
		integral_motor[i] += error_velo_motor[i];
 8001148:	4a5e      	ldr	r2, [pc, #376]	; (80012c4 <motor_VeloControl+0x274>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	4413      	add	r3, r2
 8001150:	ed93 7a00 	vldr	s14, [r3]
 8001154:	4a58      	ldr	r2, [pc, #352]	; (80012b8 <motor_VeloControl+0x268>)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	4413      	add	r3, r2
 800115c:	edd3 7a00 	vldr	s15, [r3]
 8001160:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001164:	4a57      	ldr	r2, [pc, #348]	; (80012c4 <motor_VeloControl+0x274>)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4413      	add	r3, r2
 800116c:	edc3 7a00 	vstr	s15, [r3]
//		derivative_motor[i] = KD_motor * (error_velo_motor[i] - previous_error_velo_motor[i]) / PID_dt;
		derivative_motor[i] = KD_motor * (error_velo_motor[i] - previous_error_velo_motor[i]);
 8001170:	4a51      	ldr	r2, [pc, #324]	; (80012b8 <motor_VeloControl+0x268>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	ed93 7a00 	vldr	s14, [r3]
 800117c:	4a52      	ldr	r2, [pc, #328]	; (80012c8 <motor_VeloControl+0x278>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	4413      	add	r3, r2
 8001184:	edd3 7a00 	vldr	s15, [r3]
 8001188:	ee37 7a67 	vsub.f32	s14, s14, s15
 800118c:	4b4f      	ldr	r3, [pc, #316]	; (80012cc <motor_VeloControl+0x27c>)
 800118e:	edd3 7a00 	vldr	s15, [r3]
 8001192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001196:	4a4e      	ldr	r2, [pc, #312]	; (80012d0 <motor_VeloControl+0x280>)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	4413      	add	r3, r2
 800119e:	edc3 7a00 	vstr	s15, [r3]

//		integral_motor[i] = KI_motor * (integral_motor[i] + error_velo_motor[i] * PID_dt);
		previous_error_velo_motor[i] = error_velo_motor[i];
 80011a2:	4a45      	ldr	r2, [pc, #276]	; (80012b8 <motor_VeloControl+0x268>)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	4413      	add	r3, r2
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4946      	ldr	r1, [pc, #280]	; (80012c8 <motor_VeloControl+0x278>)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	440b      	add	r3, r1
 80011b4:	601a      	str	r2, [r3, #0]

		if(integral_motor[i] > 999) integral_motor[i] = 999;
 80011b6:	4a43      	ldr	r2, [pc, #268]	; (80012c4 <motor_VeloControl+0x274>)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4413      	add	r3, r2
 80011be:	edd3 7a00 	vldr	s15, [r3]
 80011c2:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80012d4 <motor_VeloControl+0x284>
 80011c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ce:	dd06      	ble.n	80011de <motor_VeloControl+0x18e>
 80011d0:	4a3c      	ldr	r2, [pc, #240]	; (80012c4 <motor_VeloControl+0x274>)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	4413      	add	r3, r2
 80011d8:	4a3f      	ldr	r2, [pc, #252]	; (80012d8 <motor_VeloControl+0x288>)
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	e012      	b.n	8001204 <motor_VeloControl+0x1b4>
		else if(integral_motor[i] < -999) integral_motor[i] = -999;
 80011de:	4a39      	ldr	r2, [pc, #228]	; (80012c4 <motor_VeloControl+0x274>)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4413      	add	r3, r2
 80011e6:	edd3 7a00 	vldr	s15, [r3]
 80011ea:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80012dc <motor_VeloControl+0x28c>
 80011ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f6:	d505      	bpl.n	8001204 <motor_VeloControl+0x1b4>
 80011f8:	4a32      	ldr	r2, [pc, #200]	; (80012c4 <motor_VeloControl+0x274>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	4413      	add	r3, r2
 8001200:	4a37      	ldr	r2, [pc, #220]	; (80012e0 <motor_VeloControl+0x290>)
 8001202:	601a      	str	r2, [r3, #0]

//		outputPWM[i] = (proportional_motor[i] + integral_motor[i] + derivative_motor[i]) * 0.9;
		outputPWM[i] = proportional_motor[i] * 0.3;
 8001204:	4a2e      	ldr	r2, [pc, #184]	; (80012c0 <motor_VeloControl+0x270>)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4413      	add	r3, r2
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff f94a 	bl	80004a8 <__aeabi_f2d>
 8001214:	a322      	add	r3, pc, #136	; (adr r3, 80012a0 <motor_VeloControl+0x250>)
 8001216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121a:	f7ff f99d 	bl	8000558 <__aeabi_dmul>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4610      	mov	r0, r2
 8001224:	4619      	mov	r1, r3
 8001226:	f7ff fc59 	bl	8000adc <__aeabi_d2f>
 800122a:	4602      	mov	r2, r0
 800122c:	492d      	ldr	r1, [pc, #180]	; (80012e4 <motor_VeloControl+0x294>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	440b      	add	r3, r1
 8001234:	601a      	str	r2, [r3, #0]

		if(outputPWM[i] > 999) outputPWM[i] = 999;
 8001236:	4a2b      	ldr	r2, [pc, #172]	; (80012e4 <motor_VeloControl+0x294>)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	4413      	add	r3, r2
 800123e:	edd3 7a00 	vldr	s15, [r3]
 8001242:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80012d4 <motor_VeloControl+0x284>
 8001246:	eef4 7ac7 	vcmpe.f32	s15, s14
 800124a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124e:	dd06      	ble.n	800125e <motor_VeloControl+0x20e>
 8001250:	4a24      	ldr	r2, [pc, #144]	; (80012e4 <motor_VeloControl+0x294>)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	4a1f      	ldr	r2, [pc, #124]	; (80012d8 <motor_VeloControl+0x288>)
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	e012      	b.n	8001284 <motor_VeloControl+0x234>
		else if(outputPWM[i] < -999) outputPWM[i] = -999;
 800125e:	4a21      	ldr	r2, [pc, #132]	; (80012e4 <motor_VeloControl+0x294>)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	edd3 7a00 	vldr	s15, [r3]
 800126a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80012dc <motor_VeloControl+0x28c>
 800126e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001276:	d505      	bpl.n	8001284 <motor_VeloControl+0x234>
 8001278:	4a1a      	ldr	r2, [pc, #104]	; (80012e4 <motor_VeloControl+0x294>)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	4413      	add	r3, r2
 8001280:	4a17      	ldr	r2, [pc, #92]	; (80012e0 <motor_VeloControl+0x290>)
 8001282:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 3; i++){
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3301      	adds	r3, #1
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b02      	cmp	r3, #2
 800128e:	f77f af36 	ble.w	80010fe <motor_VeloControl+0xae>
//		prev_enc[i] = encoder[i];
//		previous_error_velo_motor[i] = error_velo_motor[i];
	}
}
 8001292:	bf00      	nop
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	f3af 8000 	nop.w
 80012a0:	33333333 	.word	0x33333333
 80012a4:	3fd33333 	.word	0x3fd33333
 80012a8:	20000388 	.word	0x20000388
 80012ac:	200003c8 	.word	0x200003c8
 80012b0:	20000394 	.word	0x20000394
 80012b4:	2000039c 	.word	0x2000039c
 80012b8:	200003d4 	.word	0x200003d4
 80012bc:	20000000 	.word	0x20000000
 80012c0:	200003a4 	.word	0x200003a4
 80012c4:	200003b0 	.word	0x200003b0
 80012c8:	200003e0 	.word	0x200003e0
 80012cc:	20000384 	.word	0x20000384
 80012d0:	200003bc 	.word	0x200003bc
 80012d4:	4479c000 	.word	0x4479c000
 80012d8:	4479c000 	.word	0x4479c000
 80012dc:	c479c000 	.word	0xc479c000
 80012e0:	c479c000 	.word	0xc479c000
 80012e4:	200003ec 	.word	0x200003ec

080012e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	4b18      	ldr	r3, [pc, #96]	; (8001354 <MX_DMA_Init+0x6c>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a17      	ldr	r2, [pc, #92]	; (8001354 <MX_DMA_Init+0x6c>)
 80012f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <MX_DMA_Init+0x6c>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800130a:	2200      	movs	r2, #0
 800130c:	2105      	movs	r1, #5
 800130e:	200b      	movs	r0, #11
 8001310:	f006 fc22 	bl	8007b58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001314:	200b      	movs	r0, #11
 8001316:	f006 fc3b 	bl	8007b90 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800131a:	2200      	movs	r2, #0
 800131c:	2105      	movs	r1, #5
 800131e:	200d      	movs	r0, #13
 8001320:	f006 fc1a 	bl	8007b58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001324:	200d      	movs	r0, #13
 8001326:	f006 fc33 	bl	8007b90 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	2105      	movs	r1, #5
 800132e:	2010      	movs	r0, #16
 8001330:	f006 fc12 	bl	8007b58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001334:	2010      	movs	r0, #16
 8001336:	f006 fc2b 	bl	8007b90 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 800133a:	2200      	movs	r2, #0
 800133c:	2105      	movs	r1, #5
 800133e:	202f      	movs	r0, #47	; 0x2f
 8001340:	f006 fc0a 	bl	8007b58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001344:	202f      	movs	r0, #47	; 0x2f
 8001346:	f006 fc23 	bl	8007b90 <HAL_NVIC_EnableIRQ>

}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40023800 	.word	0x40023800

08001358 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	4a07      	ldr	r2, [pc, #28]	; (8001384 <vApplicationGetIdleTaskMemory+0x2c>)
 8001368:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	4a06      	ldr	r2, [pc, #24]	; (8001388 <vApplicationGetIdleTaskMemory+0x30>)
 800136e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2280      	movs	r2, #128	; 0x80
 8001374:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001376:	bf00      	nop
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	200000d0 	.word	0x200000d0
 8001388:	20000184 	.word	0x20000184

0800138c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800138c:	b5b0      	push	{r4, r5, r7, lr}
 800138e:	b096      	sub	sp, #88	; 0x58
 8001390:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of joys_imuTask */
  osThreadDef(joys_imuTask, Startjoys_imuTask, osPriorityNormal, 0, 128);
 8001392:	4b1d      	ldr	r3, [pc, #116]	; (8001408 <MX_FREERTOS_Init+0x7c>)
 8001394:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001398:	461d      	mov	r5, r3
 800139a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800139c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800139e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  joys_imuTaskHandle = osThreadCreate(osThread(joys_imuTask), NULL);
 80013a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013aa:	2100      	movs	r1, #0
 80013ac:	4618      	mov	r0, r3
 80013ae:	f00a fa00 	bl	800b7b2 <osThreadCreate>
 80013b2:	4603      	mov	r3, r0
 80013b4:	4a15      	ldr	r2, [pc, #84]	; (800140c <MX_FREERTOS_Init+0x80>)
 80013b6:	6013      	str	r3, [r2, #0]

  /* definition and creation of rosserialTask */
  osThreadDef(rosserialTask, StartrosserialTask, osPriorityNormal, 0, 2048);
 80013b8:	4b15      	ldr	r3, [pc, #84]	; (8001410 <MX_FREERTOS_Init+0x84>)
 80013ba:	f107 0420 	add.w	r4, r7, #32
 80013be:	461d      	mov	r5, r3
 80013c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  rosserialTaskHandle = osThreadCreate(osThread(rosserialTask), NULL);
 80013cc:	f107 0320 	add.w	r3, r7, #32
 80013d0:	2100      	movs	r1, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f00a f9ed 	bl	800b7b2 <osThreadCreate>
 80013d8:	4603      	mov	r3, r0
 80013da:	4a0e      	ldr	r2, [pc, #56]	; (8001414 <MX_FREERTOS_Init+0x88>)
 80013dc:	6013      	str	r3, [r2, #0]

  /* definition and creation of out_motorTask */
  osThreadDef(out_motorTask, Startout_motorTask, osPriorityNormal, 0, 128);
 80013de:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <MX_FREERTOS_Init+0x8c>)
 80013e0:	1d3c      	adds	r4, r7, #4
 80013e2:	461d      	mov	r5, r3
 80013e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  out_motorTaskHandle = osThreadCreate(osThread(out_motorTask), NULL);
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	2100      	movs	r1, #0
 80013f4:	4618      	mov	r0, r3
 80013f6:	f00a f9dc 	bl	800b7b2 <osThreadCreate>
 80013fa:	4603      	mov	r3, r0
 80013fc:	4a07      	ldr	r2, [pc, #28]	; (800141c <MX_FREERTOS_Init+0x90>)
 80013fe:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001400:	bf00      	nop
 8001402:	3758      	adds	r7, #88	; 0x58
 8001404:	46bd      	mov	sp, r7
 8001406:	bdb0      	pop	{r4, r5, r7, pc}
 8001408:	0800edd0 	.word	0x0800edd0
 800140c:	200000c4 	.word	0x200000c4
 8001410:	0800edec 	.word	0x0800edec
 8001414:	200000c8 	.word	0x200000c8
 8001418:	0800ee08 	.word	0x0800ee08
 800141c:	200000cc 	.word	0x200000cc

08001420 <Startjoys_imuTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Startjoys_imuTask */
void Startjoys_imuTask(void const * argument)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af02      	add	r7, sp, #8
 8001426:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startjoys_imuTask */
  /* Infinite loop */
  for(;;)
  {	  //JOYSTICK BLUETOOTH
	  if(joystick_bt_counter < joystick_bt_timeout){
 8001428:	4b89      	ldr	r3, [pc, #548]	; (8001650 <Startjoys_imuTask+0x230>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4b89      	ldr	r3, [pc, #548]	; (8001654 <Startjoys_imuTask+0x234>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	429a      	cmp	r2, r3
 8001432:	da10      	bge.n	8001456 <Startjoys_imuTask+0x36>
		  if(HAL_UART_Receive_DMA(&huart2, joystick_buf, sizeof(joystick_buf)) != HAL_OK){
 8001434:	220d      	movs	r2, #13
 8001436:	4988      	ldr	r1, [pc, #544]	; (8001658 <Startjoys_imuTask+0x238>)
 8001438:	4888      	ldr	r0, [pc, #544]	; (800165c <Startjoys_imuTask+0x23c>)
 800143a:	f009 f88b 	bl	800a554 <HAL_UART_Receive_DMA>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d005      	beq.n	8001450 <Startjoys_imuTask+0x30>
			  joystick_bt_counter++;
 8001444:	4b82      	ldr	r3, [pc, #520]	; (8001650 <Startjoys_imuTask+0x230>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	3301      	adds	r3, #1
 800144a:	4a81      	ldr	r2, [pc, #516]	; (8001650 <Startjoys_imuTask+0x230>)
 800144c:	6013      	str	r3, [r2, #0]
 800144e:	e002      	b.n	8001456 <Startjoys_imuTask+0x36>
		  }
		  else{
			  joystick_bt_counter = 0;
 8001450:	4b7f      	ldr	r3, [pc, #508]	; (8001650 <Startjoys_imuTask+0x230>)
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
		  }
	  }

	  if(joystick_bt_counter >= 299){
 8001456:	4b7e      	ldr	r3, [pc, #504]	; (8001650 <Startjoys_imuTask+0x230>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 800145e:	dd03      	ble.n	8001468 <Startjoys_imuTask+0x48>
		  joystick_bt_counter = 299;
 8001460:	4b7b      	ldr	r3, [pc, #492]	; (8001650 <Startjoys_imuTask+0x230>)
 8001462:	f240 122b 	movw	r2, #299	; 0x12b
 8001466:	601a      	str	r2, [r3, #0]
	  }

	  if(joystick_buf[0] == 'i' && joystick_buf[1] == 't' && joystick_buf[2] == 's'){
 8001468:	4b7b      	ldr	r3, [pc, #492]	; (8001658 <Startjoys_imuTask+0x238>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b69      	cmp	r3, #105	; 0x69
 800146e:	d177      	bne.n	8001560 <Startjoys_imuTask+0x140>
 8001470:	4b79      	ldr	r3, [pc, #484]	; (8001658 <Startjoys_imuTask+0x238>)
 8001472:	785b      	ldrb	r3, [r3, #1]
 8001474:	2b74      	cmp	r3, #116	; 0x74
 8001476:	d173      	bne.n	8001560 <Startjoys_imuTask+0x140>
 8001478:	4b77      	ldr	r3, [pc, #476]	; (8001658 <Startjoys_imuTask+0x238>)
 800147a:	789b      	ldrb	r3, [r3, #2]
 800147c:	2b73      	cmp	r3, #115	; 0x73
 800147e:	d16f      	bne.n	8001560 <Startjoys_imuTask+0x140>
		  HAL_UART_Receive_DMA(&huart2, joystick_buf, sizeof(joystick_buf));
 8001480:	220d      	movs	r2, #13
 8001482:	4975      	ldr	r1, [pc, #468]	; (8001658 <Startjoys_imuTask+0x238>)
 8001484:	4875      	ldr	r0, [pc, #468]	; (800165c <Startjoys_imuTask+0x23c>)
 8001486:	f009 f865 	bl	800a554 <HAL_UART_Receive_DMA>

		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800148a:	2201      	movs	r2, #1
 800148c:	2140      	movs	r1, #64	; 0x40
 800148e:	4874      	ldr	r0, [pc, #464]	; (8001660 <Startjoys_imuTask+0x240>)
 8001490:	f007 f92a 	bl	80086e8 <HAL_GPIO_WritePin>

		  memcpy(&joystick_y_buf, joystick_buf + 3, 1);
 8001494:	4b73      	ldr	r3, [pc, #460]	; (8001664 <Startjoys_imuTask+0x244>)
 8001496:	781a      	ldrb	r2, [r3, #0]
 8001498:	4b73      	ldr	r3, [pc, #460]	; (8001668 <Startjoys_imuTask+0x248>)
 800149a:	701a      	strb	r2, [r3, #0]
		  memcpy(&joystick_x_buf, joystick_buf + 4, 1);
 800149c:	4b73      	ldr	r3, [pc, #460]	; (800166c <Startjoys_imuTask+0x24c>)
 800149e:	781a      	ldrb	r2, [r3, #0]
 80014a0:	4b73      	ldr	r3, [pc, #460]	; (8001670 <Startjoys_imuTask+0x250>)
 80014a2:	701a      	strb	r2, [r3, #0]
		  memcpy(&joystick_z_buf, joystick_buf + 6, 1);
 80014a4:	4b73      	ldr	r3, [pc, #460]	; (8001674 <Startjoys_imuTask+0x254>)
 80014a6:	781a      	ldrb	r2, [r3, #0]
 80014a8:	4b73      	ldr	r3, [pc, #460]	; (8001678 <Startjoys_imuTask+0x258>)
 80014aa:	701a      	strb	r2, [r3, #0]

		  joystick_x_buf = constrain(joystick_x_buf, 0, 246);
 80014ac:	4b70      	ldr	r3, [pc, #448]	; (8001670 <Startjoys_imuTask+0x250>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2bf6      	cmp	r3, #246	; 0xf6
 80014b2:	bf28      	it	cs
 80014b4:	23f6      	movcs	r3, #246	; 0xf6
 80014b6:	b2da      	uxtb	r2, r3
 80014b8:	4b6d      	ldr	r3, [pc, #436]	; (8001670 <Startjoys_imuTask+0x250>)
 80014ba:	701a      	strb	r2, [r3, #0]
		  joystick_y_buf = constrain(joystick_y_buf, 0, 246);
 80014bc:	4b6a      	ldr	r3, [pc, #424]	; (8001668 <Startjoys_imuTask+0x248>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2bf6      	cmp	r3, #246	; 0xf6
 80014c2:	bf28      	it	cs
 80014c4:	23f6      	movcs	r3, #246	; 0xf6
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	4b67      	ldr	r3, [pc, #412]	; (8001668 <Startjoys_imuTask+0x248>)
 80014ca:	701a      	strb	r2, [r3, #0]
		  joystick_z_buf = constrain(joystick_z_buf, 0, 246);
 80014cc:	4b6a      	ldr	r3, [pc, #424]	; (8001678 <Startjoys_imuTask+0x258>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2bf6      	cmp	r3, #246	; 0xf6
 80014d2:	bf28      	it	cs
 80014d4:	23f6      	movcs	r3, #246	; 0xf6
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	4b67      	ldr	r3, [pc, #412]	; (8001678 <Startjoys_imuTask+0x258>)
 80014da:	701a      	strb	r2, [r3, #0]

		  joystick_x = map(joystick_x_buf, 0, 246, -123, 123);
 80014dc:	4b64      	ldr	r3, [pc, #400]	; (8001670 <Startjoys_imuTask+0x250>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	4618      	mov	r0, r3
 80014e2:	237b      	movs	r3, #123	; 0x7b
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	f06f 037a 	mvn.w	r3, #122	; 0x7a
 80014ea:	22f6      	movs	r2, #246	; 0xf6
 80014ec:	2100      	movs	r1, #0
 80014ee:	f7ff fcc7 	bl	8000e80 <map>
 80014f2:	4603      	mov	r3, r0
 80014f4:	b25a      	sxtb	r2, r3
 80014f6:	4b61      	ldr	r3, [pc, #388]	; (800167c <Startjoys_imuTask+0x25c>)
 80014f8:	701a      	strb	r2, [r3, #0]
		  joystick_y = map(joystick_y_buf, 0, 246, -123, 123);
 80014fa:	4b5b      	ldr	r3, [pc, #364]	; (8001668 <Startjoys_imuTask+0x248>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	237b      	movs	r3, #123	; 0x7b
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	f06f 037a 	mvn.w	r3, #122	; 0x7a
 8001508:	22f6      	movs	r2, #246	; 0xf6
 800150a:	2100      	movs	r1, #0
 800150c:	f7ff fcb8 	bl	8000e80 <map>
 8001510:	4603      	mov	r3, r0
 8001512:	b25a      	sxtb	r2, r3
 8001514:	4b5a      	ldr	r3, [pc, #360]	; (8001680 <Startjoys_imuTask+0x260>)
 8001516:	701a      	strb	r2, [r3, #0]
		  joystick_z = map(joystick_z_buf, 0, 246, -123, 123);
 8001518:	4b57      	ldr	r3, [pc, #348]	; (8001678 <Startjoys_imuTask+0x258>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	237b      	movs	r3, #123	; 0x7b
 8001520:	9300      	str	r3, [sp, #0]
 8001522:	f06f 037a 	mvn.w	r3, #122	; 0x7a
 8001526:	22f6      	movs	r2, #246	; 0xf6
 8001528:	2100      	movs	r1, #0
 800152a:	f7ff fca9 	bl	8000e80 <map>
 800152e:	4603      	mov	r3, r0
 8001530:	b25a      	sxtb	r2, r3
 8001532:	4b54      	ldr	r3, [pc, #336]	; (8001684 <Startjoys_imuTask+0x264>)
 8001534:	701a      	strb	r2, [r3, #0]

		  joystick_mode = joystick_buf[7];
 8001536:	4b48      	ldr	r3, [pc, #288]	; (8001658 <Startjoys_imuTask+0x238>)
 8001538:	79db      	ldrb	r3, [r3, #7]
 800153a:	461a      	mov	r2, r3
 800153c:	4b52      	ldr	r3, [pc, #328]	; (8001688 <Startjoys_imuTask+0x268>)
 800153e:	601a      	str	r2, [r3, #0]
		  mode = joystick_buf[8];
 8001540:	4b45      	ldr	r3, [pc, #276]	; (8001658 <Startjoys_imuTask+0x238>)
 8001542:	7a1b      	ldrb	r3, [r3, #8]
 8001544:	461a      	mov	r2, r3
 8001546:	4b51      	ldr	r3, [pc, #324]	; (800168c <Startjoys_imuTask+0x26c>)
 8001548:	601a      	str	r2, [r3, #0]
		  joystick_increase_speed = joystick_buf[9];
 800154a:	4b43      	ldr	r3, [pc, #268]	; (8001658 <Startjoys_imuTask+0x238>)
 800154c:	7a5b      	ldrb	r3, [r3, #9]
 800154e:	461a      	mov	r2, r3
 8001550:	4b4f      	ldr	r3, [pc, #316]	; (8001690 <Startjoys_imuTask+0x270>)
 8001552:	601a      	str	r2, [r3, #0]
		  joystick_decrease_speed = joystick_buf[10];
 8001554:	4b40      	ldr	r3, [pc, #256]	; (8001658 <Startjoys_imuTask+0x238>)
 8001556:	7a9b      	ldrb	r3, [r3, #10]
 8001558:	461a      	mov	r2, r3
 800155a:	4b4e      	ldr	r3, [pc, #312]	; (8001694 <Startjoys_imuTask+0x274>)
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	e012      	b.n	8001586 <Startjoys_imuTask+0x166>
	  }
	  else{
		  HAL_UART_Receive_DMA(&huart2, joystick_buf, sizeof(joystick_buf));
 8001560:	220d      	movs	r2, #13
 8001562:	493d      	ldr	r1, [pc, #244]	; (8001658 <Startjoys_imuTask+0x238>)
 8001564:	483d      	ldr	r0, [pc, #244]	; (800165c <Startjoys_imuTask+0x23c>)
 8001566:	f008 fff5 	bl	800a554 <HAL_UART_Receive_DMA>
		  joystick_x = 0;
 800156a:	4b44      	ldr	r3, [pc, #272]	; (800167c <Startjoys_imuTask+0x25c>)
 800156c:	2200      	movs	r2, #0
 800156e:	701a      	strb	r2, [r3, #0]
		  joystick_y = 0;
 8001570:	4b43      	ldr	r3, [pc, #268]	; (8001680 <Startjoys_imuTask+0x260>)
 8001572:	2200      	movs	r2, #0
 8001574:	701a      	strb	r2, [r3, #0]
		  joystick_z = 0;
 8001576:	4b43      	ldr	r3, [pc, #268]	; (8001684 <Startjoys_imuTask+0x264>)
 8001578:	2200      	movs	r2, #0
 800157a:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800157c:	2200      	movs	r2, #0
 800157e:	2140      	movs	r1, #64	; 0x40
 8001580:	4837      	ldr	r0, [pc, #220]	; (8001660 <Startjoys_imuTask+0x240>)
 8001582:	f007 f8b1 	bl	80086e8 <HAL_GPIO_WritePin>
	  }

	  if(joystick_bt_counter == 299){
 8001586:	4b32      	ldr	r3, [pc, #200]	; (8001650 <Startjoys_imuTask+0x230>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f240 122b 	movw	r2, #299	; 0x12b
 800158e:	4293      	cmp	r3, r2
 8001590:	d10d      	bne.n	80015ae <Startjoys_imuTask+0x18e>
		  joystick_x = 0;
 8001592:	4b3a      	ldr	r3, [pc, #232]	; (800167c <Startjoys_imuTask+0x25c>)
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]
		  joystick_y = 0;
 8001598:	4b39      	ldr	r3, [pc, #228]	; (8001680 <Startjoys_imuTask+0x260>)
 800159a:	2200      	movs	r2, #0
 800159c:	701a      	strb	r2, [r3, #0]
		  joystick_z = 0;
 800159e:	4b39      	ldr	r3, [pc, #228]	; (8001684 <Startjoys_imuTask+0x264>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2140      	movs	r1, #64	; 0x40
 80015a8:	482d      	ldr	r0, [pc, #180]	; (8001660 <Startjoys_imuTask+0x240>)
 80015aa:	f007 f89d 	bl	80086e8 <HAL_GPIO_WritePin>
	  }

	  //GYRO BNO055
	  HAL_UART_Receive_DMA(&huart4, imu_buf, sizeof(imu_buf));
 80015ae:	2220      	movs	r2, #32
 80015b0:	4939      	ldr	r1, [pc, #228]	; (8001698 <Startjoys_imuTask+0x278>)
 80015b2:	483a      	ldr	r0, [pc, #232]	; (800169c <Startjoys_imuTask+0x27c>)
 80015b4:	f008 ffce 	bl	800a554 <HAL_UART_Receive_DMA>
	  if(imu_buf[0] == 'i' && imu_buf[1] == 't' && imu_buf[2] == 's'){
 80015b8:	4b37      	ldr	r3, [pc, #220]	; (8001698 <Startjoys_imuTask+0x278>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b69      	cmp	r3, #105	; 0x69
 80015be:	d137      	bne.n	8001630 <Startjoys_imuTask+0x210>
 80015c0:	4b35      	ldr	r3, [pc, #212]	; (8001698 <Startjoys_imuTask+0x278>)
 80015c2:	785b      	ldrb	r3, [r3, #1]
 80015c4:	2b74      	cmp	r3, #116	; 0x74
 80015c6:	d133      	bne.n	8001630 <Startjoys_imuTask+0x210>
 80015c8:	4b33      	ldr	r3, [pc, #204]	; (8001698 <Startjoys_imuTask+0x278>)
 80015ca:	789b      	ldrb	r3, [r3, #2]
 80015cc:	2b73      	cmp	r3, #115	; 0x73
 80015ce:	d12f      	bne.n	8001630 <Startjoys_imuTask+0x210>
		  memcpy(&euler_x, imu_buf + 3, 4);
 80015d0:	4b33      	ldr	r3, [pc, #204]	; (80016a0 <Startjoys_imuTask+0x280>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	461a      	mov	r2, r3
 80015d6:	4b33      	ldr	r3, [pc, #204]	; (80016a4 <Startjoys_imuTask+0x284>)
 80015d8:	601a      	str	r2, [r3, #0]
		  memcpy(&euler_y, imu_buf + 7, 4);
 80015da:	4b33      	ldr	r3, [pc, #204]	; (80016a8 <Startjoys_imuTask+0x288>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	461a      	mov	r2, r3
 80015e0:	4b32      	ldr	r3, [pc, #200]	; (80016ac <Startjoys_imuTask+0x28c>)
 80015e2:	601a      	str	r2, [r3, #0]
		  memcpy(&euler_z, imu_buf + 11, 4);
 80015e4:	4b32      	ldr	r3, [pc, #200]	; (80016b0 <Startjoys_imuTask+0x290>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b32      	ldr	r3, [pc, #200]	; (80016b4 <Startjoys_imuTask+0x294>)
 80015ec:	601a      	str	r2, [r3, #0]
		  memcpy(&quat_w, imu_buf + 15, 4);
 80015ee:	4b32      	ldr	r3, [pc, #200]	; (80016b8 <Startjoys_imuTask+0x298>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	461a      	mov	r2, r3
 80015f4:	4b31      	ldr	r3, [pc, #196]	; (80016bc <Startjoys_imuTask+0x29c>)
 80015f6:	601a      	str	r2, [r3, #0]
		  memcpy(&quat_x, imu_buf + 19, 4);
 80015f8:	4b31      	ldr	r3, [pc, #196]	; (80016c0 <Startjoys_imuTask+0x2a0>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	461a      	mov	r2, r3
 80015fe:	4b31      	ldr	r3, [pc, #196]	; (80016c4 <Startjoys_imuTask+0x2a4>)
 8001600:	601a      	str	r2, [r3, #0]
		  memcpy(&quat_y, imu_buf + 23, 4);
 8001602:	4b31      	ldr	r3, [pc, #196]	; (80016c8 <Startjoys_imuTask+0x2a8>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	461a      	mov	r2, r3
 8001608:	4b30      	ldr	r3, [pc, #192]	; (80016cc <Startjoys_imuTask+0x2ac>)
 800160a:	601a      	str	r2, [r3, #0]
		  memcpy(&quat_z, imu_buf + 27, 4);
 800160c:	4b30      	ldr	r3, [pc, #192]	; (80016d0 <Startjoys_imuTask+0x2b0>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	461a      	mov	r2, r3
 8001612:	4b30      	ldr	r3, [pc, #192]	; (80016d4 <Startjoys_imuTask+0x2b4>)
 8001614:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 8001616:	2201      	movs	r2, #1
 8001618:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800161c:	482e      	ldr	r0, [pc, #184]	; (80016d8 <Startjoys_imuTask+0x2b8>)
 800161e:	f007 f863 	bl	80086e8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8001622:	2201      	movs	r2, #1
 8001624:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001628:	482b      	ldr	r0, [pc, #172]	; (80016d8 <Startjoys_imuTask+0x2b8>)
 800162a:	f007 f85d 	bl	80086e8 <HAL_GPIO_WritePin>
 800162e:	e00b      	b.n	8001648 <Startjoys_imuTask+0x228>
	  }else{
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8001630:	2200      	movs	r2, #0
 8001632:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001636:	4828      	ldr	r0, [pc, #160]	; (80016d8 <Startjoys_imuTask+0x2b8>)
 8001638:	f007 f856 	bl	80086e8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 800163c:	2200      	movs	r2, #0
 800163e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001642:	4825      	ldr	r0, [pc, #148]	; (80016d8 <Startjoys_imuTask+0x2b8>)
 8001644:	f007 f850 	bl	80086e8 <HAL_GPIO_WritePin>
	  }
    osDelay(1);
 8001648:	2001      	movs	r0, #1
 800164a:	f00a f8fe 	bl	800b84a <osDelay>
	  if(joystick_bt_counter < joystick_bt_timeout){
 800164e:	e6eb      	b.n	8001428 <Startjoys_imuTask+0x8>
 8001650:	2000040c 	.word	0x2000040c
 8001654:	20000004 	.word	0x20000004
 8001658:	200003f8 	.word	0x200003f8
 800165c:	20002d44 	.word	0x20002d44
 8001660:	40020c00 	.word	0x40020c00
 8001664:	200003fb 	.word	0x200003fb
 8001668:	20000406 	.word	0x20000406
 800166c:	200003fc 	.word	0x200003fc
 8001670:	20000405 	.word	0x20000405
 8001674:	200003fe 	.word	0x200003fe
 8001678:	20000407 	.word	0x20000407
 800167c:	20000408 	.word	0x20000408
 8001680:	20000409 	.word	0x20000409
 8001684:	2000040a 	.word	0x2000040a
 8001688:	20000410 	.word	0x20000410
 800168c:	20000414 	.word	0x20000414
 8001690:	20000418 	.word	0x20000418
 8001694:	2000041c 	.word	0x2000041c
 8001698:	2000042c 	.word	0x2000042c
 800169c:	20002c78 	.word	0x20002c78
 80016a0:	2000042f 	.word	0x2000042f
 80016a4:	2000044c 	.word	0x2000044c
 80016a8:	20000433 	.word	0x20000433
 80016ac:	20000450 	.word	0x20000450
 80016b0:	20000437 	.word	0x20000437
 80016b4:	20000454 	.word	0x20000454
 80016b8:	2000043b 	.word	0x2000043b
 80016bc:	20000458 	.word	0x20000458
 80016c0:	2000043f 	.word	0x2000043f
 80016c4:	2000045c 	.word	0x2000045c
 80016c8:	20000443 	.word	0x20000443
 80016cc:	20000460 	.word	0x20000460
 80016d0:	20000447 	.word	0x20000447
 80016d4:	20000464 	.word	0x20000464
 80016d8:	40021000 	.word	0x40021000

080016dc <StartrosserialTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartrosserialTask */
void StartrosserialTask(void const * argument)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartrosserialTask */
	setup();
 80016e4:	f001 ff18 	bl	8003518 <setup>
  for(;;)
  {
//	  calculate_odometry();
//	  loop();
//    osDelay(20);
	  tick++;
 80016e8:	4b05      	ldr	r3, [pc, #20]	; (8001700 <StartrosserialTask+0x24>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	3301      	adds	r3, #1
 80016ee:	4a04      	ldr	r2, [pc, #16]	; (8001700 <StartrosserialTask+0x24>)
 80016f0:	6013      	str	r3, [r2, #0]
	  loop();
 80016f2:	f001 ff59 	bl	80035a8 <loop>
	  osDelay(20);
 80016f6:	2014      	movs	r0, #20
 80016f8:	f00a f8a7 	bl	800b84a <osDelay>
	  tick++;
 80016fc:	e7f4      	b.n	80016e8 <StartrosserialTask+0xc>
 80016fe:	bf00      	nop
 8001700:	20000470 	.word	0x20000470

08001704 <Startout_motorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startout_motorTask */
void Startout_motorTask(void const * argument)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startout_motorTask */
  /* Infinite loop */
  for(;;)
  {
	  //=================CONTROL SPEED==================//
	  	  if(joystick_increase_speed == 1 && lock_increase_speed == 0){
 800170c:	4b88      	ldr	r3, [pc, #544]	; (8001930 <Startout_motorTask+0x22c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d10b      	bne.n	800172c <Startout_motorTask+0x28>
 8001714:	4b87      	ldr	r3, [pc, #540]	; (8001934 <Startout_motorTask+0x230>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d107      	bne.n	800172c <Startout_motorTask+0x28>
	  		  speed++;
 800171c:	4b86      	ldr	r3, [pc, #536]	; (8001938 <Startout_motorTask+0x234>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	3301      	adds	r3, #1
 8001722:	4a85      	ldr	r2, [pc, #532]	; (8001938 <Startout_motorTask+0x234>)
 8001724:	6013      	str	r3, [r2, #0]
	  		  lock_increase_speed = 1;
 8001726:	4b83      	ldr	r3, [pc, #524]	; (8001934 <Startout_motorTask+0x230>)
 8001728:	2201      	movs	r2, #1
 800172a:	601a      	str	r2, [r3, #0]
	  	  }
	  	  if(joystick_increase_speed == 0 && lock_increase_speed == 1){
 800172c:	4b80      	ldr	r3, [pc, #512]	; (8001930 <Startout_motorTask+0x22c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d106      	bne.n	8001742 <Startout_motorTask+0x3e>
 8001734:	4b7f      	ldr	r3, [pc, #508]	; (8001934 <Startout_motorTask+0x230>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d102      	bne.n	8001742 <Startout_motorTask+0x3e>
	  		  lock_increase_speed = 0;
 800173c:	4b7d      	ldr	r3, [pc, #500]	; (8001934 <Startout_motorTask+0x230>)
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
	  	  }

	  	  if(joystick_decrease_speed == 1 && lock_decrease_speed == 0){
 8001742:	4b7e      	ldr	r3, [pc, #504]	; (800193c <Startout_motorTask+0x238>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d10b      	bne.n	8001762 <Startout_motorTask+0x5e>
 800174a:	4b7d      	ldr	r3, [pc, #500]	; (8001940 <Startout_motorTask+0x23c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d107      	bne.n	8001762 <Startout_motorTask+0x5e>
	  		  speed--;
 8001752:	4b79      	ldr	r3, [pc, #484]	; (8001938 <Startout_motorTask+0x234>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	3b01      	subs	r3, #1
 8001758:	4a77      	ldr	r2, [pc, #476]	; (8001938 <Startout_motorTask+0x234>)
 800175a:	6013      	str	r3, [r2, #0]
	  		  lock_decrease_speed = 1;
 800175c:	4b78      	ldr	r3, [pc, #480]	; (8001940 <Startout_motorTask+0x23c>)
 800175e:	2201      	movs	r2, #1
 8001760:	601a      	str	r2, [r3, #0]
	  	  }
	  	  if(joystick_decrease_speed == 0 && lock_decrease_speed == 1){
 8001762:	4b76      	ldr	r3, [pc, #472]	; (800193c <Startout_motorTask+0x238>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d106      	bne.n	8001778 <Startout_motorTask+0x74>
 800176a:	4b75      	ldr	r3, [pc, #468]	; (8001940 <Startout_motorTask+0x23c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d102      	bne.n	8001778 <Startout_motorTask+0x74>
	  		  lock_decrease_speed = 0;
 8001772:	4b73      	ldr	r3, [pc, #460]	; (8001940 <Startout_motorTask+0x23c>)
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
	    	  }

	  	  if(speed > 2){
 8001778:	4b6f      	ldr	r3, [pc, #444]	; (8001938 <Startout_motorTask+0x234>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b02      	cmp	r3, #2
 800177e:	dd02      	ble.n	8001786 <Startout_motorTask+0x82>
	  		  speed = 0;
 8001780:	4b6d      	ldr	r3, [pc, #436]	; (8001938 <Startout_motorTask+0x234>)
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
	  	  }
	  	  if(speed < 0){
 8001786:	4b6c      	ldr	r3, [pc, #432]	; (8001938 <Startout_motorTask+0x234>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	da02      	bge.n	8001794 <Startout_motorTask+0x90>
	  		  speed = 2;
 800178e:	4b6a      	ldr	r3, [pc, #424]	; (8001938 <Startout_motorTask+0x234>)
 8001790:	2202      	movs	r2, #2
 8001792:	601a      	str	r2, [r3, #0]
	  	  }

	  	  if(speed == 0){
 8001794:	4b68      	ldr	r3, [pc, #416]	; (8001938 <Startout_motorTask+0x234>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d112      	bne.n	80017c2 <Startout_motorTask+0xbe>
	  		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 800179c:	2201      	movs	r2, #1
 800179e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017a2:	4868      	ldr	r0, [pc, #416]	; (8001944 <Startout_motorTask+0x240>)
 80017a4:	f006 ffa0 	bl	80086e8 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80017a8:	2200      	movs	r2, #0
 80017aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017ae:	4866      	ldr	r0, [pc, #408]	; (8001948 <Startout_motorTask+0x244>)
 80017b0:	f006 ff9a 	bl	80086e8 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80017b4:	2200      	movs	r2, #0
 80017b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017ba:	4863      	ldr	r0, [pc, #396]	; (8001948 <Startout_motorTask+0x244>)
 80017bc:	f006 ff94 	bl	80086e8 <HAL_GPIO_WritePin>
 80017c0:	e02c      	b.n	800181c <Startout_motorTask+0x118>
	  	  }else if(speed == 1){
 80017c2:	4b5d      	ldr	r3, [pc, #372]	; (8001938 <Startout_motorTask+0x234>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d112      	bne.n	80017f0 <Startout_motorTask+0xec>
	  		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 80017ca:	2200      	movs	r2, #0
 80017cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017d0:	485c      	ldr	r0, [pc, #368]	; (8001944 <Startout_motorTask+0x240>)
 80017d2:	f006 ff89 	bl	80086e8 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80017d6:	2201      	movs	r2, #1
 80017d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017dc:	485a      	ldr	r0, [pc, #360]	; (8001948 <Startout_motorTask+0x244>)
 80017de:	f006 ff83 	bl	80086e8 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80017e2:	2200      	movs	r2, #0
 80017e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017e8:	4857      	ldr	r0, [pc, #348]	; (8001948 <Startout_motorTask+0x244>)
 80017ea:	f006 ff7d 	bl	80086e8 <HAL_GPIO_WritePin>
 80017ee:	e015      	b.n	800181c <Startout_motorTask+0x118>
	  	  }else if(speed == 2){
 80017f0:	4b51      	ldr	r3, [pc, #324]	; (8001938 <Startout_motorTask+0x234>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d111      	bne.n	800181c <Startout_motorTask+0x118>
	  		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 80017f8:	2200      	movs	r2, #0
 80017fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017fe:	4851      	ldr	r0, [pc, #324]	; (8001944 <Startout_motorTask+0x240>)
 8001800:	f006 ff72 	bl	80086e8 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001804:	2200      	movs	r2, #0
 8001806:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800180a:	484f      	ldr	r0, [pc, #316]	; (8001948 <Startout_motorTask+0x244>)
 800180c:	f006 ff6c 	bl	80086e8 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001810:	2201      	movs	r2, #1
 8001812:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001816:	484c      	ldr	r0, [pc, #304]	; (8001948 <Startout_motorTask+0x244>)
 8001818:	f006 ff66 	bl	80086e8 <HAL_GPIO_WritePin>
	  	  }

	  	  //=====================SELECT MODE COMM/STM=================//
	  	  if(mode == 1){
 800181c:	4b4b      	ldr	r3, [pc, #300]	; (800194c <Startout_motorTask+0x248>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d10c      	bne.n	800183e <Startout_motorTask+0x13a>
	  		motor_VectorKinematic(angular_velocity, y_velocity, x_velocity);
 8001824:	4b4a      	ldr	r3, [pc, #296]	; (8001950 <Startout_motorTask+0x24c>)
 8001826:	f9b3 3000 	ldrsh.w	r3, [r3]
 800182a:	4a4a      	ldr	r2, [pc, #296]	; (8001954 <Startout_motorTask+0x250>)
 800182c:	f9b2 1000 	ldrsh.w	r1, [r2]
 8001830:	4a49      	ldr	r2, [pc, #292]	; (8001958 <Startout_motorTask+0x254>)
 8001832:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff fb3e 	bl	8000eb8 <motor_VectorKinematic>
 800183c:	e012      	b.n	8001864 <Startout_motorTask+0x160>
	  	  }
	  	  else if(mode == 0){
 800183e:	4b43      	ldr	r3, [pc, #268]	; (800194c <Startout_motorTask+0x248>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d10e      	bne.n	8001864 <Startout_motorTask+0x160>
	  		motor_VectorKinematic(joystick_z, joystick_y, joystick_x);
 8001846:	4b45      	ldr	r3, [pc, #276]	; (800195c <Startout_motorTask+0x258>)
 8001848:	f993 3000 	ldrsb.w	r3, [r3]
 800184c:	b21b      	sxth	r3, r3
 800184e:	4a44      	ldr	r2, [pc, #272]	; (8001960 <Startout_motorTask+0x25c>)
 8001850:	f992 2000 	ldrsb.w	r2, [r2]
 8001854:	b211      	sxth	r1, r2
 8001856:	4a43      	ldr	r2, [pc, #268]	; (8001964 <Startout_motorTask+0x260>)
 8001858:	f992 2000 	ldrsb.w	r2, [r2]
 800185c:	b212      	sxth	r2, r2
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff fb2a 	bl	8000eb8 <motor_VectorKinematic>
	  	  }
	  	  //========================OUTPUT PWM===========================//
	  	  if (outputPWM[1] < 0){
 8001864:	4b40      	ldr	r3, [pc, #256]	; (8001968 <Startout_motorTask+0x264>)
 8001866:	edd3 7a01 	vldr	s15, [r3, #4]
 800186a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800186e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001872:	d50c      	bpl.n	800188e <Startout_motorTask+0x18a>
	  		  HAL_GPIO_WritePin(MOTOR1A_GPIO_Port, MOTOR1A_Pin, GPIO_PIN_SET);
 8001874:	2201      	movs	r2, #1
 8001876:	f44f 7180 	mov.w	r1, #256	; 0x100
 800187a:	483c      	ldr	r0, [pc, #240]	; (800196c <Startout_motorTask+0x268>)
 800187c:	f006 ff34 	bl	80086e8 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(MOTOR1B_GPIO_Port, MOTOR1B_Pin, GPIO_PIN_RESET);
 8001880:	2200      	movs	r2, #0
 8001882:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001886:	4839      	ldr	r0, [pc, #228]	; (800196c <Startout_motorTask+0x268>)
 8001888:	f006 ff2e 	bl	80086e8 <HAL_GPIO_WritePin>
 800188c:	e013      	b.n	80018b6 <Startout_motorTask+0x1b2>
	  	 	  }
	  	  else if (outputPWM[1] > 0){
 800188e:	4b36      	ldr	r3, [pc, #216]	; (8001968 <Startout_motorTask+0x264>)
 8001890:	edd3 7a01 	vldr	s15, [r3, #4]
 8001894:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800189c:	dd0b      	ble.n	80018b6 <Startout_motorTask+0x1b2>
	   		  HAL_GPIO_WritePin(MOTOR1A_GPIO_Port, MOTOR1A_Pin, GPIO_PIN_RESET);
 800189e:	2200      	movs	r2, #0
 80018a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018a4:	4831      	ldr	r0, [pc, #196]	; (800196c <Startout_motorTask+0x268>)
 80018a6:	f006 ff1f 	bl	80086e8 <HAL_GPIO_WritePin>
	   		  HAL_GPIO_WritePin(MOTOR1B_GPIO_Port, MOTOR1B_Pin, GPIO_PIN_SET);
 80018aa:	2201      	movs	r2, #1
 80018ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018b0:	482e      	ldr	r0, [pc, #184]	; (800196c <Startout_motorTask+0x268>)
 80018b2:	f006 ff19 	bl	80086e8 <HAL_GPIO_WritePin>
	   	  }
	   	  //==============================================================================
	   	  if (outputPWM[2] < 0){
 80018b6:	4b2c      	ldr	r3, [pc, #176]	; (8001968 <Startout_motorTask+0x264>)
 80018b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80018bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c4:	d50b      	bpl.n	80018de <Startout_motorTask+0x1da>
	   		  HAL_GPIO_WritePin(MOTOR2A_GPIO_Port, MOTOR2A_Pin, GPIO_PIN_SET);
 80018c6:	2201      	movs	r2, #1
 80018c8:	2180      	movs	r1, #128	; 0x80
 80018ca:	481e      	ldr	r0, [pc, #120]	; (8001944 <Startout_motorTask+0x240>)
 80018cc:	f006 ff0c 	bl	80086e8 <HAL_GPIO_WritePin>
	   		  HAL_GPIO_WritePin(MOTOR2B_GPIO_Port, MOTOR2B_Pin, GPIO_PIN_RESET);
 80018d0:	2200      	movs	r2, #0
 80018d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018d6:	481b      	ldr	r0, [pc, #108]	; (8001944 <Startout_motorTask+0x240>)
 80018d8:	f006 ff06 	bl	80086e8 <HAL_GPIO_WritePin>
 80018dc:	e012      	b.n	8001904 <Startout_motorTask+0x200>
	   	  }
	   	  else if (outputPWM[2] > 0){
 80018de:	4b22      	ldr	r3, [pc, #136]	; (8001968 <Startout_motorTask+0x264>)
 80018e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80018e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ec:	dd0a      	ble.n	8001904 <Startout_motorTask+0x200>
	   		  HAL_GPIO_WritePin(MOTOR2A_GPIO_Port, MOTOR2A_Pin, GPIO_PIN_RESET);
 80018ee:	2200      	movs	r2, #0
 80018f0:	2180      	movs	r1, #128	; 0x80
 80018f2:	4814      	ldr	r0, [pc, #80]	; (8001944 <Startout_motorTask+0x240>)
 80018f4:	f006 fef8 	bl	80086e8 <HAL_GPIO_WritePin>
	   		  HAL_GPIO_WritePin(MOTOR2B_GPIO_Port, MOTOR2B_Pin, GPIO_PIN_SET);
 80018f8:	2201      	movs	r2, #1
 80018fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018fe:	4811      	ldr	r0, [pc, #68]	; (8001944 <Startout_motorTask+0x240>)
 8001900:	f006 fef2 	bl	80086e8 <HAL_GPIO_WritePin>
	   	  }
	   	  //==============================================================================
	   	  if (outputPWM[0] < 0){
 8001904:	4b18      	ldr	r3, [pc, #96]	; (8001968 <Startout_motorTask+0x264>)
 8001906:	edd3 7a00 	vldr	s15, [r3]
 800190a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800190e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001912:	d52f      	bpl.n	8001974 <Startout_motorTask+0x270>
	   		  HAL_GPIO_WritePin(MOTOR3A_GPIO_Port, MOTOR3A_Pin, GPIO_PIN_SET);
 8001914:	2201      	movs	r2, #1
 8001916:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800191a:	4815      	ldr	r0, [pc, #84]	; (8001970 <Startout_motorTask+0x26c>)
 800191c:	f006 fee4 	bl	80086e8 <HAL_GPIO_WritePin>
	   		  HAL_GPIO_WritePin(MOTOR3B_GPIO_Port, MOTOR3B_Pin, GPIO_PIN_RESET);
 8001920:	2200      	movs	r2, #0
 8001922:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001926:	4812      	ldr	r0, [pc, #72]	; (8001970 <Startout_motorTask+0x26c>)
 8001928:	f006 fede 	bl	80086e8 <HAL_GPIO_WritePin>
 800192c:	e036      	b.n	800199c <Startout_motorTask+0x298>
 800192e:	bf00      	nop
 8001930:	20000418 	.word	0x20000418
 8001934:	20000424 	.word	0x20000424
 8001938:	20000420 	.word	0x20000420
 800193c:	2000041c 	.word	0x2000041c
 8001940:	20000428 	.word	0x20000428
 8001944:	40021000 	.word	0x40021000
 8001948:	40020000 	.word	0x40020000
 800194c:	20000414 	.word	0x20000414
 8001950:	2000046c 	.word	0x2000046c
 8001954:	2000046a 	.word	0x2000046a
 8001958:	20000468 	.word	0x20000468
 800195c:	2000040a 	.word	0x2000040a
 8001960:	20000409 	.word	0x20000409
 8001964:	20000408 	.word	0x20000408
 8001968:	200003ec 	.word	0x200003ec
 800196c:	40020800 	.word	0x40020800
 8001970:	40020c00 	.word	0x40020c00
	   	  }
	   	  else if (outputPWM[0] > 0)
 8001974:	4b2b      	ldr	r3, [pc, #172]	; (8001a24 <Startout_motorTask+0x320>)
 8001976:	edd3 7a00 	vldr	s15, [r3]
 800197a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800197e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001982:	dd0b      	ble.n	800199c <Startout_motorTask+0x298>
	   	  {
	   		  HAL_GPIO_WritePin(MOTOR3A_GPIO_Port, MOTOR3A_Pin, GPIO_PIN_RESET);
 8001984:	2200      	movs	r2, #0
 8001986:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800198a:	4827      	ldr	r0, [pc, #156]	; (8001a28 <Startout_motorTask+0x324>)
 800198c:	f006 feac 	bl	80086e8 <HAL_GPIO_WritePin>
	   		  HAL_GPIO_WritePin(MOTOR3B_GPIO_Port, MOTOR3B_Pin, GPIO_PIN_SET);
 8001990:	2201      	movs	r2, #1
 8001992:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001996:	4824      	ldr	r0, [pc, #144]	; (8001a28 <Startout_motorTask+0x324>)
 8001998:	f006 fea6 	bl	80086e8 <HAL_GPIO_WritePin>
	   	  }

	   	  //========================SAFETY CONTROL PWM=====================//
	   	  if(joystick_bt_counter == 299 || joystick_mode == 0){
 800199c:	4b23      	ldr	r3, [pc, #140]	; (8001a2c <Startout_motorTask+0x328>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f240 122b 	movw	r2, #299	; 0x12b
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d003      	beq.n	80019b0 <Startout_motorTask+0x2ac>
 80019a8:	4b21      	ldr	r3, [pc, #132]	; (8001a30 <Startout_motorTask+0x32c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d10b      	bne.n	80019c8 <Startout_motorTask+0x2c4>
	   		  outputPWM[0] = 0;
 80019b0:	4b1c      	ldr	r3, [pc, #112]	; (8001a24 <Startout_motorTask+0x320>)
 80019b2:	f04f 0200 	mov.w	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
	   		  outputPWM[1] = 0;
 80019b8:	4b1a      	ldr	r3, [pc, #104]	; (8001a24 <Startout_motorTask+0x320>)
 80019ba:	f04f 0200 	mov.w	r2, #0
 80019be:	605a      	str	r2, [r3, #4]
	   		  outputPWM[2] = 0;
 80019c0:	4b18      	ldr	r3, [pc, #96]	; (8001a24 <Startout_motorTask+0x320>)
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	609a      	str	r2, [r3, #8]
	   	  }

	   	  __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, abs(outputPWM[1]));
 80019c8:	4b16      	ldr	r3, [pc, #88]	; (8001a24 <Startout_motorTask+0x320>)
 80019ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80019ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019d2:	ee17 3a90 	vmov	r3, s15
 80019d6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80019da:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <Startout_motorTask+0x330>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	635a      	str	r2, [r3, #52]	; 0x34
	   	  __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, abs(outputPWM[2]));
 80019e4:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <Startout_motorTask+0x320>)
 80019e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80019ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019ee:	ee17 3a90 	vmov	r3, s15
 80019f2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80019f6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80019fa:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <Startout_motorTask+0x330>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	639a      	str	r2, [r3, #56]	; 0x38
	   	  __HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, abs(outputPWM[0]));
 8001a00:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <Startout_motorTask+0x320>)
 8001a02:	edd3 7a00 	vldr	s15, [r3]
 8001a06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a0a:	ee17 3a90 	vmov	r3, s15
 8001a0e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001a12:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001a16:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <Startout_motorTask+0x334>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	639a      	str	r2, [r3, #56]	; 0x38

	   	  osDelay(1);
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	f009 ff14 	bl	800b84a <osDelay>
	  	  if(joystick_increase_speed == 1 && lock_increase_speed == 0){
 8001a22:	e673      	b.n	800170c <Startout_motorTask+0x8>
 8001a24:	200003ec 	.word	0x200003ec
 8001a28:	40020c00 	.word	0x40020c00
 8001a2c:	2000040c 	.word	0x2000040c
 8001a30:	20000410 	.word	0x20000410
 8001a34:	20002ba0 	.word	0x20002ba0
 8001a38:	20002be8 	.word	0x20002be8

08001a3c <MX_GPIO_Init>:
     PD1   ------> CAN1_TX
     PB8   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08c      	sub	sp, #48	; 0x30
 8001a40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a42:	f107 031c 	add.w	r3, r7, #28
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	605a      	str	r2, [r3, #4]
 8001a4c:	609a      	str	r2, [r3, #8]
 8001a4e:	60da      	str	r2, [r3, #12]
 8001a50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	61bb      	str	r3, [r7, #24]
 8001a56:	4b96      	ldr	r3, [pc, #600]	; (8001cb0 <MX_GPIO_Init+0x274>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	4a95      	ldr	r2, [pc, #596]	; (8001cb0 <MX_GPIO_Init+0x274>)
 8001a5c:	f043 0310 	orr.w	r3, r3, #16
 8001a60:	6313      	str	r3, [r2, #48]	; 0x30
 8001a62:	4b93      	ldr	r3, [pc, #588]	; (8001cb0 <MX_GPIO_Init+0x274>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	f003 0310 	and.w	r3, r3, #16
 8001a6a:	61bb      	str	r3, [r7, #24]
 8001a6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	4b8f      	ldr	r3, [pc, #572]	; (8001cb0 <MX_GPIO_Init+0x274>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	4a8e      	ldr	r2, [pc, #568]	; (8001cb0 <MX_GPIO_Init+0x274>)
 8001a78:	f043 0304 	orr.w	r3, r3, #4
 8001a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7e:	4b8c      	ldr	r3, [pc, #560]	; (8001cb0 <MX_GPIO_Init+0x274>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	f003 0304 	and.w	r3, r3, #4
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	4b88      	ldr	r3, [pc, #544]	; (8001cb0 <MX_GPIO_Init+0x274>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	4a87      	ldr	r2, [pc, #540]	; (8001cb0 <MX_GPIO_Init+0x274>)
 8001a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a98:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9a:	4b85      	ldr	r3, [pc, #532]	; (8001cb0 <MX_GPIO_Init+0x274>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	4b81      	ldr	r3, [pc, #516]	; (8001cb0 <MX_GPIO_Init+0x274>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	4a80      	ldr	r2, [pc, #512]	; (8001cb0 <MX_GPIO_Init+0x274>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab6:	4b7e      	ldr	r3, [pc, #504]	; (8001cb0 <MX_GPIO_Init+0x274>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	4b7a      	ldr	r3, [pc, #488]	; (8001cb0 <MX_GPIO_Init+0x274>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	4a79      	ldr	r2, [pc, #484]	; (8001cb0 <MX_GPIO_Init+0x274>)
 8001acc:	f043 0302 	orr.w	r3, r3, #2
 8001ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad2:	4b77      	ldr	r3, [pc, #476]	; (8001cb0 <MX_GPIO_Init+0x274>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	60bb      	str	r3, [r7, #8]
 8001adc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	607b      	str	r3, [r7, #4]
 8001ae2:	4b73      	ldr	r3, [pc, #460]	; (8001cb0 <MX_GPIO_Init+0x274>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	4a72      	ldr	r2, [pc, #456]	; (8001cb0 <MX_GPIO_Init+0x274>)
 8001ae8:	f043 0308 	orr.w	r3, r3, #8
 8001aec:	6313      	str	r3, [r2, #48]	; 0x30
 8001aee:	4b70      	ldr	r3, [pc, #448]	; (8001cb0 <MX_GPIO_Init+0x274>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	607b      	str	r3, [r7, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|MOTOR2A_Pin|MOTOR2B_Pin|GPIO_PIN_10
 8001afa:	2200      	movs	r2, #0
 8001afc:	f24f 5189 	movw	r1, #62857	; 0xf589
 8001b00:	486c      	ldr	r0, [pc, #432]	; (8001cb4 <MX_GPIO_Init+0x278>)
 8001b02:	f006 fdf1 	bl	80086e8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001b06:	2201      	movs	r2, #1
 8001b08:	2101      	movs	r1, #1
 8001b0a:	486b      	ldr	r0, [pc, #428]	; (8001cb8 <MX_GPIO_Init+0x27c>)
 8001b0c:	f006 fdec 	bl	80086e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD1_Pin|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001b10:	2200      	movs	r2, #0
 8001b12:	f641 0102 	movw	r1, #6146	; 0x1802
 8001b16:	4869      	ldr	r0, [pc, #420]	; (8001cbc <MX_GPIO_Init+0x280>)
 8001b18:	f006 fde6 	bl	80086e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|MOTOR1A_Pin|MOTOR1B_Pin, GPIO_PIN_RESET);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f44f 714c 	mov.w	r1, #816	; 0x330
 8001b22:	4865      	ldr	r0, [pc, #404]	; (8001cb8 <MX_GPIO_Init+0x27c>)
 8001b24:	f006 fde0 	bl	80086e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MOTOR3A_Pin|MOTOR3B_Pin|Audio_RST_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f44f 6145 	mov.w	r1, #3152	; 0xc50
 8001b2e:	4864      	ldr	r0, [pc, #400]	; (8001cc0 <MX_GPIO_Init+0x284>)
 8001b30:	f006 fdda 	bl	80086e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PEPin PEPin PE10
                           PE12 PE13 PE14 PE15
                           PEPin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|MOTOR2A_Pin|MOTOR2B_Pin|GPIO_PIN_10
 8001b34:	f24f 5389 	movw	r3, #62857	; 0xf589
 8001b38:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b42:	2300      	movs	r3, #0
 8001b44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b46:	f107 031c 	add.w	r3, r7, #28
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4859      	ldr	r0, [pc, #356]	; (8001cb4 <MX_GPIO_Init+0x278>)
 8001b4e:	f006 fc2f 	bl	80083b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PC4 PC5 PCPin
                           PCPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_4|GPIO_PIN_5|MOTOR1A_Pin
 8001b52:	f240 3331 	movw	r3, #817	; 0x331
 8001b56:	61fb      	str	r3, [r7, #28]
                          |MOTOR1B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b60:	2300      	movs	r3, #0
 8001b62:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b64:	f107 031c 	add.w	r3, r7, #28
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4853      	ldr	r0, [pc, #332]	; (8001cb8 <MX_GPIO_Init+0x27c>)
 8001b6c:	f006 fc20 	bl	80083b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001b70:	2306      	movs	r3, #6
 8001b72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b74:	2303      	movs	r3, #3
 8001b76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b7c:	f107 031c 	add.w	r3, r7, #28
 8001b80:	4619      	mov	r1, r3
 8001b82:	484d      	ldr	r0, [pc, #308]	; (8001cb8 <MX_GPIO_Init+0x27c>)
 8001b84:	f006 fc14 	bl	80083b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b8c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001b90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b96:	f107 031c 	add.w	r3, r7, #28
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4847      	ldr	r0, [pc, #284]	; (8001cbc <MX_GPIO_Init+0x280>)
 8001b9e:	f006 fc07 	bl	80083b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA11 PA12 */
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_11|GPIO_PIN_12;
 8001ba2:	f641 0302 	movw	r3, #6146	; 0x1802
 8001ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb4:	f107 031c 	add.w	r3, r7, #28
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4840      	ldr	r0, [pc, #256]	; (8001cbc <MX_GPIO_Init+0x280>)
 8001bbc:	f006 fbf8 	bl	80083b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001bc0:	2310      	movs	r3, #16
 8001bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bd0:	2305      	movs	r3, #5
 8001bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd4:	f107 031c 	add.w	r3, r7, #28
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4838      	ldr	r0, [pc, #224]	; (8001cbc <MX_GPIO_Init+0x280>)
 8001bdc:	f006 fbe8 	bl	80083b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8001be0:	f243 0307 	movw	r3, #12295	; 0x3007
 8001be4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001be6:	2300      	movs	r3, #0
 8001be8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bee:	f107 031c 	add.w	r3, r7, #28
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4833      	ldr	r0, [pc, #204]	; (8001cc4 <MX_GPIO_Init+0x288>)
 8001bf6:	f006 fbdb 	bl	80083b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = MOTOR3A_Pin|MOTOR3B_Pin|Audio_RST_Pin|LED2_Pin;
 8001bfa:	f44f 6345 	mov.w	r3, #3152	; 0xc50
 8001bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c00:	2301      	movs	r3, #1
 8001c02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c0c:	f107 031c 	add.w	r3, r7, #28
 8001c10:	4619      	mov	r1, r3
 8001c12:	482b      	ldr	r0, [pc, #172]	; (8001cc0 <MX_GPIO_Init+0x284>)
 8001c14:	f006 fbcc 	bl	80083b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001c18:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c26:	f107 031c 	add.w	r3, r7, #28
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4824      	ldr	r0, [pc, #144]	; (8001cc0 <MX_GPIO_Init+0x284>)
 8001c2e:	f006 fbbf 	bl	80083b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c32:	2303      	movs	r3, #3
 8001c34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c36:	2302      	movs	r3, #2
 8001c38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001c42:	2309      	movs	r3, #9
 8001c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c46:	f107 031c 	add.w	r3, r7, #28
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	481c      	ldr	r0, [pc, #112]	; (8001cc0 <MX_GPIO_Init+0x284>)
 8001c4e:	f006 fbaf 	bl	80083b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001c52:	2320      	movs	r3, #32
 8001c54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c56:	2300      	movs	r3, #0
 8001c58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001c5e:	f107 031c 	add.w	r3, r7, #28
 8001c62:	4619      	mov	r1, r3
 8001c64:	4816      	ldr	r0, [pc, #88]	; (8001cc0 <MX_GPIO_Init+0x284>)
 8001c66:	f006 fba3 	bl	80083b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001c6a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c70:	2312      	movs	r3, #18
 8001c72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c74:	2301      	movs	r3, #1
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c7c:	2304      	movs	r3, #4
 8001c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c80:	f107 031c 	add.w	r3, r7, #28
 8001c84:	4619      	mov	r1, r3
 8001c86:	480f      	ldr	r0, [pc, #60]	; (8001cc4 <MX_GPIO_Init+0x288>)
 8001c88:	f006 fb92 	bl	80083b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001c90:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001c94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001c9a:	f107 031c 	add.w	r3, r7, #28
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4804      	ldr	r0, [pc, #16]	; (8001cb4 <MX_GPIO_Init+0x278>)
 8001ca2:	f006 fb85 	bl	80083b0 <HAL_GPIO_Init>

}
 8001ca6:	bf00      	nop
 8001ca8:	3730      	adds	r7, #48	; 0x30
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	40020800 	.word	0x40020800
 8001cbc:	40020000 	.word	0x40020000
 8001cc0:	40020c00 	.word	0x40020c00
 8001cc4:	40020400 	.word	0x40020400

08001cc8 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cd8:	d105      	bne.n	8001ce6 <HAL_TIM_IC_CaptureCallback+0x1e>
		encoder[0] = __HAL_TIM_GET_COUNTER(&htim2);
 8001cda:	4b1c      	ldr	r3, [pc, #112]	; (8001d4c <HAL_TIM_IC_CaptureCallback+0x84>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4b1b      	ldr	r3, [pc, #108]	; (8001d50 <HAL_TIM_IC_CaptureCallback+0x88>)
 8001ce4:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM3){
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a1a      	ldr	r2, [pc, #104]	; (8001d54 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d105      	bne.n	8001cfc <HAL_TIM_IC_CaptureCallback+0x34>
		encoder[1] = __HAL_TIM_GET_COUNTER(&htim3);
 8001cf0:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <HAL_TIM_IC_CaptureCallback+0x90>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <HAL_TIM_IC_CaptureCallback+0x88>)
 8001cfa:	605a      	str	r2, [r3, #4]
	}
	if(htim->Instance == TIM4){
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a16      	ldr	r2, [pc, #88]	; (8001d5c <HAL_TIM_IC_CaptureCallback+0x94>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d105      	bne.n	8001d12 <HAL_TIM_IC_CaptureCallback+0x4a>
		encoder[2] = __HAL_TIM_GET_COUNTER(&htim4);
 8001d06:	4b16      	ldr	r3, [pc, #88]	; (8001d60 <HAL_TIM_IC_CaptureCallback+0x98>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <HAL_TIM_IC_CaptureCallback+0x88>)
 8001d10:	609a      	str	r2, [r3, #8]
	}

	if(htim->Instance == TIM1){
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a13      	ldr	r2, [pc, #76]	; (8001d64 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d105      	bne.n	8001d28 <HAL_TIM_IC_CaptureCallback+0x60>
		odometry[0] = __HAL_TIM_GET_COUNTER(&htim1);
 8001d1c:	4b12      	ldr	r3, [pc, #72]	; (8001d68 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d22:	461a      	mov	r2, r3
 8001d24:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <HAL_TIM_IC_CaptureCallback+0xa4>)
 8001d26:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM8){
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a10      	ldr	r2, [pc, #64]	; (8001d70 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d105      	bne.n	8001d3e <HAL_TIM_IC_CaptureCallback+0x76>
		odometry[1] = __HAL_TIM_GET_COUNTER(&htim8);
 8001d32:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <HAL_TIM_IC_CaptureCallback+0xac>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <HAL_TIM_IC_CaptureCallback+0xa4>)
 8001d3c:	605a      	str	r2, [r3, #4]
	}
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	20002a38 	.word	0x20002a38
 8001d50:	20000388 	.word	0x20000388
 8001d54:	40000400 	.word	0x40000400
 8001d58:	20002a80 	.word	0x20002a80
 8001d5c:	40000800 	.word	0x40000800
 8001d60:	20002ac8 	.word	0x20002ac8
 8001d64:	40010000 	.word	0x40010000
 8001d68:	200029f0 	.word	0x200029f0
 8001d6c:	20000008 	.word	0x20000008
 8001d70:	40010400 	.word	0x40010400
 8001d74:	20002b58 	.word	0x20002b58

08001d78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d7c:	f005 fdf2 	bl	8007964 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d80:	f000 f862 	bl	8001e48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d84:	f7ff fe5a 	bl	8001a3c <MX_GPIO_Init>
  MX_DMA_Init();
 8001d88:	f7ff faae 	bl	80012e8 <MX_DMA_Init>
  MX_TIM1_Init();
 8001d8c:	f004 fd88 	bl	80068a0 <MX_TIM1_Init>
  MX_TIM9_Init();
 8001d90:	f004 ff68 	bl	8006c64 <MX_TIM9_Init>
  MX_TIM4_Init();
 8001d94:	f004 fe84 	bl	8006aa0 <MX_TIM4_Init>
  MX_TIM3_Init();
 8001d98:	f004 fe2e 	bl	80069f8 <MX_TIM3_Init>
  MX_UART4_Init();
 8001d9c:	f005 faba 	bl	8007314 <MX_UART4_Init>
  MX_USART3_UART_Init();
 8001da0:	f005 fb60 	bl	8007464 <MX_USART3_UART_Init>
  MX_TIM12_Init();
 8001da4:	f004 ffca 	bl	8006d3c <MX_TIM12_Init>
  MX_USART2_UART_Init();
 8001da8:	f005 fb32 	bl	8007410 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001dac:	f004 fdd0 	bl	8006950 <MX_TIM2_Init>
  MX_TIM8_Init();
 8001db0:	f004 ff00 	bl	8006bb4 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8001db4:	f005 fb02 	bl	80073bc <MX_USART1_UART_Init>
  MX_TIM7_Init();
 8001db8:	f004 fec6 	bl	8006b48 <MX_TIM7_Init>
  MX_TIM13_Init();
 8001dbc:	f005 f82a 	bl	8006e14 <MX_TIM13_Init>
  MX_UART5_Init();
 8001dc0:	f005 fad2 	bl	8007368 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 8001dc4:	4817      	ldr	r0, [pc, #92]	; (8001e24 <main+0xac>)
 8001dc6:	f007 f9c3 	bl	8009150 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim13);
 8001dca:	4817      	ldr	r0, [pc, #92]	; (8001e28 <main+0xb0>)
 8001dcc:	f007 f9c0 	bl	8009150 <HAL_TIM_Base_Start_IT>

  //============ACTUATOR MOTOR============
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);//M1
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	4816      	ldr	r0, [pc, #88]	; (8001e2c <main+0xb4>)
 8001dd4:	f007 fa86 	bl	80092e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);//M2
 8001dd8:	2104      	movs	r1, #4
 8001dda:	4814      	ldr	r0, [pc, #80]	; (8001e2c <main+0xb4>)
 8001ddc:	f007 fa82 	bl	80092e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);//M3
 8001de0:	2104      	movs	r1, #4
 8001de2:	4813      	ldr	r0, [pc, #76]	; (8001e30 <main+0xb8>)
 8001de4:	f007 fa7e 	bl	80092e4 <HAL_TIM_PWM_Start>

  //=============EXTERNAL PWM=============
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);//EXTERNAL PWM
 8001de8:	2100      	movs	r1, #0
 8001dea:	4811      	ldr	r0, [pc, #68]	; (8001e30 <main+0xb8>)
 8001dec:	f007 fa7a 	bl	80092e4 <HAL_TIM_PWM_Start>

  //=============ENCODER MOTOR============
  HAL_TIM_Encoder_Start_IT(&htim2,TIM_CHANNEL_ALL);
 8001df0:	213c      	movs	r1, #60	; 0x3c
 8001df2:	4810      	ldr	r0, [pc, #64]	; (8001e34 <main+0xbc>)
 8001df4:	f007 fbe4 	bl	80095c0 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_ALL);
 8001df8:	213c      	movs	r1, #60	; 0x3c
 8001dfa:	480f      	ldr	r0, [pc, #60]	; (8001e38 <main+0xc0>)
 8001dfc:	f007 fbe0 	bl	80095c0 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4,TIM_CHANNEL_ALL);
 8001e00:	213c      	movs	r1, #60	; 0x3c
 8001e02:	480e      	ldr	r0, [pc, #56]	; (8001e3c <main+0xc4>)
 8001e04:	f007 fbdc 	bl	80095c0 <HAL_TIM_Encoder_Start_IT>

  HAL_TIM_Encoder_Start_IT(&htim1,TIM_CHANNEL_ALL);
 8001e08:	213c      	movs	r1, #60	; 0x3c
 8001e0a:	480d      	ldr	r0, [pc, #52]	; (8001e40 <main+0xc8>)
 8001e0c:	f007 fbd8 	bl	80095c0 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim8,TIM_CHANNEL_ALL);
 8001e10:	213c      	movs	r1, #60	; 0x3c
 8001e12:	480c      	ldr	r0, [pc, #48]	; (8001e44 <main+0xcc>)
 8001e14:	f007 fbd4 	bl	80095c0 <HAL_TIM_Encoder_Start_IT>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001e18:	f7ff fab8 	bl	800138c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001e1c:	f009 fcc2 	bl	800b7a4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001e20:	e7fe      	b.n	8001e20 <main+0xa8>
 8001e22:	bf00      	nop
 8001e24:	20002b10 	.word	0x20002b10
 8001e28:	20002c30 	.word	0x20002c30
 8001e2c:	20002ba0 	.word	0x20002ba0
 8001e30:	20002be8 	.word	0x20002be8
 8001e34:	20002a38 	.word	0x20002a38
 8001e38:	20002a80 	.word	0x20002a80
 8001e3c:	20002ac8 	.word	0x20002ac8
 8001e40:	200029f0 	.word	0x200029f0
 8001e44:	20002b58 	.word	0x20002b58

08001e48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b094      	sub	sp, #80	; 0x50
 8001e4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e4e:	f107 0320 	add.w	r3, r7, #32
 8001e52:	2230      	movs	r2, #48	; 0x30
 8001e54:	2100      	movs	r1, #0
 8001e56:	4618      	mov	r0, r3
 8001e58:	f00c fda2 	bl	800e9a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e5c:	f107 030c 	add.w	r3, r7, #12
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	4b28      	ldr	r3, [pc, #160]	; (8001f14 <SystemClock_Config+0xcc>)
 8001e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e74:	4a27      	ldr	r2, [pc, #156]	; (8001f14 <SystemClock_Config+0xcc>)
 8001e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e7a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7c:	4b25      	ldr	r3, [pc, #148]	; (8001f14 <SystemClock_Config+0xcc>)
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e84:	60bb      	str	r3, [r7, #8]
 8001e86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e88:	2300      	movs	r3, #0
 8001e8a:	607b      	str	r3, [r7, #4]
 8001e8c:	4b22      	ldr	r3, [pc, #136]	; (8001f18 <SystemClock_Config+0xd0>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a21      	ldr	r2, [pc, #132]	; (8001f18 <SystemClock_Config+0xd0>)
 8001e92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e96:	6013      	str	r3, [r2, #0]
 8001e98:	4b1f      	ldr	r3, [pc, #124]	; (8001f18 <SystemClock_Config+0xd0>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ea0:	607b      	str	r3, [r7, #4]
 8001ea2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ea8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001eb2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001eb8:	2308      	movs	r3, #8
 8001eba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001ebc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001ec0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001ec6:	2307      	movs	r3, #7
 8001ec8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eca:	f107 0320 	add.w	r3, r7, #32
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f006 fc24 	bl	800871c <HAL_RCC_OscConfig>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001eda:	f000 f839 	bl	8001f50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ede:	230f      	movs	r3, #15
 8001ee0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001eea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001eee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ef4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ef6:	f107 030c 	add.w	r3, r7, #12
 8001efa:	2105      	movs	r1, #5
 8001efc:	4618      	mov	r0, r3
 8001efe:	f006 fe85 	bl	8008c0c <HAL_RCC_ClockConfig>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001f08:	f000 f822 	bl	8001f50 <Error_Handler>
  }
}
 8001f0c:	bf00      	nop
 8001f0e:	3750      	adds	r7, #80	; 0x50
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40023800 	.word	0x40023800
 8001f18:	40007000 	.word	0x40007000

08001f1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM7){
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a07      	ldr	r2, [pc, #28]	; (8001f48 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d101      	bne.n	8001f32 <HAL_TIM_PeriodElapsedCallback+0x16>
		motor_VeloControl();
 8001f2e:	f7ff f88f 	bl	8001050 <motor_VeloControl>
	}
	if (htim->Instance == TIM13){
//		motor_VectorKinematic(joystick_x, joystick_y, joystick_z);
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a05      	ldr	r2, [pc, #20]	; (8001f4c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d101      	bne.n	8001f40 <HAL_TIM_PeriodElapsedCallback+0x24>
    HAL_IncTick();
 8001f3c:	f005 fd34 	bl	80079a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f40:	bf00      	nop
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40001400 	.word	0x40001400
 8001f4c:	40001000 	.word	0x40001000

08001f50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f54:	b672      	cpsid	i
}
 8001f56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f58:	e7fe      	b.n	8001f58 <Error_Handler+0x8>

08001f5a <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	ed87 0a01 	vstr	s0, [r7, #4]
 8001f64:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f68:	eef0 7ae7 	vabs.f32	s15, s15
 8001f6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001f7a:	b480      	push	{r7}
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4618      	mov	r0, r3
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <_ZN3ros3Msg19serializeAvrFloat64EPhf>:
   * @param[in] f value to serialize.
   *
   * @return number of bytes to advance the buffer pointer.
   *
   */
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 8001f9c:	b480      	push	{r7}
 8001f9e:	b087      	sub	sp, #28
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	ed87 0a00 	vstr	s0, [r7]
 8001fa8:	683b      	ldr	r3, [r7, #0]
  {
    int32_t val;
    memcpy(&val, &f, sizeof(val));
 8001faa:	60fb      	str	r3, [r7, #12]

    int16_t exp = ((val >> 23) & 255);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	15db      	asrs	r3, r3, #23
 8001fb0:	b21b      	sxth	r3, r3
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	82fb      	strh	r3, [r7, #22]
    uint32_t mantissa = val & 0x7FFFFF;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8001fbc:	613b      	str	r3, [r7, #16]

    if (exp == 255)
 8001fbe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001fc2:	2bff      	cmp	r3, #255	; 0xff
 8001fc4:	d103      	bne.n	8001fce <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x32>
    {
      exp = 2047; // Special value for NaN, infinity etc.
 8001fc6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001fca:	82fb      	strh	r3, [r7, #22]
 8001fcc:	e02a      	b.n	8002024 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x88>
    }
    else if (exp != 0)
 8001fce:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d005      	beq.n	8001fe2 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x46>
    {
      exp += 1023 - 127; // Normal case
 8001fd6:	8afb      	ldrh	r3, [r7, #22]
 8001fd8:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	82fb      	strh	r3, [r7, #22]
 8001fe0:	e020      	b.n	8002024 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x88>
    }
    else if (!mantissa)
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d102      	bne.n	8001fee <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x52>
    {
      exp = 0; // Zero
 8001fe8:	2300      	movs	r3, #0
 8001fea:	82fb      	strh	r3, [r7, #22]
 8001fec:	e01a      	b.n	8002024 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x88>
    }
    else
    {
      // Denormalized value in float, will fit as normalized value in double
      exp += 1023 - 127;
 8001fee:	8afb      	ldrh	r3, [r7, #22]
 8001ff0:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	82fb      	strh	r3, [r7, #22]
      mantissa <<= 1;
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	613b      	str	r3, [r7, #16]
      while (!(mantissa & 0x800000))
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d109      	bne.n	800201c <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x80>
      {
          mantissa <<= 1;
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	613b      	str	r3, [r7, #16]
          exp--;
 800200e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002012:	b29b      	uxth	r3, r3
 8002014:	3b01      	subs	r3, #1
 8002016:	b29b      	uxth	r3, r3
 8002018:	82fb      	strh	r3, [r7, #22]
      while (!(mantissa & 0x800000))
 800201a:	e7f0      	b.n	8001ffe <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x62>
      }
      mantissa &= 0x7FFFFF;
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8002022:	613b      	str	r3, [r7, #16]
    }

    *(outbuffer++) = 0;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	1c5a      	adds	r2, r3, #1
 8002028:	607a      	str	r2, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	1c5a      	adds	r2, r3, #1
 8002032:	607a      	str	r2, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	1c5a      	adds	r2, r3, #1
 800203c:	607a      	str	r2, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (mantissa << 5) & 0xff;
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	b2da      	uxtb	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	1c59      	adds	r1, r3, #1
 800204a:	6079      	str	r1, [r7, #4]
 800204c:	0152      	lsls	r2, r2, #5
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (mantissa >> 3) & 0xff;
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	08d9      	lsrs	r1, r3, #3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	1c5a      	adds	r2, r3, #1
 800205a:	607a      	str	r2, [r7, #4]
 800205c:	b2ca      	uxtb	r2, r1
 800205e:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (mantissa >> 11) & 0xff;
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	0ad9      	lsrs	r1, r3, #11
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	1c5a      	adds	r2, r3, #1
 8002068:	607a      	str	r2, [r7, #4]
 800206a:	b2ca      	uxtb	r2, r1
 800206c:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((mantissa >> 19) & 0x0F);
 800206e:	8afb      	ldrh	r3, [r7, #22]
 8002070:	b2db      	uxtb	r3, r3
 8002072:	011b      	lsls	r3, r3, #4
 8002074:	b2d9      	uxtb	r1, r3
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	0cdb      	lsrs	r3, r3, #19
 800207a:	b2db      	uxtb	r3, r3
 800207c:	f003 030f 	and.w	r3, r3, #15
 8002080:	b2da      	uxtb	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	1c58      	adds	r0, r3, #1
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	430a      	orrs	r2, r1
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (exp >> 4) & 0x7F;
 800208e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002092:	111b      	asrs	r3, r3, #4
 8002094:	b21b      	sxth	r3, r3
 8002096:	b2da      	uxtb	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	1c59      	adds	r1, r3, #1
 800209c:	6079      	str	r1, [r7, #4]
 800209e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	701a      	strb	r2, [r3, #0]

    // Mark negative bit as necessary.
    if (f < 0)
 80020a6:	edd7 7a00 	vldr	s15, [r7]
 80020aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b2:	d508      	bpl.n	80020c6 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x12a>
    {
      *(outbuffer - 1) |= 0x80;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	781a      	ldrb	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	3b01      	subs	r3, #1
 80020be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80020c2:	b2d2      	uxtb	r2, r2
 80020c4:	701a      	strb	r2, [r3, #0]
    }

    return 8;
 80020c6:	2308      	movs	r3, #8
  }
 80020c8:	4618      	mov	r0, r3
 80020ca:	371c      	adds	r7, #28
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>:
   * @param[in] inbuffer pointer for buffer to deserialize from.
   * @param[out] f pointer to place the deserialized value in.
   *
   * @return number of bytes to advance the buffer pointer.
   */
  static int deserializeAvrFloat64(const unsigned char* inbuffer, float* f)
 80020d4:	b480      	push	{r7}
 80020d6:	b087      	sub	sp, #28
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  {
    int16_t exp;
    uint32_t mantissa;

    // Skip lowest 24 bits
    inbuffer += 3;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3303      	adds	r3, #3
 80020e2:	607b      	str	r3, [r7, #4]

    // Copy truncated mantissa.
    mantissa = ((uint32_t)(*(inbuffer++)) >> 4 & 0x0F);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	1c5a      	adds	r2, r3, #1
 80020e8:	607a      	str	r2, [r7, #4]
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	091b      	lsrs	r3, r3, #4
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	f003 030f 	and.w	r3, r3, #15
 80020f4:	613b      	str	r3, [r7, #16]
    mantissa |= ((uint32_t)(*(inbuffer++)) & 0xff) << 4;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	1c5a      	adds	r2, r3, #1
 80020fa:	607a      	str	r2, [r7, #4]
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	011b      	lsls	r3, r3, #4
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	4313      	orrs	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
    mantissa |= ((uint32_t)(*(inbuffer++)) & 0xff) << 12;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	1c5a      	adds	r2, r3, #1
 800210a:	607a      	str	r2, [r7, #4]
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	031b      	lsls	r3, r3, #12
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	4313      	orrs	r3, r2
 8002114:	613b      	str	r3, [r7, #16]
    mantissa |= ((uint32_t)(*inbuffer) & 0x0f) << 20;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	051b      	lsls	r3, r3, #20
 800211c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	4313      	orrs	r3, r2
 8002124:	613b      	str	r3, [r7, #16]

    // Copy exponent.
    exp = ((uint32_t)(*(inbuffer++)) & 0xf0) >> 4;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	1c5a      	adds	r2, r3, #1
 800212a:	607a      	str	r2, [r7, #4]
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	091b      	lsrs	r3, r3, #4
 8002130:	b2db      	uxtb	r3, r3
 8002132:	b21b      	sxth	r3, r3
 8002134:	f003 030f 	and.w	r3, r3, #15
 8002138:	82fb      	strh	r3, [r7, #22]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	b29b      	uxth	r3, r3
 8002140:	011b      	lsls	r3, r3, #4
 8002142:	b29b      	uxth	r3, r3
 8002144:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8002148:	b29a      	uxth	r2, r3
 800214a:	8afb      	ldrh	r3, [r7, #22]
 800214c:	4313      	orrs	r3, r2
 800214e:	b29b      	uxth	r3, r3
 8002150:	82fb      	strh	r3, [r7, #22]

    if (exp == 2047)
 8002152:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002156:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800215a:	4293      	cmp	r3, r2
 800215c:	d102      	bne.n	8002164 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0x90>
    {
      exp = 255; // NaN, infinity etc.
 800215e:	23ff      	movs	r3, #255	; 0xff
 8002160:	82fb      	strh	r3, [r7, #22]
 8002162:	e02c      	b.n	80021be <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xea>
    }
    else if (exp - 1023 > 127)
 8002164:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002168:	f240 427e 	movw	r2, #1150	; 0x47e
 800216c:	4293      	cmp	r3, r2
 800216e:	dd04      	ble.n	800217a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xa6>
    {
      exp = 255;
 8002170:	23ff      	movs	r3, #255	; 0xff
 8002172:	82fb      	strh	r3, [r7, #22]
      mantissa = 0; // Too large for float, convert to infinity
 8002174:	2300      	movs	r3, #0
 8002176:	613b      	str	r3, [r7, #16]
 8002178:	e021      	b.n	80021be <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xea>
    }
    else if (exp - 1023 >= -126)
 800217a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800217e:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8002182:	dd05      	ble.n	8002190 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xbc>
    {
      exp -= 1023 - 127; // Normal case
 8002184:	8afb      	ldrh	r3, [r7, #22]
 8002186:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 800218a:	b29b      	uxth	r3, r3
 800218c:	82fb      	strh	r3, [r7, #22]
 800218e:	e016      	b.n	80021be <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xea>
    }
    else if (exp - 1023 < -150)
 8002190:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002194:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 8002198:	dc02      	bgt.n	80021a0 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xcc>
    {
      exp = 0; // Too small or zero
 800219a:	2300      	movs	r3, #0
 800219c:	82fb      	strh	r3, [r7, #22]
 800219e:	e00e      	b.n	80021be <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xea>
    }
    else
    {
      // Have to convert to denormalized representation for float
      mantissa |= 0x1000000;
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021a6:	613b      	str	r3, [r7, #16]
      mantissa >>= ((-126 + 1023) - exp);
 80021a8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80021ac:	f5c3 7360 	rsb	r3, r3, #896	; 0x380
 80021b0:	3301      	adds	r3, #1
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	fa22 f303 	lsr.w	r3, r2, r3
 80021b8:	613b      	str	r3, [r7, #16]
      exp = 0;
 80021ba:	2300      	movs	r3, #0
 80021bc:	82fb      	strh	r3, [r7, #22]
    }

    // Round off mantissa
    if (mantissa != 0xFFFFFF)
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d002      	beq.n	80021ce <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xfa>
      mantissa += 1;
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	3301      	adds	r3, #1
 80021cc:	613b      	str	r3, [r7, #16]

    mantissa >>= 1;
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	085b      	lsrs	r3, r3, #1
 80021d2:	613b      	str	r3, [r7, #16]

    // Put mantissa and exponent into place
    uint32_t val = mantissa;
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	60fb      	str	r3, [r7, #12]
    val |= static_cast<uint32_t>(exp) << 23;
 80021d8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80021dc:	05da      	lsls	r2, r3, #23
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	60fb      	str	r3, [r7, #12]

    // Copy negative sign.
    val |= (static_cast<uint32_t>(*(inbuffer++)) & 0x80) << 24;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	1c5a      	adds	r2, r3, #1
 80021e8:	607a      	str	r2, [r7, #4]
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	061b      	lsls	r3, r3, #24
 80021ee:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	68fa      	ldr	r2, [r7, #12]

    memcpy(f, &val, sizeof(val));
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	601a      	str	r2, [r3, #0]
    return 8;
 80021fe:	2308      	movs	r3, #8
  }
 8002200:	4618      	mov	r0, r3
 8002202:	371c      	adds	r7, #28
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <_ZN3ros3MsgC1Ev>:
class Msg
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	4a04      	ldr	r2, [pc, #16]	; (8002228 <_ZN3ros3MsgC1Ev+0x1c>)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4618      	mov	r0, r3
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	0800f388 	.word	0x0800f388

0800222c <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef float _y_type;
      _y_type y;
      typedef float _z_type;
      _z_type z;

    Vector3():
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff ffe8 	bl	800220c <_ZN3ros3MsgC1Ev>
 800223c:	4a09      	ldr	r2, [pc, #36]	; (8002264 <_ZN13geometry_msgs7Vector3C1Ev+0x38>)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f04f 0200 	mov.w	r2, #0
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f04f 0200 	mov.w	r2, #0
 8002250:	609a      	str	r2, [r3, #8]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f04f 0200 	mov.w	r2, #0
 8002258:	60da      	str	r2, [r3, #12]
    {
    }
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4618      	mov	r0, r3
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	0800f370 	.word	0x0800f370

08002268 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002272:	2300      	movs	r3, #0
 8002274:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	441a      	add	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002282:	eeb0 0a67 	vmov.f32	s0, s15
 8002286:	4610      	mov	r0, r2
 8002288:	f7ff fe88 	bl	8001f9c <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800228c:	4602      	mov	r2, r0
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	4413      	add	r3, r2
 8002292:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	441a      	add	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	edd3 7a02 	vldr	s15, [r3, #8]
 80022a0:	eeb0 0a67 	vmov.f32	s0, s15
 80022a4:	4610      	mov	r0, r2
 80022a6:	f7ff fe79 	bl	8001f9c <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80022aa:	4602      	mov	r2, r0
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4413      	add	r3, r2
 80022b0:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	441a      	add	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80022be:	eeb0 0a67 	vmov.f32	s0, s15
 80022c2:	4610      	mov	r0, r2
 80022c4:	f7ff fe6a 	bl	8001f9c <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80022c8:	4602      	mov	r2, r0
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	4413      	add	r3, r2
 80022ce:	60fb      	str	r3, [r7, #12]
      return offset;
 80022d0:	68fb      	ldr	r3, [r7, #12]
    }
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80022da:	b580      	push	{r7, lr}
 80022dc:	b084      	sub	sp, #16
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
 80022e2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	441a      	add	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3304      	adds	r3, #4
 80022f2:	4619      	mov	r1, r3
 80022f4:	4610      	mov	r0, r2
 80022f6:	f7ff feed 	bl	80020d4 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80022fa:	4602      	mov	r2, r0
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	4413      	add	r3, r2
 8002300:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	441a      	add	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3308      	adds	r3, #8
 800230c:	4619      	mov	r1, r3
 800230e:	4610      	mov	r0, r2
 8002310:	f7ff fee0 	bl	80020d4 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8002314:	4602      	mov	r2, r0
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	4413      	add	r3, r2
 800231a:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	441a      	add	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	330c      	adds	r3, #12
 8002326:	4619      	mov	r1, r3
 8002328:	4610      	mov	r0, r2
 800232a:	f7ff fed3 	bl	80020d4 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800232e:	4602      	mov	r2, r0
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4413      	add	r3, r2
 8002334:	60fb      	str	r3, [r7, #12]
     return offset;
 8002336:	68fb      	ldr	r3, [r7, #12]
    }
 8002338:	4618      	mov	r0, r3
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	4b03      	ldr	r3, [pc, #12]	; (8002358 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 800234a:	4618      	mov	r0, r3
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	0800ee24 	.word	0x0800ee24

0800235c <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	4b03      	ldr	r3, [pc, #12]	; (8002374 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8002366:	4618      	mov	r0, r3
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	0800ee3c 	.word	0x0800ee3c

08002378 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff ff42 	bl	800220c <_ZN3ros3MsgC1Ev>
 8002388:	4a08      	ldr	r2, [pc, #32]	; (80023ac <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3304      	adds	r3, #4
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff ff4a 	bl	800222c <_ZN13geometry_msgs7Vector3C1Ev>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3314      	adds	r3, #20
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff ff45 	bl	800222c <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4618      	mov	r0, r3
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	0800f358 	.word	0x0800f358

080023b0 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80023ba:	2300      	movs	r3, #0
 80023bc:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	1d18      	adds	r0, r3, #4
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	4413      	add	r3, r2
 80023c8:	4619      	mov	r1, r3
 80023ca:	f7ff ff4d 	bl	8002268 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80023ce:	4602      	mov	r2, r0
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4413      	add	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f103 0014 	add.w	r0, r3, #20
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	4413      	add	r3, r2
 80023e2:	4619      	mov	r1, r3
 80023e4:	f7ff ff40 	bl	8002268 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80023e8:	4602      	mov	r2, r0
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	4413      	add	r3, r2
 80023ee:	60fb      	str	r3, [r7, #12]
      return offset;
 80023f0:	68fb      	ldr	r3, [r7, #12]
    }
 80023f2:	4618      	mov	r0, r3
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b084      	sub	sp, #16
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
 8002402:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002404:	2300      	movs	r3, #0
 8002406:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	1d18      	adds	r0, r3, #4
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	4413      	add	r3, r2
 8002412:	4619      	mov	r1, r3
 8002414:	f7ff ff61 	bl	80022da <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002418:	4602      	mov	r2, r0
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	4413      	add	r3, r2
 800241e:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f103 0014 	add.w	r0, r3, #20
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	4413      	add	r3, r2
 800242c:	4619      	mov	r1, r3
 800242e:	f7ff ff54 	bl	80022da <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002432:	4602      	mov	r2, r0
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	4413      	add	r3, r2
 8002438:	60fb      	str	r3, [r7, #12]
     return offset;
 800243a:	68fb      	ldr	r3, [r7, #12]
    }
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <_ZN13geometry_msgs5Twist7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Twist"; };
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	4b03      	ldr	r3, [pc, #12]	; (800245c <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 800244e:	4618      	mov	r0, r3
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	0800ee60 	.word	0x0800ee60

08002460 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    virtual const char * getMD5() override { return "9f195f881246fdfa2798d1d3eebca84a"; };
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	4b03      	ldr	r3, [pc, #12]	; (8002478 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 800246a:	4618      	mov	r0, r3
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	0800ee74 	.word	0x0800ee74

0800247c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
      data()
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff fec0 	bl	800220c <_ZN3ros3MsgC1Ev>
 800248c:	4a06      	ldr	r2, [pc, #24]	; (80024a8 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	3304      	adds	r3, #4
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff fd6f 	bl	8001f7a <_ZN3ros4TimeC1Ev>
    {
    }
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4618      	mov	r0, r3
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	0800f340 	.word	0x0800f340

080024ac <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80024b6:	2300      	movs	r3, #0
 80024b8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6859      	ldr	r1, [r3, #4]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	4413      	add	r3, r2
 80024c4:	b2ca      	uxtb	r2, r1
 80024c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	0a19      	lsrs	r1, r3, #8
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	3301      	adds	r3, #1
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	4413      	add	r3, r2
 80024d6:	b2ca      	uxtb	r2, r1
 80024d8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	0c19      	lsrs	r1, r3, #16
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	3302      	adds	r3, #2
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	4413      	add	r3, r2
 80024e8:	b2ca      	uxtb	r2, r1
 80024ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	0e19      	lsrs	r1, r3, #24
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	3303      	adds	r3, #3
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	4413      	add	r3, r2
 80024fa:	b2ca      	uxtb	r2, r1
 80024fc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	3304      	adds	r3, #4
 8002502:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6899      	ldr	r1, [r3, #8]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	4413      	add	r3, r2
 800250e:	b2ca      	uxtb	r2, r1
 8002510:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	0a19      	lsrs	r1, r3, #8
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	3301      	adds	r3, #1
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	4413      	add	r3, r2
 8002520:	b2ca      	uxtb	r2, r1
 8002522:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	0c19      	lsrs	r1, r3, #16
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	3302      	adds	r3, #2
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	4413      	add	r3, r2
 8002532:	b2ca      	uxtb	r2, r1
 8002534:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	0e19      	lsrs	r1, r3, #24
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	3303      	adds	r3, #3
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	4413      	add	r3, r2
 8002544:	b2ca      	uxtb	r2, r1
 8002546:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	3304      	adds	r3, #4
 800254c:	60fb      	str	r3, [r7, #12]
      return offset;
 800254e:	68fb      	ldr	r3, [r7, #12]
    }
 8002550:	4618      	mov	r0, r3
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002566:	2300      	movs	r3, #0
 8002568:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	4413      	add	r3, r2
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	461a      	mov	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	3301      	adds	r3, #1
 8002580:	6839      	ldr	r1, [r7, #0]
 8002582:	440b      	add	r3, r1
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	021b      	lsls	r3, r3, #8
 8002588:	431a      	orrs	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	3302      	adds	r3, #2
 8002596:	6839      	ldr	r1, [r7, #0]
 8002598:	440b      	add	r3, r1
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	041b      	lsls	r3, r3, #16
 800259e:	431a      	orrs	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	3303      	adds	r3, #3
 80025ac:	6839      	ldr	r1, [r7, #0]
 80025ae:	440b      	add	r3, r1
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	061b      	lsls	r3, r3, #24
 80025b4:	431a      	orrs	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	3304      	adds	r3, #4
 80025be:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	4413      	add	r3, r2
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	461a      	mov	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	3301      	adds	r3, #1
 80025d6:	6839      	ldr	r1, [r7, #0]
 80025d8:	440b      	add	r3, r1
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	021b      	lsls	r3, r3, #8
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	3302      	adds	r3, #2
 80025ec:	6839      	ldr	r1, [r7, #0]
 80025ee:	440b      	add	r3, r1
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	041b      	lsls	r3, r3, #16
 80025f4:	431a      	orrs	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689a      	ldr	r2, [r3, #8]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	3303      	adds	r3, #3
 8002602:	6839      	ldr	r1, [r7, #0]
 8002604:	440b      	add	r3, r1
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	061b      	lsls	r3, r3, #24
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	3304      	adds	r3, #4
 8002614:	60fb      	str	r3, [r7, #12]
     return offset;
 8002616:	68fb      	ldr	r3, [r7, #12]
    }
 8002618:	4618      	mov	r0, r3
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	4b03      	ldr	r3, [pc, #12]	; (800263c <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800262e:	4618      	mov	r0, r3
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	0800ee98 	.word	0x0800ee98

08002640 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	4b03      	ldr	r3, [pc, #12]	; (8002658 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800264a:	4618      	mov	r0, r3
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	0800eea8 	.word	0x0800eea8

0800265c <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff fdd0 	bl	800220c <_ZN3ros3MsgC1Ev>
 800266c:	4a0b      	ldr	r2, [pc, #44]	; (800269c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	809a      	strh	r2, [r3, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a09      	ldr	r2, [pc, #36]	; (80026a0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800267c:	609a      	str	r2, [r3, #8]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a07      	ldr	r2, [pc, #28]	; (80026a0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002682:	60da      	str	r2, [r3, #12]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a06      	ldr	r2, [pc, #24]	; (80026a0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002688:	611a      	str	r2, [r3, #16]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	615a      	str	r2, [r3, #20]
    {
    }
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4618      	mov	r0, r3
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	0800f328 	.word	0x0800f328
 80026a0:	0800eecc 	.word	0x0800eecc

080026a4 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b088      	sub	sp, #32
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80026ae:	2300      	movs	r3, #0
 80026b0:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	8899      	ldrh	r1, [r3, #4]
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	4413      	add	r3, r2
 80026bc:	b2ca      	uxtb	r2, r1
 80026be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	889b      	ldrh	r3, [r3, #4]
 80026c4:	0a1b      	lsrs	r3, r3, #8
 80026c6:	b299      	uxth	r1, r3
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	3301      	adds	r3, #1
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	4413      	add	r3, r2
 80026d0:	b2ca      	uxtb	r2, r1
 80026d2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	3302      	adds	r3, #2
 80026d8:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	4618      	mov	r0, r3
 80026e0:	f7fd fd76 	bl	80001d0 <strlen>
 80026e4:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	4413      	add	r3, r2
 80026ec:	69b9      	ldr	r1, [r7, #24]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f001 f900 	bl	80038f4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	3304      	adds	r3, #4
 80026f8:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	18d0      	adds	r0, r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4619      	mov	r1, r3
 8002708:	f00c f93c 	bl	800e984 <memcpy>
      offset += length_topic_name;
 800270c:	69fa      	ldr	r2, [r7, #28]
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	4413      	add	r3, r2
 8002712:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	4618      	mov	r0, r3
 800271a:	f7fd fd59 	bl	80001d0 <strlen>
 800271e:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	4413      	add	r3, r2
 8002726:	6979      	ldr	r1, [r7, #20]
 8002728:	4618      	mov	r0, r3
 800272a:	f001 f8e3 	bl	80038f4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	3304      	adds	r3, #4
 8002732:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	18d0      	adds	r0, r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	4619      	mov	r1, r3
 8002742:	f00c f91f 	bl	800e984 <memcpy>
      offset += length_message_type;
 8002746:	69fa      	ldr	r2, [r7, #28]
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	4413      	add	r3, r2
 800274c:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	4618      	mov	r0, r3
 8002754:	f7fd fd3c 	bl	80001d0 <strlen>
 8002758:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	4413      	add	r3, r2
 8002760:	6939      	ldr	r1, [r7, #16]
 8002762:	4618      	mov	r0, r3
 8002764:	f001 f8c6 	bl	80038f4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	3304      	adds	r3, #4
 800276c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	18d0      	adds	r0, r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	4619      	mov	r1, r3
 800277c:	f00c f902 	bl	800e984 <memcpy>
      offset += length_md5sum;
 8002780:	69fa      	ldr	r2, [r7, #28]
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	4413      	add	r3, r2
 8002786:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800278e:	68f9      	ldr	r1, [r7, #12]
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	4413      	add	r3, r2
 8002796:	b2ca      	uxtb	r2, r1
 8002798:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	0a19      	lsrs	r1, r3, #8
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	3301      	adds	r3, #1
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	4413      	add	r3, r2
 80027a6:	b2ca      	uxtb	r2, r1
 80027a8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	0c19      	lsrs	r1, r3, #16
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	3302      	adds	r3, #2
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	4413      	add	r3, r2
 80027b6:	b2ca      	uxtb	r2, r1
 80027b8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	0e19      	lsrs	r1, r3, #24
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	3303      	adds	r3, #3
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	4413      	add	r3, r2
 80027c6:	b2ca      	uxtb	r2, r1
 80027c8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	3304      	adds	r3, #4
 80027ce:	61fb      	str	r3, [r7, #28]
      return offset;
 80027d0:	69fb      	ldr	r3, [r7, #28]
    }
 80027d2:	4618      	mov	r0, r3
 80027d4:	3720      	adds	r7, #32
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80027da:	b580      	push	{r7, lr}
 80027dc:	b08a      	sub	sp, #40	; 0x28
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
 80027e2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80027e4:	2300      	movs	r3, #0
 80027e6:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	4413      	add	r3, r2
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	889b      	ldrh	r3, [r3, #4]
 80027fa:	b21a      	sxth	r2, r3
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	3301      	adds	r3, #1
 8002800:	6839      	ldr	r1, [r7, #0]
 8002802:	440b      	add	r3, r1
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	021b      	lsls	r3, r3, #8
 8002808:	b21b      	sxth	r3, r3
 800280a:	4313      	orrs	r3, r2
 800280c:	b21b      	sxth	r3, r3
 800280e:	b29a      	uxth	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	3302      	adds	r3, #2
 8002818:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	441a      	add	r2, r3
 8002820:	f107 0314 	add.w	r3, r7, #20
 8002824:	4611      	mov	r1, r2
 8002826:	4618      	mov	r0, r3
 8002828:	f001 f882 	bl	8003930 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	3304      	adds	r3, #4
 8002830:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	627b      	str	r3, [r7, #36]	; 0x24
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	4413      	add	r3, r2
 800283c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800283e:	429a      	cmp	r2, r3
 8002840:	d20c      	bcs.n	800285c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	441a      	add	r2, r3
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	3b01      	subs	r3, #1
 800284c:	6839      	ldr	r1, [r7, #0]
 800284e:	440b      	add	r3, r1
 8002850:	7812      	ldrb	r2, [r2, #0]
 8002852:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	3301      	adds	r3, #1
 8002858:	627b      	str	r3, [r7, #36]	; 0x24
 800285a:	e7ec      	b.n	8002836 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	4413      	add	r3, r2
 8002862:	3b01      	subs	r3, #1
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	4413      	add	r3, r2
 8002868:	2200      	movs	r2, #0
 800286a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	3b01      	subs	r3, #1
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	441a      	add	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	4413      	add	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	441a      	add	r2, r3
 8002886:	f107 0310 	add.w	r3, r7, #16
 800288a:	4611      	mov	r1, r2
 800288c:	4618      	mov	r0, r3
 800288e:	f001 f84f 	bl	8003930 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	3304      	adds	r3, #4
 8002896:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	623b      	str	r3, [r7, #32]
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	4413      	add	r3, r2
 80028a2:	6a3a      	ldr	r2, [r7, #32]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d20c      	bcs.n	80028c2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	6a3b      	ldr	r3, [r7, #32]
 80028ac:	441a      	add	r2, r3
 80028ae:	6a3b      	ldr	r3, [r7, #32]
 80028b0:	3b01      	subs	r3, #1
 80028b2:	6839      	ldr	r1, [r7, #0]
 80028b4:	440b      	add	r3, r1
 80028b6:	7812      	ldrb	r2, [r2, #0]
 80028b8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80028ba:	6a3b      	ldr	r3, [r7, #32]
 80028bc:	3301      	adds	r3, #1
 80028be:	623b      	str	r3, [r7, #32]
 80028c0:	e7ec      	b.n	800289c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	4413      	add	r3, r2
 80028c8:	3b01      	subs	r3, #1
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	4413      	add	r3, r2
 80028ce:	2200      	movs	r2, #0
 80028d0:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	3b01      	subs	r3, #1
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	441a      	add	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	4413      	add	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	441a      	add	r2, r3
 80028ec:	f107 030c 	add.w	r3, r7, #12
 80028f0:	4611      	mov	r1, r2
 80028f2:	4618      	mov	r0, r3
 80028f4:	f001 f81c 	bl	8003930 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	3304      	adds	r3, #4
 80028fc:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	61fb      	str	r3, [r7, #28]
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	4413      	add	r3, r2
 8002908:	69fa      	ldr	r2, [r7, #28]
 800290a:	429a      	cmp	r2, r3
 800290c:	d20c      	bcs.n	8002928 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	441a      	add	r2, r3
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	3b01      	subs	r3, #1
 8002918:	6839      	ldr	r1, [r7, #0]
 800291a:	440b      	add	r3, r1
 800291c:	7812      	ldrb	r2, [r2, #0]
 800291e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	3301      	adds	r3, #1
 8002924:	61fb      	str	r3, [r7, #28]
 8002926:	e7ec      	b.n	8002902 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	4413      	add	r3, r2
 800292e:	3b01      	subs	r3, #1
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	4413      	add	r3, r2
 8002934:	2200      	movs	r2, #0
 8002936:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	3b01      	subs	r3, #1
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	441a      	add	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	4413      	add	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 800294c:	2300      	movs	r3, #0
 800294e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	6839      	ldr	r1, [r7, #0]
 8002956:	440a      	add	r2, r1
 8002958:	7812      	ldrb	r2, [r2, #0]
 800295a:	4313      	orrs	r3, r2
 800295c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800295e:	68ba      	ldr	r2, [r7, #8]
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	3301      	adds	r3, #1
 8002964:	6839      	ldr	r1, [r7, #0]
 8002966:	440b      	add	r3, r1
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	021b      	lsls	r3, r3, #8
 800296c:	4313      	orrs	r3, r2
 800296e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002970:	68ba      	ldr	r2, [r7, #8]
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	3302      	adds	r3, #2
 8002976:	6839      	ldr	r1, [r7, #0]
 8002978:	440b      	add	r3, r1
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	041b      	lsls	r3, r3, #16
 800297e:	4313      	orrs	r3, r2
 8002980:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	3303      	adds	r3, #3
 8002988:	6839      	ldr	r1, [r7, #0]
 800298a:	440b      	add	r3, r1
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	061b      	lsls	r3, r3, #24
 8002990:	4313      	orrs	r3, r2
 8002992:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002994:	68ba      	ldr	r2, [r7, #8]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	3304      	adds	r3, #4
 800299e:	61bb      	str	r3, [r7, #24]
     return offset;
 80029a0:	69bb      	ldr	r3, [r7, #24]
    }
 80029a2:	4618      	mov	r0, r3
 80029a4:	3728      	adds	r7, #40	; 0x28
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
	...

080029ac <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	4b03      	ldr	r3, [pc, #12]	; (80029c4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80029b6:	4618      	mov	r0, r3
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	0800eed0 	.word	0x0800eed0

080029c8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	4b03      	ldr	r3, [pc, #12]	; (80029e0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80029d2:	4618      	mov	r0, r3
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	0800eeec 	.word	0x0800eeec

080029e4 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff fc0c 	bl	800220c <_ZN3ros3MsgC1Ev>
 80029f4:	4a06      	ldr	r2, [pc, #24]	; (8002a10 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	711a      	strb	r2, [r3, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a04      	ldr	r2, [pc, #16]	; (8002a14 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002a04:	609a      	str	r2, [r3, #8]
    {
    }
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	0800f310 	.word	0x0800f310
 8002a14:	0800eecc 	.word	0x0800eecc

08002a18 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002a22:	2300      	movs	r3, #0
 8002a24:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	7912      	ldrb	r2, [r2, #4]
 8002a30:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	3301      	adds	r3, #1
 8002a36:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7fd fbc7 	bl	80001d0 <strlen>
 8002a42:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	4413      	add	r3, r2
 8002a4a:	68b9      	ldr	r1, [r7, #8]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f000 ff51 	bl	80038f4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	3304      	adds	r3, #4
 8002a56:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	18d0      	adds	r0, r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	4619      	mov	r1, r3
 8002a66:	f00b ff8d 	bl	800e984 <memcpy>
      offset += length_msg;
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	4413      	add	r3, r2
 8002a70:	60fb      	str	r3, [r7, #12]
      return offset;
 8002a72:	68fb      	ldr	r3, [r7, #12]
    }
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002a86:	2300      	movs	r3, #0
 8002a88:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	4413      	add	r3, r2
 8002a90:	781a      	ldrb	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	3301      	adds	r3, #1
 8002a9a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	441a      	add	r2, r3
 8002aa2:	f107 030c 	add.w	r3, r7, #12
 8002aa6:	4611      	mov	r1, r2
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f000 ff41 	bl	8003930 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	3304      	adds	r3, #4
 8002ab2:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	617b      	str	r3, [r7, #20]
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	4413      	add	r3, r2
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d20c      	bcs.n	8002ade <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	441a      	add	r2, r3
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	3b01      	subs	r3, #1
 8002ace:	6839      	ldr	r1, [r7, #0]
 8002ad0:	440b      	add	r3, r1
 8002ad2:	7812      	ldrb	r2, [r2, #0]
 8002ad4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	617b      	str	r3, [r7, #20]
 8002adc:	e7ec      	b.n	8002ab8 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	4413      	add	r3, r2
 8002aea:	2200      	movs	r2, #0
 8002aec:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	3b01      	subs	r3, #1
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	441a      	add	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4413      	add	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]
     return offset;
 8002b02:	693b      	ldr	r3, [r7, #16]
    }
 8002b04:	4618      	mov	r0, r3
 8002b06:	3718      	adds	r7, #24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	4b03      	ldr	r3, [pc, #12]	; (8002b24 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8002b16:	4618      	mov	r0, r3
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	0800ef10 	.word	0x0800ef10

08002b28 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	4b03      	ldr	r3, [pc, #12]	; (8002b40 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8002b32:	4618      	mov	r0, r3
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	0800ef24 	.word	0x0800ef24

08002b44 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff fb5c 	bl	800220c <_ZN3ros3MsgC1Ev>
 8002b54:	4a11      	ldr	r2, [pc, #68]	; (8002b9c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	605a      	str	r2, [r3, #4]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	609a      	str	r2, [r3, #8]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	60da      	str	r2, [r3, #12]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	611a      	str	r2, [r3, #16]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f04f 0200 	mov.w	r2, #0
 8002b78:	615a      	str	r2, [r3, #20]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	619a      	str	r2, [r3, #24]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	61da      	str	r2, [r3, #28]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	621a      	str	r2, [r3, #32]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4618      	mov	r0, r3
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	0800f2f8 	.word	0x0800f2f8

08002ba0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08a      	sub	sp, #40	; 0x28
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002baa:	2300      	movs	r3, #0
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6859      	ldr	r1, [r3, #4]
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	b2ca      	uxtb	r2, r1
 8002bba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	0a19      	lsrs	r1, r3, #8
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	4413      	add	r3, r2
 8002bca:	b2ca      	uxtb	r2, r1
 8002bcc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	0c19      	lsrs	r1, r3, #16
 8002bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd6:	3302      	adds	r3, #2
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	4413      	add	r3, r2
 8002bdc:	b2ca      	uxtb	r2, r1
 8002bde:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	0e19      	lsrs	r1, r3, #24
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	3303      	adds	r3, #3
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	4413      	add	r3, r2
 8002bee:	b2ca      	uxtb	r2, r1
 8002bf0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	623b      	str	r3, [r7, #32]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	6a3a      	ldr	r2, [r7, #32]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d22b      	bcs.n	8002c5e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68da      	ldr	r2, [r3, #12]
 8002c0a:	6a3b      	ldr	r3, [r7, #32]
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4413      	add	r3, r2
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002c14:	6939      	ldr	r1, [r7, #16]
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	b2ca      	uxtb	r2, r1
 8002c1e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	0a19      	lsrs	r1, r3, #8
 8002c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c26:	3301      	adds	r3, #1
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	b2ca      	uxtb	r2, r1
 8002c2e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	0c19      	lsrs	r1, r3, #16
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	3302      	adds	r3, #2
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	b2ca      	uxtb	r2, r1
 8002c3e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	0e19      	lsrs	r1, r3, #24
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c46:	3303      	adds	r3, #3
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	b2ca      	uxtb	r2, r1
 8002c4e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c52:	3304      	adds	r3, #4
 8002c54:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002c56:	6a3b      	ldr	r3, [r7, #32]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	623b      	str	r3, [r7, #32]
 8002c5c:	e7ce      	b.n	8002bfc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6919      	ldr	r1, [r3, #16]
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	4413      	add	r3, r2
 8002c68:	b2ca      	uxtb	r2, r1
 8002c6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	0a19      	lsrs	r1, r3, #8
 8002c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c74:	3301      	adds	r3, #1
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	4413      	add	r3, r2
 8002c7a:	b2ca      	uxtb	r2, r1
 8002c7c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	0c19      	lsrs	r1, r3, #16
 8002c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c86:	3302      	adds	r3, #2
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	b2ca      	uxtb	r2, r1
 8002c8e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	0e19      	lsrs	r1, r3, #24
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	3303      	adds	r3, #3
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	b2ca      	uxtb	r2, r1
 8002ca0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca4:	3304      	adds	r3, #4
 8002ca6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002ca8:	2300      	movs	r3, #0
 8002caa:	61fb      	str	r3, [r7, #28]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	69fa      	ldr	r2, [r7, #28]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d22b      	bcs.n	8002d0e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	699a      	ldr	r2, [r3, #24]
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4413      	add	r3, r2
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002cc4:	68f9      	ldr	r1, [r7, #12]
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	4413      	add	r3, r2
 8002ccc:	b2ca      	uxtb	r2, r1
 8002cce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	0a19      	lsrs	r1, r3, #8
 8002cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	4413      	add	r3, r2
 8002cdc:	b2ca      	uxtb	r2, r1
 8002cde:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	0c19      	lsrs	r1, r3, #16
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	3302      	adds	r3, #2
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	4413      	add	r3, r2
 8002cec:	b2ca      	uxtb	r2, r1
 8002cee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	0e19      	lsrs	r1, r3, #24
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf6:	3303      	adds	r3, #3
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	b2ca      	uxtb	r2, r1
 8002cfe:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d02:	3304      	adds	r3, #4
 8002d04:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	61fb      	str	r3, [r7, #28]
 8002d0c:	e7ce      	b.n	8002cac <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	69d9      	ldr	r1, [r3, #28]
 8002d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	4413      	add	r3, r2
 8002d18:	b2ca      	uxtb	r2, r1
 8002d1a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	0a19      	lsrs	r1, r3, #8
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	3301      	adds	r3, #1
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	4413      	add	r3, r2
 8002d2a:	b2ca      	uxtb	r2, r1
 8002d2c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	0c19      	lsrs	r1, r3, #16
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	3302      	adds	r3, #2
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	b2ca      	uxtb	r2, r1
 8002d3e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	0e19      	lsrs	r1, r3, #24
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	3303      	adds	r3, #3
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	b2ca      	uxtb	r2, r1
 8002d50:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	3304      	adds	r3, #4
 8002d56:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002d58:	2300      	movs	r3, #0
 8002d5a:	61bb      	str	r3, [r7, #24]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	69db      	ldr	r3, [r3, #28]
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d228      	bcs.n	8002db8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4413      	add	r3, r2
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7fd fa2c 	bl	80001d0 <strlen>
 8002d78:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	4413      	add	r3, r2
 8002d80:	6979      	ldr	r1, [r7, #20]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 fdb6 	bl	80038f4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	18d0      	adds	r0, r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	697a      	ldr	r2, [r7, #20]
 8002da2:	4619      	mov	r1, r3
 8002da4:	f00b fdee 	bl	800e984 <memcpy>
      offset += length_stringsi;
 8002da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	4413      	add	r3, r2
 8002dae:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	3301      	adds	r3, #1
 8002db4:	61bb      	str	r3, [r7, #24]
 8002db6:	e7d1      	b.n	8002d5c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8002db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3728      	adds	r7, #40	; 0x28
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b08e      	sub	sp, #56	; 0x38
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
 8002dca:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ddc:	3301      	adds	r3, #1
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	4413      	add	r3, r2
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	021b      	lsls	r3, r3, #8
 8002de6:	6a3a      	ldr	r2, [r7, #32]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dee:	3302      	adds	r3, #2
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	4413      	add	r3, r2
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	041b      	lsls	r3, r3, #16
 8002df8:	6a3a      	ldr	r2, [r7, #32]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e00:	3303      	adds	r3, #3
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	4413      	add	r3, r2
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	061b      	lsls	r3, r3, #24
 8002e0a:	6a3a      	ldr	r2, [r7, #32]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e12:	3304      	adds	r3, #4
 8002e14:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	6a3a      	ldr	r2, [r7, #32]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d90a      	bls.n	8002e36 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68da      	ldr	r2, [r3, #12]
 8002e24:	6a3b      	ldr	r3, [r7, #32]
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4610      	mov	r0, r2
 8002e2c:	f00b fe54 	bl	800ead8 <realloc>
 8002e30:	4602      	mov	r2, r0
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a3a      	ldr	r2, [r7, #32]
 8002e3a:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	633b      	str	r3, [r7, #48]	; 0x30
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d236      	bcs.n	8002eb8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e52:	6839      	ldr	r1, [r7, #0]
 8002e54:	440a      	add	r2, r1
 8002e56:	7812      	ldrb	r2, [r2, #0]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e60:	3301      	adds	r3, #1
 8002e62:	6839      	ldr	r1, [r7, #0]
 8002e64:	440b      	add	r3, r1
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	021b      	lsls	r3, r3, #8
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e72:	3302      	adds	r3, #2
 8002e74:	6839      	ldr	r1, [r7, #0]
 8002e76:	440b      	add	r3, r1
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	041b      	lsls	r3, r3, #16
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e84:	3303      	adds	r3, #3
 8002e86:	6839      	ldr	r1, [r7, #0]
 8002e88:	440b      	add	r3, r1
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	061b      	lsls	r3, r3, #24
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e9a:	3304      	adds	r3, #4
 8002e9c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68da      	ldr	r2, [r3, #12]
 8002ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	4413      	add	r3, r2
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	3208      	adds	r2, #8
 8002eac:	6812      	ldr	r2, [r2, #0]
 8002eae:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	633b      	str	r3, [r7, #48]	; 0x30
 8002eb6:	e7c3      	b.n	8002e40 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	4413      	add	r3, r2
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	021b      	lsls	r3, r3, #8
 8002ece:	69fa      	ldr	r2, [r7, #28]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ed6:	3302      	adds	r3, #2
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	4413      	add	r3, r2
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	041b      	lsls	r3, r3, #16
 8002ee0:	69fa      	ldr	r2, [r7, #28]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ee8:	3303      	adds	r3, #3
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	4413      	add	r3, r2
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	061b      	lsls	r3, r3, #24
 8002ef2:	69fa      	ldr	r2, [r7, #28]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002efa:	3304      	adds	r3, #4
 8002efc:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	69fa      	ldr	r2, [r7, #28]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d90a      	bls.n	8002f1e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	699a      	ldr	r2, [r3, #24]
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4619      	mov	r1, r3
 8002f12:	4610      	mov	r0, r2
 8002f14:	f00b fde0 	bl	800ead8 <realloc>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69fa      	ldr	r2, [r7, #28]
 8002f22:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002f24:	2300      	movs	r3, #0
 8002f26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d236      	bcs.n	8002fa0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002f32:	2300      	movs	r3, #0
 8002f34:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f3a:	6839      	ldr	r1, [r7, #0]
 8002f3c:	440a      	add	r2, r1
 8002f3e:	7812      	ldrb	r2, [r2, #0]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f48:	3301      	adds	r3, #1
 8002f4a:	6839      	ldr	r1, [r7, #0]
 8002f4c:	440b      	add	r3, r1
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	021b      	lsls	r3, r3, #8
 8002f52:	4313      	orrs	r3, r2
 8002f54:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f5a:	3302      	adds	r3, #2
 8002f5c:	6839      	ldr	r1, [r7, #0]
 8002f5e:	440b      	add	r3, r1
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	041b      	lsls	r3, r3, #16
 8002f64:	4313      	orrs	r3, r2
 8002f66:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f6c:	3303      	adds	r3, #3
 8002f6e:	6839      	ldr	r1, [r7, #0]
 8002f70:	440b      	add	r3, r1
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	061b      	lsls	r3, r3, #24
 8002f76:	4313      	orrs	r3, r2
 8002f78:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f82:	3304      	adds	r3, #4
 8002f84:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	699a      	ldr	r2, [r3, #24]
 8002f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4413      	add	r3, r2
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	3214      	adds	r2, #20
 8002f94:	6812      	ldr	r2, [r2, #0]
 8002f96:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f9e:	e7c3      	b.n	8002f28 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fac:	3301      	adds	r3, #1
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	021b      	lsls	r3, r3, #8
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fbe:	3302      	adds	r3, #2
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	041b      	lsls	r3, r3, #16
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd0:	3303      	adds	r3, #3
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	061b      	lsls	r3, r3, #24
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fe2:	3304      	adds	r3, #4
 8002fe4:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d90a      	bls.n	8003006 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4610      	mov	r0, r2
 8002ffc:	f00b fd6c 	bl	800ead8 <realloc>
 8003000:	4602      	mov	r2, r0
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 800300c:	2300      	movs	r3, #0
 800300e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003016:	429a      	cmp	r2, r3
 8003018:	d23f      	bcs.n	800309a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800301a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	441a      	add	r2, r3
 8003020:	f107 030c 	add.w	r3, r7, #12
 8003024:	4611      	mov	r1, r2
 8003026:	4618      	mov	r0, r3
 8003028:	f000 fc82 	bl	8003930 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800302c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800302e:	3304      	adds	r3, #4
 8003030:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8003032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003034:	627b      	str	r3, [r7, #36]	; 0x24
 8003036:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4413      	add	r3, r2
 800303c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800303e:	429a      	cmp	r2, r3
 8003040:	d20c      	bcs.n	800305c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003046:	441a      	add	r2, r3
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304a:	3b01      	subs	r3, #1
 800304c:	6839      	ldr	r1, [r7, #0]
 800304e:	440b      	add	r3, r1
 8003050:	7812      	ldrb	r2, [r2, #0]
 8003052:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8003054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003056:	3301      	adds	r3, #1
 8003058:	627b      	str	r3, [r7, #36]	; 0x24
 800305a:	e7ec      	b.n	8003036 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 800305c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	4413      	add	r3, r2
 8003062:	3b01      	subs	r3, #1
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	4413      	add	r3, r2
 8003068:	2200      	movs	r2, #0
 800306a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 800306c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800306e:	3b01      	subs	r3, #1
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	441a      	add	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8003078:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	4413      	add	r3, r2
 800307e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	3220      	adds	r2, #32
 800308e:	6812      	ldr	r2, [r2, #0]
 8003090:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8003092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003094:	3301      	adds	r3, #1
 8003096:	62bb      	str	r3, [r7, #40]	; 0x28
 8003098:	e7ba      	b.n	8003010 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 800309a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800309c:	4618      	mov	r0, r3
 800309e:	3738      	adds	r7, #56	; 0x38
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	4b03      	ldr	r3, [pc, #12]	; (80030bc <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80030ae:	4618      	mov	r0, r3
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	0800f27c 	.word	0x0800f27c

080030c0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	4b03      	ldr	r3, [pc, #12]	; (80030d8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80030ca:	4618      	mov	r0, r3
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	0800ef48 	.word	0x0800ef48

080030dc <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	691b      	ldr	r3, [r3, #16]
  }
 80030e8:	4618      	mov	r0, r3
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 2048;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800310a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800310e:	4618      	mov	r0, r3
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
	...

0800311c <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 2048;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
      huart(&huart5), rind(0), twind(0), tfind(0){
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a0c      	ldr	r2, [pc, #48]	; (8003158 <_ZN13STM32HardwareC1Ev+0x3c>)
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003138:	461a      	mov	r2, r3
 800313a:	2300      	movs	r3, #0
 800313c:	6093      	str	r3, [r2, #8]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003144:	461a      	mov	r2, r3
 8003146:	2300      	movs	r3, #0
 8003148:	60d3      	str	r3, [r2, #12]
    }
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4618      	mov	r0, r3
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	20002cbc 	.word	0x20002cbc

0800315c <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 f804 	bl	8003172 <_ZN13STM32Hardware10reset_rbufEv>
    }
 800316a:	bf00      	nop
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8003172:	b580      	push	{r7, lr}
 8003174:	b082      	sub	sp, #8
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6818      	ldr	r0, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	3304      	adds	r3, #4
 8003182:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003186:	4619      	mov	r1, r3
 8003188:	f007 f9e4 	bl	800a554 <HAL_UART_Receive_DMA>
    }
 800318c:	bf00      	nop
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <_ZN13STM32Hardware4readEv>:

    int read(){
 8003194:	b590      	push	{r4, r7, lr}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
      int c = -1;
 800319c:	f04f 33ff 	mov.w	r3, #4294967295
 80031a0:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f7ff ffa3 	bl	80030f4 <_ZN13STM32Hardware10getRdmaIndEv>
 80031ae:	4603      	mov	r3, r0
 80031b0:	429c      	cmp	r4, r3
 80031b2:	bf14      	ite	ne
 80031b4:	2301      	movne	r3, #1
 80031b6:	2300      	moveq	r3, #0
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d012      	beq.n	80031e4 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 80031c4:	1c59      	adds	r1, r3, #1
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	f8c2 1804 	str.w	r1, [r2, #2052]	; 0x804
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	4413      	add	r3, r2
 80031d0:	791b      	ldrb	r3, [r3, #4]
 80031d2:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 80031da:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
      }
      return c;
 80031e4:	68fb      	ldr	r3, [r7, #12]
    }
 80031e6:	4618      	mov	r0, r3
 80031e8:	3714      	adds	r7, #20
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd90      	pop	{r4, r7, pc}
	...

080031f0 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b20      	cmp	r3, #32
 8003204:	d108      	bne.n	8003218 <_ZN13STM32Hardware5flushEv+0x28>
 8003206:	4b2d      	ldr	r3, [pc, #180]	; (80032bc <_ZN13STM32Hardware5flushEv+0xcc>)
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	f083 0301 	eor.w	r3, r3, #1
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <_ZN13STM32Hardware5flushEv+0x28>
 8003214:	2301      	movs	r3, #1
 8003216:	e000      	b.n	800321a <_ZN13STM32Hardware5flushEv+0x2a>
 8003218:	2300      	movs	r3, #0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d049      	beq.n	80032b2 <_ZN13STM32Hardware5flushEv+0xc2>
        mutex = true;
 800321e:	4b27      	ldr	r3, [pc, #156]	; (80032bc <_ZN13STM32Hardware5flushEv+0xcc>)
 8003220:	2201      	movs	r2, #1
 8003222:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	429a      	cmp	r2, r3
 8003236:	d039      	beq.n	80032ac <_ZN13STM32Hardware5flushEv+0xbc>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800323e:	68da      	ldr	r2, [r3, #12]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	429a      	cmp	r2, r3
 800324a:	d20c      	bcs.n	8003266 <_ZN13STM32Hardware5flushEv+0x76>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	b29a      	uxth	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	b29b      	uxth	r3, r3
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	b29b      	uxth	r3, r3
 8003264:	e007      	b.n	8003276 <_ZN13STM32Hardware5flushEv+0x86>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	b29b      	uxth	r3, r3
 8003270:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8003274:	b29b      	uxth	r3, r3
 8003276:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6818      	ldr	r0, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	4413      	add	r3, r2
 800328c:	89fa      	ldrh	r2, [r7, #14]
 800328e:	4619      	mov	r1, r3
 8003290:	f007 f8e2 	bl	800a458 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800329a:	68da      	ldr	r2, [r3, #12]
 800329c:	89fb      	ldrh	r3, [r7, #14]
 800329e:	4413      	add	r3, r2
 80032a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80032aa:	60d3      	str	r3, [r2, #12]
        }
        mutex = false;
 80032ac:	4b03      	ldr	r3, [pc, #12]	; (80032bc <_ZN13STM32Hardware5flushEv+0xcc>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	701a      	strb	r2, [r3, #0]
      }
    }
 80032b2:	bf00      	nop
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	20000478 	.word	0x20000478

080032c0 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
      int n = length;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032d6:	bfa8      	it	ge
 80032d8:	f44f 6300 	movge.w	r3, #2048	; 0x800
 80032dc:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f5c3 6200 	rsb	r2, r3, #2048	; 0x800
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	4293      	cmp	r3, r2
 80032ee:	bf28      	it	cs
 80032f0:	4613      	movcs	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	4413      	add	r3, r2
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	68b9      	ldr	r1, [r7, #8]
 8003308:	4618      	mov	r0, r3
 800330a:	f00b fb3b 	bl	800e984 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003314:	689a      	ldr	r2, [r3, #8]
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	4413      	add	r3, r2
 800331a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003324:	6093      	str	r3, [r2, #8]

      if(n != n_tail){
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	429a      	cmp	r2, r3
 800332c:	d00b      	beq.n	8003346 <_ZN13STM32Hardware5writeEPhi+0x86>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f603 0008 	addw	r0, r3, #2056	; 0x808
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	18d1      	adds	r1, r2, r3
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	461a      	mov	r2, r3
 8003342:	f00b fb1f 	bl	800e984 <memcpy>
      }

      flush();
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f7ff ff52 	bl	80031f0 <_ZN13STM32Hardware5flushEv>
    }
 800334c:	bf00      	nop
 800334e:	3718      	adds	r7, #24
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	f004 fb38 	bl	80079d0 <HAL_GetTick>
 8003360:	4603      	mov	r3, r0
 8003362:	4618      	mov	r0, r3
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
	...

0800336c <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	4a04      	ldr	r2, [pc, #16]	; (8003388 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4618      	mov	r0, r3
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	0800f2e4 	.word	0x0800f2e4

0800338c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 2048,
         int OUTPUT_SIZE = 2048>
class NodeHandle_ : public NodeHandleBase_
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4618      	mov	r0, r3
 8003398:	f7ff ffe8 	bl	800336c <_ZN3ros15NodeHandleBase_C1Ev>
 800339c:	4a4b      	ldr	r2, [pc, #300]	; (80034cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev+0x140>)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	601a      	str	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	3304      	adds	r3, #4
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7ff feb8 	bl	800311c <_ZN13STM32HardwareC1Ev>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033b2:	461a      	mov	r2, r3
 80033b4:	2300      	movs	r3, #0
 80033b6:	6153      	str	r3, [r2, #20]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033be:	461a      	mov	r2, r3
 80033c0:	2300      	movs	r3, #0
 80033c2:	6193      	str	r3, [r2, #24]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033ca:	461a      	mov	r2, r3
 80033cc:	2300      	movs	r3, #0
 80033ce:	61d3      	str	r3, [r2, #28]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033d6:	461a      	mov	r2, r3
 80033d8:	2300      	movs	r3, #0
 80033da:	6213      	str	r3, [r2, #32]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033e2:	3324      	adds	r3, #36	; 0x24
 80033e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033e8:	2100      	movs	r1, #0
 80033ea:	4618      	mov	r0, r3
 80033ec:	f00b fad8 	bl	800e9a0 <memset>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033f6:	f603 0324 	addw	r3, r3, #2084	; 0x824
 80033fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033fe:	2100      	movs	r1, #0
 8003400:	4618      	mov	r0, r3
 8003402:	f00b facd 	bl	800e9a0 <memset>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800340c:	3324      	adds	r3, #36	; 0x24
 800340e:	2264      	movs	r2, #100	; 0x64
 8003410:	2100      	movs	r1, #0
 8003412:	4618      	mov	r0, r3
 8003414:	f00b fac4 	bl	800e9a0 <memset>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800341e:	3388      	adds	r3, #136	; 0x88
 8003420:	2264      	movs	r2, #100	; 0x64
 8003422:	2100      	movs	r1, #0
 8003424:	4618      	mov	r0, r3
 8003426:	f00b fabb 	bl	800e9a0 <memset>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003430:	461a      	mov	r2, r3
 8003432:	2300      	movs	r3, #0
 8003434:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800343e:	461a      	mov	r2, r3
 8003440:	2300      	movs	r3, #0
 8003442:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800344c:	461a      	mov	r2, r3
 800344e:	2300      	movs	r3, #0
 8003450:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800345a:	461a      	mov	r2, r3
 800345c:	2300      	movs	r3, #0
 800345e:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003468:	461a      	mov	r2, r3
 800346a:	2300      	movs	r3, #0
 800346c:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003482:	461a      	mov	r2, r3
 8003484:	2300      	movs	r3, #0
 8003486:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003490:	461a      	mov	r2, r3
 8003492:	2300      	movs	r3, #0
 8003494:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800349e:	461a      	mov	r2, r3
 80034a0:	2300      	movs	r3, #0
 80034a2:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80034b8:	3314      	adds	r3, #20
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7ff fb42 	bl	8002b44 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4618      	mov	r0, r3
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	0800f2b8 	.word	0x0800f2b8

080034d0 <HAL_UART_TxCpltCallback>:
void MotorTest();

// Subscribe to Twist messages on cmd_vel.
ros::Subscriber<geometry_msgs::Twist> sub_cmd_vel("cmd_vel", &cmd_velCallback);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 80034d8:	4805      	ldr	r0, [pc, #20]	; (80034f0 <HAL_UART_TxCpltCallback+0x20>)
 80034da:	f000 fa83 	bl	80039e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE11getHardwareEv>
 80034de:	4603      	mov	r3, r0
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff fe85 	bl	80031f0 <_ZN13STM32Hardware5flushEv>
}
 80034e6:	bf00      	nop
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	2000047c 	.word	0x2000047c

080034f4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 80034fc:	4805      	ldr	r0, [pc, #20]	; (8003514 <HAL_UART_RxCpltCallback+0x20>)
 80034fe:	f000 fa71 	bl	80039e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE11getHardwareEv>
 8003502:	4603      	mov	r3, r0
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff fe34 	bl	8003172 <_ZN13STM32Hardware10reset_rbufEv>
}
 800350a:	bf00      	nop
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	2000047c 	.word	0x2000047c

08003518 <setup>:

// This is an Arduino convention.  Place everything that needs to run just
// once in the setup() funtion.  The environment will call setup()

void setup(void) {
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0

  leftWheelPID.SetSampleTime(PID_PERIOD);
 800351c:	210a      	movs	r1, #10
 800351e:	481c      	ldr	r0, [pc, #112]	; (8003590 <setup+0x78>)
 8003520:	f002 feba 	bl	8006298 <_ZN3PID13SetSampleTimeEi>
  rightWheelPID.SetSampleTime(PID_PERIOD);
 8003524:	210a      	movs	r1, #10
 8003526:	481b      	ldr	r0, [pc, #108]	; (8003594 <setup+0x7c>)
 8003528:	f002 feb6 	bl	8006298 <_ZN3PID13SetSampleTimeEi>
  leftWheelPID.SetOutputLimits(-255, 255);
 800352c:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8003580 <setup+0x68>
 8003530:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8003588 <setup+0x70>
 8003534:	4816      	ldr	r0, [pc, #88]	; (8003590 <setup+0x78>)
 8003536:	f002 feea 	bl	800630e <_ZN3PID15SetOutputLimitsEdd>
  rightWheelPID.SetOutputLimits(-255, 255);
 800353a:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8003580 <setup+0x68>
 800353e:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8003588 <setup+0x70>
 8003542:	4814      	ldr	r0, [pc, #80]	; (8003594 <setup+0x7c>)
 8003544:	f002 fee3 	bl	800630e <_ZN3PID15SetOutputLimitsEdd>
  leftWheelPID.SetMode(AUTOMATIC);
 8003548:	2101      	movs	r1, #1
 800354a:	4811      	ldr	r0, [pc, #68]	; (8003590 <setup+0x78>)
 800354c:	f002 ff4e 	bl	80063ec <_ZN3PID7SetModeEi>
  rightWheelPID.SetMode(AUTOMATIC);
 8003550:	2101      	movs	r1, #1
 8003552:	4810      	ldr	r0, [pc, #64]	; (8003594 <setup+0x7c>)
 8003554:	f002 ff4a 	bl	80063ec <_ZN3PID7SetModeEi>

  // Connect to ROS computer and wait for connection
  nh.initNode();
 8003558:	480f      	ldr	r0, [pc, #60]	; (8003598 <setup+0x80>)
 800355a:	f000 fa4f 	bl	80039fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8initNodeEv>

  // Advertize odometry and transform
  odo.setupPubs(nh);
 800355e:	490e      	ldr	r1, [pc, #56]	; (8003598 <setup+0x80>)
 8003560:	480e      	ldr	r0, [pc, #56]	; (800359c <setup+0x84>)
 8003562:	f002 f9bf 	bl	80058e4 <_ZN8Odometer9setupPubsERN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEE>

  // Subscribe to cmd_vel
  nh.subscribe(sub_cmd_vel);
 8003566:	490e      	ldr	r1, [pc, #56]	; (80035a0 <setup+0x88>)
 8003568:	480b      	ldr	r0, [pc, #44]	; (8003598 <setup+0x80>)
 800356a:	f000 fa70 	bl	8003a4e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9subscribeERNS_11Subscriber_E>

  nh.loginfo("starting...");
 800356e:	490d      	ldr	r1, [pc, #52]	; (80035a4 <setup+0x8c>)
 8003570:	4809      	ldr	r0, [pc, #36]	; (8003598 <setup+0x80>)
 8003572:	f000 fa97 	bl	8003aa4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7loginfoEPKc>
}
 8003576:	bf00      	nop
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	f3af 8000 	nop.w
 8003580:	00000000 	.word	0x00000000
 8003584:	406fe000 	.word	0x406fe000
 8003588:	00000000 	.word	0x00000000
 800358c:	c06fe000 	.word	0xc06fe000
 8003590:	20002610 	.word	0x20002610
 8003594:	20002688 	.word	0x20002688
 8003598:	2000047c 	.word	0x2000047c
 800359c:	200025e8 	.word	0x200025e8
 80035a0:	20002700 	.word	0x20002700
 80035a4:	0800ef6c 	.word	0x0800ef6c

080035a8 <loop>:

// This loop() funtion is an arduino convention.  It is called by the environment
// inside a tight loop and runs forever or until the CPU is reset or powered off.
//

void loop(void) {
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b08a      	sub	sp, #40	; 0x28
 80035ac:	af00      	add	r7, sp, #0
  //  3.  The Odometry and TF publisher
  // Each wheel has it's own PID control and might do it's computation at
  // different times.

  // Get encoder values
  long encLeft  = odometry[0];
 80035ae:	4b6a      	ldr	r3, [pc, #424]	; (8003758 <loop+0x1b0>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	627b      	str	r3, [r7, #36]	; 0x24
  long encRight = odometry[1];
 80035b4:	4b68      	ldr	r3, [pc, #416]	; (8003758 <loop+0x1b0>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	623b      	str	r3, [r7, #32]
  long curMillis = tick;  // capture time when encoders are sampled
 80035ba:	4b68      	ldr	r3, [pc, #416]	; (800375c <loop+0x1b4>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	61fb      	str	r3, [r7, #28]


  //=========> LEFT PID Controler
  //
  // Figure out how far we have gone in meters from last PID computation
  distLeft  = meterPerTick * float(encLeft  - encoderLeftLastValuePid);
 80035c0:	4b67      	ldr	r3, [pc, #412]	; (8003760 <loop+0x1b8>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	ee07 3a90 	vmov	s15, r3
 80035cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035d0:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8003764 <loop+0x1bc>
 80035d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035d8:	edc7 7a06 	vstr	s15, [r7, #24]

  //figure out how fast the LEFT wheel went, in meters per second
  millis_from_last  = curMillis - millis_last_LEFT;
 80035dc:	69fa      	ldr	r2, [r7, #28]
 80035de:	4b62      	ldr	r3, [pc, #392]	; (8003768 <loop+0x1c0>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	617b      	str	r3, [r7, #20]
  seconds_from_last = float(millis_from_last) / 1000.0;
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	ee07 3a90 	vmov	s15, r3
 80035ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035f0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800376c <loop+0x1c4>
 80035f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035f8:	edc7 7a04 	vstr	s15, [r7, #16]
  leftInput  = distLeft  / seconds_from_last;
 80035fc:	ed97 7a06 	vldr	s14, [r7, #24]
 8003600:	edd7 7a04 	vldr	s15, [r7, #16]
 8003604:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003608:	ee16 0a90 	vmov	r0, s13
 800360c:	f7fc ff4c 	bl	80004a8 <__aeabi_f2d>
 8003610:	4602      	mov	r2, r0
 8003612:	460b      	mov	r3, r1
 8003614:	4956      	ldr	r1, [pc, #344]	; (8003770 <loop+0x1c8>)
 8003616:	e9c1 2300 	strd	r2, r3, [r1]
  // The PID.Compute() method will look at the millis() clock and determine if it is
  // time to calculate new output.   If so it returns true and then we update the
  // motor speed.  Note the motor update speed update rate is independent of the /tf
  // and /odom publication rate.

  if (leftWheelPID.Compute()) {
 800361a:	4856      	ldr	r0, [pc, #344]	; (8003774 <loop+0x1cc>)
 800361c:	f002 fca0 	bl	8005f60 <_ZN3PID7ComputeEv>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d005      	beq.n	8003632 <loop+0x8a>
      encoderLeftLastValuePid = encLeft;
 8003626:	4a4e      	ldr	r2, [pc, #312]	; (8003760 <loop+0x1b8>)
 8003628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362a:	6013      	str	r3, [r2, #0]
      millis_last_LEFT = curMillis;
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	4a4e      	ldr	r2, [pc, #312]	; (8003768 <loop+0x1c0>)
 8003630:	6013      	str	r3, [r2, #0]


  //==========> RIGHT PID Controler
  //
  // Figure out how far we have gone in meters from last PID computation
  distRight = meterPerTick * float(encRight - encoderRightLastValuePid);
 8003632:	4b51      	ldr	r3, [pc, #324]	; (8003778 <loop+0x1d0>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6a3a      	ldr	r2, [r7, #32]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	ee07 3a90 	vmov	s15, r3
 800363e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003642:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8003764 <loop+0x1bc>
 8003646:	ee67 7a87 	vmul.f32	s15, s15, s14
 800364a:	edc7 7a03 	vstr	s15, [r7, #12]

  //figure out how fast the RIGHT wheel went, in meters per second
  millis_from_last  = curMillis - millis_last_RIGHT;
 800364e:	69fa      	ldr	r2, [r7, #28]
 8003650:	4b4a      	ldr	r3, [pc, #296]	; (800377c <loop+0x1d4>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	617b      	str	r3, [r7, #20]
  seconds_from_last = float(millis_from_last) / 1000.0;
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	ee07 3a90 	vmov	s15, r3
 800365e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003662:	eddf 6a42 	vldr	s13, [pc, #264]	; 800376c <loop+0x1c4>
 8003666:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800366a:	edc7 7a04 	vstr	s15, [r7, #16]
  rightInput  = distRight  / seconds_from_last;
 800366e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003672:	edd7 7a04 	vldr	s15, [r7, #16]
 8003676:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800367a:	ee16 0a90 	vmov	r0, s13
 800367e:	f7fc ff13 	bl	80004a8 <__aeabi_f2d>
 8003682:	4602      	mov	r2, r0
 8003684:	460b      	mov	r3, r1
 8003686:	493e      	ldr	r1, [pc, #248]	; (8003780 <loop+0x1d8>)
 8003688:	e9c1 2300 	strd	r2, r3, [r1]
  // The PID.Compute() method will look at the millis() clock and determine if it is
  // time to calculate new output.   If so it returns true and then we update the
  // motor speed.  Note the motor update speed update rate is independent of the /tf
  // and /odom publication rate.

  if (rightWheelPID.Compute()) {
 800368c:	483d      	ldr	r0, [pc, #244]	; (8003784 <loop+0x1dc>)
 800368e:	f002 fc67 	bl	8005f60 <_ZN3PID7ComputeEv>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d005      	beq.n	80036a4 <loop+0xfc>
      encoderRightLastValuePid = encRight;
 8003698:	4a37      	ldr	r2, [pc, #220]	; (8003778 <loop+0x1d0>)
 800369a:	6a3b      	ldr	r3, [r7, #32]
 800369c:	6013      	str	r3, [r2, #0]
      millis_last_RIGHT = curMillis;
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	4a36      	ldr	r2, [pc, #216]	; (800377c <loop+0x1d4>)
 80036a2:	6013      	str	r3, [r2, #0]
    }

  //==========> OdometryPublsher
  //
  // Check if it is time to publish /odom and /tf
  if (curMillis >= NextPubMillis) {
 80036a4:	69fa      	ldr	r2, [r7, #28]
 80036a6:	4b38      	ldr	r3, [pc, #224]	; (8003788 <loop+0x1e0>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d34d      	bcc.n	800374a <loop+0x1a2>
    NextPubMillis = curMillis + ODO_PERIOD;
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	330a      	adds	r3, #10
 80036b2:	461a      	mov	r2, r3
 80036b4:	4b34      	ldr	r3, [pc, #208]	; (8003788 <loop+0x1e0>)
 80036b6:	601a      	str	r2, [r3, #0]

    // Figure out how far we have gone in meters from last PID computation
    distLeft  = meterPerTick * float(encLeft  - encoderLeftLastValueOdo);
 80036b8:	4b34      	ldr	r3, [pc, #208]	; (800378c <loop+0x1e4>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	ee07 3a90 	vmov	s15, r3
 80036c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036c8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003764 <loop+0x1bc>
 80036cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036d0:	edc7 7a06 	vstr	s15, [r7, #24]
    distRight = meterPerTick * float(encRight - encoderRightLastValueOdo);
 80036d4:	4b2e      	ldr	r3, [pc, #184]	; (8003790 <loop+0x1e8>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6a3a      	ldr	r2, [r7, #32]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	ee07 3a90 	vmov	s15, r3
 80036e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036e4:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003764 <loop+0x1bc>
 80036e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036ec:	edc7 7a03 	vstr	s15, [r7, #12]

    // Publish odometry
    float odoInterval = float(curMillis - timeLastOdo) / 1000.0;
 80036f0:	4b28      	ldr	r3, [pc, #160]	; (8003794 <loop+0x1ec>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	69fa      	ldr	r2, [r7, #28]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	ee07 3a90 	vmov	s15, r3
 80036fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003700:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800376c <loop+0x1c4>
 8003704:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003708:	edc7 7a02 	vstr	s15, [r7, #8]
    odo.update_publish(nh.now(), odoInterval, distLeft, distRight);
 800370c:	463b      	mov	r3, r7
 800370e:	4922      	ldr	r1, [pc, #136]	; (8003798 <loop+0x1f0>)
 8003710:	4618      	mov	r0, r3
 8003712:	f000 f9d5 	bl	8003ac0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3nowEv>
 8003716:	ed97 1a03 	vldr	s2, [r7, #12]
 800371a:	edd7 0a06 	vldr	s1, [r7, #24]
 800371e:	ed97 0a02 	vldr	s0, [r7, #8]
 8003722:	463b      	mov	r3, r7
 8003724:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003728:	481c      	ldr	r0, [pc, #112]	; (800379c <loop+0x1f4>)
 800372a:	f002 f8f1 	bl	8005910 <_ZN8Odometer14update_publishEN3ros4TimeEfff>

    encoderLeftLastValueOdo  = encLeft;
 800372e:	4a17      	ldr	r2, [pc, #92]	; (800378c <loop+0x1e4>)
 8003730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003732:	6013      	str	r3, [r2, #0]
    encoderRightLastValueOdo = encRight;
 8003734:	4a16      	ldr	r2, [pc, #88]	; (8003790 <loop+0x1e8>)
 8003736:	6a3b      	ldr	r3, [r7, #32]
 8003738:	6013      	str	r3, [r2, #0]
    timeLastOdo = curMillis;
 800373a:	4a16      	ldr	r2, [pc, #88]	; (8003794 <loop+0x1ec>)
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	6013      	str	r3, [r2, #0]
    test++;
 8003740:	4b17      	ldr	r3, [pc, #92]	; (80037a0 <loop+0x1f8>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	3301      	adds	r3, #1
 8003746:	4a16      	ldr	r2, [pc, #88]	; (80037a0 <loop+0x1f8>)
 8003748:	6013      	str	r3, [r2, #0]
    }


  // handle any data movements across the serial interface
  nh.spinOnce();
 800374a:	4813      	ldr	r0, [pc, #76]	; (8003798 <loop+0x1f0>)
 800374c:	f000 f9f6 	bl	8003b3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv>

}
 8003750:	bf00      	nop
 8003752:	3728      	adds	r7, #40	; 0x28
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	20000008 	.word	0x20000008
 800375c:	20000470 	.word	0x20000470
 8003760:	20002738 	.word	0x20002738
 8003764:	393f1043 	.word	0x393f1043
 8003768:	2000273c 	.word	0x2000273c
 800376c:	447a0000 	.word	0x447a0000
 8003770:	200025c0 	.word	0x200025c0
 8003774:	20002610 	.word	0x20002610
 8003778:	20002740 	.word	0x20002740
 800377c:	20002744 	.word	0x20002744
 8003780:	200025d8 	.word	0x200025d8
 8003784:	20002688 	.word	0x20002688
 8003788:	20002748 	.word	0x20002748
 800378c:	2000274c 	.word	0x2000274c
 8003790:	20002750 	.word	0x20002750
 8003794:	20002754 	.word	0x20002754
 8003798:	2000047c 	.word	0x2000047c
 800379c:	200025e8 	.word	0x200025e8
 80037a0:	20000474 	.word	0x20000474
 80037a4:	00000000 	.word	0x00000000

080037a8 <_Z15cmd_velCallbackRKN13geometry_msgs5TwistE>:

// This funtion is called every time we receive a Twist message.
// We do not send the commanded speed to the wheels.  Rather we set
// thePID loops set point to the commanded sprrd.
void cmd_velCallback(const geometry_msgs::Twist& twist_msg) {
 80037a8:	b5b0      	push	{r4, r5, r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  //    linear.x  is the forward speed in meters per second.
  //              (The "x" axis points forward.)
  //    angular.y is the rotation about the z or vertical
  //              axis in radians per second.
  //
  float vel_x   = twist_msg.linear.x;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	617b      	str	r3, [r7, #20]
  float vel_th  = twist_msg.angular.z;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	613b      	str	r3, [r7, #16]

  // This is a "hack".  It turns ou the motors have a minimum
  // speed because of internal friction.   If the commanded speed is
  // below a threshold we replace the commanded speed with zero.
  // TODO:  Find a better threshold, make it a parameter
  if (fabs(vel_x)  < 0.001) vel_x  = 0.0;
 80037bc:	ed97 0a05 	vldr	s0, [r7, #20]
 80037c0:	f7fe fbcb 	bl	8001f5a <_ZSt4fabsf>
 80037c4:	ee10 3a10 	vmov	r3, s0
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7fc fe6d 	bl	80004a8 <__aeabi_f2d>
 80037ce:	2301      	movs	r3, #1
 80037d0:	461c      	mov	r4, r3
 80037d2:	a346      	add	r3, pc, #280	; (adr r3, 80038ec <_Z15cmd_velCallbackRKN13geometry_msgs5TwistE+0x144>)
 80037d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d8:	f7fd f930 	bl	8000a3c <__aeabi_dcmplt>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <_Z15cmd_velCallbackRKN13geometry_msgs5TwistE+0x3e>
 80037e2:	2300      	movs	r3, #0
 80037e4:	461c      	mov	r4, r3
 80037e6:	b2e3      	uxtb	r3, r4
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d002      	beq.n	80037f2 <_Z15cmd_velCallbackRKN13geometry_msgs5TwistE+0x4a>
 80037ec:	f04f 0300 	mov.w	r3, #0
 80037f0:	617b      	str	r3, [r7, #20]
  if (fabs(vel_th) < 0.001) vel_th = 0.0;
 80037f2:	ed97 0a04 	vldr	s0, [r7, #16]
 80037f6:	f7fe fbb0 	bl	8001f5a <_ZSt4fabsf>
 80037fa:	ee10 3a10 	vmov	r3, s0
 80037fe:	4618      	mov	r0, r3
 8003800:	f7fc fe52 	bl	80004a8 <__aeabi_f2d>
 8003804:	2301      	movs	r3, #1
 8003806:	461c      	mov	r4, r3
 8003808:	a338      	add	r3, pc, #224	; (adr r3, 80038ec <_Z15cmd_velCallbackRKN13geometry_msgs5TwistE+0x144>)
 800380a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380e:	f7fd f915 	bl	8000a3c <__aeabi_dcmplt>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d101      	bne.n	800381c <_Z15cmd_velCallbackRKN13geometry_msgs5TwistE+0x74>
 8003818:	2300      	movs	r3, #0
 800381a:	461c      	mov	r4, r3
 800381c:	b2e3      	uxtb	r3, r4
 800381e:	2b00      	cmp	r3, #0
 8003820:	d002      	beq.n	8003828 <_Z15cmd_velCallbackRKN13geometry_msgs5TwistE+0x80>
 8003822:	f04f 0300 	mov.w	r3, #0
 8003826:	613b      	str	r3, [r7, #16]

  // Compute the wheel speeds in meters per second.
  float left_vel  =  vel_x - (vel_th * base_width / 2.0);
 8003828:	6978      	ldr	r0, [r7, #20]
 800382a:	f7fc fe3d 	bl	80004a8 <__aeabi_f2d>
 800382e:	4604      	mov	r4, r0
 8003830:	460d      	mov	r5, r1
 8003832:	edd7 7a04 	vldr	s15, [r7, #16]
 8003836:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80038e0 <_Z15cmd_velCallbackRKN13geometry_msgs5TwistE+0x138>
 800383a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800383e:	ee17 0a90 	vmov	r0, s15
 8003842:	f7fc fe31 	bl	80004a8 <__aeabi_f2d>
 8003846:	f04f 0200 	mov.w	r2, #0
 800384a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800384e:	f7fc ffad 	bl	80007ac <__aeabi_ddiv>
 8003852:	4602      	mov	r2, r0
 8003854:	460b      	mov	r3, r1
 8003856:	4620      	mov	r0, r4
 8003858:	4629      	mov	r1, r5
 800385a:	f7fc fcc5 	bl	80001e8 <__aeabi_dsub>
 800385e:	4602      	mov	r2, r0
 8003860:	460b      	mov	r3, r1
 8003862:	4610      	mov	r0, r2
 8003864:	4619      	mov	r1, r3
 8003866:	f7fd f939 	bl	8000adc <__aeabi_d2f>
 800386a:	4603      	mov	r3, r0
 800386c:	60fb      	str	r3, [r7, #12]
  float right_vel =  vel_x + (vel_th * base_width / 2.0);
 800386e:	6978      	ldr	r0, [r7, #20]
 8003870:	f7fc fe1a 	bl	80004a8 <__aeabi_f2d>
 8003874:	4604      	mov	r4, r0
 8003876:	460d      	mov	r5, r1
 8003878:	edd7 7a04 	vldr	s15, [r7, #16]
 800387c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80038e0 <_Z15cmd_velCallbackRKN13geometry_msgs5TwistE+0x138>
 8003880:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003884:	ee17 0a90 	vmov	r0, s15
 8003888:	f7fc fe0e 	bl	80004a8 <__aeabi_f2d>
 800388c:	f04f 0200 	mov.w	r2, #0
 8003890:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003894:	f7fc ff8a 	bl	80007ac <__aeabi_ddiv>
 8003898:	4602      	mov	r2, r0
 800389a:	460b      	mov	r3, r1
 800389c:	4620      	mov	r0, r4
 800389e:	4629      	mov	r1, r5
 80038a0:	f7fc fca4 	bl	80001ec <__adddf3>
 80038a4:	4602      	mov	r2, r0
 80038a6:	460b      	mov	r3, r1
 80038a8:	4610      	mov	r0, r2
 80038aa:	4619      	mov	r1, r3
 80038ac:	f7fd f916 	bl	8000adc <__aeabi_d2f>
 80038b0:	4603      	mov	r3, r0
 80038b2:	60bb      	str	r3, [r7, #8]
  // Show the Twist message on the LCD.
  //displayStatus(&vel_x, &vel_th);

  // The PID works in units of meters per second, so no
  // conversion is needed.
  leftSetpoint  = left_vel;
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f7fc fdf7 	bl	80004a8 <__aeabi_f2d>
 80038ba:	4602      	mov	r2, r0
 80038bc:	460b      	mov	r3, r1
 80038be:	4909      	ldr	r1, [pc, #36]	; (80038e4 <_Z15cmd_velCallbackRKN13geometry_msgs5TwistE+0x13c>)
 80038c0:	e9c1 2300 	strd	r2, r3, [r1]
  rightSetpoint = right_vel;
 80038c4:	68b8      	ldr	r0, [r7, #8]
 80038c6:	f7fc fdef 	bl	80004a8 <__aeabi_f2d>
 80038ca:	4602      	mov	r2, r0
 80038cc:	460b      	mov	r3, r1
 80038ce:	4906      	ldr	r1, [pc, #24]	; (80038e8 <_Z15cmd_velCallbackRKN13geometry_msgs5TwistE+0x140>)
 80038d0:	e9c1 2300 	strd	r2, r3, [r1]
}
 80038d4:	bf00      	nop
 80038d6:	3718      	adds	r7, #24
 80038d8:	46bd      	mov	sp, r7
 80038da:	bdb0      	pop	{r4, r5, r7, pc}
 80038dc:	f3af 8000 	nop.w
 80038e0:	3ee147ae 	.word	0x3ee147ae
 80038e4:	200025b8 	.word	0x200025b8
 80038e8:	200025d0 	.word	0x200025d0
 80038ec:	d2f1a9fc 	.word	0xd2f1a9fc
 80038f0:	3f50624d 	.word	0x3f50624d

080038f4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80038fe:	2300      	movs	r3, #0
 8003900:	60fb      	str	r3, [r7, #12]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2b03      	cmp	r3, #3
 8003906:	d80d      	bhi.n	8003924 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	fa22 f103 	lsr.w	r1, r2, r3
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	4413      	add	r3, r2
 8003918:	b2ca      	uxtb	r2, r1
 800391a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	3301      	adds	r3, #1
 8003920:	60fb      	str	r3, [r7, #12]
 8003922:	e7ee      	b.n	8003902 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8003924:	bf00      	nop
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003940:	2300      	movs	r3, #0
 8003942:	60fb      	str	r3, [r7, #12]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2b03      	cmp	r3, #3
 8003948:	d811      	bhi.n	800396e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6839      	ldr	r1, [r7, #0]
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	440a      	add	r2, r1
 8003954:	7812      	ldrb	r2, [r2, #0]
 8003956:	4611      	mov	r1, r2
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	00d2      	lsls	r2, r2, #3
 800395c:	fa01 f202 	lsl.w	r2, r1, r2
 8003960:	431a      	orrs	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	3301      	adds	r3, #1
 800396a:	60fb      	str	r3, [r7, #12]
 800396c:	e7ea      	b.n	8003944 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 800396e:	bf00      	nop
 8003970:	3714      	adds	r7, #20
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
	...

0800397c <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	4a04      	ldr	r2, [pc, #16]	; (8003998 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	601a      	str	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4618      	mov	r0, r3
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr
 8003998:	0800f2cc 	.word	0x0800f2cc

0800399c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
 80039a8:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff ffe5 	bl	800397c <_ZN3ros11Subscriber_C1Ev>
 80039b2:	4a0b      	ldr	r2, [pc, #44]	; (80039e0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	601a      	str	r2, [r3, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	330c      	adds	r3, #12
 80039bc:	4618      	mov	r0, r3
 80039be:	f7fe fcdb 	bl	8002378 <_ZN13geometry_msgs5TwistC1Ev>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	631a      	str	r2, [r3, #48]	; 0x30
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	635a      	str	r2, [r3, #52]	; 0x34
  {
    topic_ = topic_name;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	609a      	str	r2, [r3, #8]
  };
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4618      	mov	r0, r3
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	0800f2a0 	.word	0x0800f2a0

080039e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	3304      	adds	r3, #4
  }
 80039f0:	4618      	mov	r0, r3
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	3304      	adds	r3, #4
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff fba7 	bl	800315c <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003a14:	461a      	mov	r2, r3
 8003a16:	2300      	movs	r3, #0
 8003a18:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
    bytes_ = 0;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003a22:	461a      	mov	r2, r3
 8003a24:	2300      	movs	r3, #0
 8003a26:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    index_ = 0;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003a30:	461a      	mov	r2, r3
 8003a32:	2300      	movs	r3, #0
 8003a34:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    topic_ = 0;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003a3e:	461a      	mov	r2, r3
 8003a40:	2300      	movs	r3, #0
 8003a42:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
  };
 8003a46:	bf00      	nop
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9subscribeERNS_11Subscriber_E>:
    }
    return false;
  }

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 8003a4e:	b480      	push	{r7}
 8003a50:	b085      	sub	sp, #20
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
 8003a56:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003a58:	2300      	movs	r3, #0
 8003a5a:	60fb      	str	r3, [r7, #12]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2b18      	cmp	r3, #24
 8003a60:	dc19      	bgt.n	8003a96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9subscribeERNS_11Subscriber_E+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	f602 0222 	addw	r2, r2, #2082	; 0x822
 8003a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10d      	bne.n	8003a8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9subscribeERNS_11Subscriber_E+0x40>
      {
        subscribers[i] = &s;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	f602 0222 	addw	r2, r2, #2082	; 0x822
 8003a7a:	6839      	ldr	r1, [r7, #0]
 8003a7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	605a      	str	r2, [r3, #4]
        return true;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e004      	b.n	8003a98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	3301      	adds	r3, #1
 8003a92:	60fb      	str	r3, [r7, #12]
 8003a94:	e7e2      	b.n	8003a5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9subscribeERNS_11Subscriber_E+0xe>
      }
    }
    return false;
 8003a96:	2300      	movs	r3, #0
  }
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3714      	adds	r7, #20
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7loginfoEPKc>:
public:
  void logdebug(const char* msg)
  {
    log(rosserial_msgs::Log::ROSDEBUG, msg);
  }
  void loginfo(const char * msg)
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::INFO, msg);
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 faba 	bl	800402c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3logEcPKc>
  }
 8003ab8:	bf00      	nop
 8003aba:	3708      	adds	r7, #8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3nowEv>:
  Time now()
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	3304      	adds	r3, #4
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7ff fc40 	bl	8003354 <_ZN13STM32Hardware4timeEv>
 8003ad4:	60f8      	str	r0, [r7, #12]
    Time current_time;
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7fe fa4f 	bl	8001f7a <_ZN3ros4TimeC1Ev>
    current_time.sec = ms / 1000 + sec_offset;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4a15      	ldr	r2, [pc, #84]	; (8003b34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3nowEv+0x74>)
 8003ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae4:	099a      	lsrs	r2, r3, #6
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	441a      	add	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	601a      	str	r2, [r3, #0]
    current_time.nsec = (ms % 1000) * 1000000UL + nsec_offset;
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	4b0f      	ldr	r3, [pc, #60]	; (8003b34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3nowEv+0x74>)
 8003af8:	fba3 1302 	umull	r1, r3, r3, r2
 8003afc:	099b      	lsrs	r3, r3, #6
 8003afe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003b02:	fb01 f303 	mul.w	r3, r1, r3
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	4a0b      	ldr	r2, [pc, #44]	; (8003b38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3nowEv+0x78>)
 8003b0a:	fb03 f202 	mul.w	r2, r3, r2
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b14:	69db      	ldr	r3, [r3, #28]
 8003b16:	441a      	add	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	605a      	str	r2, [r3, #4]
    normalizeSecNSec(current_time.sec, current_time.nsec);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	3304      	adds	r3, #4
 8003b20:	4619      	mov	r1, r3
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f003 fbca 	bl	80072bc <_ZN3ros16normalizeSecNSecERmS0_>
    return current_time;
 8003b28:	bf00      	nop
  }
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	10624dd3 	.word	0x10624dd3
 8003b38:	000f4240 	.word	0x000f4240

08003b3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv>:
  virtual int spinOnce() override
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	3304      	adds	r3, #4
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7ff fc03 	bl	8003354 <_ZN13STM32Hardware4timeEv>
 8003b4e:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003b56:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d905      	bls.n	8003b72 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x36>
      configured_ = false;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
    if (mode_ != MODE_FIRST_FF)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003b78:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00e      	beq.n	8003b9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003b86:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d906      	bls.n	8003b9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003b96:	461a      	mov	r2, r3
 8003b98:	2300      	movs	r3, #0
 8003b9a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
      if (spin_timeout_ > 0)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d015      	beq.n	8003bd6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x9a>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	3304      	adds	r3, #4
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7ff fbd0 	bl	8003354 <_ZN13STM32Hardware4timeEv>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	1ad2      	subs	r2, r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	bf8c      	ite	hi
 8003bc6:	2301      	movhi	r3, #1
 8003bc8:	2300      	movls	r3, #0
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d002      	beq.n	8003bd6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x9a>
          return SPIN_TIMEOUT;
 8003bd0:	f06f 0301 	mvn.w	r3, #1
 8003bd4:	e226      	b.n	8004024 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x4e8>
      int data = hardware_.read();
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	3304      	adds	r3, #4
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7ff fada 	bl	8003194 <_ZN13STM32Hardware4readEv>
 8003be0:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f2c0 81ff 	blt.w	8003fe8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x4ac>
      checksum_ += data;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003bf0:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8003bfe:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003c08:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003c0c:	2b07      	cmp	r3, #7
 8003c0e:	d12d      	bne.n	8003c6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x130>
        message_in[index_++] = data;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003c16:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003c1a:	1c5a      	adds	r2, r3, #1
 8003c1c:	6879      	ldr	r1, [r7, #4]
 8003c1e:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 8003c22:	f8c1 20f8 	str.w	r2, [r1, #248]	; 0xf8
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	b2d1      	uxtb	r1, r2
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003c32:	3304      	adds	r3, #4
 8003c34:	460a      	mov	r2, r1
 8003c36:	701a      	strb	r2, [r3, #0]
        bytes_--;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003c3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c42:	3b01      	subs	r3, #1
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8003c4a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003c54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1a0      	bne.n	8003b9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003c62:	461a      	mov	r2, r3
 8003c64:	2308      	movs	r3, #8
 8003c66:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003c6a:	e798      	b.n	8003b9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003c72:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d130      	bne.n	8003cdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x1a0>
        if (data == 0xff)
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	2bff      	cmp	r3, #255	; 0xff
 8003c7e:	d112      	bne.n	8003ca6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x16a>
          mode_++;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003c86:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8003c92:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	3314      	adds	r3, #20
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8003ca0:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 8003ca4:	e77b      	b.n	8003b9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	3304      	adds	r3, #4
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7ff fb52 	bl	8003354 <_ZN13STM32Hardware4timeEv>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	bf8c      	ite	hi
 8003cbe:	2301      	movhi	r3, #1
 8003cc0:	2300      	movls	r3, #0
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f43f af6a 	beq.w	8003b9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
          configured_ = false;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
          return SPIN_TIMEOUT;
 8003cd6:	f06f 0301 	mvn.w	r3, #1
 8003cda:	e1a3      	b.n	8004024 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x4e8>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003ce2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d121      	bne.n	8003d2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x1f2>
        if (data == PROTOCOL_VER)
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	2bfe      	cmp	r3, #254	; 0xfe
 8003cee:	d10b      	bne.n	8003d08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x1cc>
          mode_++;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003cf6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8003d02:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003d06:	e74a      	b.n	8003b9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003d0e:	461a      	mov	r2, r3
 8003d10:	2300      	movs	r3, #0
 8003d12:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
          if (configured_ == false)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003d1c:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f47f af3c 	bne.w	8003b9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f99c 	bl	8004064 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15requestSyncTimeEv>
 8003d2c:	e737      	b.n	8003b9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003d34:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d120      	bne.n	8003d7e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x242>
        bytes_ = data;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003d42:	461a      	mov	r2, r3
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        index_ = 0;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003d50:	461a      	mov	r2, r3
 8003d52:	2300      	movs	r3, #0
 8003d54:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
        mode_++;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003d5e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003d62:	3301      	adds	r3, #1
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8003d6a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        checksum_ = data;               /* first byte for calculating size checksum */
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003d74:	461a      	mov	r2, r3
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 8003d7c:	e70f      	b.n	8003b9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003d84:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003d88:	2b03      	cmp	r3, #3
 8003d8a:	d118      	bne.n	8003dbe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x282>
        bytes_ += data << 8;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003d92:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	021b      	lsls	r3, r3, #8
 8003d9a:	4413      	add	r3, r2
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8003da2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        mode_++;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003dac:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003db0:	3301      	adds	r3, #1
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8003db8:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003dbc:	e6ef      	b.n	8003b9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003dc4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003dc8:	2b04      	cmp	r3, #4
 8003dca:	d11f      	bne.n	8003e0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x2d0>
        if ((checksum_ % 256) == 255)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003dd2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8003dd6:	425a      	negs	r2, r3
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	b2d2      	uxtb	r2, r2
 8003ddc:	bf58      	it	pl
 8003dde:	4253      	negpl	r3, r2
 8003de0:	2bff      	cmp	r3, #255	; 0xff
 8003de2:	d10b      	bne.n	8003dfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x2c0>
          mode_++;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003dea:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003dee:	3301      	adds	r3, #1
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8003df6:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003dfa:	e6d0      	b.n	8003b9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003e02:	461a      	mov	r2, r3
 8003e04:	2300      	movs	r3, #0
 8003e06:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003e0a:	e6c8      	b.n	8003b9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003e12:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003e16:	2b05      	cmp	r3, #5
 8003e18:	d119      	bne.n	8003e4e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x312>
        topic_ = data;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003e20:	461a      	mov	r2, r3
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        mode_++;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003e2e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003e32:	3301      	adds	r3, #1
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8003e3a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        checksum_ = data;               /* first byte included in checksum */
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003e44:	461a      	mov	r2, r3
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 8003e4c:	e6a7      	b.n	8003b9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003e54:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003e58:	2b06      	cmp	r3, #6
 8003e5a:	d123      	bne.n	8003ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x368>
        topic_ += data << 8;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003e62:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	021b      	lsls	r3, r3, #8
 8003e6a:	4413      	add	r3, r2
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8003e72:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        mode_ = MODE_MESSAGE;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	2307      	movs	r3, #7
 8003e80:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        if (bytes_ == 0)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003e8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f47f ae85 	bne.w	8003b9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	2308      	movs	r3, #8
 8003e9e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003ea2:	e67c      	b.n	8003b9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003eaa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003eae:	2b08      	cmp	r3, #8
 8003eb0:	f47f ae75 	bne.w	8003b9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003eba:	461a      	mov	r2, r3
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        if ((checksum_ % 256) == 255)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003ec8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8003ecc:	425a      	negs	r2, r3
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	b2d2      	uxtb	r2, r2
 8003ed2:	bf58      	it	pl
 8003ed4:	4253      	negpl	r3, r2
 8003ed6:	2bff      	cmp	r3, #255	; 0xff
 8003ed8:	f47f ae61 	bne.w	8003b9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003ee2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d116      	bne.n	8003f18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x3dc>
            requestSyncTime();
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f8ba 	bl	8004064 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15requestSyncTimeEv>
            negotiateTopics();
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 f8d6 	bl	80040a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003efc:	461a      	mov	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
            last_sync_receive_time = c_time;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            return SPIN_ERR;
 8003f12:	f04f 33ff 	mov.w	r3, #4294967295
 8003f16:	e085      	b.n	8004024 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x4e8>
          else if (topic_ == TopicInfo::ID_TIME)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003f1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f22:	2b0a      	cmp	r3, #10
 8003f24:	d108      	bne.n	8003f38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x3fc>
            syncTime(message_in);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003f2c:	3304      	adds	r3, #4
 8003f2e:	4619      	mov	r1, r3
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 f997 	bl	8004264 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8syncTimeEPh>
 8003f36:	e632      	b.n	8003b9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003f3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f42:	2b06      	cmp	r3, #6
 8003f44:	d112      	bne.n	8003f6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x430>
            req_param_resp.deserialize(message_in);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8003f4c:	3314      	adds	r3, #20
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	f502 5281 	add.w	r2, r2, #4128	; 0x1020
 8003f54:	3204      	adds	r2, #4
 8003f56:	4611      	mov	r1, r2
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7fe ff32 	bl	8002dc2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 8003f6a:	e618      	b.n	8003b9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003f72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f76:	2b0b      	cmp	r3, #11
 8003f78:	d106      	bne.n	8003f88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x44c>
            configured_ = false;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 8003f86:	e60a      	b.n	8003b9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003f8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f92:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f602 0222 	addw	r2, r2, #2082	; 0x822
 8003f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f43f adfc 	beq.w	8003b9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003fac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003fb0:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f602 0222 	addw	r2, r2, #2082	; 0x822
 8003fba:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003fc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003fc8:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f602 0222 	addw	r2, r2, #2082	; 0x822
 8003fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003fe0:	3304      	adds	r3, #4
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	4790      	blx	r2
    while (true)
 8003fe6:	e5da      	b.n	8003b9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x62>
        break;
 8003fe8:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003ff0:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d014      	beq.n	8004022 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x4e6>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003ffe:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800400a:	4293      	cmp	r3, r2
 800400c:	d909      	bls.n	8004022 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x4e6>
      requestSyncTime();
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 f828 	bl	8004064 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800401a:	461a      	mov	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    return SPIN_OK;
 8004022:	2300      	movs	r3, #0
  }
 8004024:	4618      	mov	r0, r3
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3logEcPKc>:
  void log(char byte, const char * msg)
 800402c:	b580      	push	{r7, lr}
 800402e:	b088      	sub	sp, #32
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	460b      	mov	r3, r1
 8004036:	607a      	str	r2, [r7, #4]
 8004038:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800403a:	f107 0314 	add.w	r3, r7, #20
 800403e:	4618      	mov	r0, r3
 8004040:	f7fe fcd0 	bl	80029e4 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004044:	7afb      	ldrb	r3, [r7, #11]
 8004046:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f107 0214 	add.w	r2, r7, #20
 8004056:	2107      	movs	r1, #7
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	4798      	blx	r3
  }
 800405c:	bf00      	nop
 800405e:	3720      	adds	r7, #32
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15requestSyncTimeEv>:
  void requestSyncTime()
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 800406c:	f107 030c 	add.w	r3, r7, #12
 8004070:	4618      	mov	r0, r3
 8004072:	f7fe fa03 	bl	800247c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f107 020c 	add.w	r2, r7, #12
 8004080:	210a      	movs	r1, #10
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	4798      	blx	r3
    rt_time = hardware_.time();
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	3304      	adds	r3, #4
 800408a:	4618      	mov	r0, r3
 800408c:	f7ff f962 	bl	8003354 <_ZN13STM32Hardware4timeEv>
 8004090:	4602      	mov	r2, r0
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004098:	615a      	str	r2, [r3, #20]
  }
 800409a:	bf00      	nop
 800409c:	3718      	adds	r7, #24
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv>:
  void negotiateTopics()
 80040a2:	b590      	push	{r4, r7, lr}
 80040a4:	b08b      	sub	sp, #44	; 0x2c
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
    rosserial_msgs::TopicInfo ti;
 80040aa:	f107 030c 	add.w	r3, r7, #12
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7fe fad4 	bl	800265c <_ZN14rosserial_msgs9TopicInfoC1Ev>
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80040b4:	2300      	movs	r3, #0
 80040b6:	627b      	str	r3, [r7, #36]	; 0x24
 80040b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ba:	2b18      	cmp	r3, #24
 80040bc:	dc63      	bgt.n	8004186 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv+0xe4>
      if (publishers[i] != 0) // non-empty slot
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c2:	f603 0308 	addw	r3, r3, #2056	; 0x808
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4413      	add	r3, r2
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d056      	beq.n	800417e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv+0xdc>
        ti.topic_id = publishers[i]->id_;
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	f603 0308 	addw	r3, r3, #2056	; 0x808
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	4413      	add	r3, r2
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	f603 0308 	addw	r3, r3, #2056	; 0x808
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	4413      	add	r3, r2
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fa:	f603 0308 	addw	r3, r3, #2056	; 0x808
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4413      	add	r3, r2
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	6859      	ldr	r1, [r3, #4]
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410a:	f603 0308 	addw	r3, r3, #2056	; 0x808
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	3308      	adds	r3, #8
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4608      	mov	r0, r1
 800411e:	4798      	blx	r3
 8004120:	4603      	mov	r3, r0
 8004122:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004128:	f603 0308 	addw	r3, r3, #2056	; 0x808
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4413      	add	r3, r2
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	6859      	ldr	r1, [r3, #4]
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	f603 0308 	addw	r3, r3, #2056	; 0x808
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4413      	add	r3, r2
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	330c      	adds	r3, #12
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4608      	mov	r0, r1
 800414c:	4798      	blx	r3
 800414e:	4603      	mov	r3, r0
 8004150:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8004152:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004156:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681c      	ldr	r4, [r3, #0]
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004162:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4413      	add	r3, r2
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	4618      	mov	r0, r3
 800416e:	f7fe ffb5 	bl	80030dc <_ZN3ros9Publisher15getEndpointTypeEv>
 8004172:	4601      	mov	r1, r0
 8004174:	f107 030c 	add.w	r3, r7, #12
 8004178:	461a      	mov	r2, r3
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004180:	3301      	adds	r3, #1
 8004182:	627b      	str	r3, [r7, #36]	; 0x24
 8004184:	e798      	b.n	80040b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv+0x16>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004186:	2300      	movs	r3, #0
 8004188:	627b      	str	r3, [r7, #36]	; 0x24
 800418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418c:	2b18      	cmp	r3, #24
 800418e:	dc5f      	bgt.n	8004250 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv+0x1ae>
      if (subscribers[i] != 0) // non-empty slot
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004194:	f602 0222 	addw	r2, r2, #2082	; 0x822
 8004198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d053      	beq.n	8004248 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv+0x1a6>
        ti.topic_id = subscribers[i]->id_;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041a4:	f602 0222 	addw	r2, r2, #2082	; 0x822
 80041a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041b6:	f602 0222 	addw	r2, r2, #2082	; 0x822
 80041ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041c6:	f602 0222 	addw	r2, r2, #2082	; 0x822
 80041ca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041d2:	f602 0222 	addw	r2, r2, #2082	; 0x822
 80041d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	3308      	adds	r3, #8
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4608      	mov	r0, r1
 80041e2:	4798      	blx	r3
 80041e4:	4603      	mov	r3, r0
 80041e6:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ec:	f602 0222 	addw	r2, r2, #2082	; 0x822
 80041f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041f8:	f602 0222 	addw	r2, r2, #2082	; 0x822
 80041fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	330c      	adds	r3, #12
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4608      	mov	r0, r1
 8004208:	4798      	blx	r3
 800420a:	4603      	mov	r3, r0
 800420c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800420e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004212:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681c      	ldr	r4, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800421e:	f602 0222 	addw	r2, r2, #2082	; 0x822
 8004222:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800422a:	f602 0222 	addw	r2, r2, #2082	; 0x822
 800422e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	3304      	adds	r3, #4
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4608      	mov	r0, r1
 800423a:	4798      	blx	r3
 800423c:	4601      	mov	r1, r0
 800423e:	f107 030c 	add.w	r3, r7, #12
 8004242:	461a      	mov	r2, r3
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424a:	3301      	adds	r3, #1
 800424c:	627b      	str	r3, [r7, #36]	; 0x24
 800424e:	e79c      	b.n	800418a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv+0xe8>
    configured_ = true;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
  }
 800425c:	bf00      	nop
 800425e:	372c      	adds	r7, #44	; 0x2c
 8004260:	46bd      	mov	sp, r7
 8004262:	bd90      	pop	{r4, r7, pc}

08004264 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800426e:	f107 0308 	add.w	r3, r7, #8
 8004272:	4618      	mov	r0, r3
 8004274:	f7fe f902 	bl	800247c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	3304      	adds	r3, #4
 800427c:	4618      	mov	r0, r3
 800427e:	f7ff f869 	bl	8003354 <_ZN13STM32Hardware4timeEv>
 8004282:	4602      	mov	r2, r0
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004290:	f107 0308 	add.w	r3, r7, #8
 8004294:	6839      	ldr	r1, [r7, #0]
 8004296:	4618      	mov	r0, r3
 8004298:	f7fe f960 	bl	800255c <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	4915      	ldr	r1, [pc, #84]	; (80042f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8syncTimeEPh+0x94>)
 80042a2:	fba1 1303 	umull	r1, r3, r1, r3
 80042a6:	099b      	lsrs	r3, r3, #6
 80042a8:	4413      	add	r3, r2
 80042aa:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80042ac:	6939      	ldr	r1, [r7, #16]
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	4b11      	ldr	r3, [pc, #68]	; (80042f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8syncTimeEPh+0x94>)
 80042b2:	fba3 0302 	umull	r0, r3, r3, r2
 80042b6:	099b      	lsrs	r3, r3, #6
 80042b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80042bc:	fb00 f303 	mul.w	r3, r0, r3
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	4a0e      	ldr	r2, [pc, #56]	; (80042fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8syncTimeEPh+0x98>)
 80042c4:	fb02 f303 	mul.w	r3, r2, r3
 80042c8:	440b      	add	r3, r1
 80042ca:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80042cc:	f107 0308 	add.w	r3, r7, #8
 80042d0:	3304      	adds	r3, #4
 80042d2:	4619      	mov	r1, r3
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 f8bf 	bl	8004458 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	3304      	adds	r3, #4
 80042de:	4618      	mov	r0, r3
 80042e0:	f7ff f838 	bl	8003354 <_ZN13STM32Hardware4timeEv>
 80042e4:	4602      	mov	r2, r0
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80042ec:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  }
 80042f0:	bf00      	nop
 80042f2:	3718      	adds	r7, #24
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	10624dd3 	.word	0x10624dd3
 80042fc:	000f4240 	.word	0x000f4240

08004300 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE>:
  virtual int publish(int id, const Msg * msg) override
 8004300:	b580      	push	{r7, lr}
 8004302:	b088      	sub	sp, #32
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
    if (id >= 100 && !configured_)
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	2b63      	cmp	r3, #99	; 0x63
 8004310:	dd0b      	ble.n	800432a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x2a>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004318:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800431c:	f083 0301 	eor.w	r3, r3, #1
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8004326:	2300      	movs	r3, #0
 8004328:	e090      	b.n	800444c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x14c>
    int l = msg->serialize(message_out + 7);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8004336:	3304      	adds	r3, #4
 8004338:	3307      	adds	r3, #7
 800433a:	4619      	mov	r1, r3
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	4790      	blx	r2
 8004340:	6178      	str	r0, [r7, #20]
    message_out[0] = 0xff;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004348:	22ff      	movs	r2, #255	; 0xff
 800434a:	f883 2824 	strb.w	r2, [r3, #2084]	; 0x824
    message_out[1] = PROTOCOL_VER;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004354:	22fe      	movs	r2, #254	; 0xfe
 8004356:	f883 2825 	strb.w	r2, [r3, #2085]	; 0x825
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	b2da      	uxtb	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004364:	f883 2826 	strb.w	r2, [r3, #2086]	; 0x826
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	b29b      	uxth	r3, r3
 800436c:	0a1b      	lsrs	r3, r3, #8
 800436e:	b29b      	uxth	r3, r3
 8004370:	b2da      	uxtb	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004378:	f883 2827 	strb.w	r2, [r3, #2087]	; 0x827
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004382:	f893 2826 	ldrb.w	r2, [r3, #2086]	; 0x826
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800438c:	f893 3827 	ldrb.w	r3, [r3, #2087]	; 0x827
 8004390:	4413      	add	r3, r2
 8004392:	b2db      	uxtb	r3, r3
 8004394:	43db      	mvns	r3, r3
 8004396:	b2da      	uxtb	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800439e:	f883 2828 	strb.w	r2, [r3, #2088]	; 0x828
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	b2da      	uxtb	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ac:	f883 2829 	strb.w	r2, [r3, #2089]	; 0x829
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	b21b      	sxth	r3, r3
 80043b4:	121b      	asrs	r3, r3, #8
 80043b6:	b21b      	sxth	r3, r3
 80043b8:	b2da      	uxtb	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043c0:	f883 282a 	strb.w	r2, [r3, #2090]	; 0x82a
    int chk = 0;
 80043c4:	2300      	movs	r3, #0
 80043c6:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80043c8:	2305      	movs	r3, #5
 80043ca:	61bb      	str	r3, [r7, #24]
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	3306      	adds	r3, #6
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	dc0e      	bgt.n	80043f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0xf4>
      chk += message_out[i];
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	4413      	add	r3, r2
 80043dc:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 80043e0:	3304      	adds	r3, #4
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	461a      	mov	r2, r3
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	4413      	add	r3, r2
 80043ea:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	3301      	adds	r3, #1
 80043f0:	61bb      	str	r3, [r7, #24]
 80043f2:	e7eb      	b.n	80043cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0xcc>
    l += 7;
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	3307      	adds	r3, #7
 80043f8:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	425a      	negs	r2, r3
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	b2d2      	uxtb	r2, r2
 8004402:	bf58      	it	pl
 8004404:	4253      	negpl	r3, r2
 8004406:	b2da      	uxtb	r2, r3
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	1c59      	adds	r1, r3, #1
 800440c:	6179      	str	r1, [r7, #20]
 800440e:	43d2      	mvns	r2, r2
 8004410:	b2d1      	uxtb	r1, r2
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	4413      	add	r3, r2
 8004416:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 800441a:	3304      	adds	r3, #4
 800441c:	460a      	mov	r2, r1
 800441e:	701a      	strb	r2, [r3, #0]
    if (l <= OUTPUT_SIZE)
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004426:	dc0b      	bgt.n	8004440 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x140>
      hardware_.write(message_out, l);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	1d18      	adds	r0, r3, #4
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8004432:	3304      	adds	r3, #4
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	4619      	mov	r1, r3
 8004438:	f7fe ff42 	bl	80032c0 <_ZN13STM32Hardware5writeEPhi>
      return l;
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	e005      	b.n	800444c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x14c>
      logerror("Message from device dropped: message larger than buffer.");
 8004440:	4904      	ldr	r1, [pc, #16]	; (8004454 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x154>)
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 f84c 	bl	80044e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8logerrorEPKc>
      return -1;
 8004448:	f04f 33ff 	mov.w	r3, #4294967295
  }
 800444c:	4618      	mov	r0, r3
 800444e:	3720      	adds	r7, #32
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	0800ef78 	.word	0x0800ef78

08004458 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	3304      	adds	r3, #4
 8004466:	4618      	mov	r0, r3
 8004468:	f7fe ff74 	bl	8003354 <_ZN13STM32Hardware4timeEv>
 800446c:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	4917      	ldr	r1, [pc, #92]	; (80044d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE6setNowERKNS_4TimeE+0x7c>)
 8004476:	fba1 1303 	umull	r1, r3, r1, r3
 800447a:	099b      	lsrs	r3, r3, #6
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	3b01      	subs	r3, #1
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004486:	6193      	str	r3, [r2, #24]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	6859      	ldr	r1, [r3, #4]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	4b11      	ldr	r3, [pc, #68]	; (80044d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE6setNowERKNS_4TimeE+0x7c>)
 8004490:	fba3 0302 	umull	r0, r3, r3, r2
 8004494:	099b      	lsrs	r3, r3, #6
 8004496:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800449a:	fb00 f303 	mul.w	r3, r0, r3
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	4a0d      	ldr	r2, [pc, #52]	; (80044d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE6setNowERKNS_4TimeE+0x80>)
 80044a2:	fb02 f303 	mul.w	r3, r2, r3
 80044a6:	1aca      	subs	r2, r1, r3
 80044a8:	4b0c      	ldr	r3, [pc, #48]	; (80044dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE6setNowERKNS_4TimeE+0x84>)
 80044aa:	4413      	add	r3, r2
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044b2:	61d3      	str	r3, [r2, #28]
    normalizeSecNSec(sec_offset, nsec_offset);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044ba:	3318      	adds	r3, #24
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044c2:	321c      	adds	r2, #28
 80044c4:	4611      	mov	r1, r2
 80044c6:	4618      	mov	r0, r3
 80044c8:	f002 fef8 	bl	80072bc <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80044cc:	bf00      	nop
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	10624dd3 	.word	0x10624dd3
 80044d8:	000f4240 	.word	0x000f4240
 80044dc:	3b9aca00 	.word	0x3b9aca00

080044e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8logerrorEPKc>:
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80044ea:	683a      	ldr	r2, [r7, #0]
 80044ec:	2103      	movs	r1, #3
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7ff fd9c 	bl	800402c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3logEcPKc>
  }
 80044f4:	bf00      	nop
 80044f6:	3708      	adds	r7, #8
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <_Z41__static_initialization_and_destruction_0ii>:
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af02      	add	r7, sp, #8
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d14e      	bne.n	80045aa <_Z41__static_initialization_and_destruction_0ii+0xae>
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004512:	4293      	cmp	r3, r2
 8004514:	d149      	bne.n	80045aa <_Z41__static_initialization_and_destruction_0ii+0xae>
ros::NodeHandle  nh;
 8004516:	4827      	ldr	r0, [pc, #156]	; (80045b4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8004518:	f7fe ff38 	bl	800338c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev>
Odometer odo(meterPerTick, base_width);
 800451c:	eddf 0a26 	vldr	s1, [pc, #152]	; 80045b8 <_Z41__static_initialization_and_destruction_0ii+0xbc>
 8004520:	ed9f 0a26 	vldr	s0, [pc, #152]	; 80045bc <_Z41__static_initialization_and_destruction_0ii+0xc0>
 8004524:	4826      	ldr	r0, [pc, #152]	; (80045c0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8004526:	f001 f9bb 	bl	80058a0 <_ZN8OdometerC1Eff>
PID leftWheelPID( &leftInput,  &leftOutput,  &leftSetpoint,  Kp, Ki, Kd, DIRECT);
 800452a:	4b26      	ldr	r3, [pc, #152]	; (80045c4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 800452c:	ed93 7b00 	vldr	d7, [r3]
 8004530:	4b25      	ldr	r3, [pc, #148]	; (80045c8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8004532:	ed93 6b00 	vldr	d6, [r3]
 8004536:	4b25      	ldr	r3, [pc, #148]	; (80045cc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8004538:	ed93 5b00 	vldr	d5, [r3]
 800453c:	2300      	movs	r3, #0
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	eeb0 2a45 	vmov.f32	s4, s10
 8004544:	eef0 2a65 	vmov.f32	s5, s11
 8004548:	eeb0 1a46 	vmov.f32	s2, s12
 800454c:	eef0 1a66 	vmov.f32	s3, s13
 8004550:	eeb0 0a47 	vmov.f32	s0, s14
 8004554:	eef0 0a67 	vmov.f32	s1, s15
 8004558:	4b1d      	ldr	r3, [pc, #116]	; (80045d0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 800455a:	4a1e      	ldr	r2, [pc, #120]	; (80045d4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 800455c:	491e      	ldr	r1, [pc, #120]	; (80045d8 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 800455e:	481f      	ldr	r0, [pc, #124]	; (80045dc <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8004560:	f001 fcdc 	bl	8005f1c <_ZN3PIDC1EPdS0_S0_dddi>
PID rightWheelPID(&rightInput, &rightOutput, &rightSetpoint, Kp, Ki, Kd, DIRECT);
 8004564:	4b17      	ldr	r3, [pc, #92]	; (80045c4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8004566:	ed93 7b00 	vldr	d7, [r3]
 800456a:	4b17      	ldr	r3, [pc, #92]	; (80045c8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 800456c:	ed93 6b00 	vldr	d6, [r3]
 8004570:	4b16      	ldr	r3, [pc, #88]	; (80045cc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8004572:	ed93 5b00 	vldr	d5, [r3]
 8004576:	2300      	movs	r3, #0
 8004578:	9300      	str	r3, [sp, #0]
 800457a:	eeb0 2a45 	vmov.f32	s4, s10
 800457e:	eef0 2a65 	vmov.f32	s5, s11
 8004582:	eeb0 1a46 	vmov.f32	s2, s12
 8004586:	eef0 1a66 	vmov.f32	s3, s13
 800458a:	eeb0 0a47 	vmov.f32	s0, s14
 800458e:	eef0 0a67 	vmov.f32	s1, s15
 8004592:	4b13      	ldr	r3, [pc, #76]	; (80045e0 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8004594:	4a13      	ldr	r2, [pc, #76]	; (80045e4 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8004596:	4914      	ldr	r1, [pc, #80]	; (80045e8 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8004598:	4814      	ldr	r0, [pc, #80]	; (80045ec <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 800459a:	f001 fcbf 	bl	8005f1c <_ZN3PIDC1EPdS0_S0_dddi>
ros::Subscriber<geometry_msgs::Twist> sub_cmd_vel("cmd_vel", &cmd_velCallback);
 800459e:	2301      	movs	r3, #1
 80045a0:	4a13      	ldr	r2, [pc, #76]	; (80045f0 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 80045a2:	4914      	ldr	r1, [pc, #80]	; (80045f4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 80045a4:	4814      	ldr	r0, [pc, #80]	; (80045f8 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 80045a6:	f7ff f9f9 	bl	800399c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
}
 80045aa:	bf00      	nop
 80045ac:	3708      	adds	r7, #8
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	2000047c 	.word	0x2000047c
 80045b8:	3ee147ae 	.word	0x3ee147ae
 80045bc:	393f1043 	.word	0x393f1043
 80045c0:	200025e8 	.word	0x200025e8
 80045c4:	20000010 	.word	0x20000010
 80045c8:	20002600 	.word	0x20002600
 80045cc:	20002608 	.word	0x20002608
 80045d0:	200025b8 	.word	0x200025b8
 80045d4:	200025c8 	.word	0x200025c8
 80045d8:	200025c0 	.word	0x200025c0
 80045dc:	20002610 	.word	0x20002610
 80045e0:	200025d0 	.word	0x200025d0
 80045e4:	200025e0 	.word	0x200025e0
 80045e8:	200025d8 	.word	0x200025d8
 80045ec:	20002688 	.word	0x20002688
 80045f0:	080037a9 	.word	0x080037a9
 80045f4:	0800efb4 	.word	0x0800efb4
 80045f8:	20002700 	.word	0x20002700

080045fc <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	330c      	adds	r3, #12
 800460a:	6839      	ldr	r1, [r7, #0]
 800460c:	4618      	mov	r0, r3
 800460e:	f7fd fef4 	bl	80023fa <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	320c      	adds	r2, #12
 800461a:	4610      	mov	r0, r2
 800461c:	4798      	blx	r3
  }
 800461e:	bf00      	nop
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8004626:	b480      	push	{r7}
 8004628:	b083      	sub	sp, #12
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  }
 8004632:	4618      	mov	r0, r3
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr

0800463e <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 800463e:	b580      	push	{r7, lr}
 8004640:	b082      	sub	sp, #8
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	330c      	adds	r3, #12
 800464a:	4618      	mov	r0, r3
 800464c:	f7fd fefa 	bl	8002444 <_ZN13geometry_msgs5Twist7getTypeEv>
 8004650:	4603      	mov	r3, r0
  }
 8004652:	4618      	mov	r0, r3
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 800465a:	b580      	push	{r7, lr}
 800465c:	b082      	sub	sp, #8
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	330c      	adds	r3, #12
 8004666:	4618      	mov	r0, r3
 8004668:	f7fd fefa 	bl	8002460 <_ZN13geometry_msgs5Twist6getMD5Ev>
 800466c:	4603      	mov	r3, r0
  }
 800466e:	4618      	mov	r0, r3
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9connectedEv>:
  virtual bool connected() override
 8004676:	b480      	push	{r7}
 8004678:	b083      	sub	sp, #12
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
    return configured_;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004684:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
  };
 8004688:	4618      	mov	r0, r3
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <_GLOBAL__sub_I_nh>:
 8004694:	b580      	push	{r7, lr}
 8004696:	af00      	add	r7, sp, #0
 8004698:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800469c:	2001      	movs	r0, #1
 800469e:	f7ff ff2d 	bl	80044fc <_Z41__static_initialization_and_destruction_0ii>
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	ed87 0a01 	vstr	s0, [r7, #4]
 80046ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80046b2:	eef0 7ae7 	vabs.f32	s15, s15
 80046b6:	eeb0 0a67 	vmov.f32	s0, s15
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <_ZSt3cosf>:
  { return __builtin_cosf(__x); }
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	ed87 0a01 	vstr	s0, [r7, #4]
 80046ce:	ed97 0a01 	vldr	s0, [r7, #4]
 80046d2:	f008 fb8d 	bl	800cdf0 <cosf>
 80046d6:	eef0 7a40 	vmov.f32	s15, s0
 80046da:	eeb0 0a67 	vmov.f32	s0, s15
 80046de:	3708      	adds	r7, #8
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	ed87 0a01 	vstr	s0, [r7, #4]
 80046ee:	ed97 0a01 	vldr	s0, [r7, #4]
 80046f2:	f008 fbc1 	bl	800ce78 <sinf>
 80046f6:	eef0 7a40 	vmov.f32	s15, s0
 80046fa:	eeb0 0a67 	vmov.f32	s0, s15
 80046fe:	3708      	adds	r7, #8
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <_ZN8std_msgs6HeaderC1Ev>:
      typedef ros::Time _stamp_type;
      _stamp_type stamp;
      typedef const char* _frame_id_type;
      _frame_id_type frame_id;

    Header():
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
      seq(0),
      stamp(),
      frame_id("")
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4618      	mov	r0, r3
 8004710:	f7fd fd7c 	bl	800220c <_ZN3ros3MsgC1Ev>
 8004714:	4a09      	ldr	r2, [pc, #36]	; (800473c <_ZN8std_msgs6HeaderC1Ev+0x38>)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	601a      	str	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	605a      	str	r2, [r3, #4]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	3308      	adds	r3, #8
 8004724:	4618      	mov	r0, r3
 8004726:	f7fd fc28 	bl	8001f7a <_ZN3ros4TimeC1Ev>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a04      	ldr	r2, [pc, #16]	; (8004740 <_ZN8std_msgs6HeaderC1Ev+0x3c>)
 800472e:	611a      	str	r2, [r3, #16]
    {
    }
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4618      	mov	r0, r3
 8004734:	3708      	adds	r7, #8
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	0800f478 	.word	0x0800f478
 8004740:	0800efbc 	.word	0x0800efbc

08004744 <_ZNK8std_msgs6Header9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800474e:	2300      	movs	r3, #0
 8004750:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6859      	ldr	r1, [r3, #4]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	683a      	ldr	r2, [r7, #0]
 800475a:	4413      	add	r3, r2
 800475c:	b2ca      	uxtb	r2, r1
 800475e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	0a19      	lsrs	r1, r3, #8
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	3301      	adds	r3, #1
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	4413      	add	r3, r2
 800476e:	b2ca      	uxtb	r2, r1
 8004770:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	0c19      	lsrs	r1, r3, #16
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	3302      	adds	r3, #2
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	4413      	add	r3, r2
 8004780:	b2ca      	uxtb	r2, r1
 8004782:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	0e19      	lsrs	r1, r3, #24
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	3303      	adds	r3, #3
 800478e:	683a      	ldr	r2, [r7, #0]
 8004790:	4413      	add	r3, r2
 8004792:	b2ca      	uxtb	r2, r1
 8004794:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->seq);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	3304      	adds	r3, #4
 800479a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6899      	ldr	r1, [r3, #8]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	4413      	add	r3, r2
 80047a6:	b2ca      	uxtb	r2, r1
 80047a8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	0a19      	lsrs	r1, r3, #8
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	3301      	adds	r3, #1
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	4413      	add	r3, r2
 80047b8:	b2ca      	uxtb	r2, r1
 80047ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	0c19      	lsrs	r1, r3, #16
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	3302      	adds	r3, #2
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	4413      	add	r3, r2
 80047ca:	b2ca      	uxtb	r2, r1
 80047cc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	0e19      	lsrs	r1, r3, #24
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	3303      	adds	r3, #3
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	4413      	add	r3, r2
 80047dc:	b2ca      	uxtb	r2, r1
 80047de:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	3304      	adds	r3, #4
 80047e4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	68d9      	ldr	r1, [r3, #12]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	683a      	ldr	r2, [r7, #0]
 80047ee:	4413      	add	r3, r2
 80047f0:	b2ca      	uxtb	r2, r1
 80047f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	0a19      	lsrs	r1, r3, #8
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	3301      	adds	r3, #1
 80047fe:	683a      	ldr	r2, [r7, #0]
 8004800:	4413      	add	r3, r2
 8004802:	b2ca      	uxtb	r2, r1
 8004804:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	0c19      	lsrs	r1, r3, #16
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	3302      	adds	r3, #2
 8004810:	683a      	ldr	r2, [r7, #0]
 8004812:	4413      	add	r3, r2
 8004814:	b2ca      	uxtb	r2, r1
 8004816:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	0e19      	lsrs	r1, r3, #24
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	3303      	adds	r3, #3
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	4413      	add	r3, r2
 8004826:	b2ca      	uxtb	r2, r1
 8004828:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	3304      	adds	r3, #4
 800482e:	60fb      	str	r3, [r7, #12]
      uint32_t length_frame_id = strlen(this->frame_id);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	4618      	mov	r0, r3
 8004836:	f7fb fccb 	bl	80001d0 <strlen>
 800483a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_frame_id);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	4413      	add	r3, r2
 8004842:	68b9      	ldr	r1, [r7, #8]
 8004844:	4618      	mov	r0, r3
 8004846:	f7ff f855 	bl	80038f4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	3304      	adds	r3, #4
 800484e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	683a      	ldr	r2, [r7, #0]
 8004854:	18d0      	adds	r0, r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	68ba      	ldr	r2, [r7, #8]
 800485c:	4619      	mov	r1, r3
 800485e:	f00a f891 	bl	800e984 <memcpy>
      offset += length_frame_id;
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	4413      	add	r3, r2
 8004868:	60fb      	str	r3, [r7, #12]
      return offset;
 800486a:	68fb      	ldr	r3, [r7, #12]
    }
 800486c:	4618      	mov	r0, r3
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <_ZN8std_msgs6Header11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800487e:	2300      	movs	r3, #0
 8004880:	613b      	str	r3, [r7, #16]
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	4413      	add	r3, r2
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	461a      	mov	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685a      	ldr	r2, [r3, #4]
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	3301      	adds	r3, #1
 8004898:	6839      	ldr	r1, [r7, #0]
 800489a:	440b      	add	r3, r1
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	021b      	lsls	r3, r3, #8
 80048a0:	431a      	orrs	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	3302      	adds	r3, #2
 80048ae:	6839      	ldr	r1, [r7, #0]
 80048b0:	440b      	add	r3, r1
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	041b      	lsls	r3, r3, #16
 80048b6:	431a      	orrs	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	3303      	adds	r3, #3
 80048c4:	6839      	ldr	r1, [r7, #0]
 80048c6:	440b      	add	r3, r1
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	061b      	lsls	r3, r3, #24
 80048cc:	431a      	orrs	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	3304      	adds	r3, #4
 80048d6:	613b      	str	r3, [r7, #16]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	4413      	add	r3, r2
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	461a      	mov	r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	689a      	ldr	r2, [r3, #8]
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	3301      	adds	r3, #1
 80048ee:	6839      	ldr	r1, [r7, #0]
 80048f0:	440b      	add	r3, r1
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	021b      	lsls	r3, r3, #8
 80048f6:	431a      	orrs	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	3302      	adds	r3, #2
 8004904:	6839      	ldr	r1, [r7, #0]
 8004906:	440b      	add	r3, r1
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	041b      	lsls	r3, r3, #16
 800490c:	431a      	orrs	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	689a      	ldr	r2, [r3, #8]
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	3303      	adds	r3, #3
 800491a:	6839      	ldr	r1, [r7, #0]
 800491c:	440b      	add	r3, r1
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	061b      	lsls	r3, r3, #24
 8004922:	431a      	orrs	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	3304      	adds	r3, #4
 800492c:	613b      	str	r3, [r7, #16]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	4413      	add	r3, r2
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	461a      	mov	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	68da      	ldr	r2, [r3, #12]
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	3301      	adds	r3, #1
 8004944:	6839      	ldr	r1, [r7, #0]
 8004946:	440b      	add	r3, r1
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	021b      	lsls	r3, r3, #8
 800494c:	431a      	orrs	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68da      	ldr	r2, [r3, #12]
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	3302      	adds	r3, #2
 800495a:	6839      	ldr	r1, [r7, #0]
 800495c:	440b      	add	r3, r1
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	041b      	lsls	r3, r3, #16
 8004962:	431a      	orrs	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68da      	ldr	r2, [r3, #12]
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	3303      	adds	r3, #3
 8004970:	6839      	ldr	r1, [r7, #0]
 8004972:	440b      	add	r3, r1
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	061b      	lsls	r3, r3, #24
 8004978:	431a      	orrs	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	3304      	adds	r3, #4
 8004982:	613b      	str	r3, [r7, #16]
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	683a      	ldr	r2, [r7, #0]
 8004988:	441a      	add	r2, r3
 800498a:	f107 030c 	add.w	r3, r7, #12
 800498e:	4611      	mov	r1, r2
 8004990:	4618      	mov	r0, r3
 8004992:	f7fe ffcd 	bl	8003930 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	3304      	adds	r3, #4
 800499a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	617b      	str	r3, [r7, #20]
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	4413      	add	r3, r2
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d20c      	bcs.n	80049c6 <_ZN8std_msgs6Header11deserializeEPh+0x152>
          inbuffer[k-1]=inbuffer[k];
 80049ac:	683a      	ldr	r2, [r7, #0]
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	441a      	add	r2, r3
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	3b01      	subs	r3, #1
 80049b6:	6839      	ldr	r1, [r7, #0]
 80049b8:	440b      	add	r3, r1
 80049ba:	7812      	ldrb	r2, [r2, #0]
 80049bc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	3301      	adds	r3, #1
 80049c2:	617b      	str	r3, [r7, #20]
 80049c4:	e7ec      	b.n	80049a0 <_ZN8std_msgs6Header11deserializeEPh+0x12c>
      }
      inbuffer[offset+length_frame_id-1]=0;
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	4413      	add	r3, r2
 80049cc:	3b01      	subs	r3, #1
 80049ce:	683a      	ldr	r2, [r7, #0]
 80049d0:	4413      	add	r3, r2
 80049d2:	2200      	movs	r2, #0
 80049d4:	701a      	strb	r2, [r3, #0]
      this->frame_id = (char *)(inbuffer + offset-1);
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	3b01      	subs	r3, #1
 80049da:	683a      	ldr	r2, [r7, #0]
 80049dc:	441a      	add	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	611a      	str	r2, [r3, #16]
      offset += length_frame_id;
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	4413      	add	r3, r2
 80049e8:	613b      	str	r3, [r7, #16]
     return offset;
 80049ea:	693b      	ldr	r3, [r7, #16]
    }
 80049ec:	4618      	mov	r0, r3
 80049ee:	3718      	adds	r7, #24
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <_ZN8std_msgs6Header7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Header"; };
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	4b03      	ldr	r3, [pc, #12]	; (8004a0c <_ZN8std_msgs6Header7getTypeEv+0x18>)
 80049fe:	4618      	mov	r0, r3
 8004a00:	370c      	adds	r7, #12
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	0800efc0 	.word	0x0800efc0

08004a10 <_ZN8std_msgs6Header6getMD5Ev>:
    virtual const char * getMD5() override { return "2176decaecbce78abc3b96ef049fabed"; };
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	4b03      	ldr	r3, [pc, #12]	; (8004a28 <_ZN8std_msgs6Header6getMD5Ev+0x18>)
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	0800efd0 	.word	0x0800efd0

08004a2c <_ZN13geometry_msgs5PointC1Ev>:
      typedef float _y_type;
      _y_type y;
      typedef float _z_type;
      _z_type z;

    Point():
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7fd fbe8 	bl	800220c <_ZN3ros3MsgC1Ev>
 8004a3c:	4a09      	ldr	r2, [pc, #36]	; (8004a64 <_ZN13geometry_msgs5PointC1Ev+0x38>)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	601a      	str	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f04f 0200 	mov.w	r2, #0
 8004a48:	605a      	str	r2, [r3, #4]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f04f 0200 	mov.w	r2, #0
 8004a50:	609a      	str	r2, [r3, #8]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f04f 0200 	mov.w	r2, #0
 8004a58:	60da      	str	r2, [r3, #12]
    {
    }
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3708      	adds	r7, #8
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	0800f460 	.word	0x0800f460

08004a68 <_ZNK13geometry_msgs5Point9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004a72:	2300      	movs	r3, #0
 8004a74:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	441a      	add	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a82:	eeb0 0a67 	vmov.f32	s0, s15
 8004a86:	4610      	mov	r0, r2
 8004a88:	f7fd fa88 	bl	8001f9c <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	4413      	add	r3, r2
 8004a92:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	683a      	ldr	r2, [r7, #0]
 8004a98:	441a      	add	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004aa0:	eeb0 0a67 	vmov.f32	s0, s15
 8004aa4:	4610      	mov	r0, r2
 8004aa6:	f7fd fa79 	bl	8001f9c <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	4413      	add	r3, r2
 8004ab0:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	683a      	ldr	r2, [r7, #0]
 8004ab6:	441a      	add	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	edd3 7a03 	vldr	s15, [r3, #12]
 8004abe:	eeb0 0a67 	vmov.f32	s0, s15
 8004ac2:	4610      	mov	r0, r2
 8004ac4:	f7fd fa6a 	bl	8001f9c <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	4413      	add	r3, r2
 8004ace:	60fb      	str	r3, [r7, #12]
      return offset;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
    }
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <_ZN13geometry_msgs5Point11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b084      	sub	sp, #16
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
 8004ae2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	683a      	ldr	r2, [r7, #0]
 8004aec:	441a      	add	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	3304      	adds	r3, #4
 8004af2:	4619      	mov	r1, r3
 8004af4:	4610      	mov	r0, r2
 8004af6:	f7fd faed 	bl	80020d4 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004afa:	4602      	mov	r2, r0
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	4413      	add	r3, r2
 8004b00:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	441a      	add	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	3308      	adds	r3, #8
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	4610      	mov	r0, r2
 8004b10:	f7fd fae0 	bl	80020d4 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004b14:	4602      	mov	r2, r0
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	4413      	add	r3, r2
 8004b1a:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	683a      	ldr	r2, [r7, #0]
 8004b20:	441a      	add	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	330c      	adds	r3, #12
 8004b26:	4619      	mov	r1, r3
 8004b28:	4610      	mov	r0, r2
 8004b2a:	f7fd fad3 	bl	80020d4 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	4413      	add	r3, r2
 8004b34:	60fb      	str	r3, [r7, #12]
     return offset;
 8004b36:	68fb      	ldr	r3, [r7, #12]
    }
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <_ZN13geometry_msgs5Point7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Point"; };
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	4b03      	ldr	r3, [pc, #12]	; (8004b58 <_ZN13geometry_msgs5Point7getTypeEv+0x18>)
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	0800eff4 	.word	0x0800eff4

08004b5c <_ZN13geometry_msgs5Point6getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	4b03      	ldr	r3, [pc, #12]	; (8004b74 <_ZN13geometry_msgs5Point6getMD5Ev+0x18>)
 8004b66:	4618      	mov	r0, r3
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	0800f008 	.word	0x0800f008

08004b78 <_ZN13geometry_msgs10QuaternionC1Ev>:
      typedef float _z_type;
      _z_type z;
      typedef float _w_type;
      _w_type w;

    Quaternion():
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0),
      w(0)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7fd fb42 	bl	800220c <_ZN3ros3MsgC1Ev>
 8004b88:	4a0b      	ldr	r2, [pc, #44]	; (8004bb8 <_ZN13geometry_msgs10QuaternionC1Ev+0x40>)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f04f 0200 	mov.w	r2, #0
 8004b94:	605a      	str	r2, [r3, #4]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f04f 0200 	mov.w	r2, #0
 8004b9c:	609a      	str	r2, [r3, #8]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f04f 0200 	mov.w	r2, #0
 8004ba4:	60da      	str	r2, [r3, #12]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f04f 0200 	mov.w	r2, #0
 8004bac:	611a      	str	r2, [r3, #16]
    {
    }
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3708      	adds	r7, #8
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	0800f448 	.word	0x0800f448

08004bbc <_ZNK13geometry_msgs10Quaternion9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	683a      	ldr	r2, [r7, #0]
 8004bce:	441a      	add	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	edd3 7a01 	vldr	s15, [r3, #4]
 8004bd6:	eeb0 0a67 	vmov.f32	s0, s15
 8004bda:	4610      	mov	r0, r2
 8004bdc:	f7fd f9de 	bl	8001f9c <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004be0:	4602      	mov	r2, r0
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	4413      	add	r3, r2
 8004be6:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	683a      	ldr	r2, [r7, #0]
 8004bec:	441a      	add	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	edd3 7a02 	vldr	s15, [r3, #8]
 8004bf4:	eeb0 0a67 	vmov.f32	s0, s15
 8004bf8:	4610      	mov	r0, r2
 8004bfa:	f7fd f9cf 	bl	8001f9c <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	4413      	add	r3, r2
 8004c04:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	441a      	add	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004c12:	eeb0 0a67 	vmov.f32	s0, s15
 8004c16:	4610      	mov	r0, r2
 8004c18:	f7fd f9c0 	bl	8001f9c <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	4413      	add	r3, r2
 8004c22:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->w);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	683a      	ldr	r2, [r7, #0]
 8004c28:	441a      	add	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	edd3 7a04 	vldr	s15, [r3, #16]
 8004c30:	eeb0 0a67 	vmov.f32	s0, s15
 8004c34:	4610      	mov	r0, r2
 8004c36:	f7fd f9b1 	bl	8001f9c <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	4413      	add	r3, r2
 8004c40:	60fb      	str	r3, [r7, #12]
      return offset;
 8004c42:	68fb      	ldr	r3, [r7, #12]
    }
 8004c44:	4618      	mov	r0, r3
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <_ZN13geometry_msgs10Quaternion11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004c56:	2300      	movs	r3, #0
 8004c58:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	683a      	ldr	r2, [r7, #0]
 8004c5e:	441a      	add	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	3304      	adds	r3, #4
 8004c64:	4619      	mov	r1, r3
 8004c66:	4610      	mov	r0, r2
 8004c68:	f7fd fa34 	bl	80020d4 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	4413      	add	r3, r2
 8004c72:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	441a      	add	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	3308      	adds	r3, #8
 8004c7e:	4619      	mov	r1, r3
 8004c80:	4610      	mov	r0, r2
 8004c82:	f7fd fa27 	bl	80020d4 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004c86:	4602      	mov	r2, r0
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	683a      	ldr	r2, [r7, #0]
 8004c92:	441a      	add	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	330c      	adds	r3, #12
 8004c98:	4619      	mov	r1, r3
 8004c9a:	4610      	mov	r0, r2
 8004c9c:	f7fd fa1a 	bl	80020d4 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->w));
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	683a      	ldr	r2, [r7, #0]
 8004cac:	441a      	add	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	3310      	adds	r3, #16
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	4610      	mov	r0, r2
 8004cb6:	f7fd fa0d 	bl	80020d4 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]
     return offset;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
    }
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <_ZN13geometry_msgs10Quaternion7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Quaternion"; };
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	4b03      	ldr	r3, [pc, #12]	; (8004ce4 <_ZN13geometry_msgs10Quaternion7getTypeEv+0x18>)
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	0800f02c 	.word	0x0800f02c

08004ce8 <_ZN13geometry_msgs10Quaternion6getMD5Ev>:
    virtual const char * getMD5() override { return "a779879fadf0160734f906b8c19c7004"; };
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	4b03      	ldr	r3, [pc, #12]	; (8004d00 <_ZN13geometry_msgs10Quaternion6getMD5Ev+0x18>)
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	370c      	adds	r7, #12
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	0800f048 	.word	0x0800f048

08004d04 <_ZN13geometry_msgs4PoseC1Ev>:
      typedef geometry_msgs::Point _position_type;
      _position_type position;
      typedef geometry_msgs::Quaternion _orientation_type;
      _orientation_type orientation;

    Pose():
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
      position(),
      orientation()
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7fd fa7c 	bl	800220c <_ZN3ros3MsgC1Ev>
 8004d14:	4a08      	ldr	r2, [pc, #32]	; (8004d38 <_ZN13geometry_msgs4PoseC1Ev+0x34>)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	601a      	str	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	3304      	adds	r3, #4
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7ff fe84 	bl	8004a2c <_ZN13geometry_msgs5PointC1Ev>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	3314      	adds	r3, #20
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7ff ff25 	bl	8004b78 <_ZN13geometry_msgs10QuaternionC1Ev>
    {
    }
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4618      	mov	r0, r3
 8004d32:	3708      	adds	r7, #8
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	0800f430 	.word	0x0800f430

08004d3c <_ZNK13geometry_msgs4Pose9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004d46:	2300      	movs	r3, #0
 8004d48:	60fb      	str	r3, [r7, #12]
      offset += this->position.serialize(outbuffer + offset);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	1d18      	adds	r0, r3, #4
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	683a      	ldr	r2, [r7, #0]
 8004d52:	4413      	add	r3, r2
 8004d54:	4619      	mov	r1, r3
 8004d56:	f7ff fe87 	bl	8004a68 <_ZNK13geometry_msgs5Point9serializeEPh>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	4413      	add	r3, r2
 8004d60:	60fb      	str	r3, [r7, #12]
      offset += this->orientation.serialize(outbuffer + offset);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f103 0014 	add.w	r0, r3, #20
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	683a      	ldr	r2, [r7, #0]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	4619      	mov	r1, r3
 8004d70:	f7ff ff24 	bl	8004bbc <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 8004d74:	4602      	mov	r2, r0
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	4413      	add	r3, r2
 8004d7a:	60fb      	str	r3, [r7, #12]
      return offset;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
    }
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <_ZN13geometry_msgs4Pose11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b084      	sub	sp, #16
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
 8004d8e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004d90:	2300      	movs	r3, #0
 8004d92:	60fb      	str	r3, [r7, #12]
      offset += this->position.deserialize(inbuffer + offset);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	1d18      	adds	r0, r3, #4
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	683a      	ldr	r2, [r7, #0]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	4619      	mov	r1, r3
 8004da0:	f7ff fe9b 	bl	8004ada <_ZN13geometry_msgs5Point11deserializeEPh>
 8004da4:	4602      	mov	r2, r0
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	4413      	add	r3, r2
 8004daa:	60fb      	str	r3, [r7, #12]
      offset += this->orientation.deserialize(inbuffer + offset);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f103 0014 	add.w	r0, r3, #20
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	683a      	ldr	r2, [r7, #0]
 8004db6:	4413      	add	r3, r2
 8004db8:	4619      	mov	r1, r3
 8004dba:	f7ff ff47 	bl	8004c4c <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	60fb      	str	r3, [r7, #12]
     return offset;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
    }
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3710      	adds	r7, #16
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <_ZN13geometry_msgs4Pose7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Pose"; };
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	4b03      	ldr	r3, [pc, #12]	; (8004de8 <_ZN13geometry_msgs4Pose7getTypeEv+0x18>)
 8004dda:	4618      	mov	r0, r3
 8004ddc:	370c      	adds	r7, #12
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	0800f06c 	.word	0x0800f06c

08004dec <_ZN13geometry_msgs4Pose6getMD5Ev>:
    virtual const char * getMD5() override { return "e45d45a5a1ce597b249e23fb30fc871f"; };
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	4b03      	ldr	r3, [pc, #12]	; (8004e04 <_ZN13geometry_msgs4Pose6getMD5Ev+0x18>)
 8004df6:	4618      	mov	r0, r3
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	0800f080 	.word	0x0800f080

08004e08 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev>:
    public:
      typedef geometry_msgs::Pose _pose_type;
      _pose_type pose;
      float covariance[36];

    PoseWithCovariance():
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
      pose(),
      covariance()
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7fd f9fa 	bl	800220c <_ZN3ros3MsgC1Ev>
 8004e18:	4a0c      	ldr	r2, [pc, #48]	; (8004e4c <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x44>)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	601a      	str	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	3304      	adds	r3, #4
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7ff ff6e 	bl	8004d04 <_ZN13geometry_msgs4PoseC1Ev>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8004e2e:	2323      	movs	r3, #35	; 0x23
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	db05      	blt.n	8004e40 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x38>
 8004e34:	f04f 0100 	mov.w	r1, #0
 8004e38:	6011      	str	r1, [r2, #0]
 8004e3a:	3204      	adds	r2, #4
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	e7f7      	b.n	8004e30 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x28>
    {
    }
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4618      	mov	r0, r3
 8004e44:	3708      	adds	r7, #8
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	0800f418 	.word	0x0800f418

08004e50 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	60fb      	str	r3, [r7, #12]
      offset += this->pose.serialize(outbuffer + offset);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	1d18      	adds	r0, r3, #4
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	683a      	ldr	r2, [r7, #0]
 8004e66:	4413      	add	r3, r2
 8004e68:	4619      	mov	r1, r3
 8004e6a:	f7ff ff67 	bl	8004d3c <_ZNK13geometry_msgs4Pose9serializeEPh>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	4413      	add	r3, r2
 8004e74:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 8004e76:	2300      	movs	r3, #0
 8004e78:	60bb      	str	r3, [r7, #8]
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	2b23      	cmp	r3, #35	; 0x23
 8004e7e:	d817      	bhi.n	8004eb0 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh+0x60>
      offset += serializeAvrFloat64(outbuffer + offset, this->covariance[i]);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	683a      	ldr	r2, [r7, #0]
 8004e84:	18d1      	adds	r1, r2, r3
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	330a      	adds	r3, #10
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	4413      	add	r3, r2
 8004e90:	3304      	adds	r3, #4
 8004e92:	edd3 7a00 	vldr	s15, [r3]
 8004e96:	eeb0 0a67 	vmov.f32	s0, s15
 8004e9a:	4608      	mov	r0, r1
 8004e9c:	f7fd f87e 	bl	8001f9c <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	3301      	adds	r3, #1
 8004eac:	60bb      	str	r3, [r7, #8]
 8004eae:	e7e4      	b.n	8004e7a <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh+0x2a>
      }
      return offset;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
    }
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b084      	sub	sp, #16
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
 8004ec2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	60fb      	str	r3, [r7, #12]
      offset += this->pose.deserialize(inbuffer + offset);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	1d18      	adds	r0, r3, #4
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	683a      	ldr	r2, [r7, #0]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	f7ff ff57 	bl	8004d86 <_ZN13geometry_msgs4Pose11deserializeEPh>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	4413      	add	r3, r2
 8004ede:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	60bb      	str	r3, [r7, #8]
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	2b23      	cmp	r3, #35	; 0x23
 8004ee8:	d813      	bhi.n	8004f12 <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh+0x58>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->covariance[i]));
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	683a      	ldr	r2, [r7, #0]
 8004eee:	18d0      	adds	r0, r2, r3
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	330a      	adds	r3, #10
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	4413      	add	r3, r2
 8004efa:	3304      	adds	r3, #4
 8004efc:	4619      	mov	r1, r3
 8004efe:	f7fd f8e9 	bl	80020d4 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004f02:	4602      	mov	r2, r0
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	4413      	add	r3, r2
 8004f08:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	60bb      	str	r3, [r7, #8]
 8004f10:	e7e8      	b.n	8004ee4 <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh+0x2a>
      }
     return offset;
 8004f12:	68fb      	ldr	r3, [r7, #12]
    }
 8004f14:	4618      	mov	r0, r3
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <_ZN13geometry_msgs18PoseWithCovariance7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/PoseWithCovariance"; };
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	4b03      	ldr	r3, [pc, #12]	; (8004f34 <_ZN13geometry_msgs18PoseWithCovariance7getTypeEv+0x18>)
 8004f26:	4618      	mov	r0, r3
 8004f28:	370c      	adds	r7, #12
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	0800f0a4 	.word	0x0800f0a4

08004f38 <_ZN13geometry_msgs18PoseWithCovariance6getMD5Ev>:
    virtual const char * getMD5() override { return "c23e848cf1b7533a8d7c259073a97e6f"; };
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	4b03      	ldr	r3, [pc, #12]	; (8004f50 <_ZN13geometry_msgs18PoseWithCovariance6getMD5Ev+0x18>)
 8004f42:	4618      	mov	r0, r3
 8004f44:	370c      	adds	r7, #12
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	0800f0c8 	.word	0x0800f0c8

08004f54 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev>:
    public:
      typedef geometry_msgs::Twist _twist_type;
      _twist_type twist;
      float covariance[36];

    TwistWithCovariance():
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
      twist(),
      covariance()
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7fd f954 	bl	800220c <_ZN3ros3MsgC1Ev>
 8004f64:	4a0c      	ldr	r2, [pc, #48]	; (8004f98 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x44>)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	601a      	str	r2, [r3, #0]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	3304      	adds	r3, #4
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7fd fa02 	bl	8002378 <_ZN13geometry_msgs5TwistC1Ev>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8004f7a:	2323      	movs	r3, #35	; 0x23
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	db05      	blt.n	8004f8c <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x38>
 8004f80:	f04f 0100 	mov.w	r1, #0
 8004f84:	6011      	str	r1, [r2, #0]
 8004f86:	3204      	adds	r2, #4
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	e7f7      	b.n	8004f7c <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x28>
    {
    }
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3708      	adds	r7, #8
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	0800f400 	.word	0x0800f400

08004f9c <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	60fb      	str	r3, [r7, #12]
      offset += this->twist.serialize(outbuffer + offset);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	1d18      	adds	r0, r3, #4
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	f7fd f9fb 	bl	80023b0 <_ZNK13geometry_msgs5Twist9serializeEPh>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	60bb      	str	r3, [r7, #8]
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	2b23      	cmp	r3, #35	; 0x23
 8004fca:	d816      	bhi.n	8004ffa <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh+0x5e>
      offset += serializeAvrFloat64(outbuffer + offset, this->covariance[i]);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	683a      	ldr	r2, [r7, #0]
 8004fd0:	18d1      	adds	r1, r2, r3
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	330a      	adds	r3, #10
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	4413      	add	r3, r2
 8004fdc:	edd3 7a00 	vldr	s15, [r3]
 8004fe0:	eeb0 0a67 	vmov.f32	s0, s15
 8004fe4:	4608      	mov	r0, r1
 8004fe6:	f7fc ffd9 	bl	8001f9c <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004fea:	4602      	mov	r2, r0
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	4413      	add	r3, r2
 8004ff0:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	60bb      	str	r3, [r7, #8]
 8004ff8:	e7e5      	b.n	8004fc6 <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh+0x2a>
      }
      return offset;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
    }
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800500e:	2300      	movs	r3, #0
 8005010:	60fb      	str	r3, [r7, #12]
      offset += this->twist.deserialize(inbuffer + offset);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	1d18      	adds	r0, r3, #4
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	683a      	ldr	r2, [r7, #0]
 800501a:	4413      	add	r3, r2
 800501c:	4619      	mov	r1, r3
 800501e:	f7fd f9ec 	bl	80023fa <_ZN13geometry_msgs5Twist11deserializeEPh>
 8005022:	4602      	mov	r2, r0
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	4413      	add	r3, r2
 8005028:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 800502a:	2300      	movs	r3, #0
 800502c:	60bb      	str	r3, [r7, #8]
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	2b23      	cmp	r3, #35	; 0x23
 8005032:	d812      	bhi.n	800505a <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh+0x56>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->covariance[i]));
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	683a      	ldr	r2, [r7, #0]
 8005038:	18d0      	adds	r0, r2, r3
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	330a      	adds	r3, #10
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	4413      	add	r3, r2
 8005044:	4619      	mov	r1, r3
 8005046:	f7fd f845 	bl	80020d4 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800504a:	4602      	mov	r2, r0
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	4413      	add	r3, r2
 8005050:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	3301      	adds	r3, #1
 8005056:	60bb      	str	r3, [r7, #8]
 8005058:	e7e9      	b.n	800502e <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh+0x2a>
      }
     return offset;
 800505a:	68fb      	ldr	r3, [r7, #12]
    }
 800505c:	4618      	mov	r0, r3
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <_ZN13geometry_msgs19TwistWithCovariance7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/TwistWithCovariance"; };
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	4b03      	ldr	r3, [pc, #12]	; (800507c <_ZN13geometry_msgs19TwistWithCovariance7getTypeEv+0x18>)
 800506e:	4618      	mov	r0, r3
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	0800f13c 	.word	0x0800f13c

08005080 <_ZN13geometry_msgs19TwistWithCovariance6getMD5Ev>:
    virtual const char * getMD5() override { return "1fe8a28e6890a4cc3ae4c3ca5c7d82e6"; };
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	4b03      	ldr	r3, [pc, #12]	; (8005098 <_ZN13geometry_msgs19TwistWithCovariance6getMD5Ev+0x18>)
 800508a:	4618      	mov	r0, r3
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	0800f160 	.word	0x0800f160

0800509c <_ZN8nav_msgs8OdometryC1Ev>:
      typedef geometry_msgs::PoseWithCovariance _pose_type;
      _pose_type pose;
      typedef geometry_msgs::TwistWithCovariance _twist_type;
      _twist_type twist;

    Odometry():
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
      header(),
      child_frame_id(""),
      pose(),
      twist()
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7fd f8b0 	bl	800220c <_ZN3ros3MsgC1Ev>
 80050ac:	4a0c      	ldr	r2, [pc, #48]	; (80050e0 <_ZN8nav_msgs8OdometryC1Ev+0x44>)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	601a      	str	r2, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	3304      	adds	r3, #4
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7ff fb24 	bl	8004704 <_ZN8std_msgs6HeaderC1Ev>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a09      	ldr	r2, [pc, #36]	; (80050e4 <_ZN8nav_msgs8OdometryC1Ev+0x48>)
 80050c0:	619a      	str	r2, [r3, #24]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	331c      	adds	r3, #28
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7ff fe9e 	bl	8004e08 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	33d8      	adds	r3, #216	; 0xd8
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7ff ff3f 	bl	8004f54 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev>
    {
    }
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4618      	mov	r0, r3
 80050da:	3708      	adds	r7, #8
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	0800f3e8 	.word	0x0800f3e8
 80050e4:	0800efbc 	.word	0x0800efbc

080050e8 <_ZNK8nav_msgs8Odometry9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80050f2:	2300      	movs	r3, #0
 80050f4:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	1d18      	adds	r0, r3, #4
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	683a      	ldr	r2, [r7, #0]
 80050fe:	4413      	add	r3, r2
 8005100:	4619      	mov	r1, r3
 8005102:	f7ff fb1f 	bl	8004744 <_ZNK8std_msgs6Header9serializeEPh>
 8005106:	4602      	mov	r2, r0
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	4413      	add	r3, r2
 800510c:	60fb      	str	r3, [r7, #12]
      uint32_t length_child_frame_id = strlen(this->child_frame_id);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	4618      	mov	r0, r3
 8005114:	f7fb f85c 	bl	80001d0 <strlen>
 8005118:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_child_frame_id);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	683a      	ldr	r2, [r7, #0]
 800511e:	4413      	add	r3, r2
 8005120:	68b9      	ldr	r1, [r7, #8]
 8005122:	4618      	mov	r0, r3
 8005124:	f7fe fbe6 	bl	80038f4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	3304      	adds	r3, #4
 800512c:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->child_frame_id, length_child_frame_id);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	683a      	ldr	r2, [r7, #0]
 8005132:	18d0      	adds	r0, r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	4619      	mov	r1, r3
 800513c:	f009 fc22 	bl	800e984 <memcpy>
      offset += length_child_frame_id;
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	4413      	add	r3, r2
 8005146:	60fb      	str	r3, [r7, #12]
      offset += this->pose.serialize(outbuffer + offset);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f103 001c 	add.w	r0, r3, #28
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	4413      	add	r3, r2
 8005154:	4619      	mov	r1, r3
 8005156:	f7ff fe7b 	bl	8004e50 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh>
 800515a:	4602      	mov	r2, r0
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	4413      	add	r3, r2
 8005160:	60fb      	str	r3, [r7, #12]
      offset += this->twist.serialize(outbuffer + offset);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	683a      	ldr	r2, [r7, #0]
 800516c:	4413      	add	r3, r2
 800516e:	4619      	mov	r1, r3
 8005170:	f7ff ff14 	bl	8004f9c <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh>
 8005174:	4602      	mov	r2, r0
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	4413      	add	r3, r2
 800517a:	60fb      	str	r3, [r7, #12]
      return offset;
 800517c:	68fb      	ldr	r3, [r7, #12]
    }
 800517e:	4618      	mov	r0, r3
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <_ZN8nav_msgs8Odometry11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8005186:	b580      	push	{r7, lr}
 8005188:	b086      	sub	sp, #24
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
 800518e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005190:	2300      	movs	r3, #0
 8005192:	613b      	str	r3, [r7, #16]
      offset += this->header.deserialize(inbuffer + offset);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	1d18      	adds	r0, r3, #4
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	683a      	ldr	r2, [r7, #0]
 800519c:	4413      	add	r3, r2
 800519e:	4619      	mov	r1, r3
 80051a0:	f7ff fb68 	bl	8004874 <_ZN8std_msgs6Header11deserializeEPh>
 80051a4:	4602      	mov	r2, r0
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	4413      	add	r3, r2
 80051aa:	613b      	str	r3, [r7, #16]
      uint32_t length_child_frame_id;
      arrToVar(length_child_frame_id, (inbuffer + offset));
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	683a      	ldr	r2, [r7, #0]
 80051b0:	441a      	add	r2, r3
 80051b2:	f107 030c 	add.w	r3, r7, #12
 80051b6:	4611      	mov	r1, r2
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7fe fbb9 	bl	8003930 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	3304      	adds	r3, #4
 80051c2:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	617b      	str	r3, [r7, #20]
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	4413      	add	r3, r2
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d20c      	bcs.n	80051ee <_ZN8nav_msgs8Odometry11deserializeEPh+0x68>
          inbuffer[k-1]=inbuffer[k];
 80051d4:	683a      	ldr	r2, [r7, #0]
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	441a      	add	r2, r3
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	3b01      	subs	r3, #1
 80051de:	6839      	ldr	r1, [r7, #0]
 80051e0:	440b      	add	r3, r1
 80051e2:	7812      	ldrb	r2, [r2, #0]
 80051e4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	3301      	adds	r3, #1
 80051ea:	617b      	str	r3, [r7, #20]
 80051ec:	e7ec      	b.n	80051c8 <_ZN8nav_msgs8Odometry11deserializeEPh+0x42>
      }
      inbuffer[offset+length_child_frame_id-1]=0;
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	4413      	add	r3, r2
 80051f4:	3b01      	subs	r3, #1
 80051f6:	683a      	ldr	r2, [r7, #0]
 80051f8:	4413      	add	r3, r2
 80051fa:	2200      	movs	r2, #0
 80051fc:	701a      	strb	r2, [r3, #0]
      this->child_frame_id = (char *)(inbuffer + offset-1);
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	3b01      	subs	r3, #1
 8005202:	683a      	ldr	r2, [r7, #0]
 8005204:	441a      	add	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	619a      	str	r2, [r3, #24]
      offset += length_child_frame_id;
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4413      	add	r3, r2
 8005210:	613b      	str	r3, [r7, #16]
      offset += this->pose.deserialize(inbuffer + offset);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f103 001c 	add.w	r0, r3, #28
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	683a      	ldr	r2, [r7, #0]
 800521c:	4413      	add	r3, r2
 800521e:	4619      	mov	r1, r3
 8005220:	f7ff fe4b 	bl	8004eba <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh>
 8005224:	4602      	mov	r2, r0
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	4413      	add	r3, r2
 800522a:	613b      	str	r3, [r7, #16]
      offset += this->twist.deserialize(inbuffer + offset);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	683a      	ldr	r2, [r7, #0]
 8005236:	4413      	add	r3, r2
 8005238:	4619      	mov	r1, r3
 800523a:	f7ff fee3 	bl	8005004 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh>
 800523e:	4602      	mov	r2, r0
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	4413      	add	r3, r2
 8005244:	613b      	str	r3, [r7, #16]
     return offset;
 8005246:	693b      	ldr	r3, [r7, #16]
    }
 8005248:	4618      	mov	r0, r3
 800524a:	3718      	adds	r7, #24
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <_ZN8nav_msgs8Odometry7getTypeEv>:

    virtual const char * getType() override { return "nav_msgs/Odometry"; };
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	4b03      	ldr	r3, [pc, #12]	; (8005268 <_ZN8nav_msgs8Odometry7getTypeEv+0x18>)
 800525a:	4618      	mov	r0, r3
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	0800f184 	.word	0x0800f184

0800526c <_ZN8nav_msgs8Odometry6getMD5Ev>:
    virtual const char * getMD5() override { return "cd5e73d190d741a2f92e81eda573aca7"; };
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	4b03      	ldr	r3, [pc, #12]	; (8005284 <_ZN8nav_msgs8Odometry6getMD5Ev+0x18>)
 8005276:	4618      	mov	r0, r3
 8005278:	370c      	adds	r7, #12
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	0800f198 	.word	0x0800f198

08005288 <_ZN13geometry_msgs9TransformC1Ev>:
      typedef geometry_msgs::Vector3 _translation_type;
      _translation_type translation;
      typedef geometry_msgs::Quaternion _rotation_type;
      _rotation_type rotation;

    Transform():
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
      translation(),
      rotation()
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4618      	mov	r0, r3
 8005294:	f7fc ffba 	bl	800220c <_ZN3ros3MsgC1Ev>
 8005298:	4a08      	ldr	r2, [pc, #32]	; (80052bc <_ZN13geometry_msgs9TransformC1Ev+0x34>)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	601a      	str	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	3304      	adds	r3, #4
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7fc ffc2 	bl	800222c <_ZN13geometry_msgs7Vector3C1Ev>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	3314      	adds	r3, #20
 80052ac:	4618      	mov	r0, r3
 80052ae:	f7ff fc63 	bl	8004b78 <_ZN13geometry_msgs10QuaternionC1Ev>
    {
    }
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4618      	mov	r0, r3
 80052b6:	3708      	adds	r7, #8
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	0800f3d0 	.word	0x0800f3d0

080052c0 <_ZNK13geometry_msgs9Transform9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80052ca:	2300      	movs	r3, #0
 80052cc:	60fb      	str	r3, [r7, #12]
      offset += this->translation.serialize(outbuffer + offset);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	1d18      	adds	r0, r3, #4
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	683a      	ldr	r2, [r7, #0]
 80052d6:	4413      	add	r3, r2
 80052d8:	4619      	mov	r1, r3
 80052da:	f7fc ffc5 	bl	8002268 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80052de:	4602      	mov	r2, r0
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	4413      	add	r3, r2
 80052e4:	60fb      	str	r3, [r7, #12]
      offset += this->rotation.serialize(outbuffer + offset);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f103 0014 	add.w	r0, r3, #20
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	4413      	add	r3, r2
 80052f2:	4619      	mov	r1, r3
 80052f4:	f7ff fc62 	bl	8004bbc <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 80052f8:	4602      	mov	r2, r0
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	4413      	add	r3, r2
 80052fe:	60fb      	str	r3, [r7, #12]
      return offset;
 8005300:	68fb      	ldr	r3, [r7, #12]
    }
 8005302:	4618      	mov	r0, r3
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <_ZN13geometry_msgs9Transform11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800530a:	b580      	push	{r7, lr}
 800530c:	b084      	sub	sp, #16
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
 8005312:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005314:	2300      	movs	r3, #0
 8005316:	60fb      	str	r3, [r7, #12]
      offset += this->translation.deserialize(inbuffer + offset);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	1d18      	adds	r0, r3, #4
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	683a      	ldr	r2, [r7, #0]
 8005320:	4413      	add	r3, r2
 8005322:	4619      	mov	r1, r3
 8005324:	f7fc ffd9 	bl	80022da <_ZN13geometry_msgs7Vector311deserializeEPh>
 8005328:	4602      	mov	r2, r0
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	4413      	add	r3, r2
 800532e:	60fb      	str	r3, [r7, #12]
      offset += this->rotation.deserialize(inbuffer + offset);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f103 0014 	add.w	r0, r3, #20
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	683a      	ldr	r2, [r7, #0]
 800533a:	4413      	add	r3, r2
 800533c:	4619      	mov	r1, r3
 800533e:	f7ff fc85 	bl	8004c4c <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 8005342:	4602      	mov	r2, r0
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	4413      	add	r3, r2
 8005348:	60fb      	str	r3, [r7, #12]
     return offset;
 800534a:	68fb      	ldr	r3, [r7, #12]
    }
 800534c:	4618      	mov	r0, r3
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <_ZN13geometry_msgs9Transform7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Transform"; };
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	4b03      	ldr	r3, [pc, #12]	; (800536c <_ZN13geometry_msgs9Transform7getTypeEv+0x18>)
 800535e:	4618      	mov	r0, r3
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	0800f1bc 	.word	0x0800f1bc

08005370 <_ZN13geometry_msgs9Transform6getMD5Ev>:
    virtual const char * getMD5() override { return "ac9eff44abf714214112b05d54a3cf9b"; };
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	4b03      	ldr	r3, [pc, #12]	; (8005388 <_ZN13geometry_msgs9Transform6getMD5Ev+0x18>)
 800537a:	4618      	mov	r0, r3
 800537c:	370c      	adds	r7, #12
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	0800f1d4 	.word	0x0800f1d4

0800538c <_ZN13geometry_msgs16TransformStampedC1Ev>:
      typedef const char* _child_frame_id_type;
      _child_frame_id_type child_frame_id;
      typedef geometry_msgs::Transform _transform_type;
      _transform_type transform;

    TransformStamped():
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
      header(),
      child_frame_id(""),
      transform()
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4618      	mov	r0, r3
 8005398:	f7fc ff38 	bl	800220c <_ZN3ros3MsgC1Ev>
 800539c:	4a0a      	ldr	r2, [pc, #40]	; (80053c8 <_ZN13geometry_msgs16TransformStampedC1Ev+0x3c>)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	601a      	str	r2, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	3304      	adds	r3, #4
 80053a6:	4618      	mov	r0, r3
 80053a8:	f7ff f9ac 	bl	8004704 <_ZN8std_msgs6HeaderC1Ev>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a07      	ldr	r2, [pc, #28]	; (80053cc <_ZN13geometry_msgs16TransformStampedC1Ev+0x40>)
 80053b0:	619a      	str	r2, [r3, #24]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	331c      	adds	r3, #28
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7ff ff66 	bl	8005288 <_ZN13geometry_msgs9TransformC1Ev>
    {
    }
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4618      	mov	r0, r3
 80053c0:	3708      	adds	r7, #8
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	0800f3b8 	.word	0x0800f3b8
 80053cc:	0800efbc 	.word	0x0800efbc

080053d0 <_ZNK13geometry_msgs16TransformStamped9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80053da:	2300      	movs	r3, #0
 80053dc:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	1d18      	adds	r0, r3, #4
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	683a      	ldr	r2, [r7, #0]
 80053e6:	4413      	add	r3, r2
 80053e8:	4619      	mov	r1, r3
 80053ea:	f7ff f9ab 	bl	8004744 <_ZNK8std_msgs6Header9serializeEPh>
 80053ee:	4602      	mov	r2, r0
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	4413      	add	r3, r2
 80053f4:	60fb      	str	r3, [r7, #12]
      uint32_t length_child_frame_id = strlen(this->child_frame_id);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7fa fee8 	bl	80001d0 <strlen>
 8005400:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_child_frame_id);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	683a      	ldr	r2, [r7, #0]
 8005406:	4413      	add	r3, r2
 8005408:	68b9      	ldr	r1, [r7, #8]
 800540a:	4618      	mov	r0, r3
 800540c:	f7fe fa72 	bl	80038f4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	3304      	adds	r3, #4
 8005414:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->child_frame_id, length_child_frame_id);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	683a      	ldr	r2, [r7, #0]
 800541a:	18d0      	adds	r0, r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	4619      	mov	r1, r3
 8005424:	f009 faae 	bl	800e984 <memcpy>
      offset += length_child_frame_id;
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	4413      	add	r3, r2
 800542e:	60fb      	str	r3, [r7, #12]
      offset += this->transform.serialize(outbuffer + offset);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f103 001c 	add.w	r0, r3, #28
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	683a      	ldr	r2, [r7, #0]
 800543a:	4413      	add	r3, r2
 800543c:	4619      	mov	r1, r3
 800543e:	f7ff ff3f 	bl	80052c0 <_ZNK13geometry_msgs9Transform9serializeEPh>
 8005442:	4602      	mov	r2, r0
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	4413      	add	r3, r2
 8005448:	60fb      	str	r3, [r7, #12]
      return offset;
 800544a:	68fb      	ldr	r3, [r7, #12]
    }
 800544c:	4618      	mov	r0, r3
 800544e:	3710      	adds	r7, #16
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <_ZN13geometry_msgs16TransformStamped11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8005454:	b580      	push	{r7, lr}
 8005456:	b086      	sub	sp, #24
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800545e:	2300      	movs	r3, #0
 8005460:	613b      	str	r3, [r7, #16]
      offset += this->header.deserialize(inbuffer + offset);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	1d18      	adds	r0, r3, #4
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	683a      	ldr	r2, [r7, #0]
 800546a:	4413      	add	r3, r2
 800546c:	4619      	mov	r1, r3
 800546e:	f7ff fa01 	bl	8004874 <_ZN8std_msgs6Header11deserializeEPh>
 8005472:	4602      	mov	r2, r0
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	4413      	add	r3, r2
 8005478:	613b      	str	r3, [r7, #16]
      uint32_t length_child_frame_id;
      arrToVar(length_child_frame_id, (inbuffer + offset));
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	683a      	ldr	r2, [r7, #0]
 800547e:	441a      	add	r2, r3
 8005480:	f107 030c 	add.w	r3, r7, #12
 8005484:	4611      	mov	r1, r2
 8005486:	4618      	mov	r0, r3
 8005488:	f7fe fa52 	bl	8003930 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	3304      	adds	r3, #4
 8005490:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	617b      	str	r3, [r7, #20]
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	4413      	add	r3, r2
 800549c:	697a      	ldr	r2, [r7, #20]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d20c      	bcs.n	80054bc <_ZN13geometry_msgs16TransformStamped11deserializeEPh+0x68>
          inbuffer[k-1]=inbuffer[k];
 80054a2:	683a      	ldr	r2, [r7, #0]
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	441a      	add	r2, r3
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	3b01      	subs	r3, #1
 80054ac:	6839      	ldr	r1, [r7, #0]
 80054ae:	440b      	add	r3, r1
 80054b0:	7812      	ldrb	r2, [r2, #0]
 80054b2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	3301      	adds	r3, #1
 80054b8:	617b      	str	r3, [r7, #20]
 80054ba:	e7ec      	b.n	8005496 <_ZN13geometry_msgs16TransformStamped11deserializeEPh+0x42>
      }
      inbuffer[offset+length_child_frame_id-1]=0;
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	4413      	add	r3, r2
 80054c2:	3b01      	subs	r3, #1
 80054c4:	683a      	ldr	r2, [r7, #0]
 80054c6:	4413      	add	r3, r2
 80054c8:	2200      	movs	r2, #0
 80054ca:	701a      	strb	r2, [r3, #0]
      this->child_frame_id = (char *)(inbuffer + offset-1);
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	3b01      	subs	r3, #1
 80054d0:	683a      	ldr	r2, [r7, #0]
 80054d2:	441a      	add	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	619a      	str	r2, [r3, #24]
      offset += length_child_frame_id;
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	4413      	add	r3, r2
 80054de:	613b      	str	r3, [r7, #16]
      offset += this->transform.deserialize(inbuffer + offset);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f103 001c 	add.w	r0, r3, #28
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	683a      	ldr	r2, [r7, #0]
 80054ea:	4413      	add	r3, r2
 80054ec:	4619      	mov	r1, r3
 80054ee:	f7ff ff0c 	bl	800530a <_ZN13geometry_msgs9Transform11deserializeEPh>
 80054f2:	4602      	mov	r2, r0
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	4413      	add	r3, r2
 80054f8:	613b      	str	r3, [r7, #16]
     return offset;
 80054fa:	693b      	ldr	r3, [r7, #16]
    }
 80054fc:	4618      	mov	r0, r3
 80054fe:	3718      	adds	r7, #24
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <_ZN13geometry_msgs16TransformStamped7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/TransformStamped"; };
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	4b03      	ldr	r3, [pc, #12]	; (800551c <_ZN13geometry_msgs16TransformStamped7getTypeEv+0x18>)
 800550e:	4618      	mov	r0, r3
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	0800f1f8 	.word	0x0800f1f8

08005520 <_ZN13geometry_msgs16TransformStamped6getMD5Ev>:
    virtual const char * getMD5() override { return "b5764a33bfeb3588febc2682852579b0"; };
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	4b03      	ldr	r3, [pc, #12]	; (8005538 <_ZN13geometry_msgs16TransformStamped6getMD5Ev+0x18>)
 800552a:	4618      	mov	r0, r3
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	0800f218 	.word	0x0800f218

0800553c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
 8005548:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint) {};
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	601a      	str	r2, [r3, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	605a      	str	r2, [r3, #4]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	683a      	ldr	r2, [r7, #0]
 800555a:	611a      	str	r2, [r3, #16]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	4618      	mov	r0, r3
 8005560:	3714      	adds	r7, #20
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <_ZN3ros9Publisher7publishEPKNS_3MsgE>:
  int publish(const Msg * msg)
 800556a:	b580      	push	{r7, lr}
 800556c:	b082      	sub	sp, #8
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
 8005572:	6039      	str	r1, [r7, #0]
    return nh_->publish(id_, msg);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68d8      	ldr	r0, [r3, #12]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	6891      	ldr	r1, [r2, #8]
 8005584:	683a      	ldr	r2, [r7, #0]
 8005586:	4798      	blx	r3
 8005588:	4603      	mov	r3, r0
  };
 800558a:	4618      	mov	r0, r3
 800558c:	3708      	adds	r7, #8
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
	...

08005594 <_ZN2tf9tfMessageC1Ev>:
      uint32_t transforms_length;
      typedef geometry_msgs::TransformStamped _transforms_type;
      _transforms_type st_transforms;
      _transforms_type * transforms;

    tfMessage():
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
      transforms_length(0), st_transforms(), transforms(nullptr)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4618      	mov	r0, r3
 80055a0:	f7fc fe34 	bl	800220c <_ZN3ros3MsgC1Ev>
 80055a4:	4a09      	ldr	r2, [pc, #36]	; (80055cc <_ZN2tf9tfMessageC1Ev+0x38>)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	601a      	str	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	605a      	str	r2, [r3, #4]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	3308      	adds	r3, #8
 80055b4:	4618      	mov	r0, r3
 80055b6:	f7ff fee9 	bl	800538c <_ZN13geometry_msgs16TransformStampedC1Ev>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	64da      	str	r2, [r3, #76]	; 0x4c
    {
    }
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4618      	mov	r0, r3
 80055c4:	3708      	adds	r7, #8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	0800f3a0 	.word	0x0800f3a0

080055d0 <_ZNK2tf9tfMessage9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80055da:	2300      	movs	r3, #0
 80055dc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->transforms_length >> (8 * 0)) & 0xFF;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6859      	ldr	r1, [r3, #4]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	683a      	ldr	r2, [r7, #0]
 80055e6:	4413      	add	r3, r2
 80055e8:	b2ca      	uxtb	r2, r1
 80055ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->transforms_length >> (8 * 1)) & 0xFF;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	0a19      	lsrs	r1, r3, #8
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	3301      	adds	r3, #1
 80055f6:	683a      	ldr	r2, [r7, #0]
 80055f8:	4413      	add	r3, r2
 80055fa:	b2ca      	uxtb	r2, r1
 80055fc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->transforms_length >> (8 * 2)) & 0xFF;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	0c19      	lsrs	r1, r3, #16
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	3302      	adds	r3, #2
 8005608:	683a      	ldr	r2, [r7, #0]
 800560a:	4413      	add	r3, r2
 800560c:	b2ca      	uxtb	r2, r1
 800560e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->transforms_length >> (8 * 3)) & 0xFF;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	0e19      	lsrs	r1, r3, #24
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	3303      	adds	r3, #3
 800561a:	683a      	ldr	r2, [r7, #0]
 800561c:	4413      	add	r3, r2
 800561e:	b2ca      	uxtb	r2, r1
 8005620:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->transforms_length);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	3304      	adds	r3, #4
 8005626:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < transforms_length; i++){
 8005628:	2300      	movs	r3, #0
 800562a:	60bb      	str	r3, [r7, #8]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	68ba      	ldr	r2, [r7, #8]
 8005632:	429a      	cmp	r2, r3
 8005634:	d21e      	bcs.n	8005674 <_ZNK2tf9tfMessage9serializeEPh+0xa4>
      offset += this->transforms[i].serialize(outbuffer + offset);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	4613      	mov	r3, r2
 800563e:	011b      	lsls	r3, r3, #4
 8005640:	4413      	add	r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	18c8      	adds	r0, r1, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800564a:	68ba      	ldr	r2, [r7, #8]
 800564c:	4613      	mov	r3, r2
 800564e:	011b      	lsls	r3, r3, #4
 8005650:	4413      	add	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	440b      	add	r3, r1
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	6839      	ldr	r1, [r7, #0]
 800565e:	440a      	add	r2, r1
 8005660:	4611      	mov	r1, r2
 8005662:	4798      	blx	r3
 8005664:	4602      	mov	r2, r0
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	4413      	add	r3, r2
 800566a:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < transforms_length; i++){
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	3301      	adds	r3, #1
 8005670:	60bb      	str	r3, [r7, #8]
 8005672:	e7db      	b.n	800562c <_ZNK2tf9tfMessage9serializeEPh+0x5c>
      }
      return offset;
 8005674:	68fb      	ldr	r3, [r7, #12]
    }
 8005676:	4618      	mov	r0, r3
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <_ZN2tf9tfMessage11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800567e:	b580      	push	{r7, lr}
 8005680:	b086      	sub	sp, #24
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
 8005686:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005688:	2300      	movs	r3, #0
 800568a:	617b      	str	r3, [r7, #20]
      uint32_t transforms_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	683a      	ldr	r2, [r7, #0]
 8005690:	4413      	add	r3, r2
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	60fb      	str	r3, [r7, #12]
      transforms_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	3301      	adds	r3, #1
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	4413      	add	r3, r2
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	021b      	lsls	r3, r3, #8
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	60fb      	str	r3, [r7, #12]
      transforms_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	3302      	adds	r3, #2
 80056ac:	683a      	ldr	r2, [r7, #0]
 80056ae:	4413      	add	r3, r2
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	041b      	lsls	r3, r3, #16
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	60fb      	str	r3, [r7, #12]
      transforms_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	3303      	adds	r3, #3
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	4413      	add	r3, r2
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	061b      	lsls	r3, r3, #24
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->transforms_length);
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	3304      	adds	r3, #4
 80056d0:	617b      	str	r3, [r7, #20]
      if(transforms_lengthT > transforms_length)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d90c      	bls.n	80056f6 <_ZN2tf9tfMessage11deserializeEPh+0x78>
        this->transforms = (geometry_msgs::TransformStamped*)realloc(this->transforms, transforms_lengthT * sizeof(geometry_msgs::TransformStamped));
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	4613      	mov	r3, r2
 80056e4:	011b      	lsls	r3, r3, #4
 80056e6:	4413      	add	r3, r2
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	4619      	mov	r1, r3
 80056ec:	f009 f9f4 	bl	800ead8 <realloc>
 80056f0:	4602      	mov	r2, r0
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	64da      	str	r2, [r3, #76]	; 0x4c
      transforms_length = transforms_lengthT;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < transforms_length; i++){
 80056fc:	2300      	movs	r3, #0
 80056fe:	613b      	str	r3, [r7, #16]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	429a      	cmp	r2, r3
 8005708:	d21e      	bcs.n	8005748 <_ZN2tf9tfMessage11deserializeEPh+0xca>
      offset += this->st_transforms.deserialize(inbuffer + offset);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f103 0008 	add.w	r0, r3, #8
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	683a      	ldr	r2, [r7, #0]
 8005714:	4413      	add	r3, r2
 8005716:	4619      	mov	r1, r3
 8005718:	f7ff fe9c 	bl	8005454 <_ZN13geometry_msgs16TransformStamped11deserializeEPh>
 800571c:	4602      	mov	r2, r0
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	4413      	add	r3, r2
 8005722:	617b      	str	r3, [r7, #20]
        memcpy( &(this->transforms[i]), &(this->st_transforms), sizeof(geometry_msgs::TransformStamped));
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	4613      	mov	r3, r2
 800572c:	011b      	lsls	r3, r3, #4
 800572e:	4413      	add	r3, r2
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	18c8      	adds	r0, r1, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	3308      	adds	r3, #8
 8005738:	2244      	movs	r2, #68	; 0x44
 800573a:	4619      	mov	r1, r3
 800573c:	f009 f922 	bl	800e984 <memcpy>
      for( uint32_t i = 0; i < transforms_length; i++){
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	3301      	adds	r3, #1
 8005744:	613b      	str	r3, [r7, #16]
 8005746:	e7db      	b.n	8005700 <_ZN2tf9tfMessage11deserializeEPh+0x82>
      }
     return offset;
 8005748:	697b      	ldr	r3, [r7, #20]
    }
 800574a:	4618      	mov	r0, r3
 800574c:	3718      	adds	r7, #24
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
	...

08005754 <_ZN2tf9tfMessage7getTypeEv>:

    virtual const char * getType() override { return "tf/tfMessage"; };
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	4b03      	ldr	r3, [pc, #12]	; (800576c <_ZN2tf9tfMessage7getTypeEv+0x18>)
 800575e:	4618      	mov	r0, r3
 8005760:	370c      	adds	r7, #12
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	0800f23c 	.word	0x0800f23c

08005770 <_ZN2tf9tfMessage6getMD5Ev>:
    virtual const char * getMD5() override { return "94810edda583a504dfda3829e70d7eec"; };
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	4b03      	ldr	r3, [pc, #12]	; (8005788 <_ZN2tf9tfMessage6getMD5Ev+0x18>)
 800577a:	4618      	mov	r0, r3
 800577c:	370c      	adds	r7, #12
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	0800f24c 	.word	0x0800f24c

0800578c <_ZN2tf20TransformBroadcasterC1Ev>:
{

class TransformBroadcaster
{
public:
  TransformBroadcaster() : publisher_("/tf", &internal_msg) {}
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4618      	mov	r0, r3
 8005798:	f7ff fefc 	bl	8005594 <_ZN2tf9tfMessageC1Ev>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f103 0050 	add.w	r0, r3, #80	; 0x50
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	2300      	movs	r3, #0
 80057a6:	4904      	ldr	r1, [pc, #16]	; (80057b8 <_ZN2tf20TransformBroadcasterC1Ev+0x2c>)
 80057a8:	f7ff fec8 	bl	800553c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4618      	mov	r0, r3
 80057b0:	3708      	adds	r7, #8
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	0800f270 	.word	0x0800f270

080057bc <_ZN2tf20TransformBroadcaster4initERN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEE>:

  void init(ros::NodeHandle &nh)
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  {
    nh.advertise(publisher_);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	3350      	adds	r3, #80	; 0x50
 80057ca:	4619      	mov	r1, r3
 80057cc:	6838      	ldr	r0, [r7, #0]
 80057ce:	f000 faf7 	bl	8005dc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE>
  }
 80057d2:	bf00      	nop
 80057d4:	3708      	adds	r7, #8
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <_ZN2tf20TransformBroadcaster13sendTransformERN13geometry_msgs16TransformStampedE>:

  void sendTransform(geometry_msgs::TransformStamped &transform)
 80057da:	b580      	push	{r7, lr}
 80057dc:	b082      	sub	sp, #8
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
 80057e2:	6039      	str	r1, [r7, #0]
  {
    internal_msg.transforms_length = 1;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	605a      	str	r2, [r3, #4]
    internal_msg.transforms = &transform;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	683a      	ldr	r2, [r7, #0]
 80057ee:	64da      	str	r2, [r3, #76]	; 0x4c
    publisher_.publish(&internal_msg);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	3350      	adds	r3, #80	; 0x50
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	4611      	mov	r1, r2
 80057f8:	4618      	mov	r0, r3
 80057fa:	f7ff feb6 	bl	800556a <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  }
 80057fe:	bf00      	nop
 8005800:	3708      	adds	r7, #8
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
	...

08005808 <_ZN2tfL23createQuaternionFromYawEd>:

namespace tf
{

static inline geometry_msgs::Quaternion createQuaternionFromYaw(double yaw)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	e9c7 2300 	strd	r2, r3, [r7]
  geometry_msgs::Quaternion q;
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f7ff f9af 	bl	8004b78 <_ZN13geometry_msgs10QuaternionC1Ev>
  q.x = 0;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f04f 0200 	mov.w	r2, #0
 8005820:	605a      	str	r2, [r3, #4]
  q.y = 0;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f04f 0200 	mov.w	r2, #0
 8005828:	609a      	str	r2, [r3, #8]
  q.z = sin(yaw * 0.5);
 800582a:	f04f 0200 	mov.w	r2, #0
 800582e:	4b1b      	ldr	r3, [pc, #108]	; (800589c <_ZN2tfL23createQuaternionFromYawEd+0x94>)
 8005830:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005834:	f7fa fe90 	bl	8000558 <__aeabi_dmul>
 8005838:	4602      	mov	r2, r0
 800583a:	460b      	mov	r3, r1
 800583c:	ec43 2b17 	vmov	d7, r2, r3
 8005840:	eeb0 0a47 	vmov.f32	s0, s14
 8005844:	eef0 0a67 	vmov.f32	s1, s15
 8005848:	f007 fa7a 	bl	800cd40 <sin>
 800584c:	ec53 2b10 	vmov	r2, r3, d0
 8005850:	4610      	mov	r0, r2
 8005852:	4619      	mov	r1, r3
 8005854:	f7fb f942 	bl	8000adc <__aeabi_d2f>
 8005858:	4602      	mov	r2, r0
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	60da      	str	r2, [r3, #12]
  q.w = cos(yaw * 0.5);
 800585e:	f04f 0200 	mov.w	r2, #0
 8005862:	4b0e      	ldr	r3, [pc, #56]	; (800589c <_ZN2tfL23createQuaternionFromYawEd+0x94>)
 8005864:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005868:	f7fa fe76 	bl	8000558 <__aeabi_dmul>
 800586c:	4602      	mov	r2, r0
 800586e:	460b      	mov	r3, r1
 8005870:	ec43 2b17 	vmov	d7, r2, r3
 8005874:	eeb0 0a47 	vmov.f32	s0, s14
 8005878:	eef0 0a67 	vmov.f32	s1, s15
 800587c:	f007 fa0c 	bl	800cc98 <cos>
 8005880:	ec53 2b10 	vmov	r2, r3, d0
 8005884:	4610      	mov	r0, r2
 8005886:	4619      	mov	r1, r3
 8005888:	f7fb f928 	bl	8000adc <__aeabi_d2f>
 800588c:	4602      	mov	r2, r0
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	611a      	str	r2, [r3, #16]
  return q;
 8005892:	bf00      	nop
}
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	3fe00000 	.word	0x3fe00000

080058a0 <_ZN8OdometerC1Eff>:

geometry_msgs::TransformStamped t;
tf::TransformBroadcaster tfBroadcaster;


Odometer::Odometer(const float metersPerTick, const float base_width) {
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	ed87 0a02 	vstr	s0, [r7, #8]
 80058ac:	edc7 0a01 	vstr	s1, [r7, #4]
  _metersPerTick = metersPerTick;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	68ba      	ldr	r2, [r7, #8]
 80058b4:	601a      	str	r2, [r3, #0]
  _base_width    = base_width;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	605a      	str	r2, [r3, #4]
  _cur_x         = 0.0;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f04f 0200 	mov.w	r2, #0
 80058c2:	609a      	str	r2, [r3, #8]
  _cur_y         = 0.0;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f04f 0200 	mov.w	r2, #0
 80058ca:	60da      	str	r2, [r3, #12]
  _cur_theta     = 0.0;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f04f 0200 	mov.w	r2, #0
 80058d2:	611a      	str	r2, [r3, #16]
}
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	4618      	mov	r0, r3
 80058d8:	3714      	adds	r7, #20
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr
	...

080058e4 <_ZN8Odometer9setupPubsERN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEE>:

void Odometer::setupPubs(ros::NodeHandle &nh) {
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  nh.advertise(odom_pub);
 80058ee:	4906      	ldr	r1, [pc, #24]	; (8005908 <_ZN8Odometer9setupPubsERN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEE+0x24>)
 80058f0:	6838      	ldr	r0, [r7, #0]
 80058f2:	f000 fa65 	bl	8005dc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE>
  tfBroadcaster.init(nh);
 80058f6:	6839      	ldr	r1, [r7, #0]
 80058f8:	4804      	ldr	r0, [pc, #16]	; (800590c <_ZN8Odometer9setupPubsERN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEE+0x28>)
 80058fa:	f7ff ff5f 	bl	80057bc <_ZN2tf20TransformBroadcaster4initERN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEE>
}
 80058fe:	bf00      	nop
 8005900:	3708      	adds	r7, #8
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	200028e8 	.word	0x200028e8
 800590c:	20002940 	.word	0x20002940

08005910 <_ZN8Odometer14update_publishEN3ros4TimeEfff>:


void Odometer::update_publish(ros::Time current_time, const float odoInterval,
                              const float distLeft, const float distRight) {
 8005910:	b580      	push	{r7, lr}
 8005912:	b088      	sub	sp, #32
 8005914:	af00      	add	r7, sp, #0
 8005916:	6178      	str	r0, [r7, #20]
 8005918:	f107 030c 	add.w	r3, r7, #12
 800591c:	e883 0006 	stmia.w	r3, {r1, r2}
 8005920:	ed87 0a02 	vstr	s0, [r7, #8]
 8005924:	edc7 0a01 	vstr	s1, [r7, #4]
 8005928:	ed87 1a00 	vstr	s2, [r7]

  float vel_x;
  float vel_theta;

  update_odom(odoInterval, distLeft, distRight, vel_x, vel_theta);
 800592c:	f107 0218 	add.w	r2, r7, #24
 8005930:	f107 031c 	add.w	r3, r7, #28
 8005934:	4619      	mov	r1, r3
 8005936:	ed97 1a00 	vldr	s2, [r7]
 800593a:	edd7 0a01 	vldr	s1, [r7, #4]
 800593e:	ed97 0a02 	vldr	s0, [r7, #8]
 8005942:	6978      	ldr	r0, [r7, #20]
 8005944:	f000 f81c 	bl	8005980 <_ZN8Odometer11update_odomEfffRfS0_>
  publish_odom(current_time, vel_x, vel_theta);
 8005948:	edd7 7a07 	vldr	s15, [r7, #28]
 800594c:	ed97 7a06 	vldr	s14, [r7, #24]
 8005950:	eef0 0a47 	vmov.f32	s1, s14
 8005954:	eeb0 0a67 	vmov.f32	s0, s15
 8005958:	f107 030c 	add.w	r3, r7, #12
 800595c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005960:	6978      	ldr	r0, [r7, #20]
 8005962:	f000 f935 	bl	8005bd0 <_ZN8Odometer12publish_odomEN3ros4TimeEff>
  broadcastTf(current_time);
 8005966:	f107 030c 	add.w	r3, r7, #12
 800596a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800596e:	6978      	ldr	r0, [r7, #20]
 8005970:	f000 f986 	bl	8005c80 <_ZN8Odometer11broadcastTfEN3ros4TimeE>
}
 8005974:	bf00      	nop
 8005976:	3720      	adds	r7, #32
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	0000      	movs	r0, r0
	...

08005980 <_ZN8Odometer11update_odomEfffRfS0_>:

void Odometer::update_odom(const float odoInterval, const float distLeft,const float distRight,
                          float& vel_x, float& vel_theta) {
 8005980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005982:	ed2d 8b02 	vpush	{d8}
 8005986:	b08b      	sub	sp, #44	; 0x2c
 8005988:	af00      	add	r7, sp, #0
 800598a:	6178      	str	r0, [r7, #20]
 800598c:	ed87 0a04 	vstr	s0, [r7, #16]
 8005990:	edc7 0a03 	vstr	s1, [r7, #12]
 8005994:	ed87 1a02 	vstr	s2, [r7, #8]
 8005998:	6079      	str	r1, [r7, #4]
 800599a:	603a      	str	r2, [r7, #0]

  float dist;
  float d_theta;

  dist = (distRight + distLeft) / 2.0;
 800599c:	ed97 7a02 	vldr	s14, [r7, #8]
 80059a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80059a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80059a8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80059ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80059b0:	edc7 7a08 	vstr	s15, [r7, #32]

  // Check for the special case of driving in a straight line
  // then compute current loation relative to previous location

  // If the difference in distance is under 2mm/Second we call it a straight line
  if (abs(distRight - distLeft) < (0.002 * odoInterval)) {
 80059b4:	ed97 7a02 	vldr	s14, [r7, #8]
 80059b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80059bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059c0:	eeb0 0a67 	vmov.f32	s0, s15
 80059c4:	f7fe fe6e 	bl	80046a4 <_ZSt3absf>
 80059c8:	ee10 3a10 	vmov	r3, s0
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7fa fd6b 	bl	80004a8 <__aeabi_f2d>
 80059d2:	4604      	mov	r4, r0
 80059d4:	460d      	mov	r5, r1
 80059d6:	6938      	ldr	r0, [r7, #16]
 80059d8:	f7fa fd66 	bl	80004a8 <__aeabi_f2d>
 80059dc:	a364      	add	r3, pc, #400	; (adr r3, 8005b70 <_ZN8Odometer11update_odomEfffRfS0_+0x1f0>)
 80059de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e2:	f7fa fdb9 	bl	8000558 <__aeabi_dmul>
 80059e6:	4602      	mov	r2, r0
 80059e8:	460b      	mov	r3, r1
 80059ea:	2101      	movs	r1, #1
 80059ec:	460e      	mov	r6, r1
 80059ee:	4620      	mov	r0, r4
 80059f0:	4629      	mov	r1, r5
 80059f2:	f7fb f823 	bl	8000a3c <__aeabi_dcmplt>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d101      	bne.n	8005a00 <_ZN8Odometer11update_odomEfffRfS0_+0x80>
 80059fc:	2300      	movs	r3, #0
 80059fe:	461e      	mov	r6, r3
 8005a00:	b2f3      	uxtb	r3, r6
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d02d      	beq.n	8005a62 <_ZN8Odometer11update_odomEfffRfS0_+0xe2>

    // drove in sraight line
    d_theta = 0.0;
 8005a06:	f04f 0300 	mov.w	r3, #0
 8005a0a:	627b      	str	r3, [r7, #36]	; 0x24
    _cur_x += dist * cos(_cur_theta);
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	edd3 7a04 	vldr	s15, [r3, #16]
 8005a12:	eeb0 0a67 	vmov.f32	s0, s15
 8005a16:	f7fe fe55 	bl	80046c4 <_ZSt3cosf>
 8005a1a:	eeb0 7a40 	vmov.f32	s14, s0
 8005a1e:	edd7 7a08 	vldr	s15, [r7, #32]
 8005a22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	edd3 7a02 	vldr	s15, [r3, #8]
 8005a2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	edc3 7a02 	vstr	s15, [r3, #8]
    _cur_y += dist * sin(_cur_theta);
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	edd3 7a04 	vldr	s15, [r3, #16]
 8005a3c:	eeb0 0a67 	vmov.f32	s0, s15
 8005a40:	f7fe fe50 	bl	80046e4 <_ZSt3sinf>
 8005a44:	eeb0 7a40 	vmov.f32	s14, s0
 8005a48:	edd7 7a08 	vldr	s15, [r7, #32]
 8005a4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	edd3 7a03 	vldr	s15, [r3, #12]
 8005a56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	edc3 7a03 	vstr	s15, [r3, #12]
 8005a60:	e06d      	b.n	8005b3e <_ZN8Odometer11update_odomEfffRfS0_+0x1be>
  }
  else {

    // The path was along an arc
    d_theta = (distRight - distLeft) / _base_width;
 8005a62:	ed97 7a02 	vldr	s14, [r7, #8]
 8005a66:	edd7 7a03 	vldr	s15, [r7, #12]
 8005a6a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	ed93 7a01 	vldr	s14, [r3, #4]
 8005a74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a78:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float r = dist / d_theta;
 8005a7c:	edd7 6a08 	vldr	s13, [r7, #32]
 8005a80:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005a84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a88:	edc7 7a07 	vstr	s15, [r7, #28]

    _cur_x += r * (sin(d_theta + _cur_theta) - sin(_cur_theta));
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	ed93 7a04 	vldr	s14, [r3, #16]
 8005a92:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005a96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a9a:	eeb0 0a67 	vmov.f32	s0, s15
 8005a9e:	f7fe fe21 	bl	80046e4 <_ZSt3sinf>
 8005aa2:	eeb0 8a40 	vmov.f32	s16, s0
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	edd3 7a04 	vldr	s15, [r3, #16]
 8005aac:	eeb0 0a67 	vmov.f32	s0, s15
 8005ab0:	f7fe fe18 	bl	80046e4 <_ZSt3sinf>
 8005ab4:	eef0 7a40 	vmov.f32	s15, s0
 8005ab8:	ee38 7a67 	vsub.f32	s14, s16, s15
 8005abc:	edd7 7a07 	vldr	s15, [r7, #28]
 8005ac0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	edd3 7a02 	vldr	s15, [r3, #8]
 8005aca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	edc3 7a02 	vstr	s15, [r3, #8]
    _cur_y -= r * (cos(d_theta + _cur_theta) - cos(_cur_theta));
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	ed93 7a04 	vldr	s14, [r3, #16]
 8005ada:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005ade:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ae2:	eeb0 0a67 	vmov.f32	s0, s15
 8005ae6:	f7fe fded 	bl	80046c4 <_ZSt3cosf>
 8005aea:	eeb0 8a40 	vmov.f32	s16, s0
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	edd3 7a04 	vldr	s15, [r3, #16]
 8005af4:	eeb0 0a67 	vmov.f32	s0, s15
 8005af8:	f7fe fde4 	bl	80046c4 <_ZSt3cosf>
 8005afc:	eef0 7a40 	vmov.f32	s15, s0
 8005b00:	ee38 7a67 	vsub.f32	s14, s16, s15
 8005b04:	edd7 7a07 	vldr	s15, [r7, #28]
 8005b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	ed93 7a03 	vldr	s14, [r3, #12]
 8005b12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	edc3 7a03 	vstr	s15, [r3, #12]
    _cur_theta = normalize_angle(_cur_theta + d_theta);
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	ed93 7a04 	vldr	s14, [r3, #16]
 8005b22:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005b26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b2a:	eeb0 0a67 	vmov.f32	s0, s15
 8005b2e:	6978      	ldr	r0, [r7, #20]
 8005b30:	f000 f8f2 	bl	8005d18 <_ZN8Odometer15normalize_angleEf>
 8005b34:	eef0 7a40 	vmov.f32	s15, s0
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	edc3 7a04 	vstr	s15, [r3, #16]
  }

  vel_x     = dist    / odoInterval;
 8005b3e:	edd7 6a08 	vldr	s13, [r7, #32]
 8005b42:	ed97 7a04 	vldr	s14, [r7, #16]
 8005b46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	edc3 7a00 	vstr	s15, [r3]
  vel_theta = d_theta / odoInterval;
 8005b50:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005b54:	ed97 7a04 	vldr	s14, [r7, #16]
 8005b58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	edc3 7a00 	vstr	s15, [r3]

  return;
 8005b62:	bf00      	nop
}
 8005b64:	372c      	adds	r7, #44	; 0x2c
 8005b66:	46bd      	mov	sp, r7
 8005b68:	ecbd 8b02 	vpop	{d8}
 8005b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	d2f1a9fc 	.word	0xd2f1a9fc
 8005b74:	3f60624d 	.word	0x3f60624d

08005b78 <_ZN3ros3MsgaSEOS0_>:
class Msg
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4618      	mov	r0, r3
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <_ZN13geometry_msgs10QuaternionaSEOS0_>:
  class Quaternion : public ros::Msg
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	683a      	ldr	r2, [r7, #0]
 8005b9e:	4611      	mov	r1, r2
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7ff ffe9 	bl	8005b78 <_ZN3ros3MsgaSEOS0_>
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	685a      	ldr	r2, [r3, #4]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	605a      	str	r2, [r3, #4]
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	689a      	ldr	r2, [r3, #8]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	609a      	str	r2, [r3, #8]
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	68da      	ldr	r2, [r3, #12]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	60da      	str	r2, [r3, #12]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	691a      	ldr	r2, [r3, #16]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	611a      	str	r2, [r3, #16]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3708      	adds	r7, #8
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <_ZN8Odometer12publish_odomEN3ros4TimeEff>:
    new_y = y - R * (cos(wd + heading) + cos(heading));
    new_heading = normalize_angle(heading + wd);
  }
}

void Odometer::publish_odom(ros::Time current_time, const float vx, const float vth) {
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b08c      	sub	sp, #48	; 0x30
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6178      	str	r0, [r7, #20]
 8005bd8:	f107 030c 	add.w	r3, r7, #12
 8005bdc:	e883 0006 	stmia.w	r3, {r1, r2}
 8005be0:	ed87 0a02 	vstr	s0, [r7, #8]
 8005be4:	edc7 0a01 	vstr	s1, [r7, #4]

    odomMsg.header.stamp          = current_time;
 8005be8:	4b20      	ldr	r3, [pc, #128]	; (8005c6c <_ZN8Odometer12publish_odomEN3ros4TimeEff+0x9c>)
 8005bea:	330c      	adds	r3, #12
 8005bec:	f107 020c 	add.w	r2, r7, #12
 8005bf0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005bf4:	e883 0003 	stmia.w	r3, {r0, r1}
    odomMsg.header.frame_id       = odom;
 8005bf8:	4b1c      	ldr	r3, [pc, #112]	; (8005c6c <_ZN8Odometer12publish_odomEN3ros4TimeEff+0x9c>)
 8005bfa:	4a1d      	ldr	r2, [pc, #116]	; (8005c70 <_ZN8Odometer12publish_odomEN3ros4TimeEff+0xa0>)
 8005bfc:	615a      	str	r2, [r3, #20]
    odomMsg.child_frame_id        = base_link;
 8005bfe:	4b1b      	ldr	r3, [pc, #108]	; (8005c6c <_ZN8Odometer12publish_odomEN3ros4TimeEff+0x9c>)
 8005c00:	4a1c      	ldr	r2, [pc, #112]	; (8005c74 <_ZN8Odometer12publish_odomEN3ros4TimeEff+0xa4>)
 8005c02:	619a      	str	r2, [r3, #24]

    odomMsg.pose.pose.position.x  = _cur_x;
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	4a18      	ldr	r2, [pc, #96]	; (8005c6c <_ZN8Odometer12publish_odomEN3ros4TimeEff+0x9c>)
 8005c0a:	6293      	str	r3, [r2, #40]	; 0x28
    odomMsg.pose.pose.position.y  = _cur_y;
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	4a16      	ldr	r2, [pc, #88]	; (8005c6c <_ZN8Odometer12publish_odomEN3ros4TimeEff+0x9c>)
 8005c12:	62d3      	str	r3, [r2, #44]	; 0x2c
    odomMsg.pose.pose.position.z  = 0.0;
 8005c14:	4b15      	ldr	r3, [pc, #84]	; (8005c6c <_ZN8Odometer12publish_odomEN3ros4TimeEff+0x9c>)
 8005c16:	f04f 0200 	mov.w	r2, #0
 8005c1a:	631a      	str	r2, [r3, #48]	; 0x30
    odomMsg.pose.pose.orientation = tf::createQuaternionFromYaw(_cur_theta);
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7fa fc41 	bl	80004a8 <__aeabi_f2d>
 8005c26:	4602      	mov	r2, r0
 8005c28:	460b      	mov	r3, r1
 8005c2a:	f107 011c 	add.w	r1, r7, #28
 8005c2e:	4608      	mov	r0, r1
 8005c30:	f7ff fdea 	bl	8005808 <_ZN2tfL23createQuaternionFromYawEd>
 8005c34:	f107 031c 	add.w	r3, r7, #28
 8005c38:	4619      	mov	r1, r3
 8005c3a:	480f      	ldr	r0, [pc, #60]	; (8005c78 <_ZN8Odometer12publish_odomEN3ros4TimeEff+0xa8>)
 8005c3c:	f7ff ffa8 	bl	8005b90 <_ZN13geometry_msgs10QuaternionaSEOS0_>

    odomMsg.twist.twist.linear.x  = vx;
 8005c40:	4a0a      	ldr	r2, [pc, #40]	; (8005c6c <_ZN8Odometer12publish_odomEN3ros4TimeEff+0x9c>)
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    odomMsg.twist.twist.linear.y  = 0;
 8005c48:	4b08      	ldr	r3, [pc, #32]	; (8005c6c <_ZN8Odometer12publish_odomEN3ros4TimeEff+0x9c>)
 8005c4a:	f04f 0200 	mov.w	r2, #0
 8005c4e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    odomMsg.twist.twist.angular.z = vth;
 8005c52:	4a06      	ldr	r2, [pc, #24]	; (8005c6c <_ZN8Odometer12publish_odomEN3ros4TimeEff+0x9c>)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc

    odom_pub.publish(&odomMsg);
 8005c5a:	4904      	ldr	r1, [pc, #16]	; (8005c6c <_ZN8Odometer12publish_odomEN3ros4TimeEff+0x9c>)
 8005c5c:	4807      	ldr	r0, [pc, #28]	; (8005c7c <_ZN8Odometer12publish_odomEN3ros4TimeEff+0xac>)
 8005c5e:	f7ff fc84 	bl	800556a <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  }
 8005c62:	bf00      	nop
 8005c64:	3730      	adds	r7, #48	; 0x30
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	20002758 	.word	0x20002758
 8005c70:	20000024 	.word	0x20000024
 8005c74:	20000018 	.word	0x20000018
 8005c78:	2000278c 	.word	0x2000278c
 8005c7c:	200028e8 	.word	0x200028e8

08005c80 <_ZN8Odometer11broadcastTfEN3ros4TimeE>:


  void Odometer::broadcastTf(ros::Time current_time) {
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b08a      	sub	sp, #40	; 0x28
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	1d3b      	adds	r3, r7, #4
 8005c8a:	e883 0006 	stmia.w	r3, {r1, r2}
    t.header.stamp            = current_time;
 8005c8e:	4b1c      	ldr	r3, [pc, #112]	; (8005d00 <_ZN8Odometer11broadcastTfEN3ros4TimeE+0x80>)
 8005c90:	330c      	adds	r3, #12
 8005c92:	1d3a      	adds	r2, r7, #4
 8005c94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005c98:	e883 0003 	stmia.w	r3, {r0, r1}
    t.header.frame_id         = odom;
 8005c9c:	4b18      	ldr	r3, [pc, #96]	; (8005d00 <_ZN8Odometer11broadcastTfEN3ros4TimeE+0x80>)
 8005c9e:	4a19      	ldr	r2, [pc, #100]	; (8005d04 <_ZN8Odometer11broadcastTfEN3ros4TimeE+0x84>)
 8005ca0:	615a      	str	r2, [r3, #20]
    t.child_frame_id          = base_link;
 8005ca2:	4b17      	ldr	r3, [pc, #92]	; (8005d00 <_ZN8Odometer11broadcastTfEN3ros4TimeE+0x80>)
 8005ca4:	4a18      	ldr	r2, [pc, #96]	; (8005d08 <_ZN8Odometer11broadcastTfEN3ros4TimeE+0x88>)
 8005ca6:	619a      	str	r2, [r3, #24]

    t.transform.translation.x = _cur_x;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	4a14      	ldr	r2, [pc, #80]	; (8005d00 <_ZN8Odometer11broadcastTfEN3ros4TimeE+0x80>)
 8005cae:	6253      	str	r3, [r2, #36]	; 0x24
    t.transform.translation.y = _cur_y;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	4a12      	ldr	r2, [pc, #72]	; (8005d00 <_ZN8Odometer11broadcastTfEN3ros4TimeE+0x80>)
 8005cb6:	6293      	str	r3, [r2, #40]	; 0x28
    t.transform.translation.z = 0.0;
 8005cb8:	4b11      	ldr	r3, [pc, #68]	; (8005d00 <_ZN8Odometer11broadcastTfEN3ros4TimeE+0x80>)
 8005cba:	f04f 0200 	mov.w	r2, #0
 8005cbe:	62da      	str	r2, [r3, #44]	; 0x2c
    t.transform.rotation      = tf::createQuaternionFromYaw(-_cur_theta);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	edd3 7a04 	vldr	s15, [r3, #16]
 8005cc6:	eef1 7a67 	vneg.f32	s15, s15
 8005cca:	ee17 3a90 	vmov	r3, s15
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7fa fbea 	bl	80004a8 <__aeabi_f2d>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	f107 0114 	add.w	r1, r7, #20
 8005cdc:	4608      	mov	r0, r1
 8005cde:	f7ff fd93 	bl	8005808 <_ZN2tfL23createQuaternionFromYawEd>
 8005ce2:	f107 0314 	add.w	r3, r7, #20
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	4808      	ldr	r0, [pc, #32]	; (8005d0c <_ZN8Odometer11broadcastTfEN3ros4TimeE+0x8c>)
 8005cea:	f7ff ff51 	bl	8005b90 <_ZN13geometry_msgs10QuaternionaSEOS0_>


    tfBroadcaster.sendTransform(t);
 8005cee:	4904      	ldr	r1, [pc, #16]	; (8005d00 <_ZN8Odometer11broadcastTfEN3ros4TimeE+0x80>)
 8005cf0:	4807      	ldr	r0, [pc, #28]	; (8005d10 <_ZN8Odometer11broadcastTfEN3ros4TimeE+0x90>)
 8005cf2:	f7ff fd72 	bl	80057da <_ZN2tf20TransformBroadcaster13sendTransformERN13geometry_msgs16TransformStampedE>
  }
 8005cf6:	bf00      	nop
 8005cf8:	3728      	adds	r7, #40	; 0x28
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	200028fc 	.word	0x200028fc
 8005d04:	20000024 	.word	0x20000024
 8005d08:	20000018 	.word	0x20000018
 8005d0c:	2000292c 	.word	0x2000292c
 8005d10:	20002940 	.word	0x20002940
 8005d14:	00000000 	.word	0x00000000

08005d18 <_ZN8Odometer15normalize_angleEf>:


  float Odometer::normalize_angle(float angle) {
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	ed87 0a00 	vstr	s0, [r7]
    while (angle > M_PI) {
 8005d24:	6838      	ldr	r0, [r7, #0]
 8005d26:	f7fa fbbf 	bl	80004a8 <__aeabi_f2d>
 8005d2a:	a31f      	add	r3, pc, #124	; (adr r3, 8005da8 <_ZN8Odometer15normalize_angleEf+0x90>)
 8005d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d30:	f7fa fea2 	bl	8000a78 <__aeabi_dcmpgt>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d100      	bne.n	8005d3c <_ZN8Odometer15normalize_angleEf+0x24>
 8005d3a:	e010      	b.n	8005d5e <_ZN8Odometer15normalize_angleEf+0x46>
      angle -= 2.0 * M_PI;
 8005d3c:	6838      	ldr	r0, [r7, #0]
 8005d3e:	f7fa fbb3 	bl	80004a8 <__aeabi_f2d>
 8005d42:	a31b      	add	r3, pc, #108	; (adr r3, 8005db0 <_ZN8Odometer15normalize_angleEf+0x98>)
 8005d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d48:	f7fa fa4e 	bl	80001e8 <__aeabi_dsub>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	460b      	mov	r3, r1
 8005d50:	4610      	mov	r0, r2
 8005d52:	4619      	mov	r1, r3
 8005d54:	f7fa fec2 	bl	8000adc <__aeabi_d2f>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	603b      	str	r3, [r7, #0]
    while (angle > M_PI) {
 8005d5c:	e7e2      	b.n	8005d24 <_ZN8Odometer15normalize_angleEf+0xc>
    }
    while (angle < -M_PI) {
 8005d5e:	6838      	ldr	r0, [r7, #0]
 8005d60:	f7fa fba2 	bl	80004a8 <__aeabi_f2d>
 8005d64:	a314      	add	r3, pc, #80	; (adr r3, 8005db8 <_ZN8Odometer15normalize_angleEf+0xa0>)
 8005d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6a:	f7fa fe67 	bl	8000a3c <__aeabi_dcmplt>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d010      	beq.n	8005d96 <_ZN8Odometer15normalize_angleEf+0x7e>
      angle += 2.0 * M_PI;
 8005d74:	6838      	ldr	r0, [r7, #0]
 8005d76:	f7fa fb97 	bl	80004a8 <__aeabi_f2d>
 8005d7a:	a30d      	add	r3, pc, #52	; (adr r3, 8005db0 <_ZN8Odometer15normalize_angleEf+0x98>)
 8005d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d80:	f7fa fa34 	bl	80001ec <__adddf3>
 8005d84:	4602      	mov	r2, r0
 8005d86:	460b      	mov	r3, r1
 8005d88:	4610      	mov	r0, r2
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	f7fa fea6 	bl	8000adc <__aeabi_d2f>
 8005d90:	4603      	mov	r3, r0
 8005d92:	603b      	str	r3, [r7, #0]
    while (angle < -M_PI) {
 8005d94:	e7e3      	b.n	8005d5e <_ZN8Odometer15normalize_angleEf+0x46>
    }
    return angle;
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	ee07 3a90 	vmov	s15, r3
  }
 8005d9c:	eeb0 0a67 	vmov.f32	s0, s15
 8005da0:	3708      	adds	r7, #8
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	54442d18 	.word	0x54442d18
 8005dac:	400921fb 	.word	0x400921fb
 8005db0:	54442d18 	.word	0x54442d18
 8005db4:	401921fb 	.word	0x401921fb
 8005db8:	54442d18 	.word	0x54442d18
 8005dbc:	c00921fb 	.word	0xc00921fb

08005dc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8005dca:	2300      	movs	r3, #0
 8005dcc:	60fb      	str	r3, [r7, #12]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2b18      	cmp	r3, #24
 8005dd2:	dc1e      	bgt.n	8005e12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	4413      	add	r3, r2
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d111      	bne.n	8005e0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4413      	add	r3, r2
 8005df2:	683a      	ldr	r2, [r7, #0]
 8005df4:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	60da      	str	r2, [r3, #12]
        return true;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e004      	b.n	8005e14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	60fb      	str	r3, [r7, #12]
 8005e10:	e7dd      	b.n	8005dce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE+0xe>
    return false;
 8005e12:	2300      	movs	r3, #0
  }
 8005e14:	4618      	mov	r0, r3
 8005e16:	3714      	adds	r7, #20
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <_Z41__static_initialization_and_destruction_0ii>:
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d113      	bne.n	8005e58 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d10e      	bne.n	8005e58 <_Z41__static_initialization_and_destruction_0ii+0x38>
nav_msgs::Odometry odomMsg;
 8005e3a:	4809      	ldr	r0, [pc, #36]	; (8005e60 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8005e3c:	f7ff f92e 	bl	800509c <_ZN8nav_msgs8OdometryC1Ev>
ros::Publisher     odom_pub(odom, &odomMsg);
 8005e40:	2300      	movs	r3, #0
 8005e42:	4a07      	ldr	r2, [pc, #28]	; (8005e60 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8005e44:	4907      	ldr	r1, [pc, #28]	; (8005e64 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8005e46:	4808      	ldr	r0, [pc, #32]	; (8005e68 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8005e48:	f7ff fb78 	bl	800553c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
geometry_msgs::TransformStamped t;
 8005e4c:	4807      	ldr	r0, [pc, #28]	; (8005e6c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8005e4e:	f7ff fa9d 	bl	800538c <_ZN13geometry_msgs16TransformStampedC1Ev>
tf::TransformBroadcaster tfBroadcaster;
 8005e52:	4807      	ldr	r0, [pc, #28]	; (8005e70 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8005e54:	f7ff fc9a 	bl	800578c <_ZN2tf20TransformBroadcasterC1Ev>
  }
 8005e58:	bf00      	nop
 8005e5a:	3708      	adds	r7, #8
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	20002758 	.word	0x20002758
 8005e64:	20000024 	.word	0x20000024
 8005e68:	200028e8 	.word	0x200028e8
 8005e6c:	200028fc 	.word	0x200028fc
 8005e70:	20002940 	.word	0x20002940

08005e74 <_GLOBAL__sub_I_base_link>:
 8005e74:	b580      	push	{r7, lr}
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005e7c:	2001      	movs	r0, #1
 8005e7e:	f7ff ffcf 	bl	8005e20 <_Z41__static_initialization_and_destruction_0ii>
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	0000      	movs	r0, r0
	...

08005e88 <_ZN3PIDC1EPdS0_S0_dddii>:

/*Constructor (...)*********************************************************
 *    The parameters specified here are those for for which we can't set up
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b08a      	sub	sp, #40	; 0x28
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6278      	str	r0, [r7, #36]	; 0x24
 8005e90:	6239      	str	r1, [r7, #32]
 8005e92:	61fa      	str	r2, [r7, #28]
 8005e94:	61bb      	str	r3, [r7, #24]
 8005e96:	ed87 0b04 	vstr	d0, [r7, #16]
 8005e9a:	ed87 1b02 	vstr	d1, [r7, #8]
 8005e9e:	ed87 2b00 	vstr	d2, [r7]
        double Kp, double Ki, double Kd, int POn, int ControllerDirection)
{
    myOutput = Output;
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea4:	69fa      	ldr	r2, [r7, #28]
 8005ea6:	63da      	str	r2, [r3, #60]	; 0x3c
    myInput = Input;
 8005ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eaa:	6a3a      	ldr	r2, [r7, #32]
 8005eac:	639a      	str	r2, [r3, #56]	; 0x38
    mySetpoint = Setpoint;
 8005eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb0:	69ba      	ldr	r2, [r7, #24]
 8005eb2:	641a      	str	r2, [r3, #64]	; 0x40
    inAuto = false;
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    PID::SetOutputLimits(0, 255);				//default output limit corresponds to
 8005ebc:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8005f08 <_ZN3PIDC1EPdS0_S0_dddii+0x80>
 8005ec0:	ed9f 0b13 	vldr	d0, [pc, #76]	; 8005f10 <_ZN3PIDC1EPdS0_S0_dddii+0x88>
 8005ec4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ec6:	f000 fa22 	bl	800630e <_ZN3PID15SetOutputLimitsEdd>
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
 8005eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ecc:	2264      	movs	r2, #100	; 0x64
 8005ece:	659a      	str	r2, [r3, #88]	; 0x58

    PID::SetControllerDirection(ControllerDirection);
 8005ed0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005ed2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ed4:	f000 fae5 	bl	80064a2 <_ZN3PID22SetControllerDirectionEi>
    PID::SetTunings(Kp, Ki, Kd, POn);
 8005ed8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005eda:	ed97 2b00 	vldr	d2, [r7]
 8005ede:	ed97 1b02 	vldr	d1, [r7, #8]
 8005ee2:	ed97 0b04 	vldr	d0, [r7, #16]
 8005ee6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ee8:	f000 f930 	bl	800614c <_ZN3PID10SetTuningsEdddi>

    lastTime = tick-SampleTime;
 8005eec:	4b0a      	ldr	r3, [pc, #40]	; (8005f18 <_ZN3PIDC1EPdS0_S0_dddii+0x90>)
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ef4:	1ad2      	subs	r2, r2, r3
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef8:	645a      	str	r2, [r3, #68]	; 0x44
}
 8005efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efc:	4618      	mov	r0, r3
 8005efe:	3728      	adds	r7, #40	; 0x28
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	f3af 8000 	nop.w
 8005f08:	00000000 	.word	0x00000000
 8005f0c:	406fe000 	.word	0x406fe000
	...
 8005f18:	20000470 	.word	0x20000470

08005f1c <_ZN3PIDC1EPdS0_S0_dddi>:
/*Constructor (...)*********************************************************
 *    To allow backwards compatability for v1.1, or for people that just want
 *    to use Proportional on Error without explicitly saying so
 ***************************************************************************/

PID::PID(double* Input, double* Output, double* Setpoint,
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b08c      	sub	sp, #48	; 0x30
 8005f20:	af02      	add	r7, sp, #8
 8005f22:	6278      	str	r0, [r7, #36]	; 0x24
 8005f24:	6239      	str	r1, [r7, #32]
 8005f26:	61fa      	str	r2, [r7, #28]
 8005f28:	61bb      	str	r3, [r7, #24]
 8005f2a:	ed87 0b04 	vstr	d0, [r7, #16]
 8005f2e:	ed87 1b02 	vstr	d1, [r7, #8]
 8005f32:	ed87 2b00 	vstr	d2, [r7]
        double Kp, double Ki, double Kd, int ControllerDirection)
    :PID::PID(Input, Output, Setpoint, Kp, Ki, Kd, P_ON_E, ControllerDirection)
 8005f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f38:	9301      	str	r3, [sp, #4]
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	9300      	str	r3, [sp, #0]
 8005f3e:	ed97 2b00 	vldr	d2, [r7]
 8005f42:	ed97 1b02 	vldr	d1, [r7, #8]
 8005f46:	ed97 0b04 	vldr	d0, [r7, #16]
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	69fa      	ldr	r2, [r7, #28]
 8005f4e:	6a39      	ldr	r1, [r7, #32]
 8005f50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f52:	f7ff ff99 	bl	8005e88 <_ZN3PIDC1EPdS0_S0_dddii>
{

}
 8005f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3728      	adds	r7, #40	; 0x28
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <_ZN3PID7ComputeEv>:
 *   every time "void loop()" executes.  the function will decide for itself whether a new
 *   pid Output needs to be computed.  returns true when the output is computed,
 *   false when nothing has been done.
 **********************************************************************************/
bool PID::Compute()
{
 8005f60:	b5b0      	push	{r4, r5, r7, lr}
 8005f62:	b08c      	sub	sp, #48	; 0x30
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
   if(!inAuto) return false;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005f6e:	f083 0301 	eor.w	r3, r3, #1
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d001      	beq.n	8005f7c <_ZN3PID7ComputeEv+0x1c>
 8005f78:	2300      	movs	r3, #0
 8005f7a:	e0e0      	b.n	800613e <_ZN3PID7ComputeEv+0x1de>
   unsigned long now = tick;
 8005f7c:	4b72      	ldr	r3, [pc, #456]	; (8006148 <_ZN3PID7ComputeEv+0x1e8>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	627b      	str	r3, [r7, #36]	; 0x24
   unsigned long timeChange = (now - lastTime);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	623b      	str	r3, [r7, #32]
   if(timeChange>=SampleTime)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f90:	6a3a      	ldr	r2, [r7, #32]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	f0c0 80d2 	bcc.w	800613c <_ZN3PID7ComputeEv+0x1dc>
   {
      /*Compute all the working error variables*/
      double input = *myInput;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa0:	e9c7 2306 	strd	r2, r3, [r7, #24]
      double error = *mySetpoint - input;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005fac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fb0:	f7fa f91a 	bl	80001e8 <__aeabi_dsub>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	e9c7 2304 	strd	r2, r3, [r7, #16]
      double dInput = (input - lastInput);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8005fc2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005fc6:	f7fa f90f 	bl	80001e8 <__aeabi_dsub>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	460b      	mov	r3, r1
 8005fce:	e9c7 2302 	strd	r2, r3, [r7, #8]
      outputSum+= (ki * error);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8005fde:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005fe2:	f7fa fab9 	bl	8000558 <__aeabi_dmul>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	460b      	mov	r3, r1
 8005fea:	4620      	mov	r0, r4
 8005fec:	4629      	mov	r1, r5
 8005fee:	f7fa f8fd 	bl	80001ec <__adddf3>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	6879      	ldr	r1, [r7, #4]
 8005ff8:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

      /*Add Proportional on Measurement, if P_ON_M is specified*/
      if(!pOnE) outputSum-= kp * dInput;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8006002:	f083 0301 	eor.w	r3, r3, #1
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b00      	cmp	r3, #0
 800600a:	d014      	beq.n	8006036 <_ZN3PID7ComputeEv+0xd6>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8006018:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800601c:	f7fa fa9c 	bl	8000558 <__aeabi_dmul>
 8006020:	4602      	mov	r2, r0
 8006022:	460b      	mov	r3, r1
 8006024:	4620      	mov	r0, r4
 8006026:	4629      	mov	r1, r5
 8006028:	f7fa f8de 	bl	80001e8 <__aeabi_dsub>
 800602c:	4602      	mov	r2, r0
 800602e:	460b      	mov	r3, r1
 8006030:	6879      	ldr	r1, [r7, #4]
 8006032:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

      if(outputSum > outMax) outputSum= outMax;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8006042:	f7fa fd19 	bl	8000a78 <__aeabi_dcmpgt>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d006      	beq.n	800605a <_ZN3PID7ComputeEv+0xfa>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8006052:	6879      	ldr	r1, [r7, #4]
 8006054:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8006058:	e010      	b.n	800607c <_ZN3PID7ComputeEv+0x11c>
      else if(outputSum < outMin) outputSum= outMin;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8006066:	f7fa fce9 	bl	8000a3c <__aeabi_dcmplt>
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d005      	beq.n	800607c <_ZN3PID7ComputeEv+0x11c>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8006076:	6879      	ldr	r1, [r7, #4]
 8006078:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

      /*Add Proportional on Error, if P_ON_E is specified*/
	   double output;
      if(pOnE) output = kp * error;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00b      	beq.n	800609e <_ZN3PID7ComputeEv+0x13e>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800608c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006090:	f7fa fa62 	bl	8000558 <__aeabi_dmul>
 8006094:	4602      	mov	r2, r0
 8006096:	460b      	mov	r3, r1
 8006098:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800609c:	e005      	b.n	80060aa <_ZN3PID7ComputeEv+0x14a>
      else output = 0;
 800609e:	f04f 0200 	mov.w	r2, #0
 80060a2:	f04f 0300 	mov.w	r3, #0
 80060a6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

      /*Compute Rest of PID Output*/
      output += outputSum - kd * dInput;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80060b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060ba:	f7fa fa4d 	bl	8000558 <__aeabi_dmul>
 80060be:	4602      	mov	r2, r0
 80060c0:	460b      	mov	r3, r1
 80060c2:	4620      	mov	r0, r4
 80060c4:	4629      	mov	r1, r5
 80060c6:	f7fa f88f 	bl	80001e8 <__aeabi_dsub>
 80060ca:	4602      	mov	r2, r0
 80060cc:	460b      	mov	r3, r1
 80060ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80060d2:	f7fa f88b 	bl	80001ec <__adddf3>
 80060d6:	4602      	mov	r2, r0
 80060d8:	460b      	mov	r3, r1
 80060da:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	    if(output > outMax) output = outMax;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80060e4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80060e8:	f7fa fcc6 	bl	8000a78 <__aeabi_dcmpgt>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d005      	beq.n	80060fe <_ZN3PID7ComputeEv+0x19e>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80060f8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80060fc:	e00e      	b.n	800611c <_ZN3PID7ComputeEv+0x1bc>
      else if(output < outMin) output = outMin;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8006104:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006108:	f7fa fc98 	bl	8000a3c <__aeabi_dcmplt>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d004      	beq.n	800611c <_ZN3PID7ComputeEv+0x1bc>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8006118:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	    *myOutput = output;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006120:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006124:	e9c1 2300 	strd	r2, r3, [r1]

      /*Remember some variables for next time*/
      lastInput = input;
 8006128:	6879      	ldr	r1, [r7, #4]
 800612a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800612e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
      lastTime = now;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006136:	645a      	str	r2, [r3, #68]	; 0x44
	    return true;
 8006138:	2301      	movs	r3, #1
 800613a:	e000      	b.n	800613e <_ZN3PID7ComputeEv+0x1de>
   }
   else return false;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3730      	adds	r7, #48	; 0x30
 8006142:	46bd      	mov	sp, r7
 8006144:	bdb0      	pop	{r4, r5, r7, pc}
 8006146:	bf00      	nop
 8006148:	20000470 	.word	0x20000470

0800614c <_ZN3PID10SetTuningsEdddi>:
 * This function allows the controller's dynamic performance to be adjusted.
 * it's called automatically from the constructor, but tunings can also
 * be adjusted on the fly during normal operation
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b08a      	sub	sp, #40	; 0x28
 8006150:	af00      	add	r7, sp, #0
 8006152:	61f8      	str	r0, [r7, #28]
 8006154:	ed87 0b04 	vstr	d0, [r7, #16]
 8006158:	ed87 1b02 	vstr	d1, [r7, #8]
 800615c:	ed87 2b00 	vstr	d2, [r7]
 8006160:	61b9      	str	r1, [r7, #24]
   if (Kp<0 || Ki<0 || Kd<0) return;
 8006162:	f04f 0200 	mov.w	r2, #0
 8006166:	f04f 0300 	mov.w	r3, #0
 800616a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800616e:	f7fa fc65 	bl	8000a3c <__aeabi_dcmplt>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	f040 8089 	bne.w	800628c <_ZN3PID10SetTuningsEdddi+0x140>
 800617a:	f04f 0200 	mov.w	r2, #0
 800617e:	f04f 0300 	mov.w	r3, #0
 8006182:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006186:	f7fa fc59 	bl	8000a3c <__aeabi_dcmplt>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d17d      	bne.n	800628c <_ZN3PID10SetTuningsEdddi+0x140>
 8006190:	f04f 0200 	mov.w	r2, #0
 8006194:	f04f 0300 	mov.w	r3, #0
 8006198:	e9d7 0100 	ldrd	r0, r1, [r7]
 800619c:	f7fa fc4e 	bl	8000a3c <__aeabi_dcmplt>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d172      	bne.n	800628c <_ZN3PID10SetTuningsEdddi+0x140>

   pOn = POn;
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	69ba      	ldr	r2, [r7, #24]
 80061aa:	635a      	str	r2, [r3, #52]	; 0x34
   pOnE = POn == P_ON_E;
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	bf0c      	ite	eq
 80061b2:	2301      	moveq	r3, #1
 80061b4:	2300      	movne	r3, #0
 80061b6:	b2da      	uxtb	r2, r3
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

   dispKp = Kp; dispKi = Ki; dispKd = Kd;
 80061be:	69f9      	ldr	r1, [r7, #28]
 80061c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80061c4:	e9c1 2300 	strd	r2, r3, [r1]
 80061c8:	69f9      	ldr	r1, [r7, #28]
 80061ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061ce:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80061d2:	69f9      	ldr	r1, [r7, #28]
 80061d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061d8:	e9c1 2304 	strd	r2, r3, [r1, #16]

   double SampleTimeInSec = ((double)SampleTime)/1000;
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061e0:	4618      	mov	r0, r3
 80061e2:	f7fa f93f 	bl	8000464 <__aeabi_ui2d>
 80061e6:	f04f 0200 	mov.w	r2, #0
 80061ea:	4b2a      	ldr	r3, [pc, #168]	; (8006294 <_ZN3PID10SetTuningsEdddi+0x148>)
 80061ec:	f7fa fade 	bl	80007ac <__aeabi_ddiv>
 80061f0:	4602      	mov	r2, r0
 80061f2:	460b      	mov	r3, r1
 80061f4:	e9c7 2308 	strd	r2, r3, [r7, #32]
   kp = Kp;
 80061f8:	69f9      	ldr	r1, [r7, #28]
 80061fa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80061fe:	e9c1 2306 	strd	r2, r3, [r1, #24]
   ki = Ki * SampleTimeInSec;
 8006202:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006206:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800620a:	f7fa f9a5 	bl	8000558 <__aeabi_dmul>
 800620e:	4602      	mov	r2, r0
 8006210:	460b      	mov	r3, r1
 8006212:	69f9      	ldr	r1, [r7, #28]
 8006214:	e9c1 2308 	strd	r2, r3, [r1, #32]
   kd = Kd / SampleTimeInSec;
 8006218:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800621c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006220:	f7fa fac4 	bl	80007ac <__aeabi_ddiv>
 8006224:	4602      	mov	r2, r0
 8006226:	460b      	mov	r3, r1
 8006228:	69f9      	ldr	r1, [r7, #28]
 800622a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

  if(controllerDirection ==REVERSE)
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006232:	2b01      	cmp	r3, #1
 8006234:	d12b      	bne.n	800628e <_ZN3PID10SetTuningsEdddi+0x142>
   {
      kp = (0 - kp);
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800623c:	f04f 0000 	mov.w	r0, #0
 8006240:	f04f 0100 	mov.w	r1, #0
 8006244:	f7f9 ffd0 	bl	80001e8 <__aeabi_dsub>
 8006248:	4602      	mov	r2, r0
 800624a:	460b      	mov	r3, r1
 800624c:	69f9      	ldr	r1, [r7, #28]
 800624e:	e9c1 2306 	strd	r2, r3, [r1, #24]
      ki = (0 - ki);
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006258:	f04f 0000 	mov.w	r0, #0
 800625c:	f04f 0100 	mov.w	r1, #0
 8006260:	f7f9 ffc2 	bl	80001e8 <__aeabi_dsub>
 8006264:	4602      	mov	r2, r0
 8006266:	460b      	mov	r3, r1
 8006268:	69f9      	ldr	r1, [r7, #28]
 800626a:	e9c1 2308 	strd	r2, r3, [r1, #32]
      kd = (0 - kd);
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8006274:	f04f 0000 	mov.w	r0, #0
 8006278:	f04f 0100 	mov.w	r1, #0
 800627c:	f7f9 ffb4 	bl	80001e8 <__aeabi_dsub>
 8006280:	4602      	mov	r2, r0
 8006282:	460b      	mov	r3, r1
 8006284:	69f9      	ldr	r1, [r7, #28]
 8006286:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 800628a:	e000      	b.n	800628e <_ZN3PID10SetTuningsEdddi+0x142>
   if (Kp<0 || Ki<0 || Kd<0) return;
 800628c:	bf00      	nop
   }
}
 800628e:	3728      	adds	r7, #40	; 0x28
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	408f4000 	.word	0x408f4000

08006298 <_ZN3PID13SetSampleTimeEi>:

/* SetSampleTime(...) *********************************************************
 * sets the period, in Milliseconds, at which the calculation is performed
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
 8006298:	b5b0      	push	{r4, r5, r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
   if (NewSampleTime > 0)
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	dd2e      	ble.n	8006306 <_ZN3PID13SetSampleTimeEi+0x6e>
   {
      double ratio  = (double)NewSampleTime
 80062a8:	6838      	ldr	r0, [r7, #0]
 80062aa:	f7fa f8eb 	bl	8000484 <__aeabi_i2d>
 80062ae:	4604      	mov	r4, r0
 80062b0:	460d      	mov	r5, r1
                      / (double)SampleTime;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7fa f8d4 	bl	8000464 <__aeabi_ui2d>
 80062bc:	4602      	mov	r2, r0
 80062be:	460b      	mov	r3, r1
      double ratio  = (double)NewSampleTime
 80062c0:	4620      	mov	r0, r4
 80062c2:	4629      	mov	r1, r5
 80062c4:	f7fa fa72 	bl	80007ac <__aeabi_ddiv>
 80062c8:	4602      	mov	r2, r0
 80062ca:	460b      	mov	r3, r1
 80062cc:	e9c7 2302 	strd	r2, r3, [r7, #8]
      ki *= ratio;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80062d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062da:	f7fa f93d 	bl	8000558 <__aeabi_dmul>
 80062de:	4602      	mov	r2, r0
 80062e0:	460b      	mov	r3, r1
 80062e2:	6879      	ldr	r1, [r7, #4]
 80062e4:	e9c1 2308 	strd	r2, r3, [r1, #32]
      kd /= ratio;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80062ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062f2:	f7fa fa5b 	bl	80007ac <__aeabi_ddiv>
 80062f6:	4602      	mov	r2, r0
 80062f8:	460b      	mov	r3, r1
 80062fa:	6879      	ldr	r1, [r7, #4]
 80062fc:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
      SampleTime = (unsigned long)NewSampleTime;
 8006300:	683a      	ldr	r2, [r7, #0]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	659a      	str	r2, [r3, #88]	; 0x58
   }
}
 8006306:	bf00      	nop
 8006308:	3710      	adds	r7, #16
 800630a:	46bd      	mov	sp, r7
 800630c:	bdb0      	pop	{r4, r5, r7, pc}

0800630e <_ZN3PID15SetOutputLimitsEdd>:
 *  be doing a time window and will need 0-8000 or something.  or maybe they'll
 *  want to clamp it from 0-125.  who knows.  at any rate, that can all be done
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b086      	sub	sp, #24
 8006312:	af00      	add	r7, sp, #0
 8006314:	6178      	str	r0, [r7, #20]
 8006316:	ed87 0b02 	vstr	d0, [r7, #8]
 800631a:	ed87 1b00 	vstr	d1, [r7]
   if(Min >= Max) return;
 800631e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006322:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006326:	f7fa fb9d 	bl	8000a64 <__aeabi_dcmpge>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d159      	bne.n	80063e4 <_ZN3PID15SetOutputLimitsEdd+0xd6>
   outMin = Min;
 8006330:	6979      	ldr	r1, [r7, #20]
 8006332:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006336:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
   outMax = Max;
 800633a:	6979      	ldr	r1, [r7, #20]
 800633c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006340:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

   if(inAuto)
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800634a:	2b00      	cmp	r3, #0
 800634c:	d04b      	beq.n	80063e6 <_ZN3PID15SetOutputLimitsEdd+0xd8>
   {
	   if(*myOutput > outMax) *myOutput = outMax;
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006352:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800635c:	f7fa fb8c 	bl	8000a78 <__aeabi_dcmpgt>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d007      	beq.n	8006376 <_ZN3PID15SetOutputLimitsEdd+0x68>
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8006370:	e9c1 2300 	strd	r2, r3, [r1]
 8006374:	e012      	b.n	800639c <_ZN3PID15SetOutputLimitsEdd+0x8e>
	   else if(*myOutput < outMin) *myOutput = outMin;
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800637a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8006384:	f7fa fb5a 	bl	8000a3c <__aeabi_dcmplt>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d006      	beq.n	800639c <_ZN3PID15SetOutputLimitsEdd+0x8e>
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8006398:	e9c1 2300 	strd	r2, r3, [r1]

	   if(outputSum > outMax) outputSum= outMax;
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80063a8:	f7fa fb66 	bl	8000a78 <__aeabi_dcmpgt>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d006      	beq.n	80063c0 <_ZN3PID15SetOutputLimitsEdd+0xb2>
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80063b8:	6979      	ldr	r1, [r7, #20]
 80063ba:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 80063be:	e012      	b.n	80063e6 <_ZN3PID15SetOutputLimitsEdd+0xd8>
	   else if(outputSum < outMin) outputSum= outMin;
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80063cc:	f7fa fb36 	bl	8000a3c <__aeabi_dcmplt>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d007      	beq.n	80063e6 <_ZN3PID15SetOutputLimitsEdd+0xd8>
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80063dc:	6979      	ldr	r1, [r7, #20]
 80063de:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 80063e2:	e000      	b.n	80063e6 <_ZN3PID15SetOutputLimitsEdd+0xd8>
   if(Min >= Max) return;
 80063e4:	bf00      	nop
   }
}
 80063e6:	3718      	adds	r7, #24
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <_ZN3PID7SetModeEi>:
 * Allows the controller Mode to be set to manual (0) or Automatic (non-zero)
 * when the transition from manual to auto occurs, the controller is
 * automatically initialized
 ******************************************************************************/
void PID::SetMode(int Mode)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
    bool newAuto = (Mode == AUTOMATIC);
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	bf0c      	ite	eq
 80063fc:	2301      	moveq	r3, #1
 80063fe:	2300      	movne	r3, #0
 8006400:	73fb      	strb	r3, [r7, #15]
    if(newAuto && !inAuto)
 8006402:	7bfb      	ldrb	r3, [r7, #15]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00a      	beq.n	800641e <_ZN3PID7SetModeEi+0x32>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800640e:	f083 0301 	eor.w	r3, r3, #1
 8006412:	b2db      	uxtb	r3, r3
 8006414:	2b00      	cmp	r3, #0
 8006416:	d002      	beq.n	800641e <_ZN3PID7SetModeEi+0x32>
    {  /*we just went from manual to auto*/
        PID::Initialize();
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 f808 	bl	800642e <_ZN3PID10InitializeEv>
    }
    inAuto = newAuto;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	7bfa      	ldrb	r2, [r7, #15]
 8006422:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
}
 8006426:	bf00      	nop
 8006428:	3710      	adds	r7, #16
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <_ZN3PID10InitializeEv>:
/* Initialize()****************************************************************
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/
void PID::Initialize()
{
 800642e:	b580      	push	{r7, lr}
 8006430:	b082      	sub	sp, #8
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
   outputSum = *myOutput;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800643a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643e:	6879      	ldr	r1, [r7, #4]
 8006440:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
   lastInput = *myInput;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644c:	6879      	ldr	r1, [r7, #4]
 800644e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
   if(outputSum > outMax) outputSum = outMax;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800645e:	f7fa fb0b 	bl	8000a78 <__aeabi_dcmpgt>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d006      	beq.n	8006476 <_ZN3PID10InitializeEv+0x48>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800646e:	6879      	ldr	r1, [r7, #4]
 8006470:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
   else if(outputSum < outMin) outputSum = outMin;
}
 8006474:	e011      	b.n	800649a <_ZN3PID10InitializeEv+0x6c>
   else if(outputSum < outMin) outputSum = outMin;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8006482:	f7fa fadb 	bl	8000a3c <__aeabi_dcmplt>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d100      	bne.n	800648e <_ZN3PID10InitializeEv+0x60>
}
 800648c:	e005      	b.n	800649a <_ZN3PID10InitializeEv+0x6c>
   else if(outputSum < outMin) outputSum = outMin;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8006494:	6879      	ldr	r1, [r7, #4]
 8006496:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 800649a:	bf00      	nop
 800649c:	3708      	adds	r7, #8
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <_ZN3PID22SetControllerDirectionEi>:
 * to +Input) or a REVERSE acting process(+Output leads to -Input.)  we need to
 * know which one, because otherwise we may increase the output when we should
 * be decreasing.  This is called from the constructor.
 ******************************************************************************/
void PID::SetControllerDirection(int Direction)
{
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b082      	sub	sp, #8
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
 80064aa:	6039      	str	r1, [r7, #0]
   if(inAuto && Direction !=controllerDirection)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d02e      	beq.n	8006514 <_ZN3PID22SetControllerDirectionEi+0x72>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ba:	683a      	ldr	r2, [r7, #0]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d029      	beq.n	8006514 <_ZN3PID22SetControllerDirectionEi+0x72>
   {
	    kp = (0 - kp);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80064c6:	f04f 0000 	mov.w	r0, #0
 80064ca:	f04f 0100 	mov.w	r1, #0
 80064ce:	f7f9 fe8b 	bl	80001e8 <__aeabi_dsub>
 80064d2:	4602      	mov	r2, r0
 80064d4:	460b      	mov	r3, r1
 80064d6:	6879      	ldr	r1, [r7, #4]
 80064d8:	e9c1 2306 	strd	r2, r3, [r1, #24]
      ki = (0 - ki);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80064e2:	f04f 0000 	mov.w	r0, #0
 80064e6:	f04f 0100 	mov.w	r1, #0
 80064ea:	f7f9 fe7d 	bl	80001e8 <__aeabi_dsub>
 80064ee:	4602      	mov	r2, r0
 80064f0:	460b      	mov	r3, r1
 80064f2:	6879      	ldr	r1, [r7, #4]
 80064f4:	e9c1 2308 	strd	r2, r3, [r1, #32]
      kd = (0 - kd);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80064fe:	f04f 0000 	mov.w	r0, #0
 8006502:	f04f 0100 	mov.w	r1, #0
 8006506:	f7f9 fe6f 	bl	80001e8 <__aeabi_dsub>
 800650a:	4602      	mov	r2, r0
 800650c:	460b      	mov	r3, r1
 800650e:	6879      	ldr	r1, [r7, #4]
 8006510:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
   }
   controllerDirection = Direction;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	683a      	ldr	r2, [r7, #0]
 8006518:	631a      	str	r2, [r3, #48]	; 0x30
}
 800651a:	bf00      	nop
 800651c:	3708      	adds	r7, #8
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
	...

08006524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800652a:	2300      	movs	r3, #0
 800652c:	607b      	str	r3, [r7, #4]
 800652e:	4b12      	ldr	r3, [pc, #72]	; (8006578 <HAL_MspInit+0x54>)
 8006530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006532:	4a11      	ldr	r2, [pc, #68]	; (8006578 <HAL_MspInit+0x54>)
 8006534:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006538:	6453      	str	r3, [r2, #68]	; 0x44
 800653a:	4b0f      	ldr	r3, [pc, #60]	; (8006578 <HAL_MspInit+0x54>)
 800653c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800653e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006542:	607b      	str	r3, [r7, #4]
 8006544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006546:	2300      	movs	r3, #0
 8006548:	603b      	str	r3, [r7, #0]
 800654a:	4b0b      	ldr	r3, [pc, #44]	; (8006578 <HAL_MspInit+0x54>)
 800654c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654e:	4a0a      	ldr	r2, [pc, #40]	; (8006578 <HAL_MspInit+0x54>)
 8006550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006554:	6413      	str	r3, [r2, #64]	; 0x40
 8006556:	4b08      	ldr	r3, [pc, #32]	; (8006578 <HAL_MspInit+0x54>)
 8006558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800655e:	603b      	str	r3, [r7, #0]
 8006560:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006562:	2200      	movs	r2, #0
 8006564:	210f      	movs	r1, #15
 8006566:	f06f 0001 	mvn.w	r0, #1
 800656a:	f001 faf5 	bl	8007b58 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800656e:	bf00      	nop
 8006570:	3708      	adds	r7, #8
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	40023800 	.word	0x40023800

0800657c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b08e      	sub	sp, #56	; 0x38
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8006584:	2300      	movs	r3, #0
 8006586:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8006588:	2300      	movs	r3, #0
 800658a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800658c:	2300      	movs	r3, #0
 800658e:	60fb      	str	r3, [r7, #12]
 8006590:	4b33      	ldr	r3, [pc, #204]	; (8006660 <HAL_InitTick+0xe4>)
 8006592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006594:	4a32      	ldr	r2, [pc, #200]	; (8006660 <HAL_InitTick+0xe4>)
 8006596:	f043 0310 	orr.w	r3, r3, #16
 800659a:	6413      	str	r3, [r2, #64]	; 0x40
 800659c:	4b30      	ldr	r3, [pc, #192]	; (8006660 <HAL_InitTick+0xe4>)
 800659e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a0:	f003 0310 	and.w	r3, r3, #16
 80065a4:	60fb      	str	r3, [r7, #12]
 80065a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80065a8:	f107 0210 	add.w	r2, r7, #16
 80065ac:	f107 0314 	add.w	r3, r7, #20
 80065b0:	4611      	mov	r1, r2
 80065b2:	4618      	mov	r0, r3
 80065b4:	f002 fd4a 	bl	800904c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80065b8:	6a3b      	ldr	r3, [r7, #32]
 80065ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80065bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d103      	bne.n	80065ca <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80065c2:	f002 fd1b 	bl	8008ffc <HAL_RCC_GetPCLK1Freq>
 80065c6:	6378      	str	r0, [r7, #52]	; 0x34
 80065c8:	e004      	b.n	80065d4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80065ca:	f002 fd17 	bl	8008ffc <HAL_RCC_GetPCLK1Freq>
 80065ce:	4603      	mov	r3, r0
 80065d0:	005b      	lsls	r3, r3, #1
 80065d2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80065d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065d6:	4a23      	ldr	r2, [pc, #140]	; (8006664 <HAL_InitTick+0xe8>)
 80065d8:	fba2 2303 	umull	r2, r3, r2, r3
 80065dc:	0c9b      	lsrs	r3, r3, #18
 80065de:	3b01      	subs	r3, #1
 80065e0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80065e2:	4b21      	ldr	r3, [pc, #132]	; (8006668 <HAL_InitTick+0xec>)
 80065e4:	4a21      	ldr	r2, [pc, #132]	; (800666c <HAL_InitTick+0xf0>)
 80065e6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80065e8:	4b1f      	ldr	r3, [pc, #124]	; (8006668 <HAL_InitTick+0xec>)
 80065ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80065ee:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80065f0:	4a1d      	ldr	r2, [pc, #116]	; (8006668 <HAL_InitTick+0xec>)
 80065f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80065f6:	4b1c      	ldr	r3, [pc, #112]	; (8006668 <HAL_InitTick+0xec>)
 80065f8:	2200      	movs	r2, #0
 80065fa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80065fc:	4b1a      	ldr	r3, [pc, #104]	; (8006668 <HAL_InitTick+0xec>)
 80065fe:	2200      	movs	r2, #0
 8006600:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006602:	4b19      	ldr	r3, [pc, #100]	; (8006668 <HAL_InitTick+0xec>)
 8006604:	2200      	movs	r2, #0
 8006606:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8006608:	4817      	ldr	r0, [pc, #92]	; (8006668 <HAL_InitTick+0xec>)
 800660a:	f002 fd51 	bl	80090b0 <HAL_TIM_Base_Init>
 800660e:	4603      	mov	r3, r0
 8006610:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8006614:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006618:	2b00      	cmp	r3, #0
 800661a:	d11b      	bne.n	8006654 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800661c:	4812      	ldr	r0, [pc, #72]	; (8006668 <HAL_InitTick+0xec>)
 800661e:	f002 fd97 	bl	8009150 <HAL_TIM_Base_Start_IT>
 8006622:	4603      	mov	r3, r0
 8006624:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8006628:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800662c:	2b00      	cmp	r3, #0
 800662e:	d111      	bne.n	8006654 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006630:	2036      	movs	r0, #54	; 0x36
 8006632:	f001 faad 	bl	8007b90 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2b0f      	cmp	r3, #15
 800663a:	d808      	bhi.n	800664e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800663c:	2200      	movs	r2, #0
 800663e:	6879      	ldr	r1, [r7, #4]
 8006640:	2036      	movs	r0, #54	; 0x36
 8006642:	f001 fa89 	bl	8007b58 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006646:	4a0a      	ldr	r2, [pc, #40]	; (8006670 <HAL_InitTick+0xf4>)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6013      	str	r3, [r2, #0]
 800664c:	e002      	b.n	8006654 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8006654:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8006658:	4618      	mov	r0, r3
 800665a:	3738      	adds	r7, #56	; 0x38
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	40023800 	.word	0x40023800
 8006664:	431bde83 	.word	0x431bde83
 8006668:	200029a4 	.word	0x200029a4
 800666c:	40001000 	.word	0x40001000
 8006670:	20000030 	.word	0x20000030

08006674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006674:	b480      	push	{r7}
 8006676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006678:	e7fe      	b.n	8006678 <NMI_Handler+0x4>

0800667a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800667a:	b480      	push	{r7}
 800667c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800667e:	e7fe      	b.n	800667e <HardFault_Handler+0x4>

08006680 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006680:	b480      	push	{r7}
 8006682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006684:	e7fe      	b.n	8006684 <MemManage_Handler+0x4>

08006686 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006686:	b480      	push	{r7}
 8006688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800668a:	e7fe      	b.n	800668a <BusFault_Handler+0x4>

0800668c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800668c:	b480      	push	{r7}
 800668e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006690:	e7fe      	b.n	8006690 <UsageFault_Handler+0x4>

08006692 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006692:	b480      	push	{r7}
 8006694:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006696:	bf00      	nop
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80066a4:	4802      	ldr	r0, [pc, #8]	; (80066b0 <DMA1_Stream0_IRQHandler+0x10>)
 80066a6:	f001 fc19 	bl	8007edc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80066aa:	bf00      	nop
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	20002e2c 	.word	0x20002e2c

080066b4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80066b8:	4802      	ldr	r0, [pc, #8]	; (80066c4 <DMA1_Stream2_IRQHandler+0x10>)
 80066ba:	f001 fc0f 	bl	8007edc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80066be:	bf00      	nop
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	20002dcc 	.word	0x20002dcc

080066c8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80066cc:	4802      	ldr	r0, [pc, #8]	; (80066d8 <DMA1_Stream5_IRQHandler+0x10>)
 80066ce:	f001 fc05 	bl	8007edc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80066d2:	bf00      	nop
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	20002eec 	.word	0x20002eec

080066dc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80066e0:	4802      	ldr	r0, [pc, #8]	; (80066ec <TIM1_CC_IRQHandler+0x10>)
 80066e2:	f003 f81b 	bl	800971c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80066e6:	bf00      	nop
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	200029f0 	.word	0x200029f0

080066f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80066f4:	4802      	ldr	r0, [pc, #8]	; (8006700 <TIM2_IRQHandler+0x10>)
 80066f6:	f003 f811 	bl	800971c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80066fa:	bf00      	nop
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	20002a38 	.word	0x20002a38

08006704 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006708:	4802      	ldr	r0, [pc, #8]	; (8006714 <TIM3_IRQHandler+0x10>)
 800670a:	f003 f807 	bl	800971c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800670e:	bf00      	nop
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	20002a80 	.word	0x20002a80

08006718 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800671c:	4802      	ldr	r0, [pc, #8]	; (8006728 <TIM4_IRQHandler+0x10>)
 800671e:	f002 fffd 	bl	800971c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8006722:	bf00      	nop
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop
 8006728:	20002ac8 	.word	0x20002ac8

0800672c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006730:	4802      	ldr	r0, [pc, #8]	; (800673c <USART1_IRQHandler+0x10>)
 8006732:	f003 ff3f 	bl	800a5b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006736:	bf00      	nop
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	20002d00 	.word	0x20002d00

08006740 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006744:	4802      	ldr	r0, [pc, #8]	; (8006750 <USART2_IRQHandler+0x10>)
 8006746:	f003 ff35 	bl	800a5b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800674a:	bf00      	nop
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	20002d44 	.word	0x20002d44

08006754 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8006758:	4802      	ldr	r0, [pc, #8]	; (8006764 <TIM8_CC_IRQHandler+0x10>)
 800675a:	f002 ffdf 	bl	800971c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800675e:	bf00      	nop
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	20002b58 	.word	0x20002b58

08006768 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 800676c:	4802      	ldr	r0, [pc, #8]	; (8006778 <DMA1_Stream7_IRQHandler+0x10>)
 800676e:	f001 fbb5 	bl	8007edc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8006772:	bf00      	nop
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	20002e8c 	.word	0x20002e8c

0800677c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8006780:	4802      	ldr	r0, [pc, #8]	; (800678c <UART4_IRQHandler+0x10>)
 8006782:	f003 ff17 	bl	800a5b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8006786:	bf00      	nop
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	20002c78 	.word	0x20002c78

08006790 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8006794:	4802      	ldr	r0, [pc, #8]	; (80067a0 <UART5_IRQHandler+0x10>)
 8006796:	f003 ff0d 	bl	800a5b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800679a:	bf00      	nop
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop
 80067a0:	20002cbc 	.word	0x20002cbc

080067a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80067a8:	4802      	ldr	r0, [pc, #8]	; (80067b4 <TIM6_DAC_IRQHandler+0x10>)
 80067aa:	f002 ffb7 	bl	800971c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80067ae:	bf00      	nop
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	200029a4 	.word	0x200029a4

080067b8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80067bc:	4802      	ldr	r0, [pc, #8]	; (80067c8 <TIM7_IRQHandler+0x10>)
 80067be:	f002 ffad 	bl	800971c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80067c2:	bf00      	nop
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	20002b10 	.word	0x20002b10

080067cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80067cc:	b480      	push	{r7}
 80067ce:	af00      	add	r7, sp, #0
  return 1;
 80067d0:	2301      	movs	r3, #1
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <_kill>:

int _kill(int pid, int sig)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80067e6:	f008 f8a1 	bl	800e92c <__errno>
 80067ea:	4603      	mov	r3, r0
 80067ec:	2216      	movs	r2, #22
 80067ee:	601a      	str	r2, [r3, #0]
  return -1;
 80067f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3708      	adds	r7, #8
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <_exit>:

void _exit (int status)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006804:	f04f 31ff 	mov.w	r1, #4294967295
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f7ff ffe7 	bl	80067dc <_kill>
  while (1) {}    /* Make sure we hang here */
 800680e:	e7fe      	b.n	800680e <_exit+0x12>

08006810 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b086      	sub	sp, #24
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006818:	4a14      	ldr	r2, [pc, #80]	; (800686c <_sbrk+0x5c>)
 800681a:	4b15      	ldr	r3, [pc, #84]	; (8006870 <_sbrk+0x60>)
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006824:	4b13      	ldr	r3, [pc, #76]	; (8006874 <_sbrk+0x64>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d102      	bne.n	8006832 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800682c:	4b11      	ldr	r3, [pc, #68]	; (8006874 <_sbrk+0x64>)
 800682e:	4a12      	ldr	r2, [pc, #72]	; (8006878 <_sbrk+0x68>)
 8006830:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006832:	4b10      	ldr	r3, [pc, #64]	; (8006874 <_sbrk+0x64>)
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4413      	add	r3, r2
 800683a:	693a      	ldr	r2, [r7, #16]
 800683c:	429a      	cmp	r2, r3
 800683e:	d207      	bcs.n	8006850 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006840:	f008 f874 	bl	800e92c <__errno>
 8006844:	4603      	mov	r3, r0
 8006846:	220c      	movs	r2, #12
 8006848:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800684a:	f04f 33ff 	mov.w	r3, #4294967295
 800684e:	e009      	b.n	8006864 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006850:	4b08      	ldr	r3, [pc, #32]	; (8006874 <_sbrk+0x64>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006856:	4b07      	ldr	r3, [pc, #28]	; (8006874 <_sbrk+0x64>)
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4413      	add	r3, r2
 800685e:	4a05      	ldr	r2, [pc, #20]	; (8006874 <_sbrk+0x64>)
 8006860:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006862:	68fb      	ldr	r3, [r7, #12]
}
 8006864:	4618      	mov	r0, r3
 8006866:	3718      	adds	r7, #24
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}
 800686c:	20020000 	.word	0x20020000
 8006870:	00000400 	.word	0x00000400
 8006874:	200029ec 	.word	0x200029ec
 8006878:	20006cb8 	.word	0x20006cb8

0800687c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800687c:	b480      	push	{r7}
 800687e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006880:	4b06      	ldr	r3, [pc, #24]	; (800689c <SystemInit+0x20>)
 8006882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006886:	4a05      	ldr	r2, [pc, #20]	; (800689c <SystemInit+0x20>)
 8006888:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800688c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006890:	bf00      	nop
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop
 800689c:	e000ed00 	.word	0xe000ed00

080068a0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim12;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b08c      	sub	sp, #48	; 0x30
 80068a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80068a6:	f107 030c 	add.w	r3, r7, #12
 80068aa:	2224      	movs	r2, #36	; 0x24
 80068ac:	2100      	movs	r1, #0
 80068ae:	4618      	mov	r0, r3
 80068b0:	f008 f876 	bl	800e9a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80068b4:	1d3b      	adds	r3, r7, #4
 80068b6:	2200      	movs	r2, #0
 80068b8:	601a      	str	r2, [r3, #0]
 80068ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80068bc:	4b22      	ldr	r3, [pc, #136]	; (8006948 <MX_TIM1_Init+0xa8>)
 80068be:	4a23      	ldr	r2, [pc, #140]	; (800694c <MX_TIM1_Init+0xac>)
 80068c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80068c2:	4b21      	ldr	r3, [pc, #132]	; (8006948 <MX_TIM1_Init+0xa8>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80068c8:	4b1f      	ldr	r3, [pc, #124]	; (8006948 <MX_TIM1_Init+0xa8>)
 80068ca:	2200      	movs	r2, #0
 80068cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80068ce:	4b1e      	ldr	r3, [pc, #120]	; (8006948 <MX_TIM1_Init+0xa8>)
 80068d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80068d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80068d6:	4b1c      	ldr	r3, [pc, #112]	; (8006948 <MX_TIM1_Init+0xa8>)
 80068d8:	2200      	movs	r2, #0
 80068da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80068dc:	4b1a      	ldr	r3, [pc, #104]	; (8006948 <MX_TIM1_Init+0xa8>)
 80068de:	2200      	movs	r2, #0
 80068e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80068e2:	4b19      	ldr	r3, [pc, #100]	; (8006948 <MX_TIM1_Init+0xa8>)
 80068e4:	2200      	movs	r2, #0
 80068e6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80068e8:	2301      	movs	r3, #1
 80068ea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80068ec:	2300      	movs	r3, #0
 80068ee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80068f0:	2301      	movs	r3, #1
 80068f2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80068f4:	2300      	movs	r3, #0
 80068f6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80068f8:	2300      	movs	r3, #0
 80068fa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80068fc:	2300      	movs	r3, #0
 80068fe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006900:	2301      	movs	r3, #1
 8006902:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006904:	2300      	movs	r3, #0
 8006906:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006908:	2300      	movs	r3, #0
 800690a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800690c:	f107 030c 	add.w	r3, r7, #12
 8006910:	4619      	mov	r1, r3
 8006912:	480d      	ldr	r0, [pc, #52]	; (8006948 <MX_TIM1_Init+0xa8>)
 8006914:	f002 fdae 	bl	8009474 <HAL_TIM_Encoder_Init>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d001      	beq.n	8006922 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800691e:	f7fb fb17 	bl	8001f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006922:	2300      	movs	r3, #0
 8006924:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006926:	2300      	movs	r3, #0
 8006928:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800692a:	1d3b      	adds	r3, r7, #4
 800692c:	4619      	mov	r1, r3
 800692e:	4806      	ldr	r0, [pc, #24]	; (8006948 <MX_TIM1_Init+0xa8>)
 8006930:	f003 fcb4 	bl	800a29c <HAL_TIMEx_MasterConfigSynchronization>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d001      	beq.n	800693e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800693a:	f7fb fb09 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800693e:	bf00      	nop
 8006940:	3730      	adds	r7, #48	; 0x30
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	200029f0 	.word	0x200029f0
 800694c:	40010000 	.word	0x40010000

08006950 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b08c      	sub	sp, #48	; 0x30
 8006954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006956:	f107 030c 	add.w	r3, r7, #12
 800695a:	2224      	movs	r2, #36	; 0x24
 800695c:	2100      	movs	r1, #0
 800695e:	4618      	mov	r0, r3
 8006960:	f008 f81e 	bl	800e9a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006964:	1d3b      	adds	r3, r7, #4
 8006966:	2200      	movs	r2, #0
 8006968:	601a      	str	r2, [r3, #0]
 800696a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800696c:	4b21      	ldr	r3, [pc, #132]	; (80069f4 <MX_TIM2_Init+0xa4>)
 800696e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006972:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8006974:	4b1f      	ldr	r3, [pc, #124]	; (80069f4 <MX_TIM2_Init+0xa4>)
 8006976:	2200      	movs	r2, #0
 8006978:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800697a:	4b1e      	ldr	r3, [pc, #120]	; (80069f4 <MX_TIM2_Init+0xa4>)
 800697c:	2200      	movs	r2, #0
 800697e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8006980:	4b1c      	ldr	r3, [pc, #112]	; (80069f4 <MX_TIM2_Init+0xa4>)
 8006982:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006986:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006988:	4b1a      	ldr	r3, [pc, #104]	; (80069f4 <MX_TIM2_Init+0xa4>)
 800698a:	2200      	movs	r2, #0
 800698c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800698e:	4b19      	ldr	r3, [pc, #100]	; (80069f4 <MX_TIM2_Init+0xa4>)
 8006990:	2200      	movs	r2, #0
 8006992:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8006994:	2301      	movs	r3, #1
 8006996:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006998:	2300      	movs	r3, #0
 800699a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800699c:	2301      	movs	r3, #1
 800699e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80069a0:	2300      	movs	r3, #0
 80069a2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80069a4:	2300      	movs	r3, #0
 80069a6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80069a8:	2300      	movs	r3, #0
 80069aa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80069ac:	2301      	movs	r3, #1
 80069ae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80069b0:	2300      	movs	r3, #0
 80069b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80069b4:	2300      	movs	r3, #0
 80069b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80069b8:	f107 030c 	add.w	r3, r7, #12
 80069bc:	4619      	mov	r1, r3
 80069be:	480d      	ldr	r0, [pc, #52]	; (80069f4 <MX_TIM2_Init+0xa4>)
 80069c0:	f002 fd58 	bl	8009474 <HAL_TIM_Encoder_Init>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d001      	beq.n	80069ce <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80069ca:	f7fb fac1 	bl	8001f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80069ce:	2300      	movs	r3, #0
 80069d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80069d2:	2300      	movs	r3, #0
 80069d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80069d6:	1d3b      	adds	r3, r7, #4
 80069d8:	4619      	mov	r1, r3
 80069da:	4806      	ldr	r0, [pc, #24]	; (80069f4 <MX_TIM2_Init+0xa4>)
 80069dc:	f003 fc5e 	bl	800a29c <HAL_TIMEx_MasterConfigSynchronization>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d001      	beq.n	80069ea <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80069e6:	f7fb fab3 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80069ea:	bf00      	nop
 80069ec:	3730      	adds	r7, #48	; 0x30
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	20002a38 	.word	0x20002a38

080069f8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b08c      	sub	sp, #48	; 0x30
 80069fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80069fe:	f107 030c 	add.w	r3, r7, #12
 8006a02:	2224      	movs	r2, #36	; 0x24
 8006a04:	2100      	movs	r1, #0
 8006a06:	4618      	mov	r0, r3
 8006a08:	f007 ffca 	bl	800e9a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006a0c:	1d3b      	adds	r3, r7, #4
 8006a0e:	2200      	movs	r2, #0
 8006a10:	601a      	str	r2, [r3, #0]
 8006a12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006a14:	4b20      	ldr	r3, [pc, #128]	; (8006a98 <MX_TIM3_Init+0xa0>)
 8006a16:	4a21      	ldr	r2, [pc, #132]	; (8006a9c <MX_TIM3_Init+0xa4>)
 8006a18:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8006a1a:	4b1f      	ldr	r3, [pc, #124]	; (8006a98 <MX_TIM3_Init+0xa0>)
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a20:	4b1d      	ldr	r3, [pc, #116]	; (8006a98 <MX_TIM3_Init+0xa0>)
 8006a22:	2200      	movs	r2, #0
 8006a24:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8006a26:	4b1c      	ldr	r3, [pc, #112]	; (8006a98 <MX_TIM3_Init+0xa0>)
 8006a28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a2c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006a2e:	4b1a      	ldr	r3, [pc, #104]	; (8006a98 <MX_TIM3_Init+0xa0>)
 8006a30:	2200      	movs	r2, #0
 8006a32:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006a34:	4b18      	ldr	r3, [pc, #96]	; (8006a98 <MX_TIM3_Init+0xa0>)
 8006a36:	2200      	movs	r2, #0
 8006a38:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006a42:	2301      	movs	r3, #1
 8006a44:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006a46:	2300      	movs	r3, #0
 8006a48:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006a52:	2301      	movs	r3, #1
 8006a54:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006a56:	2300      	movs	r3, #0
 8006a58:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8006a5e:	f107 030c 	add.w	r3, r7, #12
 8006a62:	4619      	mov	r1, r3
 8006a64:	480c      	ldr	r0, [pc, #48]	; (8006a98 <MX_TIM3_Init+0xa0>)
 8006a66:	f002 fd05 	bl	8009474 <HAL_TIM_Encoder_Init>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d001      	beq.n	8006a74 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8006a70:	f7fb fa6e 	bl	8001f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006a74:	2300      	movs	r3, #0
 8006a76:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006a7c:	1d3b      	adds	r3, r7, #4
 8006a7e:	4619      	mov	r1, r3
 8006a80:	4805      	ldr	r0, [pc, #20]	; (8006a98 <MX_TIM3_Init+0xa0>)
 8006a82:	f003 fc0b 	bl	800a29c <HAL_TIMEx_MasterConfigSynchronization>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d001      	beq.n	8006a90 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8006a8c:	f7fb fa60 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8006a90:	bf00      	nop
 8006a92:	3730      	adds	r7, #48	; 0x30
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	20002a80 	.word	0x20002a80
 8006a9c:	40000400 	.word	0x40000400

08006aa0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b08c      	sub	sp, #48	; 0x30
 8006aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006aa6:	f107 030c 	add.w	r3, r7, #12
 8006aaa:	2224      	movs	r2, #36	; 0x24
 8006aac:	2100      	movs	r1, #0
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f007 ff76 	bl	800e9a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006ab4:	1d3b      	adds	r3, r7, #4
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	601a      	str	r2, [r3, #0]
 8006aba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8006abc:	4b20      	ldr	r3, [pc, #128]	; (8006b40 <MX_TIM4_Init+0xa0>)
 8006abe:	4a21      	ldr	r2, [pc, #132]	; (8006b44 <MX_TIM4_Init+0xa4>)
 8006ac0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8006ac2:	4b1f      	ldr	r3, [pc, #124]	; (8006b40 <MX_TIM4_Init+0xa0>)
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006ac8:	4b1d      	ldr	r3, [pc, #116]	; (8006b40 <MX_TIM4_Init+0xa0>)
 8006aca:	2200      	movs	r2, #0
 8006acc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8006ace:	4b1c      	ldr	r3, [pc, #112]	; (8006b40 <MX_TIM4_Init+0xa0>)
 8006ad0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ad4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006ad6:	4b1a      	ldr	r3, [pc, #104]	; (8006b40 <MX_TIM4_Init+0xa0>)
 8006ad8:	2200      	movs	r2, #0
 8006ada:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006adc:	4b18      	ldr	r3, [pc, #96]	; (8006b40 <MX_TIM4_Init+0xa0>)
 8006ade:	2200      	movs	r2, #0
 8006ae0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006aea:	2301      	movs	r3, #1
 8006aec:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006aee:	2300      	movs	r3, #0
 8006af0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006af2:	2300      	movs	r3, #0
 8006af4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006af6:	2300      	movs	r3, #0
 8006af8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006afa:	2301      	movs	r3, #1
 8006afc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006afe:	2300      	movs	r3, #0
 8006b00:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006b02:	2300      	movs	r3, #0
 8006b04:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8006b06:	f107 030c 	add.w	r3, r7, #12
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	480c      	ldr	r0, [pc, #48]	; (8006b40 <MX_TIM4_Init+0xa0>)
 8006b0e:	f002 fcb1 	bl	8009474 <HAL_TIM_Encoder_Init>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d001      	beq.n	8006b1c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8006b18:	f7fb fa1a 	bl	8001f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006b20:	2300      	movs	r3, #0
 8006b22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006b24:	1d3b      	adds	r3, r7, #4
 8006b26:	4619      	mov	r1, r3
 8006b28:	4805      	ldr	r0, [pc, #20]	; (8006b40 <MX_TIM4_Init+0xa0>)
 8006b2a:	f003 fbb7 	bl	800a29c <HAL_TIMEx_MasterConfigSynchronization>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d001      	beq.n	8006b38 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8006b34:	f7fb fa0c 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8006b38:	bf00      	nop
 8006b3a:	3730      	adds	r7, #48	; 0x30
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	20002ac8 	.word	0x20002ac8
 8006b44:	40000800 	.word	0x40000800

08006b48 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006b4e:	463b      	mov	r3, r7
 8006b50:	2200      	movs	r2, #0
 8006b52:	601a      	str	r2, [r3, #0]
 8006b54:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8006b56:	4b15      	ldr	r3, [pc, #84]	; (8006bac <MX_TIM7_Init+0x64>)
 8006b58:	4a15      	ldr	r2, [pc, #84]	; (8006bb0 <MX_TIM7_Init+0x68>)
 8006b5a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 4000-1;
 8006b5c:	4b13      	ldr	r3, [pc, #76]	; (8006bac <MX_TIM7_Init+0x64>)
 8006b5e:	f640 729f 	movw	r2, #3999	; 0xf9f
 8006b62:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b64:	4b11      	ldr	r3, [pc, #68]	; (8006bac <MX_TIM7_Init+0x64>)
 8006b66:	2200      	movs	r2, #0
 8006b68:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 200-1;
 8006b6a:	4b10      	ldr	r3, [pc, #64]	; (8006bac <MX_TIM7_Init+0x64>)
 8006b6c:	22c7      	movs	r2, #199	; 0xc7
 8006b6e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006b70:	4b0e      	ldr	r3, [pc, #56]	; (8006bac <MX_TIM7_Init+0x64>)
 8006b72:	2200      	movs	r2, #0
 8006b74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8006b76:	480d      	ldr	r0, [pc, #52]	; (8006bac <MX_TIM7_Init+0x64>)
 8006b78:	f002 fa9a 	bl	80090b0 <HAL_TIM_Base_Init>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d001      	beq.n	8006b86 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8006b82:	f7fb f9e5 	bl	8001f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006b86:	2300      	movs	r3, #0
 8006b88:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006b8e:	463b      	mov	r3, r7
 8006b90:	4619      	mov	r1, r3
 8006b92:	4806      	ldr	r0, [pc, #24]	; (8006bac <MX_TIM7_Init+0x64>)
 8006b94:	f003 fb82 	bl	800a29c <HAL_TIMEx_MasterConfigSynchronization>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d001      	beq.n	8006ba2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8006b9e:	f7fb f9d7 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8006ba2:	bf00      	nop
 8006ba4:	3708      	adds	r7, #8
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	20002b10 	.word	0x20002b10
 8006bb0:	40001400 	.word	0x40001400

08006bb4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b08c      	sub	sp, #48	; 0x30
 8006bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006bba:	f107 030c 	add.w	r3, r7, #12
 8006bbe:	2224      	movs	r2, #36	; 0x24
 8006bc0:	2100      	movs	r1, #0
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f007 feec 	bl	800e9a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006bc8:	1d3b      	adds	r3, r7, #4
 8006bca:	2200      	movs	r2, #0
 8006bcc:	601a      	str	r2, [r3, #0]
 8006bce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8006bd0:	4b22      	ldr	r3, [pc, #136]	; (8006c5c <MX_TIM8_Init+0xa8>)
 8006bd2:	4a23      	ldr	r2, [pc, #140]	; (8006c60 <MX_TIM8_Init+0xac>)
 8006bd4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8006bd6:	4b21      	ldr	r3, [pc, #132]	; (8006c5c <MX_TIM8_Init+0xa8>)
 8006bd8:	2200      	movs	r2, #0
 8006bda:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006bdc:	4b1f      	ldr	r3, [pc, #124]	; (8006c5c <MX_TIM8_Init+0xa8>)
 8006bde:	2200      	movs	r2, #0
 8006be0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8006be2:	4b1e      	ldr	r3, [pc, #120]	; (8006c5c <MX_TIM8_Init+0xa8>)
 8006be4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006be8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006bea:	4b1c      	ldr	r3, [pc, #112]	; (8006c5c <MX_TIM8_Init+0xa8>)
 8006bec:	2200      	movs	r2, #0
 8006bee:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006bf0:	4b1a      	ldr	r3, [pc, #104]	; (8006c5c <MX_TIM8_Init+0xa8>)
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006bf6:	4b19      	ldr	r3, [pc, #100]	; (8006c5c <MX_TIM8_Init+0xa8>)
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006c00:	2300      	movs	r3, #0
 8006c02:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006c04:	2301      	movs	r3, #1
 8006c06:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006c10:	2300      	movs	r3, #0
 8006c12:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006c14:	2301      	movs	r3, #1
 8006c16:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8006c20:	f107 030c 	add.w	r3, r7, #12
 8006c24:	4619      	mov	r1, r3
 8006c26:	480d      	ldr	r0, [pc, #52]	; (8006c5c <MX_TIM8_Init+0xa8>)
 8006c28:	f002 fc24 	bl	8009474 <HAL_TIM_Encoder_Init>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d001      	beq.n	8006c36 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8006c32:	f7fb f98d 	bl	8001f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006c36:	2300      	movs	r3, #0
 8006c38:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8006c3e:	1d3b      	adds	r3, r7, #4
 8006c40:	4619      	mov	r1, r3
 8006c42:	4806      	ldr	r0, [pc, #24]	; (8006c5c <MX_TIM8_Init+0xa8>)
 8006c44:	f003 fb2a 	bl	800a29c <HAL_TIMEx_MasterConfigSynchronization>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d001      	beq.n	8006c52 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8006c4e:	f7fb f97f 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8006c52:	bf00      	nop
 8006c54:	3730      	adds	r7, #48	; 0x30
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	20002b58 	.word	0x20002b58
 8006c60:	40010400 	.word	0x40010400

08006c64 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b08c      	sub	sp, #48	; 0x30
 8006c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006c6a:	f107 0320 	add.w	r3, r7, #32
 8006c6e:	2200      	movs	r2, #0
 8006c70:	601a      	str	r2, [r3, #0]
 8006c72:	605a      	str	r2, [r3, #4]
 8006c74:	609a      	str	r2, [r3, #8]
 8006c76:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006c78:	1d3b      	adds	r3, r7, #4
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	601a      	str	r2, [r3, #0]
 8006c7e:	605a      	str	r2, [r3, #4]
 8006c80:	609a      	str	r2, [r3, #8]
 8006c82:	60da      	str	r2, [r3, #12]
 8006c84:	611a      	str	r2, [r3, #16]
 8006c86:	615a      	str	r2, [r3, #20]
 8006c88:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8006c8a:	4b2a      	ldr	r3, [pc, #168]	; (8006d34 <MX_TIM9_Init+0xd0>)
 8006c8c:	4a2a      	ldr	r2, [pc, #168]	; (8006d38 <MX_TIM9_Init+0xd4>)
 8006c8e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 84-1;
 8006c90:	4b28      	ldr	r3, [pc, #160]	; (8006d34 <MX_TIM9_Init+0xd0>)
 8006c92:	2253      	movs	r2, #83	; 0x53
 8006c94:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006c96:	4b27      	ldr	r3, [pc, #156]	; (8006d34 <MX_TIM9_Init+0xd0>)
 8006c98:	2200      	movs	r2, #0
 8006c9a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 200-1;
 8006c9c:	4b25      	ldr	r3, [pc, #148]	; (8006d34 <MX_TIM9_Init+0xd0>)
 8006c9e:	22c7      	movs	r2, #199	; 0xc7
 8006ca0:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006ca2:	4b24      	ldr	r3, [pc, #144]	; (8006d34 <MX_TIM9_Init+0xd0>)
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006ca8:	4b22      	ldr	r3, [pc, #136]	; (8006d34 <MX_TIM9_Init+0xd0>)
 8006caa:	2200      	movs	r2, #0
 8006cac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8006cae:	4821      	ldr	r0, [pc, #132]	; (8006d34 <MX_TIM9_Init+0xd0>)
 8006cb0:	f002 f9fe 	bl	80090b0 <HAL_TIM_Base_Init>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d001      	beq.n	8006cbe <MX_TIM9_Init+0x5a>
  {
    Error_Handler();
 8006cba:	f7fb f949 	bl	8001f50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006cbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006cc2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8006cc4:	f107 0320 	add.w	r3, r7, #32
 8006cc8:	4619      	mov	r1, r3
 8006cca:	481a      	ldr	r0, [pc, #104]	; (8006d34 <MX_TIM9_Init+0xd0>)
 8006ccc:	f002 fef0 	bl	8009ab0 <HAL_TIM_ConfigClockSource>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d001      	beq.n	8006cda <MX_TIM9_Init+0x76>
  {
    Error_Handler();
 8006cd6:	f7fb f93b 	bl	8001f50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8006cda:	4816      	ldr	r0, [pc, #88]	; (8006d34 <MX_TIM9_Init+0xd0>)
 8006cdc:	f002 faa8 	bl	8009230 <HAL_TIM_PWM_Init>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d001      	beq.n	8006cea <MX_TIM9_Init+0x86>
  {
    Error_Handler();
 8006ce6:	f7fb f933 	bl	8001f50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006cea:	2360      	movs	r3, #96	; 0x60
 8006cec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006cfa:	1d3b      	adds	r3, r7, #4
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	4619      	mov	r1, r3
 8006d00:	480c      	ldr	r0, [pc, #48]	; (8006d34 <MX_TIM9_Init+0xd0>)
 8006d02:	f002 fe13 	bl	800992c <HAL_TIM_PWM_ConfigChannel>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d001      	beq.n	8006d10 <MX_TIM9_Init+0xac>
  {
    Error_Handler();
 8006d0c:	f7fb f920 	bl	8001f50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006d10:	1d3b      	adds	r3, r7, #4
 8006d12:	2204      	movs	r2, #4
 8006d14:	4619      	mov	r1, r3
 8006d16:	4807      	ldr	r0, [pc, #28]	; (8006d34 <MX_TIM9_Init+0xd0>)
 8006d18:	f002 fe08 	bl	800992c <HAL_TIM_PWM_ConfigChannel>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d001      	beq.n	8006d26 <MX_TIM9_Init+0xc2>
  {
    Error_Handler();
 8006d22:	f7fb f915 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8006d26:	4803      	ldr	r0, [pc, #12]	; (8006d34 <MX_TIM9_Init+0xd0>)
 8006d28:	f000 fa66 	bl	80071f8 <HAL_TIM_MspPostInit>

}
 8006d2c:	bf00      	nop
 8006d2e:	3730      	adds	r7, #48	; 0x30
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	20002ba0 	.word	0x20002ba0
 8006d38:	40014000 	.word	0x40014000

08006d3c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b08c      	sub	sp, #48	; 0x30
 8006d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006d42:	f107 0320 	add.w	r3, r7, #32
 8006d46:	2200      	movs	r2, #0
 8006d48:	601a      	str	r2, [r3, #0]
 8006d4a:	605a      	str	r2, [r3, #4]
 8006d4c:	609a      	str	r2, [r3, #8]
 8006d4e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006d50:	1d3b      	adds	r3, r7, #4
 8006d52:	2200      	movs	r2, #0
 8006d54:	601a      	str	r2, [r3, #0]
 8006d56:	605a      	str	r2, [r3, #4]
 8006d58:	609a      	str	r2, [r3, #8]
 8006d5a:	60da      	str	r2, [r3, #12]
 8006d5c:	611a      	str	r2, [r3, #16]
 8006d5e:	615a      	str	r2, [r3, #20]
 8006d60:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8006d62:	4b2a      	ldr	r3, [pc, #168]	; (8006e0c <MX_TIM12_Init+0xd0>)
 8006d64:	4a2a      	ldr	r2, [pc, #168]	; (8006e10 <MX_TIM12_Init+0xd4>)
 8006d66:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 168-1;
 8006d68:	4b28      	ldr	r3, [pc, #160]	; (8006e0c <MX_TIM12_Init+0xd0>)
 8006d6a:	22a7      	movs	r2, #167	; 0xa7
 8006d6c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006d6e:	4b27      	ldr	r3, [pc, #156]	; (8006e0c <MX_TIM12_Init+0xd0>)
 8006d70:	2200      	movs	r2, #0
 8006d72:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 200-1;
 8006d74:	4b25      	ldr	r3, [pc, #148]	; (8006e0c <MX_TIM12_Init+0xd0>)
 8006d76:	22c7      	movs	r2, #199	; 0xc7
 8006d78:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006d7a:	4b24      	ldr	r3, [pc, #144]	; (8006e0c <MX_TIM12_Init+0xd0>)
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006d80:	4b22      	ldr	r3, [pc, #136]	; (8006e0c <MX_TIM12_Init+0xd0>)
 8006d82:	2200      	movs	r2, #0
 8006d84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8006d86:	4821      	ldr	r0, [pc, #132]	; (8006e0c <MX_TIM12_Init+0xd0>)
 8006d88:	f002 f992 	bl	80090b0 <HAL_TIM_Base_Init>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d001      	beq.n	8006d96 <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 8006d92:	f7fb f8dd 	bl	8001f50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006d96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d9a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8006d9c:	f107 0320 	add.w	r3, r7, #32
 8006da0:	4619      	mov	r1, r3
 8006da2:	481a      	ldr	r0, [pc, #104]	; (8006e0c <MX_TIM12_Init+0xd0>)
 8006da4:	f002 fe84 	bl	8009ab0 <HAL_TIM_ConfigClockSource>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d001      	beq.n	8006db2 <MX_TIM12_Init+0x76>
  {
    Error_Handler();
 8006dae:	f7fb f8cf 	bl	8001f50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8006db2:	4816      	ldr	r0, [pc, #88]	; (8006e0c <MX_TIM12_Init+0xd0>)
 8006db4:	f002 fa3c 	bl	8009230 <HAL_TIM_PWM_Init>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d001      	beq.n	8006dc2 <MX_TIM12_Init+0x86>
  {
    Error_Handler();
 8006dbe:	f7fb f8c7 	bl	8001f50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006dc2:	2360      	movs	r3, #96	; 0x60
 8006dc4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006dd2:	1d3b      	adds	r3, r7, #4
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	480c      	ldr	r0, [pc, #48]	; (8006e0c <MX_TIM12_Init+0xd0>)
 8006dda:	f002 fda7 	bl	800992c <HAL_TIM_PWM_ConfigChannel>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d001      	beq.n	8006de8 <MX_TIM12_Init+0xac>
  {
    Error_Handler();
 8006de4:	f7fb f8b4 	bl	8001f50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006de8:	1d3b      	adds	r3, r7, #4
 8006dea:	2204      	movs	r2, #4
 8006dec:	4619      	mov	r1, r3
 8006dee:	4807      	ldr	r0, [pc, #28]	; (8006e0c <MX_TIM12_Init+0xd0>)
 8006df0:	f002 fd9c 	bl	800992c <HAL_TIM_PWM_ConfigChannel>
 8006df4:	4603      	mov	r3, r0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d001      	beq.n	8006dfe <MX_TIM12_Init+0xc2>
  {
    Error_Handler();
 8006dfa:	f7fb f8a9 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8006dfe:	4803      	ldr	r0, [pc, #12]	; (8006e0c <MX_TIM12_Init+0xd0>)
 8006e00:	f000 f9fa 	bl	80071f8 <HAL_TIM_MspPostInit>

}
 8006e04:	bf00      	nop
 8006e06:	3730      	adds	r7, #48	; 0x30
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	20002be8 	.word	0x20002be8
 8006e10:	40001800 	.word	0x40001800

08006e14 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8006e18:	4b0d      	ldr	r3, [pc, #52]	; (8006e50 <MX_TIM13_Init+0x3c>)
 8006e1a:	4a0e      	ldr	r2, [pc, #56]	; (8006e54 <MX_TIM13_Init+0x40>)
 8006e1c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 168-1;
 8006e1e:	4b0c      	ldr	r3, [pc, #48]	; (8006e50 <MX_TIM13_Init+0x3c>)
 8006e20:	22a7      	movs	r2, #167	; 0xa7
 8006e22:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006e24:	4b0a      	ldr	r3, [pc, #40]	; (8006e50 <MX_TIM13_Init+0x3c>)
 8006e26:	2200      	movs	r2, #0
 8006e28:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 200-1;
 8006e2a:	4b09      	ldr	r3, [pc, #36]	; (8006e50 <MX_TIM13_Init+0x3c>)
 8006e2c:	22c7      	movs	r2, #199	; 0xc7
 8006e2e:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006e30:	4b07      	ldr	r3, [pc, #28]	; (8006e50 <MX_TIM13_Init+0x3c>)
 8006e32:	2200      	movs	r2, #0
 8006e34:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006e36:	4b06      	ldr	r3, [pc, #24]	; (8006e50 <MX_TIM13_Init+0x3c>)
 8006e38:	2200      	movs	r2, #0
 8006e3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8006e3c:	4804      	ldr	r0, [pc, #16]	; (8006e50 <MX_TIM13_Init+0x3c>)
 8006e3e:	f002 f937 	bl	80090b0 <HAL_TIM_Base_Init>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d001      	beq.n	8006e4c <MX_TIM13_Init+0x38>
  {
    Error_Handler();
 8006e48:	f7fb f882 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8006e4c:	bf00      	nop
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	20002c30 	.word	0x20002c30
 8006e54:	40001c00 	.word	0x40001c00

08006e58 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b092      	sub	sp, #72	; 0x48
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e60:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006e64:	2200      	movs	r2, #0
 8006e66:	601a      	str	r2, [r3, #0]
 8006e68:	605a      	str	r2, [r3, #4]
 8006e6a:	609a      	str	r2, [r3, #8]
 8006e6c:	60da      	str	r2, [r3, #12]
 8006e6e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4aa1      	ldr	r2, [pc, #644]	; (80070fc <HAL_TIM_Encoder_MspInit+0x2a4>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d135      	bne.n	8006ee6 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	633b      	str	r3, [r7, #48]	; 0x30
 8006e7e:	4ba0      	ldr	r3, [pc, #640]	; (8007100 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e82:	4a9f      	ldr	r2, [pc, #636]	; (8007100 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006e84:	f043 0301 	orr.w	r3, r3, #1
 8006e88:	6453      	str	r3, [r2, #68]	; 0x44
 8006e8a:	4b9d      	ldr	r3, [pc, #628]	; (8007100 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e8e:	f003 0301 	and.w	r3, r3, #1
 8006e92:	633b      	str	r3, [r7, #48]	; 0x30
 8006e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006e96:	2300      	movs	r3, #0
 8006e98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e9a:	4b99      	ldr	r3, [pc, #612]	; (8007100 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e9e:	4a98      	ldr	r2, [pc, #608]	; (8007100 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006ea0:	f043 0310 	orr.w	r3, r3, #16
 8006ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8006ea6:	4b96      	ldr	r3, [pc, #600]	; (8007100 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eaa:	f003 0310 	and.w	r3, r3, #16
 8006eae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8006eb2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8006eb6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006eb8:	2302      	movs	r3, #2
 8006eba:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006ec8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006ecc:	4619      	mov	r1, r3
 8006ece:	488d      	ldr	r0, [pc, #564]	; (8007104 <HAL_TIM_Encoder_MspInit+0x2ac>)
 8006ed0:	f001 fa6e 	bl	80083b0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	2105      	movs	r1, #5
 8006ed8:	201b      	movs	r0, #27
 8006eda:	f000 fe3d 	bl	8007b58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8006ede:	201b      	movs	r0, #27
 8006ee0:	f000 fe56 	bl	8007b90 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8006ee4:	e106      	b.n	80070f4 <HAL_TIM_Encoder_MspInit+0x29c>
  else if(tim_encoderHandle->Instance==TIM2)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eee:	d153      	bne.n	8006f98 <HAL_TIM_Encoder_MspInit+0x140>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ef4:	4b82      	ldr	r3, [pc, #520]	; (8007100 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef8:	4a81      	ldr	r2, [pc, #516]	; (8007100 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006efa:	f043 0301 	orr.w	r3, r3, #1
 8006efe:	6413      	str	r3, [r2, #64]	; 0x40
 8006f00:	4b7f      	ldr	r3, [pc, #508]	; (8007100 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f04:	f003 0301 	and.w	r3, r3, #1
 8006f08:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8006f10:	4b7b      	ldr	r3, [pc, #492]	; (8007100 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f14:	4a7a      	ldr	r2, [pc, #488]	; (8007100 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006f16:	f043 0301 	orr.w	r3, r3, #1
 8006f1a:	6313      	str	r3, [r2, #48]	; 0x30
 8006f1c:	4b78      	ldr	r3, [pc, #480]	; (8007100 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f20:	f003 0301 	and.w	r3, r3, #1
 8006f24:	627b      	str	r3, [r7, #36]	; 0x24
 8006f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f28:	2300      	movs	r3, #0
 8006f2a:	623b      	str	r3, [r7, #32]
 8006f2c:	4b74      	ldr	r3, [pc, #464]	; (8007100 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f30:	4a73      	ldr	r2, [pc, #460]	; (8007100 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006f32:	f043 0302 	orr.w	r3, r3, #2
 8006f36:	6313      	str	r3, [r2, #48]	; 0x30
 8006f38:	4b71      	ldr	r3, [pc, #452]	; (8007100 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f3c:	f003 0302 	and.w	r3, r3, #2
 8006f40:	623b      	str	r3, [r7, #32]
 8006f42:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006f44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f48:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f4a:	2302      	movs	r3, #2
 8006f4c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f52:	2300      	movs	r3, #0
 8006f54:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006f56:	2301      	movs	r3, #1
 8006f58:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f5a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006f5e:	4619      	mov	r1, r3
 8006f60:	4869      	ldr	r0, [pc, #420]	; (8007108 <HAL_TIM_Encoder_MspInit+0x2b0>)
 8006f62:	f001 fa25 	bl	80083b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006f66:	2308      	movs	r3, #8
 8006f68:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f6a:	2302      	movs	r3, #2
 8006f6c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f72:	2300      	movs	r3, #0
 8006f74:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006f76:	2301      	movs	r3, #1
 8006f78:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f7a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006f7e:	4619      	mov	r1, r3
 8006f80:	4862      	ldr	r0, [pc, #392]	; (800710c <HAL_TIM_Encoder_MspInit+0x2b4>)
 8006f82:	f001 fa15 	bl	80083b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8006f86:	2200      	movs	r2, #0
 8006f88:	2105      	movs	r1, #5
 8006f8a:	201c      	movs	r0, #28
 8006f8c:	f000 fde4 	bl	8007b58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006f90:	201c      	movs	r0, #28
 8006f92:	f000 fdfd 	bl	8007b90 <HAL_NVIC_EnableIRQ>
}
 8006f96:	e0ad      	b.n	80070f4 <HAL_TIM_Encoder_MspInit+0x29c>
  else if(tim_encoderHandle->Instance==TIM3)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a5c      	ldr	r2, [pc, #368]	; (8007110 <HAL_TIM_Encoder_MspInit+0x2b8>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d134      	bne.n	800700c <HAL_TIM_Encoder_MspInit+0x1b4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	61fb      	str	r3, [r7, #28]
 8006fa6:	4b56      	ldr	r3, [pc, #344]	; (8007100 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006faa:	4a55      	ldr	r2, [pc, #340]	; (8007100 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006fac:	f043 0302 	orr.w	r3, r3, #2
 8006fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8006fb2:	4b53      	ldr	r3, [pc, #332]	; (8007100 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb6:	f003 0302 	and.w	r3, r3, #2
 8006fba:	61fb      	str	r3, [r7, #28]
 8006fbc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	61bb      	str	r3, [r7, #24]
 8006fc2:	4b4f      	ldr	r3, [pc, #316]	; (8007100 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc6:	4a4e      	ldr	r2, [pc, #312]	; (8007100 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006fc8:	f043 0301 	orr.w	r3, r3, #1
 8006fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8006fce:	4b4c      	ldr	r3, [pc, #304]	; (8007100 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8006fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd2:	f003 0301 	and.w	r3, r3, #1
 8006fd6:	61bb      	str	r3, [r7, #24]
 8006fd8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006fda:	23c0      	movs	r3, #192	; 0xc0
 8006fdc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fde:	2302      	movs	r3, #2
 8006fe0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006fea:	2302      	movs	r3, #2
 8006fec:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006fee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	4844      	ldr	r0, [pc, #272]	; (8007108 <HAL_TIM_Encoder_MspInit+0x2b0>)
 8006ff6:	f001 f9db 	bl	80083b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	2105      	movs	r1, #5
 8006ffe:	201d      	movs	r0, #29
 8007000:	f000 fdaa 	bl	8007b58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007004:	201d      	movs	r0, #29
 8007006:	f000 fdc3 	bl	8007b90 <HAL_NVIC_EnableIRQ>
}
 800700a:	e073      	b.n	80070f4 <HAL_TIM_Encoder_MspInit+0x29c>
  else if(tim_encoderHandle->Instance==TIM4)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a40      	ldr	r2, [pc, #256]	; (8007114 <HAL_TIM_Encoder_MspInit+0x2bc>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d135      	bne.n	8007082 <HAL_TIM_Encoder_MspInit+0x22a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007016:	2300      	movs	r3, #0
 8007018:	617b      	str	r3, [r7, #20]
 800701a:	4b39      	ldr	r3, [pc, #228]	; (8007100 <HAL_TIM_Encoder_MspInit+0x2a8>)
 800701c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701e:	4a38      	ldr	r2, [pc, #224]	; (8007100 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8007020:	f043 0304 	orr.w	r3, r3, #4
 8007024:	6413      	str	r3, [r2, #64]	; 0x40
 8007026:	4b36      	ldr	r3, [pc, #216]	; (8007100 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8007028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702a:	f003 0304 	and.w	r3, r3, #4
 800702e:	617b      	str	r3, [r7, #20]
 8007030:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007032:	2300      	movs	r3, #0
 8007034:	613b      	str	r3, [r7, #16]
 8007036:	4b32      	ldr	r3, [pc, #200]	; (8007100 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8007038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800703a:	4a31      	ldr	r2, [pc, #196]	; (8007100 <HAL_TIM_Encoder_MspInit+0x2a8>)
 800703c:	f043 0308 	orr.w	r3, r3, #8
 8007040:	6313      	str	r3, [r2, #48]	; 0x30
 8007042:	4b2f      	ldr	r3, [pc, #188]	; (8007100 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8007044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007046:	f003 0308 	and.w	r3, r3, #8
 800704a:	613b      	str	r3, [r7, #16]
 800704c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800704e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8007052:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007054:	2302      	movs	r3, #2
 8007056:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007058:	2300      	movs	r3, #0
 800705a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800705c:	2300      	movs	r3, #0
 800705e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007060:	2302      	movs	r3, #2
 8007062:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007064:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007068:	4619      	mov	r1, r3
 800706a:	482b      	ldr	r0, [pc, #172]	; (8007118 <HAL_TIM_Encoder_MspInit+0x2c0>)
 800706c:	f001 f9a0 	bl	80083b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8007070:	2200      	movs	r2, #0
 8007072:	2105      	movs	r1, #5
 8007074:	201e      	movs	r0, #30
 8007076:	f000 fd6f 	bl	8007b58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800707a:	201e      	movs	r0, #30
 800707c:	f000 fd88 	bl	8007b90 <HAL_NVIC_EnableIRQ>
}
 8007080:	e038      	b.n	80070f4 <HAL_TIM_Encoder_MspInit+0x29c>
  else if(tim_encoderHandle->Instance==TIM8)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a25      	ldr	r2, [pc, #148]	; (800711c <HAL_TIM_Encoder_MspInit+0x2c4>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d133      	bne.n	80070f4 <HAL_TIM_Encoder_MspInit+0x29c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800708c:	2300      	movs	r3, #0
 800708e:	60fb      	str	r3, [r7, #12]
 8007090:	4b1b      	ldr	r3, [pc, #108]	; (8007100 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8007092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007094:	4a1a      	ldr	r2, [pc, #104]	; (8007100 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8007096:	f043 0302 	orr.w	r3, r3, #2
 800709a:	6453      	str	r3, [r2, #68]	; 0x44
 800709c:	4b18      	ldr	r3, [pc, #96]	; (8007100 <HAL_TIM_Encoder_MspInit+0x2a8>)
 800709e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070a0:	f003 0302 	and.w	r3, r3, #2
 80070a4:	60fb      	str	r3, [r7, #12]
 80070a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80070a8:	2300      	movs	r3, #0
 80070aa:	60bb      	str	r3, [r7, #8]
 80070ac:	4b14      	ldr	r3, [pc, #80]	; (8007100 <HAL_TIM_Encoder_MspInit+0x2a8>)
 80070ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b0:	4a13      	ldr	r2, [pc, #76]	; (8007100 <HAL_TIM_Encoder_MspInit+0x2a8>)
 80070b2:	f043 0304 	orr.w	r3, r3, #4
 80070b6:	6313      	str	r3, [r2, #48]	; 0x30
 80070b8:	4b11      	ldr	r3, [pc, #68]	; (8007100 <HAL_TIM_Encoder_MspInit+0x2a8>)
 80070ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070bc:	f003 0304 	and.w	r3, r3, #4
 80070c0:	60bb      	str	r3, [r7, #8]
 80070c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80070c4:	23c0      	movs	r3, #192	; 0xc0
 80070c6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070c8:	2302      	movs	r3, #2
 80070ca:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070cc:	2300      	movs	r3, #0
 80070ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070d0:	2300      	movs	r3, #0
 80070d2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80070d4:	2303      	movs	r3, #3
 80070d6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80070d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80070dc:	4619      	mov	r1, r3
 80070de:	4810      	ldr	r0, [pc, #64]	; (8007120 <HAL_TIM_Encoder_MspInit+0x2c8>)
 80070e0:	f001 f966 	bl	80083b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 80070e4:	2200      	movs	r2, #0
 80070e6:	2105      	movs	r1, #5
 80070e8:	202e      	movs	r0, #46	; 0x2e
 80070ea:	f000 fd35 	bl	8007b58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80070ee:	202e      	movs	r0, #46	; 0x2e
 80070f0:	f000 fd4e 	bl	8007b90 <HAL_NVIC_EnableIRQ>
}
 80070f4:	bf00      	nop
 80070f6:	3748      	adds	r7, #72	; 0x48
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	40010000 	.word	0x40010000
 8007100:	40023800 	.word	0x40023800
 8007104:	40021000 	.word	0x40021000
 8007108:	40020000 	.word	0x40020000
 800710c:	40020400 	.word	0x40020400
 8007110:	40000400 	.word	0x40000400
 8007114:	40000800 	.word	0x40000800
 8007118:	40020c00 	.word	0x40020c00
 800711c:	40010400 	.word	0x40010400
 8007120:	40020800 	.word	0x40020800

08007124 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b086      	sub	sp, #24
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a2c      	ldr	r2, [pc, #176]	; (80071e4 <HAL_TIM_Base_MspInit+0xc0>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d116      	bne.n	8007164 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8007136:	2300      	movs	r3, #0
 8007138:	617b      	str	r3, [r7, #20]
 800713a:	4b2b      	ldr	r3, [pc, #172]	; (80071e8 <HAL_TIM_Base_MspInit+0xc4>)
 800713c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713e:	4a2a      	ldr	r2, [pc, #168]	; (80071e8 <HAL_TIM_Base_MspInit+0xc4>)
 8007140:	f043 0320 	orr.w	r3, r3, #32
 8007144:	6413      	str	r3, [r2, #64]	; 0x40
 8007146:	4b28      	ldr	r3, [pc, #160]	; (80071e8 <HAL_TIM_Base_MspInit+0xc4>)
 8007148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800714a:	f003 0320 	and.w	r3, r3, #32
 800714e:	617b      	str	r3, [r7, #20]
 8007150:	697b      	ldr	r3, [r7, #20]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8007152:	2200      	movs	r2, #0
 8007154:	2105      	movs	r1, #5
 8007156:	2037      	movs	r0, #55	; 0x37
 8007158:	f000 fcfe 	bl	8007b58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800715c:	2037      	movs	r0, #55	; 0x37
 800715e:	f000 fd17 	bl	8007b90 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8007162:	e03a      	b.n	80071da <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM9)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a20      	ldr	r2, [pc, #128]	; (80071ec <HAL_TIM_Base_MspInit+0xc8>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d10e      	bne.n	800718c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800716e:	2300      	movs	r3, #0
 8007170:	613b      	str	r3, [r7, #16]
 8007172:	4b1d      	ldr	r3, [pc, #116]	; (80071e8 <HAL_TIM_Base_MspInit+0xc4>)
 8007174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007176:	4a1c      	ldr	r2, [pc, #112]	; (80071e8 <HAL_TIM_Base_MspInit+0xc4>)
 8007178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800717c:	6453      	str	r3, [r2, #68]	; 0x44
 800717e:	4b1a      	ldr	r3, [pc, #104]	; (80071e8 <HAL_TIM_Base_MspInit+0xc4>)
 8007180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007186:	613b      	str	r3, [r7, #16]
 8007188:	693b      	ldr	r3, [r7, #16]
}
 800718a:	e026      	b.n	80071da <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM12)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a17      	ldr	r2, [pc, #92]	; (80071f0 <HAL_TIM_Base_MspInit+0xcc>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d10e      	bne.n	80071b4 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8007196:	2300      	movs	r3, #0
 8007198:	60fb      	str	r3, [r7, #12]
 800719a:	4b13      	ldr	r3, [pc, #76]	; (80071e8 <HAL_TIM_Base_MspInit+0xc4>)
 800719c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719e:	4a12      	ldr	r2, [pc, #72]	; (80071e8 <HAL_TIM_Base_MspInit+0xc4>)
 80071a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071a4:	6413      	str	r3, [r2, #64]	; 0x40
 80071a6:	4b10      	ldr	r3, [pc, #64]	; (80071e8 <HAL_TIM_Base_MspInit+0xc4>)
 80071a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ae:	60fb      	str	r3, [r7, #12]
 80071b0:	68fb      	ldr	r3, [r7, #12]
}
 80071b2:	e012      	b.n	80071da <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM13)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a0e      	ldr	r2, [pc, #56]	; (80071f4 <HAL_TIM_Base_MspInit+0xd0>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d10d      	bne.n	80071da <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80071be:	2300      	movs	r3, #0
 80071c0:	60bb      	str	r3, [r7, #8]
 80071c2:	4b09      	ldr	r3, [pc, #36]	; (80071e8 <HAL_TIM_Base_MspInit+0xc4>)
 80071c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c6:	4a08      	ldr	r2, [pc, #32]	; (80071e8 <HAL_TIM_Base_MspInit+0xc4>)
 80071c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071cc:	6413      	str	r3, [r2, #64]	; 0x40
 80071ce:	4b06      	ldr	r3, [pc, #24]	; (80071e8 <HAL_TIM_Base_MspInit+0xc4>)
 80071d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071d6:	60bb      	str	r3, [r7, #8]
 80071d8:	68bb      	ldr	r3, [r7, #8]
}
 80071da:	bf00      	nop
 80071dc:	3718      	adds	r7, #24
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	40001400 	.word	0x40001400
 80071e8:	40023800 	.word	0x40023800
 80071ec:	40014000 	.word	0x40014000
 80071f0:	40001800 	.word	0x40001800
 80071f4:	40001c00 	.word	0x40001c00

080071f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b08a      	sub	sp, #40	; 0x28
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007200:	f107 0314 	add.w	r3, r7, #20
 8007204:	2200      	movs	r2, #0
 8007206:	601a      	str	r2, [r3, #0]
 8007208:	605a      	str	r2, [r3, #4]
 800720a:	609a      	str	r2, [r3, #8]
 800720c:	60da      	str	r2, [r3, #12]
 800720e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM9)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a24      	ldr	r2, [pc, #144]	; (80072a8 <HAL_TIM_MspPostInit+0xb0>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d11e      	bne.n	8007258 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800721a:	2300      	movs	r3, #0
 800721c:	613b      	str	r3, [r7, #16]
 800721e:	4b23      	ldr	r3, [pc, #140]	; (80072ac <HAL_TIM_MspPostInit+0xb4>)
 8007220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007222:	4a22      	ldr	r2, [pc, #136]	; (80072ac <HAL_TIM_MspPostInit+0xb4>)
 8007224:	f043 0310 	orr.w	r3, r3, #16
 8007228:	6313      	str	r3, [r2, #48]	; 0x30
 800722a:	4b20      	ldr	r3, [pc, #128]	; (80072ac <HAL_TIM_MspPostInit+0xb4>)
 800722c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800722e:	f003 0310 	and.w	r3, r3, #16
 8007232:	613b      	str	r3, [r7, #16]
 8007234:	693b      	ldr	r3, [r7, #16]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    PE6     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8007236:	2360      	movs	r3, #96	; 0x60
 8007238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800723a:	2302      	movs	r3, #2
 800723c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800723e:	2300      	movs	r3, #0
 8007240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007242:	2300      	movs	r3, #0
 8007244:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8007246:	2303      	movs	r3, #3
 8007248:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800724a:	f107 0314 	add.w	r3, r7, #20
 800724e:	4619      	mov	r1, r3
 8007250:	4817      	ldr	r0, [pc, #92]	; (80072b0 <HAL_TIM_MspPostInit+0xb8>)
 8007252:	f001 f8ad 	bl	80083b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8007256:	e023      	b.n	80072a0 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM12)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a15      	ldr	r2, [pc, #84]	; (80072b4 <HAL_TIM_MspPostInit+0xbc>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d11e      	bne.n	80072a0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007262:	2300      	movs	r3, #0
 8007264:	60fb      	str	r3, [r7, #12]
 8007266:	4b11      	ldr	r3, [pc, #68]	; (80072ac <HAL_TIM_MspPostInit+0xb4>)
 8007268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800726a:	4a10      	ldr	r2, [pc, #64]	; (80072ac <HAL_TIM_MspPostInit+0xb4>)
 800726c:	f043 0302 	orr.w	r3, r3, #2
 8007270:	6313      	str	r3, [r2, #48]	; 0x30
 8007272:	4b0e      	ldr	r3, [pc, #56]	; (80072ac <HAL_TIM_MspPostInit+0xb4>)
 8007274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007276:	f003 0302 	and.w	r3, r3, #2
 800727a:	60fb      	str	r3, [r7, #12]
 800727c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800727e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007284:	2302      	movs	r3, #2
 8007286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007288:	2300      	movs	r3, #0
 800728a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800728c:	2300      	movs	r3, #0
 800728e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8007290:	2309      	movs	r3, #9
 8007292:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007294:	f107 0314 	add.w	r3, r7, #20
 8007298:	4619      	mov	r1, r3
 800729a:	4807      	ldr	r0, [pc, #28]	; (80072b8 <HAL_TIM_MspPostInit+0xc0>)
 800729c:	f001 f888 	bl	80083b0 <HAL_GPIO_Init>
}
 80072a0:	bf00      	nop
 80072a2:	3728      	adds	r7, #40	; 0x28
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	40014000 	.word	0x40014000
 80072ac:	40023800 	.word	0x40023800
 80072b0:	40021000 	.word	0x40021000
 80072b4:	40001800 	.word	0x40001800
 80072b8:	40020400 	.word	0x40020400

080072bc <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80072bc:	b480      	push	{r7}
 80072be:	b085      	sub	sp, #20
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	0a5a      	lsrs	r2, r3, #9
 80072cc:	490f      	ldr	r1, [pc, #60]	; (800730c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80072ce:	fba1 1202 	umull	r1, r2, r1, r2
 80072d2:	09d2      	lsrs	r2, r2, #7
 80072d4:	490e      	ldr	r1, [pc, #56]	; (8007310 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80072d6:	fb01 f202 	mul.w	r2, r1, r2
 80072da:	1a9b      	subs	r3, r3, r2
 80072dc:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	0a5b      	lsrs	r3, r3, #9
 80072e4:	4a09      	ldr	r2, [pc, #36]	; (800730c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80072e6:	fba2 2303 	umull	r2, r3, r2, r3
 80072ea:	09db      	lsrs	r3, r3, #7
 80072ec:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	441a      	add	r2, r3
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	68fa      	ldr	r2, [r7, #12]
 80072fe:	601a      	str	r2, [r3, #0]
}
 8007300:	bf00      	nop
 8007302:	3714      	adds	r7, #20
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr
 800730c:	00044b83 	.word	0x00044b83
 8007310:	3b9aca00 	.word	0x3b9aca00

08007314 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart5_tx;
DMA_HandleTypeDef hdma_usart2_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8007318:	4b11      	ldr	r3, [pc, #68]	; (8007360 <MX_UART4_Init+0x4c>)
 800731a:	4a12      	ldr	r2, [pc, #72]	; (8007364 <MX_UART4_Init+0x50>)
 800731c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800731e:	4b10      	ldr	r3, [pc, #64]	; (8007360 <MX_UART4_Init+0x4c>)
 8007320:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007324:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8007326:	4b0e      	ldr	r3, [pc, #56]	; (8007360 <MX_UART4_Init+0x4c>)
 8007328:	2200      	movs	r2, #0
 800732a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800732c:	4b0c      	ldr	r3, [pc, #48]	; (8007360 <MX_UART4_Init+0x4c>)
 800732e:	2200      	movs	r2, #0
 8007330:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8007332:	4b0b      	ldr	r3, [pc, #44]	; (8007360 <MX_UART4_Init+0x4c>)
 8007334:	2200      	movs	r2, #0
 8007336:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8007338:	4b09      	ldr	r3, [pc, #36]	; (8007360 <MX_UART4_Init+0x4c>)
 800733a:	220c      	movs	r2, #12
 800733c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800733e:	4b08      	ldr	r3, [pc, #32]	; (8007360 <MX_UART4_Init+0x4c>)
 8007340:	2200      	movs	r2, #0
 8007342:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8007344:	4b06      	ldr	r3, [pc, #24]	; (8007360 <MX_UART4_Init+0x4c>)
 8007346:	2200      	movs	r2, #0
 8007348:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800734a:	4805      	ldr	r0, [pc, #20]	; (8007360 <MX_UART4_Init+0x4c>)
 800734c:	f003 f836 	bl	800a3bc <HAL_UART_Init>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d001      	beq.n	800735a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8007356:	f7fa fdfb 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800735a:	bf00      	nop
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	20002c78 	.word	0x20002c78
 8007364:	40004c00 	.word	0x40004c00

08007368 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800736c:	4b11      	ldr	r3, [pc, #68]	; (80073b4 <MX_UART5_Init+0x4c>)
 800736e:	4a12      	ldr	r2, [pc, #72]	; (80073b8 <MX_UART5_Init+0x50>)
 8007370:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 57600;
 8007372:	4b10      	ldr	r3, [pc, #64]	; (80073b4 <MX_UART5_Init+0x4c>)
 8007374:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8007378:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800737a:	4b0e      	ldr	r3, [pc, #56]	; (80073b4 <MX_UART5_Init+0x4c>)
 800737c:	2200      	movs	r2, #0
 800737e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8007380:	4b0c      	ldr	r3, [pc, #48]	; (80073b4 <MX_UART5_Init+0x4c>)
 8007382:	2200      	movs	r2, #0
 8007384:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8007386:	4b0b      	ldr	r3, [pc, #44]	; (80073b4 <MX_UART5_Init+0x4c>)
 8007388:	2200      	movs	r2, #0
 800738a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800738c:	4b09      	ldr	r3, [pc, #36]	; (80073b4 <MX_UART5_Init+0x4c>)
 800738e:	220c      	movs	r2, #12
 8007390:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007392:	4b08      	ldr	r3, [pc, #32]	; (80073b4 <MX_UART5_Init+0x4c>)
 8007394:	2200      	movs	r2, #0
 8007396:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8007398:	4b06      	ldr	r3, [pc, #24]	; (80073b4 <MX_UART5_Init+0x4c>)
 800739a:	2200      	movs	r2, #0
 800739c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800739e:	4805      	ldr	r0, [pc, #20]	; (80073b4 <MX_UART5_Init+0x4c>)
 80073a0:	f003 f80c 	bl	800a3bc <HAL_UART_Init>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d001      	beq.n	80073ae <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80073aa:	f7fa fdd1 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80073ae:	bf00      	nop
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	20002cbc 	.word	0x20002cbc
 80073b8:	40005000 	.word	0x40005000

080073bc <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80073c0:	4b11      	ldr	r3, [pc, #68]	; (8007408 <MX_USART1_UART_Init+0x4c>)
 80073c2:	4a12      	ldr	r2, [pc, #72]	; (800740c <MX_USART1_UART_Init+0x50>)
 80073c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80073c6:	4b10      	ldr	r3, [pc, #64]	; (8007408 <MX_USART1_UART_Init+0x4c>)
 80073c8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80073cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80073ce:	4b0e      	ldr	r3, [pc, #56]	; (8007408 <MX_USART1_UART_Init+0x4c>)
 80073d0:	2200      	movs	r2, #0
 80073d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80073d4:	4b0c      	ldr	r3, [pc, #48]	; (8007408 <MX_USART1_UART_Init+0x4c>)
 80073d6:	2200      	movs	r2, #0
 80073d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80073da:	4b0b      	ldr	r3, [pc, #44]	; (8007408 <MX_USART1_UART_Init+0x4c>)
 80073dc:	2200      	movs	r2, #0
 80073de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80073e0:	4b09      	ldr	r3, [pc, #36]	; (8007408 <MX_USART1_UART_Init+0x4c>)
 80073e2:	220c      	movs	r2, #12
 80073e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80073e6:	4b08      	ldr	r3, [pc, #32]	; (8007408 <MX_USART1_UART_Init+0x4c>)
 80073e8:	2200      	movs	r2, #0
 80073ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80073ec:	4b06      	ldr	r3, [pc, #24]	; (8007408 <MX_USART1_UART_Init+0x4c>)
 80073ee:	2200      	movs	r2, #0
 80073f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80073f2:	4805      	ldr	r0, [pc, #20]	; (8007408 <MX_USART1_UART_Init+0x4c>)
 80073f4:	f002 ffe2 	bl	800a3bc <HAL_UART_Init>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d001      	beq.n	8007402 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80073fe:	f7fa fda7 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007402:	bf00      	nop
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	20002d00 	.word	0x20002d00
 800740c:	40011000 	.word	0x40011000

08007410 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007414:	4b11      	ldr	r3, [pc, #68]	; (800745c <MX_USART2_UART_Init+0x4c>)
 8007416:	4a12      	ldr	r2, [pc, #72]	; (8007460 <MX_USART2_UART_Init+0x50>)
 8007418:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800741a:	4b10      	ldr	r3, [pc, #64]	; (800745c <MX_USART2_UART_Init+0x4c>)
 800741c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007420:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007422:	4b0e      	ldr	r3, [pc, #56]	; (800745c <MX_USART2_UART_Init+0x4c>)
 8007424:	2200      	movs	r2, #0
 8007426:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007428:	4b0c      	ldr	r3, [pc, #48]	; (800745c <MX_USART2_UART_Init+0x4c>)
 800742a:	2200      	movs	r2, #0
 800742c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800742e:	4b0b      	ldr	r3, [pc, #44]	; (800745c <MX_USART2_UART_Init+0x4c>)
 8007430:	2200      	movs	r2, #0
 8007432:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007434:	4b09      	ldr	r3, [pc, #36]	; (800745c <MX_USART2_UART_Init+0x4c>)
 8007436:	220c      	movs	r2, #12
 8007438:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800743a:	4b08      	ldr	r3, [pc, #32]	; (800745c <MX_USART2_UART_Init+0x4c>)
 800743c:	2200      	movs	r2, #0
 800743e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007440:	4b06      	ldr	r3, [pc, #24]	; (800745c <MX_USART2_UART_Init+0x4c>)
 8007442:	2200      	movs	r2, #0
 8007444:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007446:	4805      	ldr	r0, [pc, #20]	; (800745c <MX_USART2_UART_Init+0x4c>)
 8007448:	f002 ffb8 	bl	800a3bc <HAL_UART_Init>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d001      	beq.n	8007456 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8007452:	f7fa fd7d 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8007456:	bf00      	nop
 8007458:	bd80      	pop	{r7, pc}
 800745a:	bf00      	nop
 800745c:	20002d44 	.word	0x20002d44
 8007460:	40004400 	.word	0x40004400

08007464 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8007468:	4b11      	ldr	r3, [pc, #68]	; (80074b0 <MX_USART3_UART_Init+0x4c>)
 800746a:	4a12      	ldr	r2, [pc, #72]	; (80074b4 <MX_USART3_UART_Init+0x50>)
 800746c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800746e:	4b10      	ldr	r3, [pc, #64]	; (80074b0 <MX_USART3_UART_Init+0x4c>)
 8007470:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007474:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8007476:	4b0e      	ldr	r3, [pc, #56]	; (80074b0 <MX_USART3_UART_Init+0x4c>)
 8007478:	2200      	movs	r2, #0
 800747a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800747c:	4b0c      	ldr	r3, [pc, #48]	; (80074b0 <MX_USART3_UART_Init+0x4c>)
 800747e:	2200      	movs	r2, #0
 8007480:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8007482:	4b0b      	ldr	r3, [pc, #44]	; (80074b0 <MX_USART3_UART_Init+0x4c>)
 8007484:	2200      	movs	r2, #0
 8007486:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8007488:	4b09      	ldr	r3, [pc, #36]	; (80074b0 <MX_USART3_UART_Init+0x4c>)
 800748a:	220c      	movs	r2, #12
 800748c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800748e:	4b08      	ldr	r3, [pc, #32]	; (80074b0 <MX_USART3_UART_Init+0x4c>)
 8007490:	2200      	movs	r2, #0
 8007492:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007494:	4b06      	ldr	r3, [pc, #24]	; (80074b0 <MX_USART3_UART_Init+0x4c>)
 8007496:	2200      	movs	r2, #0
 8007498:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800749a:	4805      	ldr	r0, [pc, #20]	; (80074b0 <MX_USART3_UART_Init+0x4c>)
 800749c:	f002 ff8e 	bl	800a3bc <HAL_UART_Init>
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d001      	beq.n	80074aa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80074a6:	f7fa fd53 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80074aa:	bf00      	nop
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	20002d88 	.word	0x20002d88
 80074b4:	40004800 	.word	0x40004800

080074b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b092      	sub	sp, #72	; 0x48
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80074c4:	2200      	movs	r2, #0
 80074c6:	601a      	str	r2, [r3, #0]
 80074c8:	605a      	str	r2, [r3, #4]
 80074ca:	609a      	str	r2, [r3, #8]
 80074cc:	60da      	str	r2, [r3, #12]
 80074ce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a8e      	ldr	r2, [pc, #568]	; (8007710 <HAL_UART_MspInit+0x258>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d163      	bne.n	80075a2 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80074da:	2300      	movs	r3, #0
 80074dc:	633b      	str	r3, [r7, #48]	; 0x30
 80074de:	4b8d      	ldr	r3, [pc, #564]	; (8007714 <HAL_UART_MspInit+0x25c>)
 80074e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e2:	4a8c      	ldr	r2, [pc, #560]	; (8007714 <HAL_UART_MspInit+0x25c>)
 80074e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80074e8:	6413      	str	r3, [r2, #64]	; 0x40
 80074ea:	4b8a      	ldr	r3, [pc, #552]	; (8007714 <HAL_UART_MspInit+0x25c>)
 80074ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074f2:	633b      	str	r3, [r7, #48]	; 0x30
 80074f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80074f6:	2300      	movs	r3, #0
 80074f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074fa:	4b86      	ldr	r3, [pc, #536]	; (8007714 <HAL_UART_MspInit+0x25c>)
 80074fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074fe:	4a85      	ldr	r2, [pc, #532]	; (8007714 <HAL_UART_MspInit+0x25c>)
 8007500:	f043 0304 	orr.w	r3, r3, #4
 8007504:	6313      	str	r3, [r2, #48]	; 0x30
 8007506:	4b83      	ldr	r3, [pc, #524]	; (8007714 <HAL_UART_MspInit+0x25c>)
 8007508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750a:	f003 0304 	and.w	r3, r3, #4
 800750e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007512:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007516:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007518:	2302      	movs	r3, #2
 800751a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800751c:	2300      	movs	r3, #0
 800751e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007520:	2303      	movs	r3, #3
 8007522:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8007524:	2308      	movs	r3, #8
 8007526:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007528:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800752c:	4619      	mov	r1, r3
 800752e:	487a      	ldr	r0, [pc, #488]	; (8007718 <HAL_UART_MspInit+0x260>)
 8007530:	f000 ff3e 	bl	80083b0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8007534:	4b79      	ldr	r3, [pc, #484]	; (800771c <HAL_UART_MspInit+0x264>)
 8007536:	4a7a      	ldr	r2, [pc, #488]	; (8007720 <HAL_UART_MspInit+0x268>)
 8007538:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800753a:	4b78      	ldr	r3, [pc, #480]	; (800771c <HAL_UART_MspInit+0x264>)
 800753c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007540:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007542:	4b76      	ldr	r3, [pc, #472]	; (800771c <HAL_UART_MspInit+0x264>)
 8007544:	2200      	movs	r2, #0
 8007546:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007548:	4b74      	ldr	r3, [pc, #464]	; (800771c <HAL_UART_MspInit+0x264>)
 800754a:	2200      	movs	r2, #0
 800754c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800754e:	4b73      	ldr	r3, [pc, #460]	; (800771c <HAL_UART_MspInit+0x264>)
 8007550:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007554:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007556:	4b71      	ldr	r3, [pc, #452]	; (800771c <HAL_UART_MspInit+0x264>)
 8007558:	2200      	movs	r2, #0
 800755a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800755c:	4b6f      	ldr	r3, [pc, #444]	; (800771c <HAL_UART_MspInit+0x264>)
 800755e:	2200      	movs	r2, #0
 8007560:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8007562:	4b6e      	ldr	r3, [pc, #440]	; (800771c <HAL_UART_MspInit+0x264>)
 8007564:	2200      	movs	r2, #0
 8007566:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007568:	4b6c      	ldr	r3, [pc, #432]	; (800771c <HAL_UART_MspInit+0x264>)
 800756a:	2200      	movs	r2, #0
 800756c:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800756e:	4b6b      	ldr	r3, [pc, #428]	; (800771c <HAL_UART_MspInit+0x264>)
 8007570:	2200      	movs	r2, #0
 8007572:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8007574:	4869      	ldr	r0, [pc, #420]	; (800771c <HAL_UART_MspInit+0x264>)
 8007576:	f000 fb19 	bl	8007bac <HAL_DMA_Init>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d001      	beq.n	8007584 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8007580:	f7fa fce6 	bl	8001f50 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a65      	ldr	r2, [pc, #404]	; (800771c <HAL_UART_MspInit+0x264>)
 8007588:	639a      	str	r2, [r3, #56]	; 0x38
 800758a:	4a64      	ldr	r2, [pc, #400]	; (800771c <HAL_UART_MspInit+0x264>)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8007590:	2200      	movs	r2, #0
 8007592:	2105      	movs	r1, #5
 8007594:	2034      	movs	r0, #52	; 0x34
 8007596:	f000 fadf 	bl	8007b58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800759a:	2034      	movs	r0, #52	; 0x34
 800759c:	f000 faf8 	bl	8007b90 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80075a0:	e1a1      	b.n	80078e6 <HAL_UART_MspInit+0x42e>
  else if(uartHandle->Instance==UART5)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a5f      	ldr	r2, [pc, #380]	; (8007724 <HAL_UART_MspInit+0x26c>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	f040 80c7 	bne.w	800773c <HAL_UART_MspInit+0x284>
    __HAL_RCC_UART5_CLK_ENABLE();
 80075ae:	2300      	movs	r3, #0
 80075b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80075b2:	4b58      	ldr	r3, [pc, #352]	; (8007714 <HAL_UART_MspInit+0x25c>)
 80075b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b6:	4a57      	ldr	r2, [pc, #348]	; (8007714 <HAL_UART_MspInit+0x25c>)
 80075b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075bc:	6413      	str	r3, [r2, #64]	; 0x40
 80075be:	4b55      	ldr	r3, [pc, #340]	; (8007714 <HAL_UART_MspInit+0x25c>)
 80075c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80075c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80075ca:	2300      	movs	r3, #0
 80075cc:	627b      	str	r3, [r7, #36]	; 0x24
 80075ce:	4b51      	ldr	r3, [pc, #324]	; (8007714 <HAL_UART_MspInit+0x25c>)
 80075d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d2:	4a50      	ldr	r2, [pc, #320]	; (8007714 <HAL_UART_MspInit+0x25c>)
 80075d4:	f043 0304 	orr.w	r3, r3, #4
 80075d8:	6313      	str	r3, [r2, #48]	; 0x30
 80075da:	4b4e      	ldr	r3, [pc, #312]	; (8007714 <HAL_UART_MspInit+0x25c>)
 80075dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075de:	f003 0304 	and.w	r3, r3, #4
 80075e2:	627b      	str	r3, [r7, #36]	; 0x24
 80075e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80075e6:	2300      	movs	r3, #0
 80075e8:	623b      	str	r3, [r7, #32]
 80075ea:	4b4a      	ldr	r3, [pc, #296]	; (8007714 <HAL_UART_MspInit+0x25c>)
 80075ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ee:	4a49      	ldr	r2, [pc, #292]	; (8007714 <HAL_UART_MspInit+0x25c>)
 80075f0:	f043 0308 	orr.w	r3, r3, #8
 80075f4:	6313      	str	r3, [r2, #48]	; 0x30
 80075f6:	4b47      	ldr	r3, [pc, #284]	; (8007714 <HAL_UART_MspInit+0x25c>)
 80075f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075fa:	f003 0308 	and.w	r3, r3, #8
 80075fe:	623b      	str	r3, [r7, #32]
 8007600:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007606:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007608:	2302      	movs	r3, #2
 800760a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800760c:	2300      	movs	r3, #0
 800760e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007610:	2303      	movs	r3, #3
 8007612:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8007614:	2308      	movs	r3, #8
 8007616:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007618:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800761c:	4619      	mov	r1, r3
 800761e:	483e      	ldr	r0, [pc, #248]	; (8007718 <HAL_UART_MspInit+0x260>)
 8007620:	f000 fec6 	bl	80083b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007624:	2304      	movs	r3, #4
 8007626:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007628:	2302      	movs	r3, #2
 800762a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800762c:	2300      	movs	r3, #0
 800762e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007630:	2303      	movs	r3, #3
 8007632:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8007634:	2308      	movs	r3, #8
 8007636:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007638:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800763c:	4619      	mov	r1, r3
 800763e:	483a      	ldr	r0, [pc, #232]	; (8007728 <HAL_UART_MspInit+0x270>)
 8007640:	f000 feb6 	bl	80083b0 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8007644:	4b39      	ldr	r3, [pc, #228]	; (800772c <HAL_UART_MspInit+0x274>)
 8007646:	4a3a      	ldr	r2, [pc, #232]	; (8007730 <HAL_UART_MspInit+0x278>)
 8007648:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 800764a:	4b38      	ldr	r3, [pc, #224]	; (800772c <HAL_UART_MspInit+0x274>)
 800764c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007650:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007652:	4b36      	ldr	r3, [pc, #216]	; (800772c <HAL_UART_MspInit+0x274>)
 8007654:	2200      	movs	r2, #0
 8007656:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007658:	4b34      	ldr	r3, [pc, #208]	; (800772c <HAL_UART_MspInit+0x274>)
 800765a:	2200      	movs	r2, #0
 800765c:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800765e:	4b33      	ldr	r3, [pc, #204]	; (800772c <HAL_UART_MspInit+0x274>)
 8007660:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007664:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007666:	4b31      	ldr	r3, [pc, #196]	; (800772c <HAL_UART_MspInit+0x274>)
 8007668:	2200      	movs	r2, #0
 800766a:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800766c:	4b2f      	ldr	r3, [pc, #188]	; (800772c <HAL_UART_MspInit+0x274>)
 800766e:	2200      	movs	r2, #0
 8007670:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8007672:	4b2e      	ldr	r3, [pc, #184]	; (800772c <HAL_UART_MspInit+0x274>)
 8007674:	2200      	movs	r2, #0
 8007676:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007678:	4b2c      	ldr	r3, [pc, #176]	; (800772c <HAL_UART_MspInit+0x274>)
 800767a:	2200      	movs	r2, #0
 800767c:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800767e:	4b2b      	ldr	r3, [pc, #172]	; (800772c <HAL_UART_MspInit+0x274>)
 8007680:	2200      	movs	r2, #0
 8007682:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8007684:	4829      	ldr	r0, [pc, #164]	; (800772c <HAL_UART_MspInit+0x274>)
 8007686:	f000 fa91 	bl	8007bac <HAL_DMA_Init>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d001      	beq.n	8007694 <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 8007690:	f7fa fc5e 	bl	8001f50 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a25      	ldr	r2, [pc, #148]	; (800772c <HAL_UART_MspInit+0x274>)
 8007698:	639a      	str	r2, [r3, #56]	; 0x38
 800769a:	4a24      	ldr	r2, [pc, #144]	; (800772c <HAL_UART_MspInit+0x274>)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart5_tx.Instance = DMA1_Stream7;
 80076a0:	4b24      	ldr	r3, [pc, #144]	; (8007734 <HAL_UART_MspInit+0x27c>)
 80076a2:	4a25      	ldr	r2, [pc, #148]	; (8007738 <HAL_UART_MspInit+0x280>)
 80076a4:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 80076a6:	4b23      	ldr	r3, [pc, #140]	; (8007734 <HAL_UART_MspInit+0x27c>)
 80076a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80076ac:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80076ae:	4b21      	ldr	r3, [pc, #132]	; (8007734 <HAL_UART_MspInit+0x27c>)
 80076b0:	2240      	movs	r2, #64	; 0x40
 80076b2:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80076b4:	4b1f      	ldr	r3, [pc, #124]	; (8007734 <HAL_UART_MspInit+0x27c>)
 80076b6:	2200      	movs	r2, #0
 80076b8:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 80076ba:	4b1e      	ldr	r3, [pc, #120]	; (8007734 <HAL_UART_MspInit+0x27c>)
 80076bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80076c0:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80076c2:	4b1c      	ldr	r3, [pc, #112]	; (8007734 <HAL_UART_MspInit+0x27c>)
 80076c4:	2200      	movs	r2, #0
 80076c6:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80076c8:	4b1a      	ldr	r3, [pc, #104]	; (8007734 <HAL_UART_MspInit+0x27c>)
 80076ca:	2200      	movs	r2, #0
 80076cc:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 80076ce:	4b19      	ldr	r3, [pc, #100]	; (8007734 <HAL_UART_MspInit+0x27c>)
 80076d0:	2200      	movs	r2, #0
 80076d2:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 80076d4:	4b17      	ldr	r3, [pc, #92]	; (8007734 <HAL_UART_MspInit+0x27c>)
 80076d6:	2200      	movs	r2, #0
 80076d8:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80076da:	4b16      	ldr	r3, [pc, #88]	; (8007734 <HAL_UART_MspInit+0x27c>)
 80076dc:	2200      	movs	r2, #0
 80076de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 80076e0:	4814      	ldr	r0, [pc, #80]	; (8007734 <HAL_UART_MspInit+0x27c>)
 80076e2:	f000 fa63 	bl	8007bac <HAL_DMA_Init>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d001      	beq.n	80076f0 <HAL_UART_MspInit+0x238>
      Error_Handler();
 80076ec:	f7fa fc30 	bl	8001f50 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a10      	ldr	r2, [pc, #64]	; (8007734 <HAL_UART_MspInit+0x27c>)
 80076f4:	635a      	str	r2, [r3, #52]	; 0x34
 80076f6:	4a0f      	ldr	r2, [pc, #60]	; (8007734 <HAL_UART_MspInit+0x27c>)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 80076fc:	2200      	movs	r2, #0
 80076fe:	2105      	movs	r1, #5
 8007700:	2035      	movs	r0, #53	; 0x35
 8007702:	f000 fa29 	bl	8007b58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8007706:	2035      	movs	r0, #53	; 0x35
 8007708:	f000 fa42 	bl	8007b90 <HAL_NVIC_EnableIRQ>
}
 800770c:	e0eb      	b.n	80078e6 <HAL_UART_MspInit+0x42e>
 800770e:	bf00      	nop
 8007710:	40004c00 	.word	0x40004c00
 8007714:	40023800 	.word	0x40023800
 8007718:	40020800 	.word	0x40020800
 800771c:	20002dcc 	.word	0x20002dcc
 8007720:	40026040 	.word	0x40026040
 8007724:	40005000 	.word	0x40005000
 8007728:	40020c00 	.word	0x40020c00
 800772c:	20002e2c 	.word	0x20002e2c
 8007730:	40026010 	.word	0x40026010
 8007734:	20002e8c 	.word	0x20002e8c
 8007738:	400260b8 	.word	0x400260b8
  else if(uartHandle->Instance==USART1)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a6b      	ldr	r2, [pc, #428]	; (80078f0 <HAL_UART_MspInit+0x438>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d135      	bne.n	80077b2 <HAL_UART_MspInit+0x2fa>
    __HAL_RCC_USART1_CLK_ENABLE();
 8007746:	2300      	movs	r3, #0
 8007748:	61fb      	str	r3, [r7, #28]
 800774a:	4b6a      	ldr	r3, [pc, #424]	; (80078f4 <HAL_UART_MspInit+0x43c>)
 800774c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800774e:	4a69      	ldr	r2, [pc, #420]	; (80078f4 <HAL_UART_MspInit+0x43c>)
 8007750:	f043 0310 	orr.w	r3, r3, #16
 8007754:	6453      	str	r3, [r2, #68]	; 0x44
 8007756:	4b67      	ldr	r3, [pc, #412]	; (80078f4 <HAL_UART_MspInit+0x43c>)
 8007758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800775a:	f003 0310 	and.w	r3, r3, #16
 800775e:	61fb      	str	r3, [r7, #28]
 8007760:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007762:	2300      	movs	r3, #0
 8007764:	61bb      	str	r3, [r7, #24]
 8007766:	4b63      	ldr	r3, [pc, #396]	; (80078f4 <HAL_UART_MspInit+0x43c>)
 8007768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800776a:	4a62      	ldr	r2, [pc, #392]	; (80078f4 <HAL_UART_MspInit+0x43c>)
 800776c:	f043 0301 	orr.w	r3, r3, #1
 8007770:	6313      	str	r3, [r2, #48]	; 0x30
 8007772:	4b60      	ldr	r3, [pc, #384]	; (80078f4 <HAL_UART_MspInit+0x43c>)
 8007774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007776:	f003 0301 	and.w	r3, r3, #1
 800777a:	61bb      	str	r3, [r7, #24]
 800777c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800777e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8007782:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007784:	2302      	movs	r3, #2
 8007786:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007788:	2300      	movs	r3, #0
 800778a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800778c:	2303      	movs	r3, #3
 800778e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007790:	2307      	movs	r3, #7
 8007792:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007794:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007798:	4619      	mov	r1, r3
 800779a:	4857      	ldr	r0, [pc, #348]	; (80078f8 <HAL_UART_MspInit+0x440>)
 800779c:	f000 fe08 	bl	80083b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80077a0:	2200      	movs	r2, #0
 80077a2:	2105      	movs	r1, #5
 80077a4:	2025      	movs	r0, #37	; 0x25
 80077a6:	f000 f9d7 	bl	8007b58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80077aa:	2025      	movs	r0, #37	; 0x25
 80077ac:	f000 f9f0 	bl	8007b90 <HAL_NVIC_EnableIRQ>
}
 80077b0:	e099      	b.n	80078e6 <HAL_UART_MspInit+0x42e>
  else if(uartHandle->Instance==USART2)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a51      	ldr	r2, [pc, #324]	; (80078fc <HAL_UART_MspInit+0x444>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d162      	bne.n	8007882 <HAL_UART_MspInit+0x3ca>
    __HAL_RCC_USART2_CLK_ENABLE();
 80077bc:	2300      	movs	r3, #0
 80077be:	617b      	str	r3, [r7, #20]
 80077c0:	4b4c      	ldr	r3, [pc, #304]	; (80078f4 <HAL_UART_MspInit+0x43c>)
 80077c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c4:	4a4b      	ldr	r2, [pc, #300]	; (80078f4 <HAL_UART_MspInit+0x43c>)
 80077c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077ca:	6413      	str	r3, [r2, #64]	; 0x40
 80077cc:	4b49      	ldr	r3, [pc, #292]	; (80078f4 <HAL_UART_MspInit+0x43c>)
 80077ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077d4:	617b      	str	r3, [r7, #20]
 80077d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077d8:	2300      	movs	r3, #0
 80077da:	613b      	str	r3, [r7, #16]
 80077dc:	4b45      	ldr	r3, [pc, #276]	; (80078f4 <HAL_UART_MspInit+0x43c>)
 80077de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e0:	4a44      	ldr	r2, [pc, #272]	; (80078f4 <HAL_UART_MspInit+0x43c>)
 80077e2:	f043 0301 	orr.w	r3, r3, #1
 80077e6:	6313      	str	r3, [r2, #48]	; 0x30
 80077e8:	4b42      	ldr	r3, [pc, #264]	; (80078f4 <HAL_UART_MspInit+0x43c>)
 80077ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ec:	f003 0301 	and.w	r3, r3, #1
 80077f0:	613b      	str	r3, [r7, #16]
 80077f2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80077f4:	230c      	movs	r3, #12
 80077f6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077f8:	2302      	movs	r3, #2
 80077fa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077fc:	2300      	movs	r3, #0
 80077fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007800:	2303      	movs	r3, #3
 8007802:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007804:	2307      	movs	r3, #7
 8007806:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007808:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800780c:	4619      	mov	r1, r3
 800780e:	483a      	ldr	r0, [pc, #232]	; (80078f8 <HAL_UART_MspInit+0x440>)
 8007810:	f000 fdce 	bl	80083b0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8007814:	4b3a      	ldr	r3, [pc, #232]	; (8007900 <HAL_UART_MspInit+0x448>)
 8007816:	4a3b      	ldr	r2, [pc, #236]	; (8007904 <HAL_UART_MspInit+0x44c>)
 8007818:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800781a:	4b39      	ldr	r3, [pc, #228]	; (8007900 <HAL_UART_MspInit+0x448>)
 800781c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007820:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007822:	4b37      	ldr	r3, [pc, #220]	; (8007900 <HAL_UART_MspInit+0x448>)
 8007824:	2200      	movs	r2, #0
 8007826:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007828:	4b35      	ldr	r3, [pc, #212]	; (8007900 <HAL_UART_MspInit+0x448>)
 800782a:	2200      	movs	r2, #0
 800782c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800782e:	4b34      	ldr	r3, [pc, #208]	; (8007900 <HAL_UART_MspInit+0x448>)
 8007830:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007834:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007836:	4b32      	ldr	r3, [pc, #200]	; (8007900 <HAL_UART_MspInit+0x448>)
 8007838:	2200      	movs	r2, #0
 800783a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800783c:	4b30      	ldr	r3, [pc, #192]	; (8007900 <HAL_UART_MspInit+0x448>)
 800783e:	2200      	movs	r2, #0
 8007840:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8007842:	4b2f      	ldr	r3, [pc, #188]	; (8007900 <HAL_UART_MspInit+0x448>)
 8007844:	2200      	movs	r2, #0
 8007846:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007848:	4b2d      	ldr	r3, [pc, #180]	; (8007900 <HAL_UART_MspInit+0x448>)
 800784a:	2200      	movs	r2, #0
 800784c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800784e:	4b2c      	ldr	r3, [pc, #176]	; (8007900 <HAL_UART_MspInit+0x448>)
 8007850:	2200      	movs	r2, #0
 8007852:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8007854:	482a      	ldr	r0, [pc, #168]	; (8007900 <HAL_UART_MspInit+0x448>)
 8007856:	f000 f9a9 	bl	8007bac <HAL_DMA_Init>
 800785a:	4603      	mov	r3, r0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d001      	beq.n	8007864 <HAL_UART_MspInit+0x3ac>
      Error_Handler();
 8007860:	f7fa fb76 	bl	8001f50 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4a26      	ldr	r2, [pc, #152]	; (8007900 <HAL_UART_MspInit+0x448>)
 8007868:	639a      	str	r2, [r3, #56]	; 0x38
 800786a:	4a25      	ldr	r2, [pc, #148]	; (8007900 <HAL_UART_MspInit+0x448>)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8007870:	2200      	movs	r2, #0
 8007872:	2105      	movs	r1, #5
 8007874:	2026      	movs	r0, #38	; 0x26
 8007876:	f000 f96f 	bl	8007b58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800787a:	2026      	movs	r0, #38	; 0x26
 800787c:	f000 f988 	bl	8007b90 <HAL_NVIC_EnableIRQ>
}
 8007880:	e031      	b.n	80078e6 <HAL_UART_MspInit+0x42e>
  else if(uartHandle->Instance==USART3)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a20      	ldr	r2, [pc, #128]	; (8007908 <HAL_UART_MspInit+0x450>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d12c      	bne.n	80078e6 <HAL_UART_MspInit+0x42e>
    __HAL_RCC_USART3_CLK_ENABLE();
 800788c:	2300      	movs	r3, #0
 800788e:	60fb      	str	r3, [r7, #12]
 8007890:	4b18      	ldr	r3, [pc, #96]	; (80078f4 <HAL_UART_MspInit+0x43c>)
 8007892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007894:	4a17      	ldr	r2, [pc, #92]	; (80078f4 <HAL_UART_MspInit+0x43c>)
 8007896:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800789a:	6413      	str	r3, [r2, #64]	; 0x40
 800789c:	4b15      	ldr	r3, [pc, #84]	; (80078f4 <HAL_UART_MspInit+0x43c>)
 800789e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078a4:	60fb      	str	r3, [r7, #12]
 80078a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80078a8:	2300      	movs	r3, #0
 80078aa:	60bb      	str	r3, [r7, #8]
 80078ac:	4b11      	ldr	r3, [pc, #68]	; (80078f4 <HAL_UART_MspInit+0x43c>)
 80078ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b0:	4a10      	ldr	r2, [pc, #64]	; (80078f4 <HAL_UART_MspInit+0x43c>)
 80078b2:	f043 0308 	orr.w	r3, r3, #8
 80078b6:	6313      	str	r3, [r2, #48]	; 0x30
 80078b8:	4b0e      	ldr	r3, [pc, #56]	; (80078f4 <HAL_UART_MspInit+0x43c>)
 80078ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078bc:	f003 0308 	and.w	r3, r3, #8
 80078c0:	60bb      	str	r3, [r7, #8]
 80078c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80078c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80078c8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078ca:	2302      	movs	r3, #2
 80078cc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078ce:	2300      	movs	r3, #0
 80078d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078d2:	2303      	movs	r3, #3
 80078d4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80078d6:	2307      	movs	r3, #7
 80078d8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80078da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80078de:	4619      	mov	r1, r3
 80078e0:	480a      	ldr	r0, [pc, #40]	; (800790c <HAL_UART_MspInit+0x454>)
 80078e2:	f000 fd65 	bl	80083b0 <HAL_GPIO_Init>
}
 80078e6:	bf00      	nop
 80078e8:	3748      	adds	r7, #72	; 0x48
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	40011000 	.word	0x40011000
 80078f4:	40023800 	.word	0x40023800
 80078f8:	40020000 	.word	0x40020000
 80078fc:	40004400 	.word	0x40004400
 8007900:	20002eec 	.word	0x20002eec
 8007904:	40026088 	.word	0x40026088
 8007908:	40004800 	.word	0x40004800
 800790c:	40020c00 	.word	0x40020c00

08007910 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007910:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007948 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007914:	480d      	ldr	r0, [pc, #52]	; (800794c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8007916:	490e      	ldr	r1, [pc, #56]	; (8007950 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007918:	4a0e      	ldr	r2, [pc, #56]	; (8007954 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800791a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800791c:	e002      	b.n	8007924 <LoopCopyDataInit>

0800791e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800791e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007920:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007922:	3304      	adds	r3, #4

08007924 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007924:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007926:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007928:	d3f9      	bcc.n	800791e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800792a:	4a0b      	ldr	r2, [pc, #44]	; (8007958 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800792c:	4c0b      	ldr	r4, [pc, #44]	; (800795c <LoopFillZerobss+0x26>)
  movs r3, #0
 800792e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007930:	e001      	b.n	8007936 <LoopFillZerobss>

08007932 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007932:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007934:	3204      	adds	r2, #4

08007936 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007936:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007938:	d3fb      	bcc.n	8007932 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800793a:	f7fe ff9f 	bl	800687c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800793e:	f006 fffb 	bl	800e938 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007942:	f7fa fa19 	bl	8001d78 <main>
  bx  lr    
 8007946:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007948:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800794c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007950:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8007954:	0800fac8 	.word	0x0800fac8
  ldr r2, =_sbss
 8007958:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 800795c:	20006cb4 	.word	0x20006cb4

08007960 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007960:	e7fe      	b.n	8007960 <ADC_IRQHandler>
	...

08007964 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007968:	4b0e      	ldr	r3, [pc, #56]	; (80079a4 <HAL_Init+0x40>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a0d      	ldr	r2, [pc, #52]	; (80079a4 <HAL_Init+0x40>)
 800796e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007972:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007974:	4b0b      	ldr	r3, [pc, #44]	; (80079a4 <HAL_Init+0x40>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a0a      	ldr	r2, [pc, #40]	; (80079a4 <HAL_Init+0x40>)
 800797a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800797e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007980:	4b08      	ldr	r3, [pc, #32]	; (80079a4 <HAL_Init+0x40>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a07      	ldr	r2, [pc, #28]	; (80079a4 <HAL_Init+0x40>)
 8007986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800798a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800798c:	2003      	movs	r0, #3
 800798e:	f000 f8d8 	bl	8007b42 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007992:	200f      	movs	r0, #15
 8007994:	f7fe fdf2 	bl	800657c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007998:	f7fe fdc4 	bl	8006524 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800799c:	2300      	movs	r3, #0
}
 800799e:	4618      	mov	r0, r3
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	40023c00 	.word	0x40023c00

080079a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80079a8:	b480      	push	{r7}
 80079aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80079ac:	4b06      	ldr	r3, [pc, #24]	; (80079c8 <HAL_IncTick+0x20>)
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	461a      	mov	r2, r3
 80079b2:	4b06      	ldr	r3, [pc, #24]	; (80079cc <HAL_IncTick+0x24>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4413      	add	r3, r2
 80079b8:	4a04      	ldr	r2, [pc, #16]	; (80079cc <HAL_IncTick+0x24>)
 80079ba:	6013      	str	r3, [r2, #0]
}
 80079bc:	bf00      	nop
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr
 80079c6:	bf00      	nop
 80079c8:	20000034 	.word	0x20000034
 80079cc:	20002f4c 	.word	0x20002f4c

080079d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80079d0:	b480      	push	{r7}
 80079d2:	af00      	add	r7, sp, #0
  return uwTick;
 80079d4:	4b03      	ldr	r3, [pc, #12]	; (80079e4 <HAL_GetTick+0x14>)
 80079d6:	681b      	ldr	r3, [r3, #0]
}
 80079d8:	4618      	mov	r0, r3
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr
 80079e2:	bf00      	nop
 80079e4:	20002f4c 	.word	0x20002f4c

080079e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b085      	sub	sp, #20
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f003 0307 	and.w	r3, r3, #7
 80079f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80079f8:	4b0c      	ldr	r3, [pc, #48]	; (8007a2c <__NVIC_SetPriorityGrouping+0x44>)
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80079fe:	68ba      	ldr	r2, [r7, #8]
 8007a00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007a04:	4013      	ands	r3, r2
 8007a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007a10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007a1a:	4a04      	ldr	r2, [pc, #16]	; (8007a2c <__NVIC_SetPriorityGrouping+0x44>)
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	60d3      	str	r3, [r2, #12]
}
 8007a20:	bf00      	nop
 8007a22:	3714      	adds	r7, #20
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr
 8007a2c:	e000ed00 	.word	0xe000ed00

08007a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007a30:	b480      	push	{r7}
 8007a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007a34:	4b04      	ldr	r3, [pc, #16]	; (8007a48 <__NVIC_GetPriorityGrouping+0x18>)
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	0a1b      	lsrs	r3, r3, #8
 8007a3a:	f003 0307 	and.w	r3, r3, #7
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr
 8007a48:	e000ed00 	.word	0xe000ed00

08007a4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	4603      	mov	r3, r0
 8007a54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	db0b      	blt.n	8007a76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007a5e:	79fb      	ldrb	r3, [r7, #7]
 8007a60:	f003 021f 	and.w	r2, r3, #31
 8007a64:	4907      	ldr	r1, [pc, #28]	; (8007a84 <__NVIC_EnableIRQ+0x38>)
 8007a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a6a:	095b      	lsrs	r3, r3, #5
 8007a6c:	2001      	movs	r0, #1
 8007a6e:	fa00 f202 	lsl.w	r2, r0, r2
 8007a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007a76:	bf00      	nop
 8007a78:	370c      	adds	r7, #12
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr
 8007a82:	bf00      	nop
 8007a84:	e000e100 	.word	0xe000e100

08007a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	4603      	mov	r3, r0
 8007a90:	6039      	str	r1, [r7, #0]
 8007a92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	db0a      	blt.n	8007ab2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	b2da      	uxtb	r2, r3
 8007aa0:	490c      	ldr	r1, [pc, #48]	; (8007ad4 <__NVIC_SetPriority+0x4c>)
 8007aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007aa6:	0112      	lsls	r2, r2, #4
 8007aa8:	b2d2      	uxtb	r2, r2
 8007aaa:	440b      	add	r3, r1
 8007aac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007ab0:	e00a      	b.n	8007ac8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	b2da      	uxtb	r2, r3
 8007ab6:	4908      	ldr	r1, [pc, #32]	; (8007ad8 <__NVIC_SetPriority+0x50>)
 8007ab8:	79fb      	ldrb	r3, [r7, #7]
 8007aba:	f003 030f 	and.w	r3, r3, #15
 8007abe:	3b04      	subs	r3, #4
 8007ac0:	0112      	lsls	r2, r2, #4
 8007ac2:	b2d2      	uxtb	r2, r2
 8007ac4:	440b      	add	r3, r1
 8007ac6:	761a      	strb	r2, [r3, #24]
}
 8007ac8:	bf00      	nop
 8007aca:	370c      	adds	r7, #12
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr
 8007ad4:	e000e100 	.word	0xe000e100
 8007ad8:	e000ed00 	.word	0xe000ed00

08007adc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b089      	sub	sp, #36	; 0x24
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f003 0307 	and.w	r3, r3, #7
 8007aee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	f1c3 0307 	rsb	r3, r3, #7
 8007af6:	2b04      	cmp	r3, #4
 8007af8:	bf28      	it	cs
 8007afa:	2304      	movcs	r3, #4
 8007afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	3304      	adds	r3, #4
 8007b02:	2b06      	cmp	r3, #6
 8007b04:	d902      	bls.n	8007b0c <NVIC_EncodePriority+0x30>
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	3b03      	subs	r3, #3
 8007b0a:	e000      	b.n	8007b0e <NVIC_EncodePriority+0x32>
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b10:	f04f 32ff 	mov.w	r2, #4294967295
 8007b14:	69bb      	ldr	r3, [r7, #24]
 8007b16:	fa02 f303 	lsl.w	r3, r2, r3
 8007b1a:	43da      	mvns	r2, r3
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	401a      	ands	r2, r3
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007b24:	f04f 31ff 	mov.w	r1, #4294967295
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8007b2e:	43d9      	mvns	r1, r3
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b34:	4313      	orrs	r3, r2
         );
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3724      	adds	r7, #36	; 0x24
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr

08007b42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007b42:	b580      	push	{r7, lr}
 8007b44:	b082      	sub	sp, #8
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f7ff ff4c 	bl	80079e8 <__NVIC_SetPriorityGrouping>
}
 8007b50:	bf00      	nop
 8007b52:	3708      	adds	r7, #8
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b086      	sub	sp, #24
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	4603      	mov	r3, r0
 8007b60:	60b9      	str	r1, [r7, #8]
 8007b62:	607a      	str	r2, [r7, #4]
 8007b64:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007b66:	2300      	movs	r3, #0
 8007b68:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007b6a:	f7ff ff61 	bl	8007a30 <__NVIC_GetPriorityGrouping>
 8007b6e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	68b9      	ldr	r1, [r7, #8]
 8007b74:	6978      	ldr	r0, [r7, #20]
 8007b76:	f7ff ffb1 	bl	8007adc <NVIC_EncodePriority>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b80:	4611      	mov	r1, r2
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7ff ff80 	bl	8007a88 <__NVIC_SetPriority>
}
 8007b88:	bf00      	nop
 8007b8a:	3718      	adds	r7, #24
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	4603      	mov	r3, r0
 8007b98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7ff ff54 	bl	8007a4c <__NVIC_EnableIRQ>
}
 8007ba4:	bf00      	nop
 8007ba6:	3708      	adds	r7, #8
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b086      	sub	sp, #24
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007bb8:	f7ff ff0a 	bl	80079d0 <HAL_GetTick>
 8007bbc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d101      	bne.n	8007bc8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e099      	b.n	8007cfc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2202      	movs	r2, #2
 8007bcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f022 0201 	bic.w	r2, r2, #1
 8007be6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007be8:	e00f      	b.n	8007c0a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007bea:	f7ff fef1 	bl	80079d0 <HAL_GetTick>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	1ad3      	subs	r3, r2, r3
 8007bf4:	2b05      	cmp	r3, #5
 8007bf6:	d908      	bls.n	8007c0a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2220      	movs	r2, #32
 8007bfc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2203      	movs	r2, #3
 8007c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007c06:	2303      	movs	r3, #3
 8007c08:	e078      	b.n	8007cfc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f003 0301 	and.w	r3, r3, #1
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d1e8      	bne.n	8007bea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007c20:	697a      	ldr	r2, [r7, #20]
 8007c22:	4b38      	ldr	r3, [pc, #224]	; (8007d04 <HAL_DMA_Init+0x158>)
 8007c24:	4013      	ands	r3, r2
 8007c26:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	685a      	ldr	r2, [r3, #4]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007c36:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	691b      	ldr	r3, [r3, #16]
 8007c3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	699b      	ldr	r3, [r3, #24]
 8007c48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6a1b      	ldr	r3, [r3, #32]
 8007c54:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007c56:	697a      	ldr	r2, [r7, #20]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c60:	2b04      	cmp	r3, #4
 8007c62:	d107      	bne.n	8007c74 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	697a      	ldr	r2, [r7, #20]
 8007c70:	4313      	orrs	r3, r2
 8007c72:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	697a      	ldr	r2, [r7, #20]
 8007c7a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	695b      	ldr	r3, [r3, #20]
 8007c82:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	f023 0307 	bic.w	r3, r3, #7
 8007c8a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c90:	697a      	ldr	r2, [r7, #20]
 8007c92:	4313      	orrs	r3, r2
 8007c94:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c9a:	2b04      	cmp	r3, #4
 8007c9c:	d117      	bne.n	8007cce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca2:	697a      	ldr	r2, [r7, #20]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d00e      	beq.n	8007cce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 fb01 	bl	80082b8 <DMA_CheckFifoParam>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d008      	beq.n	8007cce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2240      	movs	r2, #64	; 0x40
 8007cc0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e016      	b.n	8007cfc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	697a      	ldr	r2, [r7, #20]
 8007cd4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 fab8 	bl	800824c <DMA_CalcBaseAndBitshift>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ce4:	223f      	movs	r2, #63	; 0x3f
 8007ce6:	409a      	lsls	r2, r3
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007cfa:	2300      	movs	r3, #0
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3718      	adds	r7, #24
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}
 8007d04:	f010803f 	.word	0xf010803f

08007d08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b086      	sub	sp, #24
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	60b9      	str	r1, [r7, #8]
 8007d12:	607a      	str	r2, [r7, #4]
 8007d14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d16:	2300      	movs	r3, #0
 8007d18:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d1e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	d101      	bne.n	8007d2e <HAL_DMA_Start_IT+0x26>
 8007d2a:	2302      	movs	r3, #2
 8007d2c:	e040      	b.n	8007db0 <HAL_DMA_Start_IT+0xa8>
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2201      	movs	r2, #1
 8007d32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d12f      	bne.n	8007da2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2202      	movs	r2, #2
 8007d46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	68b9      	ldr	r1, [r7, #8]
 8007d56:	68f8      	ldr	r0, [r7, #12]
 8007d58:	f000 fa4a 	bl	80081f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d60:	223f      	movs	r2, #63	; 0x3f
 8007d62:	409a      	lsls	r2, r3
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f042 0216 	orr.w	r2, r2, #22
 8007d76:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d007      	beq.n	8007d90 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f042 0208 	orr.w	r2, r2, #8
 8007d8e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f042 0201 	orr.w	r2, r2, #1
 8007d9e:	601a      	str	r2, [r3, #0]
 8007da0:	e005      	b.n	8007dae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2200      	movs	r2, #0
 8007da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007daa:	2302      	movs	r3, #2
 8007dac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3718      	adds	r7, #24
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dc4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007dc6:	f7ff fe03 	bl	80079d0 <HAL_GetTick>
 8007dca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	2b02      	cmp	r3, #2
 8007dd6:	d008      	beq.n	8007dea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2280      	movs	r2, #128	; 0x80
 8007ddc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	e052      	b.n	8007e90 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f022 0216 	bic.w	r2, r2, #22
 8007df8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	695a      	ldr	r2, [r3, #20]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e08:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d103      	bne.n	8007e1a <HAL_DMA_Abort+0x62>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d007      	beq.n	8007e2a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f022 0208 	bic.w	r2, r2, #8
 8007e28:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f022 0201 	bic.w	r2, r2, #1
 8007e38:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007e3a:	e013      	b.n	8007e64 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007e3c:	f7ff fdc8 	bl	80079d0 <HAL_GetTick>
 8007e40:	4602      	mov	r2, r0
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	1ad3      	subs	r3, r2, r3
 8007e46:	2b05      	cmp	r3, #5
 8007e48:	d90c      	bls.n	8007e64 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2220      	movs	r2, #32
 8007e4e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2203      	movs	r2, #3
 8007e54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007e60:	2303      	movs	r3, #3
 8007e62:	e015      	b.n	8007e90 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f003 0301 	and.w	r3, r3, #1
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d1e4      	bne.n	8007e3c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e76:	223f      	movs	r2, #63	; 0x3f
 8007e78:	409a      	lsls	r2, r3
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2201      	movs	r2, #1
 8007e82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007e8e:	2300      	movs	r3, #0
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3710      	adds	r7, #16
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	2b02      	cmp	r3, #2
 8007eaa:	d004      	beq.n	8007eb6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2280      	movs	r2, #128	; 0x80
 8007eb0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e00c      	b.n	8007ed0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2205      	movs	r2, #5
 8007eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f022 0201 	bic.w	r2, r2, #1
 8007ecc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007ece:	2300      	movs	r3, #0
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b086      	sub	sp, #24
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007ee8:	4b8e      	ldr	r3, [pc, #568]	; (8008124 <HAL_DMA_IRQHandler+0x248>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a8e      	ldr	r2, [pc, #568]	; (8008128 <HAL_DMA_IRQHandler+0x24c>)
 8007eee:	fba2 2303 	umull	r2, r3, r2, r3
 8007ef2:	0a9b      	lsrs	r3, r3, #10
 8007ef4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007efa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f06:	2208      	movs	r2, #8
 8007f08:	409a      	lsls	r2, r3
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	4013      	ands	r3, r2
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d01a      	beq.n	8007f48 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f003 0304 	and.w	r3, r3, #4
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d013      	beq.n	8007f48 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f022 0204 	bic.w	r2, r2, #4
 8007f2e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f34:	2208      	movs	r2, #8
 8007f36:	409a      	lsls	r2, r3
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f40:	f043 0201 	orr.w	r2, r3, #1
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	409a      	lsls	r2, r3
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	4013      	ands	r3, r2
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d012      	beq.n	8007f7e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	695b      	ldr	r3, [r3, #20]
 8007f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d00b      	beq.n	8007f7e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	409a      	lsls	r2, r3
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f76:	f043 0202 	orr.w	r2, r3, #2
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f82:	2204      	movs	r2, #4
 8007f84:	409a      	lsls	r2, r3
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	4013      	ands	r3, r2
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d012      	beq.n	8007fb4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f003 0302 	and.w	r3, r3, #2
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d00b      	beq.n	8007fb4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fa0:	2204      	movs	r2, #4
 8007fa2:	409a      	lsls	r2, r3
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fac:	f043 0204 	orr.w	r2, r3, #4
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fb8:	2210      	movs	r2, #16
 8007fba:	409a      	lsls	r2, r3
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	4013      	ands	r3, r2
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d043      	beq.n	800804c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f003 0308 	and.w	r3, r3, #8
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d03c      	beq.n	800804c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fd6:	2210      	movs	r2, #16
 8007fd8:	409a      	lsls	r2, r3
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d018      	beq.n	800801e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d108      	bne.n	800800c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d024      	beq.n	800804c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	4798      	blx	r3
 800800a:	e01f      	b.n	800804c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008010:	2b00      	cmp	r3, #0
 8008012:	d01b      	beq.n	800804c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	4798      	blx	r3
 800801c:	e016      	b.n	800804c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008028:	2b00      	cmp	r3, #0
 800802a:	d107      	bne.n	800803c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f022 0208 	bic.w	r2, r2, #8
 800803a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008040:	2b00      	cmp	r3, #0
 8008042:	d003      	beq.n	800804c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008050:	2220      	movs	r2, #32
 8008052:	409a      	lsls	r2, r3
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	4013      	ands	r3, r2
 8008058:	2b00      	cmp	r3, #0
 800805a:	f000 808f 	beq.w	800817c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f003 0310 	and.w	r3, r3, #16
 8008068:	2b00      	cmp	r3, #0
 800806a:	f000 8087 	beq.w	800817c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008072:	2220      	movs	r2, #32
 8008074:	409a      	lsls	r2, r3
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008080:	b2db      	uxtb	r3, r3
 8008082:	2b05      	cmp	r3, #5
 8008084:	d136      	bne.n	80080f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f022 0216 	bic.w	r2, r2, #22
 8008094:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	695a      	ldr	r2, [r3, #20]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d103      	bne.n	80080b6 <HAL_DMA_IRQHandler+0x1da>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d007      	beq.n	80080c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f022 0208 	bic.w	r2, r2, #8
 80080c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080ca:	223f      	movs	r2, #63	; 0x3f
 80080cc:	409a      	lsls	r2, r3
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2201      	movs	r2, #1
 80080d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d07e      	beq.n	80081e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	4798      	blx	r3
        }
        return;
 80080f2:	e079      	b.n	80081e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d01d      	beq.n	800813e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800810c:	2b00      	cmp	r3, #0
 800810e:	d10d      	bne.n	800812c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008114:	2b00      	cmp	r3, #0
 8008116:	d031      	beq.n	800817c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	4798      	blx	r3
 8008120:	e02c      	b.n	800817c <HAL_DMA_IRQHandler+0x2a0>
 8008122:	bf00      	nop
 8008124:	2000002c 	.word	0x2000002c
 8008128:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008130:	2b00      	cmp	r3, #0
 8008132:	d023      	beq.n	800817c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	4798      	blx	r3
 800813c:	e01e      	b.n	800817c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008148:	2b00      	cmp	r3, #0
 800814a:	d10f      	bne.n	800816c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f022 0210 	bic.w	r2, r2, #16
 800815a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2200      	movs	r2, #0
 8008168:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008170:	2b00      	cmp	r3, #0
 8008172:	d003      	beq.n	800817c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008180:	2b00      	cmp	r3, #0
 8008182:	d032      	beq.n	80081ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008188:	f003 0301 	and.w	r3, r3, #1
 800818c:	2b00      	cmp	r3, #0
 800818e:	d022      	beq.n	80081d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2205      	movs	r2, #5
 8008194:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f022 0201 	bic.w	r2, r2, #1
 80081a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	3301      	adds	r3, #1
 80081ac:	60bb      	str	r3, [r7, #8]
 80081ae:	697a      	ldr	r2, [r7, #20]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d307      	bcc.n	80081c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f003 0301 	and.w	r3, r3, #1
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d1f2      	bne.n	80081a8 <HAL_DMA_IRQHandler+0x2cc>
 80081c2:	e000      	b.n	80081c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80081c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2201      	movs	r2, #1
 80081ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d005      	beq.n	80081ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	4798      	blx	r3
 80081e6:	e000      	b.n	80081ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80081e8:	bf00      	nop
    }
  }
}
 80081ea:	3718      	adds	r7, #24
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b085      	sub	sp, #20
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	607a      	str	r2, [r7, #4]
 80081fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800820c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	683a      	ldr	r2, [r7, #0]
 8008214:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	2b40      	cmp	r3, #64	; 0x40
 800821c:	d108      	bne.n	8008230 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	68ba      	ldr	r2, [r7, #8]
 800822c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800822e:	e007      	b.n	8008240 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	68ba      	ldr	r2, [r7, #8]
 8008236:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	60da      	str	r2, [r3, #12]
}
 8008240:	bf00      	nop
 8008242:	3714      	adds	r7, #20
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800824c:	b480      	push	{r7}
 800824e:	b085      	sub	sp, #20
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	b2db      	uxtb	r3, r3
 800825a:	3b10      	subs	r3, #16
 800825c:	4a14      	ldr	r2, [pc, #80]	; (80082b0 <DMA_CalcBaseAndBitshift+0x64>)
 800825e:	fba2 2303 	umull	r2, r3, r2, r3
 8008262:	091b      	lsrs	r3, r3, #4
 8008264:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008266:	4a13      	ldr	r2, [pc, #76]	; (80082b4 <DMA_CalcBaseAndBitshift+0x68>)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	4413      	add	r3, r2
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	461a      	mov	r2, r3
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2b03      	cmp	r3, #3
 8008278:	d909      	bls.n	800828e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008282:	f023 0303 	bic.w	r3, r3, #3
 8008286:	1d1a      	adds	r2, r3, #4
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	659a      	str	r2, [r3, #88]	; 0x58
 800828c:	e007      	b.n	800829e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008296:	f023 0303 	bic.w	r3, r3, #3
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3714      	adds	r7, #20
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr
 80082ae:	bf00      	nop
 80082b0:	aaaaaaab 	.word	0xaaaaaaab
 80082b4:	0800f4a0 	.word	0x0800f4a0

080082b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b085      	sub	sp, #20
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082c0:	2300      	movs	r3, #0
 80082c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	699b      	ldr	r3, [r3, #24]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d11f      	bne.n	8008312 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	2b03      	cmp	r3, #3
 80082d6:	d856      	bhi.n	8008386 <DMA_CheckFifoParam+0xce>
 80082d8:	a201      	add	r2, pc, #4	; (adr r2, 80082e0 <DMA_CheckFifoParam+0x28>)
 80082da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082de:	bf00      	nop
 80082e0:	080082f1 	.word	0x080082f1
 80082e4:	08008303 	.word	0x08008303
 80082e8:	080082f1 	.word	0x080082f1
 80082ec:	08008387 	.word	0x08008387
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d046      	beq.n	800838a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80082fc:	2301      	movs	r3, #1
 80082fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008300:	e043      	b.n	800838a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008306:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800830a:	d140      	bne.n	800838e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800830c:	2301      	movs	r3, #1
 800830e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008310:	e03d      	b.n	800838e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	699b      	ldr	r3, [r3, #24]
 8008316:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800831a:	d121      	bne.n	8008360 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	2b03      	cmp	r3, #3
 8008320:	d837      	bhi.n	8008392 <DMA_CheckFifoParam+0xda>
 8008322:	a201      	add	r2, pc, #4	; (adr r2, 8008328 <DMA_CheckFifoParam+0x70>)
 8008324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008328:	08008339 	.word	0x08008339
 800832c:	0800833f 	.word	0x0800833f
 8008330:	08008339 	.word	0x08008339
 8008334:	08008351 	.word	0x08008351
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008338:	2301      	movs	r3, #1
 800833a:	73fb      	strb	r3, [r7, #15]
      break;
 800833c:	e030      	b.n	80083a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008342:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008346:	2b00      	cmp	r3, #0
 8008348:	d025      	beq.n	8008396 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800834e:	e022      	b.n	8008396 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008354:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008358:	d11f      	bne.n	800839a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800835e:	e01c      	b.n	800839a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	2b02      	cmp	r3, #2
 8008364:	d903      	bls.n	800836e <DMA_CheckFifoParam+0xb6>
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	2b03      	cmp	r3, #3
 800836a:	d003      	beq.n	8008374 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800836c:	e018      	b.n	80083a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	73fb      	strb	r3, [r7, #15]
      break;
 8008372:	e015      	b.n	80083a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008378:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800837c:	2b00      	cmp	r3, #0
 800837e:	d00e      	beq.n	800839e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	73fb      	strb	r3, [r7, #15]
      break;
 8008384:	e00b      	b.n	800839e <DMA_CheckFifoParam+0xe6>
      break;
 8008386:	bf00      	nop
 8008388:	e00a      	b.n	80083a0 <DMA_CheckFifoParam+0xe8>
      break;
 800838a:	bf00      	nop
 800838c:	e008      	b.n	80083a0 <DMA_CheckFifoParam+0xe8>
      break;
 800838e:	bf00      	nop
 8008390:	e006      	b.n	80083a0 <DMA_CheckFifoParam+0xe8>
      break;
 8008392:	bf00      	nop
 8008394:	e004      	b.n	80083a0 <DMA_CheckFifoParam+0xe8>
      break;
 8008396:	bf00      	nop
 8008398:	e002      	b.n	80083a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800839a:	bf00      	nop
 800839c:	e000      	b.n	80083a0 <DMA_CheckFifoParam+0xe8>
      break;
 800839e:	bf00      	nop
    }
  } 
  
  return status; 
 80083a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3714      	adds	r7, #20
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop

080083b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b089      	sub	sp, #36	; 0x24
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80083ba:	2300      	movs	r3, #0
 80083bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80083be:	2300      	movs	r3, #0
 80083c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80083c2:	2300      	movs	r3, #0
 80083c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80083c6:	2300      	movs	r3, #0
 80083c8:	61fb      	str	r3, [r7, #28]
 80083ca:	e16b      	b.n	80086a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80083cc:	2201      	movs	r2, #1
 80083ce:	69fb      	ldr	r3, [r7, #28]
 80083d0:	fa02 f303 	lsl.w	r3, r2, r3
 80083d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	697a      	ldr	r2, [r7, #20]
 80083dc:	4013      	ands	r3, r2
 80083de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80083e0:	693a      	ldr	r2, [r7, #16]
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	429a      	cmp	r2, r3
 80083e6:	f040 815a 	bne.w	800869e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	f003 0303 	and.w	r3, r3, #3
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d005      	beq.n	8008402 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80083fe:	2b02      	cmp	r3, #2
 8008400:	d130      	bne.n	8008464 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	689b      	ldr	r3, [r3, #8]
 8008406:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008408:	69fb      	ldr	r3, [r7, #28]
 800840a:	005b      	lsls	r3, r3, #1
 800840c:	2203      	movs	r2, #3
 800840e:	fa02 f303 	lsl.w	r3, r2, r3
 8008412:	43db      	mvns	r3, r3
 8008414:	69ba      	ldr	r2, [r7, #24]
 8008416:	4013      	ands	r3, r2
 8008418:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	68da      	ldr	r2, [r3, #12]
 800841e:	69fb      	ldr	r3, [r7, #28]
 8008420:	005b      	lsls	r3, r3, #1
 8008422:	fa02 f303 	lsl.w	r3, r2, r3
 8008426:	69ba      	ldr	r2, [r7, #24]
 8008428:	4313      	orrs	r3, r2
 800842a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	69ba      	ldr	r2, [r7, #24]
 8008430:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008438:	2201      	movs	r2, #1
 800843a:	69fb      	ldr	r3, [r7, #28]
 800843c:	fa02 f303 	lsl.w	r3, r2, r3
 8008440:	43db      	mvns	r3, r3
 8008442:	69ba      	ldr	r2, [r7, #24]
 8008444:	4013      	ands	r3, r2
 8008446:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	091b      	lsrs	r3, r3, #4
 800844e:	f003 0201 	and.w	r2, r3, #1
 8008452:	69fb      	ldr	r3, [r7, #28]
 8008454:	fa02 f303 	lsl.w	r3, r2, r3
 8008458:	69ba      	ldr	r2, [r7, #24]
 800845a:	4313      	orrs	r3, r2
 800845c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	69ba      	ldr	r2, [r7, #24]
 8008462:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	f003 0303 	and.w	r3, r3, #3
 800846c:	2b03      	cmp	r3, #3
 800846e:	d017      	beq.n	80084a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008476:	69fb      	ldr	r3, [r7, #28]
 8008478:	005b      	lsls	r3, r3, #1
 800847a:	2203      	movs	r2, #3
 800847c:	fa02 f303 	lsl.w	r3, r2, r3
 8008480:	43db      	mvns	r3, r3
 8008482:	69ba      	ldr	r2, [r7, #24]
 8008484:	4013      	ands	r3, r2
 8008486:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	689a      	ldr	r2, [r3, #8]
 800848c:	69fb      	ldr	r3, [r7, #28]
 800848e:	005b      	lsls	r3, r3, #1
 8008490:	fa02 f303 	lsl.w	r3, r2, r3
 8008494:	69ba      	ldr	r2, [r7, #24]
 8008496:	4313      	orrs	r3, r2
 8008498:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	69ba      	ldr	r2, [r7, #24]
 800849e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	f003 0303 	and.w	r3, r3, #3
 80084a8:	2b02      	cmp	r3, #2
 80084aa:	d123      	bne.n	80084f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80084ac:	69fb      	ldr	r3, [r7, #28]
 80084ae:	08da      	lsrs	r2, r3, #3
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	3208      	adds	r2, #8
 80084b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80084ba:	69fb      	ldr	r3, [r7, #28]
 80084bc:	f003 0307 	and.w	r3, r3, #7
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	220f      	movs	r2, #15
 80084c4:	fa02 f303 	lsl.w	r3, r2, r3
 80084c8:	43db      	mvns	r3, r3
 80084ca:	69ba      	ldr	r2, [r7, #24]
 80084cc:	4013      	ands	r3, r2
 80084ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	691a      	ldr	r2, [r3, #16]
 80084d4:	69fb      	ldr	r3, [r7, #28]
 80084d6:	f003 0307 	and.w	r3, r3, #7
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	fa02 f303 	lsl.w	r3, r2, r3
 80084e0:	69ba      	ldr	r2, [r7, #24]
 80084e2:	4313      	orrs	r3, r2
 80084e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80084e6:	69fb      	ldr	r3, [r7, #28]
 80084e8:	08da      	lsrs	r2, r3, #3
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	3208      	adds	r2, #8
 80084ee:	69b9      	ldr	r1, [r7, #24]
 80084f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80084fa:	69fb      	ldr	r3, [r7, #28]
 80084fc:	005b      	lsls	r3, r3, #1
 80084fe:	2203      	movs	r2, #3
 8008500:	fa02 f303 	lsl.w	r3, r2, r3
 8008504:	43db      	mvns	r3, r3
 8008506:	69ba      	ldr	r2, [r7, #24]
 8008508:	4013      	ands	r3, r2
 800850a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	f003 0203 	and.w	r2, r3, #3
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	005b      	lsls	r3, r3, #1
 8008518:	fa02 f303 	lsl.w	r3, r2, r3
 800851c:	69ba      	ldr	r2, [r7, #24]
 800851e:	4313      	orrs	r3, r2
 8008520:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	69ba      	ldr	r2, [r7, #24]
 8008526:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008530:	2b00      	cmp	r3, #0
 8008532:	f000 80b4 	beq.w	800869e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008536:	2300      	movs	r3, #0
 8008538:	60fb      	str	r3, [r7, #12]
 800853a:	4b60      	ldr	r3, [pc, #384]	; (80086bc <HAL_GPIO_Init+0x30c>)
 800853c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800853e:	4a5f      	ldr	r2, [pc, #380]	; (80086bc <HAL_GPIO_Init+0x30c>)
 8008540:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008544:	6453      	str	r3, [r2, #68]	; 0x44
 8008546:	4b5d      	ldr	r3, [pc, #372]	; (80086bc <HAL_GPIO_Init+0x30c>)
 8008548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800854a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800854e:	60fb      	str	r3, [r7, #12]
 8008550:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008552:	4a5b      	ldr	r2, [pc, #364]	; (80086c0 <HAL_GPIO_Init+0x310>)
 8008554:	69fb      	ldr	r3, [r7, #28]
 8008556:	089b      	lsrs	r3, r3, #2
 8008558:	3302      	adds	r3, #2
 800855a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800855e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	f003 0303 	and.w	r3, r3, #3
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	220f      	movs	r2, #15
 800856a:	fa02 f303 	lsl.w	r3, r2, r3
 800856e:	43db      	mvns	r3, r3
 8008570:	69ba      	ldr	r2, [r7, #24]
 8008572:	4013      	ands	r3, r2
 8008574:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	4a52      	ldr	r2, [pc, #328]	; (80086c4 <HAL_GPIO_Init+0x314>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d02b      	beq.n	80085d6 <HAL_GPIO_Init+0x226>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	4a51      	ldr	r2, [pc, #324]	; (80086c8 <HAL_GPIO_Init+0x318>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d025      	beq.n	80085d2 <HAL_GPIO_Init+0x222>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	4a50      	ldr	r2, [pc, #320]	; (80086cc <HAL_GPIO_Init+0x31c>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d01f      	beq.n	80085ce <HAL_GPIO_Init+0x21e>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	4a4f      	ldr	r2, [pc, #316]	; (80086d0 <HAL_GPIO_Init+0x320>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d019      	beq.n	80085ca <HAL_GPIO_Init+0x21a>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	4a4e      	ldr	r2, [pc, #312]	; (80086d4 <HAL_GPIO_Init+0x324>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d013      	beq.n	80085c6 <HAL_GPIO_Init+0x216>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	4a4d      	ldr	r2, [pc, #308]	; (80086d8 <HAL_GPIO_Init+0x328>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d00d      	beq.n	80085c2 <HAL_GPIO_Init+0x212>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	4a4c      	ldr	r2, [pc, #304]	; (80086dc <HAL_GPIO_Init+0x32c>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d007      	beq.n	80085be <HAL_GPIO_Init+0x20e>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	4a4b      	ldr	r2, [pc, #300]	; (80086e0 <HAL_GPIO_Init+0x330>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d101      	bne.n	80085ba <HAL_GPIO_Init+0x20a>
 80085b6:	2307      	movs	r3, #7
 80085b8:	e00e      	b.n	80085d8 <HAL_GPIO_Init+0x228>
 80085ba:	2308      	movs	r3, #8
 80085bc:	e00c      	b.n	80085d8 <HAL_GPIO_Init+0x228>
 80085be:	2306      	movs	r3, #6
 80085c0:	e00a      	b.n	80085d8 <HAL_GPIO_Init+0x228>
 80085c2:	2305      	movs	r3, #5
 80085c4:	e008      	b.n	80085d8 <HAL_GPIO_Init+0x228>
 80085c6:	2304      	movs	r3, #4
 80085c8:	e006      	b.n	80085d8 <HAL_GPIO_Init+0x228>
 80085ca:	2303      	movs	r3, #3
 80085cc:	e004      	b.n	80085d8 <HAL_GPIO_Init+0x228>
 80085ce:	2302      	movs	r3, #2
 80085d0:	e002      	b.n	80085d8 <HAL_GPIO_Init+0x228>
 80085d2:	2301      	movs	r3, #1
 80085d4:	e000      	b.n	80085d8 <HAL_GPIO_Init+0x228>
 80085d6:	2300      	movs	r3, #0
 80085d8:	69fa      	ldr	r2, [r7, #28]
 80085da:	f002 0203 	and.w	r2, r2, #3
 80085de:	0092      	lsls	r2, r2, #2
 80085e0:	4093      	lsls	r3, r2
 80085e2:	69ba      	ldr	r2, [r7, #24]
 80085e4:	4313      	orrs	r3, r2
 80085e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80085e8:	4935      	ldr	r1, [pc, #212]	; (80086c0 <HAL_GPIO_Init+0x310>)
 80085ea:	69fb      	ldr	r3, [r7, #28]
 80085ec:	089b      	lsrs	r3, r3, #2
 80085ee:	3302      	adds	r3, #2
 80085f0:	69ba      	ldr	r2, [r7, #24]
 80085f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80085f6:	4b3b      	ldr	r3, [pc, #236]	; (80086e4 <HAL_GPIO_Init+0x334>)
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	43db      	mvns	r3, r3
 8008600:	69ba      	ldr	r2, [r7, #24]
 8008602:	4013      	ands	r3, r2
 8008604:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800860e:	2b00      	cmp	r3, #0
 8008610:	d003      	beq.n	800861a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008612:	69ba      	ldr	r2, [r7, #24]
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	4313      	orrs	r3, r2
 8008618:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800861a:	4a32      	ldr	r2, [pc, #200]	; (80086e4 <HAL_GPIO_Init+0x334>)
 800861c:	69bb      	ldr	r3, [r7, #24]
 800861e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008620:	4b30      	ldr	r3, [pc, #192]	; (80086e4 <HAL_GPIO_Init+0x334>)
 8008622:	68db      	ldr	r3, [r3, #12]
 8008624:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	43db      	mvns	r3, r3
 800862a:	69ba      	ldr	r2, [r7, #24]
 800862c:	4013      	ands	r3, r2
 800862e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008638:	2b00      	cmp	r3, #0
 800863a:	d003      	beq.n	8008644 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800863c:	69ba      	ldr	r2, [r7, #24]
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	4313      	orrs	r3, r2
 8008642:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008644:	4a27      	ldr	r2, [pc, #156]	; (80086e4 <HAL_GPIO_Init+0x334>)
 8008646:	69bb      	ldr	r3, [r7, #24]
 8008648:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800864a:	4b26      	ldr	r3, [pc, #152]	; (80086e4 <HAL_GPIO_Init+0x334>)
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	43db      	mvns	r3, r3
 8008654:	69ba      	ldr	r2, [r7, #24]
 8008656:	4013      	ands	r3, r2
 8008658:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008662:	2b00      	cmp	r3, #0
 8008664:	d003      	beq.n	800866e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8008666:	69ba      	ldr	r2, [r7, #24]
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	4313      	orrs	r3, r2
 800866c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800866e:	4a1d      	ldr	r2, [pc, #116]	; (80086e4 <HAL_GPIO_Init+0x334>)
 8008670:	69bb      	ldr	r3, [r7, #24]
 8008672:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008674:	4b1b      	ldr	r3, [pc, #108]	; (80086e4 <HAL_GPIO_Init+0x334>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	43db      	mvns	r3, r3
 800867e:	69ba      	ldr	r2, [r7, #24]
 8008680:	4013      	ands	r3, r2
 8008682:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800868c:	2b00      	cmp	r3, #0
 800868e:	d003      	beq.n	8008698 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008690:	69ba      	ldr	r2, [r7, #24]
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	4313      	orrs	r3, r2
 8008696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008698:	4a12      	ldr	r2, [pc, #72]	; (80086e4 <HAL_GPIO_Init+0x334>)
 800869a:	69bb      	ldr	r3, [r7, #24]
 800869c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800869e:	69fb      	ldr	r3, [r7, #28]
 80086a0:	3301      	adds	r3, #1
 80086a2:	61fb      	str	r3, [r7, #28]
 80086a4:	69fb      	ldr	r3, [r7, #28]
 80086a6:	2b0f      	cmp	r3, #15
 80086a8:	f67f ae90 	bls.w	80083cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80086ac:	bf00      	nop
 80086ae:	bf00      	nop
 80086b0:	3724      	adds	r7, #36	; 0x24
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr
 80086ba:	bf00      	nop
 80086bc:	40023800 	.word	0x40023800
 80086c0:	40013800 	.word	0x40013800
 80086c4:	40020000 	.word	0x40020000
 80086c8:	40020400 	.word	0x40020400
 80086cc:	40020800 	.word	0x40020800
 80086d0:	40020c00 	.word	0x40020c00
 80086d4:	40021000 	.word	0x40021000
 80086d8:	40021400 	.word	0x40021400
 80086dc:	40021800 	.word	0x40021800
 80086e0:	40021c00 	.word	0x40021c00
 80086e4:	40013c00 	.word	0x40013c00

080086e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	460b      	mov	r3, r1
 80086f2:	807b      	strh	r3, [r7, #2]
 80086f4:	4613      	mov	r3, r2
 80086f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80086f8:	787b      	ldrb	r3, [r7, #1]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d003      	beq.n	8008706 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80086fe:	887a      	ldrh	r2, [r7, #2]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008704:	e003      	b.n	800870e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008706:	887b      	ldrh	r3, [r7, #2]
 8008708:	041a      	lsls	r2, r3, #16
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	619a      	str	r2, [r3, #24]
}
 800870e:	bf00      	nop
 8008710:	370c      	adds	r7, #12
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr
	...

0800871c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b086      	sub	sp, #24
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d101      	bne.n	800872e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800872a:	2301      	movs	r3, #1
 800872c:	e267      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f003 0301 	and.w	r3, r3, #1
 8008736:	2b00      	cmp	r3, #0
 8008738:	d075      	beq.n	8008826 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800873a:	4b88      	ldr	r3, [pc, #544]	; (800895c <HAL_RCC_OscConfig+0x240>)
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	f003 030c 	and.w	r3, r3, #12
 8008742:	2b04      	cmp	r3, #4
 8008744:	d00c      	beq.n	8008760 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008746:	4b85      	ldr	r3, [pc, #532]	; (800895c <HAL_RCC_OscConfig+0x240>)
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800874e:	2b08      	cmp	r3, #8
 8008750:	d112      	bne.n	8008778 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008752:	4b82      	ldr	r3, [pc, #520]	; (800895c <HAL_RCC_OscConfig+0x240>)
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800875a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800875e:	d10b      	bne.n	8008778 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008760:	4b7e      	ldr	r3, [pc, #504]	; (800895c <HAL_RCC_OscConfig+0x240>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008768:	2b00      	cmp	r3, #0
 800876a:	d05b      	beq.n	8008824 <HAL_RCC_OscConfig+0x108>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d157      	bne.n	8008824 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008774:	2301      	movs	r3, #1
 8008776:	e242      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008780:	d106      	bne.n	8008790 <HAL_RCC_OscConfig+0x74>
 8008782:	4b76      	ldr	r3, [pc, #472]	; (800895c <HAL_RCC_OscConfig+0x240>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a75      	ldr	r2, [pc, #468]	; (800895c <HAL_RCC_OscConfig+0x240>)
 8008788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800878c:	6013      	str	r3, [r2, #0]
 800878e:	e01d      	b.n	80087cc <HAL_RCC_OscConfig+0xb0>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008798:	d10c      	bne.n	80087b4 <HAL_RCC_OscConfig+0x98>
 800879a:	4b70      	ldr	r3, [pc, #448]	; (800895c <HAL_RCC_OscConfig+0x240>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a6f      	ldr	r2, [pc, #444]	; (800895c <HAL_RCC_OscConfig+0x240>)
 80087a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80087a4:	6013      	str	r3, [r2, #0]
 80087a6:	4b6d      	ldr	r3, [pc, #436]	; (800895c <HAL_RCC_OscConfig+0x240>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a6c      	ldr	r2, [pc, #432]	; (800895c <HAL_RCC_OscConfig+0x240>)
 80087ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087b0:	6013      	str	r3, [r2, #0]
 80087b2:	e00b      	b.n	80087cc <HAL_RCC_OscConfig+0xb0>
 80087b4:	4b69      	ldr	r3, [pc, #420]	; (800895c <HAL_RCC_OscConfig+0x240>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a68      	ldr	r2, [pc, #416]	; (800895c <HAL_RCC_OscConfig+0x240>)
 80087ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087be:	6013      	str	r3, [r2, #0]
 80087c0:	4b66      	ldr	r3, [pc, #408]	; (800895c <HAL_RCC_OscConfig+0x240>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a65      	ldr	r2, [pc, #404]	; (800895c <HAL_RCC_OscConfig+0x240>)
 80087c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d013      	beq.n	80087fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087d4:	f7ff f8fc 	bl	80079d0 <HAL_GetTick>
 80087d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087da:	e008      	b.n	80087ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80087dc:	f7ff f8f8 	bl	80079d0 <HAL_GetTick>
 80087e0:	4602      	mov	r2, r0
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	1ad3      	subs	r3, r2, r3
 80087e6:	2b64      	cmp	r3, #100	; 0x64
 80087e8:	d901      	bls.n	80087ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80087ea:	2303      	movs	r3, #3
 80087ec:	e207      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087ee:	4b5b      	ldr	r3, [pc, #364]	; (800895c <HAL_RCC_OscConfig+0x240>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d0f0      	beq.n	80087dc <HAL_RCC_OscConfig+0xc0>
 80087fa:	e014      	b.n	8008826 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087fc:	f7ff f8e8 	bl	80079d0 <HAL_GetTick>
 8008800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008802:	e008      	b.n	8008816 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008804:	f7ff f8e4 	bl	80079d0 <HAL_GetTick>
 8008808:	4602      	mov	r2, r0
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	1ad3      	subs	r3, r2, r3
 800880e:	2b64      	cmp	r3, #100	; 0x64
 8008810:	d901      	bls.n	8008816 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008812:	2303      	movs	r3, #3
 8008814:	e1f3      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008816:	4b51      	ldr	r3, [pc, #324]	; (800895c <HAL_RCC_OscConfig+0x240>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800881e:	2b00      	cmp	r3, #0
 8008820:	d1f0      	bne.n	8008804 <HAL_RCC_OscConfig+0xe8>
 8008822:	e000      	b.n	8008826 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008824:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f003 0302 	and.w	r3, r3, #2
 800882e:	2b00      	cmp	r3, #0
 8008830:	d063      	beq.n	80088fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008832:	4b4a      	ldr	r3, [pc, #296]	; (800895c <HAL_RCC_OscConfig+0x240>)
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	f003 030c 	and.w	r3, r3, #12
 800883a:	2b00      	cmp	r3, #0
 800883c:	d00b      	beq.n	8008856 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800883e:	4b47      	ldr	r3, [pc, #284]	; (800895c <HAL_RCC_OscConfig+0x240>)
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008846:	2b08      	cmp	r3, #8
 8008848:	d11c      	bne.n	8008884 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800884a:	4b44      	ldr	r3, [pc, #272]	; (800895c <HAL_RCC_OscConfig+0x240>)
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008852:	2b00      	cmp	r3, #0
 8008854:	d116      	bne.n	8008884 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008856:	4b41      	ldr	r3, [pc, #260]	; (800895c <HAL_RCC_OscConfig+0x240>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f003 0302 	and.w	r3, r3, #2
 800885e:	2b00      	cmp	r3, #0
 8008860:	d005      	beq.n	800886e <HAL_RCC_OscConfig+0x152>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	68db      	ldr	r3, [r3, #12]
 8008866:	2b01      	cmp	r3, #1
 8008868:	d001      	beq.n	800886e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800886a:	2301      	movs	r3, #1
 800886c:	e1c7      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800886e:	4b3b      	ldr	r3, [pc, #236]	; (800895c <HAL_RCC_OscConfig+0x240>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	691b      	ldr	r3, [r3, #16]
 800887a:	00db      	lsls	r3, r3, #3
 800887c:	4937      	ldr	r1, [pc, #220]	; (800895c <HAL_RCC_OscConfig+0x240>)
 800887e:	4313      	orrs	r3, r2
 8008880:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008882:	e03a      	b.n	80088fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d020      	beq.n	80088ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800888c:	4b34      	ldr	r3, [pc, #208]	; (8008960 <HAL_RCC_OscConfig+0x244>)
 800888e:	2201      	movs	r2, #1
 8008890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008892:	f7ff f89d 	bl	80079d0 <HAL_GetTick>
 8008896:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008898:	e008      	b.n	80088ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800889a:	f7ff f899 	bl	80079d0 <HAL_GetTick>
 800889e:	4602      	mov	r2, r0
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	1ad3      	subs	r3, r2, r3
 80088a4:	2b02      	cmp	r3, #2
 80088a6:	d901      	bls.n	80088ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80088a8:	2303      	movs	r3, #3
 80088aa:	e1a8      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80088ac:	4b2b      	ldr	r3, [pc, #172]	; (800895c <HAL_RCC_OscConfig+0x240>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f003 0302 	and.w	r3, r3, #2
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d0f0      	beq.n	800889a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088b8:	4b28      	ldr	r3, [pc, #160]	; (800895c <HAL_RCC_OscConfig+0x240>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	691b      	ldr	r3, [r3, #16]
 80088c4:	00db      	lsls	r3, r3, #3
 80088c6:	4925      	ldr	r1, [pc, #148]	; (800895c <HAL_RCC_OscConfig+0x240>)
 80088c8:	4313      	orrs	r3, r2
 80088ca:	600b      	str	r3, [r1, #0]
 80088cc:	e015      	b.n	80088fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80088ce:	4b24      	ldr	r3, [pc, #144]	; (8008960 <HAL_RCC_OscConfig+0x244>)
 80088d0:	2200      	movs	r2, #0
 80088d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088d4:	f7ff f87c 	bl	80079d0 <HAL_GetTick>
 80088d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80088da:	e008      	b.n	80088ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80088dc:	f7ff f878 	bl	80079d0 <HAL_GetTick>
 80088e0:	4602      	mov	r2, r0
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	1ad3      	subs	r3, r2, r3
 80088e6:	2b02      	cmp	r3, #2
 80088e8:	d901      	bls.n	80088ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80088ea:	2303      	movs	r3, #3
 80088ec:	e187      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80088ee:	4b1b      	ldr	r3, [pc, #108]	; (800895c <HAL_RCC_OscConfig+0x240>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f003 0302 	and.w	r3, r3, #2
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d1f0      	bne.n	80088dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f003 0308 	and.w	r3, r3, #8
 8008902:	2b00      	cmp	r3, #0
 8008904:	d036      	beq.n	8008974 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	695b      	ldr	r3, [r3, #20]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d016      	beq.n	800893c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800890e:	4b15      	ldr	r3, [pc, #84]	; (8008964 <HAL_RCC_OscConfig+0x248>)
 8008910:	2201      	movs	r2, #1
 8008912:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008914:	f7ff f85c 	bl	80079d0 <HAL_GetTick>
 8008918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800891a:	e008      	b.n	800892e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800891c:	f7ff f858 	bl	80079d0 <HAL_GetTick>
 8008920:	4602      	mov	r2, r0
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	1ad3      	subs	r3, r2, r3
 8008926:	2b02      	cmp	r3, #2
 8008928:	d901      	bls.n	800892e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800892a:	2303      	movs	r3, #3
 800892c:	e167      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800892e:	4b0b      	ldr	r3, [pc, #44]	; (800895c <HAL_RCC_OscConfig+0x240>)
 8008930:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008932:	f003 0302 	and.w	r3, r3, #2
 8008936:	2b00      	cmp	r3, #0
 8008938:	d0f0      	beq.n	800891c <HAL_RCC_OscConfig+0x200>
 800893a:	e01b      	b.n	8008974 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800893c:	4b09      	ldr	r3, [pc, #36]	; (8008964 <HAL_RCC_OscConfig+0x248>)
 800893e:	2200      	movs	r2, #0
 8008940:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008942:	f7ff f845 	bl	80079d0 <HAL_GetTick>
 8008946:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008948:	e00e      	b.n	8008968 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800894a:	f7ff f841 	bl	80079d0 <HAL_GetTick>
 800894e:	4602      	mov	r2, r0
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	1ad3      	subs	r3, r2, r3
 8008954:	2b02      	cmp	r3, #2
 8008956:	d907      	bls.n	8008968 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008958:	2303      	movs	r3, #3
 800895a:	e150      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
 800895c:	40023800 	.word	0x40023800
 8008960:	42470000 	.word	0x42470000
 8008964:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008968:	4b88      	ldr	r3, [pc, #544]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 800896a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800896c:	f003 0302 	and.w	r3, r3, #2
 8008970:	2b00      	cmp	r3, #0
 8008972:	d1ea      	bne.n	800894a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f003 0304 	and.w	r3, r3, #4
 800897c:	2b00      	cmp	r3, #0
 800897e:	f000 8097 	beq.w	8008ab0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008982:	2300      	movs	r3, #0
 8008984:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008986:	4b81      	ldr	r3, [pc, #516]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800898a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800898e:	2b00      	cmp	r3, #0
 8008990:	d10f      	bne.n	80089b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008992:	2300      	movs	r3, #0
 8008994:	60bb      	str	r3, [r7, #8]
 8008996:	4b7d      	ldr	r3, [pc, #500]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800899a:	4a7c      	ldr	r2, [pc, #496]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 800899c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089a0:	6413      	str	r3, [r2, #64]	; 0x40
 80089a2:	4b7a      	ldr	r3, [pc, #488]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 80089a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089aa:	60bb      	str	r3, [r7, #8]
 80089ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80089ae:	2301      	movs	r3, #1
 80089b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089b2:	4b77      	ldr	r3, [pc, #476]	; (8008b90 <HAL_RCC_OscConfig+0x474>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d118      	bne.n	80089f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80089be:	4b74      	ldr	r3, [pc, #464]	; (8008b90 <HAL_RCC_OscConfig+0x474>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a73      	ldr	r2, [pc, #460]	; (8008b90 <HAL_RCC_OscConfig+0x474>)
 80089c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80089ca:	f7ff f801 	bl	80079d0 <HAL_GetTick>
 80089ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089d0:	e008      	b.n	80089e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089d2:	f7fe fffd 	bl	80079d0 <HAL_GetTick>
 80089d6:	4602      	mov	r2, r0
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	1ad3      	subs	r3, r2, r3
 80089dc:	2b02      	cmp	r3, #2
 80089de:	d901      	bls.n	80089e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80089e0:	2303      	movs	r3, #3
 80089e2:	e10c      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089e4:	4b6a      	ldr	r3, [pc, #424]	; (8008b90 <HAL_RCC_OscConfig+0x474>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d0f0      	beq.n	80089d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d106      	bne.n	8008a06 <HAL_RCC_OscConfig+0x2ea>
 80089f8:	4b64      	ldr	r3, [pc, #400]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 80089fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089fc:	4a63      	ldr	r2, [pc, #396]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 80089fe:	f043 0301 	orr.w	r3, r3, #1
 8008a02:	6713      	str	r3, [r2, #112]	; 0x70
 8008a04:	e01c      	b.n	8008a40 <HAL_RCC_OscConfig+0x324>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	2b05      	cmp	r3, #5
 8008a0c:	d10c      	bne.n	8008a28 <HAL_RCC_OscConfig+0x30c>
 8008a0e:	4b5f      	ldr	r3, [pc, #380]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a12:	4a5e      	ldr	r2, [pc, #376]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008a14:	f043 0304 	orr.w	r3, r3, #4
 8008a18:	6713      	str	r3, [r2, #112]	; 0x70
 8008a1a:	4b5c      	ldr	r3, [pc, #368]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a1e:	4a5b      	ldr	r2, [pc, #364]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008a20:	f043 0301 	orr.w	r3, r3, #1
 8008a24:	6713      	str	r3, [r2, #112]	; 0x70
 8008a26:	e00b      	b.n	8008a40 <HAL_RCC_OscConfig+0x324>
 8008a28:	4b58      	ldr	r3, [pc, #352]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a2c:	4a57      	ldr	r2, [pc, #348]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008a2e:	f023 0301 	bic.w	r3, r3, #1
 8008a32:	6713      	str	r3, [r2, #112]	; 0x70
 8008a34:	4b55      	ldr	r3, [pc, #340]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a38:	4a54      	ldr	r2, [pc, #336]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008a3a:	f023 0304 	bic.w	r3, r3, #4
 8008a3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d015      	beq.n	8008a74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a48:	f7fe ffc2 	bl	80079d0 <HAL_GetTick>
 8008a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a4e:	e00a      	b.n	8008a66 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a50:	f7fe ffbe 	bl	80079d0 <HAL_GetTick>
 8008a54:	4602      	mov	r2, r0
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	1ad3      	subs	r3, r2, r3
 8008a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d901      	bls.n	8008a66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008a62:	2303      	movs	r3, #3
 8008a64:	e0cb      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a66:	4b49      	ldr	r3, [pc, #292]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a6a:	f003 0302 	and.w	r3, r3, #2
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d0ee      	beq.n	8008a50 <HAL_RCC_OscConfig+0x334>
 8008a72:	e014      	b.n	8008a9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a74:	f7fe ffac 	bl	80079d0 <HAL_GetTick>
 8008a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a7a:	e00a      	b.n	8008a92 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a7c:	f7fe ffa8 	bl	80079d0 <HAL_GetTick>
 8008a80:	4602      	mov	r2, r0
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	1ad3      	subs	r3, r2, r3
 8008a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d901      	bls.n	8008a92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008a8e:	2303      	movs	r3, #3
 8008a90:	e0b5      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a92:	4b3e      	ldr	r3, [pc, #248]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a96:	f003 0302 	and.w	r3, r3, #2
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d1ee      	bne.n	8008a7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008a9e:	7dfb      	ldrb	r3, [r7, #23]
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d105      	bne.n	8008ab0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008aa4:	4b39      	ldr	r3, [pc, #228]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa8:	4a38      	ldr	r2, [pc, #224]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008aaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008aae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	699b      	ldr	r3, [r3, #24]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	f000 80a1 	beq.w	8008bfc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008aba:	4b34      	ldr	r3, [pc, #208]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008abc:	689b      	ldr	r3, [r3, #8]
 8008abe:	f003 030c 	and.w	r3, r3, #12
 8008ac2:	2b08      	cmp	r3, #8
 8008ac4:	d05c      	beq.n	8008b80 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	699b      	ldr	r3, [r3, #24]
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	d141      	bne.n	8008b52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ace:	4b31      	ldr	r3, [pc, #196]	; (8008b94 <HAL_RCC_OscConfig+0x478>)
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ad4:	f7fe ff7c 	bl	80079d0 <HAL_GetTick>
 8008ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ada:	e008      	b.n	8008aee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008adc:	f7fe ff78 	bl	80079d0 <HAL_GetTick>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	1ad3      	subs	r3, r2, r3
 8008ae6:	2b02      	cmp	r3, #2
 8008ae8:	d901      	bls.n	8008aee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008aea:	2303      	movs	r3, #3
 8008aec:	e087      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008aee:	4b27      	ldr	r3, [pc, #156]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d1f0      	bne.n	8008adc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	69da      	ldr	r2, [r3, #28]
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6a1b      	ldr	r3, [r3, #32]
 8008b02:	431a      	orrs	r2, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b08:	019b      	lsls	r3, r3, #6
 8008b0a:	431a      	orrs	r2, r3
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b10:	085b      	lsrs	r3, r3, #1
 8008b12:	3b01      	subs	r3, #1
 8008b14:	041b      	lsls	r3, r3, #16
 8008b16:	431a      	orrs	r2, r3
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b1c:	061b      	lsls	r3, r3, #24
 8008b1e:	491b      	ldr	r1, [pc, #108]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008b20:	4313      	orrs	r3, r2
 8008b22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008b24:	4b1b      	ldr	r3, [pc, #108]	; (8008b94 <HAL_RCC_OscConfig+0x478>)
 8008b26:	2201      	movs	r2, #1
 8008b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b2a:	f7fe ff51 	bl	80079d0 <HAL_GetTick>
 8008b2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b30:	e008      	b.n	8008b44 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b32:	f7fe ff4d 	bl	80079d0 <HAL_GetTick>
 8008b36:	4602      	mov	r2, r0
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	1ad3      	subs	r3, r2, r3
 8008b3c:	2b02      	cmp	r3, #2
 8008b3e:	d901      	bls.n	8008b44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008b40:	2303      	movs	r3, #3
 8008b42:	e05c      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b44:	4b11      	ldr	r3, [pc, #68]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d0f0      	beq.n	8008b32 <HAL_RCC_OscConfig+0x416>
 8008b50:	e054      	b.n	8008bfc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b52:	4b10      	ldr	r3, [pc, #64]	; (8008b94 <HAL_RCC_OscConfig+0x478>)
 8008b54:	2200      	movs	r2, #0
 8008b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b58:	f7fe ff3a 	bl	80079d0 <HAL_GetTick>
 8008b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b5e:	e008      	b.n	8008b72 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b60:	f7fe ff36 	bl	80079d0 <HAL_GetTick>
 8008b64:	4602      	mov	r2, r0
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	1ad3      	subs	r3, r2, r3
 8008b6a:	2b02      	cmp	r3, #2
 8008b6c:	d901      	bls.n	8008b72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008b6e:	2303      	movs	r3, #3
 8008b70:	e045      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b72:	4b06      	ldr	r3, [pc, #24]	; (8008b8c <HAL_RCC_OscConfig+0x470>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d1f0      	bne.n	8008b60 <HAL_RCC_OscConfig+0x444>
 8008b7e:	e03d      	b.n	8008bfc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	699b      	ldr	r3, [r3, #24]
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d107      	bne.n	8008b98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	e038      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
 8008b8c:	40023800 	.word	0x40023800
 8008b90:	40007000 	.word	0x40007000
 8008b94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008b98:	4b1b      	ldr	r3, [pc, #108]	; (8008c08 <HAL_RCC_OscConfig+0x4ec>)
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	699b      	ldr	r3, [r3, #24]
 8008ba2:	2b01      	cmp	r3, #1
 8008ba4:	d028      	beq.n	8008bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d121      	bne.n	8008bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d11a      	bne.n	8008bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008bc2:	68fa      	ldr	r2, [r7, #12]
 8008bc4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008bc8:	4013      	ands	r3, r2
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008bce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d111      	bne.n	8008bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bde:	085b      	lsrs	r3, r3, #1
 8008be0:	3b01      	subs	r3, #1
 8008be2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d107      	bne.n	8008bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d001      	beq.n	8008bfc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	e000      	b.n	8008bfe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008bfc:	2300      	movs	r3, #0
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3718      	adds	r7, #24
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop
 8008c08:	40023800 	.word	0x40023800

08008c0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d101      	bne.n	8008c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	e0cc      	b.n	8008dba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008c20:	4b68      	ldr	r3, [pc, #416]	; (8008dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f003 0307 	and.w	r3, r3, #7
 8008c28:	683a      	ldr	r2, [r7, #0]
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d90c      	bls.n	8008c48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c2e:	4b65      	ldr	r3, [pc, #404]	; (8008dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8008c30:	683a      	ldr	r2, [r7, #0]
 8008c32:	b2d2      	uxtb	r2, r2
 8008c34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c36:	4b63      	ldr	r3, [pc, #396]	; (8008dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f003 0307 	and.w	r3, r3, #7
 8008c3e:	683a      	ldr	r2, [r7, #0]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d001      	beq.n	8008c48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008c44:	2301      	movs	r3, #1
 8008c46:	e0b8      	b.n	8008dba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f003 0302 	and.w	r3, r3, #2
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d020      	beq.n	8008c96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f003 0304 	and.w	r3, r3, #4
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d005      	beq.n	8008c6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008c60:	4b59      	ldr	r3, [pc, #356]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	4a58      	ldr	r2, [pc, #352]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008c66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008c6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f003 0308 	and.w	r3, r3, #8
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d005      	beq.n	8008c84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008c78:	4b53      	ldr	r3, [pc, #332]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	4a52      	ldr	r2, [pc, #328]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008c7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008c82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c84:	4b50      	ldr	r3, [pc, #320]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008c86:	689b      	ldr	r3, [r3, #8]
 8008c88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	494d      	ldr	r1, [pc, #308]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008c92:	4313      	orrs	r3, r2
 8008c94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f003 0301 	and.w	r3, r3, #1
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d044      	beq.n	8008d2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d107      	bne.n	8008cba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008caa:	4b47      	ldr	r3, [pc, #284]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d119      	bne.n	8008cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e07f      	b.n	8008dba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	2b02      	cmp	r3, #2
 8008cc0:	d003      	beq.n	8008cca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008cc6:	2b03      	cmp	r3, #3
 8008cc8:	d107      	bne.n	8008cda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008cca:	4b3f      	ldr	r3, [pc, #252]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d109      	bne.n	8008cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e06f      	b.n	8008dba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008cda:	4b3b      	ldr	r3, [pc, #236]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f003 0302 	and.w	r3, r3, #2
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d101      	bne.n	8008cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	e067      	b.n	8008dba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008cea:	4b37      	ldr	r3, [pc, #220]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	f023 0203 	bic.w	r2, r3, #3
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	4934      	ldr	r1, [pc, #208]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008cfc:	f7fe fe68 	bl	80079d0 <HAL_GetTick>
 8008d00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d02:	e00a      	b.n	8008d1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d04:	f7fe fe64 	bl	80079d0 <HAL_GetTick>
 8008d08:	4602      	mov	r2, r0
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	1ad3      	subs	r3, r2, r3
 8008d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d901      	bls.n	8008d1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008d16:	2303      	movs	r3, #3
 8008d18:	e04f      	b.n	8008dba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d1a:	4b2b      	ldr	r3, [pc, #172]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008d1c:	689b      	ldr	r3, [r3, #8]
 8008d1e:	f003 020c 	and.w	r2, r3, #12
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d1eb      	bne.n	8008d04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008d2c:	4b25      	ldr	r3, [pc, #148]	; (8008dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f003 0307 	and.w	r3, r3, #7
 8008d34:	683a      	ldr	r2, [r7, #0]
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d20c      	bcs.n	8008d54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d3a:	4b22      	ldr	r3, [pc, #136]	; (8008dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8008d3c:	683a      	ldr	r2, [r7, #0]
 8008d3e:	b2d2      	uxtb	r2, r2
 8008d40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d42:	4b20      	ldr	r3, [pc, #128]	; (8008dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f003 0307 	and.w	r3, r3, #7
 8008d4a:	683a      	ldr	r2, [r7, #0]
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d001      	beq.n	8008d54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008d50:	2301      	movs	r3, #1
 8008d52:	e032      	b.n	8008dba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f003 0304 	and.w	r3, r3, #4
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d008      	beq.n	8008d72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008d60:	4b19      	ldr	r3, [pc, #100]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	4916      	ldr	r1, [pc, #88]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f003 0308 	and.w	r3, r3, #8
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d009      	beq.n	8008d92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008d7e:	4b12      	ldr	r3, [pc, #72]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	691b      	ldr	r3, [r3, #16]
 8008d8a:	00db      	lsls	r3, r3, #3
 8008d8c:	490e      	ldr	r1, [pc, #56]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008d92:	f000 f821 	bl	8008dd8 <HAL_RCC_GetSysClockFreq>
 8008d96:	4602      	mov	r2, r0
 8008d98:	4b0b      	ldr	r3, [pc, #44]	; (8008dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	091b      	lsrs	r3, r3, #4
 8008d9e:	f003 030f 	and.w	r3, r3, #15
 8008da2:	490a      	ldr	r1, [pc, #40]	; (8008dcc <HAL_RCC_ClockConfig+0x1c0>)
 8008da4:	5ccb      	ldrb	r3, [r1, r3]
 8008da6:	fa22 f303 	lsr.w	r3, r2, r3
 8008daa:	4a09      	ldr	r2, [pc, #36]	; (8008dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8008dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008dae:	4b09      	ldr	r3, [pc, #36]	; (8008dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4618      	mov	r0, r3
 8008db4:	f7fd fbe2 	bl	800657c <HAL_InitTick>

  return HAL_OK;
 8008db8:	2300      	movs	r3, #0
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3710      	adds	r7, #16
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	40023c00 	.word	0x40023c00
 8008dc8:	40023800 	.word	0x40023800
 8008dcc:	0800f488 	.word	0x0800f488
 8008dd0:	2000002c 	.word	0x2000002c
 8008dd4:	20000030 	.word	0x20000030

08008dd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ddc:	b094      	sub	sp, #80	; 0x50
 8008dde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008de0:	2300      	movs	r3, #0
 8008de2:	647b      	str	r3, [r7, #68]	; 0x44
 8008de4:	2300      	movs	r3, #0
 8008de6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008de8:	2300      	movs	r3, #0
 8008dea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008dec:	2300      	movs	r3, #0
 8008dee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008df0:	4b79      	ldr	r3, [pc, #484]	; (8008fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008df2:	689b      	ldr	r3, [r3, #8]
 8008df4:	f003 030c 	and.w	r3, r3, #12
 8008df8:	2b08      	cmp	r3, #8
 8008dfa:	d00d      	beq.n	8008e18 <HAL_RCC_GetSysClockFreq+0x40>
 8008dfc:	2b08      	cmp	r3, #8
 8008dfe:	f200 80e1 	bhi.w	8008fc4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d002      	beq.n	8008e0c <HAL_RCC_GetSysClockFreq+0x34>
 8008e06:	2b04      	cmp	r3, #4
 8008e08:	d003      	beq.n	8008e12 <HAL_RCC_GetSysClockFreq+0x3a>
 8008e0a:	e0db      	b.n	8008fc4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008e0c:	4b73      	ldr	r3, [pc, #460]	; (8008fdc <HAL_RCC_GetSysClockFreq+0x204>)
 8008e0e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008e10:	e0db      	b.n	8008fca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008e12:	4b73      	ldr	r3, [pc, #460]	; (8008fe0 <HAL_RCC_GetSysClockFreq+0x208>)
 8008e14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008e16:	e0d8      	b.n	8008fca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008e18:	4b6f      	ldr	r3, [pc, #444]	; (8008fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e20:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008e22:	4b6d      	ldr	r3, [pc, #436]	; (8008fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d063      	beq.n	8008ef6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e2e:	4b6a      	ldr	r3, [pc, #424]	; (8008fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	099b      	lsrs	r3, r3, #6
 8008e34:	2200      	movs	r2, #0
 8008e36:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e40:	633b      	str	r3, [r7, #48]	; 0x30
 8008e42:	2300      	movs	r3, #0
 8008e44:	637b      	str	r3, [r7, #52]	; 0x34
 8008e46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008e4a:	4622      	mov	r2, r4
 8008e4c:	462b      	mov	r3, r5
 8008e4e:	f04f 0000 	mov.w	r0, #0
 8008e52:	f04f 0100 	mov.w	r1, #0
 8008e56:	0159      	lsls	r1, r3, #5
 8008e58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008e5c:	0150      	lsls	r0, r2, #5
 8008e5e:	4602      	mov	r2, r0
 8008e60:	460b      	mov	r3, r1
 8008e62:	4621      	mov	r1, r4
 8008e64:	1a51      	subs	r1, r2, r1
 8008e66:	6139      	str	r1, [r7, #16]
 8008e68:	4629      	mov	r1, r5
 8008e6a:	eb63 0301 	sbc.w	r3, r3, r1
 8008e6e:	617b      	str	r3, [r7, #20]
 8008e70:	f04f 0200 	mov.w	r2, #0
 8008e74:	f04f 0300 	mov.w	r3, #0
 8008e78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008e7c:	4659      	mov	r1, fp
 8008e7e:	018b      	lsls	r3, r1, #6
 8008e80:	4651      	mov	r1, sl
 8008e82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008e86:	4651      	mov	r1, sl
 8008e88:	018a      	lsls	r2, r1, #6
 8008e8a:	4651      	mov	r1, sl
 8008e8c:	ebb2 0801 	subs.w	r8, r2, r1
 8008e90:	4659      	mov	r1, fp
 8008e92:	eb63 0901 	sbc.w	r9, r3, r1
 8008e96:	f04f 0200 	mov.w	r2, #0
 8008e9a:	f04f 0300 	mov.w	r3, #0
 8008e9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008ea2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008ea6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008eaa:	4690      	mov	r8, r2
 8008eac:	4699      	mov	r9, r3
 8008eae:	4623      	mov	r3, r4
 8008eb0:	eb18 0303 	adds.w	r3, r8, r3
 8008eb4:	60bb      	str	r3, [r7, #8]
 8008eb6:	462b      	mov	r3, r5
 8008eb8:	eb49 0303 	adc.w	r3, r9, r3
 8008ebc:	60fb      	str	r3, [r7, #12]
 8008ebe:	f04f 0200 	mov.w	r2, #0
 8008ec2:	f04f 0300 	mov.w	r3, #0
 8008ec6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008eca:	4629      	mov	r1, r5
 8008ecc:	024b      	lsls	r3, r1, #9
 8008ece:	4621      	mov	r1, r4
 8008ed0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008ed4:	4621      	mov	r1, r4
 8008ed6:	024a      	lsls	r2, r1, #9
 8008ed8:	4610      	mov	r0, r2
 8008eda:	4619      	mov	r1, r3
 8008edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ede:	2200      	movs	r2, #0
 8008ee0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ee2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ee4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008ee8:	f7f7 fe48 	bl	8000b7c <__aeabi_uldivmod>
 8008eec:	4602      	mov	r2, r0
 8008eee:	460b      	mov	r3, r1
 8008ef0:	4613      	mov	r3, r2
 8008ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ef4:	e058      	b.n	8008fa8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008ef6:	4b38      	ldr	r3, [pc, #224]	; (8008fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	099b      	lsrs	r3, r3, #6
 8008efc:	2200      	movs	r2, #0
 8008efe:	4618      	mov	r0, r3
 8008f00:	4611      	mov	r1, r2
 8008f02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008f06:	623b      	str	r3, [r7, #32]
 8008f08:	2300      	movs	r3, #0
 8008f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8008f0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008f10:	4642      	mov	r2, r8
 8008f12:	464b      	mov	r3, r9
 8008f14:	f04f 0000 	mov.w	r0, #0
 8008f18:	f04f 0100 	mov.w	r1, #0
 8008f1c:	0159      	lsls	r1, r3, #5
 8008f1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008f22:	0150      	lsls	r0, r2, #5
 8008f24:	4602      	mov	r2, r0
 8008f26:	460b      	mov	r3, r1
 8008f28:	4641      	mov	r1, r8
 8008f2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8008f2e:	4649      	mov	r1, r9
 8008f30:	eb63 0b01 	sbc.w	fp, r3, r1
 8008f34:	f04f 0200 	mov.w	r2, #0
 8008f38:	f04f 0300 	mov.w	r3, #0
 8008f3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008f40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008f44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008f48:	ebb2 040a 	subs.w	r4, r2, sl
 8008f4c:	eb63 050b 	sbc.w	r5, r3, fp
 8008f50:	f04f 0200 	mov.w	r2, #0
 8008f54:	f04f 0300 	mov.w	r3, #0
 8008f58:	00eb      	lsls	r3, r5, #3
 8008f5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008f5e:	00e2      	lsls	r2, r4, #3
 8008f60:	4614      	mov	r4, r2
 8008f62:	461d      	mov	r5, r3
 8008f64:	4643      	mov	r3, r8
 8008f66:	18e3      	adds	r3, r4, r3
 8008f68:	603b      	str	r3, [r7, #0]
 8008f6a:	464b      	mov	r3, r9
 8008f6c:	eb45 0303 	adc.w	r3, r5, r3
 8008f70:	607b      	str	r3, [r7, #4]
 8008f72:	f04f 0200 	mov.w	r2, #0
 8008f76:	f04f 0300 	mov.w	r3, #0
 8008f7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008f7e:	4629      	mov	r1, r5
 8008f80:	028b      	lsls	r3, r1, #10
 8008f82:	4621      	mov	r1, r4
 8008f84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008f88:	4621      	mov	r1, r4
 8008f8a:	028a      	lsls	r2, r1, #10
 8008f8c:	4610      	mov	r0, r2
 8008f8e:	4619      	mov	r1, r3
 8008f90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f92:	2200      	movs	r2, #0
 8008f94:	61bb      	str	r3, [r7, #24]
 8008f96:	61fa      	str	r2, [r7, #28]
 8008f98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f9c:	f7f7 fdee 	bl	8000b7c <__aeabi_uldivmod>
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	460b      	mov	r3, r1
 8008fa4:	4613      	mov	r3, r2
 8008fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008fa8:	4b0b      	ldr	r3, [pc, #44]	; (8008fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	0c1b      	lsrs	r3, r3, #16
 8008fae:	f003 0303 	and.w	r3, r3, #3
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	005b      	lsls	r3, r3, #1
 8008fb6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008fb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008fba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008fc2:	e002      	b.n	8008fca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008fc4:	4b05      	ldr	r3, [pc, #20]	; (8008fdc <HAL_RCC_GetSysClockFreq+0x204>)
 8008fc6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008fc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008fca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3750      	adds	r7, #80	; 0x50
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008fd6:	bf00      	nop
 8008fd8:	40023800 	.word	0x40023800
 8008fdc:	00f42400 	.word	0x00f42400
 8008fe0:	007a1200 	.word	0x007a1200

08008fe4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008fe8:	4b03      	ldr	r3, [pc, #12]	; (8008ff8 <HAL_RCC_GetHCLKFreq+0x14>)
 8008fea:	681b      	ldr	r3, [r3, #0]
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr
 8008ff6:	bf00      	nop
 8008ff8:	2000002c 	.word	0x2000002c

08008ffc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009000:	f7ff fff0 	bl	8008fe4 <HAL_RCC_GetHCLKFreq>
 8009004:	4602      	mov	r2, r0
 8009006:	4b05      	ldr	r3, [pc, #20]	; (800901c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009008:	689b      	ldr	r3, [r3, #8]
 800900a:	0a9b      	lsrs	r3, r3, #10
 800900c:	f003 0307 	and.w	r3, r3, #7
 8009010:	4903      	ldr	r1, [pc, #12]	; (8009020 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009012:	5ccb      	ldrb	r3, [r1, r3]
 8009014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009018:	4618      	mov	r0, r3
 800901a:	bd80      	pop	{r7, pc}
 800901c:	40023800 	.word	0x40023800
 8009020:	0800f498 	.word	0x0800f498

08009024 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009028:	f7ff ffdc 	bl	8008fe4 <HAL_RCC_GetHCLKFreq>
 800902c:	4602      	mov	r2, r0
 800902e:	4b05      	ldr	r3, [pc, #20]	; (8009044 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	0b5b      	lsrs	r3, r3, #13
 8009034:	f003 0307 	and.w	r3, r3, #7
 8009038:	4903      	ldr	r1, [pc, #12]	; (8009048 <HAL_RCC_GetPCLK2Freq+0x24>)
 800903a:	5ccb      	ldrb	r3, [r1, r3]
 800903c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009040:	4618      	mov	r0, r3
 8009042:	bd80      	pop	{r7, pc}
 8009044:	40023800 	.word	0x40023800
 8009048:	0800f498 	.word	0x0800f498

0800904c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800904c:	b480      	push	{r7}
 800904e:	b083      	sub	sp, #12
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	220f      	movs	r2, #15
 800905a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800905c:	4b12      	ldr	r3, [pc, #72]	; (80090a8 <HAL_RCC_GetClockConfig+0x5c>)
 800905e:	689b      	ldr	r3, [r3, #8]
 8009060:	f003 0203 	and.w	r2, r3, #3
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009068:	4b0f      	ldr	r3, [pc, #60]	; (80090a8 <HAL_RCC_GetClockConfig+0x5c>)
 800906a:	689b      	ldr	r3, [r3, #8]
 800906c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009074:	4b0c      	ldr	r3, [pc, #48]	; (80090a8 <HAL_RCC_GetClockConfig+0x5c>)
 8009076:	689b      	ldr	r3, [r3, #8]
 8009078:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009080:	4b09      	ldr	r3, [pc, #36]	; (80090a8 <HAL_RCC_GetClockConfig+0x5c>)
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	08db      	lsrs	r3, r3, #3
 8009086:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800908e:	4b07      	ldr	r3, [pc, #28]	; (80090ac <HAL_RCC_GetClockConfig+0x60>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f003 0207 	and.w	r2, r3, #7
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	601a      	str	r2, [r3, #0]
}
 800909a:	bf00      	nop
 800909c:	370c      	adds	r7, #12
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr
 80090a6:	bf00      	nop
 80090a8:	40023800 	.word	0x40023800
 80090ac:	40023c00 	.word	0x40023c00

080090b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b082      	sub	sp, #8
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d101      	bne.n	80090c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80090be:	2301      	movs	r3, #1
 80090c0:	e041      	b.n	8009146 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090c8:	b2db      	uxtb	r3, r3
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d106      	bne.n	80090dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2200      	movs	r2, #0
 80090d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f7fe f824 	bl	8007124 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2202      	movs	r2, #2
 80090e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681a      	ldr	r2, [r3, #0]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	3304      	adds	r3, #4
 80090ec:	4619      	mov	r1, r3
 80090ee:	4610      	mov	r0, r2
 80090f0:	f000 fdc4 	bl	8009c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2201      	movs	r2, #1
 80090f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2201      	movs	r2, #1
 8009100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2201      	movs	r2, #1
 8009108:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2201      	movs	r2, #1
 8009110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2201      	movs	r2, #1
 8009118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2201      	movs	r2, #1
 8009120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2201      	movs	r2, #1
 8009128:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2201      	movs	r2, #1
 8009130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2201      	movs	r2, #1
 8009138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2201      	movs	r2, #1
 8009140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009144:	2300      	movs	r3, #0
}
 8009146:	4618      	mov	r0, r3
 8009148:	3708      	adds	r7, #8
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
	...

08009150 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009150:	b480      	push	{r7}
 8009152:	b085      	sub	sp, #20
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800915e:	b2db      	uxtb	r3, r3
 8009160:	2b01      	cmp	r3, #1
 8009162:	d001      	beq.n	8009168 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009164:	2301      	movs	r3, #1
 8009166:	e04e      	b.n	8009206 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2202      	movs	r2, #2
 800916c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	68da      	ldr	r2, [r3, #12]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f042 0201 	orr.w	r2, r2, #1
 800917e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a23      	ldr	r2, [pc, #140]	; (8009214 <HAL_TIM_Base_Start_IT+0xc4>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d022      	beq.n	80091d0 <HAL_TIM_Base_Start_IT+0x80>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009192:	d01d      	beq.n	80091d0 <HAL_TIM_Base_Start_IT+0x80>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a1f      	ldr	r2, [pc, #124]	; (8009218 <HAL_TIM_Base_Start_IT+0xc8>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d018      	beq.n	80091d0 <HAL_TIM_Base_Start_IT+0x80>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4a1e      	ldr	r2, [pc, #120]	; (800921c <HAL_TIM_Base_Start_IT+0xcc>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d013      	beq.n	80091d0 <HAL_TIM_Base_Start_IT+0x80>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a1c      	ldr	r2, [pc, #112]	; (8009220 <HAL_TIM_Base_Start_IT+0xd0>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d00e      	beq.n	80091d0 <HAL_TIM_Base_Start_IT+0x80>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4a1b      	ldr	r2, [pc, #108]	; (8009224 <HAL_TIM_Base_Start_IT+0xd4>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d009      	beq.n	80091d0 <HAL_TIM_Base_Start_IT+0x80>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a19      	ldr	r2, [pc, #100]	; (8009228 <HAL_TIM_Base_Start_IT+0xd8>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d004      	beq.n	80091d0 <HAL_TIM_Base_Start_IT+0x80>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a18      	ldr	r2, [pc, #96]	; (800922c <HAL_TIM_Base_Start_IT+0xdc>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d111      	bne.n	80091f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	689b      	ldr	r3, [r3, #8]
 80091d6:	f003 0307 	and.w	r3, r3, #7
 80091da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2b06      	cmp	r3, #6
 80091e0:	d010      	beq.n	8009204 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	681a      	ldr	r2, [r3, #0]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f042 0201 	orr.w	r2, r2, #1
 80091f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091f2:	e007      	b.n	8009204 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f042 0201 	orr.w	r2, r2, #1
 8009202:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009204:	2300      	movs	r3, #0
}
 8009206:	4618      	mov	r0, r3
 8009208:	3714      	adds	r7, #20
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr
 8009212:	bf00      	nop
 8009214:	40010000 	.word	0x40010000
 8009218:	40000400 	.word	0x40000400
 800921c:	40000800 	.word	0x40000800
 8009220:	40000c00 	.word	0x40000c00
 8009224:	40010400 	.word	0x40010400
 8009228:	40014000 	.word	0x40014000
 800922c:	40001800 	.word	0x40001800

08009230 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d101      	bne.n	8009242 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800923e:	2301      	movs	r3, #1
 8009240:	e041      	b.n	80092c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009248:	b2db      	uxtb	r3, r3
 800924a:	2b00      	cmp	r3, #0
 800924c:	d106      	bne.n	800925c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2200      	movs	r2, #0
 8009252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 f839 	bl	80092ce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2202      	movs	r2, #2
 8009260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681a      	ldr	r2, [r3, #0]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	3304      	adds	r3, #4
 800926c:	4619      	mov	r1, r3
 800926e:	4610      	mov	r0, r2
 8009270:	f000 fd04 	bl	8009c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2201      	movs	r2, #1
 8009278:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2201      	movs	r2, #1
 8009280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2201      	movs	r2, #1
 8009288:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2201      	movs	r2, #1
 8009290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2201      	movs	r2, #1
 8009298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2201      	movs	r2, #1
 80092a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2201      	movs	r2, #1
 80092a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2201      	movs	r2, #1
 80092b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2201      	movs	r2, #1
 80092b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2201      	movs	r2, #1
 80092c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3708      	adds	r7, #8
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80092ce:	b480      	push	{r7}
 80092d0:	b083      	sub	sp, #12
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80092d6:	bf00      	nop
 80092d8:	370c      	adds	r7, #12
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr
	...

080092e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b084      	sub	sp, #16
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d109      	bne.n	8009308 <HAL_TIM_PWM_Start+0x24>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	bf14      	ite	ne
 8009300:	2301      	movne	r3, #1
 8009302:	2300      	moveq	r3, #0
 8009304:	b2db      	uxtb	r3, r3
 8009306:	e022      	b.n	800934e <HAL_TIM_PWM_Start+0x6a>
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	2b04      	cmp	r3, #4
 800930c:	d109      	bne.n	8009322 <HAL_TIM_PWM_Start+0x3e>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009314:	b2db      	uxtb	r3, r3
 8009316:	2b01      	cmp	r3, #1
 8009318:	bf14      	ite	ne
 800931a:	2301      	movne	r3, #1
 800931c:	2300      	moveq	r3, #0
 800931e:	b2db      	uxtb	r3, r3
 8009320:	e015      	b.n	800934e <HAL_TIM_PWM_Start+0x6a>
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	2b08      	cmp	r3, #8
 8009326:	d109      	bne.n	800933c <HAL_TIM_PWM_Start+0x58>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800932e:	b2db      	uxtb	r3, r3
 8009330:	2b01      	cmp	r3, #1
 8009332:	bf14      	ite	ne
 8009334:	2301      	movne	r3, #1
 8009336:	2300      	moveq	r3, #0
 8009338:	b2db      	uxtb	r3, r3
 800933a:	e008      	b.n	800934e <HAL_TIM_PWM_Start+0x6a>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009342:	b2db      	uxtb	r3, r3
 8009344:	2b01      	cmp	r3, #1
 8009346:	bf14      	ite	ne
 8009348:	2301      	movne	r3, #1
 800934a:	2300      	moveq	r3, #0
 800934c:	b2db      	uxtb	r3, r3
 800934e:	2b00      	cmp	r3, #0
 8009350:	d001      	beq.n	8009356 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009352:	2301      	movs	r3, #1
 8009354:	e07c      	b.n	8009450 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d104      	bne.n	8009366 <HAL_TIM_PWM_Start+0x82>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2202      	movs	r2, #2
 8009360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009364:	e013      	b.n	800938e <HAL_TIM_PWM_Start+0xaa>
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	2b04      	cmp	r3, #4
 800936a:	d104      	bne.n	8009376 <HAL_TIM_PWM_Start+0x92>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2202      	movs	r2, #2
 8009370:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009374:	e00b      	b.n	800938e <HAL_TIM_PWM_Start+0xaa>
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	2b08      	cmp	r3, #8
 800937a:	d104      	bne.n	8009386 <HAL_TIM_PWM_Start+0xa2>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2202      	movs	r2, #2
 8009380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009384:	e003      	b.n	800938e <HAL_TIM_PWM_Start+0xaa>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2202      	movs	r2, #2
 800938a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	2201      	movs	r2, #1
 8009394:	6839      	ldr	r1, [r7, #0]
 8009396:	4618      	mov	r0, r3
 8009398:	f000 ff5a 	bl	800a250 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a2d      	ldr	r2, [pc, #180]	; (8009458 <HAL_TIM_PWM_Start+0x174>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d004      	beq.n	80093b0 <HAL_TIM_PWM_Start+0xcc>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4a2c      	ldr	r2, [pc, #176]	; (800945c <HAL_TIM_PWM_Start+0x178>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d101      	bne.n	80093b4 <HAL_TIM_PWM_Start+0xd0>
 80093b0:	2301      	movs	r3, #1
 80093b2:	e000      	b.n	80093b6 <HAL_TIM_PWM_Start+0xd2>
 80093b4:	2300      	movs	r3, #0
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d007      	beq.n	80093ca <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80093c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	4a22      	ldr	r2, [pc, #136]	; (8009458 <HAL_TIM_PWM_Start+0x174>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d022      	beq.n	800941a <HAL_TIM_PWM_Start+0x136>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093dc:	d01d      	beq.n	800941a <HAL_TIM_PWM_Start+0x136>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4a1f      	ldr	r2, [pc, #124]	; (8009460 <HAL_TIM_PWM_Start+0x17c>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d018      	beq.n	800941a <HAL_TIM_PWM_Start+0x136>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4a1d      	ldr	r2, [pc, #116]	; (8009464 <HAL_TIM_PWM_Start+0x180>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d013      	beq.n	800941a <HAL_TIM_PWM_Start+0x136>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a1c      	ldr	r2, [pc, #112]	; (8009468 <HAL_TIM_PWM_Start+0x184>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d00e      	beq.n	800941a <HAL_TIM_PWM_Start+0x136>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a16      	ldr	r2, [pc, #88]	; (800945c <HAL_TIM_PWM_Start+0x178>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d009      	beq.n	800941a <HAL_TIM_PWM_Start+0x136>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a18      	ldr	r2, [pc, #96]	; (800946c <HAL_TIM_PWM_Start+0x188>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d004      	beq.n	800941a <HAL_TIM_PWM_Start+0x136>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a16      	ldr	r2, [pc, #88]	; (8009470 <HAL_TIM_PWM_Start+0x18c>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d111      	bne.n	800943e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	689b      	ldr	r3, [r3, #8]
 8009420:	f003 0307 	and.w	r3, r3, #7
 8009424:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2b06      	cmp	r3, #6
 800942a:	d010      	beq.n	800944e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	681a      	ldr	r2, [r3, #0]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f042 0201 	orr.w	r2, r2, #1
 800943a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800943c:	e007      	b.n	800944e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	681a      	ldr	r2, [r3, #0]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f042 0201 	orr.w	r2, r2, #1
 800944c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800944e:	2300      	movs	r3, #0
}
 8009450:	4618      	mov	r0, r3
 8009452:	3710      	adds	r7, #16
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}
 8009458:	40010000 	.word	0x40010000
 800945c:	40010400 	.word	0x40010400
 8009460:	40000400 	.word	0x40000400
 8009464:	40000800 	.word	0x40000800
 8009468:	40000c00 	.word	0x40000c00
 800946c:	40014000 	.word	0x40014000
 8009470:	40001800 	.word	0x40001800

08009474 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b086      	sub	sp, #24
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d101      	bne.n	8009488 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009484:	2301      	movs	r3, #1
 8009486:	e097      	b.n	80095b8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800948e:	b2db      	uxtb	r3, r3
 8009490:	2b00      	cmp	r3, #0
 8009492:	d106      	bne.n	80094a2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2200      	movs	r2, #0
 8009498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f7fd fcdb 	bl	8006e58 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2202      	movs	r2, #2
 80094a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	689b      	ldr	r3, [r3, #8]
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	6812      	ldr	r2, [r2, #0]
 80094b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80094b8:	f023 0307 	bic.w	r3, r3, #7
 80094bc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681a      	ldr	r2, [r3, #0]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	3304      	adds	r3, #4
 80094c6:	4619      	mov	r1, r3
 80094c8:	4610      	mov	r0, r2
 80094ca:	f000 fbd7 	bl	8009c7c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	699b      	ldr	r3, [r3, #24]
 80094dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	6a1b      	ldr	r3, [r3, #32]
 80094e4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	697a      	ldr	r2, [r7, #20]
 80094ec:	4313      	orrs	r3, r2
 80094ee:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094f6:	f023 0303 	bic.w	r3, r3, #3
 80094fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	689a      	ldr	r2, [r3, #8]
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	699b      	ldr	r3, [r3, #24]
 8009504:	021b      	lsls	r3, r3, #8
 8009506:	4313      	orrs	r3, r2
 8009508:	693a      	ldr	r2, [r7, #16]
 800950a:	4313      	orrs	r3, r2
 800950c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009514:	f023 030c 	bic.w	r3, r3, #12
 8009518:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009520:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009524:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	68da      	ldr	r2, [r3, #12]
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	69db      	ldr	r3, [r3, #28]
 800952e:	021b      	lsls	r3, r3, #8
 8009530:	4313      	orrs	r3, r2
 8009532:	693a      	ldr	r2, [r7, #16]
 8009534:	4313      	orrs	r3, r2
 8009536:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	691b      	ldr	r3, [r3, #16]
 800953c:	011a      	lsls	r2, r3, #4
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	6a1b      	ldr	r3, [r3, #32]
 8009542:	031b      	lsls	r3, r3, #12
 8009544:	4313      	orrs	r3, r2
 8009546:	693a      	ldr	r2, [r7, #16]
 8009548:	4313      	orrs	r3, r2
 800954a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009552:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800955a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	685a      	ldr	r2, [r3, #4]
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	695b      	ldr	r3, [r3, #20]
 8009564:	011b      	lsls	r3, r3, #4
 8009566:	4313      	orrs	r3, r2
 8009568:	68fa      	ldr	r2, [r7, #12]
 800956a:	4313      	orrs	r3, r2
 800956c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	697a      	ldr	r2, [r7, #20]
 8009574:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	693a      	ldr	r2, [r7, #16]
 800957c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	68fa      	ldr	r2, [r7, #12]
 8009584:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2201      	movs	r2, #1
 800958a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2201      	movs	r2, #1
 8009592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2201      	movs	r2, #1
 800959a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2201      	movs	r2, #1
 80095a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2201      	movs	r2, #1
 80095aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2201      	movs	r2, #1
 80095b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80095b6:	2300      	movs	r3, #0
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3718      	adds	r7, #24
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80095d0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80095d8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80095e0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80095e8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d110      	bne.n	8009612 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80095f0:	7bfb      	ldrb	r3, [r7, #15]
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d102      	bne.n	80095fc <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80095f6:	7b7b      	ldrb	r3, [r7, #13]
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d001      	beq.n	8009600 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80095fc:	2301      	movs	r3, #1
 80095fe:	e089      	b.n	8009714 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2202      	movs	r2, #2
 8009604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2202      	movs	r2, #2
 800960c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009610:	e031      	b.n	8009676 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	2b04      	cmp	r3, #4
 8009616:	d110      	bne.n	800963a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009618:	7bbb      	ldrb	r3, [r7, #14]
 800961a:	2b01      	cmp	r3, #1
 800961c:	d102      	bne.n	8009624 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800961e:	7b3b      	ldrb	r3, [r7, #12]
 8009620:	2b01      	cmp	r3, #1
 8009622:	d001      	beq.n	8009628 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8009624:	2301      	movs	r3, #1
 8009626:	e075      	b.n	8009714 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2202      	movs	r2, #2
 800962c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2202      	movs	r2, #2
 8009634:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009638:	e01d      	b.n	8009676 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800963a:	7bfb      	ldrb	r3, [r7, #15]
 800963c:	2b01      	cmp	r3, #1
 800963e:	d108      	bne.n	8009652 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009640:	7bbb      	ldrb	r3, [r7, #14]
 8009642:	2b01      	cmp	r3, #1
 8009644:	d105      	bne.n	8009652 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009646:	7b7b      	ldrb	r3, [r7, #13]
 8009648:	2b01      	cmp	r3, #1
 800964a:	d102      	bne.n	8009652 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800964c:	7b3b      	ldrb	r3, [r7, #12]
 800964e:	2b01      	cmp	r3, #1
 8009650:	d001      	beq.n	8009656 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8009652:	2301      	movs	r3, #1
 8009654:	e05e      	b.n	8009714 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2202      	movs	r2, #2
 800965a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2202      	movs	r2, #2
 8009662:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2202      	movs	r2, #2
 800966a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2202      	movs	r2, #2
 8009672:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d003      	beq.n	8009684 <HAL_TIM_Encoder_Start_IT+0xc4>
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	2b04      	cmp	r3, #4
 8009680:	d010      	beq.n	80096a4 <HAL_TIM_Encoder_Start_IT+0xe4>
 8009682:	e01f      	b.n	80096c4 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	2201      	movs	r2, #1
 800968a:	2100      	movs	r1, #0
 800968c:	4618      	mov	r0, r3
 800968e:	f000 fddf 	bl	800a250 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	68da      	ldr	r2, [r3, #12]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f042 0202 	orr.w	r2, r2, #2
 80096a0:	60da      	str	r2, [r3, #12]
      break;
 80096a2:	e02e      	b.n	8009702 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	2201      	movs	r2, #1
 80096aa:	2104      	movs	r1, #4
 80096ac:	4618      	mov	r0, r3
 80096ae:	f000 fdcf 	bl	800a250 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	68da      	ldr	r2, [r3, #12]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f042 0204 	orr.w	r2, r2, #4
 80096c0:	60da      	str	r2, [r3, #12]
      break;
 80096c2:	e01e      	b.n	8009702 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	2201      	movs	r2, #1
 80096ca:	2100      	movs	r1, #0
 80096cc:	4618      	mov	r0, r3
 80096ce:	f000 fdbf 	bl	800a250 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	2201      	movs	r2, #1
 80096d8:	2104      	movs	r1, #4
 80096da:	4618      	mov	r0, r3
 80096dc:	f000 fdb8 	bl	800a250 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	68da      	ldr	r2, [r3, #12]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f042 0202 	orr.w	r2, r2, #2
 80096ee:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	68da      	ldr	r2, [r3, #12]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f042 0204 	orr.w	r2, r2, #4
 80096fe:	60da      	str	r2, [r3, #12]
      break;
 8009700:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	681a      	ldr	r2, [r3, #0]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f042 0201 	orr.w	r2, r2, #1
 8009710:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009712:	2300      	movs	r3, #0
}
 8009714:	4618      	mov	r0, r3
 8009716:	3710      	adds	r7, #16
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b082      	sub	sp, #8
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	691b      	ldr	r3, [r3, #16]
 800972a:	f003 0302 	and.w	r3, r3, #2
 800972e:	2b02      	cmp	r3, #2
 8009730:	d122      	bne.n	8009778 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	68db      	ldr	r3, [r3, #12]
 8009738:	f003 0302 	and.w	r3, r3, #2
 800973c:	2b02      	cmp	r3, #2
 800973e:	d11b      	bne.n	8009778 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f06f 0202 	mvn.w	r2, #2
 8009748:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2201      	movs	r2, #1
 800974e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	699b      	ldr	r3, [r3, #24]
 8009756:	f003 0303 	and.w	r3, r3, #3
 800975a:	2b00      	cmp	r3, #0
 800975c:	d003      	beq.n	8009766 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f7f8 fab2 	bl	8001cc8 <HAL_TIM_IC_CaptureCallback>
 8009764:	e005      	b.n	8009772 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 fa69 	bl	8009c3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f000 fa70 	bl	8009c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2200      	movs	r2, #0
 8009776:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	691b      	ldr	r3, [r3, #16]
 800977e:	f003 0304 	and.w	r3, r3, #4
 8009782:	2b04      	cmp	r3, #4
 8009784:	d122      	bne.n	80097cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	68db      	ldr	r3, [r3, #12]
 800978c:	f003 0304 	and.w	r3, r3, #4
 8009790:	2b04      	cmp	r3, #4
 8009792:	d11b      	bne.n	80097cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f06f 0204 	mvn.w	r2, #4
 800979c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2202      	movs	r2, #2
 80097a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	699b      	ldr	r3, [r3, #24]
 80097aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d003      	beq.n	80097ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f7f8 fa88 	bl	8001cc8 <HAL_TIM_IC_CaptureCallback>
 80097b8:	e005      	b.n	80097c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f000 fa3f 	bl	8009c3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f000 fa46 	bl	8009c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2200      	movs	r2, #0
 80097ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	691b      	ldr	r3, [r3, #16]
 80097d2:	f003 0308 	and.w	r3, r3, #8
 80097d6:	2b08      	cmp	r3, #8
 80097d8:	d122      	bne.n	8009820 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	68db      	ldr	r3, [r3, #12]
 80097e0:	f003 0308 	and.w	r3, r3, #8
 80097e4:	2b08      	cmp	r3, #8
 80097e6:	d11b      	bne.n	8009820 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f06f 0208 	mvn.w	r2, #8
 80097f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2204      	movs	r2, #4
 80097f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	69db      	ldr	r3, [r3, #28]
 80097fe:	f003 0303 	and.w	r3, r3, #3
 8009802:	2b00      	cmp	r3, #0
 8009804:	d003      	beq.n	800980e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f7f8 fa5e 	bl	8001cc8 <HAL_TIM_IC_CaptureCallback>
 800980c:	e005      	b.n	800981a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f000 fa15 	bl	8009c3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f000 fa1c 	bl	8009c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2200      	movs	r2, #0
 800981e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	691b      	ldr	r3, [r3, #16]
 8009826:	f003 0310 	and.w	r3, r3, #16
 800982a:	2b10      	cmp	r3, #16
 800982c:	d122      	bne.n	8009874 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	68db      	ldr	r3, [r3, #12]
 8009834:	f003 0310 	and.w	r3, r3, #16
 8009838:	2b10      	cmp	r3, #16
 800983a:	d11b      	bne.n	8009874 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f06f 0210 	mvn.w	r2, #16
 8009844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2208      	movs	r2, #8
 800984a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	69db      	ldr	r3, [r3, #28]
 8009852:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009856:	2b00      	cmp	r3, #0
 8009858:	d003      	beq.n	8009862 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f7f8 fa34 	bl	8001cc8 <HAL_TIM_IC_CaptureCallback>
 8009860:	e005      	b.n	800986e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 f9eb 	bl	8009c3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f000 f9f2 	bl	8009c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2200      	movs	r2, #0
 8009872:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	691b      	ldr	r3, [r3, #16]
 800987a:	f003 0301 	and.w	r3, r3, #1
 800987e:	2b01      	cmp	r3, #1
 8009880:	d10e      	bne.n	80098a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	68db      	ldr	r3, [r3, #12]
 8009888:	f003 0301 	and.w	r3, r3, #1
 800988c:	2b01      	cmp	r3, #1
 800988e:	d107      	bne.n	80098a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f06f 0201 	mvn.w	r2, #1
 8009898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f7f8 fb3e 	bl	8001f1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	691b      	ldr	r3, [r3, #16]
 80098a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098aa:	2b80      	cmp	r3, #128	; 0x80
 80098ac:	d10e      	bne.n	80098cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	68db      	ldr	r3, [r3, #12]
 80098b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098b8:	2b80      	cmp	r3, #128	; 0x80
 80098ba:	d107      	bne.n	80098cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80098c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 fd6e 	bl	800a3a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	691b      	ldr	r3, [r3, #16]
 80098d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098d6:	2b40      	cmp	r3, #64	; 0x40
 80098d8:	d10e      	bne.n	80098f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	68db      	ldr	r3, [r3, #12]
 80098e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098e4:	2b40      	cmp	r3, #64	; 0x40
 80098e6:	d107      	bne.n	80098f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80098f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 f9b7 	bl	8009c66 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	691b      	ldr	r3, [r3, #16]
 80098fe:	f003 0320 	and.w	r3, r3, #32
 8009902:	2b20      	cmp	r3, #32
 8009904:	d10e      	bne.n	8009924 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	f003 0320 	and.w	r3, r3, #32
 8009910:	2b20      	cmp	r3, #32
 8009912:	d107      	bne.n	8009924 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f06f 0220 	mvn.w	r2, #32
 800991c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 fd38 	bl	800a394 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009924:	bf00      	nop
 8009926:	3708      	adds	r7, #8
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b086      	sub	sp, #24
 8009930:	af00      	add	r7, sp, #0
 8009932:	60f8      	str	r0, [r7, #12]
 8009934:	60b9      	str	r1, [r7, #8]
 8009936:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009938:	2300      	movs	r3, #0
 800993a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009942:	2b01      	cmp	r3, #1
 8009944:	d101      	bne.n	800994a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009946:	2302      	movs	r3, #2
 8009948:	e0ae      	b.n	8009aa8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	2201      	movs	r2, #1
 800994e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2b0c      	cmp	r3, #12
 8009956:	f200 809f 	bhi.w	8009a98 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800995a:	a201      	add	r2, pc, #4	; (adr r2, 8009960 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800995c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009960:	08009995 	.word	0x08009995
 8009964:	08009a99 	.word	0x08009a99
 8009968:	08009a99 	.word	0x08009a99
 800996c:	08009a99 	.word	0x08009a99
 8009970:	080099d5 	.word	0x080099d5
 8009974:	08009a99 	.word	0x08009a99
 8009978:	08009a99 	.word	0x08009a99
 800997c:	08009a99 	.word	0x08009a99
 8009980:	08009a17 	.word	0x08009a17
 8009984:	08009a99 	.word	0x08009a99
 8009988:	08009a99 	.word	0x08009a99
 800998c:	08009a99 	.word	0x08009a99
 8009990:	08009a57 	.word	0x08009a57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	68b9      	ldr	r1, [r7, #8]
 800999a:	4618      	mov	r0, r3
 800999c:	f000 fa0e 	bl	8009dbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	699a      	ldr	r2, [r3, #24]
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f042 0208 	orr.w	r2, r2, #8
 80099ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	699a      	ldr	r2, [r3, #24]
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f022 0204 	bic.w	r2, r2, #4
 80099be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	6999      	ldr	r1, [r3, #24]
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	691a      	ldr	r2, [r3, #16]
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	430a      	orrs	r2, r1
 80099d0:	619a      	str	r2, [r3, #24]
      break;
 80099d2:	e064      	b.n	8009a9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	68b9      	ldr	r1, [r7, #8]
 80099da:	4618      	mov	r0, r3
 80099dc:	f000 fa5e 	bl	8009e9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	699a      	ldr	r2, [r3, #24]
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80099ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	699a      	ldr	r2, [r3, #24]
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80099fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	6999      	ldr	r1, [r3, #24]
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	691b      	ldr	r3, [r3, #16]
 8009a0a:	021a      	lsls	r2, r3, #8
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	430a      	orrs	r2, r1
 8009a12:	619a      	str	r2, [r3, #24]
      break;
 8009a14:	e043      	b.n	8009a9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	68b9      	ldr	r1, [r7, #8]
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f000 fab3 	bl	8009f88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	69da      	ldr	r2, [r3, #28]
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f042 0208 	orr.w	r2, r2, #8
 8009a30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	69da      	ldr	r2, [r3, #28]
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f022 0204 	bic.w	r2, r2, #4
 8009a40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	69d9      	ldr	r1, [r3, #28]
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	691a      	ldr	r2, [r3, #16]
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	430a      	orrs	r2, r1
 8009a52:	61da      	str	r2, [r3, #28]
      break;
 8009a54:	e023      	b.n	8009a9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	68b9      	ldr	r1, [r7, #8]
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f000 fb07 	bl	800a070 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	69da      	ldr	r2, [r3, #28]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	69da      	ldr	r2, [r3, #28]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	69d9      	ldr	r1, [r3, #28]
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	691b      	ldr	r3, [r3, #16]
 8009a8c:	021a      	lsls	r2, r3, #8
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	430a      	orrs	r2, r1
 8009a94:	61da      	str	r2, [r3, #28]
      break;
 8009a96:	e002      	b.n	8009a9e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009a98:	2301      	movs	r3, #1
 8009a9a:	75fb      	strb	r3, [r7, #23]
      break;
 8009a9c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009aa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3718      	adds	r7, #24
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b084      	sub	sp, #16
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009aba:	2300      	movs	r3, #0
 8009abc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d101      	bne.n	8009acc <HAL_TIM_ConfigClockSource+0x1c>
 8009ac8:	2302      	movs	r3, #2
 8009aca:	e0b4      	b.n	8009c36 <HAL_TIM_ConfigClockSource+0x186>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2201      	movs	r2, #1
 8009ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2202      	movs	r2, #2
 8009ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	689b      	ldr	r3, [r3, #8]
 8009ae2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009aea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009af2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	68ba      	ldr	r2, [r7, #8]
 8009afa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b04:	d03e      	beq.n	8009b84 <HAL_TIM_ConfigClockSource+0xd4>
 8009b06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b0a:	f200 8087 	bhi.w	8009c1c <HAL_TIM_ConfigClockSource+0x16c>
 8009b0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b12:	f000 8086 	beq.w	8009c22 <HAL_TIM_ConfigClockSource+0x172>
 8009b16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b1a:	d87f      	bhi.n	8009c1c <HAL_TIM_ConfigClockSource+0x16c>
 8009b1c:	2b70      	cmp	r3, #112	; 0x70
 8009b1e:	d01a      	beq.n	8009b56 <HAL_TIM_ConfigClockSource+0xa6>
 8009b20:	2b70      	cmp	r3, #112	; 0x70
 8009b22:	d87b      	bhi.n	8009c1c <HAL_TIM_ConfigClockSource+0x16c>
 8009b24:	2b60      	cmp	r3, #96	; 0x60
 8009b26:	d050      	beq.n	8009bca <HAL_TIM_ConfigClockSource+0x11a>
 8009b28:	2b60      	cmp	r3, #96	; 0x60
 8009b2a:	d877      	bhi.n	8009c1c <HAL_TIM_ConfigClockSource+0x16c>
 8009b2c:	2b50      	cmp	r3, #80	; 0x50
 8009b2e:	d03c      	beq.n	8009baa <HAL_TIM_ConfigClockSource+0xfa>
 8009b30:	2b50      	cmp	r3, #80	; 0x50
 8009b32:	d873      	bhi.n	8009c1c <HAL_TIM_ConfigClockSource+0x16c>
 8009b34:	2b40      	cmp	r3, #64	; 0x40
 8009b36:	d058      	beq.n	8009bea <HAL_TIM_ConfigClockSource+0x13a>
 8009b38:	2b40      	cmp	r3, #64	; 0x40
 8009b3a:	d86f      	bhi.n	8009c1c <HAL_TIM_ConfigClockSource+0x16c>
 8009b3c:	2b30      	cmp	r3, #48	; 0x30
 8009b3e:	d064      	beq.n	8009c0a <HAL_TIM_ConfigClockSource+0x15a>
 8009b40:	2b30      	cmp	r3, #48	; 0x30
 8009b42:	d86b      	bhi.n	8009c1c <HAL_TIM_ConfigClockSource+0x16c>
 8009b44:	2b20      	cmp	r3, #32
 8009b46:	d060      	beq.n	8009c0a <HAL_TIM_ConfigClockSource+0x15a>
 8009b48:	2b20      	cmp	r3, #32
 8009b4a:	d867      	bhi.n	8009c1c <HAL_TIM_ConfigClockSource+0x16c>
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d05c      	beq.n	8009c0a <HAL_TIM_ConfigClockSource+0x15a>
 8009b50:	2b10      	cmp	r3, #16
 8009b52:	d05a      	beq.n	8009c0a <HAL_TIM_ConfigClockSource+0x15a>
 8009b54:	e062      	b.n	8009c1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6818      	ldr	r0, [r3, #0]
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	6899      	ldr	r1, [r3, #8]
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	685a      	ldr	r2, [r3, #4]
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	68db      	ldr	r3, [r3, #12]
 8009b66:	f000 fb53 	bl	800a210 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	689b      	ldr	r3, [r3, #8]
 8009b70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009b78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	68ba      	ldr	r2, [r7, #8]
 8009b80:	609a      	str	r2, [r3, #8]
      break;
 8009b82:	e04f      	b.n	8009c24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6818      	ldr	r0, [r3, #0]
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	6899      	ldr	r1, [r3, #8]
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	685a      	ldr	r2, [r3, #4]
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	68db      	ldr	r3, [r3, #12]
 8009b94:	f000 fb3c 	bl	800a210 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	689a      	ldr	r2, [r3, #8]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009ba6:	609a      	str	r2, [r3, #8]
      break;
 8009ba8:	e03c      	b.n	8009c24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6818      	ldr	r0, [r3, #0]
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	6859      	ldr	r1, [r3, #4]
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	68db      	ldr	r3, [r3, #12]
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	f000 fab0 	bl	800a11c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	2150      	movs	r1, #80	; 0x50
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f000 fb09 	bl	800a1da <TIM_ITRx_SetConfig>
      break;
 8009bc8:	e02c      	b.n	8009c24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6818      	ldr	r0, [r3, #0]
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	6859      	ldr	r1, [r3, #4]
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	68db      	ldr	r3, [r3, #12]
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	f000 facf 	bl	800a17a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	2160      	movs	r1, #96	; 0x60
 8009be2:	4618      	mov	r0, r3
 8009be4:	f000 faf9 	bl	800a1da <TIM_ITRx_SetConfig>
      break;
 8009be8:	e01c      	b.n	8009c24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6818      	ldr	r0, [r3, #0]
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	6859      	ldr	r1, [r3, #4]
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	68db      	ldr	r3, [r3, #12]
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	f000 fa90 	bl	800a11c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2140      	movs	r1, #64	; 0x40
 8009c02:	4618      	mov	r0, r3
 8009c04:	f000 fae9 	bl	800a1da <TIM_ITRx_SetConfig>
      break;
 8009c08:	e00c      	b.n	8009c24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681a      	ldr	r2, [r3, #0]
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	4619      	mov	r1, r3
 8009c14:	4610      	mov	r0, r2
 8009c16:	f000 fae0 	bl	800a1da <TIM_ITRx_SetConfig>
      break;
 8009c1a:	e003      	b.n	8009c24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	73fb      	strb	r3, [r7, #15]
      break;
 8009c20:	e000      	b.n	8009c24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009c22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2201      	movs	r2, #1
 8009c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3710      	adds	r7, #16
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}

08009c3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c3e:	b480      	push	{r7}
 8009c40:	b083      	sub	sp, #12
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009c46:	bf00      	nop
 8009c48:	370c      	adds	r7, #12
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c50:	4770      	bx	lr

08009c52 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009c52:	b480      	push	{r7}
 8009c54:	b083      	sub	sp, #12
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009c5a:	bf00      	nop
 8009c5c:	370c      	adds	r7, #12
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c64:	4770      	bx	lr

08009c66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009c66:	b480      	push	{r7}
 8009c68:	b083      	sub	sp, #12
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009c6e:	bf00      	nop
 8009c70:	370c      	adds	r7, #12
 8009c72:	46bd      	mov	sp, r7
 8009c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c78:	4770      	bx	lr
	...

08009c7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b085      	sub	sp, #20
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	4a40      	ldr	r2, [pc, #256]	; (8009d90 <TIM_Base_SetConfig+0x114>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d013      	beq.n	8009cbc <TIM_Base_SetConfig+0x40>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c9a:	d00f      	beq.n	8009cbc <TIM_Base_SetConfig+0x40>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	4a3d      	ldr	r2, [pc, #244]	; (8009d94 <TIM_Base_SetConfig+0x118>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d00b      	beq.n	8009cbc <TIM_Base_SetConfig+0x40>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	4a3c      	ldr	r2, [pc, #240]	; (8009d98 <TIM_Base_SetConfig+0x11c>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d007      	beq.n	8009cbc <TIM_Base_SetConfig+0x40>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	4a3b      	ldr	r2, [pc, #236]	; (8009d9c <TIM_Base_SetConfig+0x120>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d003      	beq.n	8009cbc <TIM_Base_SetConfig+0x40>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	4a3a      	ldr	r2, [pc, #232]	; (8009da0 <TIM_Base_SetConfig+0x124>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d108      	bne.n	8009cce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	68fa      	ldr	r2, [r7, #12]
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	4a2f      	ldr	r2, [pc, #188]	; (8009d90 <TIM_Base_SetConfig+0x114>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d02b      	beq.n	8009d2e <TIM_Base_SetConfig+0xb2>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cdc:	d027      	beq.n	8009d2e <TIM_Base_SetConfig+0xb2>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	4a2c      	ldr	r2, [pc, #176]	; (8009d94 <TIM_Base_SetConfig+0x118>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d023      	beq.n	8009d2e <TIM_Base_SetConfig+0xb2>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	4a2b      	ldr	r2, [pc, #172]	; (8009d98 <TIM_Base_SetConfig+0x11c>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d01f      	beq.n	8009d2e <TIM_Base_SetConfig+0xb2>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	4a2a      	ldr	r2, [pc, #168]	; (8009d9c <TIM_Base_SetConfig+0x120>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d01b      	beq.n	8009d2e <TIM_Base_SetConfig+0xb2>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	4a29      	ldr	r2, [pc, #164]	; (8009da0 <TIM_Base_SetConfig+0x124>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d017      	beq.n	8009d2e <TIM_Base_SetConfig+0xb2>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	4a28      	ldr	r2, [pc, #160]	; (8009da4 <TIM_Base_SetConfig+0x128>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d013      	beq.n	8009d2e <TIM_Base_SetConfig+0xb2>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	4a27      	ldr	r2, [pc, #156]	; (8009da8 <TIM_Base_SetConfig+0x12c>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d00f      	beq.n	8009d2e <TIM_Base_SetConfig+0xb2>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	4a26      	ldr	r2, [pc, #152]	; (8009dac <TIM_Base_SetConfig+0x130>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d00b      	beq.n	8009d2e <TIM_Base_SetConfig+0xb2>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	4a25      	ldr	r2, [pc, #148]	; (8009db0 <TIM_Base_SetConfig+0x134>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d007      	beq.n	8009d2e <TIM_Base_SetConfig+0xb2>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	4a24      	ldr	r2, [pc, #144]	; (8009db4 <TIM_Base_SetConfig+0x138>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d003      	beq.n	8009d2e <TIM_Base_SetConfig+0xb2>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	4a23      	ldr	r2, [pc, #140]	; (8009db8 <TIM_Base_SetConfig+0x13c>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d108      	bne.n	8009d40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	68db      	ldr	r3, [r3, #12]
 8009d3a:	68fa      	ldr	r2, [r7, #12]
 8009d3c:	4313      	orrs	r3, r2
 8009d3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	695b      	ldr	r3, [r3, #20]
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	68fa      	ldr	r2, [r7, #12]
 8009d52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	689a      	ldr	r2, [r3, #8]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	681a      	ldr	r2, [r3, #0]
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	4a0a      	ldr	r2, [pc, #40]	; (8009d90 <TIM_Base_SetConfig+0x114>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d003      	beq.n	8009d74 <TIM_Base_SetConfig+0xf8>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	4a0c      	ldr	r2, [pc, #48]	; (8009da0 <TIM_Base_SetConfig+0x124>)
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d103      	bne.n	8009d7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	691a      	ldr	r2, [r3, #16]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2201      	movs	r2, #1
 8009d80:	615a      	str	r2, [r3, #20]
}
 8009d82:	bf00      	nop
 8009d84:	3714      	adds	r7, #20
 8009d86:	46bd      	mov	sp, r7
 8009d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8c:	4770      	bx	lr
 8009d8e:	bf00      	nop
 8009d90:	40010000 	.word	0x40010000
 8009d94:	40000400 	.word	0x40000400
 8009d98:	40000800 	.word	0x40000800
 8009d9c:	40000c00 	.word	0x40000c00
 8009da0:	40010400 	.word	0x40010400
 8009da4:	40014000 	.word	0x40014000
 8009da8:	40014400 	.word	0x40014400
 8009dac:	40014800 	.word	0x40014800
 8009db0:	40001800 	.word	0x40001800
 8009db4:	40001c00 	.word	0x40001c00
 8009db8:	40002000 	.word	0x40002000

08009dbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b087      	sub	sp, #28
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6a1b      	ldr	r3, [r3, #32]
 8009dca:	f023 0201 	bic.w	r2, r3, #1
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6a1b      	ldr	r3, [r3, #32]
 8009dd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	685b      	ldr	r3, [r3, #4]
 8009ddc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	699b      	ldr	r3, [r3, #24]
 8009de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f023 0303 	bic.w	r3, r3, #3
 8009df2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	68fa      	ldr	r2, [r7, #12]
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	f023 0302 	bic.w	r3, r3, #2
 8009e04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	689b      	ldr	r3, [r3, #8]
 8009e0a:	697a      	ldr	r2, [r7, #20]
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	4a20      	ldr	r2, [pc, #128]	; (8009e94 <TIM_OC1_SetConfig+0xd8>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d003      	beq.n	8009e20 <TIM_OC1_SetConfig+0x64>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	4a1f      	ldr	r2, [pc, #124]	; (8009e98 <TIM_OC1_SetConfig+0xdc>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d10c      	bne.n	8009e3a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	f023 0308 	bic.w	r3, r3, #8
 8009e26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	68db      	ldr	r3, [r3, #12]
 8009e2c:	697a      	ldr	r2, [r7, #20]
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	f023 0304 	bic.w	r3, r3, #4
 8009e38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	4a15      	ldr	r2, [pc, #84]	; (8009e94 <TIM_OC1_SetConfig+0xd8>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d003      	beq.n	8009e4a <TIM_OC1_SetConfig+0x8e>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	4a14      	ldr	r2, [pc, #80]	; (8009e98 <TIM_OC1_SetConfig+0xdc>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d111      	bne.n	8009e6e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009e58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	695b      	ldr	r3, [r3, #20]
 8009e5e:	693a      	ldr	r2, [r7, #16]
 8009e60:	4313      	orrs	r3, r2
 8009e62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	699b      	ldr	r3, [r3, #24]
 8009e68:	693a      	ldr	r2, [r7, #16]
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	693a      	ldr	r2, [r7, #16]
 8009e72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	68fa      	ldr	r2, [r7, #12]
 8009e78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	685a      	ldr	r2, [r3, #4]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	697a      	ldr	r2, [r7, #20]
 8009e86:	621a      	str	r2, [r3, #32]
}
 8009e88:	bf00      	nop
 8009e8a:	371c      	adds	r7, #28
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e92:	4770      	bx	lr
 8009e94:	40010000 	.word	0x40010000
 8009e98:	40010400 	.word	0x40010400

08009e9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b087      	sub	sp, #28
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
 8009ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6a1b      	ldr	r3, [r3, #32]
 8009eaa:	f023 0210 	bic.w	r2, r3, #16
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6a1b      	ldr	r3, [r3, #32]
 8009eb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	699b      	ldr	r3, [r3, #24]
 8009ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009eca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ed2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	021b      	lsls	r3, r3, #8
 8009eda:	68fa      	ldr	r2, [r7, #12]
 8009edc:	4313      	orrs	r3, r2
 8009ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	f023 0320 	bic.w	r3, r3, #32
 8009ee6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	689b      	ldr	r3, [r3, #8]
 8009eec:	011b      	lsls	r3, r3, #4
 8009eee:	697a      	ldr	r2, [r7, #20]
 8009ef0:	4313      	orrs	r3, r2
 8009ef2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	4a22      	ldr	r2, [pc, #136]	; (8009f80 <TIM_OC2_SetConfig+0xe4>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d003      	beq.n	8009f04 <TIM_OC2_SetConfig+0x68>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	4a21      	ldr	r2, [pc, #132]	; (8009f84 <TIM_OC2_SetConfig+0xe8>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d10d      	bne.n	8009f20 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	68db      	ldr	r3, [r3, #12]
 8009f10:	011b      	lsls	r3, r3, #4
 8009f12:	697a      	ldr	r2, [r7, #20]
 8009f14:	4313      	orrs	r3, r2
 8009f16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	4a17      	ldr	r2, [pc, #92]	; (8009f80 <TIM_OC2_SetConfig+0xe4>)
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d003      	beq.n	8009f30 <TIM_OC2_SetConfig+0x94>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	4a16      	ldr	r2, [pc, #88]	; (8009f84 <TIM_OC2_SetConfig+0xe8>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d113      	bne.n	8009f58 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	695b      	ldr	r3, [r3, #20]
 8009f44:	009b      	lsls	r3, r3, #2
 8009f46:	693a      	ldr	r2, [r7, #16]
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	699b      	ldr	r3, [r3, #24]
 8009f50:	009b      	lsls	r3, r3, #2
 8009f52:	693a      	ldr	r2, [r7, #16]
 8009f54:	4313      	orrs	r3, r2
 8009f56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	693a      	ldr	r2, [r7, #16]
 8009f5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	68fa      	ldr	r2, [r7, #12]
 8009f62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	685a      	ldr	r2, [r3, #4]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	697a      	ldr	r2, [r7, #20]
 8009f70:	621a      	str	r2, [r3, #32]
}
 8009f72:	bf00      	nop
 8009f74:	371c      	adds	r7, #28
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr
 8009f7e:	bf00      	nop
 8009f80:	40010000 	.word	0x40010000
 8009f84:	40010400 	.word	0x40010400

08009f88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b087      	sub	sp, #28
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
 8009f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6a1b      	ldr	r3, [r3, #32]
 8009f96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6a1b      	ldr	r3, [r3, #32]
 8009fa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	69db      	ldr	r3, [r3, #28]
 8009fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f023 0303 	bic.w	r3, r3, #3
 8009fbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	68fa      	ldr	r2, [r7, #12]
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009fd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	021b      	lsls	r3, r3, #8
 8009fd8:	697a      	ldr	r2, [r7, #20]
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	4a21      	ldr	r2, [pc, #132]	; (800a068 <TIM_OC3_SetConfig+0xe0>)
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d003      	beq.n	8009fee <TIM_OC3_SetConfig+0x66>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	4a20      	ldr	r2, [pc, #128]	; (800a06c <TIM_OC3_SetConfig+0xe4>)
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d10d      	bne.n	800a00a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ff4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	68db      	ldr	r3, [r3, #12]
 8009ffa:	021b      	lsls	r3, r3, #8
 8009ffc:	697a      	ldr	r2, [r7, #20]
 8009ffe:	4313      	orrs	r3, r2
 800a000:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a008:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	4a16      	ldr	r2, [pc, #88]	; (800a068 <TIM_OC3_SetConfig+0xe0>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d003      	beq.n	800a01a <TIM_OC3_SetConfig+0x92>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	4a15      	ldr	r2, [pc, #84]	; (800a06c <TIM_OC3_SetConfig+0xe4>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d113      	bne.n	800a042 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a020:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a028:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	695b      	ldr	r3, [r3, #20]
 800a02e:	011b      	lsls	r3, r3, #4
 800a030:	693a      	ldr	r2, [r7, #16]
 800a032:	4313      	orrs	r3, r2
 800a034:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	699b      	ldr	r3, [r3, #24]
 800a03a:	011b      	lsls	r3, r3, #4
 800a03c:	693a      	ldr	r2, [r7, #16]
 800a03e:	4313      	orrs	r3, r2
 800a040:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	693a      	ldr	r2, [r7, #16]
 800a046:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	68fa      	ldr	r2, [r7, #12]
 800a04c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	685a      	ldr	r2, [r3, #4]
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	697a      	ldr	r2, [r7, #20]
 800a05a:	621a      	str	r2, [r3, #32]
}
 800a05c:	bf00      	nop
 800a05e:	371c      	adds	r7, #28
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr
 800a068:	40010000 	.word	0x40010000
 800a06c:	40010400 	.word	0x40010400

0800a070 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a070:	b480      	push	{r7}
 800a072:	b087      	sub	sp, #28
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6a1b      	ldr	r3, [r3, #32]
 800a07e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6a1b      	ldr	r3, [r3, #32]
 800a08a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	685b      	ldr	r3, [r3, #4]
 800a090:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	69db      	ldr	r3, [r3, #28]
 800a096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a09e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	021b      	lsls	r3, r3, #8
 800a0ae:	68fa      	ldr	r2, [r7, #12]
 800a0b0:	4313      	orrs	r3, r2
 800a0b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a0ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	689b      	ldr	r3, [r3, #8]
 800a0c0:	031b      	lsls	r3, r3, #12
 800a0c2:	693a      	ldr	r2, [r7, #16]
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	4a12      	ldr	r2, [pc, #72]	; (800a114 <TIM_OC4_SetConfig+0xa4>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d003      	beq.n	800a0d8 <TIM_OC4_SetConfig+0x68>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	4a11      	ldr	r2, [pc, #68]	; (800a118 <TIM_OC4_SetConfig+0xa8>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d109      	bne.n	800a0ec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a0de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	695b      	ldr	r3, [r3, #20]
 800a0e4:	019b      	lsls	r3, r3, #6
 800a0e6:	697a      	ldr	r2, [r7, #20]
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	697a      	ldr	r2, [r7, #20]
 800a0f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	68fa      	ldr	r2, [r7, #12]
 800a0f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	685a      	ldr	r2, [r3, #4]
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	693a      	ldr	r2, [r7, #16]
 800a104:	621a      	str	r2, [r3, #32]
}
 800a106:	bf00      	nop
 800a108:	371c      	adds	r7, #28
 800a10a:	46bd      	mov	sp, r7
 800a10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a110:	4770      	bx	lr
 800a112:	bf00      	nop
 800a114:	40010000 	.word	0x40010000
 800a118:	40010400 	.word	0x40010400

0800a11c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b087      	sub	sp, #28
 800a120:	af00      	add	r7, sp, #0
 800a122:	60f8      	str	r0, [r7, #12]
 800a124:	60b9      	str	r1, [r7, #8]
 800a126:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	6a1b      	ldr	r3, [r3, #32]
 800a12c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	6a1b      	ldr	r3, [r3, #32]
 800a132:	f023 0201 	bic.w	r2, r3, #1
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	699b      	ldr	r3, [r3, #24]
 800a13e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a146:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	011b      	lsls	r3, r3, #4
 800a14c:	693a      	ldr	r2, [r7, #16]
 800a14e:	4313      	orrs	r3, r2
 800a150:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	f023 030a 	bic.w	r3, r3, #10
 800a158:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a15a:	697a      	ldr	r2, [r7, #20]
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	4313      	orrs	r3, r2
 800a160:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	693a      	ldr	r2, [r7, #16]
 800a166:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	697a      	ldr	r2, [r7, #20]
 800a16c:	621a      	str	r2, [r3, #32]
}
 800a16e:	bf00      	nop
 800a170:	371c      	adds	r7, #28
 800a172:	46bd      	mov	sp, r7
 800a174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a178:	4770      	bx	lr

0800a17a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a17a:	b480      	push	{r7}
 800a17c:	b087      	sub	sp, #28
 800a17e:	af00      	add	r7, sp, #0
 800a180:	60f8      	str	r0, [r7, #12]
 800a182:	60b9      	str	r1, [r7, #8]
 800a184:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	6a1b      	ldr	r3, [r3, #32]
 800a18a:	f023 0210 	bic.w	r2, r3, #16
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	699b      	ldr	r3, [r3, #24]
 800a196:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	6a1b      	ldr	r3, [r3, #32]
 800a19c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a1a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	031b      	lsls	r3, r3, #12
 800a1aa:	697a      	ldr	r2, [r7, #20]
 800a1ac:	4313      	orrs	r3, r2
 800a1ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a1b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	011b      	lsls	r3, r3, #4
 800a1bc:	693a      	ldr	r2, [r7, #16]
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	697a      	ldr	r2, [r7, #20]
 800a1c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	693a      	ldr	r2, [r7, #16]
 800a1cc:	621a      	str	r2, [r3, #32]
}
 800a1ce:	bf00      	nop
 800a1d0:	371c      	adds	r7, #28
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d8:	4770      	bx	lr

0800a1da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a1da:	b480      	push	{r7}
 800a1dc:	b085      	sub	sp, #20
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	6078      	str	r0, [r7, #4]
 800a1e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	689b      	ldr	r3, [r3, #8]
 800a1e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a1f2:	683a      	ldr	r2, [r7, #0]
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	4313      	orrs	r3, r2
 800a1f8:	f043 0307 	orr.w	r3, r3, #7
 800a1fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	68fa      	ldr	r2, [r7, #12]
 800a202:	609a      	str	r2, [r3, #8]
}
 800a204:	bf00      	nop
 800a206:	3714      	adds	r7, #20
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr

0800a210 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a210:	b480      	push	{r7}
 800a212:	b087      	sub	sp, #28
 800a214:	af00      	add	r7, sp, #0
 800a216:	60f8      	str	r0, [r7, #12]
 800a218:	60b9      	str	r1, [r7, #8]
 800a21a:	607a      	str	r2, [r7, #4]
 800a21c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	689b      	ldr	r3, [r3, #8]
 800a222:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a22a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	021a      	lsls	r2, r3, #8
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	431a      	orrs	r2, r3
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	4313      	orrs	r3, r2
 800a238:	697a      	ldr	r2, [r7, #20]
 800a23a:	4313      	orrs	r3, r2
 800a23c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	697a      	ldr	r2, [r7, #20]
 800a242:	609a      	str	r2, [r3, #8]
}
 800a244:	bf00      	nop
 800a246:	371c      	adds	r7, #28
 800a248:	46bd      	mov	sp, r7
 800a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24e:	4770      	bx	lr

0800a250 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a250:	b480      	push	{r7}
 800a252:	b087      	sub	sp, #28
 800a254:	af00      	add	r7, sp, #0
 800a256:	60f8      	str	r0, [r7, #12]
 800a258:	60b9      	str	r1, [r7, #8]
 800a25a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	f003 031f 	and.w	r3, r3, #31
 800a262:	2201      	movs	r2, #1
 800a264:	fa02 f303 	lsl.w	r3, r2, r3
 800a268:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	6a1a      	ldr	r2, [r3, #32]
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	43db      	mvns	r3, r3
 800a272:	401a      	ands	r2, r3
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	6a1a      	ldr	r2, [r3, #32]
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	f003 031f 	and.w	r3, r3, #31
 800a282:	6879      	ldr	r1, [r7, #4]
 800a284:	fa01 f303 	lsl.w	r3, r1, r3
 800a288:	431a      	orrs	r2, r3
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	621a      	str	r2, [r3, #32]
}
 800a28e:	bf00      	nop
 800a290:	371c      	adds	r7, #28
 800a292:	46bd      	mov	sp, r7
 800a294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a298:	4770      	bx	lr
	...

0800a29c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b085      	sub	sp, #20
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2ac:	2b01      	cmp	r3, #1
 800a2ae:	d101      	bne.n	800a2b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a2b0:	2302      	movs	r3, #2
 800a2b2:	e05a      	b.n	800a36a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2202      	movs	r2, #2
 800a2c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	689b      	ldr	r3, [r3, #8]
 800a2d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	68fa      	ldr	r2, [r7, #12]
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	68fa      	ldr	r2, [r7, #12]
 800a2ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	4a21      	ldr	r2, [pc, #132]	; (800a378 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a2f4:	4293      	cmp	r3, r2
 800a2f6:	d022      	beq.n	800a33e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a300:	d01d      	beq.n	800a33e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4a1d      	ldr	r2, [pc, #116]	; (800a37c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a308:	4293      	cmp	r3, r2
 800a30a:	d018      	beq.n	800a33e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4a1b      	ldr	r2, [pc, #108]	; (800a380 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d013      	beq.n	800a33e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4a1a      	ldr	r2, [pc, #104]	; (800a384 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d00e      	beq.n	800a33e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4a18      	ldr	r2, [pc, #96]	; (800a388 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d009      	beq.n	800a33e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4a17      	ldr	r2, [pc, #92]	; (800a38c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a330:	4293      	cmp	r3, r2
 800a332:	d004      	beq.n	800a33e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	4a15      	ldr	r2, [pc, #84]	; (800a390 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d10c      	bne.n	800a358 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a344:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	685b      	ldr	r3, [r3, #4]
 800a34a:	68ba      	ldr	r2, [r7, #8]
 800a34c:	4313      	orrs	r3, r2
 800a34e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	68ba      	ldr	r2, [r7, #8]
 800a356:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2201      	movs	r2, #1
 800a35c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2200      	movs	r2, #0
 800a364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a368:	2300      	movs	r3, #0
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3714      	adds	r7, #20
 800a36e:	46bd      	mov	sp, r7
 800a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a374:	4770      	bx	lr
 800a376:	bf00      	nop
 800a378:	40010000 	.word	0x40010000
 800a37c:	40000400 	.word	0x40000400
 800a380:	40000800 	.word	0x40000800
 800a384:	40000c00 	.word	0x40000c00
 800a388:	40010400 	.word	0x40010400
 800a38c:	40014000 	.word	0x40014000
 800a390:	40001800 	.word	0x40001800

0800a394 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a394:	b480      	push	{r7}
 800a396:	b083      	sub	sp, #12
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a39c:	bf00      	nop
 800a39e:	370c      	adds	r7, #12
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr

0800a3a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b083      	sub	sp, #12
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a3b0:	bf00      	nop
 800a3b2:	370c      	adds	r7, #12
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr

0800a3bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b082      	sub	sp, #8
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d101      	bne.n	800a3ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	e03f      	b.n	800a44e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3d4:	b2db      	uxtb	r3, r3
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d106      	bne.n	800a3e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f7fd f868 	bl	80074b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2224      	movs	r2, #36	; 0x24
 800a3ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	68da      	ldr	r2, [r3, #12]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a3fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f000 ff43 	bl	800b28c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	691a      	ldr	r2, [r3, #16]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a414:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	695a      	ldr	r2, [r3, #20]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a424:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	68da      	ldr	r2, [r3, #12]
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a434:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2200      	movs	r2, #0
 800a43a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2220      	movs	r2, #32
 800a440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2220      	movs	r2, #32
 800a448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a44c:	2300      	movs	r3, #0
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3708      	adds	r7, #8
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}
	...

0800a458 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b08c      	sub	sp, #48	; 0x30
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	60f8      	str	r0, [r7, #12]
 800a460:	60b9      	str	r1, [r7, #8]
 800a462:	4613      	mov	r3, r2
 800a464:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a46c:	b2db      	uxtb	r3, r3
 800a46e:	2b20      	cmp	r3, #32
 800a470:	d165      	bne.n	800a53e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d002      	beq.n	800a47e <HAL_UART_Transmit_DMA+0x26>
 800a478:	88fb      	ldrh	r3, [r7, #6]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d101      	bne.n	800a482 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a47e:	2301      	movs	r3, #1
 800a480:	e05e      	b.n	800a540 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a488:	2b01      	cmp	r3, #1
 800a48a:	d101      	bne.n	800a490 <HAL_UART_Transmit_DMA+0x38>
 800a48c:	2302      	movs	r3, #2
 800a48e:	e057      	b.n	800a540 <HAL_UART_Transmit_DMA+0xe8>
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	2201      	movs	r2, #1
 800a494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a498:	68ba      	ldr	r2, [r7, #8]
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	88fa      	ldrh	r2, [r7, #6]
 800a4a2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	88fa      	ldrh	r2, [r7, #6]
 800a4a8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2221      	movs	r2, #33	; 0x21
 800a4b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4bc:	4a22      	ldr	r2, [pc, #136]	; (800a548 <HAL_UART_Transmit_DMA+0xf0>)
 800a4be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4c4:	4a21      	ldr	r2, [pc, #132]	; (800a54c <HAL_UART_Transmit_DMA+0xf4>)
 800a4c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4cc:	4a20      	ldr	r2, [pc, #128]	; (800a550 <HAL_UART_Transmit_DMA+0xf8>)
 800a4ce:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800a4d8:	f107 0308 	add.w	r3, r7, #8
 800a4dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4e4:	6819      	ldr	r1, [r3, #0]
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	3304      	adds	r3, #4
 800a4ec:	461a      	mov	r2, r3
 800a4ee:	88fb      	ldrh	r3, [r7, #6]
 800a4f0:	f7fd fc0a 	bl	8007d08 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a4fc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	2200      	movs	r2, #0
 800a502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	3314      	adds	r3, #20
 800a50c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a50e:	69bb      	ldr	r3, [r7, #24]
 800a510:	e853 3f00 	ldrex	r3, [r3]
 800a514:	617b      	str	r3, [r7, #20]
   return(result);
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a51c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	3314      	adds	r3, #20
 800a524:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a526:	627a      	str	r2, [r7, #36]	; 0x24
 800a528:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a52a:	6a39      	ldr	r1, [r7, #32]
 800a52c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a52e:	e841 2300 	strex	r3, r2, [r1]
 800a532:	61fb      	str	r3, [r7, #28]
   return(result);
 800a534:	69fb      	ldr	r3, [r7, #28]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d1e5      	bne.n	800a506 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800a53a:	2300      	movs	r3, #0
 800a53c:	e000      	b.n	800a540 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800a53e:	2302      	movs	r3, #2
  }
}
 800a540:	4618      	mov	r0, r3
 800a542:	3730      	adds	r7, #48	; 0x30
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}
 800a548:	0800ab25 	.word	0x0800ab25
 800a54c:	0800abbf 	.word	0x0800abbf
 800a550:	0800ad37 	.word	0x0800ad37

0800a554 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
 800a55a:	60f8      	str	r0, [r7, #12]
 800a55c:	60b9      	str	r1, [r7, #8]
 800a55e:	4613      	mov	r3, r2
 800a560:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a568:	b2db      	uxtb	r3, r3
 800a56a:	2b20      	cmp	r3, #32
 800a56c:	d11d      	bne.n	800a5aa <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d002      	beq.n	800a57a <HAL_UART_Receive_DMA+0x26>
 800a574:	88fb      	ldrh	r3, [r7, #6]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d101      	bne.n	800a57e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a57a:	2301      	movs	r3, #1
 800a57c:	e016      	b.n	800a5ac <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a584:	2b01      	cmp	r3, #1
 800a586:	d101      	bne.n	800a58c <HAL_UART_Receive_DMA+0x38>
 800a588:	2302      	movs	r3, #2
 800a58a:	e00f      	b.n	800a5ac <HAL_UART_Receive_DMA+0x58>
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	2201      	movs	r2, #1
 800a590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	2200      	movs	r2, #0
 800a598:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a59a:	88fb      	ldrh	r3, [r7, #6]
 800a59c:	461a      	mov	r2, r3
 800a59e:	68b9      	ldr	r1, [r7, #8]
 800a5a0:	68f8      	ldr	r0, [r7, #12]
 800a5a2:	f000 fc13 	bl	800adcc <UART_Start_Receive_DMA>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	e000      	b.n	800a5ac <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a5aa:	2302      	movs	r3, #2
  }
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3710      	adds	r7, #16
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}

0800a5b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b0ba      	sub	sp, #232	; 0xe8
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	68db      	ldr	r3, [r3, #12]
 800a5cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	695b      	ldr	r3, [r3, #20]
 800a5d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a5e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5ea:	f003 030f 	and.w	r3, r3, #15
 800a5ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a5f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d10f      	bne.n	800a61a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a5fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5fe:	f003 0320 	and.w	r3, r3, #32
 800a602:	2b00      	cmp	r3, #0
 800a604:	d009      	beq.n	800a61a <HAL_UART_IRQHandler+0x66>
 800a606:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a60a:	f003 0320 	and.w	r3, r3, #32
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d003      	beq.n	800a61a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f000 fd7f 	bl	800b116 <UART_Receive_IT>
      return;
 800a618:	e256      	b.n	800aac8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a61a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a61e:	2b00      	cmp	r3, #0
 800a620:	f000 80de 	beq.w	800a7e0 <HAL_UART_IRQHandler+0x22c>
 800a624:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a628:	f003 0301 	and.w	r3, r3, #1
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d106      	bne.n	800a63e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a634:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a638:	2b00      	cmp	r3, #0
 800a63a:	f000 80d1 	beq.w	800a7e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a63e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a642:	f003 0301 	and.w	r3, r3, #1
 800a646:	2b00      	cmp	r3, #0
 800a648:	d00b      	beq.n	800a662 <HAL_UART_IRQHandler+0xae>
 800a64a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a64e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a652:	2b00      	cmp	r3, #0
 800a654:	d005      	beq.n	800a662 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a65a:	f043 0201 	orr.w	r2, r3, #1
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a666:	f003 0304 	and.w	r3, r3, #4
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d00b      	beq.n	800a686 <HAL_UART_IRQHandler+0xd2>
 800a66e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a672:	f003 0301 	and.w	r3, r3, #1
 800a676:	2b00      	cmp	r3, #0
 800a678:	d005      	beq.n	800a686 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a67e:	f043 0202 	orr.w	r2, r3, #2
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a68a:	f003 0302 	and.w	r3, r3, #2
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d00b      	beq.n	800a6aa <HAL_UART_IRQHandler+0xf6>
 800a692:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a696:	f003 0301 	and.w	r3, r3, #1
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d005      	beq.n	800a6aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6a2:	f043 0204 	orr.w	r2, r3, #4
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a6aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6ae:	f003 0308 	and.w	r3, r3, #8
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d011      	beq.n	800a6da <HAL_UART_IRQHandler+0x126>
 800a6b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6ba:	f003 0320 	and.w	r3, r3, #32
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d105      	bne.n	800a6ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a6c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a6c6:	f003 0301 	and.w	r3, r3, #1
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d005      	beq.n	800a6da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6d2:	f043 0208 	orr.w	r2, r3, #8
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	f000 81ed 	beq.w	800aabe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a6e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6e8:	f003 0320 	and.w	r3, r3, #32
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d008      	beq.n	800a702 <HAL_UART_IRQHandler+0x14e>
 800a6f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6f4:	f003 0320 	and.w	r3, r3, #32
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d002      	beq.n	800a702 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f000 fd0a 	bl	800b116 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	695b      	ldr	r3, [r3, #20]
 800a708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a70c:	2b40      	cmp	r3, #64	; 0x40
 800a70e:	bf0c      	ite	eq
 800a710:	2301      	moveq	r3, #1
 800a712:	2300      	movne	r3, #0
 800a714:	b2db      	uxtb	r3, r3
 800a716:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a71e:	f003 0308 	and.w	r3, r3, #8
 800a722:	2b00      	cmp	r3, #0
 800a724:	d103      	bne.n	800a72e <HAL_UART_IRQHandler+0x17a>
 800a726:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d04f      	beq.n	800a7ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f000 fc12 	bl	800af58 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	695b      	ldr	r3, [r3, #20]
 800a73a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a73e:	2b40      	cmp	r3, #64	; 0x40
 800a740:	d141      	bne.n	800a7c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	3314      	adds	r3, #20
 800a748:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a74c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a750:	e853 3f00 	ldrex	r3, [r3]
 800a754:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a758:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a75c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a760:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	3314      	adds	r3, #20
 800a76a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a76e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a772:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a776:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a77a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a77e:	e841 2300 	strex	r3, r2, [r1]
 800a782:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a786:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d1d9      	bne.n	800a742 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a792:	2b00      	cmp	r3, #0
 800a794:	d013      	beq.n	800a7be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a79a:	4a7d      	ldr	r2, [pc, #500]	; (800a990 <HAL_UART_IRQHandler+0x3dc>)
 800a79c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f7fd fb78 	bl	8007e98 <HAL_DMA_Abort_IT>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d016      	beq.n	800a7dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7b4:	687a      	ldr	r2, [r7, #4]
 800a7b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a7b8:	4610      	mov	r0, r2
 800a7ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7bc:	e00e      	b.n	800a7dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f000 f99a 	bl	800aaf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7c4:	e00a      	b.n	800a7dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f000 f996 	bl	800aaf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7cc:	e006      	b.n	800a7dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f000 f992 	bl	800aaf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a7da:	e170      	b.n	800aabe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7dc:	bf00      	nop
    return;
 800a7de:	e16e      	b.n	800aabe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	f040 814a 	bne.w	800aa7e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a7ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7ee:	f003 0310 	and.w	r3, r3, #16
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	f000 8143 	beq.w	800aa7e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a7f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7fc:	f003 0310 	and.w	r3, r3, #16
 800a800:	2b00      	cmp	r3, #0
 800a802:	f000 813c 	beq.w	800aa7e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a806:	2300      	movs	r3, #0
 800a808:	60bb      	str	r3, [r7, #8]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	60bb      	str	r3, [r7, #8]
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	60bb      	str	r3, [r7, #8]
 800a81a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	695b      	ldr	r3, [r3, #20]
 800a822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a826:	2b40      	cmp	r3, #64	; 0x40
 800a828:	f040 80b4 	bne.w	800a994 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a838:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	f000 8140 	beq.w	800aac2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a846:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a84a:	429a      	cmp	r2, r3
 800a84c:	f080 8139 	bcs.w	800aac2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a856:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a85c:	69db      	ldr	r3, [r3, #28]
 800a85e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a862:	f000 8088 	beq.w	800a976 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	330c      	adds	r3, #12
 800a86c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a870:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a874:	e853 3f00 	ldrex	r3, [r3]
 800a878:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a87c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a880:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a884:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	330c      	adds	r3, #12
 800a88e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a892:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a896:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a89a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a89e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a8a2:	e841 2300 	strex	r3, r2, [r1]
 800a8a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a8aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d1d9      	bne.n	800a866 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	3314      	adds	r3, #20
 800a8b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a8bc:	e853 3f00 	ldrex	r3, [r3]
 800a8c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a8c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a8c4:	f023 0301 	bic.w	r3, r3, #1
 800a8c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	3314      	adds	r3, #20
 800a8d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a8d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a8da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a8de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a8e2:	e841 2300 	strex	r3, r2, [r1]
 800a8e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a8e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d1e1      	bne.n	800a8b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	3314      	adds	r3, #20
 800a8f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a8f8:	e853 3f00 	ldrex	r3, [r3]
 800a8fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a8fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a900:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a904:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	3314      	adds	r3, #20
 800a90e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a912:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a914:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a916:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a918:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a91a:	e841 2300 	strex	r3, r2, [r1]
 800a91e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a920:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a922:	2b00      	cmp	r3, #0
 800a924:	d1e3      	bne.n	800a8ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2220      	movs	r2, #32
 800a92a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2200      	movs	r2, #0
 800a932:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	330c      	adds	r3, #12
 800a93a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a93c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a93e:	e853 3f00 	ldrex	r3, [r3]
 800a942:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a944:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a946:	f023 0310 	bic.w	r3, r3, #16
 800a94a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	330c      	adds	r3, #12
 800a954:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a958:	65ba      	str	r2, [r7, #88]	; 0x58
 800a95a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a95c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a95e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a960:	e841 2300 	strex	r3, r2, [r1]
 800a964:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d1e3      	bne.n	800a934 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a970:	4618      	mov	r0, r3
 800a972:	f7fd fa21 	bl	8007db8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a97e:	b29b      	uxth	r3, r3
 800a980:	1ad3      	subs	r3, r2, r3
 800a982:	b29b      	uxth	r3, r3
 800a984:	4619      	mov	r1, r3
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f000 f8c0 	bl	800ab0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a98c:	e099      	b.n	800aac2 <HAL_UART_IRQHandler+0x50e>
 800a98e:	bf00      	nop
 800a990:	0800b01f 	.word	0x0800b01f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a99c:	b29b      	uxth	r3, r3
 800a99e:	1ad3      	subs	r3, r2, r3
 800a9a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a9a8:	b29b      	uxth	r3, r3
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	f000 808b 	beq.w	800aac6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a9b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	f000 8086 	beq.w	800aac6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	330c      	adds	r3, #12
 800a9c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9c4:	e853 3f00 	ldrex	r3, [r3]
 800a9c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a9ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a9d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	330c      	adds	r3, #12
 800a9da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a9de:	647a      	str	r2, [r7, #68]	; 0x44
 800a9e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a9e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a9e6:	e841 2300 	strex	r3, r2, [r1]
 800a9ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a9ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d1e3      	bne.n	800a9ba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	3314      	adds	r3, #20
 800a9f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9fc:	e853 3f00 	ldrex	r3, [r3]
 800aa00:	623b      	str	r3, [r7, #32]
   return(result);
 800aa02:	6a3b      	ldr	r3, [r7, #32]
 800aa04:	f023 0301 	bic.w	r3, r3, #1
 800aa08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	3314      	adds	r3, #20
 800aa12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800aa16:	633a      	str	r2, [r7, #48]	; 0x30
 800aa18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aa1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa1e:	e841 2300 	strex	r3, r2, [r1]
 800aa22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aa24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d1e3      	bne.n	800a9f2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2220      	movs	r2, #32
 800aa2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2200      	movs	r2, #0
 800aa36:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	330c      	adds	r3, #12
 800aa3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	e853 3f00 	ldrex	r3, [r3]
 800aa46:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	f023 0310 	bic.w	r3, r3, #16
 800aa4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	330c      	adds	r3, #12
 800aa58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800aa5c:	61fa      	str	r2, [r7, #28]
 800aa5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa60:	69b9      	ldr	r1, [r7, #24]
 800aa62:	69fa      	ldr	r2, [r7, #28]
 800aa64:	e841 2300 	strex	r3, r2, [r1]
 800aa68:	617b      	str	r3, [r7, #20]
   return(result);
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d1e3      	bne.n	800aa38 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aa70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800aa74:	4619      	mov	r1, r3
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f000 f848 	bl	800ab0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800aa7c:	e023      	b.n	800aac6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800aa7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d009      	beq.n	800aa9e <HAL_UART_IRQHandler+0x4ea>
 800aa8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d003      	beq.n	800aa9e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f000 fad5 	bl	800b046 <UART_Transmit_IT>
    return;
 800aa9c:	e014      	b.n	800aac8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800aa9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aaa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d00e      	beq.n	800aac8 <HAL_UART_IRQHandler+0x514>
 800aaaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aaae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d008      	beq.n	800aac8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f000 fb15 	bl	800b0e6 <UART_EndTransmit_IT>
    return;
 800aabc:	e004      	b.n	800aac8 <HAL_UART_IRQHandler+0x514>
    return;
 800aabe:	bf00      	nop
 800aac0:	e002      	b.n	800aac8 <HAL_UART_IRQHandler+0x514>
      return;
 800aac2:	bf00      	nop
 800aac4:	e000      	b.n	800aac8 <HAL_UART_IRQHandler+0x514>
      return;
 800aac6:	bf00      	nop
  }
}
 800aac8:	37e8      	adds	r7, #232	; 0xe8
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
 800aace:	bf00      	nop

0800aad0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b083      	sub	sp, #12
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800aad8:	bf00      	nop
 800aada:	370c      	adds	r7, #12
 800aadc:	46bd      	mov	sp, r7
 800aade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae2:	4770      	bx	lr

0800aae4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b083      	sub	sp, #12
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800aaec:	bf00      	nop
 800aaee:	370c      	adds	r7, #12
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr

0800aaf8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b083      	sub	sp, #12
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ab00:	bf00      	nop
 800ab02:	370c      	adds	r7, #12
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b083      	sub	sp, #12
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	460b      	mov	r3, r1
 800ab16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ab18:	bf00      	nop
 800ab1a:	370c      	adds	r7, #12
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab22:	4770      	bx	lr

0800ab24 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b090      	sub	sp, #64	; 0x40
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab30:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d137      	bne.n	800abb0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800ab40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab42:	2200      	movs	r2, #0
 800ab44:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ab46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	3314      	adds	r3, #20
 800ab4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab50:	e853 3f00 	ldrex	r3, [r3]
 800ab54:	623b      	str	r3, [r7, #32]
   return(result);
 800ab56:	6a3b      	ldr	r3, [r7, #32]
 800ab58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab5c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ab5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	3314      	adds	r3, #20
 800ab64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab66:	633a      	str	r2, [r7, #48]	; 0x30
 800ab68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab6e:	e841 2300 	strex	r3, r2, [r1]
 800ab72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ab74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d1e5      	bne.n	800ab46 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ab7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	330c      	adds	r3, #12
 800ab80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	e853 3f00 	ldrex	r3, [r3]
 800ab88:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab90:	637b      	str	r3, [r7, #52]	; 0x34
 800ab92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	330c      	adds	r3, #12
 800ab98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab9a:	61fa      	str	r2, [r7, #28]
 800ab9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab9e:	69b9      	ldr	r1, [r7, #24]
 800aba0:	69fa      	ldr	r2, [r7, #28]
 800aba2:	e841 2300 	strex	r3, r2, [r1]
 800aba6:	617b      	str	r3, [r7, #20]
   return(result);
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d1e5      	bne.n	800ab7a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800abae:	e002      	b.n	800abb6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800abb0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800abb2:	f7f8 fc8d 	bl	80034d0 <HAL_UART_TxCpltCallback>
}
 800abb6:	bf00      	nop
 800abb8:	3740      	adds	r7, #64	; 0x40
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}

0800abbe <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800abbe:	b580      	push	{r7, lr}
 800abc0:	b084      	sub	sp, #16
 800abc2:	af00      	add	r7, sp, #0
 800abc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abca:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800abcc:	68f8      	ldr	r0, [r7, #12]
 800abce:	f7ff ff7f 	bl	800aad0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800abd2:	bf00      	nop
 800abd4:	3710      	adds	r7, #16
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}

0800abda <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800abda:	b580      	push	{r7, lr}
 800abdc:	b09c      	sub	sp, #112	; 0x70
 800abde:	af00      	add	r7, sp, #0
 800abe0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abe6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d172      	bne.n	800acdc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800abf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abf8:	2200      	movs	r2, #0
 800abfa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800abfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	330c      	adds	r3, #12
 800ac02:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac06:	e853 3f00 	ldrex	r3, [r3]
 800ac0a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ac0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac12:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	330c      	adds	r3, #12
 800ac1a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ac1c:	65ba      	str	r2, [r7, #88]	; 0x58
 800ac1e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ac22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ac24:	e841 2300 	strex	r3, r2, [r1]
 800ac28:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ac2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d1e5      	bne.n	800abfc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	3314      	adds	r3, #20
 800ac36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac3a:	e853 3f00 	ldrex	r3, [r3]
 800ac3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ac40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac42:	f023 0301 	bic.w	r3, r3, #1
 800ac46:	667b      	str	r3, [r7, #100]	; 0x64
 800ac48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	3314      	adds	r3, #20
 800ac4e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ac50:	647a      	str	r2, [r7, #68]	; 0x44
 800ac52:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ac56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac58:	e841 2300 	strex	r3, r2, [r1]
 800ac5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ac5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d1e5      	bne.n	800ac30 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	3314      	adds	r3, #20
 800ac6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac6e:	e853 3f00 	ldrex	r3, [r3]
 800ac72:	623b      	str	r3, [r7, #32]
   return(result);
 800ac74:	6a3b      	ldr	r3, [r7, #32]
 800ac76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac7a:	663b      	str	r3, [r7, #96]	; 0x60
 800ac7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	3314      	adds	r3, #20
 800ac82:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ac84:	633a      	str	r2, [r7, #48]	; 0x30
 800ac86:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac8c:	e841 2300 	strex	r3, r2, [r1]
 800ac90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ac92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d1e5      	bne.n	800ac64 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ac98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac9a:	2220      	movs	r2, #32
 800ac9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aca4:	2b01      	cmp	r3, #1
 800aca6:	d119      	bne.n	800acdc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	330c      	adds	r3, #12
 800acae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	e853 3f00 	ldrex	r3, [r3]
 800acb6:	60fb      	str	r3, [r7, #12]
   return(result);
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	f023 0310 	bic.w	r3, r3, #16
 800acbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800acc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	330c      	adds	r3, #12
 800acc6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800acc8:	61fa      	str	r2, [r7, #28]
 800acca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800accc:	69b9      	ldr	r1, [r7, #24]
 800acce:	69fa      	ldr	r2, [r7, #28]
 800acd0:	e841 2300 	strex	r3, r2, [r1]
 800acd4:	617b      	str	r3, [r7, #20]
   return(result);
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d1e5      	bne.n	800aca8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ace0:	2b01      	cmp	r3, #1
 800ace2:	d106      	bne.n	800acf2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ace4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ace6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ace8:	4619      	mov	r1, r3
 800acea:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800acec:	f7ff ff0e 	bl	800ab0c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800acf0:	e002      	b.n	800acf8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800acf2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800acf4:	f7f8 fbfe 	bl	80034f4 <HAL_UART_RxCpltCallback>
}
 800acf8:	bf00      	nop
 800acfa:	3770      	adds	r7, #112	; 0x70
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}

0800ad00 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b084      	sub	sp, #16
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad0c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad12:	2b01      	cmp	r3, #1
 800ad14:	d108      	bne.n	800ad28 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ad1a:	085b      	lsrs	r3, r3, #1
 800ad1c:	b29b      	uxth	r3, r3
 800ad1e:	4619      	mov	r1, r3
 800ad20:	68f8      	ldr	r0, [r7, #12]
 800ad22:	f7ff fef3 	bl	800ab0c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ad26:	e002      	b.n	800ad2e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800ad28:	68f8      	ldr	r0, [r7, #12]
 800ad2a:	f7ff fedb 	bl	800aae4 <HAL_UART_RxHalfCpltCallback>
}
 800ad2e:	bf00      	nop
 800ad30:	3710      	adds	r7, #16
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}

0800ad36 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ad36:	b580      	push	{r7, lr}
 800ad38:	b084      	sub	sp, #16
 800ad3a:	af00      	add	r7, sp, #0
 800ad3c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad46:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	695b      	ldr	r3, [r3, #20]
 800ad4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad52:	2b80      	cmp	r3, #128	; 0x80
 800ad54:	bf0c      	ite	eq
 800ad56:	2301      	moveq	r3, #1
 800ad58:	2300      	movne	r3, #0
 800ad5a:	b2db      	uxtb	r3, r3
 800ad5c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad64:	b2db      	uxtb	r3, r3
 800ad66:	2b21      	cmp	r3, #33	; 0x21
 800ad68:	d108      	bne.n	800ad7c <UART_DMAError+0x46>
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d005      	beq.n	800ad7c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	2200      	movs	r2, #0
 800ad74:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800ad76:	68b8      	ldr	r0, [r7, #8]
 800ad78:	f000 f8c6 	bl	800af08 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	695b      	ldr	r3, [r3, #20]
 800ad82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad86:	2b40      	cmp	r3, #64	; 0x40
 800ad88:	bf0c      	ite	eq
 800ad8a:	2301      	moveq	r3, #1
 800ad8c:	2300      	movne	r3, #0
 800ad8e:	b2db      	uxtb	r3, r3
 800ad90:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ad98:	b2db      	uxtb	r3, r3
 800ad9a:	2b22      	cmp	r3, #34	; 0x22
 800ad9c:	d108      	bne.n	800adb0 <UART_DMAError+0x7a>
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d005      	beq.n	800adb0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	2200      	movs	r2, #0
 800ada8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800adaa:	68b8      	ldr	r0, [r7, #8]
 800adac:	f000 f8d4 	bl	800af58 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adb4:	f043 0210 	orr.w	r2, r3, #16
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800adbc:	68b8      	ldr	r0, [r7, #8]
 800adbe:	f7ff fe9b 	bl	800aaf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800adc2:	bf00      	nop
 800adc4:	3710      	adds	r7, #16
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}
	...

0800adcc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b098      	sub	sp, #96	; 0x60
 800add0:	af00      	add	r7, sp, #0
 800add2:	60f8      	str	r0, [r7, #12]
 800add4:	60b9      	str	r1, [r7, #8]
 800add6:	4613      	mov	r3, r2
 800add8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800adda:	68ba      	ldr	r2, [r7, #8]
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	88fa      	ldrh	r2, [r7, #6]
 800ade4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	2200      	movs	r2, #0
 800adea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	2222      	movs	r2, #34	; 0x22
 800adf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adf8:	4a40      	ldr	r2, [pc, #256]	; (800aefc <UART_Start_Receive_DMA+0x130>)
 800adfa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae00:	4a3f      	ldr	r2, [pc, #252]	; (800af00 <UART_Start_Receive_DMA+0x134>)
 800ae02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae08:	4a3e      	ldr	r2, [pc, #248]	; (800af04 <UART_Start_Receive_DMA+0x138>)
 800ae0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae10:	2200      	movs	r2, #0
 800ae12:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800ae14:	f107 0308 	add.w	r3, r7, #8
 800ae18:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	3304      	adds	r3, #4
 800ae24:	4619      	mov	r1, r3
 800ae26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae28:	681a      	ldr	r2, [r3, #0]
 800ae2a:	88fb      	ldrh	r3, [r7, #6]
 800ae2c:	f7fc ff6c 	bl	8007d08 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800ae30:	2300      	movs	r3, #0
 800ae32:	613b      	str	r3, [r7, #16]
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	613b      	str	r3, [r7, #16]
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	685b      	ldr	r3, [r3, #4]
 800ae42:	613b      	str	r3, [r7, #16]
 800ae44:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	691b      	ldr	r3, [r3, #16]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d019      	beq.n	800ae8a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	330c      	adds	r3, #12
 800ae5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae60:	e853 3f00 	ldrex	r3, [r3]
 800ae64:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ae66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae6c:	65bb      	str	r3, [r7, #88]	; 0x58
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	330c      	adds	r3, #12
 800ae74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ae76:	64fa      	str	r2, [r7, #76]	; 0x4c
 800ae78:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae7a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ae7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ae7e:	e841 2300 	strex	r3, r2, [r1]
 800ae82:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ae84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d1e5      	bne.n	800ae56 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	3314      	adds	r3, #20
 800ae90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae94:	e853 3f00 	ldrex	r3, [r3]
 800ae98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ae9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae9c:	f043 0301 	orr.w	r3, r3, #1
 800aea0:	657b      	str	r3, [r7, #84]	; 0x54
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	3314      	adds	r3, #20
 800aea8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aeaa:	63ba      	str	r2, [r7, #56]	; 0x38
 800aeac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800aeb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aeb2:	e841 2300 	strex	r3, r2, [r1]
 800aeb6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aeb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d1e5      	bne.n	800ae8a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	3314      	adds	r3, #20
 800aec4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aec6:	69bb      	ldr	r3, [r7, #24]
 800aec8:	e853 3f00 	ldrex	r3, [r3]
 800aecc:	617b      	str	r3, [r7, #20]
   return(result);
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aed4:	653b      	str	r3, [r7, #80]	; 0x50
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	3314      	adds	r3, #20
 800aedc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aede:	627a      	str	r2, [r7, #36]	; 0x24
 800aee0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aee2:	6a39      	ldr	r1, [r7, #32]
 800aee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aee6:	e841 2300 	strex	r3, r2, [r1]
 800aeea:	61fb      	str	r3, [r7, #28]
   return(result);
 800aeec:	69fb      	ldr	r3, [r7, #28]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d1e5      	bne.n	800aebe <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800aef2:	2300      	movs	r3, #0
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3760      	adds	r7, #96	; 0x60
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}
 800aefc:	0800abdb 	.word	0x0800abdb
 800af00:	0800ad01 	.word	0x0800ad01
 800af04:	0800ad37 	.word	0x0800ad37

0800af08 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800af08:	b480      	push	{r7}
 800af0a:	b089      	sub	sp, #36	; 0x24
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	330c      	adds	r3, #12
 800af16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	e853 3f00 	ldrex	r3, [r3]
 800af1e:	60bb      	str	r3, [r7, #8]
   return(result);
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800af26:	61fb      	str	r3, [r7, #28]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	330c      	adds	r3, #12
 800af2e:	69fa      	ldr	r2, [r7, #28]
 800af30:	61ba      	str	r2, [r7, #24]
 800af32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af34:	6979      	ldr	r1, [r7, #20]
 800af36:	69ba      	ldr	r2, [r7, #24]
 800af38:	e841 2300 	strex	r3, r2, [r1]
 800af3c:	613b      	str	r3, [r7, #16]
   return(result);
 800af3e:	693b      	ldr	r3, [r7, #16]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d1e5      	bne.n	800af10 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2220      	movs	r2, #32
 800af48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800af4c:	bf00      	nop
 800af4e:	3724      	adds	r7, #36	; 0x24
 800af50:	46bd      	mov	sp, r7
 800af52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af56:	4770      	bx	lr

0800af58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800af58:	b480      	push	{r7}
 800af5a:	b095      	sub	sp, #84	; 0x54
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	330c      	adds	r3, #12
 800af66:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af6a:	e853 3f00 	ldrex	r3, [r3]
 800af6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800af70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800af76:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	330c      	adds	r3, #12
 800af7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800af80:	643a      	str	r2, [r7, #64]	; 0x40
 800af82:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800af86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af88:	e841 2300 	strex	r3, r2, [r1]
 800af8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800af8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af90:	2b00      	cmp	r3, #0
 800af92:	d1e5      	bne.n	800af60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	3314      	adds	r3, #20
 800af9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af9c:	6a3b      	ldr	r3, [r7, #32]
 800af9e:	e853 3f00 	ldrex	r3, [r3]
 800afa2:	61fb      	str	r3, [r7, #28]
   return(result);
 800afa4:	69fb      	ldr	r3, [r7, #28]
 800afa6:	f023 0301 	bic.w	r3, r3, #1
 800afaa:	64bb      	str	r3, [r7, #72]	; 0x48
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	3314      	adds	r3, #20
 800afb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800afb4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800afb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800afba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800afbc:	e841 2300 	strex	r3, r2, [r1]
 800afc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800afc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d1e5      	bne.n	800af94 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afcc:	2b01      	cmp	r3, #1
 800afce:	d119      	bne.n	800b004 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	330c      	adds	r3, #12
 800afd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	e853 3f00 	ldrex	r3, [r3]
 800afde:	60bb      	str	r3, [r7, #8]
   return(result);
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	f023 0310 	bic.w	r3, r3, #16
 800afe6:	647b      	str	r3, [r7, #68]	; 0x44
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	330c      	adds	r3, #12
 800afee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aff0:	61ba      	str	r2, [r7, #24]
 800aff2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aff4:	6979      	ldr	r1, [r7, #20]
 800aff6:	69ba      	ldr	r2, [r7, #24]
 800aff8:	e841 2300 	strex	r3, r2, [r1]
 800affc:	613b      	str	r3, [r7, #16]
   return(result);
 800affe:	693b      	ldr	r3, [r7, #16]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d1e5      	bne.n	800afd0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2220      	movs	r2, #32
 800b008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2200      	movs	r2, #0
 800b010:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b012:	bf00      	nop
 800b014:	3754      	adds	r7, #84	; 0x54
 800b016:	46bd      	mov	sp, r7
 800b018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01c:	4770      	bx	lr

0800b01e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b01e:	b580      	push	{r7, lr}
 800b020:	b084      	sub	sp, #16
 800b022:	af00      	add	r7, sp, #0
 800b024:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b02a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	2200      	movs	r2, #0
 800b030:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	2200      	movs	r2, #0
 800b036:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b038:	68f8      	ldr	r0, [r7, #12]
 800b03a:	f7ff fd5d 	bl	800aaf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b03e:	bf00      	nop
 800b040:	3710      	adds	r7, #16
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}

0800b046 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b046:	b480      	push	{r7}
 800b048:	b085      	sub	sp, #20
 800b04a:	af00      	add	r7, sp, #0
 800b04c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b054:	b2db      	uxtb	r3, r3
 800b056:	2b21      	cmp	r3, #33	; 0x21
 800b058:	d13e      	bne.n	800b0d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	689b      	ldr	r3, [r3, #8]
 800b05e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b062:	d114      	bne.n	800b08e <UART_Transmit_IT+0x48>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	691b      	ldr	r3, [r3, #16]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d110      	bne.n	800b08e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6a1b      	ldr	r3, [r3, #32]
 800b070:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	881b      	ldrh	r3, [r3, #0]
 800b076:	461a      	mov	r2, r3
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b080:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6a1b      	ldr	r3, [r3, #32]
 800b086:	1c9a      	adds	r2, r3, #2
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	621a      	str	r2, [r3, #32]
 800b08c:	e008      	b.n	800b0a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6a1b      	ldr	r3, [r3, #32]
 800b092:	1c59      	adds	r1, r3, #1
 800b094:	687a      	ldr	r2, [r7, #4]
 800b096:	6211      	str	r1, [r2, #32]
 800b098:	781a      	ldrb	r2, [r3, #0]
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b0a4:	b29b      	uxth	r3, r3
 800b0a6:	3b01      	subs	r3, #1
 800b0a8:	b29b      	uxth	r3, r3
 800b0aa:	687a      	ldr	r2, [r7, #4]
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d10f      	bne.n	800b0d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	68da      	ldr	r2, [r3, #12]
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b0c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	68da      	ldr	r2, [r3, #12]
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b0d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	e000      	b.n	800b0da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b0d8:	2302      	movs	r3, #2
  }
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3714      	adds	r7, #20
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e4:	4770      	bx	lr

0800b0e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b0e6:	b580      	push	{r7, lr}
 800b0e8:	b082      	sub	sp, #8
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	68da      	ldr	r2, [r3, #12]
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b0fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2220      	movs	r2, #32
 800b102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f7f8 f9e2 	bl	80034d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b10c:	2300      	movs	r3, #0
}
 800b10e:	4618      	mov	r0, r3
 800b110:	3708      	adds	r7, #8
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}

0800b116 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b116:	b580      	push	{r7, lr}
 800b118:	b08c      	sub	sp, #48	; 0x30
 800b11a:	af00      	add	r7, sp, #0
 800b11c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b124:	b2db      	uxtb	r3, r3
 800b126:	2b22      	cmp	r3, #34	; 0x22
 800b128:	f040 80ab 	bne.w	800b282 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	689b      	ldr	r3, [r3, #8]
 800b130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b134:	d117      	bne.n	800b166 <UART_Receive_IT+0x50>
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	691b      	ldr	r3, [r3, #16]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d113      	bne.n	800b166 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b13e:	2300      	movs	r3, #0
 800b140:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b146:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	685b      	ldr	r3, [r3, #4]
 800b14e:	b29b      	uxth	r3, r3
 800b150:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b154:	b29a      	uxth	r2, r3
 800b156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b158:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b15e:	1c9a      	adds	r2, r3, #2
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	629a      	str	r2, [r3, #40]	; 0x28
 800b164:	e026      	b.n	800b1b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b16a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b16c:	2300      	movs	r3, #0
 800b16e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	689b      	ldr	r3, [r3, #8]
 800b174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b178:	d007      	beq.n	800b18a <UART_Receive_IT+0x74>
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	689b      	ldr	r3, [r3, #8]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d10a      	bne.n	800b198 <UART_Receive_IT+0x82>
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	691b      	ldr	r3, [r3, #16]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d106      	bne.n	800b198 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	685b      	ldr	r3, [r3, #4]
 800b190:	b2da      	uxtb	r2, r3
 800b192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b194:	701a      	strb	r2, [r3, #0]
 800b196:	e008      	b.n	800b1aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	b2db      	uxtb	r3, r3
 800b1a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1a4:	b2da      	uxtb	r2, r3
 800b1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1ae:	1c5a      	adds	r2, r3, #1
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b1b8:	b29b      	uxth	r3, r3
 800b1ba:	3b01      	subs	r3, #1
 800b1bc:	b29b      	uxth	r3, r3
 800b1be:	687a      	ldr	r2, [r7, #4]
 800b1c0:	4619      	mov	r1, r3
 800b1c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d15a      	bne.n	800b27e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	68da      	ldr	r2, [r3, #12]
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f022 0220 	bic.w	r2, r2, #32
 800b1d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	68da      	ldr	r2, [r3, #12]
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b1e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	695a      	ldr	r2, [r3, #20]
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f022 0201 	bic.w	r2, r2, #1
 800b1f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2220      	movs	r2, #32
 800b1fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b204:	2b01      	cmp	r3, #1
 800b206:	d135      	bne.n	800b274 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2200      	movs	r2, #0
 800b20c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	330c      	adds	r3, #12
 800b214:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	e853 3f00 	ldrex	r3, [r3]
 800b21c:	613b      	str	r3, [r7, #16]
   return(result);
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	f023 0310 	bic.w	r3, r3, #16
 800b224:	627b      	str	r3, [r7, #36]	; 0x24
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	330c      	adds	r3, #12
 800b22c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b22e:	623a      	str	r2, [r7, #32]
 800b230:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b232:	69f9      	ldr	r1, [r7, #28]
 800b234:	6a3a      	ldr	r2, [r7, #32]
 800b236:	e841 2300 	strex	r3, r2, [r1]
 800b23a:	61bb      	str	r3, [r7, #24]
   return(result);
 800b23c:	69bb      	ldr	r3, [r7, #24]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d1e5      	bne.n	800b20e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f003 0310 	and.w	r3, r3, #16
 800b24c:	2b10      	cmp	r3, #16
 800b24e:	d10a      	bne.n	800b266 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b250:	2300      	movs	r3, #0
 800b252:	60fb      	str	r3, [r7, #12]
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	60fb      	str	r3, [r7, #12]
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	685b      	ldr	r3, [r3, #4]
 800b262:	60fb      	str	r3, [r7, #12]
 800b264:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b26a:	4619      	mov	r1, r3
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f7ff fc4d 	bl	800ab0c <HAL_UARTEx_RxEventCallback>
 800b272:	e002      	b.n	800b27a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f7f8 f93d 	bl	80034f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b27a:	2300      	movs	r3, #0
 800b27c:	e002      	b.n	800b284 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b27e:	2300      	movs	r3, #0
 800b280:	e000      	b.n	800b284 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b282:	2302      	movs	r3, #2
  }
}
 800b284:	4618      	mov	r0, r3
 800b286:	3730      	adds	r7, #48	; 0x30
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}

0800b28c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b28c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b290:	b0c0      	sub	sp, #256	; 0x100
 800b292:	af00      	add	r7, sp, #0
 800b294:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	691b      	ldr	r3, [r3, #16]
 800b2a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b2a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2a8:	68d9      	ldr	r1, [r3, #12]
 800b2aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2ae:	681a      	ldr	r2, [r3, #0]
 800b2b0:	ea40 0301 	orr.w	r3, r0, r1
 800b2b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b2b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2ba:	689a      	ldr	r2, [r3, #8]
 800b2bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2c0:	691b      	ldr	r3, [r3, #16]
 800b2c2:	431a      	orrs	r2, r3
 800b2c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2c8:	695b      	ldr	r3, [r3, #20]
 800b2ca:	431a      	orrs	r2, r3
 800b2cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2d0:	69db      	ldr	r3, [r3, #28]
 800b2d2:	4313      	orrs	r3, r2
 800b2d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b2d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	68db      	ldr	r3, [r3, #12]
 800b2e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b2e4:	f021 010c 	bic.w	r1, r1, #12
 800b2e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2ec:	681a      	ldr	r2, [r3, #0]
 800b2ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b2f2:	430b      	orrs	r3, r1
 800b2f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b2f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	695b      	ldr	r3, [r3, #20]
 800b2fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b306:	6999      	ldr	r1, [r3, #24]
 800b308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b30c:	681a      	ldr	r2, [r3, #0]
 800b30e:	ea40 0301 	orr.w	r3, r0, r1
 800b312:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b318:	681a      	ldr	r2, [r3, #0]
 800b31a:	4b8f      	ldr	r3, [pc, #572]	; (800b558 <UART_SetConfig+0x2cc>)
 800b31c:	429a      	cmp	r2, r3
 800b31e:	d005      	beq.n	800b32c <UART_SetConfig+0xa0>
 800b320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b324:	681a      	ldr	r2, [r3, #0]
 800b326:	4b8d      	ldr	r3, [pc, #564]	; (800b55c <UART_SetConfig+0x2d0>)
 800b328:	429a      	cmp	r2, r3
 800b32a:	d104      	bne.n	800b336 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b32c:	f7fd fe7a 	bl	8009024 <HAL_RCC_GetPCLK2Freq>
 800b330:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b334:	e003      	b.n	800b33e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b336:	f7fd fe61 	bl	8008ffc <HAL_RCC_GetPCLK1Freq>
 800b33a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b33e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b342:	69db      	ldr	r3, [r3, #28]
 800b344:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b348:	f040 810c 	bne.w	800b564 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b34c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b350:	2200      	movs	r2, #0
 800b352:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b356:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b35a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b35e:	4622      	mov	r2, r4
 800b360:	462b      	mov	r3, r5
 800b362:	1891      	adds	r1, r2, r2
 800b364:	65b9      	str	r1, [r7, #88]	; 0x58
 800b366:	415b      	adcs	r3, r3
 800b368:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b36a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b36e:	4621      	mov	r1, r4
 800b370:	eb12 0801 	adds.w	r8, r2, r1
 800b374:	4629      	mov	r1, r5
 800b376:	eb43 0901 	adc.w	r9, r3, r1
 800b37a:	f04f 0200 	mov.w	r2, #0
 800b37e:	f04f 0300 	mov.w	r3, #0
 800b382:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b386:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b38a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b38e:	4690      	mov	r8, r2
 800b390:	4699      	mov	r9, r3
 800b392:	4623      	mov	r3, r4
 800b394:	eb18 0303 	adds.w	r3, r8, r3
 800b398:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b39c:	462b      	mov	r3, r5
 800b39e:	eb49 0303 	adc.w	r3, r9, r3
 800b3a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b3a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3aa:	685b      	ldr	r3, [r3, #4]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b3b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b3b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b3ba:	460b      	mov	r3, r1
 800b3bc:	18db      	adds	r3, r3, r3
 800b3be:	653b      	str	r3, [r7, #80]	; 0x50
 800b3c0:	4613      	mov	r3, r2
 800b3c2:	eb42 0303 	adc.w	r3, r2, r3
 800b3c6:	657b      	str	r3, [r7, #84]	; 0x54
 800b3c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b3cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b3d0:	f7f5 fbd4 	bl	8000b7c <__aeabi_uldivmod>
 800b3d4:	4602      	mov	r2, r0
 800b3d6:	460b      	mov	r3, r1
 800b3d8:	4b61      	ldr	r3, [pc, #388]	; (800b560 <UART_SetConfig+0x2d4>)
 800b3da:	fba3 2302 	umull	r2, r3, r3, r2
 800b3de:	095b      	lsrs	r3, r3, #5
 800b3e0:	011c      	lsls	r4, r3, #4
 800b3e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b3ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b3f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b3f4:	4642      	mov	r2, r8
 800b3f6:	464b      	mov	r3, r9
 800b3f8:	1891      	adds	r1, r2, r2
 800b3fa:	64b9      	str	r1, [r7, #72]	; 0x48
 800b3fc:	415b      	adcs	r3, r3
 800b3fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b400:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b404:	4641      	mov	r1, r8
 800b406:	eb12 0a01 	adds.w	sl, r2, r1
 800b40a:	4649      	mov	r1, r9
 800b40c:	eb43 0b01 	adc.w	fp, r3, r1
 800b410:	f04f 0200 	mov.w	r2, #0
 800b414:	f04f 0300 	mov.w	r3, #0
 800b418:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b41c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b420:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b424:	4692      	mov	sl, r2
 800b426:	469b      	mov	fp, r3
 800b428:	4643      	mov	r3, r8
 800b42a:	eb1a 0303 	adds.w	r3, sl, r3
 800b42e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b432:	464b      	mov	r3, r9
 800b434:	eb4b 0303 	adc.w	r3, fp, r3
 800b438:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b43c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b440:	685b      	ldr	r3, [r3, #4]
 800b442:	2200      	movs	r2, #0
 800b444:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b448:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b44c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b450:	460b      	mov	r3, r1
 800b452:	18db      	adds	r3, r3, r3
 800b454:	643b      	str	r3, [r7, #64]	; 0x40
 800b456:	4613      	mov	r3, r2
 800b458:	eb42 0303 	adc.w	r3, r2, r3
 800b45c:	647b      	str	r3, [r7, #68]	; 0x44
 800b45e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b462:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b466:	f7f5 fb89 	bl	8000b7c <__aeabi_uldivmod>
 800b46a:	4602      	mov	r2, r0
 800b46c:	460b      	mov	r3, r1
 800b46e:	4611      	mov	r1, r2
 800b470:	4b3b      	ldr	r3, [pc, #236]	; (800b560 <UART_SetConfig+0x2d4>)
 800b472:	fba3 2301 	umull	r2, r3, r3, r1
 800b476:	095b      	lsrs	r3, r3, #5
 800b478:	2264      	movs	r2, #100	; 0x64
 800b47a:	fb02 f303 	mul.w	r3, r2, r3
 800b47e:	1acb      	subs	r3, r1, r3
 800b480:	00db      	lsls	r3, r3, #3
 800b482:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b486:	4b36      	ldr	r3, [pc, #216]	; (800b560 <UART_SetConfig+0x2d4>)
 800b488:	fba3 2302 	umull	r2, r3, r3, r2
 800b48c:	095b      	lsrs	r3, r3, #5
 800b48e:	005b      	lsls	r3, r3, #1
 800b490:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b494:	441c      	add	r4, r3
 800b496:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b49a:	2200      	movs	r2, #0
 800b49c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b4a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b4a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b4a8:	4642      	mov	r2, r8
 800b4aa:	464b      	mov	r3, r9
 800b4ac:	1891      	adds	r1, r2, r2
 800b4ae:	63b9      	str	r1, [r7, #56]	; 0x38
 800b4b0:	415b      	adcs	r3, r3
 800b4b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b4b8:	4641      	mov	r1, r8
 800b4ba:	1851      	adds	r1, r2, r1
 800b4bc:	6339      	str	r1, [r7, #48]	; 0x30
 800b4be:	4649      	mov	r1, r9
 800b4c0:	414b      	adcs	r3, r1
 800b4c2:	637b      	str	r3, [r7, #52]	; 0x34
 800b4c4:	f04f 0200 	mov.w	r2, #0
 800b4c8:	f04f 0300 	mov.w	r3, #0
 800b4cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b4d0:	4659      	mov	r1, fp
 800b4d2:	00cb      	lsls	r3, r1, #3
 800b4d4:	4651      	mov	r1, sl
 800b4d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b4da:	4651      	mov	r1, sl
 800b4dc:	00ca      	lsls	r2, r1, #3
 800b4de:	4610      	mov	r0, r2
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	4642      	mov	r2, r8
 800b4e6:	189b      	adds	r3, r3, r2
 800b4e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b4ec:	464b      	mov	r3, r9
 800b4ee:	460a      	mov	r2, r1
 800b4f0:	eb42 0303 	adc.w	r3, r2, r3
 800b4f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b4f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4fc:	685b      	ldr	r3, [r3, #4]
 800b4fe:	2200      	movs	r2, #0
 800b500:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b504:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b508:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b50c:	460b      	mov	r3, r1
 800b50e:	18db      	adds	r3, r3, r3
 800b510:	62bb      	str	r3, [r7, #40]	; 0x28
 800b512:	4613      	mov	r3, r2
 800b514:	eb42 0303 	adc.w	r3, r2, r3
 800b518:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b51a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b51e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b522:	f7f5 fb2b 	bl	8000b7c <__aeabi_uldivmod>
 800b526:	4602      	mov	r2, r0
 800b528:	460b      	mov	r3, r1
 800b52a:	4b0d      	ldr	r3, [pc, #52]	; (800b560 <UART_SetConfig+0x2d4>)
 800b52c:	fba3 1302 	umull	r1, r3, r3, r2
 800b530:	095b      	lsrs	r3, r3, #5
 800b532:	2164      	movs	r1, #100	; 0x64
 800b534:	fb01 f303 	mul.w	r3, r1, r3
 800b538:	1ad3      	subs	r3, r2, r3
 800b53a:	00db      	lsls	r3, r3, #3
 800b53c:	3332      	adds	r3, #50	; 0x32
 800b53e:	4a08      	ldr	r2, [pc, #32]	; (800b560 <UART_SetConfig+0x2d4>)
 800b540:	fba2 2303 	umull	r2, r3, r2, r3
 800b544:	095b      	lsrs	r3, r3, #5
 800b546:	f003 0207 	and.w	r2, r3, #7
 800b54a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	4422      	add	r2, r4
 800b552:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b554:	e105      	b.n	800b762 <UART_SetConfig+0x4d6>
 800b556:	bf00      	nop
 800b558:	40011000 	.word	0x40011000
 800b55c:	40011400 	.word	0x40011400
 800b560:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b564:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b568:	2200      	movs	r2, #0
 800b56a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b56e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b572:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b576:	4642      	mov	r2, r8
 800b578:	464b      	mov	r3, r9
 800b57a:	1891      	adds	r1, r2, r2
 800b57c:	6239      	str	r1, [r7, #32]
 800b57e:	415b      	adcs	r3, r3
 800b580:	627b      	str	r3, [r7, #36]	; 0x24
 800b582:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b586:	4641      	mov	r1, r8
 800b588:	1854      	adds	r4, r2, r1
 800b58a:	4649      	mov	r1, r9
 800b58c:	eb43 0501 	adc.w	r5, r3, r1
 800b590:	f04f 0200 	mov.w	r2, #0
 800b594:	f04f 0300 	mov.w	r3, #0
 800b598:	00eb      	lsls	r3, r5, #3
 800b59a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b59e:	00e2      	lsls	r2, r4, #3
 800b5a0:	4614      	mov	r4, r2
 800b5a2:	461d      	mov	r5, r3
 800b5a4:	4643      	mov	r3, r8
 800b5a6:	18e3      	adds	r3, r4, r3
 800b5a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b5ac:	464b      	mov	r3, r9
 800b5ae:	eb45 0303 	adc.w	r3, r5, r3
 800b5b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b5b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5ba:	685b      	ldr	r3, [r3, #4]
 800b5bc:	2200      	movs	r2, #0
 800b5be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b5c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b5c6:	f04f 0200 	mov.w	r2, #0
 800b5ca:	f04f 0300 	mov.w	r3, #0
 800b5ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b5d2:	4629      	mov	r1, r5
 800b5d4:	008b      	lsls	r3, r1, #2
 800b5d6:	4621      	mov	r1, r4
 800b5d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b5dc:	4621      	mov	r1, r4
 800b5de:	008a      	lsls	r2, r1, #2
 800b5e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b5e4:	f7f5 faca 	bl	8000b7c <__aeabi_uldivmod>
 800b5e8:	4602      	mov	r2, r0
 800b5ea:	460b      	mov	r3, r1
 800b5ec:	4b60      	ldr	r3, [pc, #384]	; (800b770 <UART_SetConfig+0x4e4>)
 800b5ee:	fba3 2302 	umull	r2, r3, r3, r2
 800b5f2:	095b      	lsrs	r3, r3, #5
 800b5f4:	011c      	lsls	r4, r3, #4
 800b5f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b600:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b604:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b608:	4642      	mov	r2, r8
 800b60a:	464b      	mov	r3, r9
 800b60c:	1891      	adds	r1, r2, r2
 800b60e:	61b9      	str	r1, [r7, #24]
 800b610:	415b      	adcs	r3, r3
 800b612:	61fb      	str	r3, [r7, #28]
 800b614:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b618:	4641      	mov	r1, r8
 800b61a:	1851      	adds	r1, r2, r1
 800b61c:	6139      	str	r1, [r7, #16]
 800b61e:	4649      	mov	r1, r9
 800b620:	414b      	adcs	r3, r1
 800b622:	617b      	str	r3, [r7, #20]
 800b624:	f04f 0200 	mov.w	r2, #0
 800b628:	f04f 0300 	mov.w	r3, #0
 800b62c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b630:	4659      	mov	r1, fp
 800b632:	00cb      	lsls	r3, r1, #3
 800b634:	4651      	mov	r1, sl
 800b636:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b63a:	4651      	mov	r1, sl
 800b63c:	00ca      	lsls	r2, r1, #3
 800b63e:	4610      	mov	r0, r2
 800b640:	4619      	mov	r1, r3
 800b642:	4603      	mov	r3, r0
 800b644:	4642      	mov	r2, r8
 800b646:	189b      	adds	r3, r3, r2
 800b648:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b64c:	464b      	mov	r3, r9
 800b64e:	460a      	mov	r2, r1
 800b650:	eb42 0303 	adc.w	r3, r2, r3
 800b654:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b65c:	685b      	ldr	r3, [r3, #4]
 800b65e:	2200      	movs	r2, #0
 800b660:	67bb      	str	r3, [r7, #120]	; 0x78
 800b662:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b664:	f04f 0200 	mov.w	r2, #0
 800b668:	f04f 0300 	mov.w	r3, #0
 800b66c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b670:	4649      	mov	r1, r9
 800b672:	008b      	lsls	r3, r1, #2
 800b674:	4641      	mov	r1, r8
 800b676:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b67a:	4641      	mov	r1, r8
 800b67c:	008a      	lsls	r2, r1, #2
 800b67e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b682:	f7f5 fa7b 	bl	8000b7c <__aeabi_uldivmod>
 800b686:	4602      	mov	r2, r0
 800b688:	460b      	mov	r3, r1
 800b68a:	4b39      	ldr	r3, [pc, #228]	; (800b770 <UART_SetConfig+0x4e4>)
 800b68c:	fba3 1302 	umull	r1, r3, r3, r2
 800b690:	095b      	lsrs	r3, r3, #5
 800b692:	2164      	movs	r1, #100	; 0x64
 800b694:	fb01 f303 	mul.w	r3, r1, r3
 800b698:	1ad3      	subs	r3, r2, r3
 800b69a:	011b      	lsls	r3, r3, #4
 800b69c:	3332      	adds	r3, #50	; 0x32
 800b69e:	4a34      	ldr	r2, [pc, #208]	; (800b770 <UART_SetConfig+0x4e4>)
 800b6a0:	fba2 2303 	umull	r2, r3, r2, r3
 800b6a4:	095b      	lsrs	r3, r3, #5
 800b6a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b6aa:	441c      	add	r4, r3
 800b6ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	673b      	str	r3, [r7, #112]	; 0x70
 800b6b4:	677a      	str	r2, [r7, #116]	; 0x74
 800b6b6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b6ba:	4642      	mov	r2, r8
 800b6bc:	464b      	mov	r3, r9
 800b6be:	1891      	adds	r1, r2, r2
 800b6c0:	60b9      	str	r1, [r7, #8]
 800b6c2:	415b      	adcs	r3, r3
 800b6c4:	60fb      	str	r3, [r7, #12]
 800b6c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b6ca:	4641      	mov	r1, r8
 800b6cc:	1851      	adds	r1, r2, r1
 800b6ce:	6039      	str	r1, [r7, #0]
 800b6d0:	4649      	mov	r1, r9
 800b6d2:	414b      	adcs	r3, r1
 800b6d4:	607b      	str	r3, [r7, #4]
 800b6d6:	f04f 0200 	mov.w	r2, #0
 800b6da:	f04f 0300 	mov.w	r3, #0
 800b6de:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b6e2:	4659      	mov	r1, fp
 800b6e4:	00cb      	lsls	r3, r1, #3
 800b6e6:	4651      	mov	r1, sl
 800b6e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b6ec:	4651      	mov	r1, sl
 800b6ee:	00ca      	lsls	r2, r1, #3
 800b6f0:	4610      	mov	r0, r2
 800b6f2:	4619      	mov	r1, r3
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	4642      	mov	r2, r8
 800b6f8:	189b      	adds	r3, r3, r2
 800b6fa:	66bb      	str	r3, [r7, #104]	; 0x68
 800b6fc:	464b      	mov	r3, r9
 800b6fe:	460a      	mov	r2, r1
 800b700:	eb42 0303 	adc.w	r3, r2, r3
 800b704:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b70a:	685b      	ldr	r3, [r3, #4]
 800b70c:	2200      	movs	r2, #0
 800b70e:	663b      	str	r3, [r7, #96]	; 0x60
 800b710:	667a      	str	r2, [r7, #100]	; 0x64
 800b712:	f04f 0200 	mov.w	r2, #0
 800b716:	f04f 0300 	mov.w	r3, #0
 800b71a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b71e:	4649      	mov	r1, r9
 800b720:	008b      	lsls	r3, r1, #2
 800b722:	4641      	mov	r1, r8
 800b724:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b728:	4641      	mov	r1, r8
 800b72a:	008a      	lsls	r2, r1, #2
 800b72c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b730:	f7f5 fa24 	bl	8000b7c <__aeabi_uldivmod>
 800b734:	4602      	mov	r2, r0
 800b736:	460b      	mov	r3, r1
 800b738:	4b0d      	ldr	r3, [pc, #52]	; (800b770 <UART_SetConfig+0x4e4>)
 800b73a:	fba3 1302 	umull	r1, r3, r3, r2
 800b73e:	095b      	lsrs	r3, r3, #5
 800b740:	2164      	movs	r1, #100	; 0x64
 800b742:	fb01 f303 	mul.w	r3, r1, r3
 800b746:	1ad3      	subs	r3, r2, r3
 800b748:	011b      	lsls	r3, r3, #4
 800b74a:	3332      	adds	r3, #50	; 0x32
 800b74c:	4a08      	ldr	r2, [pc, #32]	; (800b770 <UART_SetConfig+0x4e4>)
 800b74e:	fba2 2303 	umull	r2, r3, r2, r3
 800b752:	095b      	lsrs	r3, r3, #5
 800b754:	f003 020f 	and.w	r2, r3, #15
 800b758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	4422      	add	r2, r4
 800b760:	609a      	str	r2, [r3, #8]
}
 800b762:	bf00      	nop
 800b764:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b768:	46bd      	mov	sp, r7
 800b76a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b76e:	bf00      	nop
 800b770:	51eb851f 	.word	0x51eb851f

0800b774 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b774:	b480      	push	{r7}
 800b776:	b085      	sub	sp, #20
 800b778:	af00      	add	r7, sp, #0
 800b77a:	4603      	mov	r3, r0
 800b77c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b77e:	2300      	movs	r3, #0
 800b780:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b782:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b786:	2b84      	cmp	r3, #132	; 0x84
 800b788:	d005      	beq.n	800b796 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b78a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	4413      	add	r3, r2
 800b792:	3303      	adds	r3, #3
 800b794:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b796:	68fb      	ldr	r3, [r7, #12]
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3714      	adds	r7, #20
 800b79c:	46bd      	mov	sp, r7
 800b79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a2:	4770      	bx	lr

0800b7a4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b7a8:	f000 faf6 	bl	800bd98 <vTaskStartScheduler>
  
  return osOK;
 800b7ac:	2300      	movs	r3, #0
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	bd80      	pop	{r7, pc}

0800b7b2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b7b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7b4:	b089      	sub	sp, #36	; 0x24
 800b7b6:	af04      	add	r7, sp, #16
 800b7b8:	6078      	str	r0, [r7, #4]
 800b7ba:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	695b      	ldr	r3, [r3, #20]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d020      	beq.n	800b806 <osThreadCreate+0x54>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	699b      	ldr	r3, [r3, #24]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d01c      	beq.n	800b806 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	685c      	ldr	r4, [r3, #4]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681d      	ldr	r5, [r3, #0]
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	691e      	ldr	r6, [r3, #16]
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f7ff ffc8 	bl	800b774 <makeFreeRtosPriority>
 800b7e4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	695b      	ldr	r3, [r3, #20]
 800b7ea:	687a      	ldr	r2, [r7, #4]
 800b7ec:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b7ee:	9202      	str	r2, [sp, #8]
 800b7f0:	9301      	str	r3, [sp, #4]
 800b7f2:	9100      	str	r1, [sp, #0]
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	4632      	mov	r2, r6
 800b7f8:	4629      	mov	r1, r5
 800b7fa:	4620      	mov	r0, r4
 800b7fc:	f000 f8ed 	bl	800b9da <xTaskCreateStatic>
 800b800:	4603      	mov	r3, r0
 800b802:	60fb      	str	r3, [r7, #12]
 800b804:	e01c      	b.n	800b840 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	685c      	ldr	r4, [r3, #4]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b812:	b29e      	uxth	r6, r3
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b81a:	4618      	mov	r0, r3
 800b81c:	f7ff ffaa 	bl	800b774 <makeFreeRtosPriority>
 800b820:	4602      	mov	r2, r0
 800b822:	f107 030c 	add.w	r3, r7, #12
 800b826:	9301      	str	r3, [sp, #4]
 800b828:	9200      	str	r2, [sp, #0]
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	4632      	mov	r2, r6
 800b82e:	4629      	mov	r1, r5
 800b830:	4620      	mov	r0, r4
 800b832:	f000 f92f 	bl	800ba94 <xTaskCreate>
 800b836:	4603      	mov	r3, r0
 800b838:	2b01      	cmp	r3, #1
 800b83a:	d001      	beq.n	800b840 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b83c:	2300      	movs	r3, #0
 800b83e:	e000      	b.n	800b842 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b840:	68fb      	ldr	r3, [r7, #12]
}
 800b842:	4618      	mov	r0, r3
 800b844:	3714      	adds	r7, #20
 800b846:	46bd      	mov	sp, r7
 800b848:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b84a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b84a:	b580      	push	{r7, lr}
 800b84c:	b084      	sub	sp, #16
 800b84e:	af00      	add	r7, sp, #0
 800b850:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d001      	beq.n	800b860 <osDelay+0x16>
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	e000      	b.n	800b862 <osDelay+0x18>
 800b860:	2301      	movs	r3, #1
 800b862:	4618      	mov	r0, r3
 800b864:	f000 fa64 	bl	800bd30 <vTaskDelay>
  
  return osOK;
 800b868:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3710      	adds	r7, #16
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}

0800b872 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b872:	b480      	push	{r7}
 800b874:	b083      	sub	sp, #12
 800b876:	af00      	add	r7, sp, #0
 800b878:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f103 0208 	add.w	r2, r3, #8
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f04f 32ff 	mov.w	r2, #4294967295
 800b88a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f103 0208 	add.w	r2, r3, #8
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f103 0208 	add.w	r2, r3, #8
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b8a6:	bf00      	nop
 800b8a8:	370c      	adds	r7, #12
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b0:	4770      	bx	lr

0800b8b2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b8b2:	b480      	push	{r7}
 800b8b4:	b083      	sub	sp, #12
 800b8b6:	af00      	add	r7, sp, #0
 800b8b8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b8c0:	bf00      	nop
 800b8c2:	370c      	adds	r7, #12
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ca:	4770      	bx	lr

0800b8cc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	b085      	sub	sp, #20
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
 800b8d4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	685b      	ldr	r3, [r3, #4]
 800b8da:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	68fa      	ldr	r2, [r7, #12]
 800b8e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	689a      	ldr	r2, [r3, #8]
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	689b      	ldr	r3, [r3, #8]
 800b8ee:	683a      	ldr	r2, [r7, #0]
 800b8f0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	683a      	ldr	r2, [r7, #0]
 800b8f6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	687a      	ldr	r2, [r7, #4]
 800b8fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	1c5a      	adds	r2, r3, #1
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	601a      	str	r2, [r3, #0]
}
 800b908:	bf00      	nop
 800b90a:	3714      	adds	r7, #20
 800b90c:	46bd      	mov	sp, r7
 800b90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b912:	4770      	bx	lr

0800b914 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b914:	b480      	push	{r7}
 800b916:	b085      	sub	sp, #20
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
 800b91c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b92a:	d103      	bne.n	800b934 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	691b      	ldr	r3, [r3, #16]
 800b930:	60fb      	str	r3, [r7, #12]
 800b932:	e00c      	b.n	800b94e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	3308      	adds	r3, #8
 800b938:	60fb      	str	r3, [r7, #12]
 800b93a:	e002      	b.n	800b942 <vListInsert+0x2e>
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	685b      	ldr	r3, [r3, #4]
 800b940:	60fb      	str	r3, [r7, #12]
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	685b      	ldr	r3, [r3, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	68ba      	ldr	r2, [r7, #8]
 800b94a:	429a      	cmp	r2, r3
 800b94c:	d2f6      	bcs.n	800b93c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	685a      	ldr	r2, [r3, #4]
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	685b      	ldr	r3, [r3, #4]
 800b95a:	683a      	ldr	r2, [r7, #0]
 800b95c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	68fa      	ldr	r2, [r7, #12]
 800b962:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	683a      	ldr	r2, [r7, #0]
 800b968:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	687a      	ldr	r2, [r7, #4]
 800b96e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	1c5a      	adds	r2, r3, #1
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	601a      	str	r2, [r3, #0]
}
 800b97a:	bf00      	nop
 800b97c:	3714      	adds	r7, #20
 800b97e:	46bd      	mov	sp, r7
 800b980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b984:	4770      	bx	lr

0800b986 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b986:	b480      	push	{r7}
 800b988:	b085      	sub	sp, #20
 800b98a:	af00      	add	r7, sp, #0
 800b98c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	691b      	ldr	r3, [r3, #16]
 800b992:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	685b      	ldr	r3, [r3, #4]
 800b998:	687a      	ldr	r2, [r7, #4]
 800b99a:	6892      	ldr	r2, [r2, #8]
 800b99c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	689b      	ldr	r3, [r3, #8]
 800b9a2:	687a      	ldr	r2, [r7, #4]
 800b9a4:	6852      	ldr	r2, [r2, #4]
 800b9a6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	685b      	ldr	r3, [r3, #4]
 800b9ac:	687a      	ldr	r2, [r7, #4]
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	d103      	bne.n	800b9ba <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	689a      	ldr	r2, [r3, #8]
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	1e5a      	subs	r2, r3, #1
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	681b      	ldr	r3, [r3, #0]
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3714      	adds	r7, #20
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d8:	4770      	bx	lr

0800b9da <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b9da:	b580      	push	{r7, lr}
 800b9dc:	b08e      	sub	sp, #56	; 0x38
 800b9de:	af04      	add	r7, sp, #16
 800b9e0:	60f8      	str	r0, [r7, #12]
 800b9e2:	60b9      	str	r1, [r7, #8]
 800b9e4:	607a      	str	r2, [r7, #4]
 800b9e6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b9e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d10a      	bne.n	800ba04 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f2:	f383 8811 	msr	BASEPRI, r3
 800b9f6:	f3bf 8f6f 	isb	sy
 800b9fa:	f3bf 8f4f 	dsb	sy
 800b9fe:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ba00:	bf00      	nop
 800ba02:	e7fe      	b.n	800ba02 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ba04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d10a      	bne.n	800ba20 <xTaskCreateStatic+0x46>
	__asm volatile
 800ba0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba0e:	f383 8811 	msr	BASEPRI, r3
 800ba12:	f3bf 8f6f 	isb	sy
 800ba16:	f3bf 8f4f 	dsb	sy
 800ba1a:	61fb      	str	r3, [r7, #28]
}
 800ba1c:	bf00      	nop
 800ba1e:	e7fe      	b.n	800ba1e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ba20:	23b4      	movs	r3, #180	; 0xb4
 800ba22:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	2bb4      	cmp	r3, #180	; 0xb4
 800ba28:	d00a      	beq.n	800ba40 <xTaskCreateStatic+0x66>
	__asm volatile
 800ba2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba2e:	f383 8811 	msr	BASEPRI, r3
 800ba32:	f3bf 8f6f 	isb	sy
 800ba36:	f3bf 8f4f 	dsb	sy
 800ba3a:	61bb      	str	r3, [r7, #24]
}
 800ba3c:	bf00      	nop
 800ba3e:	e7fe      	b.n	800ba3e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ba40:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ba42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d01e      	beq.n	800ba86 <xTaskCreateStatic+0xac>
 800ba48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d01b      	beq.n	800ba86 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ba4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba50:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ba52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba56:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ba58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba5a:	2202      	movs	r2, #2
 800ba5c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ba60:	2300      	movs	r3, #0
 800ba62:	9303      	str	r3, [sp, #12]
 800ba64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba66:	9302      	str	r3, [sp, #8]
 800ba68:	f107 0314 	add.w	r3, r7, #20
 800ba6c:	9301      	str	r3, [sp, #4]
 800ba6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba70:	9300      	str	r3, [sp, #0]
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	687a      	ldr	r2, [r7, #4]
 800ba76:	68b9      	ldr	r1, [r7, #8]
 800ba78:	68f8      	ldr	r0, [r7, #12]
 800ba7a:	f000 f851 	bl	800bb20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ba7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba80:	f000 f8ec 	bl	800bc5c <prvAddNewTaskToReadyList>
 800ba84:	e001      	b.n	800ba8a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ba86:	2300      	movs	r3, #0
 800ba88:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ba8a:	697b      	ldr	r3, [r7, #20]
	}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3728      	adds	r7, #40	; 0x28
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}

0800ba94 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b08c      	sub	sp, #48	; 0x30
 800ba98:	af04      	add	r7, sp, #16
 800ba9a:	60f8      	str	r0, [r7, #12]
 800ba9c:	60b9      	str	r1, [r7, #8]
 800ba9e:	603b      	str	r3, [r7, #0]
 800baa0:	4613      	mov	r3, r2
 800baa2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800baa4:	88fb      	ldrh	r3, [r7, #6]
 800baa6:	009b      	lsls	r3, r3, #2
 800baa8:	4618      	mov	r0, r3
 800baaa:	f000 fef5 	bl	800c898 <pvPortMalloc>
 800baae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d00e      	beq.n	800bad4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bab6:	20b4      	movs	r0, #180	; 0xb4
 800bab8:	f000 feee 	bl	800c898 <pvPortMalloc>
 800babc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800babe:	69fb      	ldr	r3, [r7, #28]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d003      	beq.n	800bacc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bac4:	69fb      	ldr	r3, [r7, #28]
 800bac6:	697a      	ldr	r2, [r7, #20]
 800bac8:	631a      	str	r2, [r3, #48]	; 0x30
 800baca:	e005      	b.n	800bad8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bacc:	6978      	ldr	r0, [r7, #20]
 800bace:	f000 ffaf 	bl	800ca30 <vPortFree>
 800bad2:	e001      	b.n	800bad8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bad4:	2300      	movs	r3, #0
 800bad6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bad8:	69fb      	ldr	r3, [r7, #28]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d017      	beq.n	800bb0e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bade:	69fb      	ldr	r3, [r7, #28]
 800bae0:	2200      	movs	r2, #0
 800bae2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bae6:	88fa      	ldrh	r2, [r7, #6]
 800bae8:	2300      	movs	r3, #0
 800baea:	9303      	str	r3, [sp, #12]
 800baec:	69fb      	ldr	r3, [r7, #28]
 800baee:	9302      	str	r3, [sp, #8]
 800baf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baf2:	9301      	str	r3, [sp, #4]
 800baf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baf6:	9300      	str	r3, [sp, #0]
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	68b9      	ldr	r1, [r7, #8]
 800bafc:	68f8      	ldr	r0, [r7, #12]
 800bafe:	f000 f80f 	bl	800bb20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bb02:	69f8      	ldr	r0, [r7, #28]
 800bb04:	f000 f8aa 	bl	800bc5c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bb08:	2301      	movs	r3, #1
 800bb0a:	61bb      	str	r3, [r7, #24]
 800bb0c:	e002      	b.n	800bb14 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bb0e:	f04f 33ff 	mov.w	r3, #4294967295
 800bb12:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bb14:	69bb      	ldr	r3, [r7, #24]
	}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3720      	adds	r7, #32
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}
	...

0800bb20 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b088      	sub	sp, #32
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	60f8      	str	r0, [r7, #12]
 800bb28:	60b9      	str	r1, [r7, #8]
 800bb2a:	607a      	str	r2, [r7, #4]
 800bb2c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bb2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bb38:	3b01      	subs	r3, #1
 800bb3a:	009b      	lsls	r3, r3, #2
 800bb3c:	4413      	add	r3, r2
 800bb3e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bb40:	69bb      	ldr	r3, [r7, #24]
 800bb42:	f023 0307 	bic.w	r3, r3, #7
 800bb46:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bb48:	69bb      	ldr	r3, [r7, #24]
 800bb4a:	f003 0307 	and.w	r3, r3, #7
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d00a      	beq.n	800bb68 <prvInitialiseNewTask+0x48>
	__asm volatile
 800bb52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb56:	f383 8811 	msr	BASEPRI, r3
 800bb5a:	f3bf 8f6f 	isb	sy
 800bb5e:	f3bf 8f4f 	dsb	sy
 800bb62:	617b      	str	r3, [r7, #20]
}
 800bb64:	bf00      	nop
 800bb66:	e7fe      	b.n	800bb66 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d01f      	beq.n	800bbae <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bb6e:	2300      	movs	r3, #0
 800bb70:	61fb      	str	r3, [r7, #28]
 800bb72:	e012      	b.n	800bb9a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bb74:	68ba      	ldr	r2, [r7, #8]
 800bb76:	69fb      	ldr	r3, [r7, #28]
 800bb78:	4413      	add	r3, r2
 800bb7a:	7819      	ldrb	r1, [r3, #0]
 800bb7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb7e:	69fb      	ldr	r3, [r7, #28]
 800bb80:	4413      	add	r3, r2
 800bb82:	3334      	adds	r3, #52	; 0x34
 800bb84:	460a      	mov	r2, r1
 800bb86:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bb88:	68ba      	ldr	r2, [r7, #8]
 800bb8a:	69fb      	ldr	r3, [r7, #28]
 800bb8c:	4413      	add	r3, r2
 800bb8e:	781b      	ldrb	r3, [r3, #0]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d006      	beq.n	800bba2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bb94:	69fb      	ldr	r3, [r7, #28]
 800bb96:	3301      	adds	r3, #1
 800bb98:	61fb      	str	r3, [r7, #28]
 800bb9a:	69fb      	ldr	r3, [r7, #28]
 800bb9c:	2b0f      	cmp	r3, #15
 800bb9e:	d9e9      	bls.n	800bb74 <prvInitialiseNewTask+0x54>
 800bba0:	e000      	b.n	800bba4 <prvInitialiseNewTask+0x84>
			{
				break;
 800bba2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba6:	2200      	movs	r2, #0
 800bba8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bbac:	e003      	b.n	800bbb6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bbae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bbb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbb8:	2b06      	cmp	r3, #6
 800bbba:	d901      	bls.n	800bbc0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bbbc:	2306      	movs	r3, #6
 800bbbe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bbc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bbc4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bbc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bbca:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800bbcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbce:	2200      	movs	r2, #0
 800bbd0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bbd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbd4:	3304      	adds	r3, #4
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f7ff fe6b 	bl	800b8b2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bbdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbde:	3318      	adds	r3, #24
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f7ff fe66 	bl	800b8b2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bbe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbee:	f1c3 0207 	rsb	r2, r3, #7
 800bbf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbf4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bbf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbfa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bbfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbfe:	2200      	movs	r2, #0
 800bc00:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bc04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc06:	2200      	movs	r2, #0
 800bc08:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bc0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc0e:	334c      	adds	r3, #76	; 0x4c
 800bc10:	2260      	movs	r2, #96	; 0x60
 800bc12:	2100      	movs	r1, #0
 800bc14:	4618      	mov	r0, r3
 800bc16:	f002 fec3 	bl	800e9a0 <memset>
 800bc1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc1c:	4a0c      	ldr	r2, [pc, #48]	; (800bc50 <prvInitialiseNewTask+0x130>)
 800bc1e:	651a      	str	r2, [r3, #80]	; 0x50
 800bc20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc22:	4a0c      	ldr	r2, [pc, #48]	; (800bc54 <prvInitialiseNewTask+0x134>)
 800bc24:	655a      	str	r2, [r3, #84]	; 0x54
 800bc26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc28:	4a0b      	ldr	r2, [pc, #44]	; (800bc58 <prvInitialiseNewTask+0x138>)
 800bc2a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bc2c:	683a      	ldr	r2, [r7, #0]
 800bc2e:	68f9      	ldr	r1, [r7, #12]
 800bc30:	69b8      	ldr	r0, [r7, #24]
 800bc32:	f000 fc1f 	bl	800c474 <pxPortInitialiseStack>
 800bc36:	4602      	mov	r2, r0
 800bc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc3a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bc3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d002      	beq.n	800bc48 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bc42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc46:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bc48:	bf00      	nop
 800bc4a:	3720      	adds	r7, #32
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}
 800bc50:	0800fa70 	.word	0x0800fa70
 800bc54:	0800fa90 	.word	0x0800fa90
 800bc58:	0800fa50 	.word	0x0800fa50

0800bc5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b082      	sub	sp, #8
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bc64:	f000 fd36 	bl	800c6d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bc68:	4b2a      	ldr	r3, [pc, #168]	; (800bd14 <prvAddNewTaskToReadyList+0xb8>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	3301      	adds	r3, #1
 800bc6e:	4a29      	ldr	r2, [pc, #164]	; (800bd14 <prvAddNewTaskToReadyList+0xb8>)
 800bc70:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bc72:	4b29      	ldr	r3, [pc, #164]	; (800bd18 <prvAddNewTaskToReadyList+0xbc>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d109      	bne.n	800bc8e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bc7a:	4a27      	ldr	r2, [pc, #156]	; (800bd18 <prvAddNewTaskToReadyList+0xbc>)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bc80:	4b24      	ldr	r3, [pc, #144]	; (800bd14 <prvAddNewTaskToReadyList+0xb8>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	2b01      	cmp	r3, #1
 800bc86:	d110      	bne.n	800bcaa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bc88:	f000 facc 	bl	800c224 <prvInitialiseTaskLists>
 800bc8c:	e00d      	b.n	800bcaa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bc8e:	4b23      	ldr	r3, [pc, #140]	; (800bd1c <prvAddNewTaskToReadyList+0xc0>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d109      	bne.n	800bcaa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bc96:	4b20      	ldr	r3, [pc, #128]	; (800bd18 <prvAddNewTaskToReadyList+0xbc>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bca0:	429a      	cmp	r2, r3
 800bca2:	d802      	bhi.n	800bcaa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bca4:	4a1c      	ldr	r2, [pc, #112]	; (800bd18 <prvAddNewTaskToReadyList+0xbc>)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bcaa:	4b1d      	ldr	r3, [pc, #116]	; (800bd20 <prvAddNewTaskToReadyList+0xc4>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	3301      	adds	r3, #1
 800bcb0:	4a1b      	ldr	r2, [pc, #108]	; (800bd20 <prvAddNewTaskToReadyList+0xc4>)
 800bcb2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcb8:	2201      	movs	r2, #1
 800bcba:	409a      	lsls	r2, r3
 800bcbc:	4b19      	ldr	r3, [pc, #100]	; (800bd24 <prvAddNewTaskToReadyList+0xc8>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	4313      	orrs	r3, r2
 800bcc2:	4a18      	ldr	r2, [pc, #96]	; (800bd24 <prvAddNewTaskToReadyList+0xc8>)
 800bcc4:	6013      	str	r3, [r2, #0]
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcca:	4613      	mov	r3, r2
 800bccc:	009b      	lsls	r3, r3, #2
 800bcce:	4413      	add	r3, r2
 800bcd0:	009b      	lsls	r3, r3, #2
 800bcd2:	4a15      	ldr	r2, [pc, #84]	; (800bd28 <prvAddNewTaskToReadyList+0xcc>)
 800bcd4:	441a      	add	r2, r3
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	3304      	adds	r3, #4
 800bcda:	4619      	mov	r1, r3
 800bcdc:	4610      	mov	r0, r2
 800bcde:	f7ff fdf5 	bl	800b8cc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bce2:	f000 fd27 	bl	800c734 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bce6:	4b0d      	ldr	r3, [pc, #52]	; (800bd1c <prvAddNewTaskToReadyList+0xc0>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d00e      	beq.n	800bd0c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bcee:	4b0a      	ldr	r3, [pc, #40]	; (800bd18 <prvAddNewTaskToReadyList+0xbc>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	d207      	bcs.n	800bd0c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bcfc:	4b0b      	ldr	r3, [pc, #44]	; (800bd2c <prvAddNewTaskToReadyList+0xd0>)
 800bcfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd02:	601a      	str	r2, [r3, #0]
 800bd04:	f3bf 8f4f 	dsb	sy
 800bd08:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bd0c:	bf00      	nop
 800bd0e:	3708      	adds	r7, #8
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}
 800bd14:	20003050 	.word	0x20003050
 800bd18:	20002f50 	.word	0x20002f50
 800bd1c:	2000305c 	.word	0x2000305c
 800bd20:	2000306c 	.word	0x2000306c
 800bd24:	20003058 	.word	0x20003058
 800bd28:	20002f54 	.word	0x20002f54
 800bd2c:	e000ed04 	.word	0xe000ed04

0800bd30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b084      	sub	sp, #16
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d017      	beq.n	800bd72 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bd42:	4b13      	ldr	r3, [pc, #76]	; (800bd90 <vTaskDelay+0x60>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d00a      	beq.n	800bd60 <vTaskDelay+0x30>
	__asm volatile
 800bd4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd4e:	f383 8811 	msr	BASEPRI, r3
 800bd52:	f3bf 8f6f 	isb	sy
 800bd56:	f3bf 8f4f 	dsb	sy
 800bd5a:	60bb      	str	r3, [r7, #8]
}
 800bd5c:	bf00      	nop
 800bd5e:	e7fe      	b.n	800bd5e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bd60:	f000 f884 	bl	800be6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bd64:	2100      	movs	r1, #0
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	f000 fb1e 	bl	800c3a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bd6c:	f000 f88c 	bl	800be88 <xTaskResumeAll>
 800bd70:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d107      	bne.n	800bd88 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800bd78:	4b06      	ldr	r3, [pc, #24]	; (800bd94 <vTaskDelay+0x64>)
 800bd7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd7e:	601a      	str	r2, [r3, #0]
 800bd80:	f3bf 8f4f 	dsb	sy
 800bd84:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bd88:	bf00      	nop
 800bd8a:	3710      	adds	r7, #16
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}
 800bd90:	20003078 	.word	0x20003078
 800bd94:	e000ed04 	.word	0xe000ed04

0800bd98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b08a      	sub	sp, #40	; 0x28
 800bd9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bda2:	2300      	movs	r3, #0
 800bda4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bda6:	463a      	mov	r2, r7
 800bda8:	1d39      	adds	r1, r7, #4
 800bdaa:	f107 0308 	add.w	r3, r7, #8
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f7f5 fad2 	bl	8001358 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bdb4:	6839      	ldr	r1, [r7, #0]
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	68ba      	ldr	r2, [r7, #8]
 800bdba:	9202      	str	r2, [sp, #8]
 800bdbc:	9301      	str	r3, [sp, #4]
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	9300      	str	r3, [sp, #0]
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	460a      	mov	r2, r1
 800bdc6:	4921      	ldr	r1, [pc, #132]	; (800be4c <vTaskStartScheduler+0xb4>)
 800bdc8:	4821      	ldr	r0, [pc, #132]	; (800be50 <vTaskStartScheduler+0xb8>)
 800bdca:	f7ff fe06 	bl	800b9da <xTaskCreateStatic>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	4a20      	ldr	r2, [pc, #128]	; (800be54 <vTaskStartScheduler+0xbc>)
 800bdd2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bdd4:	4b1f      	ldr	r3, [pc, #124]	; (800be54 <vTaskStartScheduler+0xbc>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d002      	beq.n	800bde2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bddc:	2301      	movs	r3, #1
 800bdde:	617b      	str	r3, [r7, #20]
 800bde0:	e001      	b.n	800bde6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bde2:	2300      	movs	r3, #0
 800bde4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bde6:	697b      	ldr	r3, [r7, #20]
 800bde8:	2b01      	cmp	r3, #1
 800bdea:	d11b      	bne.n	800be24 <vTaskStartScheduler+0x8c>
	__asm volatile
 800bdec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdf0:	f383 8811 	msr	BASEPRI, r3
 800bdf4:	f3bf 8f6f 	isb	sy
 800bdf8:	f3bf 8f4f 	dsb	sy
 800bdfc:	613b      	str	r3, [r7, #16]
}
 800bdfe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800be00:	4b15      	ldr	r3, [pc, #84]	; (800be58 <vTaskStartScheduler+0xc0>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	334c      	adds	r3, #76	; 0x4c
 800be06:	4a15      	ldr	r2, [pc, #84]	; (800be5c <vTaskStartScheduler+0xc4>)
 800be08:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800be0a:	4b15      	ldr	r3, [pc, #84]	; (800be60 <vTaskStartScheduler+0xc8>)
 800be0c:	f04f 32ff 	mov.w	r2, #4294967295
 800be10:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800be12:	4b14      	ldr	r3, [pc, #80]	; (800be64 <vTaskStartScheduler+0xcc>)
 800be14:	2201      	movs	r2, #1
 800be16:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800be18:	4b13      	ldr	r3, [pc, #76]	; (800be68 <vTaskStartScheduler+0xd0>)
 800be1a:	2200      	movs	r2, #0
 800be1c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800be1e:	f000 fbb7 	bl	800c590 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800be22:	e00e      	b.n	800be42 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800be24:	697b      	ldr	r3, [r7, #20]
 800be26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be2a:	d10a      	bne.n	800be42 <vTaskStartScheduler+0xaa>
	__asm volatile
 800be2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be30:	f383 8811 	msr	BASEPRI, r3
 800be34:	f3bf 8f6f 	isb	sy
 800be38:	f3bf 8f4f 	dsb	sy
 800be3c:	60fb      	str	r3, [r7, #12]
}
 800be3e:	bf00      	nop
 800be40:	e7fe      	b.n	800be40 <vTaskStartScheduler+0xa8>
}
 800be42:	bf00      	nop
 800be44:	3718      	adds	r7, #24
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}
 800be4a:	bf00      	nop
 800be4c:	0800f274 	.word	0x0800f274
 800be50:	0800c1f5 	.word	0x0800c1f5
 800be54:	20003074 	.word	0x20003074
 800be58:	20002f50 	.word	0x20002f50
 800be5c:	20000040 	.word	0x20000040
 800be60:	20003070 	.word	0x20003070
 800be64:	2000305c 	.word	0x2000305c
 800be68:	20003054 	.word	0x20003054

0800be6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800be6c:	b480      	push	{r7}
 800be6e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800be70:	4b04      	ldr	r3, [pc, #16]	; (800be84 <vTaskSuspendAll+0x18>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	3301      	adds	r3, #1
 800be76:	4a03      	ldr	r2, [pc, #12]	; (800be84 <vTaskSuspendAll+0x18>)
 800be78:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800be7a:	bf00      	nop
 800be7c:	46bd      	mov	sp, r7
 800be7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be82:	4770      	bx	lr
 800be84:	20003078 	.word	0x20003078

0800be88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b084      	sub	sp, #16
 800be8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800be8e:	2300      	movs	r3, #0
 800be90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800be92:	2300      	movs	r3, #0
 800be94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800be96:	4b41      	ldr	r3, [pc, #260]	; (800bf9c <xTaskResumeAll+0x114>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d10a      	bne.n	800beb4 <xTaskResumeAll+0x2c>
	__asm volatile
 800be9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea2:	f383 8811 	msr	BASEPRI, r3
 800bea6:	f3bf 8f6f 	isb	sy
 800beaa:	f3bf 8f4f 	dsb	sy
 800beae:	603b      	str	r3, [r7, #0]
}
 800beb0:	bf00      	nop
 800beb2:	e7fe      	b.n	800beb2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800beb4:	f000 fc0e 	bl	800c6d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800beb8:	4b38      	ldr	r3, [pc, #224]	; (800bf9c <xTaskResumeAll+0x114>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	3b01      	subs	r3, #1
 800bebe:	4a37      	ldr	r2, [pc, #220]	; (800bf9c <xTaskResumeAll+0x114>)
 800bec0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bec2:	4b36      	ldr	r3, [pc, #216]	; (800bf9c <xTaskResumeAll+0x114>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d161      	bne.n	800bf8e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800beca:	4b35      	ldr	r3, [pc, #212]	; (800bfa0 <xTaskResumeAll+0x118>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d05d      	beq.n	800bf8e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bed2:	e02e      	b.n	800bf32 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bed4:	4b33      	ldr	r3, [pc, #204]	; (800bfa4 <xTaskResumeAll+0x11c>)
 800bed6:	68db      	ldr	r3, [r3, #12]
 800bed8:	68db      	ldr	r3, [r3, #12]
 800beda:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	3318      	adds	r3, #24
 800bee0:	4618      	mov	r0, r3
 800bee2:	f7ff fd50 	bl	800b986 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	3304      	adds	r3, #4
 800beea:	4618      	mov	r0, r3
 800beec:	f7ff fd4b 	bl	800b986 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bef4:	2201      	movs	r2, #1
 800bef6:	409a      	lsls	r2, r3
 800bef8:	4b2b      	ldr	r3, [pc, #172]	; (800bfa8 <xTaskResumeAll+0x120>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	4313      	orrs	r3, r2
 800befe:	4a2a      	ldr	r2, [pc, #168]	; (800bfa8 <xTaskResumeAll+0x120>)
 800bf00:	6013      	str	r3, [r2, #0]
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf06:	4613      	mov	r3, r2
 800bf08:	009b      	lsls	r3, r3, #2
 800bf0a:	4413      	add	r3, r2
 800bf0c:	009b      	lsls	r3, r3, #2
 800bf0e:	4a27      	ldr	r2, [pc, #156]	; (800bfac <xTaskResumeAll+0x124>)
 800bf10:	441a      	add	r2, r3
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	3304      	adds	r3, #4
 800bf16:	4619      	mov	r1, r3
 800bf18:	4610      	mov	r0, r2
 800bf1a:	f7ff fcd7 	bl	800b8cc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf22:	4b23      	ldr	r3, [pc, #140]	; (800bfb0 <xTaskResumeAll+0x128>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf28:	429a      	cmp	r2, r3
 800bf2a:	d302      	bcc.n	800bf32 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800bf2c:	4b21      	ldr	r3, [pc, #132]	; (800bfb4 <xTaskResumeAll+0x12c>)
 800bf2e:	2201      	movs	r2, #1
 800bf30:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bf32:	4b1c      	ldr	r3, [pc, #112]	; (800bfa4 <xTaskResumeAll+0x11c>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d1cc      	bne.n	800bed4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d001      	beq.n	800bf44 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bf40:	f000 fa12 	bl	800c368 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bf44:	4b1c      	ldr	r3, [pc, #112]	; (800bfb8 <xTaskResumeAll+0x130>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d010      	beq.n	800bf72 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bf50:	f000 f836 	bl	800bfc0 <xTaskIncrementTick>
 800bf54:	4603      	mov	r3, r0
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d002      	beq.n	800bf60 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800bf5a:	4b16      	ldr	r3, [pc, #88]	; (800bfb4 <xTaskResumeAll+0x12c>)
 800bf5c:	2201      	movs	r2, #1
 800bf5e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	3b01      	subs	r3, #1
 800bf64:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d1f1      	bne.n	800bf50 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800bf6c:	4b12      	ldr	r3, [pc, #72]	; (800bfb8 <xTaskResumeAll+0x130>)
 800bf6e:	2200      	movs	r2, #0
 800bf70:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bf72:	4b10      	ldr	r3, [pc, #64]	; (800bfb4 <xTaskResumeAll+0x12c>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d009      	beq.n	800bf8e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bf7e:	4b0f      	ldr	r3, [pc, #60]	; (800bfbc <xTaskResumeAll+0x134>)
 800bf80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf84:	601a      	str	r2, [r3, #0]
 800bf86:	f3bf 8f4f 	dsb	sy
 800bf8a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bf8e:	f000 fbd1 	bl	800c734 <vPortExitCritical>

	return xAlreadyYielded;
 800bf92:	68bb      	ldr	r3, [r7, #8]
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	3710      	adds	r7, #16
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bd80      	pop	{r7, pc}
 800bf9c:	20003078 	.word	0x20003078
 800bfa0:	20003050 	.word	0x20003050
 800bfa4:	20003010 	.word	0x20003010
 800bfa8:	20003058 	.word	0x20003058
 800bfac:	20002f54 	.word	0x20002f54
 800bfb0:	20002f50 	.word	0x20002f50
 800bfb4:	20003064 	.word	0x20003064
 800bfb8:	20003060 	.word	0x20003060
 800bfbc:	e000ed04 	.word	0xe000ed04

0800bfc0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b086      	sub	sp, #24
 800bfc4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bfca:	4b4e      	ldr	r3, [pc, #312]	; (800c104 <xTaskIncrementTick+0x144>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	f040 808e 	bne.w	800c0f0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bfd4:	4b4c      	ldr	r3, [pc, #304]	; (800c108 <xTaskIncrementTick+0x148>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	3301      	adds	r3, #1
 800bfda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bfdc:	4a4a      	ldr	r2, [pc, #296]	; (800c108 <xTaskIncrementTick+0x148>)
 800bfde:	693b      	ldr	r3, [r7, #16]
 800bfe0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bfe2:	693b      	ldr	r3, [r7, #16]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d120      	bne.n	800c02a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bfe8:	4b48      	ldr	r3, [pc, #288]	; (800c10c <xTaskIncrementTick+0x14c>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d00a      	beq.n	800c008 <xTaskIncrementTick+0x48>
	__asm volatile
 800bff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff6:	f383 8811 	msr	BASEPRI, r3
 800bffa:	f3bf 8f6f 	isb	sy
 800bffe:	f3bf 8f4f 	dsb	sy
 800c002:	603b      	str	r3, [r7, #0]
}
 800c004:	bf00      	nop
 800c006:	e7fe      	b.n	800c006 <xTaskIncrementTick+0x46>
 800c008:	4b40      	ldr	r3, [pc, #256]	; (800c10c <xTaskIncrementTick+0x14c>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	60fb      	str	r3, [r7, #12]
 800c00e:	4b40      	ldr	r3, [pc, #256]	; (800c110 <xTaskIncrementTick+0x150>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	4a3e      	ldr	r2, [pc, #248]	; (800c10c <xTaskIncrementTick+0x14c>)
 800c014:	6013      	str	r3, [r2, #0]
 800c016:	4a3e      	ldr	r2, [pc, #248]	; (800c110 <xTaskIncrementTick+0x150>)
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	6013      	str	r3, [r2, #0]
 800c01c:	4b3d      	ldr	r3, [pc, #244]	; (800c114 <xTaskIncrementTick+0x154>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	3301      	adds	r3, #1
 800c022:	4a3c      	ldr	r2, [pc, #240]	; (800c114 <xTaskIncrementTick+0x154>)
 800c024:	6013      	str	r3, [r2, #0]
 800c026:	f000 f99f 	bl	800c368 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c02a:	4b3b      	ldr	r3, [pc, #236]	; (800c118 <xTaskIncrementTick+0x158>)
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	693a      	ldr	r2, [r7, #16]
 800c030:	429a      	cmp	r2, r3
 800c032:	d348      	bcc.n	800c0c6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c034:	4b35      	ldr	r3, [pc, #212]	; (800c10c <xTaskIncrementTick+0x14c>)
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d104      	bne.n	800c048 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c03e:	4b36      	ldr	r3, [pc, #216]	; (800c118 <xTaskIncrementTick+0x158>)
 800c040:	f04f 32ff 	mov.w	r2, #4294967295
 800c044:	601a      	str	r2, [r3, #0]
					break;
 800c046:	e03e      	b.n	800c0c6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c048:	4b30      	ldr	r3, [pc, #192]	; (800c10c <xTaskIncrementTick+0x14c>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	68db      	ldr	r3, [r3, #12]
 800c04e:	68db      	ldr	r3, [r3, #12]
 800c050:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	685b      	ldr	r3, [r3, #4]
 800c056:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c058:	693a      	ldr	r2, [r7, #16]
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	429a      	cmp	r2, r3
 800c05e:	d203      	bcs.n	800c068 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c060:	4a2d      	ldr	r2, [pc, #180]	; (800c118 <xTaskIncrementTick+0x158>)
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c066:	e02e      	b.n	800c0c6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	3304      	adds	r3, #4
 800c06c:	4618      	mov	r0, r3
 800c06e:	f7ff fc8a 	bl	800b986 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c076:	2b00      	cmp	r3, #0
 800c078:	d004      	beq.n	800c084 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	3318      	adds	r3, #24
 800c07e:	4618      	mov	r0, r3
 800c080:	f7ff fc81 	bl	800b986 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c088:	2201      	movs	r2, #1
 800c08a:	409a      	lsls	r2, r3
 800c08c:	4b23      	ldr	r3, [pc, #140]	; (800c11c <xTaskIncrementTick+0x15c>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	4313      	orrs	r3, r2
 800c092:	4a22      	ldr	r2, [pc, #136]	; (800c11c <xTaskIncrementTick+0x15c>)
 800c094:	6013      	str	r3, [r2, #0]
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c09a:	4613      	mov	r3, r2
 800c09c:	009b      	lsls	r3, r3, #2
 800c09e:	4413      	add	r3, r2
 800c0a0:	009b      	lsls	r3, r3, #2
 800c0a2:	4a1f      	ldr	r2, [pc, #124]	; (800c120 <xTaskIncrementTick+0x160>)
 800c0a4:	441a      	add	r2, r3
 800c0a6:	68bb      	ldr	r3, [r7, #8]
 800c0a8:	3304      	adds	r3, #4
 800c0aa:	4619      	mov	r1, r3
 800c0ac:	4610      	mov	r0, r2
 800c0ae:	f7ff fc0d 	bl	800b8cc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c0b2:	68bb      	ldr	r3, [r7, #8]
 800c0b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0b6:	4b1b      	ldr	r3, [pc, #108]	; (800c124 <xTaskIncrementTick+0x164>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	d3b9      	bcc.n	800c034 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c0c4:	e7b6      	b.n	800c034 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c0c6:	4b17      	ldr	r3, [pc, #92]	; (800c124 <xTaskIncrementTick+0x164>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0cc:	4914      	ldr	r1, [pc, #80]	; (800c120 <xTaskIncrementTick+0x160>)
 800c0ce:	4613      	mov	r3, r2
 800c0d0:	009b      	lsls	r3, r3, #2
 800c0d2:	4413      	add	r3, r2
 800c0d4:	009b      	lsls	r3, r3, #2
 800c0d6:	440b      	add	r3, r1
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	2b01      	cmp	r3, #1
 800c0dc:	d901      	bls.n	800c0e2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800c0de:	2301      	movs	r3, #1
 800c0e0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c0e2:	4b11      	ldr	r3, [pc, #68]	; (800c128 <xTaskIncrementTick+0x168>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d007      	beq.n	800c0fa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	617b      	str	r3, [r7, #20]
 800c0ee:	e004      	b.n	800c0fa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c0f0:	4b0e      	ldr	r3, [pc, #56]	; (800c12c <xTaskIncrementTick+0x16c>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	3301      	adds	r3, #1
 800c0f6:	4a0d      	ldr	r2, [pc, #52]	; (800c12c <xTaskIncrementTick+0x16c>)
 800c0f8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c0fa:	697b      	ldr	r3, [r7, #20]
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3718      	adds	r7, #24
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}
 800c104:	20003078 	.word	0x20003078
 800c108:	20003054 	.word	0x20003054
 800c10c:	20003008 	.word	0x20003008
 800c110:	2000300c 	.word	0x2000300c
 800c114:	20003068 	.word	0x20003068
 800c118:	20003070 	.word	0x20003070
 800c11c:	20003058 	.word	0x20003058
 800c120:	20002f54 	.word	0x20002f54
 800c124:	20002f50 	.word	0x20002f50
 800c128:	20003064 	.word	0x20003064
 800c12c:	20003060 	.word	0x20003060

0800c130 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c130:	b480      	push	{r7}
 800c132:	b087      	sub	sp, #28
 800c134:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c136:	4b29      	ldr	r3, [pc, #164]	; (800c1dc <vTaskSwitchContext+0xac>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d003      	beq.n	800c146 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c13e:	4b28      	ldr	r3, [pc, #160]	; (800c1e0 <vTaskSwitchContext+0xb0>)
 800c140:	2201      	movs	r2, #1
 800c142:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c144:	e044      	b.n	800c1d0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800c146:	4b26      	ldr	r3, [pc, #152]	; (800c1e0 <vTaskSwitchContext+0xb0>)
 800c148:	2200      	movs	r2, #0
 800c14a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c14c:	4b25      	ldr	r3, [pc, #148]	; (800c1e4 <vTaskSwitchContext+0xb4>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	fab3 f383 	clz	r3, r3
 800c158:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c15a:	7afb      	ldrb	r3, [r7, #11]
 800c15c:	f1c3 031f 	rsb	r3, r3, #31
 800c160:	617b      	str	r3, [r7, #20]
 800c162:	4921      	ldr	r1, [pc, #132]	; (800c1e8 <vTaskSwitchContext+0xb8>)
 800c164:	697a      	ldr	r2, [r7, #20]
 800c166:	4613      	mov	r3, r2
 800c168:	009b      	lsls	r3, r3, #2
 800c16a:	4413      	add	r3, r2
 800c16c:	009b      	lsls	r3, r3, #2
 800c16e:	440b      	add	r3, r1
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d10a      	bne.n	800c18c <vTaskSwitchContext+0x5c>
	__asm volatile
 800c176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c17a:	f383 8811 	msr	BASEPRI, r3
 800c17e:	f3bf 8f6f 	isb	sy
 800c182:	f3bf 8f4f 	dsb	sy
 800c186:	607b      	str	r3, [r7, #4]
}
 800c188:	bf00      	nop
 800c18a:	e7fe      	b.n	800c18a <vTaskSwitchContext+0x5a>
 800c18c:	697a      	ldr	r2, [r7, #20]
 800c18e:	4613      	mov	r3, r2
 800c190:	009b      	lsls	r3, r3, #2
 800c192:	4413      	add	r3, r2
 800c194:	009b      	lsls	r3, r3, #2
 800c196:	4a14      	ldr	r2, [pc, #80]	; (800c1e8 <vTaskSwitchContext+0xb8>)
 800c198:	4413      	add	r3, r2
 800c19a:	613b      	str	r3, [r7, #16]
 800c19c:	693b      	ldr	r3, [r7, #16]
 800c19e:	685b      	ldr	r3, [r3, #4]
 800c1a0:	685a      	ldr	r2, [r3, #4]
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	605a      	str	r2, [r3, #4]
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	685a      	ldr	r2, [r3, #4]
 800c1aa:	693b      	ldr	r3, [r7, #16]
 800c1ac:	3308      	adds	r3, #8
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	d104      	bne.n	800c1bc <vTaskSwitchContext+0x8c>
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	685b      	ldr	r3, [r3, #4]
 800c1b6:	685a      	ldr	r2, [r3, #4]
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	605a      	str	r2, [r3, #4]
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	685b      	ldr	r3, [r3, #4]
 800c1c0:	68db      	ldr	r3, [r3, #12]
 800c1c2:	4a0a      	ldr	r2, [pc, #40]	; (800c1ec <vTaskSwitchContext+0xbc>)
 800c1c4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c1c6:	4b09      	ldr	r3, [pc, #36]	; (800c1ec <vTaskSwitchContext+0xbc>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	334c      	adds	r3, #76	; 0x4c
 800c1cc:	4a08      	ldr	r2, [pc, #32]	; (800c1f0 <vTaskSwitchContext+0xc0>)
 800c1ce:	6013      	str	r3, [r2, #0]
}
 800c1d0:	bf00      	nop
 800c1d2:	371c      	adds	r7, #28
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1da:	4770      	bx	lr
 800c1dc:	20003078 	.word	0x20003078
 800c1e0:	20003064 	.word	0x20003064
 800c1e4:	20003058 	.word	0x20003058
 800c1e8:	20002f54 	.word	0x20002f54
 800c1ec:	20002f50 	.word	0x20002f50
 800c1f0:	20000040 	.word	0x20000040

0800c1f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b082      	sub	sp, #8
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c1fc:	f000 f852 	bl	800c2a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c200:	4b06      	ldr	r3, [pc, #24]	; (800c21c <prvIdleTask+0x28>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	2b01      	cmp	r3, #1
 800c206:	d9f9      	bls.n	800c1fc <prvIdleTask+0x8>
			{
				taskYIELD();
 800c208:	4b05      	ldr	r3, [pc, #20]	; (800c220 <prvIdleTask+0x2c>)
 800c20a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c20e:	601a      	str	r2, [r3, #0]
 800c210:	f3bf 8f4f 	dsb	sy
 800c214:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c218:	e7f0      	b.n	800c1fc <prvIdleTask+0x8>
 800c21a:	bf00      	nop
 800c21c:	20002f54 	.word	0x20002f54
 800c220:	e000ed04 	.word	0xe000ed04

0800c224 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b082      	sub	sp, #8
 800c228:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c22a:	2300      	movs	r3, #0
 800c22c:	607b      	str	r3, [r7, #4]
 800c22e:	e00c      	b.n	800c24a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c230:	687a      	ldr	r2, [r7, #4]
 800c232:	4613      	mov	r3, r2
 800c234:	009b      	lsls	r3, r3, #2
 800c236:	4413      	add	r3, r2
 800c238:	009b      	lsls	r3, r3, #2
 800c23a:	4a12      	ldr	r2, [pc, #72]	; (800c284 <prvInitialiseTaskLists+0x60>)
 800c23c:	4413      	add	r3, r2
 800c23e:	4618      	mov	r0, r3
 800c240:	f7ff fb17 	bl	800b872 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	3301      	adds	r3, #1
 800c248:	607b      	str	r3, [r7, #4]
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2b06      	cmp	r3, #6
 800c24e:	d9ef      	bls.n	800c230 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c250:	480d      	ldr	r0, [pc, #52]	; (800c288 <prvInitialiseTaskLists+0x64>)
 800c252:	f7ff fb0e 	bl	800b872 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c256:	480d      	ldr	r0, [pc, #52]	; (800c28c <prvInitialiseTaskLists+0x68>)
 800c258:	f7ff fb0b 	bl	800b872 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c25c:	480c      	ldr	r0, [pc, #48]	; (800c290 <prvInitialiseTaskLists+0x6c>)
 800c25e:	f7ff fb08 	bl	800b872 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c262:	480c      	ldr	r0, [pc, #48]	; (800c294 <prvInitialiseTaskLists+0x70>)
 800c264:	f7ff fb05 	bl	800b872 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c268:	480b      	ldr	r0, [pc, #44]	; (800c298 <prvInitialiseTaskLists+0x74>)
 800c26a:	f7ff fb02 	bl	800b872 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c26e:	4b0b      	ldr	r3, [pc, #44]	; (800c29c <prvInitialiseTaskLists+0x78>)
 800c270:	4a05      	ldr	r2, [pc, #20]	; (800c288 <prvInitialiseTaskLists+0x64>)
 800c272:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c274:	4b0a      	ldr	r3, [pc, #40]	; (800c2a0 <prvInitialiseTaskLists+0x7c>)
 800c276:	4a05      	ldr	r2, [pc, #20]	; (800c28c <prvInitialiseTaskLists+0x68>)
 800c278:	601a      	str	r2, [r3, #0]
}
 800c27a:	bf00      	nop
 800c27c:	3708      	adds	r7, #8
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}
 800c282:	bf00      	nop
 800c284:	20002f54 	.word	0x20002f54
 800c288:	20002fe0 	.word	0x20002fe0
 800c28c:	20002ff4 	.word	0x20002ff4
 800c290:	20003010 	.word	0x20003010
 800c294:	20003024 	.word	0x20003024
 800c298:	2000303c 	.word	0x2000303c
 800c29c:	20003008 	.word	0x20003008
 800c2a0:	2000300c 	.word	0x2000300c

0800c2a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b082      	sub	sp, #8
 800c2a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c2aa:	e019      	b.n	800c2e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c2ac:	f000 fa12 	bl	800c6d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2b0:	4b10      	ldr	r3, [pc, #64]	; (800c2f4 <prvCheckTasksWaitingTermination+0x50>)
 800c2b2:	68db      	ldr	r3, [r3, #12]
 800c2b4:	68db      	ldr	r3, [r3, #12]
 800c2b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	3304      	adds	r3, #4
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f7ff fb62 	bl	800b986 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c2c2:	4b0d      	ldr	r3, [pc, #52]	; (800c2f8 <prvCheckTasksWaitingTermination+0x54>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	3b01      	subs	r3, #1
 800c2c8:	4a0b      	ldr	r2, [pc, #44]	; (800c2f8 <prvCheckTasksWaitingTermination+0x54>)
 800c2ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c2cc:	4b0b      	ldr	r3, [pc, #44]	; (800c2fc <prvCheckTasksWaitingTermination+0x58>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	3b01      	subs	r3, #1
 800c2d2:	4a0a      	ldr	r2, [pc, #40]	; (800c2fc <prvCheckTasksWaitingTermination+0x58>)
 800c2d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c2d6:	f000 fa2d 	bl	800c734 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f000 f810 	bl	800c300 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c2e0:	4b06      	ldr	r3, [pc, #24]	; (800c2fc <prvCheckTasksWaitingTermination+0x58>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d1e1      	bne.n	800c2ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c2e8:	bf00      	nop
 800c2ea:	bf00      	nop
 800c2ec:	3708      	adds	r7, #8
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}
 800c2f2:	bf00      	nop
 800c2f4:	20003024 	.word	0x20003024
 800c2f8:	20003050 	.word	0x20003050
 800c2fc:	20003038 	.word	0x20003038

0800c300 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c300:	b580      	push	{r7, lr}
 800c302:	b084      	sub	sp, #16
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	334c      	adds	r3, #76	; 0x4c
 800c30c:	4618      	mov	r0, r3
 800c30e:	f002 fbf9 	bl	800eb04 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d108      	bne.n	800c32e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c320:	4618      	mov	r0, r3
 800c322:	f000 fb85 	bl	800ca30 <vPortFree>
				vPortFree( pxTCB );
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f000 fb82 	bl	800ca30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c32c:	e018      	b.n	800c360 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c334:	2b01      	cmp	r3, #1
 800c336:	d103      	bne.n	800c340 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f000 fb79 	bl	800ca30 <vPortFree>
	}
 800c33e:	e00f      	b.n	800c360 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c346:	2b02      	cmp	r3, #2
 800c348:	d00a      	beq.n	800c360 <prvDeleteTCB+0x60>
	__asm volatile
 800c34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c34e:	f383 8811 	msr	BASEPRI, r3
 800c352:	f3bf 8f6f 	isb	sy
 800c356:	f3bf 8f4f 	dsb	sy
 800c35a:	60fb      	str	r3, [r7, #12]
}
 800c35c:	bf00      	nop
 800c35e:	e7fe      	b.n	800c35e <prvDeleteTCB+0x5e>
	}
 800c360:	bf00      	nop
 800c362:	3710      	adds	r7, #16
 800c364:	46bd      	mov	sp, r7
 800c366:	bd80      	pop	{r7, pc}

0800c368 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c368:	b480      	push	{r7}
 800c36a:	b083      	sub	sp, #12
 800c36c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c36e:	4b0c      	ldr	r3, [pc, #48]	; (800c3a0 <prvResetNextTaskUnblockTime+0x38>)
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d104      	bne.n	800c382 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c378:	4b0a      	ldr	r3, [pc, #40]	; (800c3a4 <prvResetNextTaskUnblockTime+0x3c>)
 800c37a:	f04f 32ff 	mov.w	r2, #4294967295
 800c37e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c380:	e008      	b.n	800c394 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c382:	4b07      	ldr	r3, [pc, #28]	; (800c3a0 <prvResetNextTaskUnblockTime+0x38>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	68db      	ldr	r3, [r3, #12]
 800c388:	68db      	ldr	r3, [r3, #12]
 800c38a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	685b      	ldr	r3, [r3, #4]
 800c390:	4a04      	ldr	r2, [pc, #16]	; (800c3a4 <prvResetNextTaskUnblockTime+0x3c>)
 800c392:	6013      	str	r3, [r2, #0]
}
 800c394:	bf00      	nop
 800c396:	370c      	adds	r7, #12
 800c398:	46bd      	mov	sp, r7
 800c39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39e:	4770      	bx	lr
 800c3a0:	20003008 	.word	0x20003008
 800c3a4:	20003070 	.word	0x20003070

0800c3a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b084      	sub	sp, #16
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
 800c3b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c3b2:	4b29      	ldr	r3, [pc, #164]	; (800c458 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c3b8:	4b28      	ldr	r3, [pc, #160]	; (800c45c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	3304      	adds	r3, #4
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f7ff fae1 	bl	800b986 <uxListRemove>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d10b      	bne.n	800c3e2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c3ca:	4b24      	ldr	r3, [pc, #144]	; (800c45c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3d0:	2201      	movs	r2, #1
 800c3d2:	fa02 f303 	lsl.w	r3, r2, r3
 800c3d6:	43da      	mvns	r2, r3
 800c3d8:	4b21      	ldr	r3, [pc, #132]	; (800c460 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	4013      	ands	r3, r2
 800c3de:	4a20      	ldr	r2, [pc, #128]	; (800c460 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c3e0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3e8:	d10a      	bne.n	800c400 <prvAddCurrentTaskToDelayedList+0x58>
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d007      	beq.n	800c400 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c3f0:	4b1a      	ldr	r3, [pc, #104]	; (800c45c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	3304      	adds	r3, #4
 800c3f6:	4619      	mov	r1, r3
 800c3f8:	481a      	ldr	r0, [pc, #104]	; (800c464 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c3fa:	f7ff fa67 	bl	800b8cc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c3fe:	e026      	b.n	800c44e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c400:	68fa      	ldr	r2, [r7, #12]
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	4413      	add	r3, r2
 800c406:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c408:	4b14      	ldr	r3, [pc, #80]	; (800c45c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	68ba      	ldr	r2, [r7, #8]
 800c40e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c410:	68ba      	ldr	r2, [r7, #8]
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	429a      	cmp	r2, r3
 800c416:	d209      	bcs.n	800c42c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c418:	4b13      	ldr	r3, [pc, #76]	; (800c468 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c41a:	681a      	ldr	r2, [r3, #0]
 800c41c:	4b0f      	ldr	r3, [pc, #60]	; (800c45c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	3304      	adds	r3, #4
 800c422:	4619      	mov	r1, r3
 800c424:	4610      	mov	r0, r2
 800c426:	f7ff fa75 	bl	800b914 <vListInsert>
}
 800c42a:	e010      	b.n	800c44e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c42c:	4b0f      	ldr	r3, [pc, #60]	; (800c46c <prvAddCurrentTaskToDelayedList+0xc4>)
 800c42e:	681a      	ldr	r2, [r3, #0]
 800c430:	4b0a      	ldr	r3, [pc, #40]	; (800c45c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	3304      	adds	r3, #4
 800c436:	4619      	mov	r1, r3
 800c438:	4610      	mov	r0, r2
 800c43a:	f7ff fa6b 	bl	800b914 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c43e:	4b0c      	ldr	r3, [pc, #48]	; (800c470 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	68ba      	ldr	r2, [r7, #8]
 800c444:	429a      	cmp	r2, r3
 800c446:	d202      	bcs.n	800c44e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c448:	4a09      	ldr	r2, [pc, #36]	; (800c470 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	6013      	str	r3, [r2, #0]
}
 800c44e:	bf00      	nop
 800c450:	3710      	adds	r7, #16
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}
 800c456:	bf00      	nop
 800c458:	20003054 	.word	0x20003054
 800c45c:	20002f50 	.word	0x20002f50
 800c460:	20003058 	.word	0x20003058
 800c464:	2000303c 	.word	0x2000303c
 800c468:	2000300c 	.word	0x2000300c
 800c46c:	20003008 	.word	0x20003008
 800c470:	20003070 	.word	0x20003070

0800c474 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c474:	b480      	push	{r7}
 800c476:	b085      	sub	sp, #20
 800c478:	af00      	add	r7, sp, #0
 800c47a:	60f8      	str	r0, [r7, #12]
 800c47c:	60b9      	str	r1, [r7, #8]
 800c47e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	3b04      	subs	r3, #4
 800c484:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c48c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	3b04      	subs	r3, #4
 800c492:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	f023 0201 	bic.w	r2, r3, #1
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	3b04      	subs	r3, #4
 800c4a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c4a4:	4a0c      	ldr	r2, [pc, #48]	; (800c4d8 <pxPortInitialiseStack+0x64>)
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	3b14      	subs	r3, #20
 800c4ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c4b0:	687a      	ldr	r2, [r7, #4]
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	3b04      	subs	r3, #4
 800c4ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	f06f 0202 	mvn.w	r2, #2
 800c4c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	3b20      	subs	r3, #32
 800c4c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	3714      	adds	r7, #20
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d6:	4770      	bx	lr
 800c4d8:	0800c4dd 	.word	0x0800c4dd

0800c4dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b085      	sub	sp, #20
 800c4e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c4e6:	4b12      	ldr	r3, [pc, #72]	; (800c530 <prvTaskExitError+0x54>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4ee:	d00a      	beq.n	800c506 <prvTaskExitError+0x2a>
	__asm volatile
 800c4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f4:	f383 8811 	msr	BASEPRI, r3
 800c4f8:	f3bf 8f6f 	isb	sy
 800c4fc:	f3bf 8f4f 	dsb	sy
 800c500:	60fb      	str	r3, [r7, #12]
}
 800c502:	bf00      	nop
 800c504:	e7fe      	b.n	800c504 <prvTaskExitError+0x28>
	__asm volatile
 800c506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c50a:	f383 8811 	msr	BASEPRI, r3
 800c50e:	f3bf 8f6f 	isb	sy
 800c512:	f3bf 8f4f 	dsb	sy
 800c516:	60bb      	str	r3, [r7, #8]
}
 800c518:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c51a:	bf00      	nop
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d0fc      	beq.n	800c51c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c522:	bf00      	nop
 800c524:	bf00      	nop
 800c526:	3714      	adds	r7, #20
 800c528:	46bd      	mov	sp, r7
 800c52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52e:	4770      	bx	lr
 800c530:	20000038 	.word	0x20000038
	...

0800c540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c540:	4b07      	ldr	r3, [pc, #28]	; (800c560 <pxCurrentTCBConst2>)
 800c542:	6819      	ldr	r1, [r3, #0]
 800c544:	6808      	ldr	r0, [r1, #0]
 800c546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c54a:	f380 8809 	msr	PSP, r0
 800c54e:	f3bf 8f6f 	isb	sy
 800c552:	f04f 0000 	mov.w	r0, #0
 800c556:	f380 8811 	msr	BASEPRI, r0
 800c55a:	4770      	bx	lr
 800c55c:	f3af 8000 	nop.w

0800c560 <pxCurrentTCBConst2>:
 800c560:	20002f50 	.word	0x20002f50
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c564:	bf00      	nop
 800c566:	bf00      	nop

0800c568 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c568:	4808      	ldr	r0, [pc, #32]	; (800c58c <prvPortStartFirstTask+0x24>)
 800c56a:	6800      	ldr	r0, [r0, #0]
 800c56c:	6800      	ldr	r0, [r0, #0]
 800c56e:	f380 8808 	msr	MSP, r0
 800c572:	f04f 0000 	mov.w	r0, #0
 800c576:	f380 8814 	msr	CONTROL, r0
 800c57a:	b662      	cpsie	i
 800c57c:	b661      	cpsie	f
 800c57e:	f3bf 8f4f 	dsb	sy
 800c582:	f3bf 8f6f 	isb	sy
 800c586:	df00      	svc	0
 800c588:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c58a:	bf00      	nop
 800c58c:	e000ed08 	.word	0xe000ed08

0800c590 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b086      	sub	sp, #24
 800c594:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c596:	4b46      	ldr	r3, [pc, #280]	; (800c6b0 <xPortStartScheduler+0x120>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	4a46      	ldr	r2, [pc, #280]	; (800c6b4 <xPortStartScheduler+0x124>)
 800c59c:	4293      	cmp	r3, r2
 800c59e:	d10a      	bne.n	800c5b6 <xPortStartScheduler+0x26>
	__asm volatile
 800c5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a4:	f383 8811 	msr	BASEPRI, r3
 800c5a8:	f3bf 8f6f 	isb	sy
 800c5ac:	f3bf 8f4f 	dsb	sy
 800c5b0:	613b      	str	r3, [r7, #16]
}
 800c5b2:	bf00      	nop
 800c5b4:	e7fe      	b.n	800c5b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c5b6:	4b3e      	ldr	r3, [pc, #248]	; (800c6b0 <xPortStartScheduler+0x120>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	4a3f      	ldr	r2, [pc, #252]	; (800c6b8 <xPortStartScheduler+0x128>)
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d10a      	bne.n	800c5d6 <xPortStartScheduler+0x46>
	__asm volatile
 800c5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c4:	f383 8811 	msr	BASEPRI, r3
 800c5c8:	f3bf 8f6f 	isb	sy
 800c5cc:	f3bf 8f4f 	dsb	sy
 800c5d0:	60fb      	str	r3, [r7, #12]
}
 800c5d2:	bf00      	nop
 800c5d4:	e7fe      	b.n	800c5d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c5d6:	4b39      	ldr	r3, [pc, #228]	; (800c6bc <xPortStartScheduler+0x12c>)
 800c5d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c5da:	697b      	ldr	r3, [r7, #20]
 800c5dc:	781b      	ldrb	r3, [r3, #0]
 800c5de:	b2db      	uxtb	r3, r3
 800c5e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c5e2:	697b      	ldr	r3, [r7, #20]
 800c5e4:	22ff      	movs	r2, #255	; 0xff
 800c5e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c5e8:	697b      	ldr	r3, [r7, #20]
 800c5ea:	781b      	ldrb	r3, [r3, #0]
 800c5ec:	b2db      	uxtb	r3, r3
 800c5ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c5f0:	78fb      	ldrb	r3, [r7, #3]
 800c5f2:	b2db      	uxtb	r3, r3
 800c5f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c5f8:	b2da      	uxtb	r2, r3
 800c5fa:	4b31      	ldr	r3, [pc, #196]	; (800c6c0 <xPortStartScheduler+0x130>)
 800c5fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c5fe:	4b31      	ldr	r3, [pc, #196]	; (800c6c4 <xPortStartScheduler+0x134>)
 800c600:	2207      	movs	r2, #7
 800c602:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c604:	e009      	b.n	800c61a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c606:	4b2f      	ldr	r3, [pc, #188]	; (800c6c4 <xPortStartScheduler+0x134>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	3b01      	subs	r3, #1
 800c60c:	4a2d      	ldr	r2, [pc, #180]	; (800c6c4 <xPortStartScheduler+0x134>)
 800c60e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c610:	78fb      	ldrb	r3, [r7, #3]
 800c612:	b2db      	uxtb	r3, r3
 800c614:	005b      	lsls	r3, r3, #1
 800c616:	b2db      	uxtb	r3, r3
 800c618:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c61a:	78fb      	ldrb	r3, [r7, #3]
 800c61c:	b2db      	uxtb	r3, r3
 800c61e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c622:	2b80      	cmp	r3, #128	; 0x80
 800c624:	d0ef      	beq.n	800c606 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c626:	4b27      	ldr	r3, [pc, #156]	; (800c6c4 <xPortStartScheduler+0x134>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	f1c3 0307 	rsb	r3, r3, #7
 800c62e:	2b04      	cmp	r3, #4
 800c630:	d00a      	beq.n	800c648 <xPortStartScheduler+0xb8>
	__asm volatile
 800c632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c636:	f383 8811 	msr	BASEPRI, r3
 800c63a:	f3bf 8f6f 	isb	sy
 800c63e:	f3bf 8f4f 	dsb	sy
 800c642:	60bb      	str	r3, [r7, #8]
}
 800c644:	bf00      	nop
 800c646:	e7fe      	b.n	800c646 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c648:	4b1e      	ldr	r3, [pc, #120]	; (800c6c4 <xPortStartScheduler+0x134>)
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	021b      	lsls	r3, r3, #8
 800c64e:	4a1d      	ldr	r2, [pc, #116]	; (800c6c4 <xPortStartScheduler+0x134>)
 800c650:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c652:	4b1c      	ldr	r3, [pc, #112]	; (800c6c4 <xPortStartScheduler+0x134>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c65a:	4a1a      	ldr	r2, [pc, #104]	; (800c6c4 <xPortStartScheduler+0x134>)
 800c65c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	b2da      	uxtb	r2, r3
 800c662:	697b      	ldr	r3, [r7, #20]
 800c664:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c666:	4b18      	ldr	r3, [pc, #96]	; (800c6c8 <xPortStartScheduler+0x138>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	4a17      	ldr	r2, [pc, #92]	; (800c6c8 <xPortStartScheduler+0x138>)
 800c66c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c670:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c672:	4b15      	ldr	r3, [pc, #84]	; (800c6c8 <xPortStartScheduler+0x138>)
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	4a14      	ldr	r2, [pc, #80]	; (800c6c8 <xPortStartScheduler+0x138>)
 800c678:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c67c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c67e:	f000 f8dd 	bl	800c83c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c682:	4b12      	ldr	r3, [pc, #72]	; (800c6cc <xPortStartScheduler+0x13c>)
 800c684:	2200      	movs	r2, #0
 800c686:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c688:	f000 f8fc 	bl	800c884 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c68c:	4b10      	ldr	r3, [pc, #64]	; (800c6d0 <xPortStartScheduler+0x140>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	4a0f      	ldr	r2, [pc, #60]	; (800c6d0 <xPortStartScheduler+0x140>)
 800c692:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c696:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c698:	f7ff ff66 	bl	800c568 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c69c:	f7ff fd48 	bl	800c130 <vTaskSwitchContext>
	prvTaskExitError();
 800c6a0:	f7ff ff1c 	bl	800c4dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c6a4:	2300      	movs	r3, #0
}
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	3718      	adds	r7, #24
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bd80      	pop	{r7, pc}
 800c6ae:	bf00      	nop
 800c6b0:	e000ed00 	.word	0xe000ed00
 800c6b4:	410fc271 	.word	0x410fc271
 800c6b8:	410fc270 	.word	0x410fc270
 800c6bc:	e000e400 	.word	0xe000e400
 800c6c0:	2000307c 	.word	0x2000307c
 800c6c4:	20003080 	.word	0x20003080
 800c6c8:	e000ed20 	.word	0xe000ed20
 800c6cc:	20000038 	.word	0x20000038
 800c6d0:	e000ef34 	.word	0xe000ef34

0800c6d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	b083      	sub	sp, #12
 800c6d8:	af00      	add	r7, sp, #0
	__asm volatile
 800c6da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6de:	f383 8811 	msr	BASEPRI, r3
 800c6e2:	f3bf 8f6f 	isb	sy
 800c6e6:	f3bf 8f4f 	dsb	sy
 800c6ea:	607b      	str	r3, [r7, #4]
}
 800c6ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c6ee:	4b0f      	ldr	r3, [pc, #60]	; (800c72c <vPortEnterCritical+0x58>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	3301      	adds	r3, #1
 800c6f4:	4a0d      	ldr	r2, [pc, #52]	; (800c72c <vPortEnterCritical+0x58>)
 800c6f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c6f8:	4b0c      	ldr	r3, [pc, #48]	; (800c72c <vPortEnterCritical+0x58>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	2b01      	cmp	r3, #1
 800c6fe:	d10f      	bne.n	800c720 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c700:	4b0b      	ldr	r3, [pc, #44]	; (800c730 <vPortEnterCritical+0x5c>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	b2db      	uxtb	r3, r3
 800c706:	2b00      	cmp	r3, #0
 800c708:	d00a      	beq.n	800c720 <vPortEnterCritical+0x4c>
	__asm volatile
 800c70a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c70e:	f383 8811 	msr	BASEPRI, r3
 800c712:	f3bf 8f6f 	isb	sy
 800c716:	f3bf 8f4f 	dsb	sy
 800c71a:	603b      	str	r3, [r7, #0]
}
 800c71c:	bf00      	nop
 800c71e:	e7fe      	b.n	800c71e <vPortEnterCritical+0x4a>
	}
}
 800c720:	bf00      	nop
 800c722:	370c      	adds	r7, #12
 800c724:	46bd      	mov	sp, r7
 800c726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72a:	4770      	bx	lr
 800c72c:	20000038 	.word	0x20000038
 800c730:	e000ed04 	.word	0xe000ed04

0800c734 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c734:	b480      	push	{r7}
 800c736:	b083      	sub	sp, #12
 800c738:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c73a:	4b12      	ldr	r3, [pc, #72]	; (800c784 <vPortExitCritical+0x50>)
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d10a      	bne.n	800c758 <vPortExitCritical+0x24>
	__asm volatile
 800c742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c746:	f383 8811 	msr	BASEPRI, r3
 800c74a:	f3bf 8f6f 	isb	sy
 800c74e:	f3bf 8f4f 	dsb	sy
 800c752:	607b      	str	r3, [r7, #4]
}
 800c754:	bf00      	nop
 800c756:	e7fe      	b.n	800c756 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c758:	4b0a      	ldr	r3, [pc, #40]	; (800c784 <vPortExitCritical+0x50>)
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	3b01      	subs	r3, #1
 800c75e:	4a09      	ldr	r2, [pc, #36]	; (800c784 <vPortExitCritical+0x50>)
 800c760:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c762:	4b08      	ldr	r3, [pc, #32]	; (800c784 <vPortExitCritical+0x50>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d105      	bne.n	800c776 <vPortExitCritical+0x42>
 800c76a:	2300      	movs	r3, #0
 800c76c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c774:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c776:	bf00      	nop
 800c778:	370c      	adds	r7, #12
 800c77a:	46bd      	mov	sp, r7
 800c77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c780:	4770      	bx	lr
 800c782:	bf00      	nop
 800c784:	20000038 	.word	0x20000038
	...

0800c790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c790:	f3ef 8009 	mrs	r0, PSP
 800c794:	f3bf 8f6f 	isb	sy
 800c798:	4b15      	ldr	r3, [pc, #84]	; (800c7f0 <pxCurrentTCBConst>)
 800c79a:	681a      	ldr	r2, [r3, #0]
 800c79c:	f01e 0f10 	tst.w	lr, #16
 800c7a0:	bf08      	it	eq
 800c7a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c7a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7aa:	6010      	str	r0, [r2, #0]
 800c7ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c7b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c7b4:	f380 8811 	msr	BASEPRI, r0
 800c7b8:	f3bf 8f4f 	dsb	sy
 800c7bc:	f3bf 8f6f 	isb	sy
 800c7c0:	f7ff fcb6 	bl	800c130 <vTaskSwitchContext>
 800c7c4:	f04f 0000 	mov.w	r0, #0
 800c7c8:	f380 8811 	msr	BASEPRI, r0
 800c7cc:	bc09      	pop	{r0, r3}
 800c7ce:	6819      	ldr	r1, [r3, #0]
 800c7d0:	6808      	ldr	r0, [r1, #0]
 800c7d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7d6:	f01e 0f10 	tst.w	lr, #16
 800c7da:	bf08      	it	eq
 800c7dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c7e0:	f380 8809 	msr	PSP, r0
 800c7e4:	f3bf 8f6f 	isb	sy
 800c7e8:	4770      	bx	lr
 800c7ea:	bf00      	nop
 800c7ec:	f3af 8000 	nop.w

0800c7f0 <pxCurrentTCBConst>:
 800c7f0:	20002f50 	.word	0x20002f50
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c7f4:	bf00      	nop
 800c7f6:	bf00      	nop

0800c7f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b082      	sub	sp, #8
 800c7fc:	af00      	add	r7, sp, #0
	__asm volatile
 800c7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c802:	f383 8811 	msr	BASEPRI, r3
 800c806:	f3bf 8f6f 	isb	sy
 800c80a:	f3bf 8f4f 	dsb	sy
 800c80e:	607b      	str	r3, [r7, #4]
}
 800c810:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c812:	f7ff fbd5 	bl	800bfc0 <xTaskIncrementTick>
 800c816:	4603      	mov	r3, r0
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d003      	beq.n	800c824 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c81c:	4b06      	ldr	r3, [pc, #24]	; (800c838 <SysTick_Handler+0x40>)
 800c81e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c822:	601a      	str	r2, [r3, #0]
 800c824:	2300      	movs	r3, #0
 800c826:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	f383 8811 	msr	BASEPRI, r3
}
 800c82e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c830:	bf00      	nop
 800c832:	3708      	adds	r7, #8
 800c834:	46bd      	mov	sp, r7
 800c836:	bd80      	pop	{r7, pc}
 800c838:	e000ed04 	.word	0xe000ed04

0800c83c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c83c:	b480      	push	{r7}
 800c83e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c840:	4b0b      	ldr	r3, [pc, #44]	; (800c870 <vPortSetupTimerInterrupt+0x34>)
 800c842:	2200      	movs	r2, #0
 800c844:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c846:	4b0b      	ldr	r3, [pc, #44]	; (800c874 <vPortSetupTimerInterrupt+0x38>)
 800c848:	2200      	movs	r2, #0
 800c84a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c84c:	4b0a      	ldr	r3, [pc, #40]	; (800c878 <vPortSetupTimerInterrupt+0x3c>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	4a0a      	ldr	r2, [pc, #40]	; (800c87c <vPortSetupTimerInterrupt+0x40>)
 800c852:	fba2 2303 	umull	r2, r3, r2, r3
 800c856:	099b      	lsrs	r3, r3, #6
 800c858:	4a09      	ldr	r2, [pc, #36]	; (800c880 <vPortSetupTimerInterrupt+0x44>)
 800c85a:	3b01      	subs	r3, #1
 800c85c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c85e:	4b04      	ldr	r3, [pc, #16]	; (800c870 <vPortSetupTimerInterrupt+0x34>)
 800c860:	2207      	movs	r2, #7
 800c862:	601a      	str	r2, [r3, #0]
}
 800c864:	bf00      	nop
 800c866:	46bd      	mov	sp, r7
 800c868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86c:	4770      	bx	lr
 800c86e:	bf00      	nop
 800c870:	e000e010 	.word	0xe000e010
 800c874:	e000e018 	.word	0xe000e018
 800c878:	2000002c 	.word	0x2000002c
 800c87c:	10624dd3 	.word	0x10624dd3
 800c880:	e000e014 	.word	0xe000e014

0800c884 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c884:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c894 <vPortEnableVFP+0x10>
 800c888:	6801      	ldr	r1, [r0, #0]
 800c88a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c88e:	6001      	str	r1, [r0, #0]
 800c890:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c892:	bf00      	nop
 800c894:	e000ed88 	.word	0xe000ed88

0800c898 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b08a      	sub	sp, #40	; 0x28
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c8a4:	f7ff fae2 	bl	800be6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c8a8:	4b5b      	ldr	r3, [pc, #364]	; (800ca18 <pvPortMalloc+0x180>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d101      	bne.n	800c8b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c8b0:	f000 f920 	bl	800caf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c8b4:	4b59      	ldr	r3, [pc, #356]	; (800ca1c <pvPortMalloc+0x184>)
 800c8b6:	681a      	ldr	r2, [r3, #0]
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	4013      	ands	r3, r2
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	f040 8093 	bne.w	800c9e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d01d      	beq.n	800c904 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c8c8:	2208      	movs	r2, #8
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	4413      	add	r3, r2
 800c8ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f003 0307 	and.w	r3, r3, #7
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d014      	beq.n	800c904 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f023 0307 	bic.w	r3, r3, #7
 800c8e0:	3308      	adds	r3, #8
 800c8e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f003 0307 	and.w	r3, r3, #7
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d00a      	beq.n	800c904 <pvPortMalloc+0x6c>
	__asm volatile
 800c8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8f2:	f383 8811 	msr	BASEPRI, r3
 800c8f6:	f3bf 8f6f 	isb	sy
 800c8fa:	f3bf 8f4f 	dsb	sy
 800c8fe:	617b      	str	r3, [r7, #20]
}
 800c900:	bf00      	nop
 800c902:	e7fe      	b.n	800c902 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d06e      	beq.n	800c9e8 <pvPortMalloc+0x150>
 800c90a:	4b45      	ldr	r3, [pc, #276]	; (800ca20 <pvPortMalloc+0x188>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	687a      	ldr	r2, [r7, #4]
 800c910:	429a      	cmp	r2, r3
 800c912:	d869      	bhi.n	800c9e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c914:	4b43      	ldr	r3, [pc, #268]	; (800ca24 <pvPortMalloc+0x18c>)
 800c916:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c918:	4b42      	ldr	r3, [pc, #264]	; (800ca24 <pvPortMalloc+0x18c>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c91e:	e004      	b.n	800c92a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c922:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c92c:	685b      	ldr	r3, [r3, #4]
 800c92e:	687a      	ldr	r2, [r7, #4]
 800c930:	429a      	cmp	r2, r3
 800c932:	d903      	bls.n	800c93c <pvPortMalloc+0xa4>
 800c934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d1f1      	bne.n	800c920 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c93c:	4b36      	ldr	r3, [pc, #216]	; (800ca18 <pvPortMalloc+0x180>)
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c942:	429a      	cmp	r2, r3
 800c944:	d050      	beq.n	800c9e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c946:	6a3b      	ldr	r3, [r7, #32]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	2208      	movs	r2, #8
 800c94c:	4413      	add	r3, r2
 800c94e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c952:	681a      	ldr	r2, [r3, #0]
 800c954:	6a3b      	ldr	r3, [r7, #32]
 800c956:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c95a:	685a      	ldr	r2, [r3, #4]
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	1ad2      	subs	r2, r2, r3
 800c960:	2308      	movs	r3, #8
 800c962:	005b      	lsls	r3, r3, #1
 800c964:	429a      	cmp	r2, r3
 800c966:	d91f      	bls.n	800c9a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	4413      	add	r3, r2
 800c96e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c970:	69bb      	ldr	r3, [r7, #24]
 800c972:	f003 0307 	and.w	r3, r3, #7
 800c976:	2b00      	cmp	r3, #0
 800c978:	d00a      	beq.n	800c990 <pvPortMalloc+0xf8>
	__asm volatile
 800c97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c97e:	f383 8811 	msr	BASEPRI, r3
 800c982:	f3bf 8f6f 	isb	sy
 800c986:	f3bf 8f4f 	dsb	sy
 800c98a:	613b      	str	r3, [r7, #16]
}
 800c98c:	bf00      	nop
 800c98e:	e7fe      	b.n	800c98e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c992:	685a      	ldr	r2, [r3, #4]
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	1ad2      	subs	r2, r2, r3
 800c998:	69bb      	ldr	r3, [r7, #24]
 800c99a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c99e:	687a      	ldr	r2, [r7, #4]
 800c9a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c9a2:	69b8      	ldr	r0, [r7, #24]
 800c9a4:	f000 f908 	bl	800cbb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c9a8:	4b1d      	ldr	r3, [pc, #116]	; (800ca20 <pvPortMalloc+0x188>)
 800c9aa:	681a      	ldr	r2, [r3, #0]
 800c9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ae:	685b      	ldr	r3, [r3, #4]
 800c9b0:	1ad3      	subs	r3, r2, r3
 800c9b2:	4a1b      	ldr	r2, [pc, #108]	; (800ca20 <pvPortMalloc+0x188>)
 800c9b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c9b6:	4b1a      	ldr	r3, [pc, #104]	; (800ca20 <pvPortMalloc+0x188>)
 800c9b8:	681a      	ldr	r2, [r3, #0]
 800c9ba:	4b1b      	ldr	r3, [pc, #108]	; (800ca28 <pvPortMalloc+0x190>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	429a      	cmp	r2, r3
 800c9c0:	d203      	bcs.n	800c9ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c9c2:	4b17      	ldr	r3, [pc, #92]	; (800ca20 <pvPortMalloc+0x188>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	4a18      	ldr	r2, [pc, #96]	; (800ca28 <pvPortMalloc+0x190>)
 800c9c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9cc:	685a      	ldr	r2, [r3, #4]
 800c9ce:	4b13      	ldr	r3, [pc, #76]	; (800ca1c <pvPortMalloc+0x184>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	431a      	orrs	r2, r3
 800c9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9da:	2200      	movs	r2, #0
 800c9dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c9de:	4b13      	ldr	r3, [pc, #76]	; (800ca2c <pvPortMalloc+0x194>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	3301      	adds	r3, #1
 800c9e4:	4a11      	ldr	r2, [pc, #68]	; (800ca2c <pvPortMalloc+0x194>)
 800c9e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c9e8:	f7ff fa4e 	bl	800be88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c9ec:	69fb      	ldr	r3, [r7, #28]
 800c9ee:	f003 0307 	and.w	r3, r3, #7
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d00a      	beq.n	800ca0c <pvPortMalloc+0x174>
	__asm volatile
 800c9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9fa:	f383 8811 	msr	BASEPRI, r3
 800c9fe:	f3bf 8f6f 	isb	sy
 800ca02:	f3bf 8f4f 	dsb	sy
 800ca06:	60fb      	str	r3, [r7, #12]
}
 800ca08:	bf00      	nop
 800ca0a:	e7fe      	b.n	800ca0a <pvPortMalloc+0x172>
	return pvReturn;
 800ca0c:	69fb      	ldr	r3, [r7, #28]
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	3728      	adds	r7, #40	; 0x28
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}
 800ca16:	bf00      	nop
 800ca18:	20006c8c 	.word	0x20006c8c
 800ca1c:	20006ca0 	.word	0x20006ca0
 800ca20:	20006c90 	.word	0x20006c90
 800ca24:	20006c84 	.word	0x20006c84
 800ca28:	20006c94 	.word	0x20006c94
 800ca2c:	20006c98 	.word	0x20006c98

0800ca30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b086      	sub	sp, #24
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d04d      	beq.n	800cade <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ca42:	2308      	movs	r3, #8
 800ca44:	425b      	negs	r3, r3
 800ca46:	697a      	ldr	r2, [r7, #20]
 800ca48:	4413      	add	r3, r2
 800ca4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ca4c:	697b      	ldr	r3, [r7, #20]
 800ca4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	685a      	ldr	r2, [r3, #4]
 800ca54:	4b24      	ldr	r3, [pc, #144]	; (800cae8 <vPortFree+0xb8>)
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	4013      	ands	r3, r2
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d10a      	bne.n	800ca74 <vPortFree+0x44>
	__asm volatile
 800ca5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca62:	f383 8811 	msr	BASEPRI, r3
 800ca66:	f3bf 8f6f 	isb	sy
 800ca6a:	f3bf 8f4f 	dsb	sy
 800ca6e:	60fb      	str	r3, [r7, #12]
}
 800ca70:	bf00      	nop
 800ca72:	e7fe      	b.n	800ca72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ca74:	693b      	ldr	r3, [r7, #16]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d00a      	beq.n	800ca92 <vPortFree+0x62>
	__asm volatile
 800ca7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca80:	f383 8811 	msr	BASEPRI, r3
 800ca84:	f3bf 8f6f 	isb	sy
 800ca88:	f3bf 8f4f 	dsb	sy
 800ca8c:	60bb      	str	r3, [r7, #8]
}
 800ca8e:	bf00      	nop
 800ca90:	e7fe      	b.n	800ca90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ca92:	693b      	ldr	r3, [r7, #16]
 800ca94:	685a      	ldr	r2, [r3, #4]
 800ca96:	4b14      	ldr	r3, [pc, #80]	; (800cae8 <vPortFree+0xb8>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	4013      	ands	r3, r2
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d01e      	beq.n	800cade <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800caa0:	693b      	ldr	r3, [r7, #16]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d11a      	bne.n	800cade <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800caa8:	693b      	ldr	r3, [r7, #16]
 800caaa:	685a      	ldr	r2, [r3, #4]
 800caac:	4b0e      	ldr	r3, [pc, #56]	; (800cae8 <vPortFree+0xb8>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	43db      	mvns	r3, r3
 800cab2:	401a      	ands	r2, r3
 800cab4:	693b      	ldr	r3, [r7, #16]
 800cab6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cab8:	f7ff f9d8 	bl	800be6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cabc:	693b      	ldr	r3, [r7, #16]
 800cabe:	685a      	ldr	r2, [r3, #4]
 800cac0:	4b0a      	ldr	r3, [pc, #40]	; (800caec <vPortFree+0xbc>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	4413      	add	r3, r2
 800cac6:	4a09      	ldr	r2, [pc, #36]	; (800caec <vPortFree+0xbc>)
 800cac8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800caca:	6938      	ldr	r0, [r7, #16]
 800cacc:	f000 f874 	bl	800cbb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cad0:	4b07      	ldr	r3, [pc, #28]	; (800caf0 <vPortFree+0xc0>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	3301      	adds	r3, #1
 800cad6:	4a06      	ldr	r2, [pc, #24]	; (800caf0 <vPortFree+0xc0>)
 800cad8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cada:	f7ff f9d5 	bl	800be88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cade:	bf00      	nop
 800cae0:	3718      	adds	r7, #24
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}
 800cae6:	bf00      	nop
 800cae8:	20006ca0 	.word	0x20006ca0
 800caec:	20006c90 	.word	0x20006c90
 800caf0:	20006c9c 	.word	0x20006c9c

0800caf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800caf4:	b480      	push	{r7}
 800caf6:	b085      	sub	sp, #20
 800caf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cafa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800cafe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cb00:	4b27      	ldr	r3, [pc, #156]	; (800cba0 <prvHeapInit+0xac>)
 800cb02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	f003 0307 	and.w	r3, r3, #7
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d00c      	beq.n	800cb28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	3307      	adds	r3, #7
 800cb12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	f023 0307 	bic.w	r3, r3, #7
 800cb1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cb1c:	68ba      	ldr	r2, [r7, #8]
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	1ad3      	subs	r3, r2, r3
 800cb22:	4a1f      	ldr	r2, [pc, #124]	; (800cba0 <prvHeapInit+0xac>)
 800cb24:	4413      	add	r3, r2
 800cb26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cb2c:	4a1d      	ldr	r2, [pc, #116]	; (800cba4 <prvHeapInit+0xb0>)
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cb32:	4b1c      	ldr	r3, [pc, #112]	; (800cba4 <prvHeapInit+0xb0>)
 800cb34:	2200      	movs	r2, #0
 800cb36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	68ba      	ldr	r2, [r7, #8]
 800cb3c:	4413      	add	r3, r2
 800cb3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cb40:	2208      	movs	r2, #8
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	1a9b      	subs	r3, r3, r2
 800cb46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	f023 0307 	bic.w	r3, r3, #7
 800cb4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	4a15      	ldr	r2, [pc, #84]	; (800cba8 <prvHeapInit+0xb4>)
 800cb54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cb56:	4b14      	ldr	r3, [pc, #80]	; (800cba8 <prvHeapInit+0xb4>)
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cb5e:	4b12      	ldr	r3, [pc, #72]	; (800cba8 <prvHeapInit+0xb4>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	2200      	movs	r2, #0
 800cb64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	68fa      	ldr	r2, [r7, #12]
 800cb6e:	1ad2      	subs	r2, r2, r3
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cb74:	4b0c      	ldr	r3, [pc, #48]	; (800cba8 <prvHeapInit+0xb4>)
 800cb76:	681a      	ldr	r2, [r3, #0]
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	685b      	ldr	r3, [r3, #4]
 800cb80:	4a0a      	ldr	r2, [pc, #40]	; (800cbac <prvHeapInit+0xb8>)
 800cb82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	685b      	ldr	r3, [r3, #4]
 800cb88:	4a09      	ldr	r2, [pc, #36]	; (800cbb0 <prvHeapInit+0xbc>)
 800cb8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cb8c:	4b09      	ldr	r3, [pc, #36]	; (800cbb4 <prvHeapInit+0xc0>)
 800cb8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cb92:	601a      	str	r2, [r3, #0]
}
 800cb94:	bf00      	nop
 800cb96:	3714      	adds	r7, #20
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9e:	4770      	bx	lr
 800cba0:	20003084 	.word	0x20003084
 800cba4:	20006c84 	.word	0x20006c84
 800cba8:	20006c8c 	.word	0x20006c8c
 800cbac:	20006c94 	.word	0x20006c94
 800cbb0:	20006c90 	.word	0x20006c90
 800cbb4:	20006ca0 	.word	0x20006ca0

0800cbb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cbb8:	b480      	push	{r7}
 800cbba:	b085      	sub	sp, #20
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cbc0:	4b28      	ldr	r3, [pc, #160]	; (800cc64 <prvInsertBlockIntoFreeList+0xac>)
 800cbc2:	60fb      	str	r3, [r7, #12]
 800cbc4:	e002      	b.n	800cbcc <prvInsertBlockIntoFreeList+0x14>
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	60fb      	str	r3, [r7, #12]
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	687a      	ldr	r2, [r7, #4]
 800cbd2:	429a      	cmp	r2, r3
 800cbd4:	d8f7      	bhi.n	800cbc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	685b      	ldr	r3, [r3, #4]
 800cbde:	68ba      	ldr	r2, [r7, #8]
 800cbe0:	4413      	add	r3, r2
 800cbe2:	687a      	ldr	r2, [r7, #4]
 800cbe4:	429a      	cmp	r2, r3
 800cbe6:	d108      	bne.n	800cbfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	685a      	ldr	r2, [r3, #4]
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	685b      	ldr	r3, [r3, #4]
 800cbf0:	441a      	add	r2, r3
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	685b      	ldr	r3, [r3, #4]
 800cc02:	68ba      	ldr	r2, [r7, #8]
 800cc04:	441a      	add	r2, r3
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	429a      	cmp	r2, r3
 800cc0c:	d118      	bne.n	800cc40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	681a      	ldr	r2, [r3, #0]
 800cc12:	4b15      	ldr	r3, [pc, #84]	; (800cc68 <prvInsertBlockIntoFreeList+0xb0>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	429a      	cmp	r2, r3
 800cc18:	d00d      	beq.n	800cc36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	685a      	ldr	r2, [r3, #4]
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	685b      	ldr	r3, [r3, #4]
 800cc24:	441a      	add	r2, r3
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	681a      	ldr	r2, [r3, #0]
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	601a      	str	r2, [r3, #0]
 800cc34:	e008      	b.n	800cc48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cc36:	4b0c      	ldr	r3, [pc, #48]	; (800cc68 <prvInsertBlockIntoFreeList+0xb0>)
 800cc38:	681a      	ldr	r2, [r3, #0]
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	601a      	str	r2, [r3, #0]
 800cc3e:	e003      	b.n	800cc48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	681a      	ldr	r2, [r3, #0]
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cc48:	68fa      	ldr	r2, [r7, #12]
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	429a      	cmp	r2, r3
 800cc4e:	d002      	beq.n	800cc56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	687a      	ldr	r2, [r7, #4]
 800cc54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc56:	bf00      	nop
 800cc58:	3714      	adds	r7, #20
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc60:	4770      	bx	lr
 800cc62:	bf00      	nop
 800cc64:	20006c84 	.word	0x20006c84
 800cc68:	20006c8c 	.word	0x20006c8c

0800cc6c <__cxa_pure_virtual>:
 800cc6c:	b508      	push	{r3, lr}
 800cc6e:	f000 f80d 	bl	800cc8c <_ZSt9terminatev>

0800cc72 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800cc72:	b508      	push	{r3, lr}
 800cc74:	4780      	blx	r0
 800cc76:	f001 fe51 	bl	800e91c <abort>
	...

0800cc7c <_ZSt13get_terminatev>:
 800cc7c:	4b02      	ldr	r3, [pc, #8]	; (800cc88 <_ZSt13get_terminatev+0xc>)
 800cc7e:	6818      	ldr	r0, [r3, #0]
 800cc80:	f3bf 8f5b 	dmb	ish
 800cc84:	4770      	bx	lr
 800cc86:	bf00      	nop
 800cc88:	2000003c 	.word	0x2000003c

0800cc8c <_ZSt9terminatev>:
 800cc8c:	b508      	push	{r3, lr}
 800cc8e:	f7ff fff5 	bl	800cc7c <_ZSt13get_terminatev>
 800cc92:	f7ff ffee 	bl	800cc72 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800cc98 <cos>:
 800cc98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cc9a:	ec53 2b10 	vmov	r2, r3, d0
 800cc9e:	4826      	ldr	r0, [pc, #152]	; (800cd38 <cos+0xa0>)
 800cca0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cca4:	4281      	cmp	r1, r0
 800cca6:	dc06      	bgt.n	800ccb6 <cos+0x1e>
 800cca8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800cd30 <cos+0x98>
 800ccac:	b005      	add	sp, #20
 800ccae:	f85d eb04 	ldr.w	lr, [sp], #4
 800ccb2:	f000 bc71 	b.w	800d598 <__kernel_cos>
 800ccb6:	4821      	ldr	r0, [pc, #132]	; (800cd3c <cos+0xa4>)
 800ccb8:	4281      	cmp	r1, r0
 800ccba:	dd09      	ble.n	800ccd0 <cos+0x38>
 800ccbc:	ee10 0a10 	vmov	r0, s0
 800ccc0:	4619      	mov	r1, r3
 800ccc2:	f7f3 fa91 	bl	80001e8 <__aeabi_dsub>
 800ccc6:	ec41 0b10 	vmov	d0, r0, r1
 800ccca:	b005      	add	sp, #20
 800cccc:	f85d fb04 	ldr.w	pc, [sp], #4
 800ccd0:	4668      	mov	r0, sp
 800ccd2:	f000 f919 	bl	800cf08 <__ieee754_rem_pio2>
 800ccd6:	f000 0003 	and.w	r0, r0, #3
 800ccda:	2801      	cmp	r0, #1
 800ccdc:	d00b      	beq.n	800ccf6 <cos+0x5e>
 800ccde:	2802      	cmp	r0, #2
 800cce0:	d016      	beq.n	800cd10 <cos+0x78>
 800cce2:	b9e0      	cbnz	r0, 800cd1e <cos+0x86>
 800cce4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cce8:	ed9d 0b00 	vldr	d0, [sp]
 800ccec:	f000 fc54 	bl	800d598 <__kernel_cos>
 800ccf0:	ec51 0b10 	vmov	r0, r1, d0
 800ccf4:	e7e7      	b.n	800ccc6 <cos+0x2e>
 800ccf6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ccfa:	ed9d 0b00 	vldr	d0, [sp]
 800ccfe:	f001 f863 	bl	800ddc8 <__kernel_sin>
 800cd02:	ec53 2b10 	vmov	r2, r3, d0
 800cd06:	ee10 0a10 	vmov	r0, s0
 800cd0a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800cd0e:	e7da      	b.n	800ccc6 <cos+0x2e>
 800cd10:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cd14:	ed9d 0b00 	vldr	d0, [sp]
 800cd18:	f000 fc3e 	bl	800d598 <__kernel_cos>
 800cd1c:	e7f1      	b.n	800cd02 <cos+0x6a>
 800cd1e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cd22:	ed9d 0b00 	vldr	d0, [sp]
 800cd26:	2001      	movs	r0, #1
 800cd28:	f001 f84e 	bl	800ddc8 <__kernel_sin>
 800cd2c:	e7e0      	b.n	800ccf0 <cos+0x58>
 800cd2e:	bf00      	nop
	...
 800cd38:	3fe921fb 	.word	0x3fe921fb
 800cd3c:	7fefffff 	.word	0x7fefffff

0800cd40 <sin>:
 800cd40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cd42:	ec53 2b10 	vmov	r2, r3, d0
 800cd46:	4828      	ldr	r0, [pc, #160]	; (800cde8 <sin+0xa8>)
 800cd48:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cd4c:	4281      	cmp	r1, r0
 800cd4e:	dc07      	bgt.n	800cd60 <sin+0x20>
 800cd50:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800cde0 <sin+0xa0>
 800cd54:	2000      	movs	r0, #0
 800cd56:	b005      	add	sp, #20
 800cd58:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd5c:	f001 b834 	b.w	800ddc8 <__kernel_sin>
 800cd60:	4822      	ldr	r0, [pc, #136]	; (800cdec <sin+0xac>)
 800cd62:	4281      	cmp	r1, r0
 800cd64:	dd09      	ble.n	800cd7a <sin+0x3a>
 800cd66:	ee10 0a10 	vmov	r0, s0
 800cd6a:	4619      	mov	r1, r3
 800cd6c:	f7f3 fa3c 	bl	80001e8 <__aeabi_dsub>
 800cd70:	ec41 0b10 	vmov	d0, r0, r1
 800cd74:	b005      	add	sp, #20
 800cd76:	f85d fb04 	ldr.w	pc, [sp], #4
 800cd7a:	4668      	mov	r0, sp
 800cd7c:	f000 f8c4 	bl	800cf08 <__ieee754_rem_pio2>
 800cd80:	f000 0003 	and.w	r0, r0, #3
 800cd84:	2801      	cmp	r0, #1
 800cd86:	d00c      	beq.n	800cda2 <sin+0x62>
 800cd88:	2802      	cmp	r0, #2
 800cd8a:	d011      	beq.n	800cdb0 <sin+0x70>
 800cd8c:	b9f0      	cbnz	r0, 800cdcc <sin+0x8c>
 800cd8e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cd92:	ed9d 0b00 	vldr	d0, [sp]
 800cd96:	2001      	movs	r0, #1
 800cd98:	f001 f816 	bl	800ddc8 <__kernel_sin>
 800cd9c:	ec51 0b10 	vmov	r0, r1, d0
 800cda0:	e7e6      	b.n	800cd70 <sin+0x30>
 800cda2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cda6:	ed9d 0b00 	vldr	d0, [sp]
 800cdaa:	f000 fbf5 	bl	800d598 <__kernel_cos>
 800cdae:	e7f5      	b.n	800cd9c <sin+0x5c>
 800cdb0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cdb4:	ed9d 0b00 	vldr	d0, [sp]
 800cdb8:	2001      	movs	r0, #1
 800cdba:	f001 f805 	bl	800ddc8 <__kernel_sin>
 800cdbe:	ec53 2b10 	vmov	r2, r3, d0
 800cdc2:	ee10 0a10 	vmov	r0, s0
 800cdc6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800cdca:	e7d1      	b.n	800cd70 <sin+0x30>
 800cdcc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cdd0:	ed9d 0b00 	vldr	d0, [sp]
 800cdd4:	f000 fbe0 	bl	800d598 <__kernel_cos>
 800cdd8:	e7f1      	b.n	800cdbe <sin+0x7e>
 800cdda:	bf00      	nop
 800cddc:	f3af 8000 	nop.w
	...
 800cde8:	3fe921fb 	.word	0x3fe921fb
 800cdec:	7fefffff 	.word	0x7fefffff

0800cdf0 <cosf>:
 800cdf0:	ee10 3a10 	vmov	r3, s0
 800cdf4:	b507      	push	{r0, r1, r2, lr}
 800cdf6:	4a1e      	ldr	r2, [pc, #120]	; (800ce70 <cosf+0x80>)
 800cdf8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cdfc:	4293      	cmp	r3, r2
 800cdfe:	dc06      	bgt.n	800ce0e <cosf+0x1e>
 800ce00:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800ce74 <cosf+0x84>
 800ce04:	b003      	add	sp, #12
 800ce06:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce0a:	f001 b89b 	b.w	800df44 <__kernel_cosf>
 800ce0e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ce12:	db04      	blt.n	800ce1e <cosf+0x2e>
 800ce14:	ee30 0a40 	vsub.f32	s0, s0, s0
 800ce18:	b003      	add	sp, #12
 800ce1a:	f85d fb04 	ldr.w	pc, [sp], #4
 800ce1e:	4668      	mov	r0, sp
 800ce20:	f000 fa7e 	bl	800d320 <__ieee754_rem_pio2f>
 800ce24:	f000 0003 	and.w	r0, r0, #3
 800ce28:	2801      	cmp	r0, #1
 800ce2a:	d009      	beq.n	800ce40 <cosf+0x50>
 800ce2c:	2802      	cmp	r0, #2
 800ce2e:	d010      	beq.n	800ce52 <cosf+0x62>
 800ce30:	b9b0      	cbnz	r0, 800ce60 <cosf+0x70>
 800ce32:	eddd 0a01 	vldr	s1, [sp, #4]
 800ce36:	ed9d 0a00 	vldr	s0, [sp]
 800ce3a:	f001 f883 	bl	800df44 <__kernel_cosf>
 800ce3e:	e7eb      	b.n	800ce18 <cosf+0x28>
 800ce40:	eddd 0a01 	vldr	s1, [sp, #4]
 800ce44:	ed9d 0a00 	vldr	s0, [sp]
 800ce48:	f001 fb52 	bl	800e4f0 <__kernel_sinf>
 800ce4c:	eeb1 0a40 	vneg.f32	s0, s0
 800ce50:	e7e2      	b.n	800ce18 <cosf+0x28>
 800ce52:	eddd 0a01 	vldr	s1, [sp, #4]
 800ce56:	ed9d 0a00 	vldr	s0, [sp]
 800ce5a:	f001 f873 	bl	800df44 <__kernel_cosf>
 800ce5e:	e7f5      	b.n	800ce4c <cosf+0x5c>
 800ce60:	eddd 0a01 	vldr	s1, [sp, #4]
 800ce64:	ed9d 0a00 	vldr	s0, [sp]
 800ce68:	2001      	movs	r0, #1
 800ce6a:	f001 fb41 	bl	800e4f0 <__kernel_sinf>
 800ce6e:	e7d3      	b.n	800ce18 <cosf+0x28>
 800ce70:	3f490fd8 	.word	0x3f490fd8
 800ce74:	00000000 	.word	0x00000000

0800ce78 <sinf>:
 800ce78:	ee10 3a10 	vmov	r3, s0
 800ce7c:	b507      	push	{r0, r1, r2, lr}
 800ce7e:	4a1f      	ldr	r2, [pc, #124]	; (800cefc <sinf+0x84>)
 800ce80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ce84:	4293      	cmp	r3, r2
 800ce86:	dc07      	bgt.n	800ce98 <sinf+0x20>
 800ce88:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800cf00 <sinf+0x88>
 800ce8c:	2000      	movs	r0, #0
 800ce8e:	b003      	add	sp, #12
 800ce90:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce94:	f001 bb2c 	b.w	800e4f0 <__kernel_sinf>
 800ce98:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ce9c:	db04      	blt.n	800cea8 <sinf+0x30>
 800ce9e:	ee30 0a40 	vsub.f32	s0, s0, s0
 800cea2:	b003      	add	sp, #12
 800cea4:	f85d fb04 	ldr.w	pc, [sp], #4
 800cea8:	4668      	mov	r0, sp
 800ceaa:	f000 fa39 	bl	800d320 <__ieee754_rem_pio2f>
 800ceae:	f000 0003 	and.w	r0, r0, #3
 800ceb2:	2801      	cmp	r0, #1
 800ceb4:	d00a      	beq.n	800cecc <sinf+0x54>
 800ceb6:	2802      	cmp	r0, #2
 800ceb8:	d00f      	beq.n	800ceda <sinf+0x62>
 800ceba:	b9c0      	cbnz	r0, 800ceee <sinf+0x76>
 800cebc:	eddd 0a01 	vldr	s1, [sp, #4]
 800cec0:	ed9d 0a00 	vldr	s0, [sp]
 800cec4:	2001      	movs	r0, #1
 800cec6:	f001 fb13 	bl	800e4f0 <__kernel_sinf>
 800ceca:	e7ea      	b.n	800cea2 <sinf+0x2a>
 800cecc:	eddd 0a01 	vldr	s1, [sp, #4]
 800ced0:	ed9d 0a00 	vldr	s0, [sp]
 800ced4:	f001 f836 	bl	800df44 <__kernel_cosf>
 800ced8:	e7e3      	b.n	800cea2 <sinf+0x2a>
 800ceda:	eddd 0a01 	vldr	s1, [sp, #4]
 800cede:	ed9d 0a00 	vldr	s0, [sp]
 800cee2:	2001      	movs	r0, #1
 800cee4:	f001 fb04 	bl	800e4f0 <__kernel_sinf>
 800cee8:	eeb1 0a40 	vneg.f32	s0, s0
 800ceec:	e7d9      	b.n	800cea2 <sinf+0x2a>
 800ceee:	eddd 0a01 	vldr	s1, [sp, #4]
 800cef2:	ed9d 0a00 	vldr	s0, [sp]
 800cef6:	f001 f825 	bl	800df44 <__kernel_cosf>
 800cefa:	e7f5      	b.n	800cee8 <sinf+0x70>
 800cefc:	3f490fd8 	.word	0x3f490fd8
	...

0800cf08 <__ieee754_rem_pio2>:
 800cf08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf0c:	ed2d 8b02 	vpush	{d8}
 800cf10:	ec55 4b10 	vmov	r4, r5, d0
 800cf14:	4bca      	ldr	r3, [pc, #808]	; (800d240 <__ieee754_rem_pio2+0x338>)
 800cf16:	b08b      	sub	sp, #44	; 0x2c
 800cf18:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800cf1c:	4598      	cmp	r8, r3
 800cf1e:	4682      	mov	sl, r0
 800cf20:	9502      	str	r5, [sp, #8]
 800cf22:	dc08      	bgt.n	800cf36 <__ieee754_rem_pio2+0x2e>
 800cf24:	2200      	movs	r2, #0
 800cf26:	2300      	movs	r3, #0
 800cf28:	ed80 0b00 	vstr	d0, [r0]
 800cf2c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800cf30:	f04f 0b00 	mov.w	fp, #0
 800cf34:	e028      	b.n	800cf88 <__ieee754_rem_pio2+0x80>
 800cf36:	4bc3      	ldr	r3, [pc, #780]	; (800d244 <__ieee754_rem_pio2+0x33c>)
 800cf38:	4598      	cmp	r8, r3
 800cf3a:	dc78      	bgt.n	800d02e <__ieee754_rem_pio2+0x126>
 800cf3c:	9b02      	ldr	r3, [sp, #8]
 800cf3e:	4ec2      	ldr	r6, [pc, #776]	; (800d248 <__ieee754_rem_pio2+0x340>)
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	ee10 0a10 	vmov	r0, s0
 800cf46:	a3b0      	add	r3, pc, #704	; (adr r3, 800d208 <__ieee754_rem_pio2+0x300>)
 800cf48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf4c:	4629      	mov	r1, r5
 800cf4e:	dd39      	ble.n	800cfc4 <__ieee754_rem_pio2+0xbc>
 800cf50:	f7f3 f94a 	bl	80001e8 <__aeabi_dsub>
 800cf54:	45b0      	cmp	r8, r6
 800cf56:	4604      	mov	r4, r0
 800cf58:	460d      	mov	r5, r1
 800cf5a:	d01b      	beq.n	800cf94 <__ieee754_rem_pio2+0x8c>
 800cf5c:	a3ac      	add	r3, pc, #688	; (adr r3, 800d210 <__ieee754_rem_pio2+0x308>)
 800cf5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf62:	f7f3 f941 	bl	80001e8 <__aeabi_dsub>
 800cf66:	4602      	mov	r2, r0
 800cf68:	460b      	mov	r3, r1
 800cf6a:	e9ca 2300 	strd	r2, r3, [sl]
 800cf6e:	4620      	mov	r0, r4
 800cf70:	4629      	mov	r1, r5
 800cf72:	f7f3 f939 	bl	80001e8 <__aeabi_dsub>
 800cf76:	a3a6      	add	r3, pc, #664	; (adr r3, 800d210 <__ieee754_rem_pio2+0x308>)
 800cf78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf7c:	f7f3 f934 	bl	80001e8 <__aeabi_dsub>
 800cf80:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cf84:	f04f 0b01 	mov.w	fp, #1
 800cf88:	4658      	mov	r0, fp
 800cf8a:	b00b      	add	sp, #44	; 0x2c
 800cf8c:	ecbd 8b02 	vpop	{d8}
 800cf90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf94:	a3a0      	add	r3, pc, #640	; (adr r3, 800d218 <__ieee754_rem_pio2+0x310>)
 800cf96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf9a:	f7f3 f925 	bl	80001e8 <__aeabi_dsub>
 800cf9e:	a3a0      	add	r3, pc, #640	; (adr r3, 800d220 <__ieee754_rem_pio2+0x318>)
 800cfa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa4:	4604      	mov	r4, r0
 800cfa6:	460d      	mov	r5, r1
 800cfa8:	f7f3 f91e 	bl	80001e8 <__aeabi_dsub>
 800cfac:	4602      	mov	r2, r0
 800cfae:	460b      	mov	r3, r1
 800cfb0:	e9ca 2300 	strd	r2, r3, [sl]
 800cfb4:	4620      	mov	r0, r4
 800cfb6:	4629      	mov	r1, r5
 800cfb8:	f7f3 f916 	bl	80001e8 <__aeabi_dsub>
 800cfbc:	a398      	add	r3, pc, #608	; (adr r3, 800d220 <__ieee754_rem_pio2+0x318>)
 800cfbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfc2:	e7db      	b.n	800cf7c <__ieee754_rem_pio2+0x74>
 800cfc4:	f7f3 f912 	bl	80001ec <__adddf3>
 800cfc8:	45b0      	cmp	r8, r6
 800cfca:	4604      	mov	r4, r0
 800cfcc:	460d      	mov	r5, r1
 800cfce:	d016      	beq.n	800cffe <__ieee754_rem_pio2+0xf6>
 800cfd0:	a38f      	add	r3, pc, #572	; (adr r3, 800d210 <__ieee754_rem_pio2+0x308>)
 800cfd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfd6:	f7f3 f909 	bl	80001ec <__adddf3>
 800cfda:	4602      	mov	r2, r0
 800cfdc:	460b      	mov	r3, r1
 800cfde:	e9ca 2300 	strd	r2, r3, [sl]
 800cfe2:	4620      	mov	r0, r4
 800cfe4:	4629      	mov	r1, r5
 800cfe6:	f7f3 f8ff 	bl	80001e8 <__aeabi_dsub>
 800cfea:	a389      	add	r3, pc, #548	; (adr r3, 800d210 <__ieee754_rem_pio2+0x308>)
 800cfec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cff0:	f7f3 f8fc 	bl	80001ec <__adddf3>
 800cff4:	f04f 3bff 	mov.w	fp, #4294967295
 800cff8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cffc:	e7c4      	b.n	800cf88 <__ieee754_rem_pio2+0x80>
 800cffe:	a386      	add	r3, pc, #536	; (adr r3, 800d218 <__ieee754_rem_pio2+0x310>)
 800d000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d004:	f7f3 f8f2 	bl	80001ec <__adddf3>
 800d008:	a385      	add	r3, pc, #532	; (adr r3, 800d220 <__ieee754_rem_pio2+0x318>)
 800d00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d00e:	4604      	mov	r4, r0
 800d010:	460d      	mov	r5, r1
 800d012:	f7f3 f8eb 	bl	80001ec <__adddf3>
 800d016:	4602      	mov	r2, r0
 800d018:	460b      	mov	r3, r1
 800d01a:	e9ca 2300 	strd	r2, r3, [sl]
 800d01e:	4620      	mov	r0, r4
 800d020:	4629      	mov	r1, r5
 800d022:	f7f3 f8e1 	bl	80001e8 <__aeabi_dsub>
 800d026:	a37e      	add	r3, pc, #504	; (adr r3, 800d220 <__ieee754_rem_pio2+0x318>)
 800d028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d02c:	e7e0      	b.n	800cff0 <__ieee754_rem_pio2+0xe8>
 800d02e:	4b87      	ldr	r3, [pc, #540]	; (800d24c <__ieee754_rem_pio2+0x344>)
 800d030:	4598      	cmp	r8, r3
 800d032:	f300 80d9 	bgt.w	800d1e8 <__ieee754_rem_pio2+0x2e0>
 800d036:	f001 faa3 	bl	800e580 <fabs>
 800d03a:	ec55 4b10 	vmov	r4, r5, d0
 800d03e:	ee10 0a10 	vmov	r0, s0
 800d042:	a379      	add	r3, pc, #484	; (adr r3, 800d228 <__ieee754_rem_pio2+0x320>)
 800d044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d048:	4629      	mov	r1, r5
 800d04a:	f7f3 fa85 	bl	8000558 <__aeabi_dmul>
 800d04e:	4b80      	ldr	r3, [pc, #512]	; (800d250 <__ieee754_rem_pio2+0x348>)
 800d050:	2200      	movs	r2, #0
 800d052:	f7f3 f8cb 	bl	80001ec <__adddf3>
 800d056:	f7f3 fd19 	bl	8000a8c <__aeabi_d2iz>
 800d05a:	4683      	mov	fp, r0
 800d05c:	f7f3 fa12 	bl	8000484 <__aeabi_i2d>
 800d060:	4602      	mov	r2, r0
 800d062:	460b      	mov	r3, r1
 800d064:	ec43 2b18 	vmov	d8, r2, r3
 800d068:	a367      	add	r3, pc, #412	; (adr r3, 800d208 <__ieee754_rem_pio2+0x300>)
 800d06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d06e:	f7f3 fa73 	bl	8000558 <__aeabi_dmul>
 800d072:	4602      	mov	r2, r0
 800d074:	460b      	mov	r3, r1
 800d076:	4620      	mov	r0, r4
 800d078:	4629      	mov	r1, r5
 800d07a:	f7f3 f8b5 	bl	80001e8 <__aeabi_dsub>
 800d07e:	a364      	add	r3, pc, #400	; (adr r3, 800d210 <__ieee754_rem_pio2+0x308>)
 800d080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d084:	4606      	mov	r6, r0
 800d086:	460f      	mov	r7, r1
 800d088:	ec51 0b18 	vmov	r0, r1, d8
 800d08c:	f7f3 fa64 	bl	8000558 <__aeabi_dmul>
 800d090:	f1bb 0f1f 	cmp.w	fp, #31
 800d094:	4604      	mov	r4, r0
 800d096:	460d      	mov	r5, r1
 800d098:	dc0d      	bgt.n	800d0b6 <__ieee754_rem_pio2+0x1ae>
 800d09a:	4b6e      	ldr	r3, [pc, #440]	; (800d254 <__ieee754_rem_pio2+0x34c>)
 800d09c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800d0a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0a4:	4543      	cmp	r3, r8
 800d0a6:	d006      	beq.n	800d0b6 <__ieee754_rem_pio2+0x1ae>
 800d0a8:	4622      	mov	r2, r4
 800d0aa:	462b      	mov	r3, r5
 800d0ac:	4630      	mov	r0, r6
 800d0ae:	4639      	mov	r1, r7
 800d0b0:	f7f3 f89a 	bl	80001e8 <__aeabi_dsub>
 800d0b4:	e00f      	b.n	800d0d6 <__ieee754_rem_pio2+0x1ce>
 800d0b6:	462b      	mov	r3, r5
 800d0b8:	4622      	mov	r2, r4
 800d0ba:	4630      	mov	r0, r6
 800d0bc:	4639      	mov	r1, r7
 800d0be:	f7f3 f893 	bl	80001e8 <__aeabi_dsub>
 800d0c2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d0c6:	9303      	str	r3, [sp, #12]
 800d0c8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d0cc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800d0d0:	f1b8 0f10 	cmp.w	r8, #16
 800d0d4:	dc02      	bgt.n	800d0dc <__ieee754_rem_pio2+0x1d4>
 800d0d6:	e9ca 0100 	strd	r0, r1, [sl]
 800d0da:	e039      	b.n	800d150 <__ieee754_rem_pio2+0x248>
 800d0dc:	a34e      	add	r3, pc, #312	; (adr r3, 800d218 <__ieee754_rem_pio2+0x310>)
 800d0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0e2:	ec51 0b18 	vmov	r0, r1, d8
 800d0e6:	f7f3 fa37 	bl	8000558 <__aeabi_dmul>
 800d0ea:	4604      	mov	r4, r0
 800d0ec:	460d      	mov	r5, r1
 800d0ee:	4602      	mov	r2, r0
 800d0f0:	460b      	mov	r3, r1
 800d0f2:	4630      	mov	r0, r6
 800d0f4:	4639      	mov	r1, r7
 800d0f6:	f7f3 f877 	bl	80001e8 <__aeabi_dsub>
 800d0fa:	4602      	mov	r2, r0
 800d0fc:	460b      	mov	r3, r1
 800d0fe:	4680      	mov	r8, r0
 800d100:	4689      	mov	r9, r1
 800d102:	4630      	mov	r0, r6
 800d104:	4639      	mov	r1, r7
 800d106:	f7f3 f86f 	bl	80001e8 <__aeabi_dsub>
 800d10a:	4622      	mov	r2, r4
 800d10c:	462b      	mov	r3, r5
 800d10e:	f7f3 f86b 	bl	80001e8 <__aeabi_dsub>
 800d112:	a343      	add	r3, pc, #268	; (adr r3, 800d220 <__ieee754_rem_pio2+0x318>)
 800d114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d118:	4604      	mov	r4, r0
 800d11a:	460d      	mov	r5, r1
 800d11c:	ec51 0b18 	vmov	r0, r1, d8
 800d120:	f7f3 fa1a 	bl	8000558 <__aeabi_dmul>
 800d124:	4622      	mov	r2, r4
 800d126:	462b      	mov	r3, r5
 800d128:	f7f3 f85e 	bl	80001e8 <__aeabi_dsub>
 800d12c:	4602      	mov	r2, r0
 800d12e:	460b      	mov	r3, r1
 800d130:	4604      	mov	r4, r0
 800d132:	460d      	mov	r5, r1
 800d134:	4640      	mov	r0, r8
 800d136:	4649      	mov	r1, r9
 800d138:	f7f3 f856 	bl	80001e8 <__aeabi_dsub>
 800d13c:	9a03      	ldr	r2, [sp, #12]
 800d13e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d142:	1ad3      	subs	r3, r2, r3
 800d144:	2b31      	cmp	r3, #49	; 0x31
 800d146:	dc24      	bgt.n	800d192 <__ieee754_rem_pio2+0x28a>
 800d148:	e9ca 0100 	strd	r0, r1, [sl]
 800d14c:	4646      	mov	r6, r8
 800d14e:	464f      	mov	r7, r9
 800d150:	e9da 8900 	ldrd	r8, r9, [sl]
 800d154:	4630      	mov	r0, r6
 800d156:	4642      	mov	r2, r8
 800d158:	464b      	mov	r3, r9
 800d15a:	4639      	mov	r1, r7
 800d15c:	f7f3 f844 	bl	80001e8 <__aeabi_dsub>
 800d160:	462b      	mov	r3, r5
 800d162:	4622      	mov	r2, r4
 800d164:	f7f3 f840 	bl	80001e8 <__aeabi_dsub>
 800d168:	9b02      	ldr	r3, [sp, #8]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d170:	f6bf af0a 	bge.w	800cf88 <__ieee754_rem_pio2+0x80>
 800d174:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d178:	f8ca 3004 	str.w	r3, [sl, #4]
 800d17c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d180:	f8ca 8000 	str.w	r8, [sl]
 800d184:	f8ca 0008 	str.w	r0, [sl, #8]
 800d188:	f8ca 300c 	str.w	r3, [sl, #12]
 800d18c:	f1cb 0b00 	rsb	fp, fp, #0
 800d190:	e6fa      	b.n	800cf88 <__ieee754_rem_pio2+0x80>
 800d192:	a327      	add	r3, pc, #156	; (adr r3, 800d230 <__ieee754_rem_pio2+0x328>)
 800d194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d198:	ec51 0b18 	vmov	r0, r1, d8
 800d19c:	f7f3 f9dc 	bl	8000558 <__aeabi_dmul>
 800d1a0:	4604      	mov	r4, r0
 800d1a2:	460d      	mov	r5, r1
 800d1a4:	4602      	mov	r2, r0
 800d1a6:	460b      	mov	r3, r1
 800d1a8:	4640      	mov	r0, r8
 800d1aa:	4649      	mov	r1, r9
 800d1ac:	f7f3 f81c 	bl	80001e8 <__aeabi_dsub>
 800d1b0:	4602      	mov	r2, r0
 800d1b2:	460b      	mov	r3, r1
 800d1b4:	4606      	mov	r6, r0
 800d1b6:	460f      	mov	r7, r1
 800d1b8:	4640      	mov	r0, r8
 800d1ba:	4649      	mov	r1, r9
 800d1bc:	f7f3 f814 	bl	80001e8 <__aeabi_dsub>
 800d1c0:	4622      	mov	r2, r4
 800d1c2:	462b      	mov	r3, r5
 800d1c4:	f7f3 f810 	bl	80001e8 <__aeabi_dsub>
 800d1c8:	a31b      	add	r3, pc, #108	; (adr r3, 800d238 <__ieee754_rem_pio2+0x330>)
 800d1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ce:	4604      	mov	r4, r0
 800d1d0:	460d      	mov	r5, r1
 800d1d2:	ec51 0b18 	vmov	r0, r1, d8
 800d1d6:	f7f3 f9bf 	bl	8000558 <__aeabi_dmul>
 800d1da:	4622      	mov	r2, r4
 800d1dc:	462b      	mov	r3, r5
 800d1de:	f7f3 f803 	bl	80001e8 <__aeabi_dsub>
 800d1e2:	4604      	mov	r4, r0
 800d1e4:	460d      	mov	r5, r1
 800d1e6:	e75f      	b.n	800d0a8 <__ieee754_rem_pio2+0x1a0>
 800d1e8:	4b1b      	ldr	r3, [pc, #108]	; (800d258 <__ieee754_rem_pio2+0x350>)
 800d1ea:	4598      	cmp	r8, r3
 800d1ec:	dd36      	ble.n	800d25c <__ieee754_rem_pio2+0x354>
 800d1ee:	ee10 2a10 	vmov	r2, s0
 800d1f2:	462b      	mov	r3, r5
 800d1f4:	4620      	mov	r0, r4
 800d1f6:	4629      	mov	r1, r5
 800d1f8:	f7f2 fff6 	bl	80001e8 <__aeabi_dsub>
 800d1fc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d200:	e9ca 0100 	strd	r0, r1, [sl]
 800d204:	e694      	b.n	800cf30 <__ieee754_rem_pio2+0x28>
 800d206:	bf00      	nop
 800d208:	54400000 	.word	0x54400000
 800d20c:	3ff921fb 	.word	0x3ff921fb
 800d210:	1a626331 	.word	0x1a626331
 800d214:	3dd0b461 	.word	0x3dd0b461
 800d218:	1a600000 	.word	0x1a600000
 800d21c:	3dd0b461 	.word	0x3dd0b461
 800d220:	2e037073 	.word	0x2e037073
 800d224:	3ba3198a 	.word	0x3ba3198a
 800d228:	6dc9c883 	.word	0x6dc9c883
 800d22c:	3fe45f30 	.word	0x3fe45f30
 800d230:	2e000000 	.word	0x2e000000
 800d234:	3ba3198a 	.word	0x3ba3198a
 800d238:	252049c1 	.word	0x252049c1
 800d23c:	397b839a 	.word	0x397b839a
 800d240:	3fe921fb 	.word	0x3fe921fb
 800d244:	4002d97b 	.word	0x4002d97b
 800d248:	3ff921fb 	.word	0x3ff921fb
 800d24c:	413921fb 	.word	0x413921fb
 800d250:	3fe00000 	.word	0x3fe00000
 800d254:	0800f4a8 	.word	0x0800f4a8
 800d258:	7fefffff 	.word	0x7fefffff
 800d25c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800d260:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800d264:	ee10 0a10 	vmov	r0, s0
 800d268:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800d26c:	ee10 6a10 	vmov	r6, s0
 800d270:	460f      	mov	r7, r1
 800d272:	f7f3 fc0b 	bl	8000a8c <__aeabi_d2iz>
 800d276:	f7f3 f905 	bl	8000484 <__aeabi_i2d>
 800d27a:	4602      	mov	r2, r0
 800d27c:	460b      	mov	r3, r1
 800d27e:	4630      	mov	r0, r6
 800d280:	4639      	mov	r1, r7
 800d282:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d286:	f7f2 ffaf 	bl	80001e8 <__aeabi_dsub>
 800d28a:	4b23      	ldr	r3, [pc, #140]	; (800d318 <__ieee754_rem_pio2+0x410>)
 800d28c:	2200      	movs	r2, #0
 800d28e:	f7f3 f963 	bl	8000558 <__aeabi_dmul>
 800d292:	460f      	mov	r7, r1
 800d294:	4606      	mov	r6, r0
 800d296:	f7f3 fbf9 	bl	8000a8c <__aeabi_d2iz>
 800d29a:	f7f3 f8f3 	bl	8000484 <__aeabi_i2d>
 800d29e:	4602      	mov	r2, r0
 800d2a0:	460b      	mov	r3, r1
 800d2a2:	4630      	mov	r0, r6
 800d2a4:	4639      	mov	r1, r7
 800d2a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d2aa:	f7f2 ff9d 	bl	80001e8 <__aeabi_dsub>
 800d2ae:	4b1a      	ldr	r3, [pc, #104]	; (800d318 <__ieee754_rem_pio2+0x410>)
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	f7f3 f951 	bl	8000558 <__aeabi_dmul>
 800d2b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d2ba:	ad04      	add	r5, sp, #16
 800d2bc:	f04f 0803 	mov.w	r8, #3
 800d2c0:	46a9      	mov	r9, r5
 800d2c2:	2600      	movs	r6, #0
 800d2c4:	2700      	movs	r7, #0
 800d2c6:	4632      	mov	r2, r6
 800d2c8:	463b      	mov	r3, r7
 800d2ca:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800d2ce:	46c3      	mov	fp, r8
 800d2d0:	3d08      	subs	r5, #8
 800d2d2:	f108 38ff 	add.w	r8, r8, #4294967295
 800d2d6:	f7f3 fba7 	bl	8000a28 <__aeabi_dcmpeq>
 800d2da:	2800      	cmp	r0, #0
 800d2dc:	d1f3      	bne.n	800d2c6 <__ieee754_rem_pio2+0x3be>
 800d2de:	4b0f      	ldr	r3, [pc, #60]	; (800d31c <__ieee754_rem_pio2+0x414>)
 800d2e0:	9301      	str	r3, [sp, #4]
 800d2e2:	2302      	movs	r3, #2
 800d2e4:	9300      	str	r3, [sp, #0]
 800d2e6:	4622      	mov	r2, r4
 800d2e8:	465b      	mov	r3, fp
 800d2ea:	4651      	mov	r1, sl
 800d2ec:	4648      	mov	r0, r9
 800d2ee:	f000 fa1b 	bl	800d728 <__kernel_rem_pio2>
 800d2f2:	9b02      	ldr	r3, [sp, #8]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	4683      	mov	fp, r0
 800d2f8:	f6bf ae46 	bge.w	800cf88 <__ieee754_rem_pio2+0x80>
 800d2fc:	e9da 2100 	ldrd	r2, r1, [sl]
 800d300:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d304:	e9ca 2300 	strd	r2, r3, [sl]
 800d308:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800d30c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d310:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800d314:	e73a      	b.n	800d18c <__ieee754_rem_pio2+0x284>
 800d316:	bf00      	nop
 800d318:	41700000 	.word	0x41700000
 800d31c:	0800f528 	.word	0x0800f528

0800d320 <__ieee754_rem_pio2f>:
 800d320:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d322:	ee10 6a10 	vmov	r6, s0
 800d326:	4b8e      	ldr	r3, [pc, #568]	; (800d560 <__ieee754_rem_pio2f+0x240>)
 800d328:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800d32c:	429d      	cmp	r5, r3
 800d32e:	b087      	sub	sp, #28
 800d330:	eef0 7a40 	vmov.f32	s15, s0
 800d334:	4604      	mov	r4, r0
 800d336:	dc05      	bgt.n	800d344 <__ieee754_rem_pio2f+0x24>
 800d338:	2300      	movs	r3, #0
 800d33a:	ed80 0a00 	vstr	s0, [r0]
 800d33e:	6043      	str	r3, [r0, #4]
 800d340:	2000      	movs	r0, #0
 800d342:	e01a      	b.n	800d37a <__ieee754_rem_pio2f+0x5a>
 800d344:	4b87      	ldr	r3, [pc, #540]	; (800d564 <__ieee754_rem_pio2f+0x244>)
 800d346:	429d      	cmp	r5, r3
 800d348:	dc46      	bgt.n	800d3d8 <__ieee754_rem_pio2f+0xb8>
 800d34a:	2e00      	cmp	r6, #0
 800d34c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800d568 <__ieee754_rem_pio2f+0x248>
 800d350:	4b86      	ldr	r3, [pc, #536]	; (800d56c <__ieee754_rem_pio2f+0x24c>)
 800d352:	f025 050f 	bic.w	r5, r5, #15
 800d356:	dd1f      	ble.n	800d398 <__ieee754_rem_pio2f+0x78>
 800d358:	429d      	cmp	r5, r3
 800d35a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800d35e:	d00e      	beq.n	800d37e <__ieee754_rem_pio2f+0x5e>
 800d360:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800d570 <__ieee754_rem_pio2f+0x250>
 800d364:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800d368:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800d36c:	ed80 0a00 	vstr	s0, [r0]
 800d370:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d374:	2001      	movs	r0, #1
 800d376:	edc4 7a01 	vstr	s15, [r4, #4]
 800d37a:	b007      	add	sp, #28
 800d37c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d37e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800d574 <__ieee754_rem_pio2f+0x254>
 800d382:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800d578 <__ieee754_rem_pio2f+0x258>
 800d386:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800d38a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800d38e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d392:	edc0 6a00 	vstr	s13, [r0]
 800d396:	e7eb      	b.n	800d370 <__ieee754_rem_pio2f+0x50>
 800d398:	429d      	cmp	r5, r3
 800d39a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d39e:	d00e      	beq.n	800d3be <__ieee754_rem_pio2f+0x9e>
 800d3a0:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800d570 <__ieee754_rem_pio2f+0x250>
 800d3a4:	ee37 0a87 	vadd.f32	s0, s15, s14
 800d3a8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800d3ac:	ed80 0a00 	vstr	s0, [r0]
 800d3b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d3b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d3b8:	edc4 7a01 	vstr	s15, [r4, #4]
 800d3bc:	e7dd      	b.n	800d37a <__ieee754_rem_pio2f+0x5a>
 800d3be:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800d574 <__ieee754_rem_pio2f+0x254>
 800d3c2:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800d578 <__ieee754_rem_pio2f+0x258>
 800d3c6:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d3ca:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d3ce:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d3d2:	edc0 6a00 	vstr	s13, [r0]
 800d3d6:	e7eb      	b.n	800d3b0 <__ieee754_rem_pio2f+0x90>
 800d3d8:	4b68      	ldr	r3, [pc, #416]	; (800d57c <__ieee754_rem_pio2f+0x25c>)
 800d3da:	429d      	cmp	r5, r3
 800d3dc:	dc72      	bgt.n	800d4c4 <__ieee754_rem_pio2f+0x1a4>
 800d3de:	f001 f9e1 	bl	800e7a4 <fabsf>
 800d3e2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800d580 <__ieee754_rem_pio2f+0x260>
 800d3e6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d3ea:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d3ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d3f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d3f6:	ee17 0a90 	vmov	r0, s15
 800d3fa:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800d568 <__ieee754_rem_pio2f+0x248>
 800d3fe:	eea7 0a67 	vfms.f32	s0, s14, s15
 800d402:	281f      	cmp	r0, #31
 800d404:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800d570 <__ieee754_rem_pio2f+0x250>
 800d408:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d40c:	eeb1 6a47 	vneg.f32	s12, s14
 800d410:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d414:	ee16 2a90 	vmov	r2, s13
 800d418:	dc1c      	bgt.n	800d454 <__ieee754_rem_pio2f+0x134>
 800d41a:	495a      	ldr	r1, [pc, #360]	; (800d584 <__ieee754_rem_pio2f+0x264>)
 800d41c:	1e47      	subs	r7, r0, #1
 800d41e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800d422:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800d426:	428b      	cmp	r3, r1
 800d428:	d014      	beq.n	800d454 <__ieee754_rem_pio2f+0x134>
 800d42a:	6022      	str	r2, [r4, #0]
 800d42c:	ed94 7a00 	vldr	s14, [r4]
 800d430:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d434:	2e00      	cmp	r6, #0
 800d436:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d43a:	ed84 0a01 	vstr	s0, [r4, #4]
 800d43e:	da9c      	bge.n	800d37a <__ieee754_rem_pio2f+0x5a>
 800d440:	eeb1 7a47 	vneg.f32	s14, s14
 800d444:	eeb1 0a40 	vneg.f32	s0, s0
 800d448:	ed84 7a00 	vstr	s14, [r4]
 800d44c:	ed84 0a01 	vstr	s0, [r4, #4]
 800d450:	4240      	negs	r0, r0
 800d452:	e792      	b.n	800d37a <__ieee754_rem_pio2f+0x5a>
 800d454:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800d458:	15eb      	asrs	r3, r5, #23
 800d45a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800d45e:	2d08      	cmp	r5, #8
 800d460:	dde3      	ble.n	800d42a <__ieee754_rem_pio2f+0x10a>
 800d462:	eddf 7a44 	vldr	s15, [pc, #272]	; 800d574 <__ieee754_rem_pio2f+0x254>
 800d466:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d578 <__ieee754_rem_pio2f+0x258>
 800d46a:	eef0 6a40 	vmov.f32	s13, s0
 800d46e:	eee6 6a27 	vfma.f32	s13, s12, s15
 800d472:	ee30 0a66 	vsub.f32	s0, s0, s13
 800d476:	eea6 0a27 	vfma.f32	s0, s12, s15
 800d47a:	eef0 7a40 	vmov.f32	s15, s0
 800d47e:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800d482:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800d486:	ee15 2a90 	vmov	r2, s11
 800d48a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800d48e:	1a5b      	subs	r3, r3, r1
 800d490:	2b19      	cmp	r3, #25
 800d492:	dc04      	bgt.n	800d49e <__ieee754_rem_pio2f+0x17e>
 800d494:	edc4 5a00 	vstr	s11, [r4]
 800d498:	eeb0 0a66 	vmov.f32	s0, s13
 800d49c:	e7c6      	b.n	800d42c <__ieee754_rem_pio2f+0x10c>
 800d49e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800d588 <__ieee754_rem_pio2f+0x268>
 800d4a2:	eeb0 0a66 	vmov.f32	s0, s13
 800d4a6:	eea6 0a25 	vfma.f32	s0, s12, s11
 800d4aa:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800d4ae:	eddf 6a37 	vldr	s13, [pc, #220]	; 800d58c <__ieee754_rem_pio2f+0x26c>
 800d4b2:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d4b6:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800d4ba:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d4be:	ed84 7a00 	vstr	s14, [r4]
 800d4c2:	e7b3      	b.n	800d42c <__ieee754_rem_pio2f+0x10c>
 800d4c4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800d4c8:	db06      	blt.n	800d4d8 <__ieee754_rem_pio2f+0x1b8>
 800d4ca:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d4ce:	edc0 7a01 	vstr	s15, [r0, #4]
 800d4d2:	edc0 7a00 	vstr	s15, [r0]
 800d4d6:	e733      	b.n	800d340 <__ieee754_rem_pio2f+0x20>
 800d4d8:	15ea      	asrs	r2, r5, #23
 800d4da:	3a86      	subs	r2, #134	; 0x86
 800d4dc:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800d4e0:	ee07 3a90 	vmov	s15, r3
 800d4e4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d4e8:	eddf 6a29 	vldr	s13, [pc, #164]	; 800d590 <__ieee754_rem_pio2f+0x270>
 800d4ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d4f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d4f4:	ed8d 7a03 	vstr	s14, [sp, #12]
 800d4f8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d4fc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d500:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d504:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d508:	ed8d 7a04 	vstr	s14, [sp, #16]
 800d50c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d510:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d518:	edcd 7a05 	vstr	s15, [sp, #20]
 800d51c:	d11e      	bne.n	800d55c <__ieee754_rem_pio2f+0x23c>
 800d51e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800d522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d526:	bf14      	ite	ne
 800d528:	2302      	movne	r3, #2
 800d52a:	2301      	moveq	r3, #1
 800d52c:	4919      	ldr	r1, [pc, #100]	; (800d594 <__ieee754_rem_pio2f+0x274>)
 800d52e:	9101      	str	r1, [sp, #4]
 800d530:	2102      	movs	r1, #2
 800d532:	9100      	str	r1, [sp, #0]
 800d534:	a803      	add	r0, sp, #12
 800d536:	4621      	mov	r1, r4
 800d538:	f000 fd64 	bl	800e004 <__kernel_rem_pio2f>
 800d53c:	2e00      	cmp	r6, #0
 800d53e:	f6bf af1c 	bge.w	800d37a <__ieee754_rem_pio2f+0x5a>
 800d542:	edd4 7a00 	vldr	s15, [r4]
 800d546:	eef1 7a67 	vneg.f32	s15, s15
 800d54a:	edc4 7a00 	vstr	s15, [r4]
 800d54e:	edd4 7a01 	vldr	s15, [r4, #4]
 800d552:	eef1 7a67 	vneg.f32	s15, s15
 800d556:	edc4 7a01 	vstr	s15, [r4, #4]
 800d55a:	e779      	b.n	800d450 <__ieee754_rem_pio2f+0x130>
 800d55c:	2303      	movs	r3, #3
 800d55e:	e7e5      	b.n	800d52c <__ieee754_rem_pio2f+0x20c>
 800d560:	3f490fd8 	.word	0x3f490fd8
 800d564:	4016cbe3 	.word	0x4016cbe3
 800d568:	3fc90f80 	.word	0x3fc90f80
 800d56c:	3fc90fd0 	.word	0x3fc90fd0
 800d570:	37354443 	.word	0x37354443
 800d574:	37354400 	.word	0x37354400
 800d578:	2e85a308 	.word	0x2e85a308
 800d57c:	43490f80 	.word	0x43490f80
 800d580:	3f22f984 	.word	0x3f22f984
 800d584:	0800f630 	.word	0x0800f630
 800d588:	2e85a300 	.word	0x2e85a300
 800d58c:	248d3132 	.word	0x248d3132
 800d590:	43800000 	.word	0x43800000
 800d594:	0800f6b0 	.word	0x0800f6b0

0800d598 <__kernel_cos>:
 800d598:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d59c:	ec57 6b10 	vmov	r6, r7, d0
 800d5a0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800d5a4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800d5a8:	ed8d 1b00 	vstr	d1, [sp]
 800d5ac:	da07      	bge.n	800d5be <__kernel_cos+0x26>
 800d5ae:	ee10 0a10 	vmov	r0, s0
 800d5b2:	4639      	mov	r1, r7
 800d5b4:	f7f3 fa6a 	bl	8000a8c <__aeabi_d2iz>
 800d5b8:	2800      	cmp	r0, #0
 800d5ba:	f000 8088 	beq.w	800d6ce <__kernel_cos+0x136>
 800d5be:	4632      	mov	r2, r6
 800d5c0:	463b      	mov	r3, r7
 800d5c2:	4630      	mov	r0, r6
 800d5c4:	4639      	mov	r1, r7
 800d5c6:	f7f2 ffc7 	bl	8000558 <__aeabi_dmul>
 800d5ca:	4b51      	ldr	r3, [pc, #324]	; (800d710 <__kernel_cos+0x178>)
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	4604      	mov	r4, r0
 800d5d0:	460d      	mov	r5, r1
 800d5d2:	f7f2 ffc1 	bl	8000558 <__aeabi_dmul>
 800d5d6:	a340      	add	r3, pc, #256	; (adr r3, 800d6d8 <__kernel_cos+0x140>)
 800d5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5dc:	4682      	mov	sl, r0
 800d5de:	468b      	mov	fp, r1
 800d5e0:	4620      	mov	r0, r4
 800d5e2:	4629      	mov	r1, r5
 800d5e4:	f7f2 ffb8 	bl	8000558 <__aeabi_dmul>
 800d5e8:	a33d      	add	r3, pc, #244	; (adr r3, 800d6e0 <__kernel_cos+0x148>)
 800d5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ee:	f7f2 fdfd 	bl	80001ec <__adddf3>
 800d5f2:	4622      	mov	r2, r4
 800d5f4:	462b      	mov	r3, r5
 800d5f6:	f7f2 ffaf 	bl	8000558 <__aeabi_dmul>
 800d5fa:	a33b      	add	r3, pc, #236	; (adr r3, 800d6e8 <__kernel_cos+0x150>)
 800d5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d600:	f7f2 fdf2 	bl	80001e8 <__aeabi_dsub>
 800d604:	4622      	mov	r2, r4
 800d606:	462b      	mov	r3, r5
 800d608:	f7f2 ffa6 	bl	8000558 <__aeabi_dmul>
 800d60c:	a338      	add	r3, pc, #224	; (adr r3, 800d6f0 <__kernel_cos+0x158>)
 800d60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d612:	f7f2 fdeb 	bl	80001ec <__adddf3>
 800d616:	4622      	mov	r2, r4
 800d618:	462b      	mov	r3, r5
 800d61a:	f7f2 ff9d 	bl	8000558 <__aeabi_dmul>
 800d61e:	a336      	add	r3, pc, #216	; (adr r3, 800d6f8 <__kernel_cos+0x160>)
 800d620:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d624:	f7f2 fde0 	bl	80001e8 <__aeabi_dsub>
 800d628:	4622      	mov	r2, r4
 800d62a:	462b      	mov	r3, r5
 800d62c:	f7f2 ff94 	bl	8000558 <__aeabi_dmul>
 800d630:	a333      	add	r3, pc, #204	; (adr r3, 800d700 <__kernel_cos+0x168>)
 800d632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d636:	f7f2 fdd9 	bl	80001ec <__adddf3>
 800d63a:	4622      	mov	r2, r4
 800d63c:	462b      	mov	r3, r5
 800d63e:	f7f2 ff8b 	bl	8000558 <__aeabi_dmul>
 800d642:	4622      	mov	r2, r4
 800d644:	462b      	mov	r3, r5
 800d646:	f7f2 ff87 	bl	8000558 <__aeabi_dmul>
 800d64a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d64e:	4604      	mov	r4, r0
 800d650:	460d      	mov	r5, r1
 800d652:	4630      	mov	r0, r6
 800d654:	4639      	mov	r1, r7
 800d656:	f7f2 ff7f 	bl	8000558 <__aeabi_dmul>
 800d65a:	460b      	mov	r3, r1
 800d65c:	4602      	mov	r2, r0
 800d65e:	4629      	mov	r1, r5
 800d660:	4620      	mov	r0, r4
 800d662:	f7f2 fdc1 	bl	80001e8 <__aeabi_dsub>
 800d666:	4b2b      	ldr	r3, [pc, #172]	; (800d714 <__kernel_cos+0x17c>)
 800d668:	4598      	cmp	r8, r3
 800d66a:	4606      	mov	r6, r0
 800d66c:	460f      	mov	r7, r1
 800d66e:	dc10      	bgt.n	800d692 <__kernel_cos+0xfa>
 800d670:	4602      	mov	r2, r0
 800d672:	460b      	mov	r3, r1
 800d674:	4650      	mov	r0, sl
 800d676:	4659      	mov	r1, fp
 800d678:	f7f2 fdb6 	bl	80001e8 <__aeabi_dsub>
 800d67c:	460b      	mov	r3, r1
 800d67e:	4926      	ldr	r1, [pc, #152]	; (800d718 <__kernel_cos+0x180>)
 800d680:	4602      	mov	r2, r0
 800d682:	2000      	movs	r0, #0
 800d684:	f7f2 fdb0 	bl	80001e8 <__aeabi_dsub>
 800d688:	ec41 0b10 	vmov	d0, r0, r1
 800d68c:	b003      	add	sp, #12
 800d68e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d692:	4b22      	ldr	r3, [pc, #136]	; (800d71c <__kernel_cos+0x184>)
 800d694:	4920      	ldr	r1, [pc, #128]	; (800d718 <__kernel_cos+0x180>)
 800d696:	4598      	cmp	r8, r3
 800d698:	bfcc      	ite	gt
 800d69a:	4d21      	ldrgt	r5, [pc, #132]	; (800d720 <__kernel_cos+0x188>)
 800d69c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800d6a0:	2400      	movs	r4, #0
 800d6a2:	4622      	mov	r2, r4
 800d6a4:	462b      	mov	r3, r5
 800d6a6:	2000      	movs	r0, #0
 800d6a8:	f7f2 fd9e 	bl	80001e8 <__aeabi_dsub>
 800d6ac:	4622      	mov	r2, r4
 800d6ae:	4680      	mov	r8, r0
 800d6b0:	4689      	mov	r9, r1
 800d6b2:	462b      	mov	r3, r5
 800d6b4:	4650      	mov	r0, sl
 800d6b6:	4659      	mov	r1, fp
 800d6b8:	f7f2 fd96 	bl	80001e8 <__aeabi_dsub>
 800d6bc:	4632      	mov	r2, r6
 800d6be:	463b      	mov	r3, r7
 800d6c0:	f7f2 fd92 	bl	80001e8 <__aeabi_dsub>
 800d6c4:	4602      	mov	r2, r0
 800d6c6:	460b      	mov	r3, r1
 800d6c8:	4640      	mov	r0, r8
 800d6ca:	4649      	mov	r1, r9
 800d6cc:	e7da      	b.n	800d684 <__kernel_cos+0xec>
 800d6ce:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800d708 <__kernel_cos+0x170>
 800d6d2:	e7db      	b.n	800d68c <__kernel_cos+0xf4>
 800d6d4:	f3af 8000 	nop.w
 800d6d8:	be8838d4 	.word	0xbe8838d4
 800d6dc:	bda8fae9 	.word	0xbda8fae9
 800d6e0:	bdb4b1c4 	.word	0xbdb4b1c4
 800d6e4:	3e21ee9e 	.word	0x3e21ee9e
 800d6e8:	809c52ad 	.word	0x809c52ad
 800d6ec:	3e927e4f 	.word	0x3e927e4f
 800d6f0:	19cb1590 	.word	0x19cb1590
 800d6f4:	3efa01a0 	.word	0x3efa01a0
 800d6f8:	16c15177 	.word	0x16c15177
 800d6fc:	3f56c16c 	.word	0x3f56c16c
 800d700:	5555554c 	.word	0x5555554c
 800d704:	3fa55555 	.word	0x3fa55555
 800d708:	00000000 	.word	0x00000000
 800d70c:	3ff00000 	.word	0x3ff00000
 800d710:	3fe00000 	.word	0x3fe00000
 800d714:	3fd33332 	.word	0x3fd33332
 800d718:	3ff00000 	.word	0x3ff00000
 800d71c:	3fe90000 	.word	0x3fe90000
 800d720:	3fd20000 	.word	0x3fd20000
 800d724:	00000000 	.word	0x00000000

0800d728 <__kernel_rem_pio2>:
 800d728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d72c:	ed2d 8b02 	vpush	{d8}
 800d730:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800d734:	f112 0f14 	cmn.w	r2, #20
 800d738:	9308      	str	r3, [sp, #32]
 800d73a:	9101      	str	r1, [sp, #4]
 800d73c:	4bc4      	ldr	r3, [pc, #784]	; (800da50 <__kernel_rem_pio2+0x328>)
 800d73e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800d740:	900b      	str	r0, [sp, #44]	; 0x2c
 800d742:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d746:	9302      	str	r3, [sp, #8]
 800d748:	9b08      	ldr	r3, [sp, #32]
 800d74a:	f103 33ff 	add.w	r3, r3, #4294967295
 800d74e:	bfa8      	it	ge
 800d750:	1ed4      	subge	r4, r2, #3
 800d752:	9306      	str	r3, [sp, #24]
 800d754:	bfb2      	itee	lt
 800d756:	2400      	movlt	r4, #0
 800d758:	2318      	movge	r3, #24
 800d75a:	fb94 f4f3 	sdivge	r4, r4, r3
 800d75e:	f06f 0317 	mvn.w	r3, #23
 800d762:	fb04 3303 	mla	r3, r4, r3, r3
 800d766:	eb03 0a02 	add.w	sl, r3, r2
 800d76a:	9b02      	ldr	r3, [sp, #8]
 800d76c:	9a06      	ldr	r2, [sp, #24]
 800d76e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800da40 <__kernel_rem_pio2+0x318>
 800d772:	eb03 0802 	add.w	r8, r3, r2
 800d776:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800d778:	1aa7      	subs	r7, r4, r2
 800d77a:	ae22      	add	r6, sp, #136	; 0x88
 800d77c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d780:	2500      	movs	r5, #0
 800d782:	4545      	cmp	r5, r8
 800d784:	dd13      	ble.n	800d7ae <__kernel_rem_pio2+0x86>
 800d786:	9b08      	ldr	r3, [sp, #32]
 800d788:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800da40 <__kernel_rem_pio2+0x318>
 800d78c:	aa22      	add	r2, sp, #136	; 0x88
 800d78e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d792:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800d796:	f04f 0800 	mov.w	r8, #0
 800d79a:	9b02      	ldr	r3, [sp, #8]
 800d79c:	4598      	cmp	r8, r3
 800d79e:	dc2f      	bgt.n	800d800 <__kernel_rem_pio2+0xd8>
 800d7a0:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d7a4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800d7a8:	462f      	mov	r7, r5
 800d7aa:	2600      	movs	r6, #0
 800d7ac:	e01b      	b.n	800d7e6 <__kernel_rem_pio2+0xbe>
 800d7ae:	42ef      	cmn	r7, r5
 800d7b0:	d407      	bmi.n	800d7c2 <__kernel_rem_pio2+0x9a>
 800d7b2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d7b6:	f7f2 fe65 	bl	8000484 <__aeabi_i2d>
 800d7ba:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d7be:	3501      	adds	r5, #1
 800d7c0:	e7df      	b.n	800d782 <__kernel_rem_pio2+0x5a>
 800d7c2:	ec51 0b18 	vmov	r0, r1, d8
 800d7c6:	e7f8      	b.n	800d7ba <__kernel_rem_pio2+0x92>
 800d7c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d7cc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d7d0:	f7f2 fec2 	bl	8000558 <__aeabi_dmul>
 800d7d4:	4602      	mov	r2, r0
 800d7d6:	460b      	mov	r3, r1
 800d7d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d7dc:	f7f2 fd06 	bl	80001ec <__adddf3>
 800d7e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d7e4:	3601      	adds	r6, #1
 800d7e6:	9b06      	ldr	r3, [sp, #24]
 800d7e8:	429e      	cmp	r6, r3
 800d7ea:	f1a7 0708 	sub.w	r7, r7, #8
 800d7ee:	ddeb      	ble.n	800d7c8 <__kernel_rem_pio2+0xa0>
 800d7f0:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d7f4:	f108 0801 	add.w	r8, r8, #1
 800d7f8:	ecab 7b02 	vstmia	fp!, {d7}
 800d7fc:	3508      	adds	r5, #8
 800d7fe:	e7cc      	b.n	800d79a <__kernel_rem_pio2+0x72>
 800d800:	9b02      	ldr	r3, [sp, #8]
 800d802:	aa0e      	add	r2, sp, #56	; 0x38
 800d804:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d808:	930d      	str	r3, [sp, #52]	; 0x34
 800d80a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800d80c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d810:	9c02      	ldr	r4, [sp, #8]
 800d812:	930c      	str	r3, [sp, #48]	; 0x30
 800d814:	00e3      	lsls	r3, r4, #3
 800d816:	930a      	str	r3, [sp, #40]	; 0x28
 800d818:	ab9a      	add	r3, sp, #616	; 0x268
 800d81a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d81e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800d822:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800d826:	ab72      	add	r3, sp, #456	; 0x1c8
 800d828:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800d82c:	46c3      	mov	fp, r8
 800d82e:	46a1      	mov	r9, r4
 800d830:	f1b9 0f00 	cmp.w	r9, #0
 800d834:	f1a5 0508 	sub.w	r5, r5, #8
 800d838:	dc77      	bgt.n	800d92a <__kernel_rem_pio2+0x202>
 800d83a:	ec47 6b10 	vmov	d0, r6, r7
 800d83e:	4650      	mov	r0, sl
 800d840:	f000 ff2a 	bl	800e698 <scalbn>
 800d844:	ec57 6b10 	vmov	r6, r7, d0
 800d848:	2200      	movs	r2, #0
 800d84a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d84e:	ee10 0a10 	vmov	r0, s0
 800d852:	4639      	mov	r1, r7
 800d854:	f7f2 fe80 	bl	8000558 <__aeabi_dmul>
 800d858:	ec41 0b10 	vmov	d0, r0, r1
 800d85c:	f000 fe9c 	bl	800e598 <floor>
 800d860:	4b7c      	ldr	r3, [pc, #496]	; (800da54 <__kernel_rem_pio2+0x32c>)
 800d862:	ec51 0b10 	vmov	r0, r1, d0
 800d866:	2200      	movs	r2, #0
 800d868:	f7f2 fe76 	bl	8000558 <__aeabi_dmul>
 800d86c:	4602      	mov	r2, r0
 800d86e:	460b      	mov	r3, r1
 800d870:	4630      	mov	r0, r6
 800d872:	4639      	mov	r1, r7
 800d874:	f7f2 fcb8 	bl	80001e8 <__aeabi_dsub>
 800d878:	460f      	mov	r7, r1
 800d87a:	4606      	mov	r6, r0
 800d87c:	f7f3 f906 	bl	8000a8c <__aeabi_d2iz>
 800d880:	9004      	str	r0, [sp, #16]
 800d882:	f7f2 fdff 	bl	8000484 <__aeabi_i2d>
 800d886:	4602      	mov	r2, r0
 800d888:	460b      	mov	r3, r1
 800d88a:	4630      	mov	r0, r6
 800d88c:	4639      	mov	r1, r7
 800d88e:	f7f2 fcab 	bl	80001e8 <__aeabi_dsub>
 800d892:	f1ba 0f00 	cmp.w	sl, #0
 800d896:	4606      	mov	r6, r0
 800d898:	460f      	mov	r7, r1
 800d89a:	dd6d      	ble.n	800d978 <__kernel_rem_pio2+0x250>
 800d89c:	1e62      	subs	r2, r4, #1
 800d89e:	ab0e      	add	r3, sp, #56	; 0x38
 800d8a0:	9d04      	ldr	r5, [sp, #16]
 800d8a2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d8a6:	f1ca 0118 	rsb	r1, sl, #24
 800d8aa:	fa40 f301 	asr.w	r3, r0, r1
 800d8ae:	441d      	add	r5, r3
 800d8b0:	408b      	lsls	r3, r1
 800d8b2:	1ac0      	subs	r0, r0, r3
 800d8b4:	ab0e      	add	r3, sp, #56	; 0x38
 800d8b6:	9504      	str	r5, [sp, #16]
 800d8b8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800d8bc:	f1ca 0317 	rsb	r3, sl, #23
 800d8c0:	fa40 fb03 	asr.w	fp, r0, r3
 800d8c4:	f1bb 0f00 	cmp.w	fp, #0
 800d8c8:	dd65      	ble.n	800d996 <__kernel_rem_pio2+0x26e>
 800d8ca:	9b04      	ldr	r3, [sp, #16]
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	3301      	adds	r3, #1
 800d8d0:	9304      	str	r3, [sp, #16]
 800d8d2:	4615      	mov	r5, r2
 800d8d4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800d8d8:	4294      	cmp	r4, r2
 800d8da:	f300 809c 	bgt.w	800da16 <__kernel_rem_pio2+0x2ee>
 800d8de:	f1ba 0f00 	cmp.w	sl, #0
 800d8e2:	dd07      	ble.n	800d8f4 <__kernel_rem_pio2+0x1cc>
 800d8e4:	f1ba 0f01 	cmp.w	sl, #1
 800d8e8:	f000 80c0 	beq.w	800da6c <__kernel_rem_pio2+0x344>
 800d8ec:	f1ba 0f02 	cmp.w	sl, #2
 800d8f0:	f000 80c6 	beq.w	800da80 <__kernel_rem_pio2+0x358>
 800d8f4:	f1bb 0f02 	cmp.w	fp, #2
 800d8f8:	d14d      	bne.n	800d996 <__kernel_rem_pio2+0x26e>
 800d8fa:	4632      	mov	r2, r6
 800d8fc:	463b      	mov	r3, r7
 800d8fe:	4956      	ldr	r1, [pc, #344]	; (800da58 <__kernel_rem_pio2+0x330>)
 800d900:	2000      	movs	r0, #0
 800d902:	f7f2 fc71 	bl	80001e8 <__aeabi_dsub>
 800d906:	4606      	mov	r6, r0
 800d908:	460f      	mov	r7, r1
 800d90a:	2d00      	cmp	r5, #0
 800d90c:	d043      	beq.n	800d996 <__kernel_rem_pio2+0x26e>
 800d90e:	4650      	mov	r0, sl
 800d910:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800da48 <__kernel_rem_pio2+0x320>
 800d914:	f000 fec0 	bl	800e698 <scalbn>
 800d918:	4630      	mov	r0, r6
 800d91a:	4639      	mov	r1, r7
 800d91c:	ec53 2b10 	vmov	r2, r3, d0
 800d920:	f7f2 fc62 	bl	80001e8 <__aeabi_dsub>
 800d924:	4606      	mov	r6, r0
 800d926:	460f      	mov	r7, r1
 800d928:	e035      	b.n	800d996 <__kernel_rem_pio2+0x26e>
 800d92a:	4b4c      	ldr	r3, [pc, #304]	; (800da5c <__kernel_rem_pio2+0x334>)
 800d92c:	2200      	movs	r2, #0
 800d92e:	4630      	mov	r0, r6
 800d930:	4639      	mov	r1, r7
 800d932:	f7f2 fe11 	bl	8000558 <__aeabi_dmul>
 800d936:	f7f3 f8a9 	bl	8000a8c <__aeabi_d2iz>
 800d93a:	f7f2 fda3 	bl	8000484 <__aeabi_i2d>
 800d93e:	4602      	mov	r2, r0
 800d940:	460b      	mov	r3, r1
 800d942:	ec43 2b18 	vmov	d8, r2, r3
 800d946:	4b46      	ldr	r3, [pc, #280]	; (800da60 <__kernel_rem_pio2+0x338>)
 800d948:	2200      	movs	r2, #0
 800d94a:	f7f2 fe05 	bl	8000558 <__aeabi_dmul>
 800d94e:	4602      	mov	r2, r0
 800d950:	460b      	mov	r3, r1
 800d952:	4630      	mov	r0, r6
 800d954:	4639      	mov	r1, r7
 800d956:	f7f2 fc47 	bl	80001e8 <__aeabi_dsub>
 800d95a:	f7f3 f897 	bl	8000a8c <__aeabi_d2iz>
 800d95e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d962:	f84b 0b04 	str.w	r0, [fp], #4
 800d966:	ec51 0b18 	vmov	r0, r1, d8
 800d96a:	f7f2 fc3f 	bl	80001ec <__adddf3>
 800d96e:	f109 39ff 	add.w	r9, r9, #4294967295
 800d972:	4606      	mov	r6, r0
 800d974:	460f      	mov	r7, r1
 800d976:	e75b      	b.n	800d830 <__kernel_rem_pio2+0x108>
 800d978:	d106      	bne.n	800d988 <__kernel_rem_pio2+0x260>
 800d97a:	1e63      	subs	r3, r4, #1
 800d97c:	aa0e      	add	r2, sp, #56	; 0x38
 800d97e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d982:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800d986:	e79d      	b.n	800d8c4 <__kernel_rem_pio2+0x19c>
 800d988:	4b36      	ldr	r3, [pc, #216]	; (800da64 <__kernel_rem_pio2+0x33c>)
 800d98a:	2200      	movs	r2, #0
 800d98c:	f7f3 f86a 	bl	8000a64 <__aeabi_dcmpge>
 800d990:	2800      	cmp	r0, #0
 800d992:	d13d      	bne.n	800da10 <__kernel_rem_pio2+0x2e8>
 800d994:	4683      	mov	fp, r0
 800d996:	2200      	movs	r2, #0
 800d998:	2300      	movs	r3, #0
 800d99a:	4630      	mov	r0, r6
 800d99c:	4639      	mov	r1, r7
 800d99e:	f7f3 f843 	bl	8000a28 <__aeabi_dcmpeq>
 800d9a2:	2800      	cmp	r0, #0
 800d9a4:	f000 80c0 	beq.w	800db28 <__kernel_rem_pio2+0x400>
 800d9a8:	1e65      	subs	r5, r4, #1
 800d9aa:	462b      	mov	r3, r5
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	9902      	ldr	r1, [sp, #8]
 800d9b0:	428b      	cmp	r3, r1
 800d9b2:	da6c      	bge.n	800da8e <__kernel_rem_pio2+0x366>
 800d9b4:	2a00      	cmp	r2, #0
 800d9b6:	f000 8089 	beq.w	800dacc <__kernel_rem_pio2+0x3a4>
 800d9ba:	ab0e      	add	r3, sp, #56	; 0x38
 800d9bc:	f1aa 0a18 	sub.w	sl, sl, #24
 800d9c0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	f000 80ad 	beq.w	800db24 <__kernel_rem_pio2+0x3fc>
 800d9ca:	4650      	mov	r0, sl
 800d9cc:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800da48 <__kernel_rem_pio2+0x320>
 800d9d0:	f000 fe62 	bl	800e698 <scalbn>
 800d9d4:	ab9a      	add	r3, sp, #616	; 0x268
 800d9d6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d9da:	ec57 6b10 	vmov	r6, r7, d0
 800d9de:	00ec      	lsls	r4, r5, #3
 800d9e0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800d9e4:	46aa      	mov	sl, r5
 800d9e6:	f1ba 0f00 	cmp.w	sl, #0
 800d9ea:	f280 80d6 	bge.w	800db9a <__kernel_rem_pio2+0x472>
 800d9ee:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800da40 <__kernel_rem_pio2+0x318>
 800d9f2:	462e      	mov	r6, r5
 800d9f4:	2e00      	cmp	r6, #0
 800d9f6:	f2c0 8104 	blt.w	800dc02 <__kernel_rem_pio2+0x4da>
 800d9fa:	ab72      	add	r3, sp, #456	; 0x1c8
 800d9fc:	ed8d 8b06 	vstr	d8, [sp, #24]
 800da00:	f8df a064 	ldr.w	sl, [pc, #100]	; 800da68 <__kernel_rem_pio2+0x340>
 800da04:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800da08:	f04f 0800 	mov.w	r8, #0
 800da0c:	1baf      	subs	r7, r5, r6
 800da0e:	e0ea      	b.n	800dbe6 <__kernel_rem_pio2+0x4be>
 800da10:	f04f 0b02 	mov.w	fp, #2
 800da14:	e759      	b.n	800d8ca <__kernel_rem_pio2+0x1a2>
 800da16:	f8d8 3000 	ldr.w	r3, [r8]
 800da1a:	b955      	cbnz	r5, 800da32 <__kernel_rem_pio2+0x30a>
 800da1c:	b123      	cbz	r3, 800da28 <__kernel_rem_pio2+0x300>
 800da1e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800da22:	f8c8 3000 	str.w	r3, [r8]
 800da26:	2301      	movs	r3, #1
 800da28:	3201      	adds	r2, #1
 800da2a:	f108 0804 	add.w	r8, r8, #4
 800da2e:	461d      	mov	r5, r3
 800da30:	e752      	b.n	800d8d8 <__kernel_rem_pio2+0x1b0>
 800da32:	1acb      	subs	r3, r1, r3
 800da34:	f8c8 3000 	str.w	r3, [r8]
 800da38:	462b      	mov	r3, r5
 800da3a:	e7f5      	b.n	800da28 <__kernel_rem_pio2+0x300>
 800da3c:	f3af 8000 	nop.w
	...
 800da4c:	3ff00000 	.word	0x3ff00000
 800da50:	0800fa08 	.word	0x0800fa08
 800da54:	40200000 	.word	0x40200000
 800da58:	3ff00000 	.word	0x3ff00000
 800da5c:	3e700000 	.word	0x3e700000
 800da60:	41700000 	.word	0x41700000
 800da64:	3fe00000 	.word	0x3fe00000
 800da68:	0800f9c8 	.word	0x0800f9c8
 800da6c:	1e62      	subs	r2, r4, #1
 800da6e:	ab0e      	add	r3, sp, #56	; 0x38
 800da70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da74:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800da78:	a90e      	add	r1, sp, #56	; 0x38
 800da7a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800da7e:	e739      	b.n	800d8f4 <__kernel_rem_pio2+0x1cc>
 800da80:	1e62      	subs	r2, r4, #1
 800da82:	ab0e      	add	r3, sp, #56	; 0x38
 800da84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da88:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800da8c:	e7f4      	b.n	800da78 <__kernel_rem_pio2+0x350>
 800da8e:	a90e      	add	r1, sp, #56	; 0x38
 800da90:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800da94:	3b01      	subs	r3, #1
 800da96:	430a      	orrs	r2, r1
 800da98:	e789      	b.n	800d9ae <__kernel_rem_pio2+0x286>
 800da9a:	3301      	adds	r3, #1
 800da9c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800daa0:	2900      	cmp	r1, #0
 800daa2:	d0fa      	beq.n	800da9a <__kernel_rem_pio2+0x372>
 800daa4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800daa6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800daaa:	446a      	add	r2, sp
 800daac:	3a98      	subs	r2, #152	; 0x98
 800daae:	920a      	str	r2, [sp, #40]	; 0x28
 800dab0:	9a08      	ldr	r2, [sp, #32]
 800dab2:	18e3      	adds	r3, r4, r3
 800dab4:	18a5      	adds	r5, r4, r2
 800dab6:	aa22      	add	r2, sp, #136	; 0x88
 800dab8:	f104 0801 	add.w	r8, r4, #1
 800dabc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800dac0:	9304      	str	r3, [sp, #16]
 800dac2:	9b04      	ldr	r3, [sp, #16]
 800dac4:	4543      	cmp	r3, r8
 800dac6:	da04      	bge.n	800dad2 <__kernel_rem_pio2+0x3aa>
 800dac8:	461c      	mov	r4, r3
 800daca:	e6a3      	b.n	800d814 <__kernel_rem_pio2+0xec>
 800dacc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dace:	2301      	movs	r3, #1
 800dad0:	e7e4      	b.n	800da9c <__kernel_rem_pio2+0x374>
 800dad2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dad4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800dad8:	f7f2 fcd4 	bl	8000484 <__aeabi_i2d>
 800dadc:	e8e5 0102 	strd	r0, r1, [r5], #8
 800dae0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dae2:	46ab      	mov	fp, r5
 800dae4:	461c      	mov	r4, r3
 800dae6:	f04f 0900 	mov.w	r9, #0
 800daea:	2600      	movs	r6, #0
 800daec:	2700      	movs	r7, #0
 800daee:	9b06      	ldr	r3, [sp, #24]
 800daf0:	4599      	cmp	r9, r3
 800daf2:	dd06      	ble.n	800db02 <__kernel_rem_pio2+0x3da>
 800daf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800daf6:	e8e3 6702 	strd	r6, r7, [r3], #8
 800dafa:	f108 0801 	add.w	r8, r8, #1
 800dafe:	930a      	str	r3, [sp, #40]	; 0x28
 800db00:	e7df      	b.n	800dac2 <__kernel_rem_pio2+0x39a>
 800db02:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800db06:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800db0a:	f7f2 fd25 	bl	8000558 <__aeabi_dmul>
 800db0e:	4602      	mov	r2, r0
 800db10:	460b      	mov	r3, r1
 800db12:	4630      	mov	r0, r6
 800db14:	4639      	mov	r1, r7
 800db16:	f7f2 fb69 	bl	80001ec <__adddf3>
 800db1a:	f109 0901 	add.w	r9, r9, #1
 800db1e:	4606      	mov	r6, r0
 800db20:	460f      	mov	r7, r1
 800db22:	e7e4      	b.n	800daee <__kernel_rem_pio2+0x3c6>
 800db24:	3d01      	subs	r5, #1
 800db26:	e748      	b.n	800d9ba <__kernel_rem_pio2+0x292>
 800db28:	ec47 6b10 	vmov	d0, r6, r7
 800db2c:	f1ca 0000 	rsb	r0, sl, #0
 800db30:	f000 fdb2 	bl	800e698 <scalbn>
 800db34:	ec57 6b10 	vmov	r6, r7, d0
 800db38:	4ba0      	ldr	r3, [pc, #640]	; (800ddbc <__kernel_rem_pio2+0x694>)
 800db3a:	ee10 0a10 	vmov	r0, s0
 800db3e:	2200      	movs	r2, #0
 800db40:	4639      	mov	r1, r7
 800db42:	f7f2 ff8f 	bl	8000a64 <__aeabi_dcmpge>
 800db46:	b1f8      	cbz	r0, 800db88 <__kernel_rem_pio2+0x460>
 800db48:	4b9d      	ldr	r3, [pc, #628]	; (800ddc0 <__kernel_rem_pio2+0x698>)
 800db4a:	2200      	movs	r2, #0
 800db4c:	4630      	mov	r0, r6
 800db4e:	4639      	mov	r1, r7
 800db50:	f7f2 fd02 	bl	8000558 <__aeabi_dmul>
 800db54:	f7f2 ff9a 	bl	8000a8c <__aeabi_d2iz>
 800db58:	4680      	mov	r8, r0
 800db5a:	f7f2 fc93 	bl	8000484 <__aeabi_i2d>
 800db5e:	4b97      	ldr	r3, [pc, #604]	; (800ddbc <__kernel_rem_pio2+0x694>)
 800db60:	2200      	movs	r2, #0
 800db62:	f7f2 fcf9 	bl	8000558 <__aeabi_dmul>
 800db66:	460b      	mov	r3, r1
 800db68:	4602      	mov	r2, r0
 800db6a:	4639      	mov	r1, r7
 800db6c:	4630      	mov	r0, r6
 800db6e:	f7f2 fb3b 	bl	80001e8 <__aeabi_dsub>
 800db72:	f7f2 ff8b 	bl	8000a8c <__aeabi_d2iz>
 800db76:	1c65      	adds	r5, r4, #1
 800db78:	ab0e      	add	r3, sp, #56	; 0x38
 800db7a:	f10a 0a18 	add.w	sl, sl, #24
 800db7e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800db82:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800db86:	e720      	b.n	800d9ca <__kernel_rem_pio2+0x2a2>
 800db88:	4630      	mov	r0, r6
 800db8a:	4639      	mov	r1, r7
 800db8c:	f7f2 ff7e 	bl	8000a8c <__aeabi_d2iz>
 800db90:	ab0e      	add	r3, sp, #56	; 0x38
 800db92:	4625      	mov	r5, r4
 800db94:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800db98:	e717      	b.n	800d9ca <__kernel_rem_pio2+0x2a2>
 800db9a:	ab0e      	add	r3, sp, #56	; 0x38
 800db9c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800dba0:	f7f2 fc70 	bl	8000484 <__aeabi_i2d>
 800dba4:	4632      	mov	r2, r6
 800dba6:	463b      	mov	r3, r7
 800dba8:	f7f2 fcd6 	bl	8000558 <__aeabi_dmul>
 800dbac:	4b84      	ldr	r3, [pc, #528]	; (800ddc0 <__kernel_rem_pio2+0x698>)
 800dbae:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	4630      	mov	r0, r6
 800dbb6:	4639      	mov	r1, r7
 800dbb8:	f7f2 fcce 	bl	8000558 <__aeabi_dmul>
 800dbbc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dbc0:	4606      	mov	r6, r0
 800dbc2:	460f      	mov	r7, r1
 800dbc4:	e70f      	b.n	800d9e6 <__kernel_rem_pio2+0x2be>
 800dbc6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800dbca:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800dbce:	f7f2 fcc3 	bl	8000558 <__aeabi_dmul>
 800dbd2:	4602      	mov	r2, r0
 800dbd4:	460b      	mov	r3, r1
 800dbd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dbda:	f7f2 fb07 	bl	80001ec <__adddf3>
 800dbde:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800dbe2:	f108 0801 	add.w	r8, r8, #1
 800dbe6:	9b02      	ldr	r3, [sp, #8]
 800dbe8:	4598      	cmp	r8, r3
 800dbea:	dc01      	bgt.n	800dbf0 <__kernel_rem_pio2+0x4c8>
 800dbec:	45b8      	cmp	r8, r7
 800dbee:	ddea      	ble.n	800dbc6 <__kernel_rem_pio2+0x49e>
 800dbf0:	ed9d 7b06 	vldr	d7, [sp, #24]
 800dbf4:	ab4a      	add	r3, sp, #296	; 0x128
 800dbf6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800dbfa:	ed87 7b00 	vstr	d7, [r7]
 800dbfe:	3e01      	subs	r6, #1
 800dc00:	e6f8      	b.n	800d9f4 <__kernel_rem_pio2+0x2cc>
 800dc02:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800dc04:	2b02      	cmp	r3, #2
 800dc06:	dc0b      	bgt.n	800dc20 <__kernel_rem_pio2+0x4f8>
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	dc35      	bgt.n	800dc78 <__kernel_rem_pio2+0x550>
 800dc0c:	d059      	beq.n	800dcc2 <__kernel_rem_pio2+0x59a>
 800dc0e:	9b04      	ldr	r3, [sp, #16]
 800dc10:	f003 0007 	and.w	r0, r3, #7
 800dc14:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800dc18:	ecbd 8b02 	vpop	{d8}
 800dc1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc20:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800dc22:	2b03      	cmp	r3, #3
 800dc24:	d1f3      	bne.n	800dc0e <__kernel_rem_pio2+0x4e6>
 800dc26:	ab4a      	add	r3, sp, #296	; 0x128
 800dc28:	4423      	add	r3, r4
 800dc2a:	9306      	str	r3, [sp, #24]
 800dc2c:	461c      	mov	r4, r3
 800dc2e:	469a      	mov	sl, r3
 800dc30:	9502      	str	r5, [sp, #8]
 800dc32:	9b02      	ldr	r3, [sp, #8]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	f1aa 0a08 	sub.w	sl, sl, #8
 800dc3a:	dc6b      	bgt.n	800dd14 <__kernel_rem_pio2+0x5ec>
 800dc3c:	46aa      	mov	sl, r5
 800dc3e:	f1ba 0f01 	cmp.w	sl, #1
 800dc42:	f1a4 0408 	sub.w	r4, r4, #8
 800dc46:	f300 8085 	bgt.w	800dd54 <__kernel_rem_pio2+0x62c>
 800dc4a:	9c06      	ldr	r4, [sp, #24]
 800dc4c:	2000      	movs	r0, #0
 800dc4e:	3408      	adds	r4, #8
 800dc50:	2100      	movs	r1, #0
 800dc52:	2d01      	cmp	r5, #1
 800dc54:	f300 809d 	bgt.w	800dd92 <__kernel_rem_pio2+0x66a>
 800dc58:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800dc5c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800dc60:	f1bb 0f00 	cmp.w	fp, #0
 800dc64:	f040 809b 	bne.w	800dd9e <__kernel_rem_pio2+0x676>
 800dc68:	9b01      	ldr	r3, [sp, #4]
 800dc6a:	e9c3 5600 	strd	r5, r6, [r3]
 800dc6e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800dc72:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800dc76:	e7ca      	b.n	800dc0e <__kernel_rem_pio2+0x4e6>
 800dc78:	3408      	adds	r4, #8
 800dc7a:	ab4a      	add	r3, sp, #296	; 0x128
 800dc7c:	441c      	add	r4, r3
 800dc7e:	462e      	mov	r6, r5
 800dc80:	2000      	movs	r0, #0
 800dc82:	2100      	movs	r1, #0
 800dc84:	2e00      	cmp	r6, #0
 800dc86:	da36      	bge.n	800dcf6 <__kernel_rem_pio2+0x5ce>
 800dc88:	f1bb 0f00 	cmp.w	fp, #0
 800dc8c:	d039      	beq.n	800dd02 <__kernel_rem_pio2+0x5da>
 800dc8e:	4602      	mov	r2, r0
 800dc90:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dc94:	9c01      	ldr	r4, [sp, #4]
 800dc96:	e9c4 2300 	strd	r2, r3, [r4]
 800dc9a:	4602      	mov	r2, r0
 800dc9c:	460b      	mov	r3, r1
 800dc9e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800dca2:	f7f2 faa1 	bl	80001e8 <__aeabi_dsub>
 800dca6:	ae4c      	add	r6, sp, #304	; 0x130
 800dca8:	2401      	movs	r4, #1
 800dcaa:	42a5      	cmp	r5, r4
 800dcac:	da2c      	bge.n	800dd08 <__kernel_rem_pio2+0x5e0>
 800dcae:	f1bb 0f00 	cmp.w	fp, #0
 800dcb2:	d002      	beq.n	800dcba <__kernel_rem_pio2+0x592>
 800dcb4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dcb8:	4619      	mov	r1, r3
 800dcba:	9b01      	ldr	r3, [sp, #4]
 800dcbc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800dcc0:	e7a5      	b.n	800dc0e <__kernel_rem_pio2+0x4e6>
 800dcc2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800dcc6:	eb0d 0403 	add.w	r4, sp, r3
 800dcca:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800dcce:	2000      	movs	r0, #0
 800dcd0:	2100      	movs	r1, #0
 800dcd2:	2d00      	cmp	r5, #0
 800dcd4:	da09      	bge.n	800dcea <__kernel_rem_pio2+0x5c2>
 800dcd6:	f1bb 0f00 	cmp.w	fp, #0
 800dcda:	d002      	beq.n	800dce2 <__kernel_rem_pio2+0x5ba>
 800dcdc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dce0:	4619      	mov	r1, r3
 800dce2:	9b01      	ldr	r3, [sp, #4]
 800dce4:	e9c3 0100 	strd	r0, r1, [r3]
 800dce8:	e791      	b.n	800dc0e <__kernel_rem_pio2+0x4e6>
 800dcea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800dcee:	f7f2 fa7d 	bl	80001ec <__adddf3>
 800dcf2:	3d01      	subs	r5, #1
 800dcf4:	e7ed      	b.n	800dcd2 <__kernel_rem_pio2+0x5aa>
 800dcf6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800dcfa:	f7f2 fa77 	bl	80001ec <__adddf3>
 800dcfe:	3e01      	subs	r6, #1
 800dd00:	e7c0      	b.n	800dc84 <__kernel_rem_pio2+0x55c>
 800dd02:	4602      	mov	r2, r0
 800dd04:	460b      	mov	r3, r1
 800dd06:	e7c5      	b.n	800dc94 <__kernel_rem_pio2+0x56c>
 800dd08:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800dd0c:	f7f2 fa6e 	bl	80001ec <__adddf3>
 800dd10:	3401      	adds	r4, #1
 800dd12:	e7ca      	b.n	800dcaa <__kernel_rem_pio2+0x582>
 800dd14:	e9da 8900 	ldrd	r8, r9, [sl]
 800dd18:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800dd1c:	9b02      	ldr	r3, [sp, #8]
 800dd1e:	3b01      	subs	r3, #1
 800dd20:	9302      	str	r3, [sp, #8]
 800dd22:	4632      	mov	r2, r6
 800dd24:	463b      	mov	r3, r7
 800dd26:	4640      	mov	r0, r8
 800dd28:	4649      	mov	r1, r9
 800dd2a:	f7f2 fa5f 	bl	80001ec <__adddf3>
 800dd2e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dd32:	4602      	mov	r2, r0
 800dd34:	460b      	mov	r3, r1
 800dd36:	4640      	mov	r0, r8
 800dd38:	4649      	mov	r1, r9
 800dd3a:	f7f2 fa55 	bl	80001e8 <__aeabi_dsub>
 800dd3e:	4632      	mov	r2, r6
 800dd40:	463b      	mov	r3, r7
 800dd42:	f7f2 fa53 	bl	80001ec <__adddf3>
 800dd46:	ed9d 7b08 	vldr	d7, [sp, #32]
 800dd4a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dd4e:	ed8a 7b00 	vstr	d7, [sl]
 800dd52:	e76e      	b.n	800dc32 <__kernel_rem_pio2+0x50a>
 800dd54:	e9d4 8900 	ldrd	r8, r9, [r4]
 800dd58:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800dd5c:	4640      	mov	r0, r8
 800dd5e:	4632      	mov	r2, r6
 800dd60:	463b      	mov	r3, r7
 800dd62:	4649      	mov	r1, r9
 800dd64:	f7f2 fa42 	bl	80001ec <__adddf3>
 800dd68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dd6c:	4602      	mov	r2, r0
 800dd6e:	460b      	mov	r3, r1
 800dd70:	4640      	mov	r0, r8
 800dd72:	4649      	mov	r1, r9
 800dd74:	f7f2 fa38 	bl	80001e8 <__aeabi_dsub>
 800dd78:	4632      	mov	r2, r6
 800dd7a:	463b      	mov	r3, r7
 800dd7c:	f7f2 fa36 	bl	80001ec <__adddf3>
 800dd80:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dd84:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800dd88:	ed84 7b00 	vstr	d7, [r4]
 800dd8c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dd90:	e755      	b.n	800dc3e <__kernel_rem_pio2+0x516>
 800dd92:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800dd96:	f7f2 fa29 	bl	80001ec <__adddf3>
 800dd9a:	3d01      	subs	r5, #1
 800dd9c:	e759      	b.n	800dc52 <__kernel_rem_pio2+0x52a>
 800dd9e:	9b01      	ldr	r3, [sp, #4]
 800dda0:	9a01      	ldr	r2, [sp, #4]
 800dda2:	601d      	str	r5, [r3, #0]
 800dda4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800dda8:	605c      	str	r4, [r3, #4]
 800ddaa:	609f      	str	r7, [r3, #8]
 800ddac:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800ddb0:	60d3      	str	r3, [r2, #12]
 800ddb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ddb6:	6110      	str	r0, [r2, #16]
 800ddb8:	6153      	str	r3, [r2, #20]
 800ddba:	e728      	b.n	800dc0e <__kernel_rem_pio2+0x4e6>
 800ddbc:	41700000 	.word	0x41700000
 800ddc0:	3e700000 	.word	0x3e700000
 800ddc4:	00000000 	.word	0x00000000

0800ddc8 <__kernel_sin>:
 800ddc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddcc:	ed2d 8b04 	vpush	{d8-d9}
 800ddd0:	eeb0 8a41 	vmov.f32	s16, s2
 800ddd4:	eef0 8a61 	vmov.f32	s17, s3
 800ddd8:	ec55 4b10 	vmov	r4, r5, d0
 800dddc:	b083      	sub	sp, #12
 800ddde:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800dde2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800dde6:	9001      	str	r0, [sp, #4]
 800dde8:	da06      	bge.n	800ddf8 <__kernel_sin+0x30>
 800ddea:	ee10 0a10 	vmov	r0, s0
 800ddee:	4629      	mov	r1, r5
 800ddf0:	f7f2 fe4c 	bl	8000a8c <__aeabi_d2iz>
 800ddf4:	2800      	cmp	r0, #0
 800ddf6:	d051      	beq.n	800de9c <__kernel_sin+0xd4>
 800ddf8:	4622      	mov	r2, r4
 800ddfa:	462b      	mov	r3, r5
 800ddfc:	4620      	mov	r0, r4
 800ddfe:	4629      	mov	r1, r5
 800de00:	f7f2 fbaa 	bl	8000558 <__aeabi_dmul>
 800de04:	4682      	mov	sl, r0
 800de06:	468b      	mov	fp, r1
 800de08:	4602      	mov	r2, r0
 800de0a:	460b      	mov	r3, r1
 800de0c:	4620      	mov	r0, r4
 800de0e:	4629      	mov	r1, r5
 800de10:	f7f2 fba2 	bl	8000558 <__aeabi_dmul>
 800de14:	a341      	add	r3, pc, #260	; (adr r3, 800df1c <__kernel_sin+0x154>)
 800de16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de1a:	4680      	mov	r8, r0
 800de1c:	4689      	mov	r9, r1
 800de1e:	4650      	mov	r0, sl
 800de20:	4659      	mov	r1, fp
 800de22:	f7f2 fb99 	bl	8000558 <__aeabi_dmul>
 800de26:	a33f      	add	r3, pc, #252	; (adr r3, 800df24 <__kernel_sin+0x15c>)
 800de28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de2c:	f7f2 f9dc 	bl	80001e8 <__aeabi_dsub>
 800de30:	4652      	mov	r2, sl
 800de32:	465b      	mov	r3, fp
 800de34:	f7f2 fb90 	bl	8000558 <__aeabi_dmul>
 800de38:	a33c      	add	r3, pc, #240	; (adr r3, 800df2c <__kernel_sin+0x164>)
 800de3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de3e:	f7f2 f9d5 	bl	80001ec <__adddf3>
 800de42:	4652      	mov	r2, sl
 800de44:	465b      	mov	r3, fp
 800de46:	f7f2 fb87 	bl	8000558 <__aeabi_dmul>
 800de4a:	a33a      	add	r3, pc, #232	; (adr r3, 800df34 <__kernel_sin+0x16c>)
 800de4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de50:	f7f2 f9ca 	bl	80001e8 <__aeabi_dsub>
 800de54:	4652      	mov	r2, sl
 800de56:	465b      	mov	r3, fp
 800de58:	f7f2 fb7e 	bl	8000558 <__aeabi_dmul>
 800de5c:	a337      	add	r3, pc, #220	; (adr r3, 800df3c <__kernel_sin+0x174>)
 800de5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de62:	f7f2 f9c3 	bl	80001ec <__adddf3>
 800de66:	9b01      	ldr	r3, [sp, #4]
 800de68:	4606      	mov	r6, r0
 800de6a:	460f      	mov	r7, r1
 800de6c:	b9eb      	cbnz	r3, 800deaa <__kernel_sin+0xe2>
 800de6e:	4602      	mov	r2, r0
 800de70:	460b      	mov	r3, r1
 800de72:	4650      	mov	r0, sl
 800de74:	4659      	mov	r1, fp
 800de76:	f7f2 fb6f 	bl	8000558 <__aeabi_dmul>
 800de7a:	a325      	add	r3, pc, #148	; (adr r3, 800df10 <__kernel_sin+0x148>)
 800de7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de80:	f7f2 f9b2 	bl	80001e8 <__aeabi_dsub>
 800de84:	4642      	mov	r2, r8
 800de86:	464b      	mov	r3, r9
 800de88:	f7f2 fb66 	bl	8000558 <__aeabi_dmul>
 800de8c:	4602      	mov	r2, r0
 800de8e:	460b      	mov	r3, r1
 800de90:	4620      	mov	r0, r4
 800de92:	4629      	mov	r1, r5
 800de94:	f7f2 f9aa 	bl	80001ec <__adddf3>
 800de98:	4604      	mov	r4, r0
 800de9a:	460d      	mov	r5, r1
 800de9c:	ec45 4b10 	vmov	d0, r4, r5
 800dea0:	b003      	add	sp, #12
 800dea2:	ecbd 8b04 	vpop	{d8-d9}
 800dea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deaa:	4b1b      	ldr	r3, [pc, #108]	; (800df18 <__kernel_sin+0x150>)
 800deac:	ec51 0b18 	vmov	r0, r1, d8
 800deb0:	2200      	movs	r2, #0
 800deb2:	f7f2 fb51 	bl	8000558 <__aeabi_dmul>
 800deb6:	4632      	mov	r2, r6
 800deb8:	ec41 0b19 	vmov	d9, r0, r1
 800debc:	463b      	mov	r3, r7
 800debe:	4640      	mov	r0, r8
 800dec0:	4649      	mov	r1, r9
 800dec2:	f7f2 fb49 	bl	8000558 <__aeabi_dmul>
 800dec6:	4602      	mov	r2, r0
 800dec8:	460b      	mov	r3, r1
 800deca:	ec51 0b19 	vmov	r0, r1, d9
 800dece:	f7f2 f98b 	bl	80001e8 <__aeabi_dsub>
 800ded2:	4652      	mov	r2, sl
 800ded4:	465b      	mov	r3, fp
 800ded6:	f7f2 fb3f 	bl	8000558 <__aeabi_dmul>
 800deda:	ec53 2b18 	vmov	r2, r3, d8
 800dede:	f7f2 f983 	bl	80001e8 <__aeabi_dsub>
 800dee2:	a30b      	add	r3, pc, #44	; (adr r3, 800df10 <__kernel_sin+0x148>)
 800dee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee8:	4606      	mov	r6, r0
 800deea:	460f      	mov	r7, r1
 800deec:	4640      	mov	r0, r8
 800deee:	4649      	mov	r1, r9
 800def0:	f7f2 fb32 	bl	8000558 <__aeabi_dmul>
 800def4:	4602      	mov	r2, r0
 800def6:	460b      	mov	r3, r1
 800def8:	4630      	mov	r0, r6
 800defa:	4639      	mov	r1, r7
 800defc:	f7f2 f976 	bl	80001ec <__adddf3>
 800df00:	4602      	mov	r2, r0
 800df02:	460b      	mov	r3, r1
 800df04:	4620      	mov	r0, r4
 800df06:	4629      	mov	r1, r5
 800df08:	f7f2 f96e 	bl	80001e8 <__aeabi_dsub>
 800df0c:	e7c4      	b.n	800de98 <__kernel_sin+0xd0>
 800df0e:	bf00      	nop
 800df10:	55555549 	.word	0x55555549
 800df14:	3fc55555 	.word	0x3fc55555
 800df18:	3fe00000 	.word	0x3fe00000
 800df1c:	5acfd57c 	.word	0x5acfd57c
 800df20:	3de5d93a 	.word	0x3de5d93a
 800df24:	8a2b9ceb 	.word	0x8a2b9ceb
 800df28:	3e5ae5e6 	.word	0x3e5ae5e6
 800df2c:	57b1fe7d 	.word	0x57b1fe7d
 800df30:	3ec71de3 	.word	0x3ec71de3
 800df34:	19c161d5 	.word	0x19c161d5
 800df38:	3f2a01a0 	.word	0x3f2a01a0
 800df3c:	1110f8a6 	.word	0x1110f8a6
 800df40:	3f811111 	.word	0x3f811111

0800df44 <__kernel_cosf>:
 800df44:	ee10 3a10 	vmov	r3, s0
 800df48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800df4c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800df50:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800df54:	da05      	bge.n	800df62 <__kernel_cosf+0x1e>
 800df56:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800df5a:	ee17 2a90 	vmov	r2, s15
 800df5e:	2a00      	cmp	r2, #0
 800df60:	d03d      	beq.n	800dfde <__kernel_cosf+0x9a>
 800df62:	ee60 5a00 	vmul.f32	s11, s0, s0
 800df66:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800dfe4 <__kernel_cosf+0xa0>
 800df6a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800dfe8 <__kernel_cosf+0xa4>
 800df6e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800dfec <__kernel_cosf+0xa8>
 800df72:	4a1f      	ldr	r2, [pc, #124]	; (800dff0 <__kernel_cosf+0xac>)
 800df74:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800df78:	4293      	cmp	r3, r2
 800df7a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800dff4 <__kernel_cosf+0xb0>
 800df7e:	eee7 7a25 	vfma.f32	s15, s14, s11
 800df82:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800dff8 <__kernel_cosf+0xb4>
 800df86:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800df8a:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800dffc <__kernel_cosf+0xb8>
 800df8e:	eee7 7a25 	vfma.f32	s15, s14, s11
 800df92:	eeb0 7a66 	vmov.f32	s14, s13
 800df96:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800df9a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800df9e:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800dfa2:	ee67 6a25 	vmul.f32	s13, s14, s11
 800dfa6:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800dfaa:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800dfae:	dc04      	bgt.n	800dfba <__kernel_cosf+0x76>
 800dfb0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800dfb4:	ee36 0a47 	vsub.f32	s0, s12, s14
 800dfb8:	4770      	bx	lr
 800dfba:	4a11      	ldr	r2, [pc, #68]	; (800e000 <__kernel_cosf+0xbc>)
 800dfbc:	4293      	cmp	r3, r2
 800dfbe:	bfda      	itte	le
 800dfc0:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800dfc4:	ee06 3a90 	vmovle	s13, r3
 800dfc8:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800dfcc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800dfd0:	ee36 0a66 	vsub.f32	s0, s12, s13
 800dfd4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dfd8:	ee30 0a67 	vsub.f32	s0, s0, s15
 800dfdc:	4770      	bx	lr
 800dfde:	eeb0 0a46 	vmov.f32	s0, s12
 800dfe2:	4770      	bx	lr
 800dfe4:	ad47d74e 	.word	0xad47d74e
 800dfe8:	310f74f6 	.word	0x310f74f6
 800dfec:	3d2aaaab 	.word	0x3d2aaaab
 800dff0:	3e999999 	.word	0x3e999999
 800dff4:	b493f27c 	.word	0xb493f27c
 800dff8:	37d00d01 	.word	0x37d00d01
 800dffc:	bab60b61 	.word	0xbab60b61
 800e000:	3f480000 	.word	0x3f480000

0800e004 <__kernel_rem_pio2f>:
 800e004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e008:	ed2d 8b04 	vpush	{d8-d9}
 800e00c:	b0d9      	sub	sp, #356	; 0x164
 800e00e:	4688      	mov	r8, r1
 800e010:	9002      	str	r0, [sp, #8]
 800e012:	49bb      	ldr	r1, [pc, #748]	; (800e300 <__kernel_rem_pio2f+0x2fc>)
 800e014:	9866      	ldr	r0, [sp, #408]	; 0x198
 800e016:	9301      	str	r3, [sp, #4]
 800e018:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800e01c:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800e020:	1e59      	subs	r1, r3, #1
 800e022:	1d13      	adds	r3, r2, #4
 800e024:	db27      	blt.n	800e076 <__kernel_rem_pio2f+0x72>
 800e026:	f1b2 0b03 	subs.w	fp, r2, #3
 800e02a:	bf48      	it	mi
 800e02c:	f102 0b04 	addmi.w	fp, r2, #4
 800e030:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800e034:	1c45      	adds	r5, r0, #1
 800e036:	00ec      	lsls	r4, r5, #3
 800e038:	1a47      	subs	r7, r0, r1
 800e03a:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800e310 <__kernel_rem_pio2f+0x30c>
 800e03e:	9403      	str	r4, [sp, #12]
 800e040:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800e044:	eb0a 0c01 	add.w	ip, sl, r1
 800e048:	ae1c      	add	r6, sp, #112	; 0x70
 800e04a:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800e04e:	2400      	movs	r4, #0
 800e050:	4564      	cmp	r4, ip
 800e052:	dd12      	ble.n	800e07a <__kernel_rem_pio2f+0x76>
 800e054:	9b01      	ldr	r3, [sp, #4]
 800e056:	ac1c      	add	r4, sp, #112	; 0x70
 800e058:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800e05c:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800e060:	f04f 0c00 	mov.w	ip, #0
 800e064:	45d4      	cmp	ip, sl
 800e066:	dc27      	bgt.n	800e0b8 <__kernel_rem_pio2f+0xb4>
 800e068:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800e06c:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800e310 <__kernel_rem_pio2f+0x30c>
 800e070:	4627      	mov	r7, r4
 800e072:	2600      	movs	r6, #0
 800e074:	e016      	b.n	800e0a4 <__kernel_rem_pio2f+0xa0>
 800e076:	2000      	movs	r0, #0
 800e078:	e7dc      	b.n	800e034 <__kernel_rem_pio2f+0x30>
 800e07a:	42e7      	cmn	r7, r4
 800e07c:	bf5d      	ittte	pl
 800e07e:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800e082:	ee07 3a90 	vmovpl	s15, r3
 800e086:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800e08a:	eef0 7a47 	vmovmi.f32	s15, s14
 800e08e:	ece6 7a01 	vstmia	r6!, {s15}
 800e092:	3401      	adds	r4, #1
 800e094:	e7dc      	b.n	800e050 <__kernel_rem_pio2f+0x4c>
 800e096:	ecf9 6a01 	vldmia	r9!, {s13}
 800e09a:	ed97 7a00 	vldr	s14, [r7]
 800e09e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e0a2:	3601      	adds	r6, #1
 800e0a4:	428e      	cmp	r6, r1
 800e0a6:	f1a7 0704 	sub.w	r7, r7, #4
 800e0aa:	ddf4      	ble.n	800e096 <__kernel_rem_pio2f+0x92>
 800e0ac:	eceb 7a01 	vstmia	fp!, {s15}
 800e0b0:	f10c 0c01 	add.w	ip, ip, #1
 800e0b4:	3404      	adds	r4, #4
 800e0b6:	e7d5      	b.n	800e064 <__kernel_rem_pio2f+0x60>
 800e0b8:	ab08      	add	r3, sp, #32
 800e0ba:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800e0be:	eddf 8a93 	vldr	s17, [pc, #588]	; 800e30c <__kernel_rem_pio2f+0x308>
 800e0c2:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800e308 <__kernel_rem_pio2f+0x304>
 800e0c6:	9304      	str	r3, [sp, #16]
 800e0c8:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800e0cc:	4656      	mov	r6, sl
 800e0ce:	00b3      	lsls	r3, r6, #2
 800e0d0:	9305      	str	r3, [sp, #20]
 800e0d2:	ab58      	add	r3, sp, #352	; 0x160
 800e0d4:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800e0d8:	ac08      	add	r4, sp, #32
 800e0da:	ab44      	add	r3, sp, #272	; 0x110
 800e0dc:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800e0e0:	46a4      	mov	ip, r4
 800e0e2:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800e0e6:	4637      	mov	r7, r6
 800e0e8:	2f00      	cmp	r7, #0
 800e0ea:	f1a0 0004 	sub.w	r0, r0, #4
 800e0ee:	dc4f      	bgt.n	800e190 <__kernel_rem_pio2f+0x18c>
 800e0f0:	4628      	mov	r0, r5
 800e0f2:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800e0f6:	f000 fb9f 	bl	800e838 <scalbnf>
 800e0fa:	eeb0 8a40 	vmov.f32	s16, s0
 800e0fe:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800e102:	ee28 0a00 	vmul.f32	s0, s16, s0
 800e106:	f000 fb55 	bl	800e7b4 <floorf>
 800e10a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800e10e:	eea0 8a67 	vfms.f32	s16, s0, s15
 800e112:	2d00      	cmp	r5, #0
 800e114:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800e118:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800e11c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800e120:	ee17 9a90 	vmov	r9, s15
 800e124:	ee38 8a40 	vsub.f32	s16, s16, s0
 800e128:	dd44      	ble.n	800e1b4 <__kernel_rem_pio2f+0x1b0>
 800e12a:	f106 3cff 	add.w	ip, r6, #4294967295
 800e12e:	ab08      	add	r3, sp, #32
 800e130:	f1c5 0e08 	rsb	lr, r5, #8
 800e134:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800e138:	fa47 f00e 	asr.w	r0, r7, lr
 800e13c:	4481      	add	r9, r0
 800e13e:	fa00 f00e 	lsl.w	r0, r0, lr
 800e142:	1a3f      	subs	r7, r7, r0
 800e144:	f1c5 0007 	rsb	r0, r5, #7
 800e148:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800e14c:	4107      	asrs	r7, r0
 800e14e:	2f00      	cmp	r7, #0
 800e150:	dd3f      	ble.n	800e1d2 <__kernel_rem_pio2f+0x1ce>
 800e152:	f04f 0e00 	mov.w	lr, #0
 800e156:	f109 0901 	add.w	r9, r9, #1
 800e15a:	4673      	mov	r3, lr
 800e15c:	4576      	cmp	r6, lr
 800e15e:	dc6b      	bgt.n	800e238 <__kernel_rem_pio2f+0x234>
 800e160:	2d00      	cmp	r5, #0
 800e162:	dd04      	ble.n	800e16e <__kernel_rem_pio2f+0x16a>
 800e164:	2d01      	cmp	r5, #1
 800e166:	d078      	beq.n	800e25a <__kernel_rem_pio2f+0x256>
 800e168:	2d02      	cmp	r5, #2
 800e16a:	f000 8081 	beq.w	800e270 <__kernel_rem_pio2f+0x26c>
 800e16e:	2f02      	cmp	r7, #2
 800e170:	d12f      	bne.n	800e1d2 <__kernel_rem_pio2f+0x1ce>
 800e172:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e176:	ee30 8a48 	vsub.f32	s16, s0, s16
 800e17a:	b353      	cbz	r3, 800e1d2 <__kernel_rem_pio2f+0x1ce>
 800e17c:	4628      	mov	r0, r5
 800e17e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800e182:	f000 fb59 	bl	800e838 <scalbnf>
 800e186:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800e18a:	ee38 8a40 	vsub.f32	s16, s16, s0
 800e18e:	e020      	b.n	800e1d2 <__kernel_rem_pio2f+0x1ce>
 800e190:	ee60 7a28 	vmul.f32	s15, s0, s17
 800e194:	3f01      	subs	r7, #1
 800e196:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e19a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e19e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800e1a2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e1a6:	ecac 0a01 	vstmia	ip!, {s0}
 800e1aa:	ed90 0a00 	vldr	s0, [r0]
 800e1ae:	ee37 0a80 	vadd.f32	s0, s15, s0
 800e1b2:	e799      	b.n	800e0e8 <__kernel_rem_pio2f+0xe4>
 800e1b4:	d105      	bne.n	800e1c2 <__kernel_rem_pio2f+0x1be>
 800e1b6:	1e70      	subs	r0, r6, #1
 800e1b8:	ab08      	add	r3, sp, #32
 800e1ba:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800e1be:	11ff      	asrs	r7, r7, #7
 800e1c0:	e7c5      	b.n	800e14e <__kernel_rem_pio2f+0x14a>
 800e1c2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e1c6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800e1ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1ce:	da31      	bge.n	800e234 <__kernel_rem_pio2f+0x230>
 800e1d0:	2700      	movs	r7, #0
 800e1d2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e1d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1da:	f040 809b 	bne.w	800e314 <__kernel_rem_pio2f+0x310>
 800e1de:	1e74      	subs	r4, r6, #1
 800e1e0:	46a4      	mov	ip, r4
 800e1e2:	2000      	movs	r0, #0
 800e1e4:	45d4      	cmp	ip, sl
 800e1e6:	da4a      	bge.n	800e27e <__kernel_rem_pio2f+0x27a>
 800e1e8:	2800      	cmp	r0, #0
 800e1ea:	d07a      	beq.n	800e2e2 <__kernel_rem_pio2f+0x2de>
 800e1ec:	ab08      	add	r3, sp, #32
 800e1ee:	3d08      	subs	r5, #8
 800e1f0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	f000 8081 	beq.w	800e2fc <__kernel_rem_pio2f+0x2f8>
 800e1fa:	4628      	mov	r0, r5
 800e1fc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e200:	00a5      	lsls	r5, r4, #2
 800e202:	f000 fb19 	bl	800e838 <scalbnf>
 800e206:	aa44      	add	r2, sp, #272	; 0x110
 800e208:	1d2b      	adds	r3, r5, #4
 800e20a:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800e30c <__kernel_rem_pio2f+0x308>
 800e20e:	18d1      	adds	r1, r2, r3
 800e210:	4622      	mov	r2, r4
 800e212:	2a00      	cmp	r2, #0
 800e214:	f280 80ae 	bge.w	800e374 <__kernel_rem_pio2f+0x370>
 800e218:	4622      	mov	r2, r4
 800e21a:	2a00      	cmp	r2, #0
 800e21c:	f2c0 80cc 	blt.w	800e3b8 <__kernel_rem_pio2f+0x3b4>
 800e220:	a944      	add	r1, sp, #272	; 0x110
 800e222:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800e226:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800e304 <__kernel_rem_pio2f+0x300>
 800e22a:	eddf 7a39 	vldr	s15, [pc, #228]	; 800e310 <__kernel_rem_pio2f+0x30c>
 800e22e:	2000      	movs	r0, #0
 800e230:	1aa1      	subs	r1, r4, r2
 800e232:	e0b6      	b.n	800e3a2 <__kernel_rem_pio2f+0x39e>
 800e234:	2702      	movs	r7, #2
 800e236:	e78c      	b.n	800e152 <__kernel_rem_pio2f+0x14e>
 800e238:	6820      	ldr	r0, [r4, #0]
 800e23a:	b94b      	cbnz	r3, 800e250 <__kernel_rem_pio2f+0x24c>
 800e23c:	b118      	cbz	r0, 800e246 <__kernel_rem_pio2f+0x242>
 800e23e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800e242:	6020      	str	r0, [r4, #0]
 800e244:	2001      	movs	r0, #1
 800e246:	f10e 0e01 	add.w	lr, lr, #1
 800e24a:	3404      	adds	r4, #4
 800e24c:	4603      	mov	r3, r0
 800e24e:	e785      	b.n	800e15c <__kernel_rem_pio2f+0x158>
 800e250:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800e254:	6020      	str	r0, [r4, #0]
 800e256:	4618      	mov	r0, r3
 800e258:	e7f5      	b.n	800e246 <__kernel_rem_pio2f+0x242>
 800e25a:	1e74      	subs	r4, r6, #1
 800e25c:	a808      	add	r0, sp, #32
 800e25e:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800e262:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800e266:	f10d 0c20 	add.w	ip, sp, #32
 800e26a:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800e26e:	e77e      	b.n	800e16e <__kernel_rem_pio2f+0x16a>
 800e270:	1e74      	subs	r4, r6, #1
 800e272:	a808      	add	r0, sp, #32
 800e274:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800e278:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800e27c:	e7f3      	b.n	800e266 <__kernel_rem_pio2f+0x262>
 800e27e:	ab08      	add	r3, sp, #32
 800e280:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800e284:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e288:	4318      	orrs	r0, r3
 800e28a:	e7ab      	b.n	800e1e4 <__kernel_rem_pio2f+0x1e0>
 800e28c:	f10c 0c01 	add.w	ip, ip, #1
 800e290:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800e294:	2c00      	cmp	r4, #0
 800e296:	d0f9      	beq.n	800e28c <__kernel_rem_pio2f+0x288>
 800e298:	9b05      	ldr	r3, [sp, #20]
 800e29a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800e29e:	eb0d 0003 	add.w	r0, sp, r3
 800e2a2:	9b01      	ldr	r3, [sp, #4]
 800e2a4:	18f4      	adds	r4, r6, r3
 800e2a6:	ab1c      	add	r3, sp, #112	; 0x70
 800e2a8:	1c77      	adds	r7, r6, #1
 800e2aa:	384c      	subs	r0, #76	; 0x4c
 800e2ac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e2b0:	4466      	add	r6, ip
 800e2b2:	42be      	cmp	r6, r7
 800e2b4:	f6ff af0b 	blt.w	800e0ce <__kernel_rem_pio2f+0xca>
 800e2b8:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800e2bc:	f8dd e008 	ldr.w	lr, [sp, #8]
 800e2c0:	ee07 3a90 	vmov	s15, r3
 800e2c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e2c8:	f04f 0c00 	mov.w	ip, #0
 800e2cc:	ece4 7a01 	vstmia	r4!, {s15}
 800e2d0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800e310 <__kernel_rem_pio2f+0x30c>
 800e2d4:	46a1      	mov	r9, r4
 800e2d6:	458c      	cmp	ip, r1
 800e2d8:	dd07      	ble.n	800e2ea <__kernel_rem_pio2f+0x2e6>
 800e2da:	ece0 7a01 	vstmia	r0!, {s15}
 800e2de:	3701      	adds	r7, #1
 800e2e0:	e7e7      	b.n	800e2b2 <__kernel_rem_pio2f+0x2ae>
 800e2e2:	9804      	ldr	r0, [sp, #16]
 800e2e4:	f04f 0c01 	mov.w	ip, #1
 800e2e8:	e7d2      	b.n	800e290 <__kernel_rem_pio2f+0x28c>
 800e2ea:	ecfe 6a01 	vldmia	lr!, {s13}
 800e2ee:	ed39 7a01 	vldmdb	r9!, {s14}
 800e2f2:	f10c 0c01 	add.w	ip, ip, #1
 800e2f6:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e2fa:	e7ec      	b.n	800e2d6 <__kernel_rem_pio2f+0x2d2>
 800e2fc:	3c01      	subs	r4, #1
 800e2fe:	e775      	b.n	800e1ec <__kernel_rem_pio2f+0x1e8>
 800e300:	0800fa44 	.word	0x0800fa44
 800e304:	0800fa18 	.word	0x0800fa18
 800e308:	43800000 	.word	0x43800000
 800e30c:	3b800000 	.word	0x3b800000
 800e310:	00000000 	.word	0x00000000
 800e314:	9b03      	ldr	r3, [sp, #12]
 800e316:	eeb0 0a48 	vmov.f32	s0, s16
 800e31a:	1a98      	subs	r0, r3, r2
 800e31c:	f000 fa8c 	bl	800e838 <scalbnf>
 800e320:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800e308 <__kernel_rem_pio2f+0x304>
 800e324:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800e328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e32c:	db19      	blt.n	800e362 <__kernel_rem_pio2f+0x35e>
 800e32e:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800e30c <__kernel_rem_pio2f+0x308>
 800e332:	ee60 7a27 	vmul.f32	s15, s0, s15
 800e336:	aa08      	add	r2, sp, #32
 800e338:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e33c:	1c74      	adds	r4, r6, #1
 800e33e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e342:	3508      	adds	r5, #8
 800e344:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800e348:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e34c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e350:	ee10 3a10 	vmov	r3, s0
 800e354:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800e358:	ee17 3a90 	vmov	r3, s15
 800e35c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800e360:	e74b      	b.n	800e1fa <__kernel_rem_pio2f+0x1f6>
 800e362:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e366:	aa08      	add	r2, sp, #32
 800e368:	ee10 3a10 	vmov	r3, s0
 800e36c:	4634      	mov	r4, r6
 800e36e:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800e372:	e742      	b.n	800e1fa <__kernel_rem_pio2f+0x1f6>
 800e374:	a808      	add	r0, sp, #32
 800e376:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800e37a:	9001      	str	r0, [sp, #4]
 800e37c:	ee07 0a90 	vmov	s15, r0
 800e380:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e384:	3a01      	subs	r2, #1
 800e386:	ee67 7a80 	vmul.f32	s15, s15, s0
 800e38a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800e38e:	ed61 7a01 	vstmdb	r1!, {s15}
 800e392:	e73e      	b.n	800e212 <__kernel_rem_pio2f+0x20e>
 800e394:	ecfc 6a01 	vldmia	ip!, {s13}
 800e398:	ecb6 7a01 	vldmia	r6!, {s14}
 800e39c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e3a0:	3001      	adds	r0, #1
 800e3a2:	4550      	cmp	r0, sl
 800e3a4:	dc01      	bgt.n	800e3aa <__kernel_rem_pio2f+0x3a6>
 800e3a6:	4288      	cmp	r0, r1
 800e3a8:	ddf4      	ble.n	800e394 <__kernel_rem_pio2f+0x390>
 800e3aa:	a858      	add	r0, sp, #352	; 0x160
 800e3ac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e3b0:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800e3b4:	3a01      	subs	r2, #1
 800e3b6:	e730      	b.n	800e21a <__kernel_rem_pio2f+0x216>
 800e3b8:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800e3ba:	2a02      	cmp	r2, #2
 800e3bc:	dc09      	bgt.n	800e3d2 <__kernel_rem_pio2f+0x3ce>
 800e3be:	2a00      	cmp	r2, #0
 800e3c0:	dc2a      	bgt.n	800e418 <__kernel_rem_pio2f+0x414>
 800e3c2:	d043      	beq.n	800e44c <__kernel_rem_pio2f+0x448>
 800e3c4:	f009 0007 	and.w	r0, r9, #7
 800e3c8:	b059      	add	sp, #356	; 0x164
 800e3ca:	ecbd 8b04 	vpop	{d8-d9}
 800e3ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3d2:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800e3d4:	2b03      	cmp	r3, #3
 800e3d6:	d1f5      	bne.n	800e3c4 <__kernel_rem_pio2f+0x3c0>
 800e3d8:	ab30      	add	r3, sp, #192	; 0xc0
 800e3da:	442b      	add	r3, r5
 800e3dc:	461a      	mov	r2, r3
 800e3de:	4619      	mov	r1, r3
 800e3e0:	4620      	mov	r0, r4
 800e3e2:	2800      	cmp	r0, #0
 800e3e4:	f1a1 0104 	sub.w	r1, r1, #4
 800e3e8:	dc51      	bgt.n	800e48e <__kernel_rem_pio2f+0x48a>
 800e3ea:	4621      	mov	r1, r4
 800e3ec:	2901      	cmp	r1, #1
 800e3ee:	f1a2 0204 	sub.w	r2, r2, #4
 800e3f2:	dc5c      	bgt.n	800e4ae <__kernel_rem_pio2f+0x4aa>
 800e3f4:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800e310 <__kernel_rem_pio2f+0x30c>
 800e3f8:	3304      	adds	r3, #4
 800e3fa:	2c01      	cmp	r4, #1
 800e3fc:	dc67      	bgt.n	800e4ce <__kernel_rem_pio2f+0x4ca>
 800e3fe:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800e402:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800e406:	2f00      	cmp	r7, #0
 800e408:	d167      	bne.n	800e4da <__kernel_rem_pio2f+0x4d6>
 800e40a:	edc8 6a00 	vstr	s13, [r8]
 800e40e:	ed88 7a01 	vstr	s14, [r8, #4]
 800e412:	edc8 7a02 	vstr	s15, [r8, #8]
 800e416:	e7d5      	b.n	800e3c4 <__kernel_rem_pio2f+0x3c0>
 800e418:	aa30      	add	r2, sp, #192	; 0xc0
 800e41a:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800e310 <__kernel_rem_pio2f+0x30c>
 800e41e:	4413      	add	r3, r2
 800e420:	4622      	mov	r2, r4
 800e422:	2a00      	cmp	r2, #0
 800e424:	da24      	bge.n	800e470 <__kernel_rem_pio2f+0x46c>
 800e426:	b34f      	cbz	r7, 800e47c <__kernel_rem_pio2f+0x478>
 800e428:	eef1 7a47 	vneg.f32	s15, s14
 800e42c:	edc8 7a00 	vstr	s15, [r8]
 800e430:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800e434:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e438:	aa31      	add	r2, sp, #196	; 0xc4
 800e43a:	2301      	movs	r3, #1
 800e43c:	429c      	cmp	r4, r3
 800e43e:	da20      	bge.n	800e482 <__kernel_rem_pio2f+0x47e>
 800e440:	b10f      	cbz	r7, 800e446 <__kernel_rem_pio2f+0x442>
 800e442:	eef1 7a67 	vneg.f32	s15, s15
 800e446:	edc8 7a01 	vstr	s15, [r8, #4]
 800e44a:	e7bb      	b.n	800e3c4 <__kernel_rem_pio2f+0x3c0>
 800e44c:	aa30      	add	r2, sp, #192	; 0xc0
 800e44e:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800e310 <__kernel_rem_pio2f+0x30c>
 800e452:	4413      	add	r3, r2
 800e454:	2c00      	cmp	r4, #0
 800e456:	da05      	bge.n	800e464 <__kernel_rem_pio2f+0x460>
 800e458:	b10f      	cbz	r7, 800e45e <__kernel_rem_pio2f+0x45a>
 800e45a:	eef1 7a67 	vneg.f32	s15, s15
 800e45e:	edc8 7a00 	vstr	s15, [r8]
 800e462:	e7af      	b.n	800e3c4 <__kernel_rem_pio2f+0x3c0>
 800e464:	ed33 7a01 	vldmdb	r3!, {s14}
 800e468:	3c01      	subs	r4, #1
 800e46a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e46e:	e7f1      	b.n	800e454 <__kernel_rem_pio2f+0x450>
 800e470:	ed73 7a01 	vldmdb	r3!, {s15}
 800e474:	3a01      	subs	r2, #1
 800e476:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e47a:	e7d2      	b.n	800e422 <__kernel_rem_pio2f+0x41e>
 800e47c:	eef0 7a47 	vmov.f32	s15, s14
 800e480:	e7d4      	b.n	800e42c <__kernel_rem_pio2f+0x428>
 800e482:	ecb2 7a01 	vldmia	r2!, {s14}
 800e486:	3301      	adds	r3, #1
 800e488:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e48c:	e7d6      	b.n	800e43c <__kernel_rem_pio2f+0x438>
 800e48e:	edd1 7a00 	vldr	s15, [r1]
 800e492:	edd1 6a01 	vldr	s13, [r1, #4]
 800e496:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e49a:	3801      	subs	r0, #1
 800e49c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e4a0:	ed81 7a00 	vstr	s14, [r1]
 800e4a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e4a8:	edc1 7a01 	vstr	s15, [r1, #4]
 800e4ac:	e799      	b.n	800e3e2 <__kernel_rem_pio2f+0x3de>
 800e4ae:	edd2 7a00 	vldr	s15, [r2]
 800e4b2:	edd2 6a01 	vldr	s13, [r2, #4]
 800e4b6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e4ba:	3901      	subs	r1, #1
 800e4bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e4c0:	ed82 7a00 	vstr	s14, [r2]
 800e4c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e4c8:	edc2 7a01 	vstr	s15, [r2, #4]
 800e4cc:	e78e      	b.n	800e3ec <__kernel_rem_pio2f+0x3e8>
 800e4ce:	ed33 7a01 	vldmdb	r3!, {s14}
 800e4d2:	3c01      	subs	r4, #1
 800e4d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e4d8:	e78f      	b.n	800e3fa <__kernel_rem_pio2f+0x3f6>
 800e4da:	eef1 6a66 	vneg.f32	s13, s13
 800e4de:	eeb1 7a47 	vneg.f32	s14, s14
 800e4e2:	edc8 6a00 	vstr	s13, [r8]
 800e4e6:	ed88 7a01 	vstr	s14, [r8, #4]
 800e4ea:	eef1 7a67 	vneg.f32	s15, s15
 800e4ee:	e790      	b.n	800e412 <__kernel_rem_pio2f+0x40e>

0800e4f0 <__kernel_sinf>:
 800e4f0:	ee10 3a10 	vmov	r3, s0
 800e4f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e4f8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800e4fc:	da04      	bge.n	800e508 <__kernel_sinf+0x18>
 800e4fe:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800e502:	ee17 3a90 	vmov	r3, s15
 800e506:	b35b      	cbz	r3, 800e560 <__kernel_sinf+0x70>
 800e508:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e50c:	eddf 7a15 	vldr	s15, [pc, #84]	; 800e564 <__kernel_sinf+0x74>
 800e510:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800e568 <__kernel_sinf+0x78>
 800e514:	eea7 6a27 	vfma.f32	s12, s14, s15
 800e518:	eddf 7a14 	vldr	s15, [pc, #80]	; 800e56c <__kernel_sinf+0x7c>
 800e51c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e520:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800e570 <__kernel_sinf+0x80>
 800e524:	eea7 6a87 	vfma.f32	s12, s15, s14
 800e528:	eddf 7a12 	vldr	s15, [pc, #72]	; 800e574 <__kernel_sinf+0x84>
 800e52c:	ee60 6a07 	vmul.f32	s13, s0, s14
 800e530:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e534:	b930      	cbnz	r0, 800e544 <__kernel_sinf+0x54>
 800e536:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800e578 <__kernel_sinf+0x88>
 800e53a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800e53e:	eea6 0a26 	vfma.f32	s0, s12, s13
 800e542:	4770      	bx	lr
 800e544:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800e548:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800e54c:	eee0 7a86 	vfma.f32	s15, s1, s12
 800e550:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800e554:	eddf 7a09 	vldr	s15, [pc, #36]	; 800e57c <__kernel_sinf+0x8c>
 800e558:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800e55c:	ee30 0a60 	vsub.f32	s0, s0, s1
 800e560:	4770      	bx	lr
 800e562:	bf00      	nop
 800e564:	2f2ec9d3 	.word	0x2f2ec9d3
 800e568:	b2d72f34 	.word	0xb2d72f34
 800e56c:	3638ef1b 	.word	0x3638ef1b
 800e570:	b9500d01 	.word	0xb9500d01
 800e574:	3c088889 	.word	0x3c088889
 800e578:	be2aaaab 	.word	0xbe2aaaab
 800e57c:	3e2aaaab 	.word	0x3e2aaaab

0800e580 <fabs>:
 800e580:	ec51 0b10 	vmov	r0, r1, d0
 800e584:	ee10 2a10 	vmov	r2, s0
 800e588:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e58c:	ec43 2b10 	vmov	d0, r2, r3
 800e590:	4770      	bx	lr
 800e592:	0000      	movs	r0, r0
 800e594:	0000      	movs	r0, r0
	...

0800e598 <floor>:
 800e598:	ec51 0b10 	vmov	r0, r1, d0
 800e59c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5a0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800e5a4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800e5a8:	2e13      	cmp	r6, #19
 800e5aa:	ee10 5a10 	vmov	r5, s0
 800e5ae:	ee10 8a10 	vmov	r8, s0
 800e5b2:	460c      	mov	r4, r1
 800e5b4:	dc32      	bgt.n	800e61c <floor+0x84>
 800e5b6:	2e00      	cmp	r6, #0
 800e5b8:	da14      	bge.n	800e5e4 <floor+0x4c>
 800e5ba:	a333      	add	r3, pc, #204	; (adr r3, 800e688 <floor+0xf0>)
 800e5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5c0:	f7f1 fe14 	bl	80001ec <__adddf3>
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	f7f2 fa56 	bl	8000a78 <__aeabi_dcmpgt>
 800e5cc:	b138      	cbz	r0, 800e5de <floor+0x46>
 800e5ce:	2c00      	cmp	r4, #0
 800e5d0:	da57      	bge.n	800e682 <floor+0xea>
 800e5d2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e5d6:	431d      	orrs	r5, r3
 800e5d8:	d001      	beq.n	800e5de <floor+0x46>
 800e5da:	4c2d      	ldr	r4, [pc, #180]	; (800e690 <floor+0xf8>)
 800e5dc:	2500      	movs	r5, #0
 800e5de:	4621      	mov	r1, r4
 800e5e0:	4628      	mov	r0, r5
 800e5e2:	e025      	b.n	800e630 <floor+0x98>
 800e5e4:	4f2b      	ldr	r7, [pc, #172]	; (800e694 <floor+0xfc>)
 800e5e6:	4137      	asrs	r7, r6
 800e5e8:	ea01 0307 	and.w	r3, r1, r7
 800e5ec:	4303      	orrs	r3, r0
 800e5ee:	d01f      	beq.n	800e630 <floor+0x98>
 800e5f0:	a325      	add	r3, pc, #148	; (adr r3, 800e688 <floor+0xf0>)
 800e5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5f6:	f7f1 fdf9 	bl	80001ec <__adddf3>
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	f7f2 fa3b 	bl	8000a78 <__aeabi_dcmpgt>
 800e602:	2800      	cmp	r0, #0
 800e604:	d0eb      	beq.n	800e5de <floor+0x46>
 800e606:	2c00      	cmp	r4, #0
 800e608:	bfbe      	ittt	lt
 800e60a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e60e:	fa43 f606 	asrlt.w	r6, r3, r6
 800e612:	19a4      	addlt	r4, r4, r6
 800e614:	ea24 0407 	bic.w	r4, r4, r7
 800e618:	2500      	movs	r5, #0
 800e61a:	e7e0      	b.n	800e5de <floor+0x46>
 800e61c:	2e33      	cmp	r6, #51	; 0x33
 800e61e:	dd0b      	ble.n	800e638 <floor+0xa0>
 800e620:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e624:	d104      	bne.n	800e630 <floor+0x98>
 800e626:	ee10 2a10 	vmov	r2, s0
 800e62a:	460b      	mov	r3, r1
 800e62c:	f7f1 fdde 	bl	80001ec <__adddf3>
 800e630:	ec41 0b10 	vmov	d0, r0, r1
 800e634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e638:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800e63c:	f04f 33ff 	mov.w	r3, #4294967295
 800e640:	fa23 f707 	lsr.w	r7, r3, r7
 800e644:	4207      	tst	r7, r0
 800e646:	d0f3      	beq.n	800e630 <floor+0x98>
 800e648:	a30f      	add	r3, pc, #60	; (adr r3, 800e688 <floor+0xf0>)
 800e64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e64e:	f7f1 fdcd 	bl	80001ec <__adddf3>
 800e652:	2200      	movs	r2, #0
 800e654:	2300      	movs	r3, #0
 800e656:	f7f2 fa0f 	bl	8000a78 <__aeabi_dcmpgt>
 800e65a:	2800      	cmp	r0, #0
 800e65c:	d0bf      	beq.n	800e5de <floor+0x46>
 800e65e:	2c00      	cmp	r4, #0
 800e660:	da02      	bge.n	800e668 <floor+0xd0>
 800e662:	2e14      	cmp	r6, #20
 800e664:	d103      	bne.n	800e66e <floor+0xd6>
 800e666:	3401      	adds	r4, #1
 800e668:	ea25 0507 	bic.w	r5, r5, r7
 800e66c:	e7b7      	b.n	800e5de <floor+0x46>
 800e66e:	2301      	movs	r3, #1
 800e670:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e674:	fa03 f606 	lsl.w	r6, r3, r6
 800e678:	4435      	add	r5, r6
 800e67a:	4545      	cmp	r5, r8
 800e67c:	bf38      	it	cc
 800e67e:	18e4      	addcc	r4, r4, r3
 800e680:	e7f2      	b.n	800e668 <floor+0xd0>
 800e682:	2500      	movs	r5, #0
 800e684:	462c      	mov	r4, r5
 800e686:	e7aa      	b.n	800e5de <floor+0x46>
 800e688:	8800759c 	.word	0x8800759c
 800e68c:	7e37e43c 	.word	0x7e37e43c
 800e690:	bff00000 	.word	0xbff00000
 800e694:	000fffff 	.word	0x000fffff

0800e698 <scalbn>:
 800e698:	b570      	push	{r4, r5, r6, lr}
 800e69a:	ec55 4b10 	vmov	r4, r5, d0
 800e69e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e6a2:	4606      	mov	r6, r0
 800e6a4:	462b      	mov	r3, r5
 800e6a6:	b99a      	cbnz	r2, 800e6d0 <scalbn+0x38>
 800e6a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e6ac:	4323      	orrs	r3, r4
 800e6ae:	d036      	beq.n	800e71e <scalbn+0x86>
 800e6b0:	4b39      	ldr	r3, [pc, #228]	; (800e798 <scalbn+0x100>)
 800e6b2:	4629      	mov	r1, r5
 800e6b4:	ee10 0a10 	vmov	r0, s0
 800e6b8:	2200      	movs	r2, #0
 800e6ba:	f7f1 ff4d 	bl	8000558 <__aeabi_dmul>
 800e6be:	4b37      	ldr	r3, [pc, #220]	; (800e79c <scalbn+0x104>)
 800e6c0:	429e      	cmp	r6, r3
 800e6c2:	4604      	mov	r4, r0
 800e6c4:	460d      	mov	r5, r1
 800e6c6:	da10      	bge.n	800e6ea <scalbn+0x52>
 800e6c8:	a32b      	add	r3, pc, #172	; (adr r3, 800e778 <scalbn+0xe0>)
 800e6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ce:	e03a      	b.n	800e746 <scalbn+0xae>
 800e6d0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e6d4:	428a      	cmp	r2, r1
 800e6d6:	d10c      	bne.n	800e6f2 <scalbn+0x5a>
 800e6d8:	ee10 2a10 	vmov	r2, s0
 800e6dc:	4620      	mov	r0, r4
 800e6de:	4629      	mov	r1, r5
 800e6e0:	f7f1 fd84 	bl	80001ec <__adddf3>
 800e6e4:	4604      	mov	r4, r0
 800e6e6:	460d      	mov	r5, r1
 800e6e8:	e019      	b.n	800e71e <scalbn+0x86>
 800e6ea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e6ee:	460b      	mov	r3, r1
 800e6f0:	3a36      	subs	r2, #54	; 0x36
 800e6f2:	4432      	add	r2, r6
 800e6f4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e6f8:	428a      	cmp	r2, r1
 800e6fa:	dd08      	ble.n	800e70e <scalbn+0x76>
 800e6fc:	2d00      	cmp	r5, #0
 800e6fe:	a120      	add	r1, pc, #128	; (adr r1, 800e780 <scalbn+0xe8>)
 800e700:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e704:	da1c      	bge.n	800e740 <scalbn+0xa8>
 800e706:	a120      	add	r1, pc, #128	; (adr r1, 800e788 <scalbn+0xf0>)
 800e708:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e70c:	e018      	b.n	800e740 <scalbn+0xa8>
 800e70e:	2a00      	cmp	r2, #0
 800e710:	dd08      	ble.n	800e724 <scalbn+0x8c>
 800e712:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e716:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e71a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e71e:	ec45 4b10 	vmov	d0, r4, r5
 800e722:	bd70      	pop	{r4, r5, r6, pc}
 800e724:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e728:	da19      	bge.n	800e75e <scalbn+0xc6>
 800e72a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e72e:	429e      	cmp	r6, r3
 800e730:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800e734:	dd0a      	ble.n	800e74c <scalbn+0xb4>
 800e736:	a112      	add	r1, pc, #72	; (adr r1, 800e780 <scalbn+0xe8>)
 800e738:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d1e2      	bne.n	800e706 <scalbn+0x6e>
 800e740:	a30f      	add	r3, pc, #60	; (adr r3, 800e780 <scalbn+0xe8>)
 800e742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e746:	f7f1 ff07 	bl	8000558 <__aeabi_dmul>
 800e74a:	e7cb      	b.n	800e6e4 <scalbn+0x4c>
 800e74c:	a10a      	add	r1, pc, #40	; (adr r1, 800e778 <scalbn+0xe0>)
 800e74e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d0b8      	beq.n	800e6c8 <scalbn+0x30>
 800e756:	a10e      	add	r1, pc, #56	; (adr r1, 800e790 <scalbn+0xf8>)
 800e758:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e75c:	e7b4      	b.n	800e6c8 <scalbn+0x30>
 800e75e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e762:	3236      	adds	r2, #54	; 0x36
 800e764:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e768:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e76c:	4620      	mov	r0, r4
 800e76e:	4b0c      	ldr	r3, [pc, #48]	; (800e7a0 <scalbn+0x108>)
 800e770:	2200      	movs	r2, #0
 800e772:	e7e8      	b.n	800e746 <scalbn+0xae>
 800e774:	f3af 8000 	nop.w
 800e778:	c2f8f359 	.word	0xc2f8f359
 800e77c:	01a56e1f 	.word	0x01a56e1f
 800e780:	8800759c 	.word	0x8800759c
 800e784:	7e37e43c 	.word	0x7e37e43c
 800e788:	8800759c 	.word	0x8800759c
 800e78c:	fe37e43c 	.word	0xfe37e43c
 800e790:	c2f8f359 	.word	0xc2f8f359
 800e794:	81a56e1f 	.word	0x81a56e1f
 800e798:	43500000 	.word	0x43500000
 800e79c:	ffff3cb0 	.word	0xffff3cb0
 800e7a0:	3c900000 	.word	0x3c900000

0800e7a4 <fabsf>:
 800e7a4:	ee10 3a10 	vmov	r3, s0
 800e7a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e7ac:	ee00 3a10 	vmov	s0, r3
 800e7b0:	4770      	bx	lr
	...

0800e7b4 <floorf>:
 800e7b4:	ee10 3a10 	vmov	r3, s0
 800e7b8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e7bc:	3a7f      	subs	r2, #127	; 0x7f
 800e7be:	2a16      	cmp	r2, #22
 800e7c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e7c4:	dc2a      	bgt.n	800e81c <floorf+0x68>
 800e7c6:	2a00      	cmp	r2, #0
 800e7c8:	da11      	bge.n	800e7ee <floorf+0x3a>
 800e7ca:	eddf 7a18 	vldr	s15, [pc, #96]	; 800e82c <floorf+0x78>
 800e7ce:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e7d2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e7d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7da:	dd05      	ble.n	800e7e8 <floorf+0x34>
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	da23      	bge.n	800e828 <floorf+0x74>
 800e7e0:	4a13      	ldr	r2, [pc, #76]	; (800e830 <floorf+0x7c>)
 800e7e2:	2900      	cmp	r1, #0
 800e7e4:	bf18      	it	ne
 800e7e6:	4613      	movne	r3, r2
 800e7e8:	ee00 3a10 	vmov	s0, r3
 800e7ec:	4770      	bx	lr
 800e7ee:	4911      	ldr	r1, [pc, #68]	; (800e834 <floorf+0x80>)
 800e7f0:	4111      	asrs	r1, r2
 800e7f2:	420b      	tst	r3, r1
 800e7f4:	d0fa      	beq.n	800e7ec <floorf+0x38>
 800e7f6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800e82c <floorf+0x78>
 800e7fa:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e7fe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e806:	ddef      	ble.n	800e7e8 <floorf+0x34>
 800e808:	2b00      	cmp	r3, #0
 800e80a:	bfbe      	ittt	lt
 800e80c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800e810:	fa40 f202 	asrlt.w	r2, r0, r2
 800e814:	189b      	addlt	r3, r3, r2
 800e816:	ea23 0301 	bic.w	r3, r3, r1
 800e81a:	e7e5      	b.n	800e7e8 <floorf+0x34>
 800e81c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800e820:	d3e4      	bcc.n	800e7ec <floorf+0x38>
 800e822:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e826:	4770      	bx	lr
 800e828:	2300      	movs	r3, #0
 800e82a:	e7dd      	b.n	800e7e8 <floorf+0x34>
 800e82c:	7149f2ca 	.word	0x7149f2ca
 800e830:	bf800000 	.word	0xbf800000
 800e834:	007fffff 	.word	0x007fffff

0800e838 <scalbnf>:
 800e838:	ee10 3a10 	vmov	r3, s0
 800e83c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800e840:	d025      	beq.n	800e88e <scalbnf+0x56>
 800e842:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800e846:	d302      	bcc.n	800e84e <scalbnf+0x16>
 800e848:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e84c:	4770      	bx	lr
 800e84e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800e852:	d122      	bne.n	800e89a <scalbnf+0x62>
 800e854:	4b2a      	ldr	r3, [pc, #168]	; (800e900 <scalbnf+0xc8>)
 800e856:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800e904 <scalbnf+0xcc>
 800e85a:	4298      	cmp	r0, r3
 800e85c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e860:	db16      	blt.n	800e890 <scalbnf+0x58>
 800e862:	ee10 3a10 	vmov	r3, s0
 800e866:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e86a:	3a19      	subs	r2, #25
 800e86c:	4402      	add	r2, r0
 800e86e:	2afe      	cmp	r2, #254	; 0xfe
 800e870:	dd15      	ble.n	800e89e <scalbnf+0x66>
 800e872:	ee10 3a10 	vmov	r3, s0
 800e876:	eddf 7a24 	vldr	s15, [pc, #144]	; 800e908 <scalbnf+0xd0>
 800e87a:	eddf 6a24 	vldr	s13, [pc, #144]	; 800e90c <scalbnf+0xd4>
 800e87e:	2b00      	cmp	r3, #0
 800e880:	eeb0 7a67 	vmov.f32	s14, s15
 800e884:	bfb8      	it	lt
 800e886:	eef0 7a66 	vmovlt.f32	s15, s13
 800e88a:	ee27 0a27 	vmul.f32	s0, s14, s15
 800e88e:	4770      	bx	lr
 800e890:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800e910 <scalbnf+0xd8>
 800e894:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e898:	4770      	bx	lr
 800e89a:	0dd2      	lsrs	r2, r2, #23
 800e89c:	e7e6      	b.n	800e86c <scalbnf+0x34>
 800e89e:	2a00      	cmp	r2, #0
 800e8a0:	dd06      	ble.n	800e8b0 <scalbnf+0x78>
 800e8a2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e8a6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800e8aa:	ee00 3a10 	vmov	s0, r3
 800e8ae:	4770      	bx	lr
 800e8b0:	f112 0f16 	cmn.w	r2, #22
 800e8b4:	da1a      	bge.n	800e8ec <scalbnf+0xb4>
 800e8b6:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e8ba:	4298      	cmp	r0, r3
 800e8bc:	ee10 3a10 	vmov	r3, s0
 800e8c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e8c4:	dd0a      	ble.n	800e8dc <scalbnf+0xa4>
 800e8c6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800e908 <scalbnf+0xd0>
 800e8ca:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800e90c <scalbnf+0xd4>
 800e8ce:	eef0 7a40 	vmov.f32	s15, s0
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	bf18      	it	ne
 800e8d6:	eeb0 0a47 	vmovne.f32	s0, s14
 800e8da:	e7db      	b.n	800e894 <scalbnf+0x5c>
 800e8dc:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800e910 <scalbnf+0xd8>
 800e8e0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800e914 <scalbnf+0xdc>
 800e8e4:	eef0 7a40 	vmov.f32	s15, s0
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	e7f3      	b.n	800e8d4 <scalbnf+0x9c>
 800e8ec:	3219      	adds	r2, #25
 800e8ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e8f2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800e8f6:	eddf 7a08 	vldr	s15, [pc, #32]	; 800e918 <scalbnf+0xe0>
 800e8fa:	ee07 3a10 	vmov	s14, r3
 800e8fe:	e7c4      	b.n	800e88a <scalbnf+0x52>
 800e900:	ffff3cb0 	.word	0xffff3cb0
 800e904:	4c000000 	.word	0x4c000000
 800e908:	7149f2ca 	.word	0x7149f2ca
 800e90c:	f149f2ca 	.word	0xf149f2ca
 800e910:	0da24260 	.word	0x0da24260
 800e914:	8da24260 	.word	0x8da24260
 800e918:	33000000 	.word	0x33000000

0800e91c <abort>:
 800e91c:	b508      	push	{r3, lr}
 800e91e:	2006      	movs	r0, #6
 800e920:	f000 f984 	bl	800ec2c <raise>
 800e924:	2001      	movs	r0, #1
 800e926:	f7f7 ff69 	bl	80067fc <_exit>
	...

0800e92c <__errno>:
 800e92c:	4b01      	ldr	r3, [pc, #4]	; (800e934 <__errno+0x8>)
 800e92e:	6818      	ldr	r0, [r3, #0]
 800e930:	4770      	bx	lr
 800e932:	bf00      	nop
 800e934:	20000040 	.word	0x20000040

0800e938 <__libc_init_array>:
 800e938:	b570      	push	{r4, r5, r6, lr}
 800e93a:	4d0d      	ldr	r5, [pc, #52]	; (800e970 <__libc_init_array+0x38>)
 800e93c:	4c0d      	ldr	r4, [pc, #52]	; (800e974 <__libc_init_array+0x3c>)
 800e93e:	1b64      	subs	r4, r4, r5
 800e940:	10a4      	asrs	r4, r4, #2
 800e942:	2600      	movs	r6, #0
 800e944:	42a6      	cmp	r6, r4
 800e946:	d109      	bne.n	800e95c <__libc_init_array+0x24>
 800e948:	4d0b      	ldr	r5, [pc, #44]	; (800e978 <__libc_init_array+0x40>)
 800e94a:	4c0c      	ldr	r4, [pc, #48]	; (800e97c <__libc_init_array+0x44>)
 800e94c:	f000 fa1a 	bl	800ed84 <_init>
 800e950:	1b64      	subs	r4, r4, r5
 800e952:	10a4      	asrs	r4, r4, #2
 800e954:	2600      	movs	r6, #0
 800e956:	42a6      	cmp	r6, r4
 800e958:	d105      	bne.n	800e966 <__libc_init_array+0x2e>
 800e95a:	bd70      	pop	{r4, r5, r6, pc}
 800e95c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e960:	4798      	blx	r3
 800e962:	3601      	adds	r6, #1
 800e964:	e7ee      	b.n	800e944 <__libc_init_array+0xc>
 800e966:	f855 3b04 	ldr.w	r3, [r5], #4
 800e96a:	4798      	blx	r3
 800e96c:	3601      	adds	r6, #1
 800e96e:	e7f2      	b.n	800e956 <__libc_init_array+0x1e>
 800e970:	0800fab8 	.word	0x0800fab8
 800e974:	0800fab8 	.word	0x0800fab8
 800e978:	0800fab8 	.word	0x0800fab8
 800e97c:	0800fac4 	.word	0x0800fac4

0800e980 <__retarget_lock_acquire_recursive>:
 800e980:	4770      	bx	lr

0800e982 <__retarget_lock_release_recursive>:
 800e982:	4770      	bx	lr

0800e984 <memcpy>:
 800e984:	440a      	add	r2, r1
 800e986:	4291      	cmp	r1, r2
 800e988:	f100 33ff 	add.w	r3, r0, #4294967295
 800e98c:	d100      	bne.n	800e990 <memcpy+0xc>
 800e98e:	4770      	bx	lr
 800e990:	b510      	push	{r4, lr}
 800e992:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e996:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e99a:	4291      	cmp	r1, r2
 800e99c:	d1f9      	bne.n	800e992 <memcpy+0xe>
 800e99e:	bd10      	pop	{r4, pc}

0800e9a0 <memset>:
 800e9a0:	4402      	add	r2, r0
 800e9a2:	4603      	mov	r3, r0
 800e9a4:	4293      	cmp	r3, r2
 800e9a6:	d100      	bne.n	800e9aa <memset+0xa>
 800e9a8:	4770      	bx	lr
 800e9aa:	f803 1b01 	strb.w	r1, [r3], #1
 800e9ae:	e7f9      	b.n	800e9a4 <memset+0x4>

0800e9b0 <sbrk_aligned>:
 800e9b0:	b570      	push	{r4, r5, r6, lr}
 800e9b2:	4e0e      	ldr	r6, [pc, #56]	; (800e9ec <sbrk_aligned+0x3c>)
 800e9b4:	460c      	mov	r4, r1
 800e9b6:	6831      	ldr	r1, [r6, #0]
 800e9b8:	4605      	mov	r5, r0
 800e9ba:	b911      	cbnz	r1, 800e9c2 <sbrk_aligned+0x12>
 800e9bc:	f000 f8fe 	bl	800ebbc <_sbrk_r>
 800e9c0:	6030      	str	r0, [r6, #0]
 800e9c2:	4621      	mov	r1, r4
 800e9c4:	4628      	mov	r0, r5
 800e9c6:	f000 f8f9 	bl	800ebbc <_sbrk_r>
 800e9ca:	1c43      	adds	r3, r0, #1
 800e9cc:	d00a      	beq.n	800e9e4 <sbrk_aligned+0x34>
 800e9ce:	1cc4      	adds	r4, r0, #3
 800e9d0:	f024 0403 	bic.w	r4, r4, #3
 800e9d4:	42a0      	cmp	r0, r4
 800e9d6:	d007      	beq.n	800e9e8 <sbrk_aligned+0x38>
 800e9d8:	1a21      	subs	r1, r4, r0
 800e9da:	4628      	mov	r0, r5
 800e9dc:	f000 f8ee 	bl	800ebbc <_sbrk_r>
 800e9e0:	3001      	adds	r0, #1
 800e9e2:	d101      	bne.n	800e9e8 <sbrk_aligned+0x38>
 800e9e4:	f04f 34ff 	mov.w	r4, #4294967295
 800e9e8:	4620      	mov	r0, r4
 800e9ea:	bd70      	pop	{r4, r5, r6, pc}
 800e9ec:	20006cac 	.word	0x20006cac

0800e9f0 <_malloc_r>:
 800e9f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9f4:	1ccd      	adds	r5, r1, #3
 800e9f6:	f025 0503 	bic.w	r5, r5, #3
 800e9fa:	3508      	adds	r5, #8
 800e9fc:	2d0c      	cmp	r5, #12
 800e9fe:	bf38      	it	cc
 800ea00:	250c      	movcc	r5, #12
 800ea02:	2d00      	cmp	r5, #0
 800ea04:	4607      	mov	r7, r0
 800ea06:	db01      	blt.n	800ea0c <_malloc_r+0x1c>
 800ea08:	42a9      	cmp	r1, r5
 800ea0a:	d905      	bls.n	800ea18 <_malloc_r+0x28>
 800ea0c:	230c      	movs	r3, #12
 800ea0e:	603b      	str	r3, [r7, #0]
 800ea10:	2600      	movs	r6, #0
 800ea12:	4630      	mov	r0, r6
 800ea14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea18:	4e2e      	ldr	r6, [pc, #184]	; (800ead4 <_malloc_r+0xe4>)
 800ea1a:	f000 f923 	bl	800ec64 <__malloc_lock>
 800ea1e:	6833      	ldr	r3, [r6, #0]
 800ea20:	461c      	mov	r4, r3
 800ea22:	bb34      	cbnz	r4, 800ea72 <_malloc_r+0x82>
 800ea24:	4629      	mov	r1, r5
 800ea26:	4638      	mov	r0, r7
 800ea28:	f7ff ffc2 	bl	800e9b0 <sbrk_aligned>
 800ea2c:	1c43      	adds	r3, r0, #1
 800ea2e:	4604      	mov	r4, r0
 800ea30:	d14d      	bne.n	800eace <_malloc_r+0xde>
 800ea32:	6834      	ldr	r4, [r6, #0]
 800ea34:	4626      	mov	r6, r4
 800ea36:	2e00      	cmp	r6, #0
 800ea38:	d140      	bne.n	800eabc <_malloc_r+0xcc>
 800ea3a:	6823      	ldr	r3, [r4, #0]
 800ea3c:	4631      	mov	r1, r6
 800ea3e:	4638      	mov	r0, r7
 800ea40:	eb04 0803 	add.w	r8, r4, r3
 800ea44:	f000 f8ba 	bl	800ebbc <_sbrk_r>
 800ea48:	4580      	cmp	r8, r0
 800ea4a:	d13a      	bne.n	800eac2 <_malloc_r+0xd2>
 800ea4c:	6821      	ldr	r1, [r4, #0]
 800ea4e:	3503      	adds	r5, #3
 800ea50:	1a6d      	subs	r5, r5, r1
 800ea52:	f025 0503 	bic.w	r5, r5, #3
 800ea56:	3508      	adds	r5, #8
 800ea58:	2d0c      	cmp	r5, #12
 800ea5a:	bf38      	it	cc
 800ea5c:	250c      	movcc	r5, #12
 800ea5e:	4629      	mov	r1, r5
 800ea60:	4638      	mov	r0, r7
 800ea62:	f7ff ffa5 	bl	800e9b0 <sbrk_aligned>
 800ea66:	3001      	adds	r0, #1
 800ea68:	d02b      	beq.n	800eac2 <_malloc_r+0xd2>
 800ea6a:	6823      	ldr	r3, [r4, #0]
 800ea6c:	442b      	add	r3, r5
 800ea6e:	6023      	str	r3, [r4, #0]
 800ea70:	e00e      	b.n	800ea90 <_malloc_r+0xa0>
 800ea72:	6822      	ldr	r2, [r4, #0]
 800ea74:	1b52      	subs	r2, r2, r5
 800ea76:	d41e      	bmi.n	800eab6 <_malloc_r+0xc6>
 800ea78:	2a0b      	cmp	r2, #11
 800ea7a:	d916      	bls.n	800eaaa <_malloc_r+0xba>
 800ea7c:	1961      	adds	r1, r4, r5
 800ea7e:	42a3      	cmp	r3, r4
 800ea80:	6025      	str	r5, [r4, #0]
 800ea82:	bf18      	it	ne
 800ea84:	6059      	strne	r1, [r3, #4]
 800ea86:	6863      	ldr	r3, [r4, #4]
 800ea88:	bf08      	it	eq
 800ea8a:	6031      	streq	r1, [r6, #0]
 800ea8c:	5162      	str	r2, [r4, r5]
 800ea8e:	604b      	str	r3, [r1, #4]
 800ea90:	4638      	mov	r0, r7
 800ea92:	f104 060b 	add.w	r6, r4, #11
 800ea96:	f000 f8eb 	bl	800ec70 <__malloc_unlock>
 800ea9a:	f026 0607 	bic.w	r6, r6, #7
 800ea9e:	1d23      	adds	r3, r4, #4
 800eaa0:	1af2      	subs	r2, r6, r3
 800eaa2:	d0b6      	beq.n	800ea12 <_malloc_r+0x22>
 800eaa4:	1b9b      	subs	r3, r3, r6
 800eaa6:	50a3      	str	r3, [r4, r2]
 800eaa8:	e7b3      	b.n	800ea12 <_malloc_r+0x22>
 800eaaa:	6862      	ldr	r2, [r4, #4]
 800eaac:	42a3      	cmp	r3, r4
 800eaae:	bf0c      	ite	eq
 800eab0:	6032      	streq	r2, [r6, #0]
 800eab2:	605a      	strne	r2, [r3, #4]
 800eab4:	e7ec      	b.n	800ea90 <_malloc_r+0xa0>
 800eab6:	4623      	mov	r3, r4
 800eab8:	6864      	ldr	r4, [r4, #4]
 800eaba:	e7b2      	b.n	800ea22 <_malloc_r+0x32>
 800eabc:	4634      	mov	r4, r6
 800eabe:	6876      	ldr	r6, [r6, #4]
 800eac0:	e7b9      	b.n	800ea36 <_malloc_r+0x46>
 800eac2:	230c      	movs	r3, #12
 800eac4:	603b      	str	r3, [r7, #0]
 800eac6:	4638      	mov	r0, r7
 800eac8:	f000 f8d2 	bl	800ec70 <__malloc_unlock>
 800eacc:	e7a1      	b.n	800ea12 <_malloc_r+0x22>
 800eace:	6025      	str	r5, [r4, #0]
 800ead0:	e7de      	b.n	800ea90 <_malloc_r+0xa0>
 800ead2:	bf00      	nop
 800ead4:	20006ca8 	.word	0x20006ca8

0800ead8 <realloc>:
 800ead8:	4b02      	ldr	r3, [pc, #8]	; (800eae4 <realloc+0xc>)
 800eada:	460a      	mov	r2, r1
 800eadc:	4601      	mov	r1, r0
 800eade:	6818      	ldr	r0, [r3, #0]
 800eae0:	f000 b918 	b.w	800ed14 <_realloc_r>
 800eae4:	20000040 	.word	0x20000040

0800eae8 <cleanup_glue>:
 800eae8:	b538      	push	{r3, r4, r5, lr}
 800eaea:	460c      	mov	r4, r1
 800eaec:	6809      	ldr	r1, [r1, #0]
 800eaee:	4605      	mov	r5, r0
 800eaf0:	b109      	cbz	r1, 800eaf6 <cleanup_glue+0xe>
 800eaf2:	f7ff fff9 	bl	800eae8 <cleanup_glue>
 800eaf6:	4621      	mov	r1, r4
 800eaf8:	4628      	mov	r0, r5
 800eafa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eafe:	f000 b8bd 	b.w	800ec7c <_free_r>
	...

0800eb04 <_reclaim_reent>:
 800eb04:	4b2c      	ldr	r3, [pc, #176]	; (800ebb8 <_reclaim_reent+0xb4>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	4283      	cmp	r3, r0
 800eb0a:	b570      	push	{r4, r5, r6, lr}
 800eb0c:	4604      	mov	r4, r0
 800eb0e:	d051      	beq.n	800ebb4 <_reclaim_reent+0xb0>
 800eb10:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800eb12:	b143      	cbz	r3, 800eb26 <_reclaim_reent+0x22>
 800eb14:	68db      	ldr	r3, [r3, #12]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d14a      	bne.n	800ebb0 <_reclaim_reent+0xac>
 800eb1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb1c:	6819      	ldr	r1, [r3, #0]
 800eb1e:	b111      	cbz	r1, 800eb26 <_reclaim_reent+0x22>
 800eb20:	4620      	mov	r0, r4
 800eb22:	f000 f8ab 	bl	800ec7c <_free_r>
 800eb26:	6961      	ldr	r1, [r4, #20]
 800eb28:	b111      	cbz	r1, 800eb30 <_reclaim_reent+0x2c>
 800eb2a:	4620      	mov	r0, r4
 800eb2c:	f000 f8a6 	bl	800ec7c <_free_r>
 800eb30:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800eb32:	b111      	cbz	r1, 800eb3a <_reclaim_reent+0x36>
 800eb34:	4620      	mov	r0, r4
 800eb36:	f000 f8a1 	bl	800ec7c <_free_r>
 800eb3a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800eb3c:	b111      	cbz	r1, 800eb44 <_reclaim_reent+0x40>
 800eb3e:	4620      	mov	r0, r4
 800eb40:	f000 f89c 	bl	800ec7c <_free_r>
 800eb44:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800eb46:	b111      	cbz	r1, 800eb4e <_reclaim_reent+0x4a>
 800eb48:	4620      	mov	r0, r4
 800eb4a:	f000 f897 	bl	800ec7c <_free_r>
 800eb4e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800eb50:	b111      	cbz	r1, 800eb58 <_reclaim_reent+0x54>
 800eb52:	4620      	mov	r0, r4
 800eb54:	f000 f892 	bl	800ec7c <_free_r>
 800eb58:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800eb5a:	b111      	cbz	r1, 800eb62 <_reclaim_reent+0x5e>
 800eb5c:	4620      	mov	r0, r4
 800eb5e:	f000 f88d 	bl	800ec7c <_free_r>
 800eb62:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800eb64:	b111      	cbz	r1, 800eb6c <_reclaim_reent+0x68>
 800eb66:	4620      	mov	r0, r4
 800eb68:	f000 f888 	bl	800ec7c <_free_r>
 800eb6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eb6e:	b111      	cbz	r1, 800eb76 <_reclaim_reent+0x72>
 800eb70:	4620      	mov	r0, r4
 800eb72:	f000 f883 	bl	800ec7c <_free_r>
 800eb76:	69a3      	ldr	r3, [r4, #24]
 800eb78:	b1e3      	cbz	r3, 800ebb4 <_reclaim_reent+0xb0>
 800eb7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800eb7c:	4620      	mov	r0, r4
 800eb7e:	4798      	blx	r3
 800eb80:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800eb82:	b1b9      	cbz	r1, 800ebb4 <_reclaim_reent+0xb0>
 800eb84:	4620      	mov	r0, r4
 800eb86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eb8a:	f7ff bfad 	b.w	800eae8 <cleanup_glue>
 800eb8e:	5949      	ldr	r1, [r1, r5]
 800eb90:	b941      	cbnz	r1, 800eba4 <_reclaim_reent+0xa0>
 800eb92:	3504      	adds	r5, #4
 800eb94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb96:	2d80      	cmp	r5, #128	; 0x80
 800eb98:	68d9      	ldr	r1, [r3, #12]
 800eb9a:	d1f8      	bne.n	800eb8e <_reclaim_reent+0x8a>
 800eb9c:	4620      	mov	r0, r4
 800eb9e:	f000 f86d 	bl	800ec7c <_free_r>
 800eba2:	e7ba      	b.n	800eb1a <_reclaim_reent+0x16>
 800eba4:	680e      	ldr	r6, [r1, #0]
 800eba6:	4620      	mov	r0, r4
 800eba8:	f000 f868 	bl	800ec7c <_free_r>
 800ebac:	4631      	mov	r1, r6
 800ebae:	e7ef      	b.n	800eb90 <_reclaim_reent+0x8c>
 800ebb0:	2500      	movs	r5, #0
 800ebb2:	e7ef      	b.n	800eb94 <_reclaim_reent+0x90>
 800ebb4:	bd70      	pop	{r4, r5, r6, pc}
 800ebb6:	bf00      	nop
 800ebb8:	20000040 	.word	0x20000040

0800ebbc <_sbrk_r>:
 800ebbc:	b538      	push	{r3, r4, r5, lr}
 800ebbe:	4d06      	ldr	r5, [pc, #24]	; (800ebd8 <_sbrk_r+0x1c>)
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	4604      	mov	r4, r0
 800ebc4:	4608      	mov	r0, r1
 800ebc6:	602b      	str	r3, [r5, #0]
 800ebc8:	f7f7 fe22 	bl	8006810 <_sbrk>
 800ebcc:	1c43      	adds	r3, r0, #1
 800ebce:	d102      	bne.n	800ebd6 <_sbrk_r+0x1a>
 800ebd0:	682b      	ldr	r3, [r5, #0]
 800ebd2:	b103      	cbz	r3, 800ebd6 <_sbrk_r+0x1a>
 800ebd4:	6023      	str	r3, [r4, #0]
 800ebd6:	bd38      	pop	{r3, r4, r5, pc}
 800ebd8:	20006cb0 	.word	0x20006cb0

0800ebdc <_raise_r>:
 800ebdc:	291f      	cmp	r1, #31
 800ebde:	b538      	push	{r3, r4, r5, lr}
 800ebe0:	4604      	mov	r4, r0
 800ebe2:	460d      	mov	r5, r1
 800ebe4:	d904      	bls.n	800ebf0 <_raise_r+0x14>
 800ebe6:	2316      	movs	r3, #22
 800ebe8:	6003      	str	r3, [r0, #0]
 800ebea:	f04f 30ff 	mov.w	r0, #4294967295
 800ebee:	bd38      	pop	{r3, r4, r5, pc}
 800ebf0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ebf2:	b112      	cbz	r2, 800ebfa <_raise_r+0x1e>
 800ebf4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ebf8:	b94b      	cbnz	r3, 800ec0e <_raise_r+0x32>
 800ebfa:	4620      	mov	r0, r4
 800ebfc:	f000 f830 	bl	800ec60 <_getpid_r>
 800ec00:	462a      	mov	r2, r5
 800ec02:	4601      	mov	r1, r0
 800ec04:	4620      	mov	r0, r4
 800ec06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec0a:	f000 b817 	b.w	800ec3c <_kill_r>
 800ec0e:	2b01      	cmp	r3, #1
 800ec10:	d00a      	beq.n	800ec28 <_raise_r+0x4c>
 800ec12:	1c59      	adds	r1, r3, #1
 800ec14:	d103      	bne.n	800ec1e <_raise_r+0x42>
 800ec16:	2316      	movs	r3, #22
 800ec18:	6003      	str	r3, [r0, #0]
 800ec1a:	2001      	movs	r0, #1
 800ec1c:	e7e7      	b.n	800ebee <_raise_r+0x12>
 800ec1e:	2400      	movs	r4, #0
 800ec20:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ec24:	4628      	mov	r0, r5
 800ec26:	4798      	blx	r3
 800ec28:	2000      	movs	r0, #0
 800ec2a:	e7e0      	b.n	800ebee <_raise_r+0x12>

0800ec2c <raise>:
 800ec2c:	4b02      	ldr	r3, [pc, #8]	; (800ec38 <raise+0xc>)
 800ec2e:	4601      	mov	r1, r0
 800ec30:	6818      	ldr	r0, [r3, #0]
 800ec32:	f7ff bfd3 	b.w	800ebdc <_raise_r>
 800ec36:	bf00      	nop
 800ec38:	20000040 	.word	0x20000040

0800ec3c <_kill_r>:
 800ec3c:	b538      	push	{r3, r4, r5, lr}
 800ec3e:	4d07      	ldr	r5, [pc, #28]	; (800ec5c <_kill_r+0x20>)
 800ec40:	2300      	movs	r3, #0
 800ec42:	4604      	mov	r4, r0
 800ec44:	4608      	mov	r0, r1
 800ec46:	4611      	mov	r1, r2
 800ec48:	602b      	str	r3, [r5, #0]
 800ec4a:	f7f7 fdc7 	bl	80067dc <_kill>
 800ec4e:	1c43      	adds	r3, r0, #1
 800ec50:	d102      	bne.n	800ec58 <_kill_r+0x1c>
 800ec52:	682b      	ldr	r3, [r5, #0]
 800ec54:	b103      	cbz	r3, 800ec58 <_kill_r+0x1c>
 800ec56:	6023      	str	r3, [r4, #0]
 800ec58:	bd38      	pop	{r3, r4, r5, pc}
 800ec5a:	bf00      	nop
 800ec5c:	20006cb0 	.word	0x20006cb0

0800ec60 <_getpid_r>:
 800ec60:	f7f7 bdb4 	b.w	80067cc <_getpid>

0800ec64 <__malloc_lock>:
 800ec64:	4801      	ldr	r0, [pc, #4]	; (800ec6c <__malloc_lock+0x8>)
 800ec66:	f7ff be8b 	b.w	800e980 <__retarget_lock_acquire_recursive>
 800ec6a:	bf00      	nop
 800ec6c:	20006ca4 	.word	0x20006ca4

0800ec70 <__malloc_unlock>:
 800ec70:	4801      	ldr	r0, [pc, #4]	; (800ec78 <__malloc_unlock+0x8>)
 800ec72:	f7ff be86 	b.w	800e982 <__retarget_lock_release_recursive>
 800ec76:	bf00      	nop
 800ec78:	20006ca4 	.word	0x20006ca4

0800ec7c <_free_r>:
 800ec7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ec7e:	2900      	cmp	r1, #0
 800ec80:	d044      	beq.n	800ed0c <_free_r+0x90>
 800ec82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec86:	9001      	str	r0, [sp, #4]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	f1a1 0404 	sub.w	r4, r1, #4
 800ec8e:	bfb8      	it	lt
 800ec90:	18e4      	addlt	r4, r4, r3
 800ec92:	f7ff ffe7 	bl	800ec64 <__malloc_lock>
 800ec96:	4a1e      	ldr	r2, [pc, #120]	; (800ed10 <_free_r+0x94>)
 800ec98:	9801      	ldr	r0, [sp, #4]
 800ec9a:	6813      	ldr	r3, [r2, #0]
 800ec9c:	b933      	cbnz	r3, 800ecac <_free_r+0x30>
 800ec9e:	6063      	str	r3, [r4, #4]
 800eca0:	6014      	str	r4, [r2, #0]
 800eca2:	b003      	add	sp, #12
 800eca4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eca8:	f7ff bfe2 	b.w	800ec70 <__malloc_unlock>
 800ecac:	42a3      	cmp	r3, r4
 800ecae:	d908      	bls.n	800ecc2 <_free_r+0x46>
 800ecb0:	6825      	ldr	r5, [r4, #0]
 800ecb2:	1961      	adds	r1, r4, r5
 800ecb4:	428b      	cmp	r3, r1
 800ecb6:	bf01      	itttt	eq
 800ecb8:	6819      	ldreq	r1, [r3, #0]
 800ecba:	685b      	ldreq	r3, [r3, #4]
 800ecbc:	1949      	addeq	r1, r1, r5
 800ecbe:	6021      	streq	r1, [r4, #0]
 800ecc0:	e7ed      	b.n	800ec9e <_free_r+0x22>
 800ecc2:	461a      	mov	r2, r3
 800ecc4:	685b      	ldr	r3, [r3, #4]
 800ecc6:	b10b      	cbz	r3, 800eccc <_free_r+0x50>
 800ecc8:	42a3      	cmp	r3, r4
 800ecca:	d9fa      	bls.n	800ecc2 <_free_r+0x46>
 800eccc:	6811      	ldr	r1, [r2, #0]
 800ecce:	1855      	adds	r5, r2, r1
 800ecd0:	42a5      	cmp	r5, r4
 800ecd2:	d10b      	bne.n	800ecec <_free_r+0x70>
 800ecd4:	6824      	ldr	r4, [r4, #0]
 800ecd6:	4421      	add	r1, r4
 800ecd8:	1854      	adds	r4, r2, r1
 800ecda:	42a3      	cmp	r3, r4
 800ecdc:	6011      	str	r1, [r2, #0]
 800ecde:	d1e0      	bne.n	800eca2 <_free_r+0x26>
 800ece0:	681c      	ldr	r4, [r3, #0]
 800ece2:	685b      	ldr	r3, [r3, #4]
 800ece4:	6053      	str	r3, [r2, #4]
 800ece6:	4421      	add	r1, r4
 800ece8:	6011      	str	r1, [r2, #0]
 800ecea:	e7da      	b.n	800eca2 <_free_r+0x26>
 800ecec:	d902      	bls.n	800ecf4 <_free_r+0x78>
 800ecee:	230c      	movs	r3, #12
 800ecf0:	6003      	str	r3, [r0, #0]
 800ecf2:	e7d6      	b.n	800eca2 <_free_r+0x26>
 800ecf4:	6825      	ldr	r5, [r4, #0]
 800ecf6:	1961      	adds	r1, r4, r5
 800ecf8:	428b      	cmp	r3, r1
 800ecfa:	bf04      	itt	eq
 800ecfc:	6819      	ldreq	r1, [r3, #0]
 800ecfe:	685b      	ldreq	r3, [r3, #4]
 800ed00:	6063      	str	r3, [r4, #4]
 800ed02:	bf04      	itt	eq
 800ed04:	1949      	addeq	r1, r1, r5
 800ed06:	6021      	streq	r1, [r4, #0]
 800ed08:	6054      	str	r4, [r2, #4]
 800ed0a:	e7ca      	b.n	800eca2 <_free_r+0x26>
 800ed0c:	b003      	add	sp, #12
 800ed0e:	bd30      	pop	{r4, r5, pc}
 800ed10:	20006ca8 	.word	0x20006ca8

0800ed14 <_realloc_r>:
 800ed14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed18:	4680      	mov	r8, r0
 800ed1a:	4614      	mov	r4, r2
 800ed1c:	460e      	mov	r6, r1
 800ed1e:	b921      	cbnz	r1, 800ed2a <_realloc_r+0x16>
 800ed20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ed24:	4611      	mov	r1, r2
 800ed26:	f7ff be63 	b.w	800e9f0 <_malloc_r>
 800ed2a:	b92a      	cbnz	r2, 800ed38 <_realloc_r+0x24>
 800ed2c:	f7ff ffa6 	bl	800ec7c <_free_r>
 800ed30:	4625      	mov	r5, r4
 800ed32:	4628      	mov	r0, r5
 800ed34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed38:	f000 f81b 	bl	800ed72 <_malloc_usable_size_r>
 800ed3c:	4284      	cmp	r4, r0
 800ed3e:	4607      	mov	r7, r0
 800ed40:	d802      	bhi.n	800ed48 <_realloc_r+0x34>
 800ed42:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ed46:	d812      	bhi.n	800ed6e <_realloc_r+0x5a>
 800ed48:	4621      	mov	r1, r4
 800ed4a:	4640      	mov	r0, r8
 800ed4c:	f7ff fe50 	bl	800e9f0 <_malloc_r>
 800ed50:	4605      	mov	r5, r0
 800ed52:	2800      	cmp	r0, #0
 800ed54:	d0ed      	beq.n	800ed32 <_realloc_r+0x1e>
 800ed56:	42bc      	cmp	r4, r7
 800ed58:	4622      	mov	r2, r4
 800ed5a:	4631      	mov	r1, r6
 800ed5c:	bf28      	it	cs
 800ed5e:	463a      	movcs	r2, r7
 800ed60:	f7ff fe10 	bl	800e984 <memcpy>
 800ed64:	4631      	mov	r1, r6
 800ed66:	4640      	mov	r0, r8
 800ed68:	f7ff ff88 	bl	800ec7c <_free_r>
 800ed6c:	e7e1      	b.n	800ed32 <_realloc_r+0x1e>
 800ed6e:	4635      	mov	r5, r6
 800ed70:	e7df      	b.n	800ed32 <_realloc_r+0x1e>

0800ed72 <_malloc_usable_size_r>:
 800ed72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed76:	1f18      	subs	r0, r3, #4
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	bfbc      	itt	lt
 800ed7c:	580b      	ldrlt	r3, [r1, r0]
 800ed7e:	18c0      	addlt	r0, r0, r3
 800ed80:	4770      	bx	lr
	...

0800ed84 <_init>:
 800ed84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed86:	bf00      	nop
 800ed88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed8a:	bc08      	pop	{r3}
 800ed8c:	469e      	mov	lr, r3
 800ed8e:	4770      	bx	lr

0800ed90 <_fini>:
 800ed90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed92:	bf00      	nop
 800ed94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed96:	bc08      	pop	{r3}
 800ed98:	469e      	mov	lr, r3
 800ed9a:	4770      	bx	lr
